/*
  NudeNet
  author: <https://github.com/vladmandic>'
*/

var lL=Object.create;var _b=Object.defineProperty;var uL=Object.getOwnPropertyDescriptor;var cL=Object.getOwnPropertyNames;var pL=Object.getPrototypeOf,mL=Object.prototype.hasOwnProperty;var so=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),qt=(r,t)=>{for(var e in t)_b(r,e,{get:t[e],enumerable:!0})},fL=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of cL(t))!mL.call(r,n)&&n!==e&&_b(r,n,{get:()=>t[n],enumerable:!(o=uL(t,n))||o.enumerable});return r};var Yp=(r,t,e)=>(e=r!=null?lL(pL(r)):{},fL(t||!r||!r.__esModule?_b(e,"default",{value:r,enumerable:!0}):e,r));var Xv=so((tY,jv)=>{jv.exports=be;var wo=null;try{wo=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function be(r,t,e){this.low=r|0,this.high=t|0,this.unsigned=!!e}be.prototype.__isLong__;Object.defineProperty(be.prototype,"__isLong__",{value:!0});function jr(r){return(r&&r.__isLong__)===!0}be.isLong=jr;var Mv={},Bv={};function el(r,t){var e,o,n;return t?(r>>>=0,(n=0<=r&&r<256)&&(o=Bv[r],o)?o:(e=we(r,(r|0)<0?-1:0,!0),n&&(Bv[r]=e),e)):(r|=0,(n=-128<=r&&r<128)&&(o=Mv[r],o)?o:(e=we(r,r<0?-1:0,!1),n&&(Mv[r]=e),e))}be.fromInt=el;function Co(r,t){if(isNaN(r))return t?tl:vo;if(t){if(r<0)return tl;if(r>=Uv)return Kv}else{if(r<=-Gv)return Kr;if(r+1>=Gv)return qv}return r<0?Co(-r,t).neg():we(r%uc|0,r/uc|0,t)}be.fromNumber=Co;function we(r,t,e){return new be(r,t,e)}be.fromBits=we;var Ch=Math.pow;function jb(r,t,e){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return vo;if(typeof t=="number"?(e=t,t=!1):t=!!t,e=e||10,e<2||36<e)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return jb(r.substring(1),t,e).neg();for(var n=Co(Ch(e,8)),s=vo,i=0;i<r.length;i+=8){var a=Math.min(8,r.length-i),l=parseInt(r.substring(i,i+a),e);if(a<8){var u=Co(Ch(e,a));s=s.mul(u).add(Co(l))}else s=s.mul(n),s=s.add(Co(l))}return s.unsigned=t,s}be.fromString=jb;function qo(r,t){return typeof r=="number"?Co(r,t):typeof r=="string"?jb(r,t):we(r.low,r.high,typeof t=="boolean"?t:r.unsigned)}be.fromValue=qo;var Vv=1<<16,OL=1<<24,uc=Vv*Vv,Uv=uc*uc,Gv=Uv/2,Wv=el(OL),vo=el(0);be.ZERO=vo;var tl=el(0,!0);be.UZERO=tl;var lc=el(1);be.ONE=lc;var Hv=el(1,!0);be.UONE=Hv;var Kb=el(-1);be.NEG_ONE=Kb;var qv=we(-1,2147483647,!1);be.MAX_VALUE=qv;var Kv=we(-1,-1,!0);be.MAX_UNSIGNED_VALUE=Kv;var Kr=we(0,-2147483648,!1);be.MIN_VALUE=Kr;var ut=be.prototype;ut.toInt=function(){return this.unsigned?this.low>>>0:this.low};ut.toNumber=function(){return this.unsigned?(this.high>>>0)*uc+(this.low>>>0):this.high*uc+(this.low>>>0)};ut.toString=function(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(Kr)){var e=Co(t),o=this.div(e),n=o.mul(e).sub(this);return o.toString(t)+n.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var s=Co(Ch(t,6),this.unsigned),i=this,a="";;){var l=i.div(s),u=i.sub(l.mul(s)).toInt()>>>0,c=u.toString(t);if(i=l,i.isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}};ut.getHighBits=function(){return this.high};ut.getHighBitsUnsigned=function(){return this.high>>>0};ut.getLowBits=function(){return this.low};ut.getLowBitsUnsigned=function(){return this.low>>>0};ut.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Kr)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,e=31;e>0&&(t&1<<e)==0;e--);return this.high!=0?e+33:e+1};ut.isZero=function(){return this.high===0&&this.low===0};ut.eqz=ut.isZero;ut.isNegative=function(){return!this.unsigned&&this.high<0};ut.isPositive=function(){return this.unsigned||this.high>=0};ut.isOdd=function(){return(this.low&1)===1};ut.isEven=function(){return(this.low&1)===0};ut.equals=function(t){return jr(t)||(t=qo(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};ut.eq=ut.equals;ut.notEquals=function(t){return!this.eq(t)};ut.neq=ut.notEquals;ut.ne=ut.notEquals;ut.lessThan=function(t){return this.comp(t)<0};ut.lt=ut.lessThan;ut.lessThanOrEqual=function(t){return this.comp(t)<=0};ut.lte=ut.lessThanOrEqual;ut.le=ut.lessThanOrEqual;ut.greaterThan=function(t){return this.comp(t)>0};ut.gt=ut.greaterThan;ut.greaterThanOrEqual=function(t){return this.comp(t)>=0};ut.gte=ut.greaterThanOrEqual;ut.ge=ut.greaterThanOrEqual;ut.compare=function(t){if(jr(t)||(t=qo(t)),this.eq(t))return 0;var e=this.isNegative(),o=t.isNegative();return e&&!o?-1:!e&&o?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};ut.comp=ut.compare;ut.negate=function(){return!this.unsigned&&this.eq(Kr)?Kr:this.not().add(lc)};ut.neg=ut.negate;ut.add=function(t){jr(t)||(t=qo(t));var e=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,i=t.high>>>16,a=t.high&65535,l=t.low>>>16,u=t.low&65535,c=0,p=0,m=0,f=0;return f+=s+u,m+=f>>>16,f&=65535,m+=n+l,p+=m>>>16,m&=65535,p+=o+a,c+=p>>>16,p&=65535,c+=e+i,c&=65535,we(m<<16|f,c<<16|p,this.unsigned)};ut.subtract=function(t){return jr(t)||(t=qo(t)),this.add(t.neg())};ut.sub=ut.subtract;ut.multiply=function(t){if(this.isZero())return vo;if(jr(t)||(t=qo(t)),wo){var e=wo.mul(this.low,this.high,t.low,t.high);return we(e,wo.get_high(),this.unsigned)}if(t.isZero())return vo;if(this.eq(Kr))return t.isOdd()?Kr:vo;if(t.eq(Kr))return this.isOdd()?Kr:vo;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(Wv)&&t.lt(Wv))return Co(this.toNumber()*t.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,i=this.low&65535,a=t.high>>>16,l=t.high&65535,u=t.low>>>16,c=t.low&65535,p=0,m=0,f=0,h=0;return h+=i*c,f+=h>>>16,h&=65535,f+=s*c,m+=f>>>16,f&=65535,f+=i*u,m+=f>>>16,f&=65535,m+=n*c,p+=m>>>16,m&=65535,m+=s*u,p+=m>>>16,m&=65535,m+=i*l,p+=m>>>16,m&=65535,p+=o*c+n*u+s*l+i*a,p&=65535,we(f<<16|h,p<<16|m,this.unsigned)};ut.mul=ut.multiply;ut.divide=function(t){if(jr(t)||(t=qo(t)),t.isZero())throw Error("division by zero");if(wo){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var e=(this.unsigned?wo.div_u:wo.div_s)(this.low,this.high,t.low,t.high);return we(e,wo.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?tl:vo;var o,n,s;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return tl;if(t.gt(this.shru(1)))return Hv;s=tl}else{if(this.eq(Kr)){if(t.eq(lc)||t.eq(Kb))return Kr;if(t.eq(Kr))return lc;var i=this.shr(1);return o=i.div(t).shl(1),o.eq(vo)?t.isNegative()?lc:Kb:(n=this.sub(t.mul(o)),s=o.add(n.div(t)),s)}else if(t.eq(Kr))return this.unsigned?tl:vo;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();s=vo}for(n=this;n.gte(t);){o=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(o)/Math.LN2),l=a<=48?1:Ch(2,a-48),u=Co(o),c=u.mul(t);c.isNegative()||c.gt(n);)o-=l,u=Co(o,this.unsigned),c=u.mul(t);u.isZero()&&(u=lc),s=s.add(u),n=n.sub(c)}return s};ut.div=ut.divide;ut.modulo=function(t){if(jr(t)||(t=qo(t)),wo){var e=(this.unsigned?wo.rem_u:wo.rem_s)(this.low,this.high,t.low,t.high);return we(e,wo.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};ut.mod=ut.modulo;ut.rem=ut.modulo;ut.not=function(){return we(~this.low,~this.high,this.unsigned)};ut.and=function(t){return jr(t)||(t=qo(t)),we(this.low&t.low,this.high&t.high,this.unsigned)};ut.or=function(t){return jr(t)||(t=qo(t)),we(this.low|t.low,this.high|t.high,this.unsigned)};ut.xor=function(t){return jr(t)||(t=qo(t)),we(this.low^t.low,this.high^t.high,this.unsigned)};ut.shiftLeft=function(t){return jr(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?we(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):we(0,this.low<<t-32,this.unsigned)};ut.shl=ut.shiftLeft;ut.shiftRight=function(t){return jr(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?we(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):we(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};ut.shr=ut.shiftRight;ut.shiftRightUnsigned=function(t){if(jr(t)&&(t=t.toInt()),t&=63,t===0)return this;var e=this.high;if(t<32){var o=this.low;return we(o>>>t|e<<32-t,e>>>t,this.unsigned)}else return t===32?we(e,0,this.unsigned):we(e>>>t-32,0,this.unsigned)};ut.shru=ut.shiftRightUnsigned;ut.shr_u=ut.shiftRightUnsigned;ut.toSigned=function(){return this.unsigned?we(this.low,this.high,!1):this};ut.toUnsigned=function(){return this.unsigned?this:we(this.low,this.high,!0)};ut.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()};ut.toBytesLE=function(){var t=this.high,e=this.low;return[e&255,e>>>8&255,e>>>16&255,e>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};ut.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,e>>>24,e>>>16&255,e>>>8&255,e&255]};be.fromBytes=function(t,e,o){return o?be.fromBytesLE(t,e):be.fromBytesBE(t,e)};be.fromBytesLE=function(t,e){return new be(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)};be.fromBytesBE=function(t,e){return new be(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}});var $S=so(()=>{});var AS=so(()=>{});var IT=so((TT,Ow)=>{(function(r,t,e){function o(a){var l=this,u=i();l.next=function(){var c=2091639*l.s0+l.c*23283064365386963e-26;return l.s0=l.s1,l.s1=l.s2,l.s2=c-(l.c=c|0)},l.c=1,l.s0=u(" "),l.s1=u(" "),l.s2=u(" "),l.s0-=u(a),l.s0<0&&(l.s0+=1),l.s1-=u(a),l.s1<0&&(l.s1+=1),l.s2-=u(a),l.s2<0&&(l.s2+=1),u=null}function n(a,l){return l.c=a.c,l.s0=a.s0,l.s1=a.s1,l.s2=a.s2,l}function s(a,l){var u=new o(a),c=l&&l.state,p=u.next;return p.int32=function(){return u.next()*4294967296|0},p.double=function(){return p()+(p()*2097152|0)*11102230246251565e-32},p.quick=p,c&&(typeof c=="object"&&n(c,u),p.state=function(){return n(u,{})}),p}function i(){var a=4022871197,l=function(u){u=String(u);for(var c=0;c<u.length;c++){a+=u.charCodeAt(c);var p=.02519603282416938*a;a=p>>>0,p-=a,p*=a,a=p>>>0,p-=a,a+=p*4294967296}return(a>>>0)*23283064365386963e-26};return l}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.alea=s})(TT,typeof Ow=="object"&&Ow,typeof define=="function"&&define)});var kT=so((NT,Lw)=>{(function(r,t,e){function o(i){var a=this,l="";a.x=0,a.y=0,a.z=0,a.w=0,a.next=function(){var c=a.x^a.x<<11;return a.x=a.y,a.y=a.z,a.z=a.w,a.w^=a.w>>>19^c^c>>>8},i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor128=s})(NT,typeof Lw=="object"&&Lw,typeof define=="function"&&define)});var $T=so((ET,Pw)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.x^a.x>>>2;return a.x=a.y,a.y=a.z,a.z=a.w,a.w=a.v,(a.d=a.d+362437|0)+(a.v=a.v^a.v<<4^(c^c<<1))|0},a.x=0,a.y=0,a.z=0,a.w=0,a.v=0,i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,u==l.length&&(a.d=a.x<<10^a.x>>>4),a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a.v=i.v,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorwow=s})(ET,typeof Pw=="object"&&Pw,typeof define=="function"&&define)});var DT=so((AT,zw)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.x,c=a.i,p,m,f;return p=u[c],p^=p>>>7,m=p^p<<24,p=u[c+1&7],m^=p^p>>>10,p=u[c+3&7],m^=p^p>>>3,p=u[c+4&7],m^=p^p<<7,p=u[c+7&7],p=p^p<<13,m^=p^p<<9,u[c]=m,a.i=c+1&7,m};function l(u,c){var p,m,f=[];if(c===(c|0))m=f[0]=c;else for(c=""+c,p=0;p<c.length;++p)f[p&7]=f[p&7]<<15^c.charCodeAt(p)+f[p+1&7]<<13;for(;f.length<8;)f.push(0);for(p=0;p<8&&f[p]===0;++p);for(p==8?m=f[7]=-1:m=f[p],u.x=f,u.i=0,p=256;p>0;--p)u.next()}l(a,i)}function n(i,a){return a.x=i.x.slice(),a.i=i.i,a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.x&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorshift7=s})(AT,typeof zw=="object"&&zw,typeof define=="function"&&define)});var FT=so((RT,Mw)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.w,c=a.X,p=a.i,m,f;return a.w=u=u+1640531527|0,f=c[p+34&127],m=c[p=p+1&127],f^=f<<13,m^=m<<17,f^=f>>>15,m^=m>>>12,f=c[p]=f^m,a.i=p,f+(u^u>>>16)|0};function l(u,c){var p,m,f,h,d,g=[],x=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,x=Math.max(x,c.length)),f=0,h=-32;h<x;++h)c&&(m^=c.charCodeAt((h+32)%c.length)),h===0&&(d=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,h>=0&&(d=d+1640531527|0,p=g[h&127]^=m+d,f=p==0?f+1:0);for(f>=128&&(g[(c&&c.length||0)&127]=-1),f=127,h=4*128;h>0;--h)m=g[f+34&127],p=g[f=f+1&127],m^=m<<13,p^=p<<17,m^=m>>>15,p^=p>>>12,g[f]=m^p;u.w=d,u.X=g,u.i=f}l(a,i)}function n(i,a){return a.i=i.i,a.w=i.w,a.X=i.X.slice(),a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.X&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor4096=s})(RT,typeof Mw=="object"&&Mw,typeof define=="function"&&define)});var OT=so((_T,Bw)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.b,p=a.c,m=a.d,f=a.a;return c=c<<25^c>>>7^p,p=p-m|0,m=m<<24^m>>>8^f,f=f-c|0,a.b=c=c<<20^c>>>12^p,a.c=p=p-m|0,a.d=m<<16^p>>>16^f,a.a=f-c|0},a.a=0,a.b=0,a.c=-1640531527,a.d=1367130551,i===Math.floor(i)?(a.a=i/4294967296|0,a.b=i|0):l+=i;for(var u=0;u<l.length+20;u++)a.b^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.a=i.a,a.b=i.b,a.c=i.c,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.tychei=s})(_T,typeof Bw=="object"&&Bw,typeof define=="function"&&define)});var LT=so(()=>{});var zT=so((PT,kd)=>{(function(r,t,e){var o=256,n=6,s=52,i="random",a=e.pow(o,n),l=e.pow(2,s),u=l*2,c=o-1,p;function m(w,C,I){var $=[];C=C==!0?{entropy:!0}:C||{};var D=g(d(C.entropy?[w,b(t)]:w??x(),3),$),F=new f($),O=function(){for(var L=F.g(n),B=a,V=0;L<l;)L=(L+V)*o,B*=o,V=F.g(1);for(;L>=u;)L/=2,B/=2,V>>>=1;return(L+V)/B};return O.int32=function(){return F.g(4)|0},O.quick=function(){return F.g(4)/4294967296},O.double=O,g(b(F.S),t),(C.pass||I||function(L,B,V,G){return G&&(G.S&&h(G,F),L.state=function(){return h(F,{})}),V?(e[i]=L,B):L})(O,D,"global"in C?C.global:this==e,C.state)}function f(w){var C,I=w.length,$=this,D=0,F=$.i=$.j=0,O=$.S=[];for(I||(w=[I++]);D<o;)O[D]=D++;for(D=0;D<o;D++)O[D]=O[F=c&F+w[D%I]+(C=O[D])],O[F]=C;($.g=function(L){for(var B,V=0,G=$.i,U=$.j,W=$.S;L--;)B=W[G=c&G+1],V=V*o+W[c&(W[G]=W[U=c&U+B])+(W[U]=B)];return $.i=G,$.j=U,V})(o)}function h(w,C){return C.i=w.i,C.j=w.j,C.S=w.S.slice(),C}function d(w,C){var I=[],$=typeof w,D;if(C&&$=="object")for(D in w)try{I.push(d(w[D],C-1))}catch{}return I.length?I:$=="string"?w:w+"\0"}function g(w,C){for(var I=w+"",$,D=0;D<I.length;)C[c&D]=c&($^=C[c&D]*19)+I.charCodeAt(D++);return b(C)}function x(){try{var w;return p&&(w=p.randomBytes)?w=w(o):(w=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(w)),b(w)}catch{var C=r.navigator,I=C&&C.plugins;return[+new Date,r,I,r.screen,b(t)]}}function b(w){return String.fromCharCode.apply(0,w)}if(g(e.random(),t),typeof kd=="object"&&kd.exports){kd.exports=m;try{p=LT()}catch{}}else typeof define=="function"&&define.amd?define(function(){return m}):e["seed"+i]=m})(typeof self<"u"?self:PT,[],Math)});var ym=so((apt,MT)=>{var NM=IT(),kM=kT(),EM=$T(),$M=DT(),AM=FT(),DM=OT(),xl=zT();xl.alea=NM;xl.xor128=kM;xl.xorwow=EM;xl.xorshift7=$M;xl.xor4096=AM;xl.tychei=DM;MT.exports=xl});var lE=so(()=>{});var Ba=class{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}},Wn=class{refCount(t){return io("refCount")}incRef(t){return io("incRef")}timerAvailable(){return!0}time(t){return io("time")}read(t){return io("read")}readSync(t){return io("readSync")}readToGPU(t,e){return io("readToGPU")}numDataIds(){return io("numDataIds")}disposeData(t,e){return io("disposeData")}write(t,e,o){return io("write")}move(t,e,o,n,s){return io("move")}memory(){return io("memory")}floatPrecision(){return io("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return io("dispose")}};function io(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Ev(r){let t=r.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,xh(r,t,e)}function hL(r,t){if(r.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t.length}`);let e=r.length,o=0;for(;e>0;)o=Math.random()*e|0,e--,xh(r,e,o),xh(t,e,o)}function eu(r,t,e){return Math.max(r,Math.min(t,e))}function dL(r){return r%2===0?r:r+1}function xh(r,t,e){let o=r[t];r[t]=r[e],r[e]=o}function gL(r){let t=0;for(let e=0;e<r.length;e++)t+=r[e];return t}function xL(r,t){let e=Math.random();return t*e+(1-e)*r}function yL(r,t){let e=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(t[o]);e+=n*n}return e}function E(r,t){if(!r)throw new Error(typeof t=="string"?t:t())}function Se(r,t,e=""){E(bo(r,t),()=>e+` Shapes ${r} and ${t} must match`)}function ao(r){E(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function ui(r,t=[],e=!1){if(t==null&&(t=[]),Array.isArray(r)||qr(r)&&!e)for(let o=0;o<r.length;++o)ui(r[o],t,e);else t.push(r);return t}function Ot(r){if(r.length===0)return 1;let t=r[0];for(let e=1;e<r.length;e++)t*=r[e];return t}function bL(r){return r.length===0}function bo(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function Un(r){return r%1===0}function wL(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let t=Math.exp(2*r);return(t-1)/(t+1)}}function CL(r){let t=Math.ceil(Math.sqrt(r));return[t,Math.ceil(r/t)]}function vL(r){let t=new Uint32Array(r);for(let e=0;e<r;++e)t[e]=e;return Ev(t),t}function Ga(r,t){return t<=r.length?r:r+" ".repeat(t-r.length)}function SL(r,t=o=>0,e){return new Promise((o,n)=>{let s=0,i=()=>{if(r()){o();return}s++;let a=t(s);if(e!=null&&s>=e){n();return}setTimeout(i,a)};i()})}function TL(r,t){let e=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)e*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${r}`);return r}if(e===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(t%e!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);let n=r.slice();return n[o]=t/e,n}function Le(r,t){let e=t.length;return r=r==null?t.map((o,n)=>n):[].concat(r),E(r.every(o=>o>=-e&&o<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`),E(r.every(o=>Un(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?e+o:o)}function Ob(r,t){let e=[],o=[],n=t!=null&&Array.isArray(t)&&t.length===0,s=t==null||n?null:Le(t,r).sort(),i=0;for(let a=0;a<r.length;++a){if(s!=null){if(s[i]===a&&r[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${r[a]}' is not 1`);(s[i]==null||s[i]>a)&&r[a]===1&&(e.push(r[a]),o.push(a)),s[i]<=a&&i++}r[a]!==1&&(e.push(r[a]),o.push(a))}return{newShape:e,keptDims:o}}function Lb(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else throw new Error(`Unknown data type ${r}`);return e}function Pb(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else if(r==="string")e=new Array(t);else throw new Error(`Unknown data type ${r}`);return e}function zb(r,t){for(let e=0;e<r.length;e++){let o=r[e];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${t} being uploaded contains ${o}.`)}}function Mb(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function IL(r,t){return!(t==="complex64"||t==="float32"&&r!=="complex64"||t==="int32"&&r!=="float32"&&r!=="complex64"||t==="bool"&&r==="bool")}function qr(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}function yh(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function Bb(r){if(r==null)return 0;let t=0;return r.forEach(e=>t+=e.length),t}function ru(r){return typeof r=="string"||r instanceof String}function $v(r){return typeof r=="boolean"}function Av(r){return typeof r=="number"}function ou(r){return Array.isArray(r)?ou(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":Av(r)?"float32":ru(r)?"string":$v(r)?"bool":"float32"}function nu(r){return!!(r&&r.constructor&&r.call&&r.apply)}function su(r,t){for(let e=t;e<r;++e)if(r%e===0)return e;return r}function un(r){let t=r.length;if(t<2)return[];let e=new Array(t-1);e[t-2]=r[t-1];for(let o=t-3;o>=0;--o)e[o]=e[o+1]*r[o+1];return e}function Dv(r,t,e,o=!1){let n=new Array;if(t.length===1){let s=t[0]*(o?2:1);for(let i=0;i<s;i++)n[i]=e[r+i]}else{let s=t[0],i=t.slice(1),a=i.reduce((l,u)=>l*u)*(o?2:1);for(let l=0;l<s;l++)n[l]=Dv(r+l*a,i,e,o)}return n}function Va(r,t,e=!1){if(r.length===0)return t[0];let o=r.reduce((n,s)=>n*s)*(e?2:1);if(o===0)return[];if(o!==t.length)throw new Error(`[${r}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Dv(0,r,t,e)}function Zp(r,t){let e=iu(r,t);for(let o=0;o<e.length;o++)e[o]=1;return e}function iu(r,t){if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${t}`)}function NL(r,t){let e=r.reduce((o,n)=>o*n,1);if(t==null||t==="float32")return Va(r,new Float32Array(e));if(t==="int32")return Va(r,new Int32Array(e));if(t==="bool")return Va(r,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Jp(r){r.forEach(t=>{E(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function kL(r,t,e){if(t===0)return 0;if(t===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=e[n]*r[n];return o}function EL(r,t,e){if(t===0)return[];if(t===1)return[r];let o=new Array(t);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/e[n]),r-=o[n]*e[n];return o[o.length-1]=r,o}function Qp(r){return r&&r.then&&typeof r.then=="function"}var Rv="tfjsflags",tm=class{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=AL,this.populateURLFlags()}setPlatform(t,e){this.platform!=null&&(z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,o){if(this.flagRegistry[t]={evaluationFn:e,setHook:o},this.urlFlags[t]!=null){let n=this.urlFlags[t];z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${n}.`),this.set(t,n)}}async getAsync(t){return t in this.flags?this.flags[t]:(this.flags[t]=await this.evaluateFlag(t),this.flags[t])}get(t){if(t in this.flags)return this.flags[t];let e=this.evaluateFlag(t);if(Qp(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(this.flagRegistry[t]==null)throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,this.flagRegistry[t].setHook!=null&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(this.flagRegistry[t]==null)throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;let t=this.getQueryParams(this.global.location.search);Rv in t&&t[Rv].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=RL(n,s)})}};function AL(r){let t={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...o)=>(DL(t,o[0],o[1]),o.join("="))),t}function DL(r,t,e){r[decodeURIComponent(t)]=decodeURIComponent(e||"")}function RL(r,t){if(t=t.toLowerCase(),t==="true"||t==="false")return t==="true";if(`${+t}`===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${r}.`)}function z(){return Vb}var Vb=null;function Fv(r){Vb=r}var Gb;function Wb(){if(Gb==null){let r;if(typeof window<"u")r=window;else if(typeof global<"u")r=global;else if(typeof process<"u")r=process;else if(typeof self<"u")r=self;else throw new Error("Could not find a global object");Gb=r}return Gb}function FL(){let r=Wb();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function em(r,t){let e=FL();if(e.has(r))return e.get(r);{let o=t();return e.set(r,o),e.get(r)}}var ci="Abs",Hn="Acos",qn="Acosh",Ho="Add",pi="AddN",au="All",lu="Any",mi="ArgMax",fi="ArgMin",Kn="Asin",jn="Asinh",Xn="Atan",Yn="Atanh",Zn="Atan2",hi="AvgPool",uu="AvgPoolGrad",di="AvgPool3D",cu="AvgPool3DGrad",gi="BatchMatMul",xi="BatchToSpaceND",pu="Bincount",_v="BroadcastTo",mu="BroadcastArgs",cn="Cast",Jn="Ceil",Qn="ClipByValue",fu="Complex",yi="ComplexAbs",bi="Concat",wi="Conv2D",hu="Conv2DBackpropFilter",Ci="Conv2DBackpropInput",vi="Conv3D",du="Conv3DBackpropFilterV2",gu="Conv3DBackpropInputV2",ts="Cos",es="Cosh",xu="Cumprod",Si="Cumsum",yu="CropAndResize",bu="DenseBincount",wu="DepthToSpace",Ti="DepthwiseConv2dNative",Cu="DepthwiseConv2dNativeBackpropFilter",vu="DepthwiseConv2dNativeBackpropInput",Su="Diag",Ii="Dilation2D",rm="Dilation2DBackpropInput",om="Dilation2DBackpropFilter",rs="RealDiv",Tu="Einsum",os="Elu",Iu="EluGrad",ns="Erf",Wa="Equal",ss="Exp",Ni="ExpandDims",is="Expm1",Nu="FFT",ku="Fill",Eu="FlipLeftRight",as="Floor",ls="FloorDiv",ki="FusedBatchNorm",Ei="GatherV2",$u="GatherNd",Ua="Greater",us="GreaterEqual",pn="Identity",Au="IFFT",Du="Imag",cs="IsFinite",ps="IsInf",ms="IsNan",$i="LeakyRelu",Ha="Less",qa="LessEqual",Ru="LinSpace",fs="Log",hs="Log1p",Ka="LogicalAnd",ja="LogicalNot",Xa="LogicalOr";var Ov="LogSoftmax";var Ai="LRN",Fu="LRNGrad",Di="Max",ds="Maximum",Ri="MaxPool",_u="MaxPoolGrad",Fi="MaxPool3D",Ou="MaxPool3DGrad",Lu="MaxPoolWithArgmax",_i="Mean",Oi="Min",gs="Minimum",Li="MirrorPad",xs="Mod",Pu="Multinomial",ys="Multiply",Pi="Neg",Ya="NotEqual",zu="NonMaxSuppressionV3",Mu="NonMaxSuppressionV4",Bu="NonMaxSuppressionV5",zi="OnesLike",Mi="OneHot",Bi="Pack",Vi="PadV2";var bs="Pow",Gi="Prelu",Wi="Prod",Vu="RaggedTensorToTensor",Gu="Range",Wu="Real",ws="Reciprocal",Cs="Relu",Ui="Reshape",Hi="ResizeNearestNeighbor",Uu="ResizeNearestNeighborGrad",qi="ResizeBilinear",Hu="ResizeBilinearGrad",vs="Relu6",Ki="Reverse",Ss="Round",Ts="Rsqrt",qu="ScatterNd",Ku="SearchSorted",ji="Select",Is="Selu",Xi="Slice",Ns="Sin",ks="Sinh",Es="Sign",$s="Sigmoid",As="Softplus",Ds="Sqrt",Yi="Sum",Zi="SpaceToBatchND",Ji="SplitV",Qi="Softmax",ju="SparseFillEmptyRows",Xu="SparseReshape",Yu="SparseSegmentMean",Zu="SparseSegmentSum",Ju="SparseToDense",Rs="SquaredDifference",Qu="Square",tc="StridedSlice",ec="StringNGrams",rc="StringSplit",oc="StringToHashBucketFast",Fs="Sub",_s="Tan",Os="Tanh",mn="Tile",nc="TopK",sc="Transform",fn="Transpose",ic="Unique",ta="Unpack",ea="UnsortedSegmentSum";var ra="ZerosLike",Ls="Step",nm="FromPixels",ac="RotateWithOffset",Za="_FusedMatMul",Ja="FusedConv2D",Qa="FusedDepthwiseConv2D";function hn(...r){z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(...r)}function _L(...r){z().getBool("IS_TEST")||z().getBool("PROD")||console.log(...r)}var bh=em("kernelRegistry",()=>new Map),Ub=em("gradRegistry",()=>new Map);function sm(r,t){let e=zv(r,t);return bh.get(e)}function Hb(r){return Ub.get(r)}function qb(r){let t=bh.entries(),e=[];for(;;){let{done:o,value:n}=t.next();if(o)break;let[s,i]=n,[a]=s.split("_");a===r&&e.push(i)}return e}function wh(r){let{kernelName:t,backendName:e}=r,o=zv(t,e);bh.has(o)&&hn(`The kernel '${t}' for backend '${e}' is already registered`),bh.set(o,r)}function Pv(r){let{kernelName:t}=r;Ub.has(t)&&z().getBool("DEBUG")&&hn(`Overriding the gradient for '${t}'`),Ub.set(t,r)}function zv(r,t){return`${t}_${r}`}var y={};qt(y,{arraysEqual:()=>bo,assert:()=>E,assertNonNegativeIntegerDimensions:()=>Jp,assertNonNull:()=>ao,assertShapesMatch:()=>Se,bytesFromStringArray:()=>Bb,bytesPerElement:()=>yh,checkConversionForErrors:()=>zb,clamp:()=>eu,computeStrides:()=>un,createScalarValue:()=>VL,createShuffledIndices:()=>vL,decodeString:()=>mc,distSquared:()=>yL,encodeString:()=>pc,fetch:()=>WL,fingerPrint64:()=>BL,flatten:()=>ui,getArrayFromDType:()=>Pb,getTypedArrayFromDType:()=>Lb,hasEncodingLoss:()=>IL,hexToLong:()=>im,indexToLoc:()=>EL,inferDtype:()=>ou,inferFromImplicitShape:()=>TL,isBoolean:()=>$v,isFunction:()=>nu,isInt:()=>Un,isNumber:()=>Av,isPromise:()=>Qp,isScalarShape:()=>bL,isString:()=>ru,isTypedArray:()=>qr,isValidDtype:()=>Mb,locToIndex:()=>kL,makeOnesTypedArray:()=>Zp,makeZerosNestedTypedArray:()=>NL,makeZerosTypedArray:()=>iu,nearestDivisor:()=>su,nearestLargerEven:()=>dL,now:()=>nl,parseAxisParam:()=>Le,randUniform:()=>xL,repeatedTry:()=>SL,rightPad:()=>Ga,shuffle:()=>Ev,shuffleCombo:()=>hL,sizeFromShape:()=>Ot,sizeToSquarishShape:()=>CL,squeezeShape:()=>Ob,sum:()=>gL,swap:()=>xh,tanh:()=>wL,toNestedArray:()=>Va,toTypedArray:()=>cc});var Yb=Yp(Xv());var ol=Yb.default||Yb;function im(r){return ol.fromString(r,!0,16)}var Zv=im("c3a5c85c97cb3127"),rl=im("b492b66fbe98f273"),vr=im("9ae16a3b2f90404f");function Xb(r){return r.xor(r.shru(47))}function Jv(r,t,e){let o=r.slice(t,t+e);return ol.fromBytes(Array.from(o),!0,!0)}function fe(r,t){return Jv(r,t,8)}function Yv(r,t){return Jv(r,t,4)}function Ze(r,t){return t===0?r:r.shru(t).or(r.shl(64-t))}function oa(r,t,e=im("9ddfea08eb382d69")){let o=r.xor(t).mul(e);o=o.xor(o.shru(47));let n=t.xor(o).mul(e);return n=n.xor(n.shru(47)),n=n.mul(e),n}function LL(r,t,e,o,n,s){n=n.add(r),s=Ze(s.add(n).add(o),21);let i=n;return n=n.add(t),n=n.add(e),s=s.add(Ze(n,44)),[n.add(o),s.add(i)]}function vh(r,t,e,o){return LL(fe(r,t),fe(r,t+8),fe(r,t+16),fe(r,t+24),e,o)}function PL(r,t=r.length){if(t>=8){let e=vr.add(t*2),o=fe(r,0).add(vr),n=fe(r,t-8),s=Ze(n,37).mul(e).add(o),i=Ze(o,25).add(n).mul(e);return oa(s,i,e)}if(t>=4){let e=vr.add(t*2),o=Yv(r,0);return oa(o.shl(3).add(t),Yv(r,t-4),e)}if(t>0){let e=r[0],o=r[t>>1],n=r[t-1],s=e+(o<<8),i=t+(n<<2);return Xb(vr.mul(s).xor(Zv.mul(i))).mul(vr)}return vr}function zL(r,t=r.length){let e=vr.add(t*2),o=fe(r,0).mul(rl),n=fe(r,8),s=fe(r,t-8).mul(e),i=fe(r,t-16).mul(vr);return oa(Ze(o.add(n),43).add(Ze(s,30)).add(i),o.add(Ze(n.add(vr),18)).add(s),e)}function ML(r,t=r.length){let e=vr.add(t*2),o=fe(r,0).mul(vr),n=fe(r,8),s=fe(r,t-8).mul(e),i=fe(r,t-16).mul(vr),a=Ze(o.add(n),43).add(Ze(s,30)).add(i),l=oa(a,o.add(Ze(n.add(vr),18)).add(s),e),u=fe(r,16).mul(e),c=fe(r,24),p=a.add(fe(r,t-32)).mul(e),m=l.add(fe(r,t-24)).mul(e);return oa(Ze(u.add(c),43).add(Ze(p,30)).add(m),u.add(Ze(c.add(o),18)).add(p),e)}function BL(r,t=r.length){let e=ol.fromNumber(81,!0);if(t<=32)return t<=16?PL(r,t):zL(r,t);if(t<=64)return ML(r,t);let o=e,n=e.mul(rl).add(113),s=Xb(n.mul(vr).add(113)).mul(vr),i=[ol.UZERO,ol.UZERO],a=[ol.UZERO,ol.UZERO];o=o.mul(vr).add(fe(r,0));let l=0,u=(t-1>>6)*64,c=u+(t-1&63)-63;do o=Ze(o.add(n).add(i[0]).add(fe(r,l+8)),37).mul(rl),n=Ze(n.add(i[1]).add(fe(r,l+48)),42).mul(rl),o=o.xor(a[1]),n=n.add(i[0]).add(fe(r,l+40)),s=Ze(s.add(a[0]),33).mul(rl),i=vh(r,l,i[1].mul(rl),o.add(a[0])),a=vh(r,l+32,s.add(a[1]),n.add(fe(r,l+16))),[s,o]=[o,s],l+=64;while(l!==u);let p=rl.add(s.and(255).shl(1));return l=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),o=Ze(o.add(n).add(i[0]).add(fe(r,l+8)),37).mul(p),n=Ze(n.add(i[1]).add(fe(r,l+48)),42).mul(p),o=o.xor(a[1].mul(9)),n=n.add(i[0].mul(9).add(fe(r,l+40))),s=Ze(s.add(a[0]),33).mul(p),i=vh(r,l,i[1].mul(p),o.add(a[0])),a=vh(r,l+32,s.add(a[1]),n.add(fe(r,l+16))),[s,o]=[o,s],oa(oa(i[0],a[0],p).add(Xb(n).mul(Zv)).add(s),oa(i[1],a[1],p).add(o),p)}function VL(r,t){return t==="string"?pc(r):cc([r],t)}function GL(r,t){return r instanceof Float32Array&&t==="float32"||r instanceof Int32Array&&t==="int32"||r instanceof Uint8Array&&t==="bool"}function cc(r,t){if(t==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=ui(r)),z().getBool("DEBUG")&&zb(r,t),GL(r,t))return r;if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"){let e=new Uint8Array(r.length);for(let o=0;o<e.length;++o)Math.round(r[o])!==0&&(e[o]=1);return e}else throw new Error(`Unknown data type ${t}`)}function nl(){return z().platform.now()}function WL(r,t){return z().platform.fetch(r,t)}function pc(r,t="utf-8"){return t=t||"utf-8",z().platform.encode(r,t)}function mc(r,t="utf-8"){return t=t||"utf-8",z().platform.decode(r,t)}var Sh=class{constructor(t,e){this.backendTimer=t,this.logger=e,e==null&&(this.logger=new Zb)}profileKernel(t,e,o){let n,s=()=>{n=o()},i,a=nl();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();i=Promise.resolve({kernelMs:nl()-a})}if(z().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(p=>{UL(p,c.dtype,t)})}return{kernelName:t,outputs:n,inputs:e,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(t){let{kernelName:e,outputs:o,timeMs:n,inputs:s,extraInfo:i}=t;o.forEach(a=>{Promise.all([a.data(),n,i]).then(l=>{this.logger.logKernelProfile(e,a,l[0],l[1],s,l[2])})})}};function UL(r,t,e){if(t!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${e}'`),!0}return!1}var Zb=class{logKernelProfile(t,e,o,n,s,i){let a=typeof n=="number"?Ga(`${n}ms`,9):n.error,l=Ga(t,25),u=e.rank,c=e.size,p=Ga(e.shape.toString(),14),m="";for(let f in s){let h=s[f];if(h!=null){let d=h.shape||e.shape,g=d.length;m+=`${f}: ${g}D ${g>0?d:""} `}}console.log(`%c${l}	%c${a}	%c${u}D ${p}	%c${c}	%c${m}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function Qv(r,t,e){let o={},n={};for(let l=0;l<t.length;l++)o[t[l].id]=!0;for(let l=0;l<r.length;l++){let u=r[l],c=u.inputs;for(let p in c){let m=c[p],f=!1;for(let h=0;h<t.length;h++)if(o[m.id]){u.outputs.forEach(d=>o[d.id]=!0),f=!0,n[u.id]=!0;break}if(f)break}}let s={};s[e.id]=!0;let i={};for(let l=r.length-1;l>=0;l--){let u=r[l],c=u.inputs;for(let p=0;p<u.outputs.length;p++)if(s[u.outputs[p].id]){for(let m in c)s[c[m].id]=!0,i[u.id]=!0;break}}let a=[];for(let l=0;l<r.length;l++){let u=r[l];if(n[u.id]&&i[u.id]){let c={};for(let m in u.inputs){let f=u.inputs[m];o[f.id]&&(c[m]=f)}let p=Object.assign({},u);p.inputs=c,p.outputs=u.outputs,a.push(p)}}return a}function tS(r,t,e,o){for(let n=t.length-1;n>=0;n--){let s=t[n],i=[];if(s.outputs.forEach(l=>{let u=r[l.id];u!=null?i.push(u):i.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let a=s.gradient(i);for(let l in s.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);let u=e(()=>a[l]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[l];if(!bo(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let p=r[c.id];r[c.id]=o(p,u),p.dispose()}}}}var eS=20,am=3,Jb=7;function rS(r,t,e,o){let n=un(t),s=HL(r,t,e,n),i=t.length,a=Th(r,t,e,n,s),l=["Tensor"];return o&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join(`
`)),l.join(`
`)}function HL(r,t,e,o){let n=Ot(t),s=o[o.length-1],i=new Array(s).fill(0),a=t.length,l=e==="complex64"?um(r):r;if(a>1)for(let u=0;u<n/s;u++){let c=u*s;for(let p=0;p<s;p++)i[p]=Math.max(i[p],lm(l[c+p],0,e).length)}return i}function lm(r,t,e){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(Jb))} + ${parseFloat(r[1].toFixed(Jb))}j`:ru(r)?o=`'${r}'`:e==="bool"?o=oS(r):o=parseFloat(r.toFixed(Jb)).toString(),Ga(o,t)}function oS(r){return r===0?"false":"true"}function Th(r,t,e,o,n,s=!0){let i=e==="complex64"?2:1,a=t[0],l=t.length;if(l===0){if(e==="complex64"){let d=um(r);return[lm(d[0],0,e)]}return e==="bool"?[oS(r[0])]:[r[0].toString()]}if(l===1){if(a>eS){let g=am*i,x=Array.from(r.slice(0,g)),b=Array.from(r.slice((a-am)*i,a*i));return e==="complex64"&&(x=um(x),b=um(b)),["["+x.map((w,C)=>lm(w,n[C],e)).join(", ")+", ..., "+b.map((w,C)=>lm(w,n[a-am+C],e)).join(", ")+"]"]}let d=e==="complex64"?um(r):Array.from(r);return["["+d.map((g,x)=>lm(g,n[x],e)).join(", ")+"]"]}let u=t.slice(1),c=o.slice(1),p=o[0]*i,m=[];if(a>eS){for(let d=0;d<am;d++){let g=d*p,x=g+p;m.push(...Th(r.slice(g,x),u,e,c,n,!1))}m.push("...");for(let d=a-am;d<a;d++){let g=d*p,x=g+p;m.push(...Th(r.slice(g,x),u,e,c,n,d===a-1))}}else for(let d=0;d<a;d++){let g=d*p,x=g+p;m.push(...Th(r.slice(g,x),u,e,c,n,d===a-1))}let f=l===2?",":"";m[0]="["+m[0]+f;for(let d=1;d<m.length-1;d++)m[d]=" "+m[d]+f;let h=`,
`;for(let d=2;d<l;d++)h+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":h),m}function um(r){let t=[];for(let e=0;e<r.length;e+=2)t.push([r[e],r[e+1]]);return t}var Ut=class{constructor(t,e,o){if(this.dtype=e,this.shape=t.slice(),this.size=Ot(t),o!=null){let n=o.length;E(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(e==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||Pb(e,this.size),this.strides=un(t)}set(t,...e){e.length===0&&(e=[0]),E(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);let o=this.locToIndex(e);this.values[o]=t}get(...t){t.length===0&&(t=[0]);let e=0;for(let n of t){if(n<0||n>=this.shape[e]){let s=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(s)}e++}let o=t[t.length-1];for(let n=0;n<t.length-1;++n)o+=this.strides[n]*t[n];return this.values[o]}locToIndex(t){if(this.rank===0)return 0;if(this.rank===1)return t[0];let e=t[t.length-1];for(let o=0;o<t.length-1;++o)e+=this.strides[o]*t[o];return e}indexToLoc(t){if(this.rank===0)return[];if(this.rank===1)return[t];let e=new Array(this.shape.length);for(let o=0;o<e.length-1;++o)e[o]=Math.floor(t/this.strides[o]),t-=e[o]*this.strides[o];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Ko().makeTensor(this.values,this.shape,this.dtype)}},Ko=null,fc=null,qL=null;function nS(r){Ko=r}function sS(r){fc=r}function iS(r){qL=r}var At=class{constructor(t,e,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Ot(t),this.strides=un(t),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let t=await this.data();return fc.buffer(this.shape,this.dtype,t)}bufferSync(){return fc.buffer(this.shape,this.dtype,this.dataSync())}async array(){let t=await this.data();return Va(this.shape,t,this.dtype==="complex64")}arraySync(){return Va(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let t=Ko().read(this.dataId);if(this.dtype==="string"){let e=await t;try{return e.map(o=>mc(o))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),Ko().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();let t=Ko().readSync(this.dataId);if(this.dtype==="string")try{return t.map(e=>mc(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();let t=await Ko().read(this.dataId);return this.dtype==="string"?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Ko().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return fc.print(this,t)}clone(){return this.throwIfDisposed(),fc.clone(this)}toString(t=!1){let e=this.dataSync();return rS(e,this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),fc.cast(this,t)}variable(t=!0,e,o){return this.throwIfDisposed(),Ko().makeVariable(this,t,e,o)}};Object.defineProperty(At,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function _(){return em("Tensor",()=>At)}_();var Ps=class extends At{constructor(t,e,o,n){super(t.shape,t.dtype,t.dataId,n),this.trainable=e,this.name=o}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!bo(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Ko().disposeTensor(this),this.dataId=t.dataId,Ko().incRef(this,null)}dispose(){Ko().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(Ps,Symbol.hasInstance,{value:r=>r instanceof At&&r.assign!=null&&r.assign instanceof Function});var So={};qt(So,{assertTypesMatch:()=>nw,getTensorsInContainer:()=>cm,isTensorInList:()=>jL,makeTypesMatch:()=>Rt});var Qb;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(Qb||(Qb={}));var tw;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(tw||(tw={}));var ew;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(ew||(ew={}));var rw;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(rw||(rw={}));var ow;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(ow||(ow={}));var KL={float32:rw,int32:tw,bool:ew,complex64:ow};function Fe(r,t){if(r==="string"||t==="string"){if(r==="string"&&t==="string")return"string";throw new Error(`Can not upcast ${r} with ${t}`)}return KL[r][t]}function sl(r){return Fe(r,"int32")}function Rt(r,t){if(r.dtype===t.dtype)return[r,t];let e=Fe(r.dtype,t.dtype);return[r.cast(e),t.cast(e)]}function nw(r,t){E(r.dtype===t.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${t.dtype}) input must match`)}function jL(r,t){return t.some(e=>e.id===r.id)}function cm(r){let t=[];return aS(r,t,new Set),t}function aS(r,t,e){if(r==null)return;if(r instanceof At){t.push(r);return}if(!XL(r))return;let o=r;for(let n in o){let s=o[n];e.has(s)||(e.add(s),aS(s,t,e))}}function XL(r){return Array.isArray(r)||typeof r=="object"}function sw(r){return r.kernelName!=null}var Ih=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(let t in this.registeredVariables)this.registeredVariables[t].dispose()}},na=class{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ih}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry))if(t in this.registryFactory){let{asyncInit:e}=this.initializeBackend(t);if(e)return null}else return null;return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,o=1){return t in this.registryFactory?(hn(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:o},!0)}async setBackend(t){if(this.registryFactory[t]==null)throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,this.registry[t]==null){this.backendInstance=null;let{success:e,asyncInit:o}=this.initializeBackend(t);if(!(o?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Sh(this.backendInstance),!0}setupRegisteredKernels(){qb(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){qb(t).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[t])})}initializeBackend(t){let e=this.registryFactory[t];if(e==null)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{let o=e.factory();if(o&&!(o instanceof Wn)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(i=>n<this.pendingBackendInitId?!1:(this.registry[t]=i,this.pendingBackendInit=null,!0)).catch(i=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,hn(`Initialization of backend ${t} failed`),hn(i.stack||i.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[t]=o,{success:!0,asyncInit:!1}}catch(o){return hn(`Initialization of backend ${t} failed`),hn(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){let o=this.state.tensorInfo.get(e),n=o.backend,s=this.readSync(e),i=n.refCount(e);n.disposeData(e,!0),o.backend=t,t.move(e,s,o.shape,o.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let o=null;if(e==null){if(typeof t!="function")throw new Error("Please provide a function to tidy()");e=t}else{if(typeof t!="string"&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof e!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,o){t();try{let n=o();return e(),n}catch(n){throw e(),n}}nextTensorId(){return na.nextTensorId++}nextVariableId(){return na.nextVariableId++}clone(t){let e=k.runKernel(pn,{x:t}),o={x:t},n=i=>({x:()=>{let a="float32",l={x:i},u={dtype:a};return k.runKernel(cn,l,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[e],n,s,{}),e}runKernel(t,e,o){if(this.backendName==null&&this.backend,!(sm(t,this.backendName)!=null))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,o){let n=this.backend.numDataIds(),s=0;o.forEach(l=>{s+=l.dtype==="complex64"?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=n-e-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t){let e,o=[],n=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l,u=sw(t)?t.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(sw(t)){let{kernelName:h,inputs:d,attrs:g}=t;this.backendName==null&&this.backend;let x=sm(h,this.backendName);E(x!=null,()=>`Cannot find registered kernel '${h}' for backend '${this.backendName}'`),a=()=>{let b=this.backend.numDataIds();l=x.kernelFunc({inputs:d,attrs:g,backend:this.backend});let w=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,b,w);let C=w.map(I=>I.rank!=null?I:this.makeTensorFromTensorInfo(I));if(n){let I=this.getTensorsForGradient(h,d,C);o=this.saveTensorsForBackwardMode(I)}return C}}else{let{forwardFunc:h}=t,d=g=>{!n||(o=g.map(x=>this.keep(this.clone(x))))};a=()=>{let g=this.backend.numDataIds();l=this.tidy(()=>h(this.backend,d));let x=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,x),x}}let{inputs:c,attrs:p}=t,m=sw(t)?null:t.backwardsFunc,f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?e=a():(f=this.profiler.profileKernel(u,c,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),e=f.outputs)}),n&&this.addTapeNode(u,c,e,m,o,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(h=>c[h]!=null?c[h].shape:null),outputShapes:e.map(h=>h.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?e:e[0]}saveTensorsForBackwardMode(t){return t.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(t,e,o){let n=Hb(t);if(n!=null){let s=n.inputsToSave||[],i=n.outputsToSave||[],a;n.saveAllInputs?(E(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(u=>e[u])):a=s.map(u=>e[u]);let l=o.filter((u,c)=>i[c]);return a.concat(l)}return[]}makeTensor(t,e,o,n){if(t==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=t;o==="string"&&ru(t[0])&&(s=t.map(l=>pc(l)));let i=n.write(s,e,o),a=new At(e,o,i,this.nextTensorId());if(this.trackTensor(a,n),o==="string"){let l=this.state.tensorInfo.get(i),u=Bb(s);this.state.numBytes+=u-l.bytes,l.bytes=u}return a}makeTensorFromDataId(t,e,o,n){o=o||"float32";let s={dataId:t,shape:e,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(t,e){let{dataId:o,shape:n,dtype:s}=t,i=new At(n,s,o,this.nextTensorId());return this.trackTensor(i,e),i}makeVariable(t,e=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==t.dtype&&(t=t.cast(n));let s=new Ps(t,e,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,t.dtype==="string"&&this.state.numStringTensors++;let o=0;t.dtype!=="complex64"&&t.dtype!=="string"&&(o=t.size*yh(t.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:o})),t instanceof Ps||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;let e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,t.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),t.dtype!=="complex64"&&t.dtype!=="string"){let o=t.size*yh(t.dtype);this.state.numBytes-=o}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(let t in this.state.registeredVariables){let e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),this.state.registeredVariables[t.name]!=null&&delete this.state.registeredVariables[t.name]}memory(){let t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,t.reasons==null&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;let e=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(t,e,o,n,s,i){let a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:o,saved:s},l=Hb(t);l!=null&&(n=l.gradFunc),n!=null&&(a.gradient=u=>(u=u.map((c,p)=>{if(c==null){let m=o[p],f=iu(m.size,m.dtype);return this.makeTensor(f,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){let e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){let e=cm(t),o=new Set(e.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let i=this.state.activeScope.track[s];!i.kept&&!o.has(i.id)&&i.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(t,e,o,n=!1){if(E(e.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));E(s instanceof At,()=>"The result y returned by f() must be a tensor.");let i=Qv(this.state.activeTape,e,s);if(!n&&i.length===0&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let a={};a[s.id]=o??YL(s.shape),tS(a,i,u=>this.tidy(u),ZL);let l=e.map(u=>a[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:l}})}customGrad(t){return E(nu(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{E(e.every(a=>a instanceof At),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};e.forEach((a,l)=>{n[l]=a});let s=(a,l)=>(o=t(...e,l),E(o.value instanceof At,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),E(nu(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),i=(a,l)=>{let u=o.gradFunc(a,l),c=Array.isArray(u)?u:[u];E(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),E(c.every(m=>m instanceof At),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let p={};return c.forEach((m,f)=>{p[f]=()=>m}),p};return this.runKernelFunc({forwardFunc:s,backwardsFunc:i,inputs:n})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){let e=nl(),o=await this.backend.time(t);return o.wallMs=nl()-e,o}track(t){return this.state.activeScope!=null&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ih;for(let t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};na.nextTensorId=0;na.nextVariableId=0;function YL(r){let t=Zp(Ot(r),"float32");return k.makeTensor(t,r,"float32")}function iw(){let r=Wb();if(r._tfengine==null){let t=new tm(r);r._tfengine=new na(t)}return Fv(r._tfengine.ENV),nS(()=>r._tfengine),r._tfengine}var k=iw();function ZL(r,t){let e={a:r,b:t};return k.runKernel(Ho,e)}var sa={};qt(sa,{isBrowser:()=>lw,isMobile:()=>tP,mockIsMobile:()=>QL});function JL(){return typeof navigator<"u"&&navigator!=null}var aw;function QL(r){aw=r}function tP(r){if(aw!==void 0)return aw;if(r||JL()){if(r||(r=navigator),r.product==="ReactNative")return!0;let t=r.userAgent||r.vendor||(typeof window<"u"?window.opera:"");if(!t){let e=r;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function lw(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}var lo=z();lo.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});lo.registerFlag("IS_BROWSER",()=>lw());lo.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u");lo.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));lo.registerFlag("PROD",()=>!1);lo.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>lo.getBool("DEBUG"));lo.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);lo.registerFlag("IS_TEST",()=>!1);lo.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);lo.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);lo.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);lo.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);function Or(r,t){let e=r;if(qr(r))return t==="string"?[]:[r.length];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(e)||qr(e)&&t!=="string";)o.push(e.length),e=e[0];return Array.isArray(r)&&z().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&uS(r,o,[]),o}function uS(r,t,e){if(e=e||[],!Array.isArray(r)&&!qr(r)){E(t.length===0,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);return}E(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`),E(r.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${r.length} elements`);let o=t.slice(1);for(let n=0;n<r.length;++n)uS(r[n],o,e.concat(n))}function lS(r,t,e,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==t||r==="numeric"&&t==="string")throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t} tensor`)}}function S(r,t,e,o="numeric"){if(r instanceof At)return lS(o,r.dtype,t,e),r;let n=ou(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),lS(o,n,t,e),r==null||!qr(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let l=r==null?"null":r.constructor.name;throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`)}let s=Or(r,n);!qr(r)&&!Array.isArray(r)&&(r=[r]);let a=n!=="string"?cc(r,n):ui(r,[],!0);return k.makeTensor(a,s,n)}function il(r,t,e,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,i)=>S(s,`${t}[${i}]`,e,o))}var uw="__op";function T(r){let t=Object.keys(r);if(t.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0],o=r[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e=e+uw;let n=(...s)=>{k.startScope(e);try{let i=o(...s);return Qp(i)&&console.error("Cannot return a Promise inside of tidy."),k.endScope(i),i}catch(i){throw k.endScope(null),i}};return Object.defineProperty(n,"name",{value:e,configurable:!0}),n}function eP(r,t){let e=S(r,"real","complex"),o=S(t,"imag","complex");Se(e.shape,o.shape,`real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:e,imag:o};return k.runKernel(fu,n)}var Lr=T({complex_:eP});function Sr(r,t,e,o){if(o==null&&(o=ou(r)),o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!qr(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(t!=null){Jp(t);let n=Ot(t),s=Ot(e);E(n===s,()=>`Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`);for(let i=0;i<e.length;++i){let a=e[i],l=i===e.length-1?a!==Ot(t.slice(i)):!0;E(e[i]===t[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!qr(r)&&!Array.isArray(r)&&(r=[r]),t=t||e,r=o!=="string"?cc(r,o):ui(r,[],!0),k.makeTensor(r,t,o)}function Je(r,t,e){let o=Or(r,e);return Sr(r,t,o,e)}var pm={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Nh=4;async function pS(r,t){let e=[],o=[],n=Array.isArray(r)?r.map(i=>i.name):Object.keys(r);for(let i=0;i<n.length;++i){let a=n[i],l=Array.isArray(r)?r[i].tensor:r[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);let u={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){let c=new Promise(async p=>{let m=await l.bytes(),f=m.reduce((g,x)=>g+x.length,0)+Nh*m.length,h=new Uint8Array(f),d=0;for(let g=0;g<m.length;g++){let x=m[g],b=new Uint8Array(new Uint32Array([x.length]).buffer);h.set(b,d),d+=Nh,h.set(x,d),d+=x.length}p(h)});o.push(c)}else o.push(l.data());t!=null&&(u.group=t),e.push(u)}let s=await Promise.all(o);return{data:rP(s),specs:e}}function kh(r,t){let e={},o,n=0;for(let s of t){let i=s.name,a=s.dtype,l=s.shape,u=Ot(l),c;if("quantization"in s){let p=s.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(a!=="float32")throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${a}.`)}else throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let m=pm[p.dtype],f=r.slice(n,n+u*m),h=p.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(a==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){c=new Float32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=g*p.scale+p.min}}else if(p.dtype==="float16")o===void 0&&(o=iP()),c=o(h);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(a==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);c=new Int32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=Math.round(g*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*m}else if(a==="string"){let p=Ot(s.shape);c=[];for(let m=0;m<p;m++){let f=new Uint32Array(r.slice(n,n+Nh))[0];n+=Nh;let h=new Uint8Array(r.slice(n,n+f));c.push(h),n+=f}}else{let p=pm[a],m=r.slice(n,n+u*p);if(a==="float32")c=new Float32Array(m);else if(a==="int32")c=new Int32Array(m);else if(a==="bool")c=new Uint8Array(m);else if(a==="complex64"){c=new Float32Array(m);let f=new Float32Array(c.length/2),h=new Float32Array(c.length/2);for(let x=0;x<f.length;x++)f[x]=c[x*2],h[x]=c[x*2+1];let d=Je(f,l,"float32"),g=Je(h,l,"float32");e[i]=Lr(d,g),d.dispose(),g.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*p}a!=="complex64"&&(e[i]=Je(c,l,a))}return e}function rP(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let t=0,e=[];r.forEach(s=>{if(t+=s.byteLength,e.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(t),n=0;return e.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var cw=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function cS(r){return cw?Buffer.byteLength(r):new Blob([r]).size}function mS(r){if(cw)return Buffer.from(r).toString("base64");let t=new Uint8Array(r),e="";for(let o=0,n=t.length;o<n;o++)e+=String.fromCharCode(t[o]);return btoa(e)}function fS(r){if(cw){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let t=atob(r),e=new Uint8Array(t.length);for(let o=0;o<t.length;++o)e.set([t.charCodeAt(o)],o);return e.buffer}function hc(r){if(r.length===1)return r[0];let t=0;r.forEach(n=>{t+=n.byteLength});let e=new Uint8Array(t),o=0;return r.forEach(n=>{e.set(new Uint8Array(n),o),o+=n.byteLength}),e.buffer}function pw(r){let t="/";for(r=r.trim();r.endsWith(t);)r=r.slice(0,r.length-1);let e=r.split(t);return e[e.length-1]}function Eh(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:t};return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),e}async function dc(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),r.weightsManifest!=null){let[o,n]=await t(r.weightsManifest);e.weightSpecs=o,e.weightData=n}return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),e}function dn(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:cS(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:cS(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function oP(){let r=e=>{let o=e<<13,n=0;for(;(o&8388608)===0;)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=r(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}function nP(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let t=1;t<31;t++)r[t]=t<<23;for(let t=33;t<63;t++)r[t]=2147483648+(t-32<<23);return r}function sP(){let r=new Uint32Array(64);for(let t=0;t<64;t++)r[t]=1024;return r[0]=r[32]=0,r}function iP(){let r=oP(),t=nP(),e=sP();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let i=0;i<o.length;i++){let a=o[i],l=r[e[a>>10]+(a&1023)]+t[a>>10];s[i]=l}return new Float32Array(n)}}var Qt=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return Qt.instance==null&&(Qt.instance=new Qt),Qt.instance}static registerSaveRouter(t){Qt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Qt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Qt.getHandlers(t,"save")}static getLoadHandlers(t,e){return Qt.getHandlers(t,"load",e)}static getHandlers(t,e,o){let n=[];return(e==="load"?Qt.getInstance().loadRouters:Qt.getInstance().saveRouters).forEach(i=>{let a=i(t,o);a!==null&&n.push(a)}),n}},hS=r=>Qt.registerSaveRouter(r),dS=r=>Qt.registerLoadRouter(r),gS=r=>Qt.getSaveHandlers(r),xS=(r,t)=>Qt.getLoadHandlers(r,t);var mw="tensorflowjs",fw=1,al="models_store",ia="model_info_store";function yS(){if(!z().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window>"u"?self:window,t=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(t==null)throw new Error("The current browser does not appear to support IndexedDB.");return t}function hw(r){let t=r.result;t.createObjectStore(al,{keyPath:"modelPath"}),t.createObjectStore(ia,{keyPath:"modelPath"})}var gn=class{constructor(t){if(this.indexedDB=yS(),t==null||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((o,n)=>{let s=this.indexedDB.open(mw,fw);s.onupgradeneeded=()=>hw(s),s.onsuccess=()=>{let i=s.result;if(e==null){let a=i.transaction(al,"readonly"),u=a.objectStore(al).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return i.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(i.close(),n(u.error)),a.oncomplete=()=>i.close()}else{let a=dn(e),l=i.transaction(ia,"readwrite"),u=l.objectStore(ia),c=u.put({modelPath:this.modelPath,modelArtifactsInfo:a}),p;c.onsuccess=()=>{p=i.transaction(al,"readwrite");let f=p.objectStore(al).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:a});f.onsuccess=()=>o({modelArtifactsInfo:a}),f.onerror=h=>{u=l.objectStore(ia);let d=u.delete(this.modelPath);d.onsuccess=()=>(i.close(),n(f.error)),d.onerror=g=>(i.close(),n(f.error))}},c.onerror=m=>(i.close(),n(c.error)),l.oncomplete=()=>{p==null?i.close():p.oncomplete=()=>i.close()}}},s.onerror=i=>n(s.error)})}};gn.URL_SCHEME="indexeddb://";var bS=r=>z().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(gn.URL_SCHEME)?aP(r.slice(gn.URL_SCHEME.length)):null;Qt.registerSaveRouter(bS);Qt.registerLoadRouter(bS);function aP(r){return new gn(r)}function lP(r){return r.startsWith(gn.URL_SCHEME)?r.slice(gn.URL_SCHEME.length):r}var $h=class{constructor(){this.indexedDB=yS()}async listModels(){return new Promise((t,e)=>{let o=this.indexedDB.open(mw,fw);o.onupgradeneeded=()=>hw(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(ia,"readonly"),a=s.objectStore(ia).getAll();a.onsuccess=()=>{let l={};for(let u of a.result)l[u.modelPath]=u.modelArtifactsInfo;t(l)},a.onerror=l=>(n.close(),e(a.error)),s.oncomplete=()=>n.close()},o.onerror=n=>e(o.error)})}async removeModel(t){return t=lP(t),new Promise((e,o)=>{let n=this.indexedDB.open(mw,fw);n.onupgradeneeded=()=>hw(n),n.onsuccess=()=>{let s=n.result,i=s.transaction(ia,"readwrite"),a=i.objectStore(ia),l=a.get(t),u;l.onsuccess=()=>{if(l.result==null)return s.close(),o(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{let c=a.delete(t),p=()=>{u=s.transaction(al,"readwrite");let f=u.objectStore(al).delete(t);f.onsuccess=()=>e(l.result.modelArtifactsInfo),f.onerror=h=>o(l.error)};c.onsuccess=p,c.onerror=m=>(p(),s.close(),o(l.error))}},l.onerror=c=>(s.close(),o(l.error)),i.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var zs="/",gc="tensorflowjs_models",wS="info",uP="model_topology",cP="weight_specs",pP="weight_data",mP="model_metadata";function CS(r){return{info:[gc,r,wS].join(zs),topology:[gc,r,uP].join(zs),weightSpecs:[gc,r,cP].join(zs),weightData:[gc,r,pP].join(zs),modelMetadata:[gc,r,mP].join(zs)}}function vS(r){for(let t of Object.values(r))window.localStorage.removeItem(t)}function fP(r){let t=r.split(zs);if(t.length<3)throw new Error(`Invalid key format: ${r}`);return t.slice(1,t.length-1).join(zs)}function hP(r){return r.startsWith(xn.URL_SCHEME)?r.slice(xn.URL_SCHEME.length):r}var xn=class{constructor(t){if(!z().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,t==null||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=CS(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let e=JSON.stringify(t.modelTopology),o=JSON.stringify(t.weightSpecs),n=dn(t);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,mS(t.weightData));let s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:t.signature!=null?t.signature:void 0,userDefinedMetadata:t.userDefinedMetadata!=null?t.userDefinedMetadata:void 0,modelInitializer:t.modelInitializer!=null?t.modelInitializer:void 0,trainingConfig:t.trainingConfig!=null?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:n}}catch{throw vS(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let t=JSON.parse(this.LS.getItem(this.keys.info));if(t==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(t.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let e={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let a=JSON.parse(s);e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy,a.signature!=null&&(e.signature=a.signature),a.userDefinedMetadata!=null&&(e.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(e.modelInitializer=a.modelInitializer),a.trainingConfig!=null&&(e.trainingConfig=a.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=fS(i),e}};xn.URL_SCHEME="localstorage://";var SS=r=>z().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(xn.URL_SCHEME)?dP(r.slice(xn.URL_SCHEME.length)):null;Qt.registerSaveRouter(SS);Qt.registerLoadRouter(SS);function dP(r){return new xn(r)}var Ah=class{constructor(){E(z().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),E(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let t={},e=gc+zs,o=zs+wS;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(e)&&s.endsWith(o)){let i=fP(s);t[i]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){t=hP(t);let e=CS(t);if(this.LS.getItem(e.info)==null)throw new Error(`Cannot find model at path '${t}'`);let o=JSON.parse(this.LS.getItem(e.info));return vS(e),o}};var xc="://",Qe=class{constructor(){this.managers={}}static getInstance(){return Qe.instance==null&&(Qe.instance=new Qe),Qe.instance}static registerManager(t,e){E(t!=null,()=>"scheme must not be undefined or null."),t.endsWith(xc)&&(t=t.slice(0,t.indexOf(xc))),E(t.length>0,()=>"scheme must not be an empty string.");let o=Qe.getInstance();E(o.managers[t]==null,()=>`A model store manager is already registered for scheme '${t}'.`),o.managers[t]=e}static getManager(t){let e=Qe.getInstance().managers[t];if(e==null)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(Qe.getInstance().managers)}};function Dh(r){if(r.indexOf(xc)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Qe.getSchemes().join(",")}`);return{scheme:r.split(xc)[0],path:r.split(xc)[1]}}async function TS(r,t,e=!1){E(r!==t,()=>`Old path and new path are the same: '${r}'`);let o=Qt.getLoadHandlers(r);E(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),E(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=Qt.getSaveHandlers(t);E(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),E(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${t}.`);let i=s[0],a=Dh(r).scheme,l=Dh(r).path,u=a===Dh(r).scheme,c=await n.load();e&&u&&await Qe.getManager(a).removeModel(l);let p=await i.save(c);return e&&!u&&await Qe.getManager(a).removeModel(l),p.modelArtifactsInfo}async function IS(){let r=Qe.getSchemes(),t={};for(let e of r){let o=await Qe.getManager(e).listModels();for(let n in o){let s=e+xc+n;t[s]=o[n]}}return t}async function NS(r){let t=Dh(r);return Qe.getManager(t.scheme).removeModel(t.path)}async function kS(r,t){return TS(r,t,!1)}async function ES(r,t){return TS(r,t,!0)}var dw=class{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}};if(z().get("IS_BROWSER")){z().setPlatform("browser",new dw);try{Qe.registerManager(xn.URL_SCHEME,new Ah)}catch{}try{Qe.registerManager(gn.URL_SCHEME,new $h)}catch{}}var gP={importFetch:()=>$S()},gw;var xw=class{constructor(){this.util=AS(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return z().global.fetch!=null?z().global.fetch(t,e):(gw==null&&(gw=gP.importFetch()),gw(t,e))}now(){let t=process.hrtime();return t[0]*1e3+t[1]/1e6}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return t.length===0?"":new this.util.TextDecoder(e).decode(t)}};z().get("IS_NODE")&&!z().get("IS_BROWSER")&&z().setPlatform("node",new xw);function pt(r,t="float32",e){return t=t||"float32",Jp(r),new Ut(r,t,e)}function xP(r,t){let e=S(r,"x","cast");if(!Mb(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if(t==="string"&&e.dtype!=="string"||t!=="string"&&e.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:e},n={dtype:t};return k.runKernel(cn,o,n)}var j=T({cast_:xP});function yP(r){let e={x:S(r,"x","clone","string_or_numeric")};return k.runKernel(pn,e)}var Tr=T({clone_:yP});function Rh(r,t=!1){console.log(r.toString(t))}iw();var bP={buffer:pt,cast:j,clone:Tr,print:Rh};sS(bP);var jo={};qt(jo,{browserFiles:()=>RS,browserHTTPRequest:()=>OS,concatenateArrayBuffers:()=>hc,copyModel:()=>kS,decodeWeights:()=>kh,encodeWeights:()=>pS,fromMemory:()=>LS,fromMemorySync:()=>Sw,getLoadHandlers:()=>xS,getModelArtifactsForJSON:()=>dc,getModelArtifactsInfoForJSON:()=>dn,getSaveHandlers:()=>gS,http:()=>_h,isHTTPScheme:()=>Fh,listModels:()=>IS,loadWeights:()=>FS,moveModel:()=>ES,registerLoadRouter:()=>dS,registerSaveRouter:()=>hS,removeModel:()=>NS,weightsLoaderFactory:()=>Cw,withSaveHandler:()=>PS,withSaveHandlerSync:()=>zS});var wP="model",CP=".json",vP=".weights.bin";function DS(r){return new Promise(t=>setTimeout(t)).then(r)}var Ms=class{constructor(t){if(!z().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ms.URL_SCHEME)&&(t=t.slice(Ms.URL_SCHEME.length)),(t==null||t.length===0)&&(t=wP),this.modelJsonFileName=t+CP,this.weightDataFileName=t+vP}async save(t){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let o=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],n=Eh(t,o),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=s,await DS(()=>i.dispatchEvent(new MouseEvent("click"))),t.weightData!=null){let a=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;a.download=this.weightDataFileName,a.href=e,await DS(()=>a.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:dn(t)}}}};Ms.URL_SCHEME="downloads://";var yw=class{constructor(t){if(t==null||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),i=s.modelTopology;if(i==null){e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){t({modelTopology:i});return}let l=dc(s,u=>this.loadWeights(u));t(l)},o.onerror=n=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(t){let e=[],o=[];for(let i of t)e.push(...i.weights),o.push(...i.paths);let n=this.checkManifestAndWeightFiles(t),s=o.map(i=>this.loadWeightsFile(i,n[i]));return Promise.all(s).then(i=>[e,hc(i)])}loadWeightsFile(t,e){return new Promise((o,n)=>{let s=new FileReader;s.onload=i=>{let a=i.target.result;o(a)},s.onerror=i=>n(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){let e=[],o=this.weightsFiles.map(s=>pw(s.name)),n={};for(let s of t)s.paths.forEach(i=>{let a=pw(i);if(e.indexOf(a)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),o.indexOf(a)===-1)throw new Error(`Weight file with basename '${a}' is not provided.`);n[i]=this.weightsFiles[o.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},SP=r=>z().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Ms.URL_SCHEME)?TP(r.slice(Ms.URL_SCHEME.length)):null;Qt.registerSaveRouter(SP);function TP(r="model"){return new Ms(r)}function RS(r){return new yw(r)}function bw(r,t,e,o){i(r),e=e??0,o=o??1,a(e,o);let n=0,s=l=>(l.then(u=>{let c=e+ ++n/r.length*(o-e);return t(c),u}),l);function i(l){E(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")}function a(l,u){E(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),E(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),E(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}return Promise.all(r.map(s))}async function ww(r,t){t==null&&(t={});let e=t.fetchFunc==null?z().platform.fetch:t.fetchFunc,o=r.map(p=>e(p,t.requestInit,{isBinary:!0})),n=0,s=.5,a=(t.onProgress==null?await Promise.all(o):await bw(o,t.onProgress,n,s)).map(p=>p.arrayBuffer()),l=.5,u=1;return t.onProgress==null?await Promise.all(a):await bw(a,t.onProgress,l,u)}async function FS(r,t="",e,o){return Cw(i=>ww(i,{requestInit:o}))(r,t,e)}function Cw(r){return async(t,e="",o)=>{let n=t.map(()=>!1),s={},i=o!=null?o.map(()=>!1):[],a=[];if(t.forEach((f,h)=>{let d=0;f.weights.forEach(g=>{let x="quantization"in g?g.quantization.dtype:g.dtype,b=pm[x]*Ot(g.shape),w=()=>{n[h]=!0,s[h]==null&&(s[h]=[]),s[h].push({manifestEntry:g,groupOffset:d,sizeBytes:b})};o!=null?o.forEach((C,I)=>{C===g.name&&(w(),i[I]=!0)}):w(),a.push(g.name),d+=b})}),!i.every(f=>f)){let f=o.filter((h,d)=>!i[d]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`)}let l=n.reduce((f,h,d)=>(h&&f.push(d),f),[]),u=[];l.forEach(f=>{t[f].paths.forEach(h=>{let d=e+(e.endsWith("/")?"":"/")+h;u.push(d)})});let c=await r(u),p={},m=0;return l.forEach(f=>{let h=t[f].paths.length,d=0;for(let C=0;C<h;C++)d+=c[m+C].byteLength;let g=new ArrayBuffer(d),x=new Uint8Array(g),b=0;for(let C=0;C<h;C++){let I=new Uint8Array(c[m+C]);x.set(I,b),b+=I.byteLength}s[f].forEach(C=>{let I=g.slice(C.groupOffset,C.groupOffset+C.sizeBytes),$=kh(I,[C.manifestEntry]);for(let D in $)p[D]=$[D]}),m+=h}),p}}var IP="application/octet-stream",NP="application/json",mm=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?(E(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=z().platform.fetch,E(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&E(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],n=Eh(t,o);e.body.append("model.json",new Blob([JSON.stringify(n)],{type:NP}),"model.json"),t.weightData!=null&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:IP}),"model.weights.bin");let s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:dn(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=e.modelTopology,n=e.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return dc(e,s=>this.loadWeights(s))}async loadWeights(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=kP(e),s=this.weightPathPrefix||o,i=[];for(let c of t)i.push(...c.weights);let a=[],l=[];for(let c of t)for(let p of c.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(p)):a.push(s+p+n);this.weightUrlConverter&&a.push(...await Promise.all(l));let u=await ww(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,hc(u)]}};mm.URL_SCHEME_REGEX=/^https?:\/\//;function kP(r){let t=r.lastIndexOf("/"),e=r.lastIndexOf("?"),o=r.substring(0,t),n=e>t?r.substring(e):"";return[o+"/",n]}function Fh(r){return r.match(mm.URL_SCHEME_REGEX)!=null}var _S=(r,t)=>{if(typeof fetch>"u"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(r)?e=r.every(o=>Fh(o)):e=Fh(r),e)return _h(r,t)}return null};Qt.registerSaveRouter(_S);Qt.registerLoadRouter(_S);function _h(r,t){return new mm(r,t)}function OS(r,t){return _h(r,t)}var fm=class{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}},Oh=class{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}},vw=class{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}};function LS(r,t,e,o){let n=arguments;return new vw(Sw(...n))}function Sw(r,t,e,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new fm(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new fm({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new fm({modelTopology:r,weightSpecs:t,weightData:e,trainingConfig:o}))}function PS(r){return new Oh(r)}function zS(r){return new Oh(r)}function EP(r,t,e=!1,o=!1){let n=S(r,"a","matMul"),s=S(t,"b","matMul");[n,s]=Rt(n,s);let i={a:n,b:s},a={transposeA:e,transposeB:o};return k.runKernel(gi,i,a)}var Dt=T({matMul_:EP});function $P(r,t,e=1,o=0,n="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i={indices:S(r,"indices","oneHot","int32")},a={dtype:n,depth:t,onValue:e,offValue:o};return k.runKernel(Mi,i,a)}var ll=T({oneHot_:$P});function AP(r){z().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}iS(AP);function uo(){return k}function hm(){return k.memory()}function M(r,t){return k.tidy(r,t)}function xt(r){cm(r).forEach(e=>e.dispose())}function ue(r){return k.keep(r)}function Lh(r){return k.setBackend(r)}function MS(){return k.ready()}function BS(){return k.backendName}function Ph(r,t,e=1){return k.registerBackend(r,t,e)}function VS(){return k.backend}function DP(r){let e={input:S(r,"input","imag")};return k.runKernel(Du,e)}var aa=T({imag_:DP});function RP(r){let e={x:S(r,"x","neg")};return k.runKernel(Pi,e)}var Ft=T({neg_:RP});function FP(r){let e={input:S(r,"input","real")};return k.runKernel(Wu,e)}var Bs=T({real_:FP});function _P(r,t,e){let o=S(r,"x","transpose");if(t==null&&(t=o.shape.map((i,a)=>a).reverse()),E(o.rank===t.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${t}.`),t.forEach(i=>{E(i>=0&&i<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${t}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:t};return o.dtype==="complex64"?M(()=>{let i=Bs(o),a=aa(o);return i=k.runKernel(fn,{x:i},s),a=k.runKernel(fn,{x:a},s),e&&(a=Ft(a)),Lr(i,a)}):k.runKernel(fn,n,s)}var Nt=T({transpose_:_P});var Xr={};qt(Xr,{assertAndGetBroadcastShape:()=>Tt,getBroadcastDims:()=>GS,getReductionAxes:()=>jt});function GS(r,t){let e=r.length,o=[];for(let n=0;n<e;n++){let s=e-1-n,i=r[s]||1;(t[t.length-1-n]||1)>1&&i===1&&o.unshift(s)}return o}function jt(r,t){let e=[];for(let o=0;o<t.length;o++){let n=r[r.length-o-1],s=t.length-o-1,i=t[s];(n==null||n===1&&i>1)&&e.unshift(s)}return e}function Tt(r,t){let e=[],o=Math.max(r.length,t.length);for(let n=0;n<o;n++){let s=r[r.length-n-1];s==null&&(s=1);let i=t[t.length-n-1];if(i==null&&(i=1),s===1)e.unshift(i);else if(i===1)e.unshift(s);else if(s!==i){let a=`Operands could not be broadcast together with shapes ${r} and ${t}.`;throw Error(a)}else e.unshift(s)}return e}var yc={};qt(yc,{fromPixels:()=>VP,fromPixelsAsync:()=>MP,toPixels:()=>BP});function zh(r,t,e){if(ao(r),t!=null&&t.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=Or(r,e);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Sr(r,t,o,e)}var ul;function WS(r,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,o=!1,n=!1,s=!1,i=!1,a=!1;if(r.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)i=!0;else if(typeof ImageBitmap<"u"&&r instanceof ImageBitmap)a=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(sm(nm,k.backendName)!=null){let h={pixels:r},d={numChannels:t};return k.runKernel(nm,h,d)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],p;if(i)p=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||e)p=r.data;else if(s||n||a){if(ul==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")ul=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else ul=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});ul.canvas.width=u,ul.canvas.height=c,ul.drawImage(r,0,0,u,c),p=ul.getImageData(0,0,u,c).data}let m;if(t===4)m=new Int32Array(p);else{let h=u*c;m=new Int32Array(h*t);for(let d=0;d<h;d++)for(let g=0;g<t;++g)m[d*t+g]=p[d*4+g]}return zh(m,[c,u,t],"int32")}function OP(r){return r!=null&&r.data instanceof Uint8Array}function LP(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}function PP(r){return r!=null&&r.width!==0&&r.height!==0}function zP(r){return LP()&&!(r instanceof ImageBitmap)&&PP(r)&&!OP(r)}async function MP(r,t=3){let e=null;if(z().getBool("WRAP_TO_IMAGEBITMAP")&&zP(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch{o=null}o!=null&&o.width===r.width&&o.height===r.height?e=o:e=r}else e=r;return WS(e,t)}async function BP(r,t){let e=S(r,"img","toPixels");if(!(r instanceof At)){let u=e;e=j(u,"int32"),u.dispose()}if(e.rank!==2&&e.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let[o,n]=e.shape.slice(0,2),s=e.rank===2?1:e.shape[2];if(s>4||s===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if(e.dtype!=="float32"&&e.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);let i=await e.data(),a=e.dtype==="float32"?255:1,l=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let f=i[u*s+m];if(e.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(e.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);s===1?(c[0]=f*a,c[1]=f*a,c[2]=f*a):c[m]=f*a}let p=u*4;l[p+0]=Math.round(c[0]),l[p+1]=Math.round(c[1]),l[p+2]=Math.round(c[2]),l[p+3]=Math.round(c[3])}if(t!=null){t.width=n,t.height=o;let u=t.getContext("2d"),c=new ImageData(l,n,o);u.putImageData(c,0,0)}return e!==r&&e.dispose(),l}var VP=T({fromPixels_:WS});function GP(r,t){let e=r.shape.length,o=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(t.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[o-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[o-1]} vs. ${e}`);if(Ot(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=t.shape,s=n[n.length-1],i=1;for(let p=0;p<n.length-1;++p)i*=n[p];let a=r.shape,l=n.slice();l.pop();let u=1;for(let p=s;p<e;++p)u*=a[p],l.push(a[p]);let c=[...un(r.shape).map(p=>p/u),1].slice(0,s);return[l,i,u,c]}function US(r,t,e){let o=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(e.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(e.rank-n))throw new Error(s+` Output shape length < ${o+(e.rank-n)}`);if(e.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let i=0;i<n;++i)if(e.shape[i]!==t.shape[i])throw new Error(s+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-n;++i)if(e.shape[i+n]!==r[i+o])throw new Error(s+` updates.shape[${i+n}] (${e.shape[i+n]}) != shape[${i+n}] (${r[i+n]})`)}function Tw(r,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(t.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(e.length===0){if(t.size===0)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}US(e,t,r)}function WP(r,t,e){let o=t.shape.length,n=o>1?t.shape[o-1]:1,s=e.length,i=1;for(let p=n;p<s;++p)i*=e[p];let a=n<1?1:n,l=Ot(t.shape)/a,u=[...un(e.slice(0,n)),1],c=Ot(e);return{sliceRank:n,numUpdates:l,sliceSize:i,strides:u,outputSize:c}}var He={};qt(He,{assertParamsValid:()=>qP,computeFlatOffset:()=>ZP,computeOutShape:()=>jP,getNormalizedAxes:()=>XP,isSliceContinous:()=>YP,maskToAxes:()=>KP,parseSliceParams:()=>Nw,sliceInfo:()=>JP,startForAxis:()=>JS,startIndicesWithElidedDims:()=>XS,stopForAxis:()=>QS,stopIndicesWithElidedDims:()=>YS,stridesForAxis:()=>ZS,stridesWithElidedDims:()=>qS});var Iw=-2,HP=-1;function qP(r,t,e){let o=r.shape.length;E(o===t.length,()=>`Error in slice${o}D: Length of begin ${t} must match the rank of the array (${o}).`),E(o===e.length,()=>`Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)E(t[n]+e[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${t[n]+e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function KP(r){let t=[],e=0;for(;r>0;)r&1&&t.push(e),r/=2,e++;return t}function jP(r,t,e){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((t[n]-r[n])/e[n]);return o}function qS(r,t,e,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<e;s++)s===0?n[t]=1:(n.splice(t,0,1),n.pop());return n}function KS(r,t,e){return e<=r?e:e-(t-1)}function jS(r,t){let e=[];for(let o=0;o<r;o++)e.push(t+o);return e}function XP(r,t,e,o,n,s,i,a,l){let u=r.length,c=new Array(u),p=new Array(u),m=new Array(u);if(t.length&&e>0){let f=t[0],h=e+1;c=XS(i,f,h,o,r),p=YS(a,f,h,n,r),m=qS(s,f,h,r)}else for(let f=0;f<u;f++)c[f]=JS(i,o,s,r,f,l),p[f]=QS(a,n,s,r,f,l),m[f]=ZS(s,f,l);return{begin:c,end:p,strides:m}}function XS(r,t,e,o,n){let s=[...n],i=jS(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{let l=KS(t,e,a),u=o[l];r&1<<l&&(u=0),s[a]=u}return s}function YS(r,t,e,o,n){let s=[...n],i=jS(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{let l=KS(t,e,a),u=o[l];r&1<<l&&(u=Number.MAX_SAFE_INTEGER),s[a]=u}for(let a=0;a<s.length;a++){let l=n[a];s[a]<0&&(s[a]+=l),s[a]=eu(0,s[a],n[a])}return s}function ZS(r,t,e){let o=r[t];return(e&1<<t||o==null)&&(o=1),o}function JS(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),i=eu(0,i,l-1),i}function QS(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),a>0?i=eu(0,i,l):i=eu(-1,i,l-1),i}function YP(r,t,e){let o=e.length;for(let n=0;n<e.length;n++)if(e[n]>1){o=n;break}for(let n=o+1;n<e.length;n++)if(t[n]>0||e[n]!==r[n])return!1;return!0}function ZP(r,t){let e=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)e+=r[o]*t[o];return e}function Nw(r,t,e){let o,n=r.shape.length;typeof t=="number"?o=[t,...new Array(n-1).fill(0)]:t.length<n?o=t.concat(new Array(n-t.length).fill(0)):o=t.slice(),o.forEach(i=>{E(i!==-1,()=>"slice() does not support negative begin indexing.")});let s;return e==null?s=new Array(n).fill(-1):typeof e=="number"?s=[e,...new Array(n-1).fill(-1)]:e.length<n?s=e.concat(new Array(n-e.length).fill(-1)):s=e,s=s.map((i,a)=>i>=0?i:(E(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),r.shape[a]-o[a])),[o,s]}function JP(r,t,e,o,n,s,i,a,l){let u;if(o==null?(u=new Array(t.length),u.fill(1)):u=o,i!=null&&(i&i-1)!==0)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let w=0;w<p.dims;w++)c&&(1<<w&a)!==0&&p.numAddAxisAfterEllipsis++,1<<w&i&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};QP(p,m);let f=!0,h=!0,d=!0,g=[],x=[];for(let w=0;w<r.length;++w){if(m.strides[w]===0)throw Error(`strides[${w}] must be non-zero`);let C=!!(m.shrinkAxisMask&1<<w),I=r[w];if(I===-1){g.push(C?1:-1);continue}let $=[m.beginMask&1<<w,m.endMask&1<<w],D=[m.strides[w]>0?0:-1,m.strides[w]>0?I:I-1];if(C&&m.strides[w]<=0)throw Error("only stride 1 allowed on non-range indexing.");d=d&&m.strides[w]===1;let F=!!(m.beginMask&1<<w&&m.endMask&1<<w);if(m.beginValid&&m.endValid){if(C){let V=m.begin[w]<0?I+m.begin[w]:m.begin[w];if(m.begin[w]=V,m.end[w]=m.begin[w]+1,V<0||V>=I)throw Error(`slice index ${m.begin[w]} of dimension ${w} out of bounds.`)}else m.begin[w]=HS(m.begin[w],0,m.strides[w],I,$,D),m.end[w]=HS(m.end[w],1,m.strides[w],I,$,D);let B=m.strides[w]===1&&m.begin[w]===0&&m.end[w]===I;f=f&&B,h=h&&(w===0&&m.strides[w]===1||B)}else f=f&&m.strides[w]===1&&F,h=h&&(w===0&&m.strides[w]===1||F);let O,L=!1;if(m.beginValid&&m.endValid?(O=m.end[w]-m.begin[w],L=!0):C?(O=1,L=!0):F&&I>=0&&(m.strides[w]<0?O=-I:O=I,L=!0),L){let B;O===0||O<0!=m.strides[w]<0?B=0:B=Math.trunc(O/m.strides[w])+(O%m.strides[w]!==0?1:0),g.push(B)}else g.push(-1)}for(let w=0;w<m.finalShapeGatherIndices.length;++w){let C=m.finalShapeGatherIndices[w];C>=0?x.push(g[C]):C===Iw&&x.push(1)}return{finalShapeSparse:x.filter((w,C)=>m.finalShapeGatherIndices[C]!==Iw),finalShape:x,isIdentity:f,sliceDim0:h,isSimpleSlice:d,begin:m.begin,end:m.end,strides:m.strides}}function QP(r,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=r.begin!=null,t.endValid=r.end!=null,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(t.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,t.dims);for(;e<n;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=o}else if(1<<o&r.newAxisMask)t.finalShapeGatherIndices.push(Iw),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);r.begin!=null&&(t.begin[e]=r.begin[o]),r.end!=null&&(t.end[e]=r.end[o]),t.strides[e]=r.strides[o],r.beginMask&1<<o&&(t.beginMask|=1<<e),r.endMask&1<<o&&(t.endMask|=1<<e),r.shrinkAxisMask&1<<o?(t.finalShapeGatherIndices.push(HP),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(o)),t.inputShapeGatherIndicesSparse[e]=o,e++}}function HS(r,t,e,o,n,s){if(n[t])return e>0?s[t]:s[t+1&1];{let i=r<0?o+r:r;return i<s[0]?s[0]:i>s[1]?s[1]:i}}var X={};qt(X,{Serializable:()=>dm,SerializationMap:()=>yn,registerClass:()=>Pr});var dm=class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}},yn=class{constructor(){this.classNameMap={}}static getMap(){return yn.instance==null&&(yn.instance=new yn),yn.instance}static register(t){yn.getMap().classNameMap[t.className]=[t,t.fromConfig]}};function Pr(r){E(r.className!=null,()=>"Class being registered does not have the static className property defined."),E(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),E(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),yn.register(r)}var Mh="3.20.0";function tz(r,t){let e=S(r,"a","add"),o=S(t,"b","add");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(Ho,n)}var H=T({add_:tz});function ez(r,t){let e=S(r,"a","floorDiv"),o=S(t,"b","floorDiv");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(ls,n)}var bc=T({floorDiv_:ez});function rz(r,t){let e=S(r,"a","div"),o=S(t,"b","div");if([e,o]=Rt(e,o),e.dtype==="int32"&&o.dtype==="int32")return bc(e,o);let n={a:e,b:o},s={};return k.runKernel(rs,n,s)}var rt=T({div_:rz});function oz(r,t){let e=S(r,"a","mul"),o=S(t,"b","mul");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(ys,n)}var R=T({mul_:oz});function nz(r){let t=S(r,"x","abs");if(t.dtype==="complex64"){let e={x:t};return k.runKernel(yi,e)}else{let e={x:t};return k.runKernel(ci,e)}}var ie=T({abs_:nz});function sz(r){let e={x:S(r,"x","acos")};return k.runKernel(Hn,e)}var Bh=T({acos_:sz});function iz(r){let e={x:S(r,"x","acosh")};return k.runKernel(qn,e)}var Vh=T({acosh_:iz});function az(r){E(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),E(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let t=r.map((n,s)=>S(n,`tensors${s}`,"addN")),e=t[0];t.forEach(n=>{if(n.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(n=>{if(!bo(n.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=t;return k.runKernel(pi,o)}var tT=T({addN_:az});function lz(r,t=null,e=!1){let n={x:S(r,"x","all","bool")},s={axis:t,keepDims:e};return k.runKernel(au,n,s)}var wc=T({all_:lz});function uz(r,t=null,e=!1){let n={x:S(r,"x","any","bool")},s={axis:t,keepDims:e};return k.runKernel(lu,n,s)}var cl=T({any_:uz});function cz(r,t=0){let o={x:S(r,"x","argMax")},n={axis:t};return k.runKernel(mi,o,n)}var bn=T({argMax_:cz});function pz(r,t=0){let o={x:S(r,"x","argMin")},n={axis:t};return k.runKernel(fi,o,n)}var Gh=T({argMin_:pz});function mz(r){let e={x:S(r,"x","asin")};return k.runKernel(Kn,e)}var Wh=T({asin_:mz});function fz(r){let e={x:S(r,"x","asinh")};return k.runKernel(jn,e)}var Uh=T({asinh_:fz});function hz(r){let e={x:S(r,"x","atan")};return k.runKernel(Xn,e)}var Hh=T({atan_:hz});function dz(r,t){let e=S(r,"a","atan2"),o=S(t,"b","atan2");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(Zn,n)}var qh=T({atan2_:dz});function gz(r){let e={x:S(r,"x","atanh")};return k.runKernel(Yn,e)}var Kh=T({atanh_:gz});function xz(r,t,e,o,n="NHWC",s){let i=r[3],a=[...t,i],l=rT(n);return ml(r,a,e,s,o,null,null,l)}function Ew(r,t,e,o,n,s,i="channelsLast"){let[a,l]=jh(t),u;if(i==="channelsLast")u=[a,l,r[3],r[3]];else if(i==="channelsFirst")u=[a,l,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return ml(r,u,e,o,n,s,!1,i)}function yz(r,t,e,o,n,s,i="NDHWC"){let[a,l,u]=kw(t),c,p;if(i==="NDHWC")p="channelsLast",c=[a,l,u,r[4],r[4]];else if(i==="NCDHW")p="channelsFirst",c=[a,l,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return eT(r,c,e,o,n,!1,p,s)}function ml(r,t,e,o,n,s,i=!1,a="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if(a==="channelsLast")[l,u,c,p]=r;else if(a==="channelsFirst")[l,p,u,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[m,f,,h]=t,[d,g]=jh(e),[x,b]=jh(o),w=Cc(m,x),C=Cc(f,b),{padInfo:I,outHeight:$,outWidth:D}=Cz(n,u,c,d,g,w,C,s,a),F=i?h*p:h,O;return a==="channelsFirst"?O=[l,F,$,D]:a==="channelsLast"&&(O=[l,$,D,F]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:p,outHeight:$,outWidth:D,outChannels:F,padInfo:I,strideHeight:d,strideWidth:g,filterHeight:m,filterWidth:f,effectiveFilterHeight:w,effectiveFilterWidth:C,dilationHeight:x,dilationWidth:b,inShape:r,outShape:O,filterShape:t}}function eT(r,t,e,o,n,s=!1,i="channelsLast",a){let[l,u,c,p,m]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[l,u,c,p,m]=r;else if(i==="channelsFirst")[l,m,u,c,p]=r;else throw new Error(`Unknown dataFormat ${i}`);let[f,h,d,,g]=t,[x,b,w]=kw(e),[C,I,$]=kw(o),D=Cc(f,C),F=Cc(h,I),O=Cc(d,$),{padInfo:L,outDepth:B,outHeight:V,outWidth:G}=vz(n,u,c,p,x,b,w,D,F,O,a),U=s?g*m:g,W;return i==="channelsFirst"?W=[l,U,B,V,G]:i==="channelsLast"&&(W=[l,B,V,G,U]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:p,inChannels:m,outDepth:B,outHeight:V,outWidth:G,outChannels:U,padInfo:L,strideDepth:x,strideHeight:b,strideWidth:w,filterDepth:f,filterHeight:h,filterWidth:d,effectiveFilterDepth:D,effectiveFilterHeight:F,effectiveFilterWidth:O,dilationDepth:C,dilationHeight:I,dilationWidth:$,inShape:r,outShape:W,filterShape:t}}function bz(r,t,e,o,n){o==null&&(o=$w(r,t,e));let s=r[0],i=r[1],a=pl((s-t+2*o)/e+1,n),l=pl((i-t+2*o)/e+1,n);return[a,l]}function wz(r,t,e,o,n,s){n==null&&(n=$w(r,t,o));let i=r[0],a=r[1],l=r[2],u=pl((i-t+2*n)/o+1,s),c=pl((a-t+2*n)/o+1,s),p=pl((l-t+2*n)/o+1,s);return[u,c,p,e]}function $w(r,t,e,o=1){let n=Cc(t,o);return Math.floor((r[0]*(e-1)-e+n)/2)}function jh(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function kw(r){return typeof r=="number"?[r,r,r]:r}function Cc(r,t){return t<=1?r:r+(r-1)*(t-1)}function Cz(r,t,e,o,n,s,i,a,l){let u,c,p;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let f=bz([t,e],s,o,r,a);c=f[0],p=f[1]}else if(r==="same"){c=Math.ceil(t/o),p=Math.ceil(e/n);let m=Math.max(0,(c-1)*o+s-t),f=Math.max(0,(p-1)*n+i-e),h=Math.floor(m/2),d=m-h,g=Math.floor(f/2),x=f-g;u={top:h,bottom:d,left:g,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/o),p=Math.ceil((e-i+1)/n);else if(typeof r=="object"){let m=l==="channelsLast"?r[1][0]:r[2][0],f=l==="channelsLast"?r[1][1]:r[2][1],h=l==="channelsLast"?r[2][0]:r[3][0],d=l==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:f,left:h,right:d,type:m===0&&f===0&&h===0&&d===0?"VALID":"EXPLICIT"},c=pl((t-s+m+f)/o+1,a),p=pl((e-i+h+d)/n+1,a)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:p}}function vz(r,t,e,o,n,s,i,a,l,u,c){let p,m,f,h;if(typeof r=="number"){p={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=wz([t,e,o,1],a,1,n,r,c);m=g[0],f=g[1],h=g[2]}else if(r==="same"){m=Math.ceil(t/n),f=Math.ceil(e/s),h=Math.ceil(o/i);let d=(m-1)*n+a-t,g=(f-1)*s+l-e,x=(h-1)*i+u-o,b=Math.floor(d/2),w=d-b,C=Math.floor(g/2),I=g-C,$=Math.floor(x/2),D=x-$;p={top:C,bottom:I,left:$,right:D,front:b,back:w,type:"SAME"}}else if(r==="valid")p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},m=Math.ceil((t-a+1)/n),f=Math.ceil((e-l+1)/s),h=Math.ceil((o-u+1)/i);else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:p,outDepth:m,outHeight:f,outWidth:h}}function pl(r,t){if(!t)return Math.trunc(r);switch(t){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${t}`)}}function co(r){let[t,e,o]=jh(r);return t===1&&e===1&&o===1}function tr(r,t){return co(r)||co(t)}function rT(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function te(r,t,e){if(e!=null){if(typeof t=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if(typeof t=="number")E(Un(t),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else if(typeof t=="object")t.forEach(o=>{o.forEach(n=>{E(Un(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${t}`)}}function Sz(r,t){let o={x:S(r,"x","reshape","string_or_numeric")},n={shape:t};return k.runKernel(Ui,o,n)}var A=T({reshape_:Sz});function Tz(r,t,e,o,n){let s=S(r,"x","avgPool","float32"),i=1;E(tr(e,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);let a=s,l=!1;s.rank===3&&(l=!0,a=A(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),te("avgPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=k.runKernel(hi,u,c);return p=j(p,s.dtype),l?A(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var la=T({avgPool_:Tz});function Iz(r,t,e,o,n,s="NDHWC"){let i=S(r,"x","avgPool3d","float32"),a=i,l=!1;i.rank===4&&(l=!0,a=A(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),E(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),te("avgPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=k.runKernel(di,u,c);return p=j(p,a.dtype),l?A(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var Xh=T({avgPool3d_:Iz});function Nz(r,t=0){E(r.length>=1,()=>"Pass at least one tensor to concat");let e=il(r,"tensors","concat","string_or_numeric");if(e[0].dtype==="complex64"&&e.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),e.length===1)return Tr(e[0]);let o=e,n={axis:t};return k.runKernel(bi,o,n)}var Bt=T({concat_:Nz});function kz(r){let e={x:S(r,"x","sigmoid","float32")};return k.runKernel($s,e)}var dr=T({sigmoid_:kz});function Ez(r,t,e){let o=S(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:t,size:e};return k.runKernel(Xi,n,s)}var Ct=T({slice_:Ez});function $z(r){let e={x:S(r,"x","tanh","float32")};return k.runKernel(Os,e)}var wn=T({tanh_:$z});function Az(r,t,e,o,n,s){let i=S(r,"forgetBias","basicLSTMCell"),a=S(t,"lstmKernel","basicLSTMCell"),l=S(e,"lstmBias","basicLSTMCell"),u=S(o,"data","basicLSTMCell"),c=S(n,"c","basicLSTMCell"),p=S(s,"h","basicLSTMCell"),m=Bt([u,p],1),f=Dt(m,a),h=H(f,l),d=h.shape[0],g=h.shape[1]/4,x=[d,g],b=Ct(h,[0,0],x),w=Ct(h,[0,g],x),C=Ct(h,[0,g*2],x),I=Ct(h,[0,g*3],x),$=H(R(dr(b),wn(w)),R(c,dr(H(i,C)))),D=R(wn($),dr(I));return[$,D]}var oT=T({basicLSTMCell_:Az});function Dz(r,t,e){let o=S(r,"x","batchToSpaceND"),n=t.reduce((a,l)=>a*l);E(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),E(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),E(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${n}`);let s={x:o},i={blockShape:t,crops:e};return k.runKernel(xi,s,i)}var ua=T({batchToSpaceND_:Dz});function nT(r){let t;return r.rank===0||r.rank===1?t=A(r,[1,1,1,r.size]):r.rank===2?t=A(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?t=A(r,[1,r.shape[0],r.shape[1],r.shape[2]]):t=r,t}function Rz(r,t,e,o,n,s){s==null&&(s=.001);let i=S(r,"x","batchNorm"),a=S(t,"mean","batchNorm"),l=S(e,"variance","batchNorm"),u;n!=null&&(u=S(n,"scale","batchNorm"));let c;o!=null&&(c=S(o,"offset","batchNorm")),E(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),E(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),E(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:nT(i),scale:u,offset:c,mean:a,variance:l},f={varianceEpsilon:s},h=k.runKernel(ki,m,f);return A(h,i.shape)}var Cn=T({batchNorm_:Rz});function Fz(r,t,e,o,n,s){let i=S(r,"x","batchNorm"),a=S(t,"mean","batchNorm"),l=S(e,"variance","batchNorm"),u;n!=null&&(u=S(n,"scale","batchNorm"));let c;return o!=null&&(c=S(o,"offset","batchNorm")),E(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),E(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),E(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Cn(i,a,l,c,u,s)}var Yh=T({batchNorm2d_:Fz});function _z(r,t,e,o,n,s){let i=S(r,"x","batchNorm"),a=S(t,"mean","batchNorm"),l=S(e,"variance","batchNorm"),u;n!=null&&(u=S(n,"scale","batchNorm"));let c;return o!=null&&(c=S(o,"offset","batchNorm")),E(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),E(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),E(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Cn(i,a,l,c,u,s)}var Zh=T({batchNorm3d_:_z});function Oz(r,t,e,o,n,s){let i=S(r,"x","batchNorm"),a=S(t,"mean","batchNorm"),l=S(e,"variance","batchNorm"),u;n!=null&&(u=S(n,"scale","batchNorm"));let c;return o!=null&&(c=S(o,"offset","batchNorm")),E(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),E(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),E(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Cn(i,a,l,c,u,s)}var Jh=T({batchNorm4d_:Oz});function Lz(r,t,e){let o=S(r,"x","bincount"),n=S(t,"weights","bincount");E(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),E(e>=0,()=>`size must be non-negative, but got ${e}.`),E(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},i={size:e};return k.runKernel(pu,s,i)}var Qh=T({bincount_:Lz});function Pz(r,t){let e=S(r,"s0","broadcastArgs","int32"),o=S(t,"s1","broadcastArgs","int32");if(e.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:e,s1:o};return k.runKernel(mu,n)}var sT=T({broadcastArgs_:Pz});function zz(r,t){let e=S(r,"broadcastTo","x"),o=e.shape;if(t.some(u=>!(u>0)||u%1!==0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){let u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=A(e,u)}let n=e.shape,s=Array.from(t);for(let u=t.length-1;u>=0;u--)if(n[u]===t[u])s[u]=1;else if(e.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return Tr(e);let a={x:e},l={reps:s};return k.runKernel(mn,a,l)}var vn=T({broadcastTo_:zz});function Mz(r){let e={x:S(r,"x","ceil","float32")};return k.runKernel(Jn,e)}var td=T({ceil_:Mz});function Bz(r,t,e){let o=S(r,"x","clipByValue");E(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`);let n={x:o},s={clipValueMin:t,clipValueMax:e};return k.runKernel(Qn,n,s)}var qe=T({clipByValue_:Bz});function Vz(r){return Bt(r,0)}var ed=T({concat1d_:Vz});function Gz(r,t){return Bt(r,t)}var rd=T({concat2d_:Gz});function Wz(r,t){return Bt(r,t)}var od=T({concat3d_:Wz});function Uz(r,t){return Bt(r,t)}var nd=T({concat4d_:Uz});function Hz(r,t,e,o,n="NHWC",s=[1,1],i){let a=S(r,"x","conv2d","float32"),l=S(t,"filter","conv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=A(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),E(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),te("conv2d",o,i);let p=n==="NHWC"?u.shape[3]:u.shape[1];E(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),E(tr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=k.runKernel(wi,m,f);return c?A(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var zr=T({conv2d_:Hz});function qz(r,t,e,o,n="NWC",s=1,i){let a=S(r,"x","conv1d"),l=S(t,"filter","conv1d"),u=a,c=!1;a.rank===2&&(c=!0,u=A(a,[1,a.shape[0],a.shape[1]])),E(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),E(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),te("conv1d",o,i),E(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),E(tr(e,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`),E(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let p=A(l,[1,l.shape[0],l.shape[1],l.shape[2]]),m=A(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=zr(m,p,[1,e],o,"NHWC",[1,s],i);return c?A(g,[g.shape[2],g.shape[3]]):A(g,[g.shape[0],g.shape[2],g.shape[3]])}var vc=T({conv1d_:qz});function Kz(r,t,e,o,n,s="NHWC",i){E(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let a=r,l=t,u=!1;t.rank===3&&(u=!0,l=A(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,r[0],r[1],r[2]]),E(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),E(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),E(e.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);let c=s==="NHWC"?a[3]:a[1],p=s==="NHWC"?l.shape[3]:l.shape[1];E(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),E(p===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${e.shape[3]}.`),te("conv2dDerInput",n,i);let m={dy:l,filter:e},f={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,inputShape:a},h=k.runKernel(Ci,m,f);return u?A(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Sc=T({conv2DBackpropInput_:Kz});function jz(r,t,e,o,n,s){let i=S(r,"x","conv2dTranspose"),a=S(t,"filter","conv2dTranspose");return Sc(e,i,a,o,n,"NHWC",s)}var Tc=T({conv2dTranspose_:jz});function Xz(r,t,e,o,n="NDHWC",s=[1,1,1]){let i=S(r,"x","conv3d"),a=S(t,"filter","conv3d"),l=i,u=!1;i.rank===4&&(u=!0,l=A(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),E(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),E(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),E(tr(e,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),E(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`);let c={x:l,filter:a},p={strides:e,pad:o,dataFormat:n,dilations:s},m=k.runKernel(vi,c,p);return u?A(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var sd=T({conv3d_:Xz});function Yz(r,t,e,o,n){E(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let s=r,i=t,a=!1;t.rank===4&&(a=!0,i=A(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let l=s[4],u=i.shape[4];E(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),E(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),E(e.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),E(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),E(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);let c={dy:i,filter:e},p={pad:n,strides:o,inputShape:s},m=k.runKernel(gu,c,p);return a?A(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var id=T({conv3DBackpropInput_:Yz});function Zz(r,t,e,o,n){let s=S(r,"x","conv3dTranspose"),i=S(t,"filter","conv3dTranspose");return id(e,s,i,o,n)}var ad=T({conv3dTranspose_:Zz});function Jz(r){let e={x:S(r,"x","cos","float32")};return k.runKernel(ts,e)}var ca=T({cos_:Jz});function Qz(r){let e={x:S(r,"x","cosh","float32")};return k.runKernel(es,e)}var Ic=T({cosh_:Qz});function t3(r,t=0,e=!1,o=!1){let s={x:S(r,"x","cumprod")},i={axis:t,exclusive:e,reverse:o};return k.runKernel(xu,s,i)}var fl=T({cumprod_:t3});function e3(r,t=0,e=!1,o=!1){let s={x:S(r,"x","cumsum")},i={axis:t,exclusive:e,reverse:o};return k.runKernel(Si,s,i)}var Nc=T({cumsum_:e3});function r3(r,t,e,o=!1){let n=S(r,"x","denseBincount"),s=S(t,"weights","denseBincount");E(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),E(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),E(e>=0,()=>`size must be non-negative, but got ${e}.`),E(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let i={x:n,weights:s},a={size:e,binaryOutput:o};return k.runKernel(bu,i,a)}var iT=T({denseBincount_:r3});function o3(r,t,e="NHWC"){let o=S(r,"x","depthToSpace","float32"),n=e==="NHWC"?o.shape[1]:o.shape[2],s=e==="NHWC"?o.shape[2]:o.shape[3],i=e==="NHWC"?o.shape[3]:o.shape[1];E(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),E(n*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${o.shape}`),E(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${o.shape}`),E(i%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${o.shape}`);let a={x:o},l={blockSize:t,dataFormat:e};return k.runKernel(wu,a,l)}var ld=T({depthToSpace_:o3});function n3(r,t,e,o,n="NHWC",s=[1,1],i){let a=S(r,"x","depthwiseConv2d","float32"),l=S(t,"filter","depthwiseConv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=A(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),E(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p=n==="NHWC"?u.shape[3]:u.shape[1];E(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),te("depthwiseConv2d",o,i);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=k.runKernel(Ti,m,f);return c?A(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Sn=T({depthwiseConv2d_:n3});function s3(r){let e={x:S(r,"x","diag")};return k.runKernel(Su,e)}var aT=T({diag_:s3});function i3(r,t,e,o,n=[1,1],s="NHWC"){let i=S(r,"x","dilation2d"),a=S(t,"filter","dilation2d");E(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),E(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),E(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;i.rank===3&&(l=A(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let c={x:l,filter:a},p={strides:e,pad:o,dilations:n},m=k.runKernel(Ii,c,p);return u?A(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var ud=T({dilation2d_:i3});function a3(r,t){let e=S(r,"a","equal","string_or_numeric"),o=S(t,"b","equal","string_or_numeric");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Wa,n)}var gr=T({equal_:a3});function l3(r,t,e){let o=S(t,"a","where"),n=S(e,"b","where"),s=S(r,"condition","where","bool"),i=Tt(Tt(s.shape,o.shape),n.shape),a=vn(s,i),l=vn(o,i),u=vn(n,i),c={condition:a,t:l,e:u};return k.runKernel(ji,c)}var le=T({where_:l3});function u3(r){let e={x:S(r,"x","zerosLike")};return k.runKernel(ra,e)}var dt=T({zerosLike_:u3});function c3(r,t){let e=S(r,"a","div"),o=S(t,"b","div");[e,o]=Rt(e,o);let n=rt(e,o),s=dt(n),i=gr(o,s);return le(i,s,n)}var cd=T({divNoNan_:c3});function p3(r,t){let e=S(r,"t1","dot"),o=S(t,"t2","dot");E((e.rank===1||e.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);let n=e.rank===1?e.size:e.shape[1],s=o.rank===1?o.size:o.shape[0];if(E(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),e.rank===1&&o.rank===1){let i=A(e,[1,-1]),a=A(o,[-1,1]),l=Dt(i,a);return A(l,[])}else if(e.rank===1&&o.rank===2){let i=A(e,[1,-1]),a=A(o,[o.shape[0],o.shape[1]]),l=Dt(i,a);return A(l,[l.size])}else if(e.rank===2&&o.rank===1){let i=A(o,[-1,1]),a=Dt(e,i);return A(a,[a.size])}else{let i=A(o,[o.shape[0],o.shape[1]]);return Dt(e,i)}}var pd=T({dot_:p3});function m3(r,...t){let e=t.map((n,s)=>S(n,`tensors${s}`,"einsum")),o={equation:r};return k.runKernel(Tu,e,o)}var lT=T({einsum_:m3});function f3(r){let e={x:S(r,"x","elu","float32")};return k.runKernel(os,e)}var Tn=T({elu_:f3});function h3(r){let t=S(r,"x","erf");E(t.dtype==="int32"||t.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),t.dtype==="int32"&&(t=j(t,"float32"));let e={x:t};return k.runKernel(ns,e)}var md=T({erf_:h3});function Aw(r,t){for(let e=0;e<r.length;++e)if(r[r.length-e-1]!==t-1-e)return!1;return!0}function uT(r,t,e){let o=r.length+t.length,n=[],s=0,i=0;for(let a=0;a<o;a++)e.indexOf(a)===-1?n.push(r[s++]):n.push(t[i++]);return n}function Dw(r,t){let e=[],o=r.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&e.push(r[s]);let n=t.map(s=>r[s]);return[e,n]}function To(r,t){let e=t.map(o=>1);return uT(r,e,t)}function d3(r,t,e){E(Aw(t,e),()=>`${r} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Rw(r,t){if(Aw(r,t))return null;let e=[];for(let o=0;o<t;++o)r.indexOf(o)===-1&&e.push(o);return r.forEach(o=>e.push(o)),e}function gm(r){return r.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function g3(r,t){let e=[];for(let o=t-r;o<t;++o)e.push(o);return e}function x3(r,t=null,e=!1){let n={x:S(r,"x","max")},s={reductionIndices:t,keepDims:e};return k.runKernel(Di,n,s)}var ar=T({max_:x3});function y3(r,t=null,e=!1){let n={x:S(r,"x","min")},s={axis:t,keepDims:e};return k.runKernel(Oi,n,s)}var hl=T({min_:y3});function b3(r,t){let e=S(r,"base","pow"),o=S(t,"exp","pow");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(bs,n)}var Ir=T({pow_:b3});function nt(r,t){if((qr(r)&&t!=="string"||Array.isArray(r))&&t!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(t==="string"&&qr(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Sr(r,[],[],t)}function w3(r){let e={x:S(r,"x","sqrt","float32")};return k.runKernel(Ds,e)}var ee=T({sqrt_:w3});function C3(r){let t=S(r,"x","square"),e={};return k.runKernel("Square",{x:t},e)}var $t=T({square_:C3});function v3(r,t=null,e=!1){let o=S(r,"x","sum");o.dtype==="bool"&&(o=j(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return k.runKernel(Yi,n,s)}var st=T({sum_:v3});function S3(r,t="euclidean",e=null,o=!1){r=S(r,"x","norm");let n=cT(r,t,e),s=n.shape;if(o){let i=Le(e,r.shape);s=To(n.shape,i)}return A(n,s)}function cT(r,t,e=null){if(r.rank===0)return ie(r);if(r.rank!==1&&e===null)return cT(A(r,[-1]),t,e);if(r.rank===1||typeof e=="number"||Array.isArray(e)&&e.length===1){if(t===1)return st(ie(r),e);if(t===1/0)return ar(ie(r),e);if(t===-1/0)return hl(ie(r),e);if(t==="euclidean"||t===2)return ee(st(Ir(ie(r),nt(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&e.length===2){if(t===1)return ar(st(ie(r),e[0]),e[1]-1);if(t===1/0)return ar(st(ie(r),e[1]),e[0]);if(t===-1/0)return hl(st(ie(r),e[1]),e[0]);if(t==="fro"||t==="euclidean")return ee(st($t(r),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}var Vs=T({norm_:S3});function T3(r,t=null,e=!1){return Vs(r,"euclidean",t,e)}var fd=T({euclideanNorm_:T3});function I3(r){let e={x:S(r,"x","exp")};return k.runKernel(ss,e)}var $e=T({exp_:I3});function N3(r,t=0){let e=S(r,"x","expandDims","string_or_numeric");E(t<=e.rank,()=>"Axis must be <= rank of the tensor");let o={input:e},n={dim:t};return k.runKernel(Ni,o,n)}var Pe=T({expandDims_:N3});function k3(r){let e={x:S(r,"x","expm1")};return k.runKernel(is,e)}var hd=T({expm1_:k3});function E3(r,t){let e=S(r,"x","tile","string_or_numeric");E(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);let o={x:e},n={reps:t};return k.runKernel(mn,o,n)}var er=T({tile_:E3});function $3(r,t,e,o="float32"){t==null&&(t=r);let n=pt([r,t],o),s=r<=t?r:t;for(let a=0;a<s;++a)n.set(1,a,a);let i=A(n.toTensor(),[r,t]);if(e==null)return i;if(e.length===1)return er(Pe(i,0),[e[0],1,1]);if(e.length===2)return er(Pe(Pe(i,0),0),[e[0],e[1],1,1]);if(e.length===3)return er(Pe(Pe(Pe(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}var dl=T({eye_:$3});function In(r,t,e){let o={shape:r,value:t,dtype:e};return k.runKernel(ku,{},o)}function A3(r){let e={x:S(r,"x","floor","float32")};return k.runKernel(as,e)}var Nn=T({floor_:A3});function D3(r,t,e=0,o=0){let n=S(r,"x","gather"),s=S(t,"indices","gather","int32"),i={x:n,indices:s},a={axis:e,batchDims:o};return k.runKernel(Ei,i,a)}var kn=T({gather_:D3});function R3(r,t){let e=S(r,"a","greater","string_or_numeric"),o=S(t,"b","greater","string_or_numeric");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ua,n)}var Te=T({greater_:R3});function F3(r,t){let e=S(r,"a","greaterEqual","string_or_numeric"),o=S(t,"b","greaterEqual","string_or_numeric");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(us,n)}var Yr=T({greaterEqual_:F3});function _3(r){let e={x:S(r,"x","isFinite")};return k.runKernel(cs,e)}var dd=T({isFinite_:_3});function O3(r){let e={x:S(r,"x","isInf")};return k.runKernel(ps,e)}var gd=T({isInf_:O3});function L3(r){let e={x:S(r,"x","isNaN")};return k.runKernel(ms,e)}var xd=T({isNaN_:L3});function P3(r,t=.2){let o={x:S(r,"x","leakyRelu")},n={alpha:t};return k.runKernel($i,o,n)}var pa=T({leakyRelu_:P3});function z3(r,t){let e=S(r,"a","less","string_or_numeric"),o=S(t,"b","less","string_or_numeric");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ha,n)}var kc=T({less_:z3});function M3(r,t){let e=S(r,"a","lessEqual","string_or_numeric"),o=S(t,"b","lessEqual","string_or_numeric");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(qa,n)}var Zr=T({lessEqual_:M3});function pT(r,t,e){if(e<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:t,num:e};return k.runKernel(Ru,{},o)}function B3(r,t=5,e=1,o=1,n=.5){let s=S(r,"x","localResponseNormalization");E(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),E(Un(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,a=!1;s.rank===3&&(a=!0,i=A(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u={depthRadius:t,bias:e,alpha:o,beta:n},c=k.runKernel(Ai,l,u);return a?A(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var yd=T({localResponseNormalization_:B3});function V3(r){let e={x:S(r,"x","log","float32")};return k.runKernel(fs,e)}var Ke=T({log_:V3});function G3(r){let e={x:S(r,"x","log1p")};return k.runKernel(hs,e)}var ma=T({log1p_:G3});function _w(r,t){E(nu(r),()=>"The f passed in variableGrads(f) must be a function"),E(t==null||Array.isArray(t)&&t.every(u=>u instanceof Ps),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let e=t!=null;if(!e){t=[];for(let u in k.registeredVariables)t.push(k.registeredVariables[u])}let o=e?t.filter(u=>!u.trainable):null,n=t.length;t=t.filter(u=>u.trainable),E(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:i,grads:a}=k.gradients(r,t,null,s);E(a.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),E(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let l={};return t.forEach((u,c)=>{a[c]!=null&&(l[u.name]=a[c])}),o?.forEach(u=>l[u.name]=null),{value:i,grads:l}}function Mr(r){return k.customGrad(r)}function W3(r){let e={x:S(r,"x","softplus")};return k.runKernel(As,e)}var Xo=T({softplus_:W3});function U3(r){let t=S(r,"x","logSigmoid");return Mr(o=>({value:Ft(Xo(Ft(o))),gradFunc:i=>R(i,dr(Ft(o)))}))(t)}var bd=T({logSigmoid_:U3});function H3(r,t){let e=S(r,"a","sub"),o=S(t,"b","sub");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(Fs,n)}var tt=T({sub_:H3});function q3(r,t=-1){let e=S(r,"logits","logSoftmax");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Mr((n,s)=>{let a=ar(n,t,!0),l=tt(n,a),u=tt(j(l,"float32"),Ke(st($e(l),t,!0)));return s([u]),{value:u,gradFunc:(p,m)=>{let[f]=m,h=!0,d=$e(f);return tt(p,R(st(p,t,h),d))}}})(e)}var Ec=T({logSoftmax_:q3});function K3(r,t=null,e=!1){let o=S(r,"x","logSumExp"),n=Le(t,o.shape),s=ar(o,n,!0),i=tt(o,s),a=$e(i),l=st(a,n),u=Ke(l),c=H(A(s,u.shape),u);if(e){let p=To(c.shape,n);return A(c,p)}return c}var $c=T({logSumExp_:K3});function j3(r,t){let e=S(r,"a","logicalAnd","bool"),o=S(t,"b","logicalAnd","bool");Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ka,n)}var lr=T({logicalAnd_:j3});function X3(r){let e={x:S(r,"x","logicalNot","bool")};return k.runKernel(ja,e)}var fa=T({logicalNot_:X3});function Y3(r,t){let e=S(r,"a","logicalOr","bool"),o=S(t,"b","logicalOr","bool");Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Xa,n)}var Ac=T({logicalOr_:Y3});function Z3(r,t){let e=S(r,"a","logicalXor","bool"),o=S(t,"b","logicalXor","bool");return Tt(e.shape,o.shape),lr(Ac(r,t),fa(lr(r,t)))}var wd=T({logicalXor_:Z3});var Cd=2147483648;function J3(r,t,e="left"){let o=S(r,"sortedSequence","searchSorted"),n=S(t,"values","searchSorted"),s=o.shape[o.shape.length-1],i=n.shape[n.shape.length-1],a=A(o,[-1,s]),l=A(n,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Ot(l.shape)>=Cd)throw new Error(`values tensor size must less than ${Cd}`);if(a.shape[1]>=Cd)throw new Error(`trailing dim_size must less than ${Cd} for int32 output type, was ${a.shape[1]}`);let u={sortedSequence:a,values:l},c={side:e};return k.runKernel(Ku,u,c)}var xm=T({searchSorted_:J3});function mT(r,t){return xm(r,t,"left")}function Q3(r,t,e,o,n){let s=S(r,"x","maxPool"),i=1,a=s,l=!1;s.rank===3&&(l=!0,a=A(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),E(tr(e,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`),te("maxPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=k.runKernel(Ri,u,c);return l?A(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var ha=T({maxPool_:Q3});function tM(r,t=[1,1,1],e,o,n,s="NDHWC"){let i=S(r,"x","maxPool3d"),a=i,l=!1;i.rank===4&&(l=!0,a=A(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),E(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),te("maxPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=k.runKernel(Fi,u,c);return l?A(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var vd=T({maxPool3d_:tM});function eM(r,t,e,o,n=!1){let i={x:S(r,"x","maxPoolWithArgmax")},a={filterSize:t,strides:e,pad:o,includeBatchInIndex:n},l=k.runKernel(Lu,i,a);return{result:l[0],indexes:l[1]}}var fT=T({maxPoolWithArgmax_:eM});function rM(r,t){let e=S(r,"a","maximum"),o=S(t,"b","maximum");[e,o]=Rt(e,o),e.dtype==="bool"&&(e=j(e,"int32"),o=j(o,"int32")),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(ds,n)}var Br=T({maximum_:rM});function oM(r,t=null,e=!1){let n={x:S(r,"x","mean")},s={axis:t,keepDims:e};return k.runKernel(_i,n,s)}var re=T({mean_:oM});function oe(r,t="float32"){if(t==="complex64"){let o=oe(r,"float32"),n=oe(r,"float32");return Lr(o,n)}let e=iu(Ot(r),t);return k.makeTensor(e,r,t)}function ze(r,t="float32"){if(t==="complex64"){let o=ze(r,"float32"),n=oe(r,"float32");return Lr(o,n)}let e=Zp(Ot(r),t);return k.makeTensor(e,r,t)}function hT(r,t,{indexing:e="xy"}={}){if(e!=="xy"&&e!=="ij")throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=S(r,"x","meshgrid",r instanceof At?r.dtype:"float32");if(t===void 0)return[o];let n=S(t,"y","meshgrid",t instanceof At?t.dtype:"float32"),s=Ot(o.shape),i=Ot(n.shape);return e==="xy"?(o=A(o,[1,-1]),n=A(n,[-1,1]),[Dt(ze([i,1],o.dtype),o),Dt(n,ze([1,s],n.dtype))]):(o=A(o,[-1,1]),n=A(n,[1,-1]),[Dt(o,ze([1,i],o.dtype)),Dt(ze([s,1],n.dtype),n)])}function nM(r,t){let e=S(r,"a","minimum"),o=S(t,"b","minimum");[e,o]=Rt(e,o),e.dtype==="bool"&&(e=j(e,"int32"),o=j(o,"int32")),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(gs,n)}var En=T({minimum_:nM});function sM(r,t,e){E(e==="reflect"||e==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);let o=S(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");E(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);let n=e==="reflect"?1:0;for(let a=0;a<o.rank;a++)E(t[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),E(t[a][0]>=0&&t[a][0]<=o.shape[a]-n&&t[a][1]>=0&&t[a][1]<=o.shape[a]-n,()=>`Padding in dimension ${a} cannot be greater than or equal to ${o.shape[a]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:t,mode:e},i={x:o};return k.runKernel(Li,i,s)}var Sd=T({mirrorPad_:sM});function iM(r,t){let e=S(r,"a","mod"),o=S(t,"b","mod");[e,o]=Rt(e,o);let n={a:e,b:o};return k.runKernel(xs,n)}var Td=T({mod_:iM});function aM(r,t=null,e=!1){r=S(r,"x","moments");let o=Le(t,r.shape),n=re(r,o,e),s=n.shape;e||(s=To(n.shape,o));let i=$t(tt(j(r,"float32"),A(n,s))),a=re(i,o,e);return{mean:n,variance:a}}var gl=T({moments_:aM});function lM(r,t,e,o){let n=S(t,"data","multiRNNCell"),s=il(e,"c","multiRNNCell"),i=il(o,"h","multiRNNCell"),a=n,l=[];for(let p=0;p<r.length;p++){let m=r[p](a,s[p],i[p]);l.push(m[0]),l.push(m[1]),a=m[1]}let u=[],c=[];for(let p=0;p<l.length;p+=2)u.push(l[p]),c.push(l[p+1]);return[u,c]}var dT=T({multiRNNCell_:lM});function uM(r,t,e,o=!1){let n=S(r,"logits","multinomial"),s=n.size,i=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);e=e||Math.random();let l={logits:i===1?A(n,[1,-1]):n},u={numSamples:t,seed:e,normalized:o},c=k.runKernel(Pu,l,u);return i===1?A(c,[c.size]):c}var gT=T({multinomial_:uM});function cM(r,t){let e=S(r,"a","notEqual","string_or_numeric"),o=S(t,"b","notEqual","string_or_numeric");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ya,n)}var Yo=T({notEqual_:cM});function pM(r){let e={x:S(r,"x","onesLike")};return k.runKernel(zi,e)}var Ge=T({onesLike_:pM});function mM(r,t){let e=S(r,"v1","outerProduct"),o=S(t,"v2","outerProduct");E(e.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${o.rank}.`);let n=A(e,[-1,1]),s=A(o,[1,-1]);return Dt(n,s)}var xT=T({outerProduct_:mM});function fM(r,t,e=0){let o=S(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:t,constantValue:e},s={x:o};return k.runKernel(Vi,s,n)}var Nr=T({pad_:fM});function hM(r,t,e=0){return E(t.length===2,()=>"Invalid number of paddings. Must be length of 2."),Nr(r,[t],e)}var yT=T({pad1d_:hM});function dM(r,t,e=0){return E(t.length===2&&t[0].length===2&&t[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Nr(r,t,e)}var bT=T({pad2d_:dM});function gM(r,t,e=0){return E(t.length===3&&t[0].length===2&&t[1].length===2&&t[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Nr(r,t,e)}var wT=T({pad3d_:gM});function xM(r,t,e=0){return E(t.length===4&&t[0].length===2&&t[1].length===2&&t[2].length===2&&t[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Nr(r,t,e)}var CT=T({pad4d_:xM});function yM(r,t,e){let o=S(r,"x","spaceToBatchND");E(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),E(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),E(o.shape.reduce((i,a,l)=>l>0&&l<=t.length?i&&(a+e[l-1][0]+e[l-1][1])%t[l-1]===0:i,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);let n={x:o},s={blockShape:t,paddings:e};return k.runKernel(Zi,n,s)}var da=T({spaceToBatchND_:yM});function bM(r,t,e,o,n,s,i){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let a=S(r,"x","maxPool"),l=a,u=!1;a.rank===3&&(u=!0,l=A(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(tr(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=Ew(l.shape,t,s,n,o),p=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=CM([c.filterHeight,c.filterWidth],p):m=[[0,0],[0,0]];let f=p[0]===1&&p[1]===1,[h,d]=wM([c.inHeight,c.inWidth],p,m),g=f?o:"valid",x=f?l:da(l,p,h),w=(e==="avg"?()=>la(x,t,s,g,i):()=>ha(x,t,s,g,i))(),C=f?w:ua(w,p,d);return u?A(C,[C.shape[1],C.shape[2],C.shape[3]]):C}function wM(r,t,e){let o=e.map(c=>c[0]),n=e.map(c=>c[1]),s=r.concat(o,n),i=t.map((c,p)=>(c-s[p]%c)%c),a=n.map((c,p)=>c+i[p]),l=t.map((c,p)=>[o[p],a[p]]),u=t.map((c,p)=>[0,i[p]]);return[l,u]}function CM(r,t){let o=r.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),n=o.map(i=>Math.floor(i/2)),s=o.map((i,a)=>i-n[a]);return o.map((i,a)=>[n[a],s[a]])}var Id=T({pool_:bM});function vM(r,t){let e=S(r,"x","prelu"),o=S(t,"alpha","prelu"),n={x:e,alpha:o};return k.runKernel(Gi,n)}var ga=T({prelu_:vM});function SM(r,t=null,e=!1){let o=S(r,"x","prod");o.dtype==="bool"&&(o=j(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return k.runKernel(Wi,n,s)}var Nd=T({prod_:SM});function TM(r,t,e,o,n){let s=S(r,"shape","raggedTensorToTensor","int32"),i=S(t,"values","raggedTensorToTensor"),a=S(e,"defaultValue","raggedTensorToTensor",i.dtype),l=o.map((p,m)=>S(p,`tensors${m}`,"raggedTensorToTensor","int32")),u={shape:s,values:i,defaultValue:a,rowPartitionTensors:l},c={rowPartitionTypes:n};return k.runKernel(Vu,u,c)}var vT=T({raggedTensorToTensor_:TM});function IM(r,t,e){let o=Ot(r),n=null;if(e==null||e==="float32")n=new Float32Array(o);else if(e==="int32")n=new Int32Array(o);else if(e==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${e}`);for(let s=0;s<o;s++)n[s]=t();return k.makeTensor(n,r,e)}var ST=T({rand_:IM});var Ad=Yp(ym());var yl=class{constructor(t,e,o,n,s){this.mean=t,this.stdDev=e,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let i=s||Math.random();this.random=Ad.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let t,e,o=!1;for(;!o;){let n,s,i;do n=2*this.random()-1,s=2*this.random()-1,i=n*n+s*s;while(i>=1||i===0);let a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*n*a,e=this.mean+this.stdDev*s*a,(!this.truncated||this.isValidTruncated(t))&&(o=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return this.dtype==null||this.dtype==="float32"?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}},Ed=class{constructor(t,e,o,n){this.alpha=t,this.beta=1/e,this.dtype=o;let s=n||Math.random();this.randu=Ad.alea(s.toString()),this.randn=new yl(0,1,o,!1,this.randu()),t<1?this.d=t+2/3:this.d=t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,o,n,s,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0);if(i*=i*i,t=n*n,e=1-.331*t*t,o=.5*t+this.d*(1-i+Math.log(i)),s=this.randu(),s<e||Math.log(s)<o)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return this.dtype==="float32"?t:Math.round(t)}},$d=class{constructor(t=0,e=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=t,this.range=e-t,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Ad.alea(n)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function RM(r,t,e=1,o="float32",n){if(e==null&&(e=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new Ed(t,e,o,n),i=pt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var BT=T({randomGamma_:RM});function FM(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new yl(t,e,o,!1,n),i=pt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var bl=T({randomNormal_:FM});function _M(r,t,e){if(t!=null&&t==="bool")throw new Error(`Unsupported data type ${t}`);return bl(r,0,1,t,e)}var VT=T({randomStandardNormal_:_M});function OM(r,t=0,e=1,o="float32",n){let s=pt(r,o),i=new $d(t,e,null,n);for(let a=0;a<s.values.length;a++)s.values[a]=i.nextValue();return s.toTensor()}var $n=T({randomUniform_:OM});function xa(r,t,e=1,o="float32"){if(e===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:t,step:e,dtype:o};return k.runKernel(Gu,{},n)}function LM(r){let e={x:S(r,"x","reciprocal")};return k.runKernel(ws,e)}var Dd=T({reciprocal_:LM});function PM(r){let e={x:S(r,"x","relu")};return k.runKernel(Cs,e)}var rr=T({relu_:PM});function zM(r){let e={x:S(r,"x","relu6")};return k.runKernel(vs,e)}var Dc=T({relu6_:zM});function MM(r,t){let o={x:S(r,"x","reverse")},n={dims:t};return k.runKernel(Ki,o,n)}var Me=T({reverse_:MM});function BM(r){let t=S(r,"x","reverse");return E(t.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Me(t,0)}var GT=T({reverse1d_:BM});function VM(r,t){let e=S(r,"x","reverse");return E(e.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),Me(e,t)}var WT=T({reverse2d_:VM});function GM(r,t){let e=S(r,"x","reverse");return E(e.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),Me(e,t)}var UT=T({reverse3d_:GM});function WM(r,t){let e=S(r,"x","reverse");return E(e.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),Me(e,t)}var HT=T({reverse4d_:WM});function UM(r){let e={x:S(r,"x","round")};return k.runKernel(Ss,e)}var Rc=T({round_:UM});function HM(r){let e={x:S(r,"x","rsqrt","float32")};return k.runKernel(Ts,e)}var Fc=T({rsqrt_:HM});function qM(r){let e={x:S(r,"x","selu")};return k.runKernel(Is,e)}var _c=T({selu_:qM});function KM(r,t,e,o,n,s=[1,1],i="NHWC"){let a=S(r,"x","separableConv2d"),l=S(t,"depthwiseFilter","separableConv2d"),u=S(e,"pointwiseFilter","separableConv2d"),c=a,p=!1;if(a.rank===3&&(p=!0,c=A(a,[1,a.shape[0],a.shape[1],a.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");E(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),E(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),E(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),E(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),E(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=l.shape[2],f=l.shape[3];E(u.shape[2]===m*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*f}, but got ${u.shape[2]}.`);let h=Sn(c,l,o,n,i,s),g=zr(h,u,1,"valid",i);return p?A(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var Oc=T({separableConv2d_:KM});async function jM(r,t){let e=S(r,"x","setdiff1d"),o=S(t,"y","setdiff1d");E(e.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${o.dtype}).`),E(e.rank===1,()=>`x should be 1D tensor, but got x (${e.shape}).`),E(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await e.data(),s=await o.data(),i=new Set(s),a=0;for(let c=0;c<n.length;c++)i.has(n[c])||a++;let l=new Ut([a],e.dtype),u=new Ut([a],"int32");for(let c=0,p=0;c<n.length;c++)i.has(n[c])||(l.values[p]=n[c],u.values[p]=c,p++);return[l.toTensor(),u.toTensor()]}var qT=jM;function XM(r){let e={x:S(r,"x","sign")};return k.runKernel(Es,e)}var Rd=T({sign_:XM});function YM(r){let e={x:S(r,"x","sin","float32")};return k.runKernel(Ns,e)}var Lc=T({sin_:YM});function ZM(r){let e={x:S(r,"x","sinh")};return k.runKernel(ks,e)}var Pc=T({sinh_:ZM});function JM(r,t,e){let o=S(r,"x","slice1d");return E(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Ct(o,[t],[e])}var zc=T({slice1d_:JM});function QM(r,t,e){let o=S(r,"x","slice2d");return E(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Ct(o,t,e)}var bm=T({slice2d_:QM});function tB(r,t,e){let o=S(r,"x","slice3d");return E(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Ct(o,t,e)}var Mc=T({slice3d_:tB});function eB(r,t,e){let o=S(r,"x","slice4d");return E(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Ct(o,t,e)}var wl=T({slice4d_:eB});function rB(r,t=-1){let e=S(r,"logits","softmax","float32");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);let o={logits:e},n={dim:t};return k.runKernel(Qi,o,n)}var ya=T({softmax_:rB});function oB(r){E(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let t={input:r};return k.runKernel(Nu,t)}var ba=T({fft_:oB});function nB(r){E(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let t={input:r};return k.runKernel(Au,t)}var Gs=T({ifft_:nB});function sB(r){let t=r.shape[r.shape.length-1],e=r.size/t,o;if(t<=2){let n=A(r,[e,t]);o=Gs(n)}else{let n=[e,2*(t-1)],s=A(Bs(r),[e,t]),i=A(aa(r),[e,t]),a=Me(Ct(s,[0,1],[e,t-2]),1),l=R(Me(Ct(i,[0,1],[e,t-2]),1),nt(-1)),u=Bt([s,a],1),c=Bt([i,l],1),p=A(Lr(u,c),[n[0],n[1]]);o=Gs(p)}if(o=Bs(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=A(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var Bc=T({irfft_:sB});function iB(r,t,e=0){let n={x:S(r,"x","split")},s={numOrSizeSplits:t,axis:e};return k.runKernel(Ji,n,s)}var Be=T({split_:iB});function aB(r,t){E(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let e=r.shape[r.shape.length-1],o=r.size/e,n;if(t!=null&&t<e){let h=r.shape.map(g=>0),d=r.shape.map(g=>g);d[r.shape.length-1]=t,n=Ct(r,h,d),e=t}else if(t!=null&&t>e){let h=r.shape.map(d=>d);h[r.shape.length-1]=t-e,n=Bt([r,oe(h)],r.shape.length-1),e=t}else n=r;let s=dt(n),i=A(Lr(n,s),[o,e]),a=ba(i),l=Math.floor(e/2)+1,u=Bs(a),c=aa(a),p=Be(u,[l,e-l],u.shape.length-1),m=Be(c,[l,e-l],c.shape.length-1),f=n.shape.slice();return f[n.shape.length-1]=l,A(Lr(p[0],m[0]),f)}var wa=T({rfft_:aB});function lB(r,t){let e=S(r,"a","squaredDifference"),o=S(t,"b","squaredDifference");[e,o]=Rt(e,o),Tt(e.shape,o.shape);let n={a:e,b:o},s={};return k.runKernel(Rs,n,s)}var Vc=T({squaredDifference_:lB});function uB(r,t){let e=S(r,"x","squeeze","string_or_numeric");return A(e,Ob(e.shape,t).newShape)}var Jr=T({squeeze_:uB});function cB(r,t=0){let e=il(r,"tensors","stack","string_or_numeric");E(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&E(t<=e[0].rank,()=>"Axis must be <= rank of the tensor");let o=e,n={axis:t};return k.runKernel(Bi,o,n)}var Ae=T({stack_:cB});function pB(r,t=0){let o={x:S(r,"x","step")},n={alpha:t};return k.runKernel(Ls,o,n)}var Io=T({step_:pB});function mB(r,t,e,o,n=0,s=0,i=0,a=0,l=0){let c={x:S(r,"x","stridedSlice","string_or_numeric")},p={begin:t,end:e,strides:o,beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};return k.runKernel(tc,c,p)}var Fd=T({stridedSlice_:mB});function fB(r){let e={x:S(r,"x","tan","float32")};return k.runKernel(_s,e)}var _d=T({tan_:fB});function Ce(r,t){ao(r);let e=Or(r,t);if(e.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Sr(r,null,e,t)}function Ws(r,t,e){if(ao(r),t!=null&&t.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=Or(r,e);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Sr(r,t,o,e)}function KT(r,t,e){if(ao(r),t!=null&&t.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=Or(r,e);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Sr(r,t,o,e)}function jT(r,t,e){if(ao(r),t!=null&&t.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=Or(r,e);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Sr(r,t,o,e)}function XT(r,t,e){if(ao(r),t!=null&&t.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=Or(r,e);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||o,Sr(r,t,o,e)}function hB(r,t=1,e=!0){let o=S(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);let s={x:o},i={k:t,sorted:e},[a,l]=k.runKernel(nc,s,i);return{values:a,indices:l}}var Od=T({topk_:hB});function dB(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new yl(t,e,o,!0,n),i=pt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Gc=T({truncatedNormal_:dB});function gB(r,t=0){let e=S(r,"x","unique","string_or_numeric");E(e.rank>0,()=>"The input tensor must be at least 1D");let o={x:e},n={axis:t},[s,i]=k.runKernel(ic,o,n);return{values:s,indices:i}}var Ld=T({unique_:gB});function xB(r,t,e){let o=S(r,"x","unsortedSegmentSum"),n=S(t,"segmentIds","unsortedSegmentSum","int32");E(Un(e),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},i={numSegments:e};return k.runKernel(ea,s,i)}var Wc=T({unsortedSegmentSum_:xB});function yB(r,t=0){let e=S(r,"x","unstack","string_or_numeric");E(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);let o={value:e},n={axis:t};return k.runKernel(ta,o,n)}var je=T({unstack_:yB});function YT(r,t){return xm(r,t,"right")}function Pd(r,t=!0,e,o){return k.makeVariable(r,t,e,o)}function zd(r,t){let e=[];for(let s=0;s<t.length;s++)t[s]&&e.push(s);let o=pt(r,"int32"),n=pt([e.length,r.length],"int32");for(let s=0;s<e.length;s++){let i=o.indexToLoc(e[s]),a=s*r.length;n.values.set(i,a)}return n.toTensor()}async function bB(r){let t=S(r,"condition","whereAsync","bool"),e=await t.data(),o=zd(t.shape,e);return r!==t&&t.dispose(),o}var Md=bB;async function wB(r,t,e){let o=S(r,"tensor","boolMask"),n=S(t,"mask","boolMask","bool"),s=e??0,i=n.rank,a=o.shape;E(i>0,()=>"mask cannot be scalar"),Se(a.slice(s,s+i),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let d=s;d<s+i;d++)l*=a[d];let u=a.slice(0,s).concat([l],a.slice(s+i)),c=A(o,u),p=A(n,[-1]),m=await Md(p),f=Jr(m,[1]),h=kn(c,f,s);return r!==o&&o.dispose(),t!==n&&n.dispose(),f.dispose(),c.dispose(),p.dispose(),m.dispose(),h}var CB=wB;function vB(r,t,e,o,n=!0){let s=S(r,"v","movingAverage"),i=S(t,"x","movingAverage"),a=S(e,"decay","movingAverage");nw(s,i),E(bo(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=nt(1),u=tt(l,a),c=R(tt(i,s),u);if(n){E(o!=null,()=>"When using zeroDebias: true, step is required.");let p=S(o,"step","movingAverage");c=rt(c,tt(l,Ir(a,p)))}return H(s,c)}var SB=T({movingAverage_:vB});function TB(r,t,e){let o=S(r,"indices","scatterND","int32"),n=S(t,"updates","scatterND");Tw(n,o,e);let s={indices:o,updates:n},i={shape:e};return k.runKernel(qu,s,i)}var IB=T({scatterND_:TB});function ZT(r,t,e,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(e.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${s}.`);let i=t.size;if(!(t.rank===0||t.rank===1&&i===n))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);if(t.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function kB(r,t,e,o=0){let n=S(r,"sparseIndices","sparseToDense","int32"),s=S(t,"sparseValues","sparseToDense","string_or_numeric"),i=S(o,"defaultValue","sparseToDense",s.dtype);ZT(n,s,e,i);let a={sparseIndices:n,sparseValues:s,defaultValue:i},l={outputShape:e};return k.runKernel(Ju,a,l)}var EB=T({sparseToDense_:kB});function $B(r,t){let e=S(t,"indices","gatherND","int32"),n={params:S(r,"x","gatherND","string_or_numeric"),indices:e};return k.runKernel($u,n)}var AB=T({gatherND_:$B});function JT(r,t){if(t==null)return r.shape.slice();if(bo(r.shape,t))return t;if(r.shape.length===t.length){let e=[];for(let o=0;o<r.shape.length;o++)t[o]==null&&r.shape[o]!=null?e.push(r.shape[o]):e.push(t[o]);return e}return t}function DB(r,t,e,o){let n=S(r,"x","dropout");if(E(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),E(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),t===0)return r instanceof At?n.clone():n;let s=JT(n,e),i=1-t,a=rt(Nn(H($n(s,0,1,"float32",o),i)),i);return R(n,a)}var Vw=T({dropout_:DB});function Gw(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function wm(r,t,e){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let i=2*Math.PI*s/(r+o-1);n[s]=t-e*Math.cos(i)}return Ce(n,"float32")}async function RB(r,t,e=1){let o=S(r,"predictions","inTopK"),n=S(t,"targets","inTopK");E(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),E(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),Se(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];E(e>0&&e<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${e}`);let i=await o.data(),a=await n.data(),[l,u]=[i.length/s,s],c=Lb("bool",l);for(let p=0;p<l;p++){let m=p*u,f=i.subarray(m,m+u),h=[];for(let d=0;d<f.length;d++)h.push({value:f[d],index:d});h.sort((d,g)=>g.value-d.value),c[p]=0;for(let d=0;d<e;d++)if(h[d].index===a[p]){c[p]=1;break}}return r!==o&&o.dispose(),t!==n&&n.dispose(),Je(c,n.shape,"bool")}var FB=RB;var Ca={};qt(Ca,{conv2d:()=>QT,depthwiseConv2d:()=>tI,matMul:()=>eI});function _B(r,t,e,o,n,s="NHWC",i){let a=r;r.rank===3&&(a=A(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=A(t,[1,t.shape[0],t.shape[1],t.shape[2]])),E(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),E(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),E(e.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);let u=s==="NHWC"?a.shape[3]:a.shape[1],c=s==="NHWC"?l.shape[3]:l.shape[1];E(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),E(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),te("conv2dDerFilter",n,i);let p={x:a,dy:l},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,filterShape:e};return k.runKernel(hu,p,m)}var Uc=T({conv2DBackpropFilter_:_B});function Cl(r,t,e){if(e==null||e==="linear")return r;if(e==="relu")return R(r,Io(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function vl(r,t){let e=t,o=jt(r.shape,t.shape);return o.length>0&&(e=st(e,o)),A(e,r.shape)}function Sl(r,t,e,o){if(t==="linear")return r;if(t==="relu")return rr(r);if(t==="elu")return Tn(r);if(t==="relu6")return Dc(r);if(t==="prelu")return ga(r,e);if(t==="leakyrelu")return pa(r,o);if(t==="sigmoid")return dr(r);throw new Error(`Unknown fused activation ${t}.`)}var Tl=(r,t)=>!(r>0)||t==="linear";function OB({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",Tl(k.state.gradientDepth,l)===!1){E(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let $=zr(r,t,e,o,n,s,i);return a!=null&&($=H($,a)),Sl($,l,u,c)}let p=S(r,"x","conv2d","float32"),m=S(t,"filter","conv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=A(p,[1,p.shape[0],p.shape[1],p.shape[2]])),E(f.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),E(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),te("fused conv2d",o,i);let d=n==="NHWC"?f.shape[3]:f.shape[1];E(m.shape[2]===d,()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${m.shape[2]}.`),E(tr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let g=ml(f.shape,m.shape,e,s,o,i),x;a!=null&&(x=S(a,"bias","fused conv2d"),[x]=Rt(x,p),n==="NHWC"?Tt(g.outShape,x.shape):(E(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),E(x.shape.length===0||x.shape[0]===g.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let $=u.shape;if(E($.length<=1||$.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${$.length}.`),$.length===1)E($[0]===1||$[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the number of output channels (${g.outChannels}).`);else if($.length===3)try{Tt($,g.outShape)}catch{let F=`Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(F)}b=S(u,"prelu weights","fused conv2d")}let w=($,D)=>{E(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[F,O,L,B]=D,V=Cl($,L,l);E(co(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let G=Sc(O.shape,V,F,e,o),U=Uc(O,V,F.shape,e,o),W=[G,U];if(B!=null){let K=vl(B,V);W.push(K)}return W},C={x:f,filter:m,bias:x,preluActivationWeights:b},I={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Mr((D,F,O)=>{let L=k.runKernel(Ja,C,I);return O([F,D,L]),h&&(L=A(L,[L.shape[1],L.shape[2],L.shape[3]])),{value:L,gradFunc:w}})(f,m):Mr((D,F,O,L)=>{let B=k.runKernel(Ja,C,I);return L([F,D,B,O]),h&&(B=A(B,[B.shape[1],B.shape[2],B.shape[3]])),{value:B,gradFunc:w}})(f,m,x)}var QT=T({fusedConv2d_:OB});function LB(r,t,e,o,n,s=[1,1],i){let a=r;r.rank===3&&(a=A(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=A(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:a,dy:l},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,filterShape:e};return k.runKernel(Cu,u,c)}var Bd=T({depthwiseConv2dNativeBackpropFilter_:LB});function PB(r,t,e,o,n,s=[1,1],i){let a=t,l=!1;t.rank===3&&(l=!0,a=A(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:a,filter:e},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,inputShape:r},p=k.runKernel(vu,u,c);return l?A(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Vd=T({depthwiseConv2dNativeBackpropInput_:PB});function zB({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(Tl(k.state.gradientDepth,l)===!1){let I=Sn(r,t,e,o,n,s,i);return a!=null&&(I=H(I,a)),Sl(I,l,u,c)}let p=S(r,"x","depthwiseConv2d","float32"),m=S(t,"filter","depthwiseConv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=A(p,[1,p.shape[0],p.shape[1],p.shape[2]])),E(f.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),E(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),E(f.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),E(tr(e,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),te("fused depthwiseConv2d",o,i);let d=ml(f.shape,m.shape,e,s,o,i,!0),g;a!=null&&(g=S(a,"bias","fused conv2d"),[g]=Rt(g,p),Tt(d.outShape,g.shape));let x;u!=null&&(x=S(u,"prelu weights","fused depthwiseConv2d"));let b=(I,$)=>{E(co(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[D,F,O,L]=$,B=Cl(I,O,l),V=Vd(F.shape,B,D,e,o,s,i),G=Bd(F,B,D.shape,e,o,s,i);if(L!=null){let U=vl(g,B);return[V,G,U]}return[V,G]},w={x:f,filter:m,bias:g,preluActivationWeights:x},C={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Mr(($,D,F)=>{let O=k.runKernel(Qa,w,C);return F([D,$,O]),h&&(O=A(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:b}})(f,m):Mr(($,D,F,O)=>{let L=k.runKernel(Qa,w,C);return O([D,$,L,F]),h&&(L=A(L,[L.shape[1],L.shape[2],L.shape[3]])),{value:L,gradFunc:b}})(f,m,g)}var tI=T({fusedDepthwiseConv2d_:zB});function MB({a:r,b:t,transposeA:e=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(Tl(k.state.gradientDepth,s)===!1){let B=Dt(r,t,e,o);return n!=null&&(B=H(B,n)),Sl(B,s,i,a)}let l=S(r,"a","fused matMul"),u=S(t,"b","fused matMul");[l,u]=Rt(l,u);let c=e?l.shape[l.rank-2]:l.shape[l.rank-1],p=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=e?l.shape[l.rank-1]:l.shape[l.rank-2],f=o?u.shape[u.rank-2]:u.shape[u.rank-1],h=l.shape.slice(0,-2),d=u.shape.slice(0,-2),g=Ot(h),x=Ot(d);E(c===p,()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);let w=Tt(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,f]),C=e?A(l,[g,c,m]):A(l,[g,m,c]),I=o?A(u,[x,f,p]):A(u,[x,p,f]),$;n!=null&&($=S(n,"bias","fused matMul"),[$]=Rt($,l),Tt(w,$.shape));let D;i!=null&&(D=S(i,"prelu weights","fused matMul"));let F=(B,V)=>{let[G,U,W,K]=V,Z=Cl(A(B,W.shape),W,s),q,J;if(!e&&!o?(q=Dt(Z,U,!1,!0),J=Dt(G,Z,!0,!1)):!e&&o?(q=Dt(Z,U,!1,!1),J=Dt(Z,G,!0,!1)):e&&!o?(q=Dt(U,Z,!1,!0),J=Dt(G,Z,!1,!1)):(q=Dt(U,Z,!0,!0),J=Dt(Z,G,!0,!0)),n!=null){let ot=vl(K,Z);return[q,J,ot]}else return[q,J]},O={a:C,b:I,bias:$,preluActivationWeights:D},L={transposeA:e,transposeB:o,activation:s,leakyreluAlpha:a};return n==null?Mr((V,G,U)=>{let W=k.runKernel(Za,O,L);return U([V,G,W]),{value:A(W,w),gradFunc:F}})(C,I):Mr((V,G,U,W)=>{let K=k.runKernel(Za,O,L);return W([V,G,K,U]),{value:A(K,w),gradFunc:F}})(C,I,$)}var eI=T({fusedMatMul_:MB});function BB(r){return wm(r,.54,.46)}var rI=T({hammingWindow_:BB});function VB(r){return wm(r,.5,.5)}var Gd=T({hannWindow_:VB});function GB(r,t,e,o=!1,n=0){let s=0,i=[];for(;s+t<=r.size;)i.push(Ct(r,s,t)),s+=e;if(o)for(;s<r.size;){let a=s+t-r.size,l=Bt([Ct(r,s,t-a),In([a],n)]);i.push(l),s+=e}return i.length===0?Ws([],[0,t]):A(Bt(i),[i.length,t])}var Wd=T({frame_:GB});function WB(r,t,e,o,n=Gd){o==null&&(o=Gw(t));let s=Wd(r,t,e),i=R(s,n(t));return wa(i,o)}var oI=T({stft_:WB});function UB(r,t,e,o,n="bilinear",s=0){let i=S(r,"image","cropAndResize"),a=S(t,"boxes","cropAndResize","float32"),l=S(e,"boxInd","cropAndResize","int32"),u=a.shape[0];E(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),E(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),E(l.rank===1&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),E(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),E(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),E(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:i,boxes:a,boxInd:l},p={method:n,extrapolationValue:s,cropSize:o};return k.runKernel(yu,c,p)}var nI=T({cropAndResize_:UB});function HB(r){let t=S(r,"image","flipLeftRight","float32");E(t.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let e={image:t};return k.runKernel(Eu,e,{})}var sI=T({flipLeftRight_:HB});function qB(r){let t=S(r,"image","grayscaleToRGB"),e=t.rank-1,o=t.shape[e];E(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),E(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(t.rank);return n.fill(1,0,e),n[e]=3,er(t,n)}var iI=T({grayscaleToRGB_:qB});function KB(r,t,e=0,o=.5){let n=S(r,"image","rotateWithOffset","float32");E(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},i={radians:t,fillValue:e,center:o};return k.runKernel(ac,s,i)}var aI=T({rotateWithOffset_:KB});function No(r,t,e,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let i=r.shape[0];return e=Math.min(e,i),E(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),E(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),E(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),E(t.rank===1,()=>"scores must be a 1D tensor"),E(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),E(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function jB(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=S(r,"boxes","nonMaxSuppression","float32"),i=S(t,"scores","nonMaxSuppression","float32"),a=No(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l={maxOutputSize:e,iouThreshold:o,scoreThreshold:n};return k.runKernel(zu,{boxes:s,scores:i},l)}var lI=T({nonMaxSuppression_:jB});function uI(r,t,e){let o=XB(r,t,e),n=o<0?-(o+1):o;r.splice(n,0,t)}function XB(r,t,e){return ZB(r,t,e||YB)}function YB(r,t){return r>t?1:r<t?-1:0}function ZB(r,t,e){let o=0,n=r.length,s=0,i=!1;for(;o<n;){s=o+(n-o>>>1);let a=e(t,r[s]);a>0?o=s+1:(n=s,i=!a)}return i?o:-o-1}function Ud(r,t,e,o,n){return Ww(r,t,e,o,n,0)}function Hd(r,t,e,o,n,s){return Ww(r,t,e,o,n,0,!1,s,!0)}function qd(r,t,e,o,n,s){return Ww(r,t,e,o,n,s,!0)}function Ww(r,t,e,o,n,s,i=!1,a=!1,l=!1){let u=[];for(let g=0;g<t.length;g++)t[g]>n&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(cI);let c=s>0?-.5/s:0,p=[],m=[];for(;p.length<e&&u.length>0;){let g=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:w}=g;if(x<n)break;let C=!1;for(let I=p.length-1;I>=w;--I){let $=JB(r,b,p[I]);if($>=o){C=!0;break}if(g.score=g.score*QB(o,c,$),g.score<=n)break}g.suppressBeginIndex=p.length,C||(g.score===x?(p.push(b),m.push(g.score)):g.score>n&&uI(u,g,cI))}let f=p.length,h=e-f;a&&h>0&&(p.push(...new Array(h).fill(0)),m.push(...new Array(h).fill(0)));let d={selectedIndices:p};return i&&(d.selectedScores=m),l&&(d.validOutputs=f),d}function JB(r,t,e){let o=r.subarray(t*4,t*4+4),n=r.subarray(e*4,e*4+4),s=Math.min(o[0],o[2]),i=Math.min(o[1],o[3]),a=Math.max(o[0],o[2]),l=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),p=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),f=(a-s)*(l-i),h=(p-u)*(m-c);if(f<=0||h<=0)return 0;let d=Math.max(s,u),g=Math.max(i,c),x=Math.min(a,p),b=Math.min(l,m),w=Math.max(x-d,0)*Math.max(b-g,0);return w/(f+h-w)}function QB(r,t,e){let o=Math.exp(t*e*e);return e<=r?o:0}function cI(r,t){return r.score-t.score||r.score===t.score&&t.boxIndex-r.boxIndex}async function tV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=S(r,"boxes","nonMaxSuppressionAsync"),i=S(t,"scores","nonMaxSuppressionAsync"),a=No(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:p}=Ud(u,c,e,o,n);return s!==r&&s.dispose(),i!==t&&i.dispose(),Ce(p,"int32")}var pI=tV;function eV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=S(r,"boxes","nonMaxSuppression"),a=S(t,"scores","nonMaxSuppression"),l=No(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u={boxes:i,scores:a},c={maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},p=k.runKernel(Bu,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}var mI=T({nonMaxSuppressionWithScore_:eV});async function rV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=S(r,"boxes","nonMaxSuppressionAsync"),a=S(t,"scores","nonMaxSuppressionAsync"),l=No(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),a.data()]),c=u[0],p=u[1],{selectedIndices:m,selectedScores:f}=qd(c,p,e,o,n,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:Ce(m,"int32"),selectedScores:Ce(f)}}var fI=rV;function oV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=S(r,"boxes","nonMaxSuppression"),a=S(t,"scores","nonMaxSuppression"),l=No(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,m={boxes:i,scores:a},f={maxOutputSize:u,iouThreshold:c,scoreThreshold:p,padToMaxOutputSize:s},h=k.runKernel(Mu,m,f);return{selectedIndices:h[0],validOutputs:h[1]}}var hI=T({nonMaxSuppressionPadded_:oV});async function nV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=S(r,"boxes","nonMaxSuppressionAsync"),a=S(t,"scores","nonMaxSuppressionAsync"),l=No(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[m,f]=await Promise.all([i.data(),a.data()]),{selectedIndices:h,validOutputs:d}=Hd(m,f,u,c,p,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:Ce(h,"int32"),validOutputs:nt(d,"int32")}}var dI=nV;function sV(r,t,e=!1,o=!1){let n=S(r,"images","resizeBilinear");E(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),E(t.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),E(o===!1||e===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=A(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=k.runKernel(qi,a,l);return i?A(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var Kd=T({resizeBilinear_:sV});function iV(r,t,e=!1,o=!1){let n=S(r,"images","resizeNearestNeighbor");E(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),E(t.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),E(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),E(o===!1||e===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=A(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=k.runKernel(Hi,a,l);return i?A(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var jd=T({resizeNearestNeighbor_:iV});function aV(r,t="binary",e=!1,o=.5){let n=S(r,"image","threshold"),s=.2989,i=.587,a=.114,l=n.shape[0]*n.shape[1],u=R(Ce([o]),255),c,p,m,f;if(E(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),E(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),E(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),E(t==="otsu"||t==="binary",()=>`Method must be binary or otsu, but was ${t}`),n.shape[2]===3){[c,p,m]=Be(n,[1,1,1],-1);let g=R(c,s),x=R(p,i),b=R(m,a);f=H(H(g,x),b)}else f=r;if(t==="otsu"){let g=Qh(j(Rc(f),"int32"),Je([]),256);u=lV(g,l)}let h=e?Zr(f,u):Te(f,u);return j(R(h,255),"int32")}function lV(r,t){let e=Ce([-1]),o=Ce([0]),n=Ce([0]),s,i,a,l,u,c;for(let p=0;p<r.size-1;p++){s=Ct(r,0,p+1),i=Ct(r,p+1),u=rt(st(s),t),c=rt(st(i),t);let m=st(R(s,xa(0,s.size)));a=rt(m,st(s));let f=In(i.shape,s.size),h=H(xa(0,i.size),f),d=R(i,h);l=rt(st(d),st(i));let g=tt(a,l),x=tt(a,l),b=R(u,c);n=R(R(b,g),x);let w=Te(n,o);o=le(w,n,o),e=le(w,Ce([p]),e)}return e}var gI=T({threshold_:aV});function uV(r,t,e="nearest",o="constant",n=0,s){let i=S(r,"image","transform","float32"),a=S(t,"transforms","transform","float32");E(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),E(a.rank===2&&(a.shape[0]===i.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),E(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let l={image:i,transforms:a},u={interpolation:e,fillMode:o,fillValue:n,outputShape:s};return k.runKernel(sc,l,u)}var xI=T({transform_:uV});function cV(r,t,e){E(t%1===0,()=>`bandPart(): numLower must be an integer, got ${t}.`),E(e%1===0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);let o=S(r,"a","bandPart");E(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,i]=o.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(e<=i))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),e<0&&(e=i);let a=A(xa(0,s,1,"int32"),[-1,1]),l=xa(0,i,1,"int32"),u=tt(a,l),c=lr(Zr(u,nt(+t,"int32")),Yr(u,nt(-e,"int32"))),p=oe([s,i],o.dtype);return A(Ae(je(A(o,[-1,s,i])).map(m=>le(c,m,p))),n)}var yI=T({bandPart_:cV});function pV(r){let t;if(Array.isArray(r)){t=!1,E(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)E(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else t=!0,r=Be(r,r.shape[0],0).map(n=>Jr(n,[0]));E(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let e=[],o=r;for(let n=0;n<r.length;++n)e.push(k.tidy(()=>{let s=o[n];if(n>0)for(let i=0;i<n;++i){let a=R(st(R(e[i],s)),e[i]);s=tt(s,a)}return rt(s,Vs(s,"euclidean"))}));return t?Ae(e,0):e}var bI=T({gramSchmidt_:pV});function mV(r,t=!1){if(E(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return wI(r,t);{let e=r.shape.slice(0,r.shape.length-2).reduce((l,u)=>l*u),o=je(A(r,[e,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(l=>{let[u,c]=wI(l,t);n.push(u),s.push(c)});let i=A(Ae(n,0),r.shape),a=A(Ae(s,0),r.shape);return[i,a]}}function wI(r,t=!1){return k.tidy(()=>{E(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let e=r.shape[0],o=r.shape[1],n=dl(e),s=Tr(r),i=Ws([[1]],[1,1]),a=Tr(i),l=e>=o?o:e;for(let u=0;u<l;++u){let c=s,p=a,m=n;[a,s,n]=k.tidy(()=>{let f=Ct(s,[u,u],[e-u,1]),h=Vs(f),d=Ct(s,[u,u],[1,1]),g=le(Te(d,0),Ws([[-1]]),Ws([[1]])),x=tt(d,R(g,h)),b=rt(f,x);b.shape[0]===1?a=Tr(i):a=Bt([i,Ct(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let w=Ft(rt(Dt(g,x),h)),C=Ct(s,[u,0],[e-u,o]),I=R(w,a),$=Nt(a);if(u===0)s=tt(C,Dt(I,Dt($,C)));else{let O=tt(C,Dt(I,Dt($,C)));s=Bt([Ct(s,[0,0],[u,o]),O],0)}let D=Nt(I),F=Ct(n,[0,u],[e,n.shape[1]-u]);if(u===0)n=tt(F,Dt(Dt(F,a),D));else{let O=tt(F,Dt(Dt(F,a),D));n=Bt([Ct(n,[0,0],[e,u]),O],1)}return[a,s,n]}),xt([c,p,m])}return!t&&e>o&&(n=Ct(n,[0,0],[e,o]),s=Ct(s,[0,0],[o,o])),[n,s]})}var CI=T({qr_:mV});var De;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(De||(De={}));function fV(r,t,e=De.SUM_BY_NONZERO_WEIGHTS){let o=S(r,"losses","computeWeightedLoss"),n=null;t!=null&&(n=S(t,"weights","computeWeightedLoss"));let s=n==null?o:R(o,n);if(e===De.NONE)return s;if(e===De.SUM)return st(s);if(e===De.MEAN){if(n==null)return re(s);{let i=o.size/n.size,a=rt(st(s),st(n));return i>1?rt(a,nt(i)):a}}if(e===De.SUM_BY_NONZERO_WEIGHTS){if(n==null)return rt(st(s),nt(o.size));{let i=R(n,ze(o.shape)),a=j(st(Yo(i,nt(0))),"float32");return rt(st(s),a)}}throw Error(`Unknown reduction: ${e}`)}var ur=T({computeWeightedLoss_:fV});function hV(r,t,e,o=De.SUM_BY_NONZERO_WEIGHTS){let n=S(r,"labels","absoluteDifference"),s=S(t,"predictions","absoluteDifference"),i=null;e!=null&&(i=S(e,"weights","absoluteDifference")),Se(n.shape,s.shape,"Error in absoluteDifference: ");let a=ie(tt(n,s));return ur(a,i,o)}var vI=T({absoluteDifference_:hV});function dV(r,t,e,o,n=De.SUM_BY_NONZERO_WEIGHTS){let s=S(r,"labels","cosineDistance"),i=S(t,"predictions","cosineDistance"),a=null;o!=null&&(a=S(o,"weights","cosineDistance")),Se(s.shape,i.shape,"Error in cosineDistance: ");let l=nt(1),u=tt(l,st(R(s,i),e,!0));return ur(u,a,n)}var SI=T({cosineDistance_:dV});function gV(r,t,e,o=De.SUM_BY_NONZERO_WEIGHTS){let n=S(r,"labels","hingeLoss"),s=S(t,"predictions","hingeLoss"),i=null;e!=null&&(i=S(e,"weights","hingeLoss")),Se(n.shape,s.shape,"Error in hingeLoss: ");let a=nt(1);n=tt(R(nt(2),n),a);let l=rr(tt(a,R(n,s)));return ur(l,i,o)}var TI=T({hingeLoss_:gV});function xV(r,t,e,o=1,n=De.SUM_BY_NONZERO_WEIGHTS){let s=S(r,"labels","huberLoss"),i=S(t,"predictions","huberLoss"),a=null;e!=null&&(a=S(e,"weights","huberLoss")),Se(s.shape,i.shape,"Error in huberLoss: ");let l=nt(o),u=ie(tt(i,s)),c=En(u,l),p=tt(u,c),m=H(R(nt(.5),$t(c)),R(l,p));return ur(m,a,n)}var II=T({huberLoss_:xV});function yV(r,t,e,o=1e-7,n=De.SUM_BY_NONZERO_WEIGHTS){let s=S(r,"labels","logLoss"),i=S(t,"predictions","logLoss"),a=null;e!=null&&(a=S(e,"weights","logLoss")),Se(s.shape,i.shape,"Error in logLoss: ");let l=nt(1),u=nt(o),c=Ft(R(s,Ke(H(i,u)))),p=R(tt(l,s),Ke(H(tt(l,i),u))),m=tt(c,p);return ur(m,a,n)}var NI=T({logLoss_:yV});function bV(r,t,e,o=De.SUM_BY_NONZERO_WEIGHTS){let n=S(r,"labels","meanSquaredError"),s=S(t,"predictions","meanSquaredError"),i=null;e!=null&&(i=S(e,"weights","meanSquaredError")),Se(n.shape,s.shape,"Error in meanSquaredError: ");let a=Vc(n,s);return ur(a,i,o)}var kI=T({meanSquaredError_:bV});function wV(r,t){let e=S(r,"labels","sigmoidCrossEntropyWithLogits"),o=S(t,"logits","sigmoidCrossEntropyWithLogits");Se(e.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=rr(o),s=R(o,e),i=ma($e(Ft(ie(o))));return H(tt(n,s),i)}function CV(r,t,e,o=0,n=De.SUM_BY_NONZERO_WEIGHTS){let s=S(r,"multiClassLabels","sigmoidCrossEntropy"),i=S(t,"logits","sigmoidCrossEntropy"),a=null;if(e!=null&&(a=S(e,"weights","sigmoidCrossEntropy")),Se(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=nt(o),c=nt(1),p=nt(.5);s=H(R(s,tt(c,u)),R(p,u))}let l=wV(s,i);return ur(l,a,n)}var EI=T({sigmoidCrossEntropy_:CV});function vV(r,t,e=-1){if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return Mr((n,s,i)=>{let l=$c(s,[e],!0),u=tt(j(s,"float32"),l);i([n,u]);let c=Ft(R(u,n));return{value:st(c,[e]),gradFunc:(f,h)=>{let[d,g]=h,x=To(f.shape,[e]);return[R(A(f,x),tt(j(d,"float32"),$e(g))),R(A(f,x),tt($e(g),j(d,"float32")))]}}})(r,t)}function SV(r,t,e,o=0,n=De.SUM_BY_NONZERO_WEIGHTS){let s=S(r,"onehotLabels","softmaxCrossEntropy"),i=S(t,"logits","softmaxCrossEntropy"),a=null;if(e!=null&&(a=S(e,"weights","softmaxCrossEntropy")),Se(s.shape,i.shape,"Error in softmaxCrossEntropy: "),o>0){let u=nt(o),c=nt(1),p=nt(s.shape[1]);s=H(R(s,tt(c,u)),rt(u,p))}let l=vV(s,i);return ur(l,a,n)}var $I=T({softmaxCrossEntropy_:SV});function TV(r,t,e,o){let n=S(r,"indices","sparseFillEmptyRows","int32"),s=S(t,"values","sparseFillEmptyRows"),i=S(e,"denseShape","sparseFillEmptyRows","int32"),a=S(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(i.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(a.rank!==0)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);let l={indices:n,values:s,denseShape:i,defaultValue:a},u=k.runKernel(ju,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var AI=T({sparseFillEmptyRows_:TV});function IV(r,t,e){let o=S(r,"inputIndices","sparseReshape","int32"),n=S(t,"inputShape","sparseReshape","int32"),s=S(e,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i={inputIndices:o,inputShape:n,newShape:s},a=k.runKernel(Xu,i);return{outputIndices:a[0],outputShape:a[1]}}var DI=T({sparseReshape_:IV});function NV(r,t,e){let o=S(r,"data","sparseSegmentMean"),n=S(t,"indices","sparseSegmentMean","int32"),s=S(e,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return k.runKernel(Yu,i)}var RI=T({sparseSegmentMean_:NV});function kV(r,t,e){let o=S(r,"data","sparseSegmentSum"),n=S(t,"indices","sparseSegmentSum","int32"),s=S(e,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return k.runKernel(Zu,i)}var FI=T({sparseSegmentSum_:kV});function EV(r,t,e,o,n,s,i,a){let l=S(r,"data","stringNGrams","string");if(l.dtype!=="string")throw new Error("Data must be of datatype string");if(l.shape.length!==1)throw new Error(`Data must be a vector, saw: ${l.shape}`);let u=S(t,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let c={separator:e,nGramWidths:o,leftPad:n,rightPad:s,padWidth:i,preserveShortSequences:a},p={data:l,dataSplits:u},m=k.runKernel(ec,p,c);return{nGrams:m[0],nGramsSplits:m[1]}}var _I=T({stringNGrams_:EV});function $V(r,t,e=!0){let o=S(r,"input","stringSplit","string"),n=S(t,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:e},i={input:o,delimiter:n},a=k.runKernel(rc,i,s);return{indices:a[0],values:a[1],shape:a[2]}}var OI=T({stringSplit_:$V});function AV(r,t){let e=S(r,"input","stringToHashBucketFast","string"),o={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");let n={input:e};return k.runKernel(oc,n,o)}var LI=T({stringToHashBucketFast_:AV});var DV={fft:ba,ifft:Gs,rfft:wa,irfft:Bc},RV={hammingWindow:rI,hannWindow:Gd,frame:Wd,stft:oI},An={flipLeftRight:sI,grayscaleToRGB:iI,resizeNearestNeighbor:jd,resizeBilinear:Kd,rotateWithOffset:aI,cropAndResize:nI,nonMaxSuppression:lI,nonMaxSuppressionAsync:pI,nonMaxSuppressionWithScore:mI,nonMaxSuppressionWithScoreAsync:fI,nonMaxSuppressionPadded:hI,nonMaxSuppressionPaddedAsync:dI,threshold:gI,transform:xI},Uw={bandPart:yI,gramSchmidt:bI,qr:CI},FV={absoluteDifference:vI,computeWeightedLoss:ur,cosineDistance:SI,hingeLoss:TI,huberLoss:II,logLoss:NI,meanSquaredError:kI,sigmoidCrossEntropy:EI,softmaxCrossEntropy:$I},_V={sparseFillEmptyRows:AI,sparseReshape:DI,sparseSegmentMean:RI,sparseSegmentSum:FI},OV={stringNGrams:_I,stringSplit:OI,stringToHashBucketFast:LI};var cr=class extends dm{minimize(t,e=!1,o){let{value:n,grads:s}=this.computeGradients(t,o);if(o!=null){let i=o.map(a=>({name:a.name,tensor:s[a.name]}));this.applyGradients(i)}else this.applyGradients(s);return xt(s),e?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return _w(t,e)}dispose(){this.iterations_!=null&&xt(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:nt(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}};Object.defineProperty(cr,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var Hc=class extends cr{constructor(t,e,o=null){super(),this.learningRate=t,this.rho=e,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o],i=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:M(()=>dt(s).variable(i))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:M(()=>dt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;M(()=>{let c=H(R(l,this.rho),R($t(a),1-this.rho)),p=R(rt(ee(H(u,this.epsilon)),ee(H(l,this.epsilon))),a),m=H(R(u,this.rho),R($t(p),1-this.rho));l.assign(c),u.assign(m);let f=H(R(p,-this.learningRate),s);s.assign(f)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(xt(this.accumulatedGrads.map(t=>t.variable)),xt(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){let t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=t.length/2,o=!1;this.accumulatedGrads=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}};Hc.className="Adadelta";Pr(Hc);var qc=class extends cr{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:M(()=>In(s.shape,this.initialAccumulatorValue).variable(!1))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let a=this.accumulatedGrads[n].variable;M(()=>{let l=H(a,$t(i));a.assign(l);let u=H(R(rt(i,ee(H(l,k.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&xt(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulatedGrads=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}};qc.className="Adagrad";Pr(qc);var Kc=class extends cr{constructor(t,e,o,n=null){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],M(()=>{this.accBeta1=nt(e).variable(),this.accBeta2=nt(o).variable()}),n==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);M(()=>{let o=tt(1,this.accBeta1),n=tt(1,this.accBeta2);e.forEach((s,i)=>{let a=k.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:M(()=>dt(a).variable(l))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${s}/v`,variable:M(()=>dt(a).variable(l))});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedSecondMoment[i].variable,m=H(R(c,this.beta1),R(u,1-this.beta1)),f=H(R(p,this.beta2),R($t(u),1-this.beta2)),h=rt(m,o),d=rt(f,n);c.assign(m),p.assign(f);let g=H(R(rt(h,H(ee(d),this.epsilon)),-this.learningRate),a);a.assign(g)}),this.accBeta1.assign(R(this.accBeta1,this.beta1)),this.accBeta2.assign(R(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&xt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedSecondMoment!=null&&xt(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t),M(()=>{this.accBeta1.assign(Ir(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ir(this.beta2,this.iterations_+1))});let e=t.length/2,o=!1;this.accumulatedFirstMoment=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}};Kc.className="Adam";Pr(Kc);var jc=class extends cr{constructor(t,e,o,n=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],M(()=>{this.iteration=nt(0).variable(),this.accBeta1=nt(e).variable()}),n==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);M(()=>{let o=tt(1,this.accBeta1),n=rt(-this.learningRate,H(R(this.iteration,this.decay),1));e.forEach((s,i)=>{let a=k.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:dt(a).variable(l)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${s}/v`,variable:dt(a).variable(l)});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedWeightedInfNorm[i].variable,m=H(R(c,this.beta1),R(u,1-this.beta1)),f=R(p,this.beta2),h=ie(u),d=Br(f,h);c.assign(m),p.assign(d);let g=H(R(rt(n,o),rt(m,H(d,this.epsilon))),a);a.assign(g)}),this.iteration.assign(H(this.iteration,1)),this.accBeta1.assign(R(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&xt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedWeightedInfNorm!=null&&xt(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}};jc.className="Adamax";Pr(jc);var va=class extends cr{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=Array.isArray(t)?t[n].tensor:t[o];if(s==null)return;let i=k.registeredVariables[o];M(()=>{let a=H(R(this.c,s),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,this.c!=null&&this.c.dispose(),this.c=ue(nt(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(t=await this.extractIterations(t),t.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}};va.className="SGD";Pr(va);var Xc=class extends va{constructor(t,e,o=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=o,this.accumulations=[],this.m=nt(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:M(()=>dt(s).variable(!1))});let i=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[o];a!=null&&M(()=>{let l,u=H(R(this.m,i),a);this.useNesterov?l=H(R(this.c,H(a,R(u,this.m))),s):l=H(R(this.c,u),s),i.assign(u),s.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&xt(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulations=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}};Xc.className="Momentum";Pr(Xc);var Yc=class extends cr{constructor(t,e=.9,o=0,n=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=k.backend.epsilon()),t==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o],i=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:M(()=>dt(s).variable(i))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:M(()=>dt(s).variable(i))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:M(()=>dt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;M(()=>{let c=H(R(l,this.decay),R($t(a),1-this.decay));if(this.centered){let p=this.accumulatedMeanGrads[n].variable,m=H(R(p,this.decay),R(a,1-this.decay)),f=rt(R(a,this.learningRate),ee(tt(c,H($t(m),this.epsilon)))),h=H(R(u,this.momentum),f);l.assign(c),p.assign(m),u.assign(h);let d=tt(s,h);s.assign(d)}else{let p=H(R(l,this.decay),R($t(a),1-this.decay)),m=H(R(u,this.momentum),rt(R(a,this.learningRate),ee(H(p,this.epsilon))));l.assign(p),u.assign(m);let f=tt(s,m);s.assign(f)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&xt(this.accumulatedMeanSquares.map(t=>t.variable)),this.accumulatedMeanGrads!=null&&this.centered&&xt(this.accumulatedMeanGrads.map(t=>t.variable)),this.accumulatedMoments!=null&&xt(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=this.centered?t.length/3:t.length/2,o=!1;this.accumulatedMeanSquares=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=t.slice(e*2,e*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}};Yc.className="RMSProp";Pr(Yc);var Dn=class{static sgd(t){return new va(t)}static momentum(t,e,o=!1){return new Xc(t,e,o)}static rmsprop(t,e=.9,o=0,n=null,s=!1){return new Yc(t,e,o,n,s)}static adam(t=.001,e=.9,o=.999,n=null){return new Kc(t,e,o,n)}static adadelta(t=.001,e=.95,o=null){return new Hc(t,e,o)}static adamax(t=.002,e=.9,o=.999,n=null,s=0){return new jc(t,e,o,n,s)}static adagrad(t,e=.1){return new qc(t,e)}};var Il={sgd:Dn.sgd,momentum:Dn.momentum,adadelta:Dn.adadelta,adagrad:Dn.adagrad,rmsprop:Dn.rmsprop,adamax:Dn.adamax,adam:Dn.adam};var LV=(()=>typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:r=>r())();function Cm(){return new Promise(r=>LV(()=>r()))}var N={};qt(N,{ERF_A1:()=>ZV,ERF_A2:()=>JV,ERF_A3:()=>QV,ERF_A4:()=>tG,ERF_A5:()=>eG,ERF_P:()=>YV,PARALLELIZE_THRESHOLD:()=>Xd,RowPartitionType:()=>Rn,SELU_SCALE:()=>qw,SELU_SCALEALPHA:()=>Hw,applyActivation:()=>Sl,assertAndGetBroadcastShape:()=>Tt,assertAxesAreInnerMostDims:()=>d3,assertParamsConsistent:()=>PV,assignToTypedArray:()=>aG,axesAreInnerMostDims:()=>Aw,calculateShapes:()=>WP,checkEinsumDimSizes:()=>fG,checkPadOnDimRoundingMode:()=>te,combineLocations:()=>uT,combineRaggedTensorToTensorShapes:()=>MV,complexWithEvenIndex:()=>nG,complexWithOddIndex:()=>sG,computeConv2DInfo:()=>ml,computeConv3DInfo:()=>eT,computeDefaultPad:()=>$w,computeDilation2DInfo:()=>xz,computeOptimalWindowSize:()=>WV,computeOutAndReduceShapes:()=>Dw,computeOutShape:()=>zV,computePool2DInfo:()=>Ew,computePool3DInfo:()=>yz,convertConv2DDataFormat:()=>rT,decodeEinsumEquation:()=>pG,eitherStridesOrDilationsAreOne:()=>tr,expandShapeToKeepDim:()=>To,exponent:()=>uG,exponents:()=>lG,fromStringArrayToUint8:()=>_G,fromUint8ToStringArray:()=>FG,getAxesPermutation:()=>Rw,getBroadcastDims:()=>GS,getComplexWithIndex:()=>iG,getEinsumComputePath:()=>hG,getEinsumPermutation:()=>mG,getFusedBiasGradient:()=>vl,getFusedDyActivation:()=>Cl,getImageCenter:()=>UV,getInnerMostAxes:()=>g3,getPermuted:()=>qV,getRaggedRank:()=>VV,getReductionAxes:()=>jt,getReshaped:()=>HV,getReshapedPermuted:()=>KV,getRowPartitionTypesHelper:()=>BV,getSliceBeginCoords:()=>jV,getSliceSize:()=>XV,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>yG,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>bG,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>wG,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>SG,getSparseReshapeInputOutputMismatchErrorMessage:()=>IG,getSparseReshapeInputOutputMultipleErrorMessage:()=>TG,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>CG,getSparseReshapeNegativeOutputDimErrorMessage:()=>vG,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>$G,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>NG,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>kG,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>EG,getUndoAxesPermutation:()=>gm,isIdentityPermutation:()=>dG,log:()=>_L,mergeRealAndImagArrays:()=>rG,prepareAndValidate:()=>GP,prepareSplitSize:()=>xG,segment_util:()=>jw,shouldFuse:()=>Tl,slice_util:()=>He,splitRealAndImagArrays:()=>oG,tupleValuesAreOne:()=>co,upcastType:()=>Fe,validateDefaultValueShape:()=>GV,validateInput:()=>Tw,validateUpdateShape:()=>US,warn:()=>hn});function PV(r,t){let e=r[0].length;r.forEach((n,s)=>{E(n.length===e,()=>`Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`)}),E(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);let o=r[0];r.forEach((n,s)=>{for(let i=0;i<e;i++)E(i===t||n[i]===o[i],()=>`Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function zV(r,t){let e=r[0].slice();for(let o=1;o<r.length;o++)e[t]+=r[o][t];return e}var Rn;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(Rn||(Rn={}));function MV(r,t,e){let o=new Array;if(e==null&&t==null)return o;if(t==null)for(;o.length<r+e.length;)o.push(-1);else o=t.slice();if(e==null)return o;if(r+e.length!==o.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${r+e.length}, but shape.rank = ${o.length}`);for(let n=1;n<e.length;++n){let s=e[n],i=o[o.length-e.length+n],a=o[i];if(s>=0)if(a>=0){if(a!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${a}`)}else o[i]=s}return o}function BV(r){let t={FIRST_DIM_SIZE:Rn.FIRST_DIM_SIZE,VALUE_ROWIDS:Rn.VALUE_ROWIDS,ROW_LENGTHS:Rn.ROW_LENGTHS,ROW_SPLITS:Rn.ROW_SPLITS,ROW_LIMITS:Rn.ROW_LIMITS,ROW_STARTS:Rn.ROW_STARTS},e=[];for(let o of r)if(o in t)e.push(t[o]);else break;return e}function VV(r){return r.length===0?0:r[0]===Rn.FIRST_DIM_SIZE?r.length-1:r.length}function GV(r,t){if(r==null||t==null)return;let e=r.length,o=t.length;if(e>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(e,o-1);++n){let s=r[n],i=t[n+1];if(s>=0&&i>=0&&s!==1&&s!==i)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${i}`)}}var Xd=30;function WV(r){return r<=Xd?r:su(r,Math.floor(Math.sqrt(r)))}function UV(r,t,e){let o=e*(typeof r=="number"?r:r[0]),n=t*(typeof r=="number"?r:r[1]);return[o,n]}function HV(r,t,e,o=!0){let n=[];if(o)n=n.concat(t.slice(0)),n.push(r[0]/e),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=t.length;for(let i=0;i<s;++i)n=n.concat([r[i+1]/t[i],t[i]]);n=n.concat(r.slice(s+1))}return n}function qV(r,t,e=!0){let o=[];if(e){o.push(t);for(let n=t+1;n<r;++n)n<=2*t?(o.push(n),o.push(n-(t+1))):o.push(n)}else{let n=[],s=[];for(let i=1;i<r;++i)i>=t*2+1||i%2===1?s.push(i):n.push(i);o.push(...n),o.push(0),o.push(...s)}return o}function KV(r,t,e,o=!0){let n=[];o?n.push(r[0]/e):n.push(r[0]*e);for(let s=1;s<r.length;++s)s<=t.length?o?n.push(t[s-1]*r[s]):n.push(r[s]/t[s-1]):n.push(r[s]);return n}function jV(r,t){let e=[0];for(let o=0;o<t;++o)e.push(r[o][0]);return e}function XV(r,t,e){let o=r.slice(0,1);for(let n=0;n<e;++n)o.push(r[n+1]-t[n][0]-t[n][1]);return o}var Hw=1.7580993408473768,qw=1.0507009873554805;var YV=.3275911,ZV=.254829592,JV=-.284496736,QV=1.421413741,tG=-1.453152027,eG=1.061405429;function rG(r,t){if(r.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t.length}.`);let e=new Float32Array(r.length*2);for(let o=0;o<e.length;o+=2)e[o]=r[o/2],e[o+1]=t[o/2];return e}function oG(r){let t=new Float32Array(r.length/2),e=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)t[o/2]=r[o],e[o/2]=r[o+1];return{real:t,imag:e}}function nG(r){let t=Math.ceil(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=0;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function sG(r){let t=Math.floor(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=2;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function iG(r,t){let e=r[t*2],o=r[t*2+1];return{real:e,imag:o}}function aG(r,t,e,o){r[o*2]=t,r[o*2+1]=e}function lG(r,t){let e=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(t?2:-2)*Math.PI*(n/r);e[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:e,imag:o}}function uG(r,t,e){let o=(e?2:-2)*Math.PI*(r/t),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var Kw="->",cG=/->/g,PI=",",zI="...";function pG(r,t){r=r.replace(/\s/g,"");let e=(r.length-r.replace(cG,"").length)/Kw.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${Kw}").`);let[o,n]=r.split(Kw);E(o.indexOf(zI)===-1,()=>`The ellipsis notation ("${zI}") is not supported yet.`);let s=o.split(PI),i=s.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let a=[];for(let m=0;m<n.length;++m){let f=n[m];if(!s.some(h=>h.indexOf(f)!==-1))throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);a.indexOf(f)===-1&&a.push(f)}for(let m=0;m<o.length;++m){let f=o[m];a.indexOf(f)===-1&&f!==PI&&a.push(f)}let l=new Array(s.length);for(let m=0;m<i;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);l[m]=[];for(let f=0;f<s[m].length;++f)l[m].push(a.indexOf(s[m][f]))}let u=a.length,c=n.length,p=[];for(let m=c;m<u;++m)p.push(m);return{allDims:a,summedDims:p,idDims:l}}function mG(r,t){let e=new Array(r);e.fill(-1);for(let n=0;n<t.length;++n)e[t[n]]=n;let o=[];for(let n=0;n<r;++n)e[n]===-1&&o.push(n);return e=e.filter(n=>n!==-1),{permutationIndices:e,expandDims:o}}function fG(r,t,e){let o=new Array(r);for(let n=0;n<e.length;++n){let s=e[n].shape;for(let i=0;i<t[n].length;++i)o[t[n][i]]===void 0?o[t[n][i]]=s[i]:E(o[t[n][i]]===s[i],()=>`Expected dimension ${o[t[n][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`)}}function hG(r,t){let e=r,o=[],n=0;r.length===0&&e.push(-1),n=r.length+1;for(let i=0;i<n;++i)o.push([]);let s=[];for(let i=0;i<e.length;++i){let a=e[i],l=gG(t,a);for(let u of l)s.indexOf(u)===-1&&(o[i].push(u),s.push(u))}return{path:e,steps:o}}function dG(r){return r.every((t,e)=>t===e)}function gG(r,t){let e=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(t)!==-1||t===-1)&&e.push(o);return e}function xG(r,t,e=0){let o=[];if(typeof t=="number")E(r.shape[e]%t===0,()=>"Number of splits must evenly divide the axis."),o=new Array(t).fill(r.shape[e]/t);else{let n=t.reduce((i,a)=>(a===-1&&(i+=1),i),0);E(n<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(s!==-1){let i=t.reduce((a,l)=>l>0?a+l:a);t[s]=r.shape[e]-i}E(r.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),o=t}return o}function yG(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function bG(r,t){return`indices(${r}, 0) is invalid: ${t} < 0`}function wG(r,t,e){return`indices(${r}, 0) is invalid: ${t} >= ${e}`}function CG(r,t){return`only one output dimension may be -1, not both ${r} and ${t}`}function vG(r,t){return`size ${r} must be non-negative, not ${t}`}function SG(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function TG(r,t){let e=Ot(r),o=Ot(t);return`Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t}`}function IG(r,t){let e=Ot(r),o=Ot(t);return`Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t}`}function NG(){return"segment ids must be >= 0"}function kG(){return"segment ids are not increasing"}function EG(r,t){return`Segment id ${r} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function $G(r,t,e){return`Bad: indices[${r}] == ${t} out of range [0, ${e})`}var jw={};qt(jw,{collectGatherOpShapeInfo:()=>RG,computeOutShape:()=>DG,segOpComputeOptimalWindowSize:()=>AG});function AG(r,t){let e=!1,o;for(r<=Xd?(o=r,e=!0):o=su(r,Math.floor(Math.sqrt(r)));!e;)o>t||o===r?e=!0:o=su(r,o+1);return o}function DG(r,t,e){let o=[],n=r.length;for(let s=0;s<n;s++)s!==t?o.push(r[s]):o.push(e);return o}function RG(r,t,e,o){let n=t.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(e<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);for(let p=0;p<o;++p)if(r.shape[p]!==t.shape[p])throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${t.shape[p]}.`);let i=r.shape[e],a=[],l=1,u=1,c=1;for(let p=0;p<o;++p)a.push(r.shape[p]),l*=r.shape[p];for(let p=o;p<e;p++)a.push(r.shape[p]),u*=r.shape[p];for(let p=o;p<n;p++)a.push(t.shape[p]);for(let p=e+1;p<s;p++)a.push(r.shape[p]),c*=r.shape[p];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function FG(r){try{return r.map(t=>mc(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function _G(r){return r.map(t=>pc(t))}var pr={};qt(pr,{nonMaxSuppressionV3Impl:()=>Ud,nonMaxSuppressionV4Impl:()=>Hd,nonMaxSuppressionV5Impl:()=>qd,whereImpl:()=>zd});var Yd={kernelName:ci,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,Io(j(e,"float32"),-1))}}};var MI={kernelName:Hn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=$t(j(e,"float32")),n=ee(tt(nt(1),o));return Ft(rt(r,n))}}}};var BI={kernelName:qn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=ee(tt($t(j(e,"float32")),1));return rt(r,o)}}}};var VI={kernelName:Ho,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=r,l=jt(e.shape,n);return l.length>0&&(a=st(a,l)),A(a,e.shape)},b:()=>{let a=r,l=jt(o.shape,n);return l.length>0&&(a=st(a,l)),A(a,o.shape)}}}};var GI={kernelName:pi,saveAllInputs:!0,gradFunc:(r,t)=>{let e={};return t.forEach((o,n)=>{e[n]=()=>r.clone()}),e}};var WI={kernelName:mi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>dt(e)}}};var UI={kernelName:fi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>dt(e)}}};var HI={kernelName:Kn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,ee(tt(nt(1),$t(j(e,"float32")))))}}};var qI={kernelName:jn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=ee(H(nt(1),$t(j(e,"float32"))));return rt(r,o)}}}};var KI={kernelName:Zn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=H($t(e),$t(o)),l=R(r,rt(o,a)),u=jt(e.shape,n);return u.length>0&&(l=st(l,u)),A(l,e.shape)},b:()=>{let a=H($t(e),$t(o)),l=Ft(R(r,rt(e,a))),u=jt(o.shape,n);return u.length>0&&(l=st(l,u)),A(l,o.shape)}}}};var jI={kernelName:Xn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,H($t(j(e,"float32")),1))}}};var XI={kernelName:Yn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,tt(nt(1),$t(j(e,"float32"))))}}};function OG(r,t,e,o,n,s){let i=S(r,"dy","avgPool3dGrad"),a=S(t,"input","avgPool3dGrad"),l=i,u=a,c=!1;a.rank===4&&(c=!0,l=A(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=A(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),E(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),E(u.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),te("avgPool3dGrad",n,s);let p={dy:l,input:u},m={filterSize:e,strides:o,pad:n,dimRoundingMode:s},f=k.runKernel(cu,p,m);return c?A(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}var YI=T({avgPool3dGrad_:OG});var ZI={kernelName:di,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i,dimRoundingMode:a}=e;return{x:()=>YI(r,o,n,s,i,a)}}};function LG(r,t,e,o,n){let s=S(r,"dy","avgPoolGrad"),i=S(t,"input","avgPoolGrad");E(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let a=i,l=s,u=!1;i.rank===3&&(u=!0,a=A(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=A(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),E(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);let c={dy:l,input:a},p={filterSize:e,strides:o,pad:n},m=k.runKernel(uu,c,p);return u?A(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var JI=T({avgPoolGrad_:LG});var QI={kernelName:hi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i}=e;return{x:()=>JI(r,o,n,s,i)}}};var tN={kernelName:gi,inputsToSave:["a","b"],gradFunc:(r,t,e)=>{let[o,n]=t,{transposeA:s,transposeB:i}=e;return!s&&!i?{a:()=>Dt(r,n,!1,!0),b:()=>Dt(o,r,!0,!1)}:!s&&i?{a:()=>Dt(r,n,!1,!1),b:()=>Dt(r,o,!0,!1)}:s&&!i?{a:()=>Dt(n,r,!1,!0),b:()=>Dt(o,r,!1,!1)}:{a:()=>Dt(n,r,!0,!0),b:()=>Dt(r,o,!0,!0)}}};var eN={kernelName:xi,gradFunc:(r,t,e)=>{let{blockShape:o,crops:n}=e;return{x:()=>da(r,o,n)}}};var rN={kernelName:_v,gradFunc:(r,t,e)=>{let o=e,n=o.inputShape,s=o.shape,i=Array.from(s);for(let l=n.length-1;l>=0;l--)if(n[l]===s[l])i[l]=1;else if(n[l]!==1)throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${s}].`);let a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>st(r,a,!0)}}};var oN={kernelName:cn,gradFunc:r=>({x:()=>r.clone()})};var nN={kernelName:Jn,gradFunc:r=>({x:()=>dt(r)})};var sN={kernelName:Qn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{clipValueMin:n,clipValueMax:s}=e;return{x:()=>le(lr(Yr(o,n),Zr(o,s)),r,dt(r))}}};var iN={kernelName:yi,inputsToSave:["x"],gradFunc:Yd.gradFunc};var aN={kernelName:bi,saveAllInputs:!0,gradFunc:(r,t,e)=>{let o=t.map(l=>l.shape),{axis:n}=e,s=Le(n,t[0].shape)[0],i=o.map(l=>l[s]);return Be(r,i,s).map(l=>()=>l)}};var lN={kernelName:wi,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{dilations:s,strides:i,pad:a,dataFormat:l}=e;return E(co(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>Sc(o.shape,r,n,i,a,l),filter:()=>Uc(o,r,n.shape,i,a,l)}}};var uN={kernelName:Ci,inputsToSave:["dy","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{strides:s,pad:i,dataFormat:a,dimRoundingMode:l}=e;return{dy:()=>zr(r,n,s,i,a,1,l),filter:()=>Uc(r,o,n.shape,s,i,a,l)}}};function PG(r,t,e,o,n){let s=r;r.rank===4&&(s=A(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let i=t;i.rank===4&&(i=A(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),E(s.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),E(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),E(e.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),E(s.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${e[3]}.`),E(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);let a={x:s,dy:i},l={strides:o,pad:n,filterShape:e};return k.runKernel(du,a,l)}var cN=T({conv3DBackpropFilter_:PG});var pN={kernelName:vi,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s}=e;E(co(o),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);let[i,a]=t;return{x:()=>id(i.shape,r,a,n,s),filter:()=>cN(i,r,a.shape,n,s)}}};var mN={kernelName:ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(Ft(Lc(j(e,"float32"))),r)}}};var fN={kernelName:es,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(Pc(j(e,"float32")),r)}}};var hN={kernelName:Si,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n,exclusive:s,reverse:i}=e;return{x:()=>{let a=Rw([n],o.rank),l=Nc(r,n,s,!i);return a!=null&&(l=Nt(l,a)),l}}}};var dN={kernelName:Ti,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s,dimRoundingMode:i}=e,a=o??[1,1];E(co(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);let[l,u]=t;return E(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),E(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),E(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),E(tr(n,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${a}'.`),te("depthwiseConv2d",s,i),{x:()=>Vd(l.shape,r,u,n,s,a,i),filter:()=>Bd(l,r,u.shape,n,s,a,i)}}};var gN={kernelName:Ii,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,s={x:o,filter:n,dy:r},i={x:o,filter:n,dy:r};return{x:()=>k.runKernel(rm,s,e),filter:()=>k.runKernel(om,i,e)}}};var xN={kernelName:os,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t,o={dy:r,y:e};return{x:()=>k.runKernel(Iu,o)}}};var yN={kernelName:ns,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=R($e(Ft($t(e))),2/Math.sqrt(Math.PI));return{x:()=>R(r,o)}}};var bN={kernelName:ss,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,e)}}};var wN={kernelName:Ni,inputsToSave:["input"],gradFunc:(r,t)=>{let[e]=t;return{input:()=>A(r,e.shape)}}};var CN={kernelName:is,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,$e(e))}}};var vN={kernelName:as,gradFunc:r=>({x:()=>dt(r)})};var SN={kernelName:ls,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=rt(r,j(o,"float32")),l=jt(e.shape,n);return l.length>0?A(st(a,l),e.shape):a},b:()=>{let a=R(r,j(e,"float32")),l=jt(o.shape,n);l.length>0&&(a=A(st(a,l),o.shape));let u=$t(o);return Ft(rt(a,j(u,"float32")))}}}};var TN={kernelName:ki,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,t,e)=>{let{varianceEpsilon:o}=e,[n,s,i,a]=t,l=a??nt(1),u=jt(s.shape,n.shape),c=[];if(s.rank===1){for(let C=0;C<n.shape.length-1;++C)c.push(n.shape[C]);c.push(1)}let p=tt(n,s),m=R(r,l),f=Fc(H(i,nt(o))),h=R(R(R(f,f),f),nt(-.5));return{x:()=>s.rank===1?A(R(R(r,er(A(f,[1,1,1,s.shape[0]]),c)),l),n.shape):A(R(R(r,f),l),n.shape),mean:()=>{let C=R(R(f,nt(-1)),m);return s.rank===1&&(C=st(C,u)),A(C,s.shape)},variance:()=>{let C=R(R(h,p),m);return s.rank===1&&(C=st(C,u)),A(C,s.shape)},scale:()=>{let C=R(p,f),I=R(r,C);return s.rank===1&&(I=st(I,u)),A(I,s.shape)},offset:()=>{let C=r;return s.rank===1&&(C=st(C,u)),A(C,s.shape)}}}};var kN={kernelName:Ei,inputsToSave:["x","indices"],gradFunc:(r,t,e)=>{let[o,n]=t,{axis:s}=e,i=Le(s,o.shape)[0];return{x:()=>{let l=o.shape,u=n.size,c=l.slice(0,i),p=c.length,m=l.slice(s,l.length).slice(1),f=m.length,h=IN(0,p),d=IN(p+1,p+1+f),g=NN([c,[u],m]),x=A(r,g),b=A(n,[u]),w=NN([[p],h,d]),C=Nt(x,w),I=Wc(C,b,o.shape[i]),$=gm(w);return I=Nt(I,$),I},indices:()=>n}}};function IN(r,t){let e=[];for(let o=r;o<t;++o)e.push(o);return e}function NN(r){let t=[];for(let e=0;e<r.length;++e)for(let o=0;o<r[e].length;++o)t.push(r[e][o]);return t}var EN={kernelName:us,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>dt(e),b:()=>dt(o)}}};var $N={kernelName:pn,gradFunc:r=>({x:()=>j(r,"float32")})};var AN={kernelName:cs,gradFunc:r=>({x:()=>dt(r)})};var DN={kernelName:ps,gradFunc:r=>({x:()=>dt(r)})};var RN={kernelName:ms,gradFunc:r=>({x:()=>dt(r)})};var FN={kernelName:$i,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{alpha:n}=e,s=Te(o,0);return{x:()=>le(s,r,R(r,n))}}};var _N={kernelName:hs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,H(e,1))}}};var ON={kernelName:fs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,j(e,"float32"))}}};var LN={kernelName:Ov,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e;return{logits:()=>{let i=$e(o);return tt(r,R(st(r,n,!0),i))}}}};function zG(r,t,e,o=5,n=1,s=1,i=.5){let a={x:r,y:t,dy:e},l={depthRadius:o,bias:n,alpha:s,beta:i};return k.runKernel(Fu,a,l)}var PN=T({localResponseNormalizationBackprop_:zG});var zN={kernelName:Ai,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{depthRadius:s,bias:i,alpha:a,beta:l}=e;return{x:()=>PN(o,n,r,s,i,a,l)}}};function Zd(r,t,e,o){return t.rank<e.rank&&(t=A(t,To(t.shape,o))),r.rank<e.rank&&(r=A(r,To(r.shape,o))),{x:()=>R(r,j(gr(e,t),r.dtype))}}var Xw={kernelName:Di,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{reductionIndices:n}=o,s=t[0],i=t[1],a=Le(n,s.shape),l=Zd(r,i,s,a);return{x:()=>l.x()}}};var MN={kernelName:ds,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>R(r,j(Yr(e,o),"float32")),b:()=>R(r,j(kc(e,o),"float32"))}}};function MG(r,t,e,o,n,s,i){let a=S(r,"dy","maxPool3dGrad"),l=S(t,"input","maxPool3dGrad"),u=S(e,"output","maxPool3dGrad"),c=a,p=l,m=u,f=!1;l.rank===4&&(f=!0,c=A(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),p=A(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=A(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),E(c.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),E(p.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),E(m.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`),te("maxPool3dGrad",s,i);let h={dy:c,input:p,output:m},d={filterSize:o,strides:n,pad:s,dimRoundingMode:i},g=k.runKernel(Ou,h,d);return f?A(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}var BN=T({maxPool3dGrad_:MG});var VN={kernelName:Fi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=e;return{x:()=>BN(r,o,n,s,i,a,l)}}};function BG(r,t,e,o,n,s,i){let a=S(r,"dy","maxPoolGrad"),l=S(t,"input","maxPoolGrad"),u=S(e,"output","maxPoolGrad");E(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),E(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),E(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),te("maxPoolGrad",s,i);let c={dy:a,input:l,output:u},p={filterSize:o,strides:n,pad:s,dimRoundingMode:i};return k.runKernel(_u,c,p)}var GN=T({maxPoolGrad_:BG});var WN={kernelName:Ri,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a}=e;return{x:()=>GN(r,o,n,s,i,a)}}};var UN={kernelName:_i,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=Le(n,o.shape),a=Dw(o.shape,s)[1],l=Ot(a);return{x:()=>{let c=o.shape.slice();s.forEach(f=>{c[f]=1});let p=A(r,c);return rt(R(p,ze(o.shape,"float32")),l)}}}};var HN={kernelName:Oi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{axis:n}=o,[s,i]=t,a=Le(n,s.shape),l=Zd(r,i,s,a);return{x:()=>l.x()}}};var qN={kernelName:gs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>R(r,j(Zr(e,o),"float32")),b:()=>R(r,j(Te(e,o),"float32"))}}};var KN={kernelName:Li,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Ct(r,s,o.shape)}}};var jN={kernelName:xs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=jt(e.shape,n);return a.length>0?A(st(r,a),e.shape):r},b:()=>{let a=R(r,Ft(Nn(rt(e,o)))),l=jt(o.shape,n);return l.length>0?A(st(a,l),o.shape):a}}}};var XN={kernelName:ys,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=R(r,j(o,"float32")),l=jt(e.shape,n);return l.length>0?A(st(a,l),e.shape):a},b:()=>{let a=R(r,j(e,"float32")),l=jt(o.shape,n);return l.length>0?A(st(a,l),o.shape):a}}}};var YN={kernelName:Pi,gradFunc:r=>({x:()=>Ft(r)})};var ZN={kernelName:Mi,inputsToSave:["indices"],gradFunc:(r,t)=>{let e=t[0];return{indices:()=>oe(e.shape,"float32")}}};var JN={kernelName:zi,gradFunc:r=>({x:()=>dt(r)})};var QN={kernelName:Bi,saveAllInputs:!0,gradFunc:(r,t,e)=>{let{axis:o}=e;return je(r,o).map(s=>()=>s)}};var Yw={kernelName:Vi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Ct(r,s,o.shape)}}};var t1={kernelName:bs,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,t)=>{let[e,o,n]=t,s=e,i=o,a=Tt(s.shape,i.shape);return{a:()=>{let c=j(i,"float32"),p=R(r,R(c,Ir(s,tt(c,nt(1))))),m=jt(s.shape,a);return m.length>0&&(p=st(p,m)),A(p,s.shape)},b:()=>{let c=Te(s,0),p=le(c,Ke(s),dt(s)),m=R(r,R(n,p)),f=jt(i.shape,a);return f.length>0&&(m=st(m,f)),A(m,i.shape)}}}};var e1={kernelName:Gi,inputsToSave:["x","alpha"],gradFunc:(r,t)=>{let[e,o]=t,n=Te(e,0);return{x:()=>le(n,r,R(r,o)),alpha:()=>{let s=le(n,dt(r),R(r,e)),i=jt(o.shape,r.shape);return i.length>0&&(s=st(s,i)),A(s,o.shape)}}}};function VG(r,t,e){let o=r.shape.slice();o[e]=1;let n=A(t,o),s=fl(r,e,!0,!1),i=fl(r,e,!0,!0),a=R(s,i);return R(n,a)}function GG(r,t,e){let o=r.shape.length,n=o-e.length,s=N.getAxesPermutation(e,o),i=r;s!=null&&(i=Nt(r,s));let a=i.shape.slice(),u=a.splice(o-e.length,e.length).reduce((m,f)=>m*f,1);a.push(u);let c=i.reshape(a),p=VG(c,t,n);if(p=p.reshape(i.shape),s!=null){let m=N.getUndoAxesPermutation(s);p=Nt(p,m)}return p}var r1={kernelName:Wi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=[];return n==null?s=o.shape.map((i,a)=>a):typeof n=="number"?s=[n]:s=n,{x:()=>GG(o,r,s)}}};var o1={kernelName:rs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=rt(r,j(o,"float32")),l=jt(e.shape,n);return l.length>0?A(st(a,l),e.shape):a},b:()=>{let a=R(r,j(e,"float32")),l=jt(o.shape,n);l.length>0&&(a=A(st(a,l),o.shape));let u=$t(o);return Ft(rt(a,j(u,"float32")))}}}};var n1={kernelName:ws,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,Ft($t(e)))}}};var s1={kernelName:vs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=R(Zr(e,6),Io(e));return{x:()=>R(r,j(o,"float32"))}}};var i1={kernelName:Cs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,j(Io(e),"float32"))}}};var a1={kernelName:Ui,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,e.shape)}}};var l1={kernelName:qi,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>k.runKernel(Hu,n,e)}}};var u1={kernelName:Hi,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>k.runKernel(Uu,n,e)}}};var c1={kernelName:Ki,gradFunc:(r,t,e)=>{let{dims:o}=e,n=Le(o,r.shape);return{x:()=>Me(r,n)}}};var p1={kernelName:Ss,gradFunc:r=>({x:()=>dt(r)})};var m1={kernelName:Ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>Ft(rt(r,R(Ir(e,1.5),2)))}}};var f1={kernelName:ji,inputsToSave:["condition"],gradFunc:(r,t)=>{let[e]=t;return{condition:()=>j(dt(e),"float32"),t:()=>R(r,j(e,r.dtype)),e:()=>R(r,j(fa(e),r.dtype))}}};var h1={kernelName:Is,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=Te(e,nt(0)),n=nt(Hw),s=nt(qw),i=R(r,s),a=R(R(r,n),$e(j(e,"float32")));return le(o,i,a)}}}};var d1={kernelName:$s,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,R(e,tt(nt(1),e)))}}};var g1={kernelName:Es,gradFunc:r=>({x:()=>dt(r)})};var x1={kernelName:Ns,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(ca(j(e,"float32")),r)}}};var y1={kernelName:ks,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(Ic(j(e,"float32")),r)}}};var b1={kernelName:Xi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{begin:n,size:s}=e,i=o.shape,[a,l]=Nw(o,n,s),u=[];for(let c=0;c<r.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>Nr(r,u)}}};var w1={kernelName:Qi,outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{dim:n}=e,s=!0,i=R(r,o);return{logits:()=>tt(i,R(st(i,[n],s),o))}}};var C1={kernelName:As,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,dr(e))}}};var Zw={kernelName:Zi,gradFunc:(r,t,e)=>{let{blockShape:o,paddings:n}=e;return{x:()=>ua(r,o,n)}}};var Jw={kernelName:Ji,gradFunc:(r,t,e)=>{let{axis:o}=e;return{x:()=>Bt(r,o)}}};var v1={kernelName:Ds,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,R(ee(j(e,"float32")),2))}}};var S1={kernelName:Qu,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,R(j(e,"float32"),2))}}};var T1={kernelName:Rs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=nt(2);return{a:()=>R(r,R(n,tt(e,o))),b:()=>R(r,R(n,tt(o,e)))}}};var I1={kernelName:Ls,gradFunc:r=>({x:()=>dt(r)})};var N1={kernelName:Fs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=r,l=jt(e.shape,n);return l.length>0&&(a=st(a,l)),A(a,e.shape)},b:()=>{let a=r,l=jt(o.shape,n);return l.length>0&&(a=st(a,l)),A(Ft(a),o.shape)}}}};var k1={kernelName:Yi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,n=o.shape.slice(),{axis:s}=e;Le(s,o.shape).forEach(u=>{n[u]=1});let a=A(r,n),l=R(a,ze(o.shape,"float32"));return{x:()=>l}}};var E1={kernelName:_s,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>rt(r,$t(ca(e)))}}};var $1={kernelName:Os,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(tt(nt(1),$t(e)),r)}}};var A1={kernelName:mn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{reps:n}=e;return{x:()=>{let i=dt(o);if(o.rank===1)for(let a=0;a<n[0];++a)i=H(i,Ct(r,[a*o.shape[0]],[o.shape[0]]));else if(o.rank===2)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)i=H(i,Ct(r,[a*o.shape[0],l*o.shape[1]],[o.shape[0],o.shape[1]]));else if(o.rank===3)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)i=H(i,Ct(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2]],[o.shape[0],o.shape[1],o.shape[2]]));else if(o.rank===4)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)for(let c=0;c<n[3];++c)i=H(i,Ct(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2],c*o.shape[3]],[o.shape[0],o.shape[1],o.shape[2],o.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${o.rank} tensors yet.`);return i}}}};var D1={kernelName:fn,gradFunc:(r,t,e)=>{let o=e,{perm:n}=o,s=gm(n);return{x:()=>Nt(r,s)}}};var R1={kernelName:ta,gradFunc:(r,t,e)=>{let o=e,{axis:n}=o;return{value:()=>Ae(r,n)}}};var F1={kernelName:ea,inputsToSave:["segmentIds"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>WG(r,e)}}};function WG(r,t){let e=Br(t,dt(t)),o=kn(r,e),n=Yr(t,nt(0,"int32")),s=o.rank-n.rank;for(let a=0;a<s;++a)n=Pe(n,a+1);n=lr(n,ze(o.shape,"bool"));let i=dt(o);return le(n,o,i)}var _1={kernelName:ra,gradFunc:r=>({x:()=>dt(r)})};var UG=[Yd,MI,BI,VI,GI,WI,UI,HI,qI,KI,jI,XI,ZI,QI,tN,eN,rN,oN,nN,sN,iN,aN,uN,lN,pN,mN,fN,hN,dN,gN,o1,xN,yN,bN,wN,CN,SN,vN,TN,kN,EN,$N,AN,DN,RN,FN,_N,ON,LN,zN,Xw,Xw,MN,VN,WN,UN,HN,qN,KN,jN,XN,YN,ZN,JN,QN,Yw,Yw,t1,e1,r1,n1,s1,i1,a1,l1,u1,c1,p1,m1,f1,h1,d1,g1,x1,y1,b1,w1,C1,Zw,Zw,Jw,Jw,v1,T1,S1,I1,N1,k1,E1,$1,A1,D1,R1,F1,_1];for(let r of UG)Pv(r);_().prototype.abs=function(){return this.throwIfDisposed(),ie(this)};_().prototype.acos=function(){return this.throwIfDisposed(),Bh(this)};_().prototype.acosh=function(){return this.throwIfDisposed(),Vh(this)};_().prototype.add=function(r){return this.throwIfDisposed(),H(this,r)};_().prototype.all=function(r,t){return this.throwIfDisposed(),wc(this,r,t)};_().prototype.any=function(r,t){return this.throwIfDisposed(),cl(this,r,t)};_().prototype.argMax=function(r){return this.throwIfDisposed(),bn(this,r)};_().prototype.argMin=function(r){return this.throwIfDisposed(),Gh(this,r)};_().prototype.asScalar=function(){return this.throwIfDisposed(),E(this.size===1,()=>"The array must have only 1 element."),A(this,[])};_().prototype.asType=function(r){return this.throwIfDisposed(),j(this,r)};_().prototype.as1D=function(){return this.throwIfDisposed(),A(this,[this.size])};_().prototype.as2D=function(r,t){return this.throwIfDisposed(),A(this,[r,t])};_().prototype.as3D=function(r,t,e){return this.throwIfDisposed(),A(this,[r,t,e])};_().prototype.as4D=function(r,t,e,o){return this.throwIfDisposed(),A(this,[r,t,e,o])};_().prototype.as5D=function(r,t,e,o,n){return this.throwIfDisposed(),A(this,[r,t,e,o,n])};_().prototype.asin=function(){return this.throwIfDisposed(),Wh(this)};_().prototype.asinh=function(){return this.throwIfDisposed(),Uh(this)};_().prototype.atan=function(){return this.throwIfDisposed(),Hh(this)};_().prototype.atan2=function(r){return this.throwIfDisposed(),qh(this,r)};_().prototype.atanh=function(){return this.throwIfDisposed(),Kh(this)};_().prototype.avgPool=function(r,t,e,o){return this.throwIfDisposed(),la(this,r,t,e,o)};_().prototype.batchToSpaceND=function(r,t){return this.throwIfDisposed(),ua(this,r,t)};_().prototype.batchNorm=function(r,t,e,o,n){return this.throwIfDisposed(),Cn(this,r,t,e,o,n)};_().prototype.broadcastTo=function(r){return this.throwIfDisposed(),vn(this,r)};_().prototype.cast=function(r){return this.throwIfDisposed(),j(this,r)};_().prototype.ceil=function(){return this.throwIfDisposed(),td(this)};_().prototype.clipByValue=function(r,t){return this.throwIfDisposed(),qe(this,r,t)};_().prototype.concat=function(r,t){return this.throwIfDisposed(),r instanceof At&&(r=[r]),Bt([this,...r],t)};_().prototype.conv1d=function(r,t,e,o,n,s){return this.throwIfDisposed(),vc(this,r,t,e,o,n,s)};_().prototype.conv2dTranspose=function(r,t,e,o,n){return this.throwIfDisposed(),Tc(this,r,t,e,o,n)};_().prototype.conv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),zr(this,r,t,e,o,n,s)};_().prototype.cos=function(){return this.throwIfDisposed(),ca(this)};_().prototype.cosh=function(){return this.throwIfDisposed(),Ic(this)};_().prototype.cumprod=function(r,t,e){return this.throwIfDisposed(),fl(this,r,t,e)};_().prototype.cumsum=function(r,t,e){return this.throwIfDisposed(),Nc(this,r,t,e)};_().prototype.depthToSpace=function(r,t){return this.throwIfDisposed(),ld(this,r,t)};_().prototype.depthwiseConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Sn(this,r,t,e,o,n,s)};_().prototype.dilation2d=function(r,t,e,o,n){return this.throwIfDisposed(),ud(this,r,t,e,o,n)};_().prototype.divNoNan=function(r){return this.throwIfDisposed(),cd(this,r)};_().prototype.div=function(r){return this.throwIfDisposed(),rt(this,r)};_().prototype.dot=function(r){return this.throwIfDisposed(),pd(this,r)};_().prototype.elu=function(){return this.throwIfDisposed(),Tn(this)};_().prototype.equal=function(r){return this.throwIfDisposed(),gr(this,r)};_().prototype.erf=function(){return this.throwIfDisposed(),md(this)};_().prototype.euclideanNorm=function(r,t){return this.throwIfDisposed(),fd(this,r,t)};_().prototype.exp=function(){return this.throwIfDisposed(),$e(this)};_().prototype.expandDims=function(r){return this.throwIfDisposed(),Pe(this,r)};_().prototype.expm1=function(){return this.throwIfDisposed(),hd(this)};_().prototype.fft=function(){return this.throwIfDisposed(),ba(this)};_().prototype.flatten=function(){return this.throwIfDisposed(),A(this,[this.size])};_().prototype.floor=function(){return this.throwIfDisposed(),Nn(this)};_().prototype.floorDiv=function(r){return this.throwIfDisposed(),bc(this,r)};_().prototype.gather=function(r,t){return this.throwIfDisposed(),kn(this,r,t)};_().prototype.greaterEqual=function(r){return this.throwIfDisposed(),Yr(this,r)};_().prototype.greater=function(r){return this.throwIfDisposed(),Te(this,r)};_().prototype.ifft=function(){return this.throwIfDisposed(),Gs(this)};_().prototype.irfft=function(){return this.throwIfDisposed(),Bc(this)};_().prototype.isFinite=function(){return this.throwIfDisposed(),dd(this)};_().prototype.isInf=function(){return this.throwIfDisposed(),gd(this)};_().prototype.isNaN=function(){return this.throwIfDisposed(),xd(this)};_().prototype.leakyRelu=function(r){return this.throwIfDisposed(),pa(this,r)};_().prototype.lessEqual=function(r){return this.throwIfDisposed(),Zr(this,r)};_().prototype.less=function(r){return this.throwIfDisposed(),kc(this,r)};_().prototype.localResponseNormalization=function(r,t,e,o){return this.throwIfDisposed(),yd(this,r,t,e,o)};_().prototype.logSigmoid=function(){return this.throwIfDisposed(),bd(this)};_().prototype.logSoftmax=function(r){return this.throwIfDisposed(),Ec(this,r)};_().prototype.logSumExp=function(r,t){return this.throwIfDisposed(),$c(this,r,t)};_().prototype.log=function(){return this.throwIfDisposed(),Ke(this)};_().prototype.log1p=function(){return this.throwIfDisposed(),ma(this)};_().prototype.logicalAnd=function(r){return this.throwIfDisposed(),lr(this,r)};_().prototype.logicalNot=function(){return this.throwIfDisposed(),fa(this)};_().prototype.logicalOr=function(r){return this.throwIfDisposed(),Ac(this,r)};_().prototype.logicalXor=function(r){return this.throwIfDisposed(),wd(this,r)};_().prototype.matMul=function(r,t,e){return this.throwIfDisposed(),Dt(this,r,t,e)};_().prototype.maxPool=function(r,t,e,o){return this.throwIfDisposed(),ha(this,r,t,e,o)};_().prototype.max=function(r,t){return this.throwIfDisposed(),ar(this,r,t)};_().prototype.maximum=function(r){return this.throwIfDisposed(),Br(this,r)};_().prototype.mean=function(r,t){return this.throwIfDisposed(),re(this,r,t)};_().prototype.min=function(r,t){return this.throwIfDisposed(),hl(this,r,t)};_().prototype.minimum=function(r){return this.throwIfDisposed(),En(this,r)};_().prototype.mirrorPad=function(r,t){return this.throwIfDisposed(),Sd(this,r,t)};_().prototype.mod=function(r){return this.throwIfDisposed(),Td(this,r)};_().prototype.mul=function(r){return this.throwIfDisposed(),R(this,r)};_().prototype.neg=function(){return this.throwIfDisposed(),Ft(this)};_().prototype.norm=function(r,t,e){return this.throwIfDisposed(),Vs(this,r,t,e)};_().prototype.notEqual=function(r){return this.throwIfDisposed(),Yo(this,r)};_().prototype.oneHot=function(r,t=1,e=0){return this.throwIfDisposed(),ll(this,r,t,e)};_().prototype.onesLike=function(){return this.throwIfDisposed(),Ge(this)};_().prototype.pad=function(r,t){return this.throwIfDisposed(),Nr(this,r,t)};_().prototype.pool=function(r,t,e,o,n,s){return this.throwIfDisposed(),Id(this,r,t,e,o,n,s)};_().prototype.pow=function(r){return this.throwIfDisposed(),Ir(this,r)};_().prototype.prelu=function(r){return this.throwIfDisposed(),ga(this,r)};_().prototype.prod=function(r,t){return this.throwIfDisposed(),Nd(this,r,t)};_().prototype.reciprocal=function(){return this.throwIfDisposed(),Dd(this)};_().prototype.relu=function(){return this.throwIfDisposed(),rr(this)};_().prototype.relu6=function(){return this.throwIfDisposed(),Dc(this)};_().prototype.reshapeAs=function(r){return this.throwIfDisposed(),A(this,r.shape)};_().prototype.reshape=function(r){return this.throwIfDisposed(),A(this,r)};_().prototype.resizeBilinear=function(r,t,e){return this.throwIfDisposed(),Kd(this,r,t,e)};_().prototype.resizeNearestNeighbor=function(r,t,e){return this.throwIfDisposed(),jd(this,r,t,e)};_().prototype.reverse=function(r){return this.throwIfDisposed(),Me(this,r)};_().prototype.rfft=function(){return this.throwIfDisposed(),wa(this)};_().prototype.round=function(){return this.throwIfDisposed(),Rc(this)};_().prototype.rsqrt=function(){return this.throwIfDisposed(),Fc(this)};_().prototype.selu=function(){return this.throwIfDisposed(),_c(this)};_().prototype.separableConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Oc(this,r,t,e,o,n,s)};_().prototype.sigmoid=function(){return this.throwIfDisposed(),dr(this)};_().prototype.sign=function(){return this.throwIfDisposed(),Rd(this)};_().prototype.sin=function(){return this.throwIfDisposed(),Lc(this)};_().prototype.sinh=function(){return this.throwIfDisposed(),Pc(this)};_().prototype.slice=function(r,t){return this.throwIfDisposed(),Ct(this,r,t)};_().prototype.softmax=function(r){return this.throwIfDisposed(),ya(this,r)};_().prototype.softplus=function(){return this.throwIfDisposed(),Xo(this)};_().prototype.spaceToBatchND=function(r,t){return this.throwIfDisposed(),da(this,r,t)};_().prototype.split=function(r,t){return this.throwIfDisposed(),Be(this,r,t)};_().prototype.sqrt=function(){return this.throwIfDisposed(),ee(this)};_().prototype.square=function(){return this.throwIfDisposed(),$t(this)};_().prototype.squaredDifference=function(r){return this.throwIfDisposed(),Vc(this,r)};_().prototype.squeeze=function(r){return this.throwIfDisposed(),Jr(this,r)};_().prototype.stack=function(r,t){this.throwIfDisposed();let e=r instanceof At?[this,r]:[this,...r];return Ae(e,t)};_().prototype.step=function(r){return this.throwIfDisposed(),Io(this,r)};_().prototype.stridedSlice=function(r,t,e,o,n,s,i,a){return this.throwIfDisposed(),Fd(this,r,t,e,o,n,s,i,a)};_().prototype.sub=function(r){return this.throwIfDisposed(),tt(this,r)};_().prototype.sum=function(r,t){return this.throwIfDisposed(),st(this,r,t)};_().prototype.tan=function(){return this.throwIfDisposed(),_d(this)};_().prototype.tanh=function(){return this.throwIfDisposed(),wn(this)};_().prototype.tile=function(r){return this.throwIfDisposed(),er(this,r)};_().prototype.toBool=function(){return this.throwIfDisposed(),j(this,"bool")};_().prototype.toFloat=function(){return this.throwIfDisposed(),j(this,"float32")};_().prototype.toInt=function(){return this.throwIfDisposed(),j(this,"int32")};_().prototype.topk=function(r,t){return this.throwIfDisposed(),Od(this,r,t)};_().prototype.transpose=function(r){return this.throwIfDisposed(),Nt(this,r)};_().prototype.unique=function(r){return this.throwIfDisposed(),Ld(this,r)};_().prototype.unsortedSegmentSum=function(r,t){return this.throwIfDisposed(),Wc(this,r,t)};_().prototype.unstack=function(r){return this.throwIfDisposed(),je(this,r)};_().prototype.where=function(r,t){return this.throwIfDisposed(),le(r,this,t)};_().prototype.zerosLike=function(){return this.throwIfDisposed(),dt(this)};var Vr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Vr.prototype)}},mr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,mr.prototype)}},P=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,P.prototype)}},gt=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gt.prototype)}},Zc=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Zc.prototype)}};var vm=class{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){let o=this.cache.keys().next().value;this.cache.delete(o)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){let o=this.cache.keys().next().value;this.cache.delete(o)}this.maxEntries=t}};function Eo(r,t){if(Array.isArray(r)){let e=[];for(let o=0;o<t;o++)e=e.concat(r);return e}else{let e=new Array(t);return e.fill(r),e}}function mo(r,t){if(!r)throw new Zc(t)}function t0(r,t){let e=0;for(let o of r)o===t&&e++;return e}function Xe(r){return r.length===1?r[0]:r}function Xt(r){return Array.isArray(r)?r:[r]}function $o(r){let e=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return e[0]!=="_"?e:"private"+e}function Us(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}var ko={};function Jc(r){if(r==null)return null;let t={};return t.className=r.getClassName(),t.config=r.getConfig(),t}function Qw(r){if(!(r==null||typeof r!="object"))if(Array.isArray(r))r.forEach(t=>Qw(t));else{let t=Object.keys(r);for(let e of t){let o=r[e];o!=null&&typeof o=="object"&&(!Array.isArray(o)&&o.type==="ndarray"&&typeof o.value=="number"?r[e]=o.value:Qw(o))}}}function Fn(r,t={},e={},o="object",n=!1){if(typeof r=="string"){let s=r,i;if(s in e)i=e[s];else if(s in ko)i=ko[s];else if(i=t[s],i==null)throw new P(`Unknown ${o}: ${r}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{let s=r;if(s.className==null||s.config==null)throw new P(`${o}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);let i=s.className,a,l;if(i in e?[a,l]=e[i]:i in ko?[a,l]=ko.className:i in t&&([a,l]=t[i]),a==null)throw new P(`Unknown ${o}: ${i}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){let u={};for(let f of Object.keys(ko))u[f]=ko[f];for(let f of Object.keys(e))u[f]=e[f];let c=s.config;c.customObjects=u;let p=Object.assign({},ko);for(let f of Object.keys(e))ko[f]=e[f];Qw(s.config);let m=l(a,s.config,e,n);return ko=Object.assign({},p),m}else{let u=Object.assign({},ko);for(let p of Object.keys(e))ko[p]=e[p];let c=new a(s.config);return ko=Object.assign({},u),c}}}function HG(r,t){return r<t?-1:r>t?1:0}function Sm(r,t){return-1*HG(r,t)}function Ao(r){if(r==null)return r;let t=[];for(let e of r)t.indexOf(e)===-1&&t.push(e);return t}function O1(r){if(r==null)throw new P(`Invalid value in obj: ${JSON.stringify(r)}`);for(let t in r)if(r.hasOwnProperty(t))return!1;return!0}function _n(r,t,e){if(e!=null&&r.indexOf(e)<0)throw new P(`${e} is not a valid ${t}.  Valid values are ${r} or null/undefined.`)}function Jd(r,t,e=0,o=1/0){return mo(e>=0),mo(o>=e),Array.isArray(r)&&r.length>=e&&r.length<=o&&r.every(n=>typeof n===t)}function Ne(r,t){Array.isArray(r)?(y.assert(r.length>0,()=>`${t} is unexpectedly an empty array.`),r.forEach((e,o)=>Ne(e,`element ${o+1} of ${t}`))):y.assert(Number.isInteger(r)&&r>0,()=>`Expected ${t} to be a positive integer, but got ${L1(r)}.`)}function L1(r){return r===null?"null":Array.isArray(r)?"["+r.map(t=>L1(t)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function P1(r,t,e){let o=e!=null?e():y.now(),n;return(...i)=>{let a=e!=null?e():y.now();return a-o<t||(o=a,n=r(...i)),n}}function Qd(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}var qG=0;function eg(){return qG++}var tg={};function Sa(r=""){return r in tg||(tg[r]=0),tg[r]+=1,r+tg[r].toString()}var z1=["channelsFirst","channelsLast"],M1=["nearest","bilinear"],B1=["valid","same","causal"],V1=["max","avg"],G1=["sum","mul","concat","ave"];var Qc=new Map;function ce(r){_n(z1,"DataFormat",r)}function U1(r){_n(M1,"InterpolationFormat",r)}function kr(r){_n(B1,"PaddingMode",r)}function e0(r){_n(V1,"PoolMode",r)}var Tm=[],W1="/";function Jo(r,t){Tm.push(r);try{let e=t();return Tm.pop(),e}catch(e){throw Tm.pop(),e}}function KG(){return Tm.length===0?"":Tm.join(W1)+W1}function rg(r){if(!H1(r))throw new Error("Not a valid tensor name: '"+r+"'");return KG()+r}function og(r){if(!H1(r))throw new Error("Not a valid tensor name: '"+r+"'");Qc.has(r)||Qc.set(r,0);let t=Qc.get(r);if(Qc.set(r,Qc.get(r)+1),t>0){let e=`${r}_${t}`;return Qc.set(e,1),e}else return r}var jG=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function H1(r){return!!r.match(jG)}function q1(r){return r===parseInt(r.toString(),10)}function Do(r,t,e){t==null&&(t=0),e==null&&(e=r.length);let o=1;for(let n=t;n<e;++n)o*=r[n];return o}function Nl(r){if(r.length===0)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o<t&&(t=o)}return t}function Qo(r){if(r.length===0)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o>t&&(t=o)}return t}function xr(r,t){if(t<r)throw new P(`end (${t}) < begin (${r}) is forbidden.`);let e=[];for(let o=r;o<t;++o)e.push(o);return e}var r0;function _e(){return r0==null&&(r0=VS().epsilon()),r0}function Er(){return"channelsLast"}function kl(r,t){return j(r,t)}function qs(r,t=-1){let e=r.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),A(r,e)}function K1(r,t){return M(()=>{if(r.shape.length!==2)throw new P(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);let e=qs(r,1);return sg(e,[1,t,1])})}function j1(r){let t=[Do(r.shape)];return A(r,t)}function X1(r){if(r.rank<=1)throw new P(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let t=[r.shape[0],Do(r.shape,1)];return A(r,t)}function Hs(r,t,e){return M(()=>{switch(r.rank){case 1:return zc(r,t,e);case 2:return bm(r,[t,0],[e,r.shape[1]]);case 3:return Mc(r,[t,0,0],[e,r.shape[1],r.shape[2]]);case 4:return wl(r,[t,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Ct(r,[t,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Ct(r,[t,0,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new P(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function o0(r,t,e){return M(()=>{switch(r.rank){case 1:return zc(r,t,e);case 2:return bm(r,[0,t],[r.shape[0],e]);case 3:return Mc(r,[0,0,t],[r.shape[0],r.shape[1],e]);case 4:return wl(r,[0,0,0,t],[r.shape[0],r.shape[1],r.shape[2],e]);default:throw new P(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Im(r,t,e,o){return M(()=>{switch(r.rank){case 1:return zc(r,t,e);case 2:switch(o){case 1:return Hs(r,t,e);case 2:return o0(r,t,e);default:throw new P(`The axis is not within the rank of the tensor ${o}`)}case 3:switch(o){case 1:return Hs(r,t,e);case 2:return Mc(r,[0,t,0],[r.shape[0],e,r.shape[2]]);case 3:return o0(r,t,e);default:throw new P(`The axis is not within the rank of the tensor ${o}`)}case 4:switch(o){case 1:return Hs(r,t,e);case 2:return wl(r,[0,t,0,0],[r.shape[0],e,r.shape[2],r.shape[3]]);case 3:return wl(r,[0,0,t,0],[r.shape[0],r.shape[1],e,r.shape[3]]);case 4:return o0(r,t,e);default:throw new P(`The axis is not within the rank of the tensor ${o}`)}default:throw new P(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function tp(r,t=-1){let e;return t<0&&(e=r[0].rank,e!==0?t=e:t=0),t===r[0].rank&&(t=-1),Bt(r,t)}function s0(r,t){switch(r.rank){case 1:return ed([r,t]);case 2:return rd([r,t],0);case 3:return od([r,t],0);case 4:return nd([r,t],0);default:throw new P(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function sg(r,t){if(Array.isArray(t)||(t=[t]),r.rank!==t.length)throw new P(`The length of input n (${t.length}) does not match the number of dimensions in input x (${r.rank})`);return er(r,t)}function ep(r,t=0,e=1,o,n){return bl(r,t,e,o,n)}function Ro(r,t,e,o){if(r.rank<2||t.rank<2)throw new gt(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${t.shape}`);if(t.rank>=3){let n=r.shape.slice(-1)[0],s=t.shape.slice(-2)[0];if(n!==s)throw new gt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${t.shape}`)}if(r.rank===2&&t.rank===2)return Ca.matMul({a:r,b:t,transposeA:!1,transposeB:!1,bias:o?n0(r.rank,o,Er()):null,activation:e});{let n=r.shape.slice(),s=n.pop();r=A(r,[-1,s]);let i=t.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:t.rank},(h,d)=>d===0?t.rank-2:d<=t.rank-2?d-1:d);t=A(Nt(t,c),[l,-1]);let p=[...n,...u],m=!1,f=!1;return A(Ca.matMul({a:r,b:t,transposeA:m,transposeB:f,bias:o?n0(r.rank,o,Er()):null,activation:e}),p)}}function ig(r,t,e){return M(()=>(Array.isArray(t)?t=Ce(t,"int32"):t=j(t,"int32"),kn(r,t,e)))}function El(r){return R(r,r)}function n0(r,t,e){let o=t.shape;if(t.rank!==1&&t.rank!==r)throw new P(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${r}`);if(r===5){if(e==="channelsFirst")return o.length===1?A(t,[1,o[0],1,1,1]):A(t,[1,o[3],o[0],o[1],o[2]]);if(e==="channelsLast")return o.length===1?A(t,[1,1,1,1,o[0]]):A(t,[1].concat(o))}else if(r===4){if(e==="channelsFirst")return o.length===1?A(t,[1,o[0],1,1]):A(t,[1,o[2],o[0],o[1]]);if(e==="channelsLast")return o.length===1?A(t,[1,1,1,o[0]]):A(t,[1].concat(o))}else if(r===3){if(e==="channelsFirst")return o.length===1?A(t,[1,o[0],1]):A(t,[1,o[1],o[0]]);if(e==="channelsLast")return o.length===1?A(t,[1,1,o[0]]):A(t,[1].concat(o))}else if(r<3)return t;throw new P(`Unsupported input rank by biasAdd: ${t.rank}`)}function $r(r,t,e){return M(()=>(e==null&&(e=Er()),ce(e),H(r,n0(r.rank,t,e))))}function Y1(r,t=1){if(t!==1)throw new gt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Tn(r)}function Z1(r){return M(()=>rt(r,H(ie(r),1)))}function ag(r,t,e,o){return M(()=>Vw(r,t,e,o))}function J1(r){return M(()=>{let t=H(.5,R(.2,r));return qe(t,0,1)})}function Ta(r,t,e=!1){return e?r():t()}var Q1=["fanIn","fanOut","fanAvg"],tk=["normal","uniform","truncatedNormal"];function XG(r){_n(Q1,"FanMode",r)}function YG(r){_n(tk,"Distribution",r)}var Dr=class extends X.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}},Nm=class extends Dr{apply(t,e){return oe(t,e)}};Nm.className="Zeros";X.registerClass(Nm);var $l=class extends Dr{apply(t,e){return ze(t,e)}};$l.className="Ones";X.registerClass($l);var km=class extends Dr{constructor(t){if(super(),typeof t!="object")throw new P(`Expected argument of type ConstantConfig but got ${t}`);if(t.value===void 0)throw new P(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return M(()=>R(nt(this.value),ze(t,e)))}getConfig(){return{value:this.value}}};km.className="Constant";X.registerClass(km);var Em=class extends Dr{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return $n(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}};Em.className="RandomUniform";X.registerClass(Em);var $m=class extends Dr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new gt(`randomNormal does not support dType ${e}.`);return ep(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};$m.className="RandomNormal";X.registerClass($m);var Am=class extends Dr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new gt(`truncatedNormal does not support dType ${e}.`);return Gc(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Am.className="TruncatedNormal";X.registerClass(Am);var Dm=class extends Dr{constructor(t){super(),this.gain=t.gain!=null?t.gain:1}apply(t,e){return M(()=>{if(t.length!==2||t[0]!==t[1])throw new P("Identity matrix initializer can only be used for 2D square matrices.");return R(this.gain,dl(t[0]))})}getConfig(){return{gain:this.gain}}};Dm.className="Identity";X.registerClass(Dm);function ZG(r,t="channelsLast"){let e,o;if(ce(t),r.length===2)e=r[0],o=r[1];else if([3,4,5].indexOf(r.length)!==-1){if(t==="channelsFirst"){let n=Do(r,2);e=r[1]*n,o=r[0]*n}else if(t==="channelsLast"){let n=Do(r,0,r.length-2);e=r[r.length-2]*n,o=r[r.length-1]*n}}else{let n=Do(r);e=Math.sqrt(n),o=Math.sqrt(n)}return[e,o]}var yr=class extends Dr{constructor(t){if(super(),t.scale<0)throw new P(`scale must be a positive float. Got: ${t.scale}`);this.scale=t.scale==null?1:t.scale,this.mode=t.mode==null?"fanIn":t.mode,XG(this.mode),this.distribution=t.distribution==null?"normal":t.distribution,YG(this.distribution),this.seed=t.seed}apply(t,e){let o=ZG(t),n=o[0],s=o[1],i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,n):this.mode==="fanOut"?i/=Math.max(1,s):i/=Math.max(1,(n+s)/2),this.distribution==="normal"){let a=Math.sqrt(i);if(e=e||"float32",e!=="float32"&&e!=="int32")throw new gt(`${this.getClassName()} does not support dType ${e}.`);return Gc(t,0,a,e,this.seed)}else{let a=Math.sqrt(3*i);return $n(t,-a,a,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}};yr.className="VarianceScaling";X.registerClass(yr);var rp=class extends yr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return yr.className}};rp.className="GlorotUniform";X.registerClass(rp);var op=class extends yr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return yr.className}};op.className="GlorotNormal";X.registerClass(op);var np=class extends yr{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return yr.className}};np.className="HeNormal";X.registerClass(np);var sp=class extends yr{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return yr.className}};sp.className="HeUniform";X.registerClass(sp);var ip=class extends yr{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return yr.className}};ip.className="LeCunNormal";X.registerClass(ip);var ap=class extends yr{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return yr.className}};ap.className="LeCunNormal";X.registerClass(ap);var Rm=class extends Dr{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=t.gain==null?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,this.seed!=null)throw new gt("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return M(()=>{if(t.length<2)throw new gt("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);let o=t[0]>t[1]?[t[1],t[0]]:t,n=ep(o,0,1,"float32"),s=Uw.gramSchmidt(n);return t[0]>t[1]&&(s=Nt(s)),R(this.gain,s)})}getConfig(){return{gain:this.gain,seed:this.seed}}};Rm.className="Orthogonal";X.registerClass(Rm);var ek={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function rk(r,t={}){return Fn(r,X.SerializationMap.getMap().classNameMap,t,"initializer")}function ne(r){return Jc(r)}function Kt(r){if(typeof r=="string"){let t=r in ek?ek[r]:r;if(t==="GlorotNormal")return new op;if(t==="GlorotUniform")return new rp;if(t==="HeNormal")return new np;if(t==="HeUniform")return new sp;if(t==="LeCunNormal")return new ip;if(t==="LeCunUniform")return new ap;{let e={};return e.className=t,e.config={},rk(e)}}else return r instanceof Dr?r:rk(r)}function lg(r){return Array.isArray(r)&&Array.isArray(r[0])}function lp(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function vt(r){let t;if(Array.isArray(r)){if(r.length!==1)throw new P(`Expected Tensor length to be 1; got ${r.length}`);t=r[0]}else t=r;return t}function Lt(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return r=r,r[0];throw new P(`Expected exactly 1 Shape; got ${r.length}`)}else return r}function up(r){let t=0;for(let e of r)e.shape.length===0?t+=1:t+=e.shape.reduce((o,n)=>o*n);return t}var nk="Variable",Fm=class{constructor(t,e="float32",o=nk,n=!0,s=null){this.dtype=e??"float32",this.shape=t.shape,this.id=eg(),o=o??nk,this.originalName=rg(o),this.name=og(this.originalName),this.trainable_=n,this.constraint=s,this.val=Pd(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),QG(this.val,t),this.val.id!==t.id&&(this.val.assign(t),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}};function QG(r,t){if(r.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(r.shape)+" vs. "+JSON.stringify(t.shape))}function _m(r){return r.map(t=>t.read())}function cp(r){r.forEach(t=>{t[0].write(t[1])})}var Yt=class{constructor(t){this.dtype=t.dtype,this.shape=t.shape,t.shape!=null?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}},br=class{constructor(t,e,o,n,s,i,a){this.dtype=t,this.shape=e,this.sourceLayer=o,this.inputs=n,this.callArgs=s,this.outputTensorIndex=a,this.id=eg(),i!=null&&(this.originalName=rg(i),this.name=og(this.originalName)),this.rank=e.length}},tW=0,Ks=class{constructor(t,e){this.callArgs=e,this.id=tW++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(let o of t.inboundLayers)o?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){let t=[];for(let e of this.inboundLayers)e!=null?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},eW=0,kt=class extends X.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=eW++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){let o=this.getClassName();e=$o(o)+"_"+Sa(o)}if(this.name=e,this.trainable_=t.trainable==null?!0:t.trainable,t.inputShape!=null||t.batchInputShape!=null){let o;if(t.batchInputShape!=null)o=t.batchInputShape;else if(t.inputShape!=null){let s=null;t.batchSize!=null&&(s=t.batchSize),o=[s].concat(t.inputShape)}this.batchInputShape=o;let n=t.dtype;n==null&&(n=t.inputDType),n==null&&(n="float32"),this.dtype=n}t.weights!=null?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(this.inboundNodes.length===0)throw new mr(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new P(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Xe(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Xe(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Vr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new Vr(`Layer ${this.name} is not connected, no input to return.`);return Xe(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new Vr(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Vr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Xe(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Xt(t),this.inputSpec==null||this.inputSpec.length===0)return;let e=Xt(this.inputSpec);if(t.length!==e.length)throw new P(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let o=0;o<t.length;o++){let n=t[o],s=e[o];if(s==null)continue;let i=n.rank;if(s.ndim!=null&&i!==s.ndim)throw new P(`Input ${o} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(s.maxNDim!=null&&i>s.maxNDim)throw new P(`Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(s.minNDim!=null&&i<s.minNDim)throw new P(`Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(s.dtype!=null&&n.dtype!==s.dtype)throw new P(`Input ${o} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${n.dtype}.`);if(s.axes){let a=n.shape;for(let l in s.axes){let u=Number(l),c=s.axes[l],p=u>=0?a[u]:a[a.length+u];if(c!=null&&[c,null].indexOf(p)===-1)throw new P(`Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(s.shape!=null)for(let a=0;a<s.shape.length;++a){let l=s.shape[a],u=n.shape[a];if(l!=null&&u!=null&&l!==u)throw new P(`Input ${o} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${n.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){this._callHook!=null&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();let o=Xt(t),n=!0;for(let i of o)if(!(i instanceof br)){n=!1;break}let s=!0;for(let i of o)if(i instanceof br){s=!1;break}if(n===s)throw new P("Arguments to apply() must be all SymbolicTensors or all Tensors");return Jo(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);let i=[];for(let a of Xt(t))i.push(a.shape);this.build(Xe(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let i=this.call(t,e),a=Xt(i),l=[];for(let u of a)o.indexOf(u)!==-1&&(u=u.clone()),l.push(u);if(i=Xe(l),this.activityRegularizer!=null)throw new gt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{let i=rW(t),a=this.computeOutputShape(i),l,u=oW(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?i[0]:i),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((c,p)=>new br(u,c,this,Xt(t),e,this.name,p)):l=new br(u,a,this,Xt(t),e,this.name),this.addInboundNode(t,l,null,null,i,a,e),this._refCount++,this.activityRegularizer!=null)throw new gt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(this.batchInputShape!=null)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((o,n)=>{o!=null&&t[n]!=null&&t[n]!==o&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new Vr(`The layer ${this.name} has never been called and thus has no defined output shape.`);let t=[];for(let e of this.inboundNodes){let o=JSON.stringify(e.outputShapes);t.indexOf(o)===-1&&t.push(o)}if(t.length===1){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&e.length===1?e[0]:e}else throw new Vr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new mr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return up(this.weights)}build(t){this.built=!0}getWeights(t=!1){return _m(t?this.trainableWeights:this.weights)}setWeights(t){M(()=>{let e=this.weights;if(e.length!==t.length)throw new P(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(e.length===0)return;let o=[],n=_m(e);for(let s=0;s<n.length;++s){let i=n[s],a=e[s],l=t[s];if(!y.arraysEqual(i.shape,l.shape))throw new P(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);o.push([a,l])}cp(o)})}addWeight(t,e,o,n,s,i,a,l){if(this._addedWeightNames.indexOf(t)!==-1)throw new P(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),o==null&&(o="float32"),this.fastWeightInitDuringBuild&&(n=l!=null?l():Kt("zeros"));let u=n.apply(e,o),c=new Fm(u,o,t,i,a);return u.dispose(),s!=null&&this.addLoss(()=>s.apply(c.read())),i==null&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){t==null||Array.isArray(t)&&t.length===0||(t=Xt(t),this._losses!==void 0&&this._losses!==null&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(e!=null)if(Array.isArray(e))e.forEach(o=>{if(o!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return e}addInboundNode(t,e,o,n,s,i,a=null){let l=Xt(t);e=Xt(e),o=Xt(o),n=Xt(n),s=lp(s),i=lp(i);let u=[],c=[],p=[];for(let m of l)u.push(m.sourceLayer),c.push(m.nodeIndex),p.push(m.tensorIndex);new Ks({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:p,inputTensors:l,outputTensors:e,inputMasks:o,outputMasks:n,inputShapes:s,outputShapes:i},a);for(let m=0;m<e.length;m++)e[m].sourceLayer=this,e[m].nodeIndex=this.inboundNodes.length-1,e[m].tensorIndex=m}getConfig(){let t={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(t.batchInputShape=this.batchInputShape),this.dtype!=null&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return--this._refCount===0&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}};function rW(r){r=Xt(r);let t=[];for(let e of r)t.push(e.shape);return Xe(t)}function oW(r){return"float32"}function i0(r,t,e){if((t==null||e!=null&&e>0)&&(t=r.sourceLayer,e=r.nodeIndex),t.inboundNodes.length===0)return[r];{let o=t.inboundNodes[e];if(o.inboundLayers.length===0)return o.inputTensors;{let n=[];for(let s=0;s<o.inboundLayers.length;s++){let i=o.inputTensors[s],a=o.inboundLayers[s],l=o.nodeIndices[s],u=i0(i,a,l);for(let c of u)n.indexOf(c)===-1&&n.push(c)}return n}}}var On=class extends kt{constructor(t){if(super({dtype:t.dtype,name:t.name!=null?t.name:Sa("input").toString()}),t.batchSize==null&&(t.batchSize=null),t.sparse==null&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,t.inputShape!=null&&t.batchInputShape!=null)throw new P("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(e==null){if(t.inputShape==null)throw new P("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(t.batchSize!=null)throw new P("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let o=t.dtype||"float32";this.batchInputShape=e,this.dtype=o,this.inputSpec=[{shape:e}];let n=new br(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new Ks({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new P(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}};On.className="InputLayer";X.registerClass(On);function a0(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new P("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=r.batchShape;r.shape!=null&&t==null&&(t=[null].concat(r.shape));let e=r.dtype;return e==null&&(e="float32"),new On({batchInputShape:t,name:r.name,dtype:e,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}function nW(r,t){if(r.dtype==null||r.dtype===t.dtype)return t;try{return j(t,r.dtype)}catch{throw new P(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`)}}var Fo=class{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Fo)for(let e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(t==null)return;for(let e of t)this.add(e.key,e.value)}}add(t,e,o){if(this.id2Value[t.id]==null)this.id2Value[t.id]=nW(t,e),this.name2Id[t.name]=t.id,o!=null&&(this.id2Mask[t.id]=o);else throw new P(`Duplicate key: name=${t.name}, id=${t.id}`);return this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return this.id2Value[t.id]!=null}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof br){if(this.id2Value[t.id]==null)throw new P(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}else{let e=this.name2Id[t];if(e==null)throw new P(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof br){if(this.id2Value[t.id]==null)throw new P(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}else{let e=this.name2Id[t];if(e==null)throw new P(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){this.id2Mask!=null&&xt(this.id2Mask)}},ug=new vm,cg=new vm;function ik(r){ug?.setMaxEntries(r),cg?.setMaxEntries(r)}function Al(r,t,e,o){let n=e==null?!1:e.training,s=Array.isArray(r),i=s?r:[r],a=i.map(h=>h.name),l=[],u=t.names();for(let h of a)u.indexOf(h)!==-1?l.push(t.getValue(h)):l.push(null);o!=null&&(o.maxNumTensors=-1/0,o.minNumTensors=1/0);let c=a.join(",")+"|"+t.names().sort().join(","),p=ug.get(c),m;if(p==null){let h=sW(i,t);p=h.sorted,m=h.recipientCounts,ug.put(c,p),cg.put(c,m)}m={},n||Object.assign(m,cg.get(c));let f=new Fo(t);for(let h=0;h<p.length;++h){if(o!=null){let O=hm().numTensors;O>o.maxNumTensors&&(o.maxNumTensors=O),O<o.minNumTensors&&(o.minNumTensors=O)}let d=p[h],g=d.sourceLayer;if(g instanceof On)continue;let x=[],b=[],w=[],C=!1;for(let O of d.inputs){let L=f.getValue(O),B=f.getMask(O);x.push(L),b.push(B),B!=null&&(C=!0),n||(m[O.name]--,m[O.name]===0&&!t.hasKey(O)&&a.indexOf(O.name)===-1&&!L.isDisposed&&O.sourceLayer.stateful!==!0&&w.push(L))}C&&(e=e||{},e.mask=b[0]);let I=Xt(g.apply(x,e)),$=null;g.supportsMasking&&($=g.computeMask(x,b));let D=aW(d),F=Array.isArray(D)?D:[D];for(let O=0;O<F.length;++O){f.hasKey(F[O])||f.add(F[O],I[O],Array.isArray($)?$[0]:$);let L=a.indexOf(F[O].name);L!==-1&&(l[L]=I[O])}n||xt(w)}return f.disposeMasks(),s?l:l[0]}function sW(r,t){y.assert(r!=null&&r.length>0,()=>"Expected at least one fetch, got none");let e=[],o={};if(r.length===1){let n=sk(r[0],t);e=n.sorted,o=n.recipientMap}else{let n=new Set;for(let s of r){let{sorted:i,recipientMap:a}=sk(s,t);for(let l of i)n.has(l.name)||(e.push(l),n.add(l.name));for(let l in a)o[l]==null&&(o[l]=new Set),a[l].forEach(u=>o[l].add(u))}}return{sorted:e,recipientCounts:iW(o)}}function iW(r){let t={};for(let e in r)t[e]=r[e].size;return t}function sk(r,t){let e=new Set,o=[],n={};for(let a of t.names())e.add(a);let s=[],i=[];for(s.push(r);s.length>0;){let a=s[s.length-1];if(e.has(a.name)){s.pop();continue}let l=i[i.length-1]===s.length-1;if(a.inputs.length===0||l)s.pop(),o.push(a),e.add(a.name),l&&i.pop();else{i.push(s.length-1);for(let u of a.inputs)n[u.name]==null&&(n[u.name]=new Set),n[u.name].add(a.name),!e.has(u.name)&&s.push(u)}}return{sorted:o,recipientMap:n}}function aW(r){let t;if(r.sourceLayer.inboundNodes.length===1)t=r.sourceLayer.output;else{let e=null;for(let o=0;o<r.sourceLayer.inboundNodes.length;++o)for(let n of r.sourceLayer.inboundNodes[o].outputTensors)if(n.id===r.id){e=o;break}t=r.sourceLayer.getOutputAt(e)}return t}var lW=z();lW.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,ik);function l0(r,t){return M(()=>ee(st(R(r,r),t,!0)))}var Dl=class extends X.Serializable{getConfig(){return{}}},Om=class extends Dl{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>{let e=l0(t,this.axis),o=qe(e,0,this.maxValue);return R(t,rt(o,H(_e(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}};Om.className="MaxNorm";X.registerClass(Om);var Lm=class extends Dl{constructor(t){super(),this.defaultAxis=0,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>rt(t,H(_e(),l0(t,this.axis))))}getConfig(){return{axis:this.axis}}};Lm.className="UnitNorm";X.registerClass(Lm);var Pm=class extends Dl{apply(t){return rr(t)}};Pm.className="NonNeg";X.registerClass(Pm);var zm=class extends Dl{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=t.minValue!=null?t.minValue:this.defaultMinValue,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.rate=t.rate!=null?t.rate:this.defaultRate,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>{let e=l0(t,this.axis),o=H(R(this.rate,qe(e,this.minValue,this.maxValue)),R(1-this.rate,e));return R(t,rt(o,H(_e(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}};zm.className="MinMaxNorm";X.registerClass(zm);var ak={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function he(r){return Jc(r)}function lk(r,t={}){return Fn(r,X.SerializationMap.getMap().classNameMap,t,"constraint")}function de(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in ak?ak[r]:r,config:{}};return lk(e)}else return r instanceof Dl?r:lk(r)}async function js(r){if(r==null)return;let t=[],e=[],o=[];for(let n in r){let s=r[n];if(typeof s!="number"){let i=s;t.push(i.data()),e.push(n),o.push(i)}}if(t.length>0){let n=await Promise.all(t);for(let s=0;s<n.length;++s)r[e[s]]=n[s][0];xt(o)}}function pg(r){if(r!=null)for(let t in r){let e=r[t];typeof e!="number"&&e.dispose()}}var uk;(function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"})(uk||(uk={}));var pW=125,Ia=class{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}},mg=class{constructor(t,e=10){t==null&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(let e of this.callbacks)e.setParams(t)}setModel(t){for(let e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochBegin(t,e)}async onEpochEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochEnd(t,e)}async onBatchBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchBegin(t,e)}async onBatchEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchEnd(t,e)}async onTrainBegin(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainEnd(t)}},u0=class extends Ia{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){e==null&&(e={});let o=e.size==null?0:e.size;this.seen+=o;for(let n in e){let s=e[n];if(typeof s=="number")this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+s*o;else{let i;n in this.totals?i=this.totals[n]:this.totals[n]=0;let a=M(()=>H(this.totals[n],R(s,o)));this.totals[n]=a,i?.dispose()}}}async onEpochEnd(t,e){if(e!=null)for(let o of this.params.metrics)this.totals[o]!=null&&(typeof this.totals[o]=="number"?e[o]=this.totals[o]/this.seen:M(()=>{let n=R(rt(1,this.seen),this.totals[o]);e[o]=n,this.totals[o].dispose(),ue(e[o])}))}},fg=class extends Ia{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){e==null&&(e={}),this.epoch.push(t);for(let o in e)this.history[o]==null&&(this.history[o]=[]),this.history[o].push(e[o])}async syncData(){let t=[],e=[],o=[];for(let s in this.history){let i=this.history[s];for(let a=0;a<i.length;++a)if(typeof i[a]!="number"){let l=i[a];t.push(l.data()),e.push(s),o.push(a)}}let n=await Promise.all(t);for(let s=0;s<n.length;++s)this.history[e[s]][o[s]].dispose(),this.history[e[s]][o[s]]=n[s][0]}},hg=class extends Ia{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Cm,this.yieldEvery=e||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=pW),this.yieldEvery==="never"&&t.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");y.isNumber(this.yieldEvery)&&(this.maybeWait=P1(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,o){let n=[];this.yield!=null&&(await js(o),n.push(this.yield(t,e,o))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(t,e){this.currentEpoch=t,this.epochBegin!=null&&(await js(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){let o=[];this.epochEnd!=null&&(await js(e),o.push(this.epochEnd(t,e))),this.yieldEvery==="epoch"&&o.push(this.nextFrameFunc()),await Promise.all(o)}async onBatchBegin(t,e){this.batchBegin!=null&&(await js(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){let o=[];this.batchEnd!=null&&(await js(e),o.push(this.batchEnd(t,e))),this.yieldEvery==="batch"?o.push(this.nextFrameFunc()):y.isNumber(this.yieldEvery)&&o.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(o)}async onTrainBegin(t){this.trainBegin!=null&&(await js(t),await this.trainBegin(t))}async onTrainEnd(t){this.trainEnd!=null&&(await js(t),await this.trainEnd(t))}};function dg(r,t){return r==null&&(r={}),r instanceof Ia?[r]:Array.isArray(r)&&r[0]instanceof Ia?r:Xt(r).map(o=>new hg(o,t))}var Gr=class{constructor(){}static registerCallbackConstructor(t,e){y.assert(t>=0&&Number.isInteger(t),()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`),Gr.checkForDuplicate(e),Gr.constructors[t]==null&&(Gr.constructors[t]=[]),Gr.constructors[t].push(e)}static checkForDuplicate(t){for(let e in Gr.constructors)Gr.constructors[+e].forEach(n=>{if(n===t)throw new P("Duplicate callback constructor.")})}static clear(){Gr.constructors={}}static createCallbacks(t){let e=[];for(let o in Gr.constructors){let n=+o;t>=n&&e.push(...Gr.constructors[n])}return e.map(o=>new o)}};Gr.constructors={};function gg(r,t,e,o,n,s,i,a,l){let u=new fg,c=[new u0,...Gr.createCallbacks(t)];r!=null&&c.push(...r),c.push(u);let p=new mg(c);return p.setParams({epochs:e,initialEpoch:o,samples:n,steps:s,batchSize:i,verbose:t,doValidation:a,metrics:l}),{callbackList:p,history:u}}function Qr(r,t={},e=!1){return Fn(r,X.SerializationMap.getMap().classNameMap,t,"layer",e)}function Mm(r,t){return M(()=>{r.dtype!=="float32"&&(r=j(r,"float32"));let e=st(El(r),t,!0),o=In(e.shape,_e()),n=ee(Br(e,o));return rt(r,n)})}function Rl(r,t){return M(()=>re(El(tt(t,r)),-1))}function Vm(r,t){return M(()=>re(ie(tt(t,r)),-1))}function Gm(r,t){return M(()=>{let e=tt(r,t),o=qe(ie(r),_e(),Number.MAX_VALUE),n=ie(rt(e,o));return R(100,re(n,-1))})}function mW(r,t){return M(()=>{let e=qe(t,_e(),Number.MAX_VALUE),o=Ke(H(1,e)),n=qe(r,_e(),Number.MAX_VALUE),s=Ke(H(1,n));return re(El(tt(o,s)),-1)})}function fW(r,t){return M(()=>{let e=Br(0,tt(1,R(r,t)));return re(El(e),-1)})}function hW(r,t){return M(()=>{let e=Br(0,tt(1,R(r,t)));return re(e,-1)})}function dW(r,t){return M(()=>{let e=st(R(r,t),-1),o=ar(R(tt(1,r),t),-1);return Br(0,H(1,tt(o,e)))})}function gW(r,t){return M(()=>{let e=Math.log(2),o=tt(t,r),n=tt(H(o,Xo(R(-2,o))),e);return re(n,-1)})}function Fl(r,t,e=!1){return M(()=>{if(e)t=ya(t);else{let o=st(t,t.shape.length-1,!0);t=rt(t,o)}return t=qe(t,_e(),1-_e()),Ft(st(R(j(r,"float32"),Ke(t)),t.shape.length-1))})}function pp(r,t,e=!1){return M(()=>{let o=j(Nn(j1(r)),"int32");t=qe(t,_e(),1-_e());let n=t.shape,s=A(ll(o,n[n.length-1]),n);return Fl(s,t,e)})}function xW(r,t){if(!y.arraysEqual(r.shape,t.shape))throw new P(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(t.shape)}`);return M(()=>{let e=rr(t),o=Ft(ie(t));return H(tt(e,R(t,r)),ma($e(o)))})}function mp(r,t){return M(()=>{let e;return e=qe(t,_e(),1-_e()),e=Ke(rt(e,tt(1,e))),re(xW(r,e),-1)})}function yW(r,t){return M(()=>{let e=qe(r,_e(),1),o=qe(t,_e(),1);return st(R(r,Ke(rt(e,o))),-1)})}function bW(r,t){return M(()=>{let e=Ke(H(_e(),t));return re(tt(t,R(r,e)),-1)})}function xg(r,t){return M(()=>{let e=Mm(r,-1),o=Mm(t,-1),n=R(e,o);return Ft(st(n,-1))})}var Bm={meanSquaredError:Rl,meanAbsoluteError:Vm,meanAbsolutePercentageError:Gm,meanSquaredLogarithmicError:mW,squaredHinge:fW,hinge:hW,categoricalHinge:dW,logcosh:gW,categoricalCrossentropy:Fl,sparseCategoricalCrossentropy:pp,binaryCrossentropy:mp,kullbackLeiblerDivergence:yW,poisson:bW,cosineProximity:xg};function yg(r){if(typeof r=="string"){if(r in Bm)return Bm[r];let t=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new P(t)}else return r}function wg(r,t){return M(()=>{let e=R(.5,Ge(t)),o=kl(Te(t,e),r.dtype);return re(gr(r,o),-1)})}function Cg(r,t){return M(()=>kl(gr(bn(r,-1),bn(t,-1)),"float32"))}function wW(r,t){return M(()=>j(st(lr(gr(r,1),gr(t,1))),"float32"))}function CW(r,t){return M(()=>j(st(lr(gr(r,0),gr(t,1))),"float32"))}function pk(r,t){return M(()=>{let e=wW(r,t),o=CW(r,t),n=H(e,o);return j(le(Te(n,0),rt(e,n),0),"float32")})}function c0(r,t){return mp(r,t)}function p0(r,t){return r.rank===t.rank&&(r=Jr(r,[r.rank-1])),t=bn(t,-1),t.dtype!==r.dtype&&(t=j(t,r.dtype)),j(gr(r,t),"float32")}var vW=Rl,SW=Rl,TW=Vm,IW=Vm,NW=Gm,kW=Gm,vg=Fl,EW=xg,m0=pp,bg={binaryAccuracy:wg,categoricalAccuracy:Cg,precision:pk,categoricalCrossentropy:vg,sparseCategoricalCrossentropy:m0,mse:vW,MSE:SW,mae:TW,MAE:IW,mape:NW,MAPE:kW,cosine:EW};function mk(r){if(typeof r=="string"&&r in bg)return bg[r];if(typeof r!="string"&&r!=null)return r;throw new P(`Unknown metric ${r}`)}function Wm(r){if(mo(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let t;for(let e of Object.keys(Bm))if(Bm[e]===r){t=e;break}if(t!==void 0)return t;for(let e of Object.keys(bg))if(bg[e]===r){t=e;break}return t!==void 0?t:r.name}}function hk(r){let t={Adagrad:()=>Il.adagrad(.01),Adadelta:()=>Il.adadelta(1,.95,_e()),Adam:()=>Il.adam(.001,.9,.999,_e()),Adamax:()=>Il.adamax(.002,.9,.999,_e(),0),RMSProp:()=>Il.rmsprop(.001,.9,0,_e()),SGD:()=>Il.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,r in t)return t[r]();throw new P(`Unknown Optimizer ${r}`)}function h0(r,t,e=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!f0(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){let o=JSON.stringify(r);o.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${o.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${1048576}.`)}}function f0(r){if(r===null)return!0;if(typeof r=="object")if(Object.getPrototypeOf(r)===Object.prototype){let t=Object.keys(r);for(let e of t)if(typeof e!="string"||!f0(r[e]))return!1;return!0}else if(Array.isArray(r)){for(let t of r)if(!f0(t))return!1;return!0}else return!1;else{let t=typeof r;return t==="string"||t==="number"||t==="boolean"}}function dk(r,t,e,o=console.log){let n=DW(r),s=["Layer (type)","Input Shape","Output shape","Param #"];n?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c)));let i;if(!n){s.push("Receives inputs"),i=[];for(let c in r.nodesByDepth)i.push(...r.nodesByDepth[c])}o("_".repeat(t)),Sg(s,e,o),o("=".repeat(t));let a=r.layers;for(let c=0;c<a.length;++c)n?RW(a[c],e,o):FW(a[c],e,i,o),o((c===a.length-1?"=":"_").repeat(t));r.checkTrainableWeightsConsistency();let l=AW(r),u=up(r.nonTrainableWeights);o(`Total params: ${l+u}`),o(`Trainable params: ${l}`),o(`Non-trainable params: ${u}`),o("_".repeat(t))}function AW(r){let t;return r.collectedTrainableWeights!=null?t=up(r.collectedTrainableWeights):t=up(r.trainableWeights),t}function DW(r){let t=!0,e=[],o=[];for(let n in r.nodesByDepth)e.push(r.nodesByDepth[n]);for(let n of e){if(n.length>1||n.length===1&&n[0].inboundLayers.length>1){t=!1;break}o.push(...n)}if(t)for(let n of r.layers){let s=!1;for(let i of n.inboundNodes)if(o.indexOf(i)!==-1)if(s){t=!1;break}else s=!0;if(!t)break}return t}function Sg(r,t,e=console.log){let o="";for(let n=0;n<r.length;++n)n>0&&(o=o.slice(0,o.length-1)+" "),o+=r[n],o=o.slice(0,t[n]),o+=" ".repeat(t[n]-o.length);e(o)}function RW(r,t,e){let o,n;try{n=r.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{n="multiple"}try{o=JSON.stringify(r.outputShape)}catch{o="multiple"}let s=r.name,i=r.getClassName(),a=[`${s} (${i})`,n,o,r.countParams().toString()];Sg(a,t,e)}function FW(r,t,e,o){let n,s;try{s=r.inboundNodes.map(p=>JSON.stringify(p.inputShapes)).join(",")}catch{s="multiple"}try{n=JSON.stringify(r.outputShape)}catch{n="multiple"}let i=[];for(let p of r.inboundNodes)if(!(e!=null&&e.length>0&&e.indexOf(p)===-1))for(let m=0;m<p.inboundLayers.length;++m){let f=p.inboundLayers[m].name,h=p.nodeIndices[m],d=p.tensorIndices[m];i.push(`${f}[${h}][${d}]`)}let a=r.name,l=r.getClassName(),u=i.length===0?"":i[0],c=[`${a} (${l})`,s,n,r.countParams().toString(),u];Sg(c,t,o);for(let p=1;p<i.length;++p)Sg(["","","","",i[p]],t,o)}function gk(r,t,e){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&t===0&&typeof e=="string"}function Um(r,t){if(r===null)return null;if(typeof r=="string")return Us(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];gk(t,n,s)?e.push(s):e.push(Um(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o];if(o==="name"&&typeof n=="string")e[o]=n;else{let s=Us(o);e[s]=Um(n,s)}}return e}}function Tg(r,t){if(r==null)return null;if(typeof r=="string")return $o(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];gk(t,n,s)?e.push(s):e.push(Tg(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o],s=$o(o);(o==="name"||o==="className")&&typeof n=="string"?e[s]=n:e[s]=Tg(n,o)}return e}}var fp="3.20.0";var to=class extends kt{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,this.name==null){let b=this.getClassName().toLowerCase();this.name=Sa(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Ao(this.inputs).length!==this.inputs.length)throw new P(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);Ao(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(let b of this.outputs){let w=b.sourceLayer,C=b.nodeIndex,I=b.tensorIndex;this.outputLayers.push(w),this.outputLayersNodeIndices.push(C),this.outputLayersTensorIndices.push(I)}for(let b of this.inputs){let w=b.sourceLayer,C=b.nodeIndex,I=b.tensorIndex;mo(C===0,"input layer has >1 nodes"),mo(I===0,"input layer has >1 tensors"),this.inputLayers.push(w),this.inputLayersNodeIndices.push(C),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){let w=this.inputLayers[b];if(!(w instanceof On))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);this.inputNames.push(w.name),this.feedInputShapes.push(w.batchInputShape),this.feedInputNames.push(w.name)}for(let b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);let e={},o={},n={},s={},i={},a=[],l=(b,w,C,I,$,D)=>{(I==null||$==null||D==null)&&(I=b.sourceLayer,$=b.nodeIndex,D=b.tensorIndex);let F=I.inboundNodes[$];if(C.indexOf(F)!==-1)throw new mr(`The tensor ${b.name} at layer "${I.name}" is part of a cycle.`);if(w.indexOf(F)!==-1)return;this.containerNodes.add(to.nodeKey(I,$)),I.id in i||(i[I.id]=Object.keys(i).length),C.indexOf(F)===-1&&C.push(F);let O=F.inboundLayers.length;for(let L=0;L<O;L++){let B=F.inputTensors[L],V=F.inboundLayers[L],G=F.nodeIndices[L],U=F.tensorIndices[L];l(B,w,C,V,G,U)}for(w.push(F);C.indexOf(F)>=0;)C.splice(C.indexOf(F),1);a.push(F)},u=[],c=[];for(let b of this.outputs)l(b,u,c);let p=a.slice().reverse();for(let b of p){o[b.id]=b,b.id in e||(e[b.id]=0);let w=e[b.id],C=n[b.outboundLayer.id]==null?0:n[b.outboundLayer.id];w=Math.max(w,C),n[b.outboundLayer.id]=w,s[b.outboundLayer.id]=b.outboundLayer,e[b.id]=w;for(let I=0;I<b.inboundLayers.length;I++){let $=b.inboundLayers[I],D=b.nodeIndices[I],F=$.inboundNodes[D],O=e[F.id]==null?0:e[F.id];e[F.id]=Math.max(w+1,O),o[F.id]=F}}let m={};for(let b in e){let w=e[b];w in m||(m[w]=[]),m[w].push(o[b])}let f={};for(let b in n){let w=n[b];w in f||(f[w]=[]),f[w].push(s[b])}let h=Object.keys(f).map(b=>parseInt(b,10)).sort(Sm);this.layers=[];for(let b of h){let w=f[b];w.sort((C,I)=>{let $=i[C.id],D=i[I.id];return $<D?-1:$>D?1:0});for(let C of w)C instanceof to&&this.internalContainerRefs.push(C),this.layers.push(C)}this.layersByDepth=f,h=Object.keys(m).map(b=>parseInt(b,10)).sort(Sm);let d=this.inputs.slice(),g=[];for(let b of h)for(let w of m[b]){let C=w.outboundLayer;if(C!=null){for(let I of w.inputTensors)if(d.indexOf(I)===-1)throw new mr(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${C.name}". The following previous layers were accessed without issue: ${g}`);for(let I of w.outputTensors)d.push(I);g.push(C.name)}}this.nodesByDepth=m;let x=this.layers.map(b=>b.name);for(let b of x){let w=x.filter(C=>C===b).length;if(w!==1)throw new mr(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(x))}this.outboundNodes=[],this.inboundNodes=[],new Ks({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let t={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(let e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(let e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(o=>o.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new P("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(let e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.layers)e.push(...o.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){let o={},n=0;for(let i of this.layers)for(let a of i.weights){if(o[a.originalName]!=null)throw new P(`Duplicate weight name: ${a.originalName}`);o[a.originalName]=a,n++}let s=[];for(let i in t){let a=i;if(o[i]==null){let l=i.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(o[a]!=null)s.push([o[a],t[i]]);else if(e)throw new P(`Provided weight data has no target variable: ${i}`);delete o[a]}if(e){let i=[];for(let a in o)i.push(a);if(i.length>0)throw new P(`${i.length} of ${n} weights are not set: ${i}`)}cp(s)}updatedConfig(){let t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${fp}`,e.backend="TensorFlow.js",e}toJSON(t,e=!0){let o=Tg(this.updatedConfig());return e?JSON.stringify(o):o}call(t,e){return M(()=>{t=Xt(t);let o=new Fo;for(let n=0;n<this.inputs.length;++n)o.add(this.inputs[n],t[n]);return Al(this.outputs,o,e)})}computeMask(t,e){return M(()=>{t=Xt(t);let o;return e==null?o=Eo(null,t.length):o=Xt(e),this.runInternalGraph(t,o)[1]})}computeOutputShape(t){let e=lp(t);if(e.length!==this.inputLayers.length)throw new P(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);let o={};for(let a=0;a<e.length;a++){let l=this.inputLayers[a],u=e[a],c=l.name+"_0_0";o[c]=u}let n=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(Sm);if(n.length>1)for(let a of n){let l=this.nodesByDepth[a];for(let u of l){let c=u.outboundLayer;if(this.inputLayers.map(d=>d.id).indexOf(c.id)!==-1)continue;let p=[];for(let d=0;d<u.inboundLayers.length;d++){let g=u.inboundLayers[d],x=u.nodeIndices[d],b=u.tensorIndices[d],w=`${g.name}_${x}_${b}`,C=o[w];p.push(C)}let m=c.computeOutputShape(Xe(p)),f=lp(m),h=c.inboundNodes.indexOf(u);for(let d=0;d<f.length;d++){let g=`${c.name}_${h}_${d}`;o[g]=f[d]}}}let s=[],i=[];for(let a=0;a<this.outputLayers.length;a++){let l=this.outputLayers[a],u=this.outputLayersNodeIndices[a],c=this.outputLayersTensorIndices[a],p=`${l.name}_${u}_${c}`;i.push(p)}for(let a=0;a<i.length;a++){let l=i[a];mo(l in o),s.push(o[l])}return Xe(s)}runInternalGraph(t,e){e==null&&(e=Eo(null,t.length));let o={};for(let l=0;l<this.inputs.length;++l){let u=this.inputs[l],c=t[l],p=e[l];o[u.id]=[c,p]}let n=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Sm);for(let l of n){let u=this.nodesByDepth[l];for(let c of u){let p=c.outboundLayer,m=c.inputTensors,f=c.outputTensors,h=new Array;for(let d of m)d.id in o&&h.push(o[d.id]);if(h.length===m.length){let d={},g,x,b,w;if(c.callArgs!=null&&(d=c.callArgs),h.length===1){let[C,I]=h[0];d.mask==null&&(d.mask=I),b=Xt(p.call(C,d)),w=Xt(p.computeMask(C,I)),g=[C],x=[I]}else g=h.map(C=>C[0]),x=h.map(C=>C[1]),d.mask==null&&(d.mask=x),b=Xt(p.call(g,d)),w=Xt(p.computeMask(g,x));if(p.activityRegularizer)throw new gt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let C=0;C<f.length;++C){let I=f[C],$=b[C],D=w[C];o[I.id]=[$,D]}}}}let s=[],i=[],a=[];for(let l of this.outputs){mo(l.id in o,`Could not compute output ${l.name} : ${l.id}`);let[u,c]=o[l.id];a.push(u.shape),s.push(u),i.push(c)}return[s,i,a]}buildNodeConversionMap(t){let e={},o;for(let n of this.layers){o=n instanceof to?1:0;for(let s=0;s<n.inboundNodes.length;s++){let i=to.nodeKey(n,s);this.containerNodes.has(i)&&(e[i]=o,o+=1)}}return e}getLayer(t,e){if(e!=null){if(this.layers.length<=e)throw new P(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}else if(t==null)throw new P("Provide either a layer name or layer index");for(let o of this.layers)if(o.name===t)return o;throw new P(`No such layer: ${t}`)}calculateLosses(){return M(()=>{let t=[];for(let e of this.layers)for(let o=0;o<e.inboundNodes.length;++o){let n=to.nodeKey(e,o);this.containerNodes.has(n)&&t.push(...e.calculateLosses())}return t})}getConfig(){let t={name:this.name},e=this.buildNodeConversionMap(this.layers),o=[];for(let i of this.layers){let a=i.getClassName(),l=i.getConfig(),u=[];for(let p=0;p<i.inboundNodes.length;p++){let m=i.inboundNodes[p],f=to.nodeKey(i,p),h={};if(this.containerNodes.has(f)){if(m.callArgs)try{JSON.stringify(m.callArgs),h=m.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),h={}}if(m.inboundLayers.length>0){let d=[];for(let g=0;g<m.inboundLayers.length;g++){let x=m.inboundLayers[g],b=m.nodeIndices[g],w=m.tensorIndices[g],C=to.nodeKey(x,b),I=e[C];I==null&&(I=0),d.push([x.name,I,w,h])}u.push(d)}}}let c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,o.push(c)}t.layers=o;let n=[];for(let i=0;i<this.inputLayers.length;i++){let a=this.inputLayers[i],l=this.inputLayersNodeIndices[i],u=to.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.inputLayersTensorIndices[i];n.push([a.name,c,p])}t.inputLayers=n;let s=[];for(let i=0;i<this.outputLayers.length;i++){let a=this.outputLayers[i],l=this.outputLayersNodeIndices[i],u=to.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.outputLayersTensorIndices[i];s.push([a.name,c,p])}return t.outputLayers=s,t}static fromConfig(t,e,o={},n=!1){let s={},i={};function a(g,x){g.name in i?i[g.name].push(x):i[g.name]=[x]}function l(g,x){let b=[],w;for(let C of x){let I=C[0],$=C[1],D=C[2];if(w=C[3]==null?{}:C[3],!(I in s)){a(g,x);return}let F=s[I];if(F.inboundNodes.length<=$){a(g,x);return}let O=F.inboundNodes[$];b.push(O.outputTensors[D])}b.length>0&&g.apply(Xe(b),w)}function u(g){let x=g.name,b=Qr(g,e.customObjects!=null?e.customObjects:{});b.setFastWeightInitDuringBuild(n),s[x]=b,g.inboundNodes.forEach(C=>{if(!(C instanceof Array))throw new P(`Corrupted configuration, expected array for nodeData: ${C}`);a(b,C)})}let c=e.name,p=e.layers;for(let g of p)u(g);for(;!O1(i);)for(let g of p){let x=s[g.name];if(x.name in i){let b=i[x.name];delete i[x.name];for(let w of b)l(x,w)}}let m=[],f=[],h=e.inputLayers;for(let g of h){let x=g[0],b=g[1],w=g[2];mo(x in s);let I=s[x].inboundNodes[b].outputTensors;m.push(I[w])}let d=e.outputLayers;for(let g of d){let x=g[0],b=g[1],w=g[2];mo(x in s);let I=s[x].inboundNodes[b].outputTensors;f.push(I[w])}return new t({inputs:m,outputs:f,name:c})}get stateful(){if(this._stateful)throw new P("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let t of this.layers)if(t.stateful)return!0;return!1}resetStates(){M(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}};function _W(r,t,e){let o=t.length;if(r==null||Array.isArray(r)&&r.length===0)return t.map(n=>null);if(o===1)return Array.isArray(r)&&r.length===1?r:typeof r=="object"&&t[0]in r?[r[t[0]]]:[r];if(Array.isArray(r)){if(r.length!==o)throw new Error(`Provided ${e} is an array of ${r.length} element(s), but the model has ${o} outputs. Make sure a set of weights is provided for each model output.`);return r}else if(typeof r=="object"&&Object.keys(r).length>0&&typeof r[Object.keys(r)[0]]=="object"){let n=[];return t.forEach(s=>{s in r?n.push(r[s]):n.push(null)}),n}else throw new Error(`The model has multiple (${o}) outputs, so ${e} must be either an array with ${o} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(r)}`)}function Ig(r,t){return _W(r,t,"classWeight")}async function Ng(r,t,e,o){if(t!=null||o!=null)throw new Error("Support sampleWeight is not implemented yet");if(e!=null){let n=M(()=>{if(r.shape.length===1)return Tr(r);if(r.shape.length===2){if(r.shape[1]>1)return bn(r,1);if(r.shape[1]===1)return A(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await n.data());xt(n);let i=[];return s.forEach(a=>{if(e[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(e[a])}),Ce(i,"float32")}else return null}function xk(r,t){return R(r,t)}var OW=32;function wk(r,t){let e,o,n=t;e=n.xs,o=n.ys,y.assert(e!=null&&o!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let s=yk("input",r.inputNames,e),i=yk("output",r.outputNames,o),a=s[0].shape[0];y.assert(s.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),y.assert(i.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let l=0;l<s.length;l++)y.assert(s[l].shape[0]===a,()=>`Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);for(let l=0;l<i.length;l++)y.assert(i[l].shape[0]===a,()=>`Batch size mismatch: output ${r.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);return{xs:s,ys:i}}function yk(r,t,e){if(e instanceof At)return[e];if(Array.isArray(e))return y.assert(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${r} keys ${t}.`),e;{let o=[];for(let n of t){if(e[n]==null)throw new P(`The feature data generated by the dataset lacks the required ${r} key '${n}'.`);o.push(e[n])}return o}}function LW(r){if(r.length===3)throw new gt("Validation with sample weights is not implemented yet.");return{xs:r[0],ys:r[1]}}async function Ck(r,t,e){let o=e.batchesPerEpoch!=null;if(y.assert(r.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),y.assert(e!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),y.assert(e.epochs!=null&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),y.assert(!o||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),y.assert(e.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;try{let n=e.validationData!=null,s,i;if(n)if(bk(e.validationData))y.assert(e.validationBatches==null||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{let g=LW(e.validationData);s=g.xs,i=g.ys}let a=r.makeTrainFunction(),l=r.getDedupedMetricsNames(),u;n?u=l.slice().concat(l.map(g=>"val_"+g)):u=l.slice();let c=dg(e.callbacks,e.yieldEvery),p=e.verbose==null?1:e.verbose,{callbackList:m,history:f}=gg(c,p,e.epochs,null,null,PW(t,e),null,n,u);m.setModel(r),r.history=f,await m.onTrainBegin(),r.stopTraining_=!1;let h=e.initialEpoch==null?0:e.initialEpoch,d=await t.iterator();for(;h<e.epochs;){let g={};await m.onEpochBegin(h);let x=0,b=0;for(o||(d=await t.iterator());!o||x<e.batchesPerEpoch;){let w=await d.next();if(o&&w.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${x} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(w.value!=null){let{xs:C,ys:I}=wk(r,w.value),$={};$.batch=b,$.size=C[0].shape[0],await m.onBatchBegin(b,$);let D=[];if(e.classWeight!=null){let L=Ig(e.classWeight,r.outputNames);for(let B=0;B<L.length;++B)D.push(await Ng(I[B],null,L[B]))}let F=C.concat(I).concat(D),O=a(F);xt(F);for(let L=0;L<l.length;++L){let B=l[L],V=O[L];$[B]=V,ue(V)}await m.onBatchEnd(b,$),pg($),b++,x++}if(o?x>=e.batchesPerEpoch:w.done){if(n){let C;bk(e.validationData)?C=Xt(await r.evaluateDataset(e.validationData,{batches:e.validationBatches})):C=Xt(r.evaluate(s,i,{batchSize:e.validationBatchSize==null?OW:e.validationBatchSize,verbose:0}));for(let I=0;I<r.metricsNames.length;++I)g[`val_${r.metricsNames[I]}`]=C[I]}break}if(r.stopTraining_)break}if(await m.onEpochEnd(h,g),h++,r.stopTraining_)break}return await m.onTrainEnd(),await r.history.syncData(),r.history}finally{r.isTraining=!1}}function PW(r,t){let e=null;return t.batchesPerEpoch!=null?e=t.batchesPerEpoch:Number.isFinite(r.size)&&(e=r.size),e}function bk(r){return typeof r.iterator=="function"}function zW(r){return typeof r.next=="function"}async function vk(r,t,e){e=e||{};let o=e.batches!=null,n=r.testFunction,s=[];if(e.verbose>0)throw new gt("Verbose mode is not implemented yet.");y.assert(!o||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);let i=zW(t)?t:await t.iterator(),a=0,l=0;for(;!o||l<e.batches;){let u=await i.next();if(s=M(()=>{if(u.value){let{xs:c,ys:p}=wk(r,u.value),m=c.concat(p),f=M(()=>n(m));if(xt(m),l===0)for(let d=0;d<f.length;++d)s.push(nt(0));let h=m[0].shape[0];for(let d=0;d<f.length;++d){let g=f[d],x=s[d];s[d]=M(()=>H(s[d],R(h,g))),l>0&&xt(x)}xt(f),a+=h,++l}return s}),u.done){o&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<s.length;++u){let c=s[u];s[u]=rt(s[u],a),xt(c)}return Xe(s)}function kg(r){y.assert(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function hp(r,t,e){return r==null?[null]:Array.isArray(r)?r.map(o=>Hs(o,t,e-t)):Hs(r,t,e-t)}function Eg(r,t){return M(()=>r==null?null:Array.isArray(r)?r.map(e=>Eg(e,t)):ig(r,t.dtype==="int32"?t:j(t,"int32")))}function $g(r,t){let e=[],o=0,n=null;for(;o<r;)n=o+t,n>=r&&(n=r),e.push([o,n]),o=n;return e}async function MW(r,t,e,o,n,s,i,a,l,u,c,p,m,f,h){n==null&&(n=32),s==null&&(s=1),c==null&&(c=!0),m==null&&(m=0);let d=!1;if(l!=null&&u!=null&&(d=!0),h!=null&&(d=!0,f==null))throw new P("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let g=r.checkNumSamples(e,n,f,"steps_per_epoch"),x;g!=null&&(x=xr(0,g)),i==null&&(i=1);let{callbackList:b,history:w}=gg(a,i,s,m,g,f,n,d,p);b.setModel(r),r.history=w,await b.onTrainBegin(),r.stopTraining_=!1;for(let C=m;C<s;++C){await b.onEpochBegin(C);let I={};if(f!=null)throw new gt("stepsPerEpoch mode is not implemented yet.");{if(c==="batch")throw new gt("batch shuffling is not implemneted yet");c&&y.shuffle(x);let $=Ce(x),D=$g(g,n);for(let F=0;F<D.length;++F){let O={};if(await b.onBatchBegin(F,O),M(()=>{let L=D[F][0],B=D[F][1],V=Hs($,L,B-L);O.batch=F,O.size=B-L;let G=Eg(e,V),U=t(G);for(let W=0;W<o.length;++W){let K=o[W],Z=U[W];O[K]=Z,ue(Z)}if(F===D.length-1&&d){let W=r.testLoop(l,u,n);for(let K=0;K<o.length;++K){let Z=o[K],q=W[K];ue(q),I["val_"+Z]=q}}}),await b.onBatchEnd(F,O),pg(O),r.stopTraining_)break}$.dispose()}if(await b.onEpochEnd(C,I),r.stopTraining_)break}return await b.onTrainEnd(),await r.history.syncData(),r.history}async function Sk(r,t,e,o={}){if(r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;let n,s,i,a,l,u,c,p,m;try{let f=o.batchSize==null?32:o.batchSize;kg(f);let h=!1,d=await r.standardizeUserData(t,e,o.sampleWeight,o.classWeight,h,f);n=d[0],s=d[1],m=d[2];let g=!1,x;if(o.validationData!=null&&o.validationData.length>0){if(g=!0,o.validationData.length===2)l=o.validationData[0],u=o.validationData[1];else throw o.validationData.length===3?new gt("validationData including sample weights is not supported yet."):new P(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${o.validationData} is invalid.`);let O=!0,L=await r.standardizeUserData(l,u,null,null,O,f);c=L[0],p=L[1],x=c.concat(p)}else if(o.validationSplit!=null&&o.validationSplit>0&&o.validationSplit<1){g=!0;let O=Math.floor(n[0].shape[0]*(1-o.validationSplit)),L=n[0].shape[0];c=hp(n,O,L),i=n,n=hp(n,0,O),p=hp(s,O,L),a=s,s=hp(s,0,O),x=c.concat(p)}else o.validationSteps!=null&&(g=!0);let b=n.concat(s).concat(m);r.checkTrainableWeightsConsistency();let w=r.makeTrainFunction(),C=r.getDedupedMetricsNames(),I,$;g?(r.makeTestFunction(),I=r.testFunction,$=C.slice().concat(C.map(O=>"val_"+O))):(I=null,x=[],$=C.slice());let D=dg(o.callbacks,o.yieldEvery);return await MW(r,w,b,C,f,o.epochs,o.verbose,D,I,x,o.shuffle,$,o.initialEpoch,null,null)}finally{r.isTraining=!1,_o(n,t),_o(s,e),_o(i,t),_o(a,e),_o(c,l),_o(p,u),m!=null&&xt(m)}}function d0(r){let t=[];r instanceof At&&(r=[r]);for(let e=0;e<r.length;++e){let o=r[e];if(o.rank===1)t.push(qs(o,1));else{if(o.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(o)}}return t}function _o(r,t){if(r==null)return;let e=[];if(t instanceof At)e.push(t.id);else if(Array.isArray(t))t.forEach(n=>e.push(n.id));else if(t!=null)for(let n in t){let s=t[n];e.push(s.id)}let o=[];if(r instanceof At)e.indexOf(r.id)===-1&&o.push(r);else if(Array.isArray(r))r.forEach(n=>{e.indexOf(n.id)===-1&&o.push(n)});else if(r!=null)for(let n in r){let s=r[n];e.indexOf(s.id)===-1&&o.push(s)}o.forEach(n=>{n.isDisposed||n.dispose()})}function BW(r){return r instanceof At}function g0(r){return Array.isArray(r)}function Tk(r){return!BW(r)&&!g0(r)}function Ik(r,t,e,o=!0,n=""){if(t==null||t.length===0){if(r!=null){let i=!1;if(g0(r)&&r.length>0)i=!0;else if(Tk(r)){for(let a in r)if(r.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new P(`Error when checking model ${n} expected no data, but got ${r}`)}return[]}if(r==null)return t.map(i=>null);let s;if(Tk(r)){r=r,s=[];for(let i of t){if(r[i]==null)throw new P(`No data provided for "${i}". Need data for each key in: ${t}`);s.push(r[i])}}else if(g0(r)){if(r=r,r.length!==t.length)throw new P(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);s=r}else{if(r=r,t.length>1)throw new P(`The model ${n} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);s=[r]}if(s=d0(s),e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new P(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c>=0&&u!==c)throw new P(`${n} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${n} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return s}function VW(r,t,e){let o=Ao(r.map(s=>s.shape[0]));o.sort();let n=Ao(t.map(s=>s.shape[0]));if(n.sort(),o.length>1)throw new P(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map(s=>s.shape))}`);if(n.length>1)throw new P(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(s=>s.shape))}`);if(o.length>0&&n.length>0&&!y.arraysEqual(o,n))throw new P(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${n[0]} target sample(s).`)}function GW(r,t,e){let o=[Rl,mp,Fl];for(let n=0;n<r.length;++n){let s=r[n],i=t[n],a=e[n];if(i!=null){if(i===Fl&&s.shape[s.shape.length-1]===1)throw new P(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(o.indexOf(i)!==-1){let l=s.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){let p=l[c],m=u[c];if(m!=null&&p!==m)throw new P(`A target Tensor with shape ${s.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function Nk(r,t,e,o=!0,n=""){let s;if(Array.isArray(r)){if(r.length!==t.length)throw new P(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${r.length} Tensors(s).`);s=r}else{if(t.length>1)throw new P(`The model expects ${t.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);s=[r]}if(e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new P(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c!==u)throw new P(`Error when checking ${n}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function WW(r,t){if(r==null||Array.isArray(r)&&r.length===0)return t.map(o=>[]);let e;if(typeof r=="string"||typeof r=="function")e=[r];else if(Array.isArray(r)||typeof r=="object")e=r;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);if(Array.isArray(e))return t.map(o=>e);{let o=[];for(let n of t){let s=e.hasOwnProperty(n)?e[n]:[];Array.isArray(s)||(s=[s]),o.push(s)}return o}}var UW="layers-model",Oo=class extends to{constructor(t){super(t),this.isTraining=!1}summary(t,e,o=console.log){if(!this.built)throw new P("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");dk(this,t,e,o)}compile(t){if(t.loss==null&&(t.loss=[]),this.loss=t.loss,typeof t.optimizer=="string")this.optimizer_=hk(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof cr))throw new P("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(!Array.isArray(t.loss)&&typeof t.loss!="string"&&typeof t.loss!="function"){t.loss=t.loss;for(let i in t.loss)if(this.outputNames.indexOf(i)===-1)throw new P(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(let i of this.outputNames)t.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),e.push(yg(t.loss[i]))}else if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new P(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);e=t.loss.map(a=>yg(a))}else{let i=yg(t.loss);this.outputs.forEach(a=>{e.push(i)})}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){let a=this.internalOutputShapes[i],l=this.outputNames[i];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[i])}let o=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Jo("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([a,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});let n=WW(t.metrics,this.outputNames),s=(i,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[i]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,i])};Jo("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=n[i];(u=>{let c="",p,m,f;for(let h of u){if(typeof h=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(h)!==-1){let g=this.internalOutputShapes[i];g[g.length-1]===1||this.lossFunctions[i]===mp?["accuracy","acc"].indexOf(h)!==-1?m=wg:["crossentropy","ce"].indexOf(h)!==-1&&(m=c0):this.lossFunctions[i]===pp?["accuracy","acc"].indexOf(h)!==-1?m=p0:["crossentropy","ce"].indexOf(h)!==-1&&(m=m0):["accuracy","acc"].indexOf(h)!==-1?m=Cg:["crossentropy","ce"].indexOf(h)!==-1&&(m=vg);let x;["accuracy","acc"].indexOf(h)!==-1?x="acc":["crossentropy","ce"].indexOf(h)!==-1&&(x="ce"),f=m,p=c+x}else f=mk(h),p=c+Wm(h);let d;Jo(p,()=>{d=f}),s(i,p,d)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,o={}){let n=o.batchSize==null?32:o.batchSize;kg(n);let s=!0,i=this.standardizeUserDataXY(t,e,s,n);try{let a=i[0].concat(i[1]);this.makeTestFunction();let l=this.testFunction,u=this.testLoop(l,a,n,o.verbose,o.steps);return Xe(u)}finally{_o(i[0],t),_o(i[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),vk(this,t,e)}checkNumSamples(t,e,o,n="steps"){let s;if(o!=null){if(s=null,e!=null)throw new P(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else if(t!=null)Array.isArray(t)?s=t[0].shape[0]:s=t.shape[0];else throw new P(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return s}execute(t,e){if(Array.isArray(e)&&e.length===0)throw new P("`outputs` is an empty Array, which is not allowed.");let o=Array.isArray(e),n=o?e:[e],s=this.retrieveSymbolicTensors(n),i=new Fo;if(t instanceof At&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new P(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)i.add(this.inputs[l],t[l])}else for(let l of this.inputs){let u=t[l.name];if(u==null)throw new P(`No value is provided for the model's input ${l.name}`);i.add(l,u)}let a=Al(s,i);return o?a:a[0]}retrieveSymbolicTensors(t){let e=Eo(null,t.length),o=t.length;for(let n of this.layers){let s=Array.isArray(n.output)?n.output:[n.output],i=s.map(a=>a.name);for(let a=0;a<t.length;++a){let l=i.indexOf(t[a]);if(l!==-1&&(e[a]=s[l],o--),o===0)break}if(o===0)break}if(o>0){let n=[];throw e.forEach((s,i)=>{s==null&&n.push(t[i])}),new P(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,o=!1){return M(()=>{let n=this.checkNumSamples(t);if(o)throw new gt("Verbose predictLoop() is not implemented yet.");let s=$g(n,e),i=this.outputs.map(a=>[]);for(let a=0;a<s.length;++a)M(()=>{let u=s[a][0],c=s[a][1],p=hp(t,u,c),m=[];if(Array.isArray(p))for(let h=0;h<p.length;++h)m.push({key:this.inputs[h],value:p[h]});else m.push({key:this.inputs[0],value:p});let f=new Fo(m);return Al(this.outputs,f)}).forEach((u,c)=>i[c].push(u));return Xe(i.map(a=>Bt(a,0)))})}predict(t,e={}){let o=d0(t);Nk(o,this.inputNames,this.feedInputShapes,!1);try{let n=e.batchSize==null?32:e.batchSize;return kg(n),this.predictLoop(o,n)}finally{_o(o,t)}}predictOnBatch(t){Nk(t,this.inputNames,this.feedInputShapes,!0);let e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,o=!0,n){if(this.optimizer_==null)throw new mr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let s=[];for(let i=0;i<this.feedOutputShapes.length;++i){let a=this.feedOutputShapes[i];this.feedLossFns[i]===pp?s.push(a.slice(0,a.length-1).concat([1])):s.push(a)}if(t=Ik(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Ik(e,this.feedOutputNames,s,!1,"target"),VW(t,e,null),GW(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&n!=null&&n>0&&t[0].shape[0]%n!==0)throw new P(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,o,n,s=!0,i){let[a,l]=this.standardizeUserDataXY(t,e,s,i);if(o!=null)throw new Error("sample weight is not supported yet.");let u=null;if(n!=null){let c=Ig(n,this.outputNames);u=[];for(let p=0;p<c.length;++p)u.push(await Ng(l[p],null,c[p]))}return[a,l,u]}testLoop(t,e,o,n=0,s){return M(()=>{let i=this.checkNumSamples(e,o,s,"steps"),a=[];if(n>0)throw new gt("Verbose mode is not implemented yet.");if(s!=null)throw new gt("steps mode in testLoop() is not implemented yet");{let l=$g(i,o),u=Ce(xr(0,i));for(let c=0;c<l.length;++c){let p=l[c][0],m=l[c][1],f=Hs(u,p,m-p),h=Eg(e,f),d=t(h);if(c===0)for(let g=0;g<d.length;++g)a.push(nt(0));for(let g=0;g<d.length;++g){let x=d[g];a[g]=H(a[g],R(m-p,x))}}for(let c=0;c<a.length;++c)a[c]=rt(a[c],i)}return a})}getDedupedMetricsNames(){let t=this.metricsNames,e=[];for(let o=0;o<t.length;++o){let n=t[o],s=n;t0(t,n)>1&&(s+=`_${t0(t.slice(0,o),n)}`),e.push(s)}return e}makeTrainFunction(){return t=>{let e=[],o=t.slice(0,this.inputs.length),n=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],a=()=>{let p=[];for(let d=0;d<this.inputs.length;++d)p.push({key:this.inputs[d],value:o[d]});let m=new Fo(p),f=Al(this.outputs,m,{training:!0}),h;for(let d=0;d<this.lossFunctions.length;++d){let g=this.lossFunctions[d],x=g(n[d],f[d]);s[d]!=null&&(x=xk(x,s[d]));let b=re(x);e.push(b),d===0?h=x:h=H(h,x)}for(let d=0;d<this.metricsTensors.length;++d){let g;if(this.outputs.length>1&&d<this.outputs.length)g=e[d];else{let x=this.metricsTensors[d][0],b=this.metricsTensors[d][1];g=re(x(n[b],f[b]))}ue(g),i.push(g)}return h=re(h),this.calculateLosses().forEach(d=>{h=H(h,d)}),h},l=this.collectedTrainableWeights.map(p=>p.read()),u=!0;return[this.optimizer_.minimize(a,u,l)].concat(i)}}makeTestFunction(){this.testFunction=t=>M(()=>{let e=[],o,n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let u=0;u<this.inputs.length;++u)i.push({key:this.inputs[u],value:n[u]});let a=new Fo(i),l=Al(this.outputs,a);for(let u=0;u<this.lossFunctions.length;++u){let c=this.lossFunctions[u],p=re(c(s[u],l[u]));u===0?o=p:o=H(o,p),e.push(o)}for(let u=0;u<this.metricsTensors.length;++u){let c=this.metricsTensors[u][0],p=this.metricsTensors[u][1],m=re(c(s[p],l[p]));e.push(m)}return e})}async fit(t,e,o={}){return Sk(this,t,e,o)}async fitDataset(t,e){return Ck(this,t,e)}async trainOnBatch(t,e){let o=await this.standardizeUserData(t,e),n=o[0],s=o[1],a=this.makeTrainFunction()(n.concat(s)),l=[];for(let u of a){let c=await u.data();l.push(c[0])}return xt(a),_o(o[0],t),_o(o[1],e),Xe(l)}getNamedWeights(t){let e=[],o=t!=null&&t.trainableOnly,n=o?this.trainableWeights:this.weights,s=this.getWeights(o);for(let i=0;i<n.length;++i)o&&!n[i].trainable||e.push({name:n[i].originalName,tensor:s[i]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){let t=super.dispose();if(t.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){let e=hm().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-hm().numTensors}return t}getLossIdentifiers(){let t;if(typeof this.loss=="string")t=$o(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if(typeof e!="string")throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(e=>$o(e))}else{let e=Object.keys(this.loss);t={};let o=this.loss;for(let n of e)if(typeof o[n]=="string")t[n]=$o(o[n]);else throw new Error("Serialization of non-string loss is not supported.")}return t}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[$o(Wm(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>$o(Wm(t)));{let t={};for(let e in this.metrics)t[e]=$o(Wm(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(t.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(t.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(t.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");let e=Um(t.optimizer_config),o=Qr(e),n;if(typeof t.loss=="string")n=Us(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(i=>Us(i));else if(t.loss!=null){n={};for(let i in t.loss)n[i]=Us(t.loss[i])}let s;if(Array.isArray(t.metrics))s=t.metrics.map(i=>Us(i));else if(t.metrics!=null){s={};for(let i in t.metrics)s[i]=Us(t.metrics[i])}this.compile({loss:n,metrics:s,optimizer:o})}async save(t,e){if(typeof t=="string"){let u=jo.getSaveHandlers(t);if(u.length===0)throw new P(`Cannot find any save handlers for URL '${t}'`);if(u.length>1)throw new P(`Found more than one (${u.length}) save handlers for URL '${t}'`);t=u[0]}if(t.save==null)throw new P("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let o=await jo.encodeWeights(this.getNamedWeights(e)),n=!1,s=null,a={modelTopology:this.toJSON(s,n),format:UW,generatedBy:`TensorFlow.js tfjs-layers v${fp}`,convertedBy:null};if((e==null?!1:e.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();let u="optimizer",{data:c,specs:p}=await jo.encodeWeights(await this.optimizer.getWeights(),u);o.specs.push(...p),o.data=jo.concatenateArrayBuffers([o.data,c])}return this.userDefinedMetadata!=null&&(h0(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=o.data,a.weightSpecs=o.specs,t.save(a)}setUserDefinedMetadata(t){h0(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}};Oo.className="Model";X.registerClass(Oo);var Ag=class extends Oo{};Ag.className="Functional";X.registerClass(Ag);var Xs=class extends Oo{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=t.name!=null?t.name:Sa("sequential_"),t.layers!=null)for(let e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(o=>o<0))throw new P(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){let e=t instanceof Xs||t instanceof Oo,o;if(e){if(o=t,o.outputs.length!==1)throw new P("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(o.inputs.length!==1)throw new P("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(t.inboundNodes.length===0){if(t.batchInputShape==null)throw new P("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let n=a0({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(n)}if(e)this.outputs=o.outputs,this.inputs=o.inputs;else{if(t.inboundNodes.length!==1)throw new P(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(t.inboundNodes[0].outputTensors.length!==1)throw new P("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=i0(this.outputs[0])}this.inboundNodes=[],new Ks({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Eo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(n=>n.shape),outputShapes:this.outputs[0].shape})}else{let n=t.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return this.model==null&&this.build(),this.model.call(t,e)}build(t){if(Lt(t),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Oo({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,o=console.log){this.built||this.build(),super.summary(t,e,o)}setWeights(t){this.model==null&&this.build(),this.model.setWeights(t)}evaluate(t,e,o={}){if(!this.built)throw new mr("The model needs to be compiled before being used.");return this.model.evaluate(t,e,o)}async evaluateDataset(t,e){if(!this.built)throw new mr("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return this.model==null&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return this.model==null&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,o={}){if(!this.built)throw new mr("The model needs to be compiled before being used.");return this.model.fit(t,e,o)}async fitDataset(t,e){if(!this.built)throw new mr("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,o={},n=!1){let s,i={};if(e instanceof Array){if(e[0].className==null||e[0].className==="Merge")throw new P("Legacy serialization format not supported yet.");s=e}else y.assert(e.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,i=e;let a=new t(i);if(!(a instanceof Xs))throw new gt(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(let l of s){let c=Qr(l,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),a.add(c)}return a}set stopTraining(t){if(this.model==null)throw new P("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(this.model==null)throw new P("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let t=[];for(let e of this.layers){let o={};o.className=e.getClassName(),o.config=e.getConfig(),t.push(o)}return{name:this.name,layers:t}}};Xs.className="Sequential";X.registerClass(Xs);var wr=class extends X.Serializable{getConfig(){return{}}},Dg=class extends wr{apply(t,e=1){return Y1(t,e)}};Dg.className="elu";X.registerClass(Dg);var Rg=class extends wr{apply(t){return _c(t)}};Rg.className="selu";X.registerClass(Rg);var Fg=class extends wr{apply(t){return rr(t)}};Fg.className="relu";X.registerClass(Fg);var _g=class extends wr{apply(t){return M(()=>En(6,rr(t)))}};_g.className="relu6";X.registerClass(_g);var Og=class extends wr{apply(t){return t}};Og.className="linear";X.registerClass(Og);var Lg=class extends wr{apply(t){return dr(t)}};Lg.className="sigmoid";X.registerClass(Lg);var Pg=class extends wr{apply(t){return J1(t)}};Pg.className="hardSigmoid";X.registerClass(Pg);var zg=class extends wr{apply(t){return Xo(t)}};zg.className="softplus";X.registerClass(zg);var Mg=class extends wr{apply(t){return Z1(t)}};Mg.className="softsign";X.registerClass(Mg);var Bg=class extends wr{apply(t){return wn(t)}};Bg.className="tanh";X.registerClass(Bg);var dp=class extends wr{apply(t,e=-1){return ya(t,e)}};dp.className="softmax";X.registerClass(dp);var Vg=class extends wr{apply(t,e=-1){return Ec(t,e)}};Vg.className="logSoftmax";X.registerClass(Vg);var Gg=class extends wr{apply(t,e=1){return M(()=>R(dr(R(t,e)),t))}};Gg.className="swish";X.registerClass(Gg);var Wg=class extends wr{apply(t){return M(()=>R(t,wn(Xo(t))))}};Wg.className="mish";X.registerClass(Wg);function tn(r){return r.getClassName()}function x0(r,t={}){return Fn(r,X.SerializationMap.getMap().classNameMap,t,"activation")}function en(r){if(r==null){let t={};return t.className="linear",t.config={},x0(t)}if(typeof r=="string"){let t={};return t.className=r,t.config={},x0(t)}else return r instanceof wr?r:x0(r)}function HW(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}var Ug=class extends X.Serializable{},Hm=class extends Ug{constructor(t){super(),HW(t),this.l1=t==null||t.l1==null?.01:t.l1,this.l2=t==null||t.l2==null?.01:t.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(t){return M(()=>{let e=oe([1]);return this.hasL1&&(e=H(e,st(R(this.l1,ie(t))))),this.hasL2&&(e=H(e,st(R(this.l2,El(t))))),A(e,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}};Hm.className="L1L2";X.registerClass(Hm);var kk={l1l2:"L1L2"};function Ht(r){return Jc(r)}function Ek(r,t={}){return Fn(r,X.SerializationMap.getMap().classNameMap,t,"regularizer")}function Zt(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in kk?kk[r]:r,config:{}};return Ek(e)}else return r instanceof Ug?r:Ek(r)}var qm=class extends kt{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null&&(this.maxValue=t.maxValue)}call(t,e){t=vt(t);let o=rr(t);return this.maxValue!=null&&(o=qe(o,0,this.maxValue)),o}computeOutputShape(t){return t}getConfig(){let t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}};qm.className="ReLU";X.registerClass(qm);var Km=class extends kt{constructor(t){super(t??{}),this.DEFAULT_ALPHA=.3,t==null&&(t={}),this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=vt(t);return pa(o,this.alpha)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};Km.className="LeakyReLU";X.registerClass(Km);var jm=class extends kt{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",t==null&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Kt(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Zt(t.alphaRegularizer),this.alphaConstraint=de(t.alphaConstraint),t.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else if(typeof t.sharedAxes=="number")this.sharedAxes=[t.sharedAxes];else throw new P(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`)}build(t){t=Lt(t);let e=t.slice(1);if(this.sharedAxes!=null)for(let n of this.sharedAxes)e[n-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let o={};if(this.sharedAxes!=null)for(let n=1;n<t.length;++n)o[n]=t[n];this.inputSpec=[new Yt({ndim:t.length,axes:o})],this.built=!0}call(t,e){return t=vt(t),ga(t,this.alpha.read())}getConfig(){let t={alphaInitializer:ne(this.alphaInitializer),alphaRegularizer:Ht(this.alphaRegularizer),alphaConstraint:he(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}};jm.className="PReLU";X.registerClass(jm);var Xm=class extends kt{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA=1,t==null&&(t={}),t.alpha!=null&&t.alpha!==this.DEFAULT_ALPHA)throw new gt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=vt(t);return Tn(o)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};Xm.className="ELU";X.registerClass(Xm);var Ym=class extends kt{constructor(t){super(t??{}),this.DEFAULT_THETA=1,t==null&&(t={}),this.theta=t.theta==null?this.DEFAULT_THETA:t.theta}call(t,e){let o=vt(t);return R(o,j(Te(o,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){let t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}};Ym.className="ThresholdedReLU";X.registerClass(Ym);var Zm=class extends kt{constructor(t){super(t??{}),this.DEFAULT_AXIS=1,t==null&&(t={}),this.softmax=new dp().apply,this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis}call(t,e){let o=vt(t);return this.softmax(o,this.axis)}computeOutputShape(t){return t}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};Zm.className="Softmax";X.registerClass(Zm);function Na(r,t,e){if(typeof r=="number")return Eo(r,t);if(r.length!==t)throw new P(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${r.length} elements.`);for(let o=0;o<t;++o){let n=r[o];if(!q1(n))throw new P(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(r)} including a non-integer number ${n}`)}return r}function Wr(r,t,e,o,n=1){if(r==null)return r;let s=t+(t-1)*(n-1),i;return e==="same"?i=r:i=r-s+1,Math.floor((i+o-1)/o)}function rn(r,t,e,o){if(r==null)return null;if(o==="valid")r=r*t+Qo([e-t,0]);else if(o==="same")r=r*t;else throw new P(`Unsupport padding mode: ${o}.`);return r}function of(r,t){return M(()=>(ce(t),t==="channelsFirst"?Nt(r,[0,2,3,1]):r))}function y0(r,t){return M(()=>(ce(t),t==="channelsFirst"?Nt(r,[0,2,3,4,1]):r))}function KW(r,t,e,o=1,n="valid",s,i=1){return M(()=>{if(s==null&&(s=Er()),ce(s),r.shape.length!==3)throw new P(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);if(t.shape.length!==3)throw new P(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(e!=null&&e.shape.length!==1)throw new P(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if(s==="channelsFirst"&&(r=Nt(r,[0,2,1])),n==="causal")throw new gt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=vc(r,t,o,n==="same"?"same":"valid","NWC",i);return e!=null&&(a=$r(a,e)),a})}function $k(r,t,e,o=[1,1],n="valid",s,i,a=null){return M(()=>{if(s==null&&(s=Er()),ce(s),r.rank!==3&&r.rank!==4)throw new P(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(t.rank!==3&&t.rank!==4)throw new P(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let l=of(r,s);if(n==="causal")throw new gt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Ca.conv2d({x:l,filter:t,strides:o,pad:n==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:a}),s==="channelsFirst"&&(l=Nt(l,[0,3,1,2])),l})}function jW(r,t,e,o=[1,1,1],n="valid",s,i){return M(()=>{if(s==null&&(s=Er()),ce(s),r.rank!==4&&r.rank!==5)throw new P(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);if(t.rank!==4&&t.rank!==5)throw new P(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);let a=y0(r,s);if(n==="causal")throw new gt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=sd(a,t,o,n==="same"?"same":"valid","NDHWC",i),e!=null&&(a=$r(a,e)),s==="channelsFirst"&&(a=Nt(a,[0,4,1,2,3])),a})}var _l=class extends kt{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",_l.verifyArgs(e),this.rank=t,Ne(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new gt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Na(e.kernelSize,t,"kernelSize"),this.strides=Na(e.strides==null?1:e.strides,t,"strides"),this.padding=e.padding==null?"valid":e.padding,kr(this.padding),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,ce(this.dataFormat),this.activation=en(e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.biasInitializer=Kt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=de(e.biasConstraint),this.biasRegularizer=Zt(e.biasRegularizer),this.activityRegularizer=Zt(e.activityRegularizer),this.dilationRate=Na(e.dilationRate==null?1:e.dilationRate,t,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new P(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new P(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new P(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(t){if(mo("kernelSize"in t,"required key 'kernelSize' not in config"),typeof t.kernelSize!="number"&&!Jd(t.kernelSize,"number",1,3))throw new P(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){let t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:tn(this.activation),useBias:this.useBias,biasInitializer:ne(this.biasInitializer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),biasConstraint:he(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}},ka=class extends _l{constructor(t,e){super(t,e),this.kernel=null,ka.verifyArgs(e),this.filters=e.filters,Ne(this.filters,"filters"),this.kernelInitializer=Kt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=de(e.kernelConstraint),this.kernelRegularizer=Zt(e.kernelRegularizer)}build(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new P(`The channel dimension of the input should be defined. Found ${t[e]}`);let o=t[e],n=this.kernelSize.concat([o,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:o}}],this.built=!0}call(t,e){return M(()=>{t=vt(t);let o,n=this.bias==null?null:this.bias.read(),s=Qd(this.activation.getClassName());if(s!=null&&this.rank===2)o=$k(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(this.rank===1)o=KW(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)o=$k(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)o=jW(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new gt("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(o=this.activation.apply(o))}return o})}computeOutputShape(t){t=Lt(t);let e=[],o=this.dataFormat==="channelsLast"?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<o.length;++s){let i=Wr(o[s],this.kernelSize[s],this.padding,this.strides[s],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[s]);e.push(i)}let n=[t[0]];return this.dataFormat==="channelsLast"?(n=n.concat(e),n.push(this.filters)):(n.push(this.filters),n=n.concat(e)),n}getConfig(){let t={filters:this.filters,kernelInitializer:ne(this.kernelInitializer),kernelRegularizer:Ht(this.kernelRegularizer),kernelConstraint:he(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||typeof t.filters!="number"||t.filters<1)throw new P(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}},Ea=class extends ka{constructor(t){super(2,t),Ea.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Jd(t.kernelSize,"number",1,2))throw new P(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}};Ea.className="Conv2D";X.registerClass(Ea);var $a=class extends ka{constructor(t){super(3,t),$a.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!(Array.isArray(t.kernelSize)&&(t.kernelSize.length===1||t.kernelSize.length===3)))throw new P(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}};$a.className="Conv3D";X.registerClass($a);var Jm=class extends Ea{constructor(t){if(super(t),this.inputSpec=[new Yt({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new P(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Lt(t),t.length!==4)throw new P("Input should have rank 4; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new P("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Yt({ndim:4,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{let o=vt(t);if(o.shape.length!==4)throw new P(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a;this.dataFormat==="channelsFirst"?(i=2,a=3):(i=1,a=2);let l=n[i],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],m=this.strides[0],f=this.strides[1],h=rn(l,m,c,this.padding),d=rn(u,f,p,this.padding),g=[s,h,d,this.filters];this.dataFormat!=="channelsLast"&&(o=Nt(o,[0,2,3,1]));let x=Tc(o,this.kernel.read(),g,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(x=Nt(x,[0,3,1,2])),this.bias!=null&&(x=$r(x,this.bias.read(),this.dataFormat)),this.activation!=null&&(x=this.activation.apply(x)),x})}computeOutputShape(t){t=Lt(t);let e=t.slice(),o,n,s;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3):(o=3,n=1,s=2);let i=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],u=this.strides[1];return e[o]=this.filters,e[n]=rn(e[n],l,i,this.padding),e[s]=rn(e[s],u,a,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};Jm.className="Conv2DTranspose";X.registerClass(Jm);var Qm=class extends $a{constructor(t){if(super(t),this.inputSpec=[new Yt({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new P(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Lt(t),t.length!==5)throw new P("Input should have rank 5; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new P("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Yt({ndim:5,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{let o=vt(t);if(o.shape.length!==5)throw new P(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a,l;this.dataFormat==="channelsFirst"?(l=2,i=3,a=4):(l=1,i=2,a=3);let u=n[l],c=n[i],p=n[a],m=this.kernelSize[0],f=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],g=this.strides[1],x=this.strides[2],b=rn(u,d,m,this.padding),w=rn(c,g,f,this.padding),C=rn(p,x,h,this.padding),I=[s,b,w,C,this.filters];this.dataFormat!=="channelsLast"&&(o=Nt(o,[0,2,3,4,1]));let $=ad(o,this.kernel.read(),I,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&($=Nt($,[0,4,1,2,3])),this.bias!==null&&($=$r($,this.bias.read(),this.dataFormat)),this.activation!==null&&($=this.activation.apply($)),$})}computeOutputShape(t){t=Lt(t);let e=t.slice(),o,n,s,i;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3,i=4):(o=4,n=1,s=2,i=3);let a=this.kernelSize[0],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[0],p=this.strides[1],m=this.strides[2];return e[o]=this.filters,e[n]=rn(e[n],c,a,this.padding),e[s]=rn(e[s],p,l,this.padding),e[i]=rn(e[i],m,u,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};Qm.className="Conv3DTranspose";X.registerClass(Qm);var Hg=class extends ka{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,e.filters==null)throw new P("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(e.kernelInitializer!=null||e.kernelRegularizer!=null||e.kernelConstraint!=null)throw new P("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(e.padding!=null&&e.padding!=="same"&&e.padding!=="valid")throw new P(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=Kt(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Zt(e.depthwiseRegularizer),this.depthwiseConstraint=de(e.depthwiseConstraint),this.pointwiseInitializer=Kt(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Zt(e.pointwiseRegularizer),this.pointwiseConstraint=de(e.pointwiseConstraint)}build(t){if(t=Lt(t),t.length<this.rank+2)throw new P(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null||t[e]<0)throw new P(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);let o=t[e],n=this.kernelSize.concat([o,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(o*this.depthMultiplier,this.filters);let i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new Yt({ndim:this.rank+2,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{t=vt(t);let o;if(this.rank===1)throw new gt("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(t=Nt(t,[0,2,3,1])),o=Oc(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(o=$r(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),this.dataFormat==="channelsFirst"&&(o=Nt(o,[0,3,1,2])),o})}getConfig(){let t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=ne(this.depthwiseInitializer),t.pointwiseInitializer=ne(this.pointwiseInitializer),t.depthwiseRegularizer=Ht(this.depthwiseRegularizer),t.pointwiseRegularizer=Ht(this.pointwiseRegularizer),t.depthwiseConstraint=he(this.depthwiseConstraint),t.pointwiseConstraint=he(this.pointwiseConstraint),t}};Hg.className="SeparableConv";var tf=class extends Hg{constructor(t){super(2,t)}};tf.className="SeparableConv2D";X.registerClass(tf);var Ol=class extends ka{constructor(t){super(1,t),Ol.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){let t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Jd(t.kernelSize,"number",1,1))throw new P(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}};Ol.className="Conv1D";X.registerClass(Ol);var ef=class extends kt{constructor(t){super(t),typeof t.cropping=="number"?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:typeof t.cropping[0]=="number"?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=t.dataFormat===void 0?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return this.dataFormat==="channelsFirst"?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return M(()=>{if(t=vt(t),this.dataFormat==="channelsLast"){let o=Im(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Im(o,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{let o=Im(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Im(o,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};ef.className="Cropping2D";X.registerClass(ef);var rf=class extends kt{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=t.size==null?this.DEFAULT_SIZE:t.size,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),this.interpolation=t.interpolation==null?"nearest":t.interpolation,U1(this.interpolation)}computeOutputShape(t){if(this.dataFormat==="channelsFirst"){let e=t[2]==null?null:this.size[0]*t[2],o=t[3]==null?null:this.size[1]*t[3];return[t[0],t[1],e,o]}else{let e=t[1]==null?null:this.size[0]*t[1],o=t[2]==null?null:this.size[1]*t[2];return[t[0],e,o,t[3]]}}call(t,e){return M(()=>{let o=vt(t),n=o.shape;if(this.dataFormat==="channelsFirst"){o=Nt(o,[0,2,3,1]);let s=this.size[0]*n[2],i=this.size[1]*n[3],a=this.interpolation==="nearest"?An.resizeNearestNeighbor(o,[s,i]):An.resizeBilinear(o,[s,i]);return Nt(a,[0,3,1,2])}else{let s=this.size[0]*n[1],i=this.size[1]*n[2];return this.interpolation==="nearest"?An.resizeNearestNeighbor(o,[s,i]):An.resizeBilinear(o,[s,i])}})}getConfig(){let t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}};rf.className="UpSampling2D";X.registerClass(rf);function XW(r,t,e=[1,1],o="valid",n,s){return M(()=>{n==null&&(n=Er()),ce(n);let i=of(r,n);if(r.rank!==4)throw new P(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);if(t.rank!==4)throw new P(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Sn(i,t,e,o==="same"?"same":"valid","NHWC",s),n==="channelsFirst"&&(i=Nt(i,[0,3,1,2])),i})}var nf=class extends _l{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=Kt(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=de(t.depthwiseConstraint),this.depthwiseRegularizer=Zt(t.depthwiseRegularizer)}build(t){if(t=Lt(t),t.length<4)throw new P(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);let e=this.dataFormat==="channelsFirst"?1:3;if(t[e]==null||t[e]<0)throw new P(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);let o=t[e],n=[this.kernelSize[0],this.kernelSize[1],o,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[o*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{t=vt(t);let o=XW(t,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(o=$r(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),o})}computeOutputShape(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Wr(e,this.kernelSize[0],this.padding,this.strides[0]),i=Wr(o,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[t[0],n,s,i]:[t[0],s,i,n]}getConfig(){let t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=ne(this.depthwiseInitializer),t.depthwiseRegularizer=Ht(this.depthwiseRegularizer),t.depthwiseConstraint=he(this.depthwiseRegularizer),t}};nf.className="DepthwiseConv2D";X.registerClass(nf);function b0(r,t,e,o){if(Array.isArray(r)){if(t!=null||e!=null)throw new P("When inputs is an array, neither initialState or constants should be provided");o!=null&&(e=r.slice(r.length-o,r.length),r=r.slice(0,r.length-o)),r.length>1&&(t=r.slice(1,r.length)),r=r[0]}function n(s){return s==null||Array.isArray(s)?s:[s]}return t=n(t),e=n(e),{inputs:r,initialState:t,constants:e}}function w0(r,t,e,o=!1,n,s,i=!1,a=!1){return M(()=>{let l=t.shape.length;if(l<3)throw new P(`Input should be at least 3D, but is ${l}D.`);let u=[1,0].concat(xr(2,l));if(t=Nt(t,u),s!=null)throw new gt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),n!=null&&(n=j(j(n,"bool"),"float32"),n.rank===l-1&&(n=Pe(n,-1)),n=Nt(n,u)),o&&(t=Me(t,0),n!=null&&(n=Me(n,0)));let c=[],p,m=e,f=t.shape[0],h=je(t),d;n!=null&&(d=je(n));for(let x=0;x<f;++x){let b=h[x],w=M(()=>r(b,m));if(n==null)p=w[0],m=w[1];else{let C=M(()=>{let I=d[x],$=tt(Ge(I),I),D=H(R(w[0],I),R(m[0],$)),F=m.map((O,L)=>H(R(w[1][L],I),R(O,$)));return{output:D,newStates:F}});p=C.output,m=C.newStates}a&&c.push(p)}let g;return a&&(g=Ae(c,1)),[p,g,m]})}var fo=class extends kt{constructor(t){super(t);let e;if(t.cell==null)throw new P("cell property is missing for the constructor of RNN.");if(Array.isArray(t.cell)?e=new yp({cells:t.cell}):e=t.cell,e.stateSize==null)throw new P("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=t.returnSequences==null?!1:t.returnSequences,this.returnState=t.returnState==null?!1:t.returnState,this.goBackwards=t.goBackwards==null?!1:t.goBackwards,this._stateful=t.stateful==null?!1:t.stateful,this.unroll=t.unroll==null?!1:t.unroll,this.supportsMasking=!0,this.inputSpec=[new Yt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return xr(0,t).map(e=>null)}else return this.states_}setStates(t){this.states_=t}computeOutputShape(t){lg(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);let o=e[0],n;if(this.returnSequences?n=[t[0],t[1],o]:n=[t[0],o],this.returnState){let s=[];for(let i of e)s.push([t[0],i]);return[n].concat(s)}else return n}computeMask(t,e){return M(()=>{Array.isArray(e)&&(e=e[0]);let o=this.returnSequences?e:null;if(this.returnState){let n=this.states.map(s=>null);return[o].concat(n)}else return o})}get states(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let o=0;o<t;++o)e.push(null);return e}else return this.states_}set states(t){this.states_=t}build(t){if(this.numConstants!=null)throw new gt("Constants support is not implemented in RNN yet.");lg(t)&&(t=t[0]),t=t;let o=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new Yt({shape:[o,null,...n]});let s=[t[0]].concat(t.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!y.arraysEqual(this.stateSpec.map(a=>a.shape[a.shape.length-1]),i))throw new P(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(a=>new Yt({shape:[null,a]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){M(()=>{if(!this.stateful)throw new Vr("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape[0];if(o==null)throw new P("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>oe([o,n])):this.states_=[oe([o,this.cell.stateSize])];else if(t==null)xt(this.states_),this.keptStates!=null&&(xt(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>oe([o,n])):this.states_[0]=oe([o,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new P(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e===!0?this.keptStates.push(this.states_.slice()):xt(this.states_);for(let n=0;n<this.states_.length;++n){let s=t[n],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,a=[o,i];if(!y.arraysEqual(s.shape,a))throw new P(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map(n=>ue(n.clone()))})}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=b0(t,o,n,this.numConstants);t=s.inputs,o=s.initialState,n=s.constants;let i=[],a=[];if(o!=null){e.initialState=o,i=i.concat(o),this.stateSpec=[];for(let u of o)this.stateSpec.push(new Yt({shape:u.shape}));a=a.concat(this.stateSpec)}if(n!=null&&(e.constants=n,i=i.concat(n),this.numConstants=n.length),i[0]instanceof br){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return M(()=>{let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;t=vt(t),s==null&&(this.stateful?s=this.states_:s=this.getInitialState(t));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new P(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let a={training:n},u=w0((h,d)=>{let g=this.cell.call([h].concat(d),a);return[g[0],g.slice(1)]},t,s,this.goBackwards,o,null,this.unroll,this.returnSequences),c=u[0],p=u[1],m=u[2];this.stateful&&this.resetStates(m,n);let f=this.returnSequences?p:c;return this.returnState?[f].concat(m):f})}getInitialState(t){return M(()=>{let e=oe(t.shape);return e=st(e,[1,2]),e=qs(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>o>1?sg(e,[1,o]):e):this.cell.stateSize>1?[sg(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){let t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(e.numConstants=this.numConstants);let o=this.cell.getConfig();return this.getClassName()===fo.className&&(e.cell={className:this.cell.getClassName(),config:o}),Object.assign({},o,t,e)}static fromConfig(t,e,o={}){let n=e.cell,s=Qr(n,o);return new t(Object.assign(e,{cell:s}))}};fo.className="RNN";X.registerClass(fo);var Aa=class extends kt{},gp=class extends Aa{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Ne(this.units,"units"),this.activation=en(t.activation==null?this.DEFAULT_ACTIVATION:t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Zt(t.kernelRegularizer),this.recurrentRegularizer=Zt(t.recurrentRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.kernelConstraint=de(t.kernelConstraint),this.recurrentConstraint=de(t.recurrentConstraint),this.biasConstraint=de(t.biasConstraint),this.dropout=Nl([1,Qo([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Nl([1,Qo([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Lt(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{if(t=t,t.length!==2)throw new P(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let o=t[1];t=t[0];let n=e.training==null?!1:e.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Ys({ones:()=>Ge(t),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Ys({ones:()=>Ge(o),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));let s,i=this.dropoutMask,a=this.recurrentDropoutMask;i!=null?s=Ro(R(t,i),this.kernel.read()):s=Ro(t,this.kernel.read()),this.bias!=null&&(s=$r(s,this.bias.read())),a!=null&&(o=R(o,a));let l=H(s,Ro(o,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:tn(this.activation),useBias:this.useBias,kernelInitializer:ne(this.kernelInitializer),recurrentInitializer:ne(this.recurrentInitializer),biasInitializer:ne(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),recurrentConstraint:he(this.recurrentConstraint),biasConstraint:he(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}};gp.className="SimpleRNNCell";X.registerClass(gp);var sf=class extends fo{constructor(t){t.cell=new gp(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return new t(e)}};sf.className="SimpleRNN";X.registerClass(sf);var xp=class extends Aa{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new P("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Ne(this.units,"units"),this.activation=en(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=en(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Zt(t.kernelRegularizer),this.recurrentRegularizer=Zt(t.recurrentRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.kernelConstraint=de(t.kernelConstraint),this.recurrentConstraint=de(t.recurrentConstraint),this.biasConstraint=de(t.biasConstraint),this.dropout=Nl([1,Qo([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Nl([1,Qo([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Lt(t);let e=t[t.length-1];this.kernel=this.addWeight("kernel",[e,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{if(t=t,t.length!==2)throw new P(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training==null?!1:e.training,n=t[1];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Ys({ones:()=>Ge(t),rate:this.dropout,training:o,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Ys({ones:()=>Ge(n),rate:this.recurrentDropout,training:o,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask,a,l,u;0<this.dropout&&this.dropout<1&&(t=R(t,s[0]));let c=Ro(t,this.kernel.read());this.useBias&&(c=$r(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=R(n,i[0]));let p=this.recurrentKernel.read(),[m,f]=Be(p,[2*this.units,this.units],p.rank-1),h=Ro(n,m),[d,g,x]=Be(c,3,c.rank-1),[b,w]=Be(h,2,h.rank-1);a=this.recurrentActivation.apply(H(d,b)),l=this.recurrentActivation.apply(H(g,w));let C=Ro(R(l,n),f);u=this.activation.apply(H(x,C));let I=H(R(a,n),R(H(1,Ft(a)),u));return[I,I]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:tn(this.activation),recurrentActivation:tn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ne(this.kernelInitializer),recurrentInitializer:ne(this.recurrentInitializer),biasInitializer:ne(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),recurrentConstraint:he(this.recurrentConstraint),biasConstraint:he(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}};xp.className="GRUCell";X.registerClass(xp);var af=class extends fo{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new xp(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};af.className="GRU";X.registerClass(af);var Da=class extends Aa{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Ne(this.units,"units"),this.activation=en(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=en(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Zt(t.kernelRegularizer),this.recurrentRegularizer=Zt(t.recurrentRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.kernelConstraint=de(t.kernelConstraint),this.recurrentConstraint=de(t.recurrentConstraint),this.biasConstraint=de(t.biasConstraint),this.dropout=Nl([1,Qo([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Nl([1,Qo([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;t=Lt(t);let o=t[t.length-1];this.kernel=this.addWeight("kernel",[o,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let n;if(this.useBias){if(this.unitForgetBias){let s=this.biasInitializer,i=this.units;n=new(e=class extends Dr{apply(l,u){let c=s.apply([i]),p=new $l().apply([i]),m=s.apply([i*2]);return s0(s0(c,p),m)}},e.className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return M(()=>{let o=e.training==null?!1:e.training;if(t=t,t.length!==3)throw new P(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let n=t[1],s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Ys({ones:()=>Ge(t),rate:this.dropout,training:o,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Ys({ones:()=>Ge(n),rate:this.recurrentDropout,training:o,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,a=this.recurrentDropoutMask,l,u,c,p;0<this.dropout&&this.dropout<1&&(t=R(t,i[0]));let m=Ro(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=R(n,a[0])),m=H(m,Ro(n,this.recurrentKernel.read())),this.useBias&&(m=$r(m,this.bias.read()));let[f,h,d,g]=Be(m,4,m.rank-1);l=this.recurrentActivation.apply(f),u=this.recurrentActivation.apply(h),c=H(R(u,s),R(l,this.activation.apply(d))),p=this.recurrentActivation.apply(g);let x=R(p,this.activation.apply(c));return[x,x,c]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:tn(this.activation),recurrentActivation:tn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ne(this.kernelInitializer),recurrentInitializer:ne(this.recurrentInitializer),biasInitializer:ne(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),recurrentConstraint:he(this.recurrentConstraint),biasConstraint:he(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}};Da.className="LSTMCell";X.registerClass(Da);var lf=class extends fo{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Da(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};lf.className="LSTM";X.registerClass(lf);var yp=class extends Aa{constructor(t){super(t),this.cells=t.cells}get stateSize(){let t=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return M(()=>{t=t;let o=t.slice(1),n=[];for(let a of this.cells.slice().reverse())Array.isArray(a.stateSize)?n.push(o.splice(0,a.stateSize.length)):n.push(o.splice(0,1));n.reverse();let s=[],i;for(let a=0;a<this.cells.length;++a){let l=this.cells[a];o=n[a],a===0?i=[t[0]].concat(o):i=[i[0]].concat(o),i=l.call(i,e),s.push(i.slice(1))}o=[];for(let a of s.slice().reverse())o.push(...a);return[i[0]].concat(o)})}build(t){lg(t)&&(t=t[0]),t=t;let e;this.cells.forEach((o,n)=>{Jo(`RNNCell_${n}`,()=>{o.build(t),Array.isArray(o.stateSize)?e=o.stateSize[0]:e=o.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){let t=super.getConfig(),e=s=>({className:s.getClassName(),config:s.getConfig()}),n={cells:this.cells.map(e)};return Object.assign({},t,n)}static fromConfig(t,e,o={}){let n=[];for(let s of e.cells)n.push(Qr(s,o));return new t({cells:n})}get trainableWeights(){if(!this.trainable)return[];let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.cells)e.push(...o.trainableWeights);return e.concat(t)}return t}getWeights(){let t=[];for(let e of this.cells)t.push(...e.weights);return _m(t)}setWeights(t){let e=[];for(let o of this.cells){let n=o.weights.length,s=t.splice(n);for(let i=0;i<o.weights.length;++i)e.push([o.weights[i],s[i]])}cp(e)}};yp.className="StackedRNNCells";X.registerClass(yp);function Ys(r){let{ones:t,rate:e,training:o=!1,count:n=1,dropoutFunc:s}=r,i=()=>s!=null?s(t(),e):ag(t(),e),a=()=>Ta(i,t,o);return!n||n<=1?ue(a().clone()):Array(n).fill(void 0).map(a).map(u=>ue(u.clone()))}var YW=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&t.indexOf(o)<0&&(e[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var n=0,o=Object.getOwnPropertySymbols(r);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(r,o[n])&&(e[o[n]]=r[o[n]]);return e};var qg=class extends fo{constructor(t){if(t.unroll)throw new gt("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new gt("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new Yt({ndim:5})]}call(t,e){return M(()=>{if(this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new P("ConvRNN2D cell does not support constants");let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return M(()=>{let{stateSize:e}=this.cell,o=t.shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)],i=oe(s);return Array.isArray(e)?Array(e.length).fill(i):[i]})}resetStates(t,e=!1){M(()=>{if(!this.stateful)throw new Vr("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)];if(o[0]==null)throw new P("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>oe(s)):this.states_=[oe(s)];else if(t==null)xt(this.states_),this.keptStates!=null&&(xt(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>oe(s)):this.states_[0]=oe(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new P(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):xt(this.states_);for(let a=0;a<this.states_.length;++a){let l=t[a],u=s;if(!y.arraysEqual(l.shape,u))throw new P(`State ${a} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>ue(a.clone()))})}computeSingleOutputShape(t){let{dataFormat:e,filters:o,kernelSize:n,padding:s,strides:i,dilationRate:a}=this.cell,l=e==="channelsFirst",u=t[l?3:2],c=t[l?4:3],p=Wr(u,n[0],s,i[0],a[0]),m=Wr(c,n[1],s,i[1],a[1]);return[...t.slice(0,2),...l?[o,p,m]:[p,m,o]]}};qg.className="ConvRNN2D";var bp=class extends Da{constructor(t){let{filters:e,kernelSize:o,strides:n,padding:s,dataFormat:i,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,Ne(this.filters,"filters"),this.kernelSize=Na(o,2,"kernelSize"),this.kernelSize.forEach(l=>Ne(l,"kernelSize")),this.strides=Na(n||1,2,"strides"),this.strides.forEach(l=>Ne(l,"strides")),this.padding=s||"valid",kr(this.padding),this.dataFormat=i||"channelsLast",ce(this.dataFormat),this.dilationRate=Na(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>Ne(l,"dilationRate"))}build(t){var e;t=Lt(t);let o=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[o]==null)throw new P(`The channel dimension of the input should be defined. Found ${t[o]}`);let n=t[o],s=4,i=this.kernelSize.concat([n,this.filters*s]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let a=this.kernelSize.concat([this.filters,this.filters*s]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){let u=this.biasInitializer,c=this.filters;l=new(e=class extends Dr{apply(m,f){let h=u.apply([c]),d=ze([c]),g=u.apply([c*2]);return tp([h,d,g])}},e.className="CustomInit",e)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*s],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return M(()=>{if(t.length!==3)throw new P(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training||!1,n=t[0],s=t[1],i=t[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Ys({ones:()=>Ge(n),rate:this.dropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=(ot,et,at)=>!et||!et[at]?ot:R(et[at],ot),c=u(n,l,0),p=u(n,l,1),m=u(n,l,2),f=u(n,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Ys({ones:()=>Ge(s),rate:this.recurrentDropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let h=this.recurrentDropoutMask,d=u(s,h,0),g=u(s,h,1),x=u(s,h,2),b=u(s,h,3),w=3,[C,I,$,D]=Be(this.kernel.read(),a,w),[F,O,L,B]=this.useBias?Be(this.bias.read(),a):[null,null,null,null];c=this.inputConv(c,C,F,this.padding),p=this.inputConv(p,I,O,this.padding),m=this.inputConv(m,$,L,this.padding),f=this.inputConv(f,D,B,this.padding);let[V,G,U,W]=Be(this.recurrentKernel.read(),a,w);d=this.recurrentConv(d,V),g=this.recurrentConv(g,G),x=this.recurrentConv(x,U),b=this.recurrentConv(b,W);let K=this.recurrentActivation.apply(H(c,d)),Z=this.recurrentActivation.apply(H(p,g)),q=H(R(Z,i),R(K,this.activation.apply(H(m,x)))),J=R(this.recurrentActivation.apply(H(f,b)),this.activation.apply(q));return[J,J,q]})}getConfig(){let t=super.getConfig(),{units:e}=t,o=YW(t,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},o,n)}inputConv(t,e,o,n){let s=zr(t,e,this.strides,n||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return o?$r(s,o,this.dataFormat):s}recurrentConv(t,e){return zr(t,e,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}};bp.className="ConvLSTM2DCell";X.registerClass(bp);var uf=class extends qg{constructor(t){let e=new bp(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}};uf.className="ConvLSTM2D";X.registerClass(uf);var wp=class extends kt{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(this.noiseShape==null)return this.noiseShape;let e=t.shape,o=[];for(let n=0;n<this.noiseShape.length;++n)o.push(this.noiseShape[n]==null?e[n]:this.noiseShape[n]);return o}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t);if(0<this.rate&&this.rate<1){let n=e.training==null?!1:e.training,s=this.getNoiseShape(o);return Ta(()=>ag(o,this.rate,s,this.seed),()=>o,n)}return t})}getConfig(){let t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}};wp.className="Dropout";X.registerClass(wp);var cf=class extends wp{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){let e=t.shape;return[e[0],1,e[2]]}};cf.className="SpatialDropout1D";X.registerClass(cf);var pf=class extends kt{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.batchInputShape==null&&t.inputShape==null&&t.inputDim!=null){let e=null;t.batchSize!=null&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Ne(this.units,"units"),this.activation=en(t.activation),t.useBias!=null&&(this.useBias=t.useBias),this.kernelInitializer=Kt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Kt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=de(t.kernelConstraint),this.biasConstraint=de(t.biasConstraint),this.kernelRegularizer=Zt(t.kernelRegularizer),this.biasRegularizer=Zt(t.biasRegularizer),this.activityRegularizer=Zt(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){t=Lt(t);let e=t[t.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){t=Lt(t);let e=t.slice();return e[e.length-1]=this.units,e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t),n=Qd(this.activation.getClassName()),s;return n!=null?s=Ro(o,this.kernel.read(),n,this.bias?this.bias.read():null):(s=Ro(o,this.kernel.read()),this.bias!=null&&(s=$r(s,this.bias.read())),this.activation!=null&&(s=this.activation.apply(s))),s})}getConfig(){let t={units:this.units,activation:tn(this.activation),useBias:this.useBias,kernelInitializer:ne(this.kernelInitializer),biasInitializer:ne(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:he(this.kernelConstraint),biasConstraint:he(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}};pf.className="Dense";X.registerClass(pf);var mf=class extends kt{constructor(t){t=t||{},super(t),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Lt(t);for(let e of t.slice(1))if(e==null)throw new P(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],Do(t,1)]}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t);if(this.dataFormat==="channelsFirst"&&o.rank>1){let n=[0];for(let s=2;s<o.rank;++s)n.push(s);n.push(1),o=Nt(o,n)}return X1(o)})}getConfig(){let t={};this.dataFormat!=null&&(t.dataFormat=this.dataFormat);let e=super.getConfig();return Object.assign(t,e),t}};mf.className="Flatten";X.registerClass(mf);var ff=class extends kt{constructor(t){super(t),this.supportsMasking=!0,this.activation=en(t.activation)}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t);return this.activation.apply(o)})}getConfig(){let t={activation:tn(this.activation)},e=super.getConfig();return Object.assign(t,e),t}};ff.className="Activation";X.registerClass(ff);var hf=class extends kt{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return M(()=>(t=vt(t),K1(t,this.n)))}getConfig(){let t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}};hf.className="RepeatVector";X.registerClass(hf);var df=class extends kt{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||t==null}fixUnknownDimension(t,e){let o="Total size of new array must be unchanged.",n=e.slice(),s=1,i=null;for(let l=0;l<n.length;++l){let u=n[l];if(this.isUnknown(u))if(i===null)i=l;else throw new P("Can only specifiy one unknown dimension.");else s*=u}let a=Do(t);if(i!==null){if(s===0||a%s!==0)throw new P(o);n[i]=a/s}else if(a!==s)throw new P(o);return n}computeOutputShape(t){let e=!1;for(let o=0;o<t.length;++o)if(this.isUnknown(t[o])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t),n=o.shape,s=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return A(o,s)})}getConfig(){let t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}};df.className="Reshape";X.registerClass(df);var gf=class extends kt{constructor(t){if(super(t),t.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);let e=xr(1,t.dims.length+1);if(!y.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Yt({ndim:this.dims.length+1})]}computeOutputShape(t){t=Lt(t);let e=t.slice();return this.dims.forEach((o,n)=>{e[n+1]=t[o]}),e}call(t,e){return Nt(vt(t),this.dimsIncludingBatch)}getConfig(){let t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}};gf.className="Permute";X.registerClass(gf);var xf=class extends kt{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null?this.maskValue=t.maskValue==null?0:t.maskValue:this.maskValue=0}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){let o=vt(t),n=-1;return cl(Yo(o,this.maskValue),n)}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t),n=-1,s=!0,i=cl(Yo(o,this.maskValue),n,s);return R(o,j(i,o.dtype))})}};xf.className="Masking";X.registerClass(xf);var yf=class extends kt{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",t.batchInputShape==null&&t.inputShape==null){let e=null;t.batchSize!=null&&(e=t.batchSize),t.inputLength==null?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Xt(t.inputLength))}this.inputDim=t.inputDim,Ne(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Ne(this.outputDim,"outputDim"),this.embeddingsInitializer=Kt(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Zt(t.embeddingsRegularizer),this.activityRegularizer=Zt(t.activityRegularizer),this.embeddingsConstraint=de(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return M(()=>this.maskZero?(t=vt(t),Yo(t,dt(t))):null)}computeOutputShape(t){if(t=Lt(t),this.inputLength==null)return[...t,this.outputDim];let e=Xt(this.inputLength);if(e.length!==t.length-1)throw new P(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let o=0;for(let n=0;n<e.length;++n){let s=e[n],i=t[n+1];if(s!=null&&i!=null&&s!==i)throw new P(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);s==null&&(e[o]=i),o++}}return[t[0],...e,this.outputDim]}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t);o.dtype!=="int32"&&(o=kl(o,"int32"));let n=ig(this.embeddings.read(),A(o,[o.size]));return A(n,Lt(this.computeOutputShape(o.shape)))})}getConfig(){let t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ne(this.embeddingsInitializer),embeddingsRegularizer:Ht(this.embeddingsRegularizer),activityRegularizer:Ht(this.activityRegularizer),embeddingsConstraint:he(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}};yf.className="Embedding";X.registerClass(yf);var Zs=class extends kt{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new gt}computeElementwiseOpOutputShape(t,e){if(t==null||e==null)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(e.length===0)return t;let o=t.slice(0,t.length-e.length);for(let n=0;n<e.length;++n){let s=t[t.length-e.length+n],i=e[n];if(s==null||i==null||s<0||i<0)o.push(null);else if(s===1)o.push(i);else if(i===1)o.push(s);else{if(s!==i)throw new P("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));o.push(s)}}return o}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Lt(t)]),t=t,t.length<2)throw new P(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(let s of t)s!=null&&s[0]!==null&&e.push(s[0]);if(e=Ao(e),e.length>1)throw new P(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let o=t[0]==null?null:t[0].slice(1);for(let s=1;s<t.length;++s){let i=t[s]==null?null:t[s].slice(1);o=this.computeElementwiseOpOutputShape(o,i)}let n=t.map(s=>s.length);t.indexOf(null)===-1&&Ao(n).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return M(()=>{if(t=t,this.reshapeRequired){let o=[],n=t.map(s=>s.rank);if(n.indexOf(null)===-1){let s=Qo(n);for(let i of t){let a=i.rank;for(let l=0;l<s-a;++l)i=qs(i,1);o.push(i)}return this.mergeFunction(o)}else{let s=!1;for(let l of t){let u=l.rank;if(u==null){let c=l.shape,p=c[0],m=c.slice(1).concat([p]),f=A(l,[p].concat(Do(c.slice(1))));f=Nt(f,[1,0]),f=A(f,m),o.push(f),s=!0}else if(u>1){let c=xr(1,u).concat([0]);o.push(Nt(l,c)),s=!0}else o.push(l)}let i=this.mergeFunction(o),a=i.rank;if(s){if(a==null){let l=i.shape,u=l.length,c=l[u-1],p=[c].concat(l.slice(0,l.length-1));i=A(Nt(A(i,[-1,c]),[1,0]),p)}else if(a>1){let l=[a-1].concat(xr(0,a-1));i=Nt(i,l)}}return i}}else return this.mergeFunction(t)})}computeOutputShape(t){t=t;let e;t[0]==null?e=null:e=t[0].slice(1);for(let n=1;n<t.length;++n){let s=t[n]==null?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let o=[];for(let n of t)n!=null&&n[0]!==null&&o.push(n[0]);return o=Ao(o),o.length===1?e=o.concat(e):e=[null].concat(e),e}computeMask(t,e){return M(()=>{if(e==null)return null;if(!Array.isArray(e))throw new P("`mask` should be an Array");if(!Array.isArray(t))throw new P("`inputs` should be an Array");if(e.length!==t.length)throw new P(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(n=>n==null))return null;e=e.map(n=>n==null?n:Pe(n,0));let o=e[0];for(let n=1;n<e.length-1;++n)o=lr(o,e[n]);return o})}},wf=class extends Zs{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=H(e,t[o]);return e})}};wf.className="Add";X.registerClass(wf);var Cf=class extends Zs{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=R(e,t[o]);return e})}};Cf.className="Multiply";X.registerClass(Cf);var vf=class extends Zs{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=H(e,t[o]);return R(1/t.length,e)})}};vf.className="Average";X.registerClass(vf);var Sf=class extends Zs{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=Br(e,t[o]);return e})}};Sf.className="Maximum";X.registerClass(Sf);var Tf=class extends Zs{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=En(e,t[o]);return e})}};Tf.className="Minimum";X.registerClass(Tf);var If=class extends Zs{constructor(t){super(t),this.DEFAULT_AXIS=-1,t==null&&(t={}),this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!(Array.isArray(t)&&Array.isArray(t[0]))||t.length===1)throw new P("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(let n of t)if(n!=null){e=!1;break}if(e)return;let o=[];for(let n=0;n<t.length;++n){let s=t[n].slice();s.splice(this.axis,1);let i=!1;for(let a of o)if(y.arraysEqual(a,s)){i=!0;break}i||o.push(s)}if(o.length>1)throw new P("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return M(()=>tp(t,this.axis))}computeOutputShape(t){if(!(Array.isArray(t)&&Array.isArray(t[0])))throw new P("A `Concatenate` layer should be called on a list of inputs.");let e=t,o=e[0].slice(),n=this.axis<0?o.length+this.axis:this.axis;for(let s of e.slice(1)){if(o[n]==null||s[n]==null){o[n]=null;break}o[n]+=s[n]}return o}computeMask(t,e){if(e==null)return null;if(!Array.isArray(e))throw new P("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new P("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new P(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return M(()=>{let o=!0;if(e.forEach(i=>{if(i!=null){o=!1;return}}),o)return null;let n=[];for(let i=0;i<t.length;++i)e[i]==null?n.push(j(Ge(t[i]),"bool")):e[i].rank<t[i].rank?n.push(Pe(e[i],-1)):n.push(e[i]);let s=Bt(n,this.axis);return wc(s,-1,!1)})}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};If.className="Concatenate";X.registerClass(If);function bf(r,t){for(;r<0;)r+=t;return r}function ZW(r,t,e){if(r.shape.length>3||t.shape.length>3)throw new gt("batchDot is not implemented for tensors of 4D or higher rank yet");if(y.assert(r.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`),y.assert(r.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),typeof e=="number"&&(e=[e,e]),r.dtype==="complex64"||t.dtype==="complex64")throw new gt("batchDot is not implemented for complex64-type Tensors yet.");let o=r.shape.length,n=t.shape.length;e==null&&(e=[o-1,n-2]);let s=e;return M(()=>{let i;if(o>n){i=o-n;let l=[];for(let u=0;u<i;++u)l.push(1);t=A(t,t.shape.concat(l))}else if(n>o){i=n-o;let l=[];for(let u=0;u<i;++u)l.push(1);r=A(r,r.shape.concat(l))}else i=0;let a;if(r.shape.length===2&&t.shape.length===2)s[0]===s[1]?a=st(R(r,t),s[0]):a=st(R(Nt(r,[1,0]),t),s[1]);else{let l=s[0]!==r.shape.length-1,u=s[1]===t.shape.length-1;a=Dt(r,t,l,u)}if(i>0){let l;o>n?l=o+n-3:l=o-1;let u=[];for(let c=l;c<l+i;++c)u.push(c);a=Jr(a,u)}return a.shape.length===1&&(a=Pe(a,1)),a})}var Nf=class extends Zs{constructor(t){super(t),this.axes=t.axes,this.normalize=t.normalize==null?!1:t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0],o=t[1];if(e.length>3||o.length>3)throw new gt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);if(e[n[0]]!==o[n[1]])throw new P(`Dimension incompatibility: ${e[n[0]]} !== ${o[n[1]]}`)}mergeFunction(t){if(t.length!==2)throw new P(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e=t[0],o=t[1],n;return Array.isArray(this.axes)?n=this.axes.map((s,i)=>bf(s,t[i].shape.length)):n=[bf(this.axes,e.shape.length),bf(this.axes,o.shape.length)],this.normalize&&(e=Mm(e,n[0]),o=Mm(o,n[1])),ZW(e,o,n)}interpretAxes(t,e){let o;return Array.isArray(this.axes)?o=this.axes:o=[bf(this.axes,t.length),bf(this.axes,e.length)],o}computeOutputShape(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0].slice(),o=t[1].slice();if(e.length>3||o.length>3)throw new gt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);e.splice(n[0],1),o.splice(n[1],1),o.splice(0,1);let s=e.concat(o);return s.length===1&&s.push(1),s}computeMask(t,e){return null}getConfig(){let t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}};Nf.className="Dot";X.registerClass(Nf);var kf=class extends kt{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t);return Ta(()=>H(ep(o.shape,0,this.stddev),o),()=>o,e.training||!1)})}};kf.className="GaussianNoise";X.registerClass(kf);var Ef=class extends kt{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=vt(t);return this.rate>0&&this.rate<1?Ta(()=>{let s=Math.sqrt(this.rate/(1-this.rate));return R(o,ep(o.shape,1,s))},()=>o,e.training||!1):o})}};Ef.className="GaussianDropout";X.registerClass(Ef);var $f=class extends kt{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||vt(t).shape}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return M(()=>{if(this.rate<1&&this.rate>0){let o=this._getNoiseShape(t);return Ta(()=>{let s=vt(t),i=1.6732632423543772,a=1.0507009873554805,l=-i*a,u=Yr($n(o),this.rate);u=kl(u,"float32");let c=((1-this.rate)*(1+this.rate*l**2))**-.5,p=-c*l*this.rate,m=H(R(s,u),R(H(u,-1),l));return H(R(m,c),p)},()=>vt(t),e.training||!1)}return t})}};$f.className="AlphaDropout";X.registerClass($f);function Af(r,t,e,o,n,s=.001){let i;if(r.rank===2)i=Yh(r,t,e,o,n,s);else if(r.rank===3)i=Zh(r,t,e,o,n,s);else if(r.rank===4)i=Jh(r,t,e,o,n,s);else throw new gt(`batchNormalization is not implemented for array of rank ${r.rank} yet`);return i}function JW(r,t,e,o,n=.001){return M(()=>{let s=gl(r,o),i=s.mean,a=s.variance;return[Af(r,i,a,e,t,n),i,a]})}function QW(r,t,e,o,n=.001){return M(()=>{let s=gl(r,o),i=s.mean,a=s.variance,l=[];for(let h of xr(0,r.rank))o.indexOf(h)!==-1?l.push(1):l.push(r.shape[h]);let u=A(i,l),c=A(a,l),p=t==null?null:A(t,l),m=e==null?null:A(e,l);return[Af(r,u,c,m,p,n),i,a]})}function tU(r,t,e,o,n=.001){return y.arraysEqual(o.slice().sort(),xr(0,r.rank-1))?JW(r,t,e,o,n):QW(r,t,e,o,n)}var Df=class extends kt{constructor(t){t==null&&(t={}),super(t),this.supportsMasking=!0,this.axis=t.axis==null?-1:t.axis,this.momentum=t.momentum==null?.99:t.momentum,this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=Kt(t.betaInitializer||"zeros"),this.gammaInitializer=Kt(t.gammaInitializer||"ones"),this.movingMeanInitializer=Kt(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Kt(t.movingVarianceInitializer||"ones"),this.betaConstraint=de(t.betaConstraint),this.gammaConstraint=de(t.gammaConstraint),this.betaRegularizer=Zt(t.betaRegularizer),this.gammaRegularizer=Zt(t.gammaRegularizer)}build(t){t=Lt(t);let e=this.axis>=0?this.axis:this.axis+t.length,o=t[e];if(o==null)throw new P(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new Yt({ndim:t.length,axes:{[e]:o}})];let n=[o];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return M(()=>{let o=e.training==null?!1:e.training,n=vt(t),s=n.shape,i=s.length,a=xr(0,i),l=this.axis>=0?this.axis:this.axis+i;a.splice(l,1);let u=Eo(1,i);u[l]=s[l];let c=a.slice();c.sort();let p=!y.arraysEqual(c,xr(0,i).slice(0,i-1)),m=()=>{if(p){let b=A(this.movingMean.read(),u),w=A(this.movingVariance.read(),u),C=this.center?A(this.beta.read(),u):null,I=this.scale?A(this.gamma.read(),u):null;return Af(n,b,w,C,I,this.epsilon)}else return Af(n,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!o)return m();let[f,h,d]=tU(n,this.gamma.read(),this.beta.read(),a,this.epsilon),g=(b,w,C)=>{M(()=>{let I=1-C,$=b.read(),D=R(tt($,w),I);b.write(tt($,D))})};return(()=>{g(this.movingMean,h,this.momentum),g(this.movingVariance,d,this.momentum)})(),f})}getConfig(){let t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ne(this.betaInitializer),gammaInitializer:ne(this.gammaInitializer),movingMeanInitializer:ne(this.movingMeanInitializer),movingVarianceInitializer:ne(this.movingVarianceInitializer),betaRegularizer:Ht(this.betaRegularizer),gammaRegularizer:Ht(this.gammaRegularizer),betaConstraint:he(this.betaConstraint),gammaConstraint:he(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}};Df.className="BatchNormalization";X.registerClass(Df);var Rf=class extends kt{constructor(t){if(t==null&&(t={}),super(t),this.axis=t.axis==null?-1:t.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=Kt(t.betaInitializer||"zeros"),this.gammaInitializer=Kt(t.gammaInitializer||"ones"),this.betaRegularizer=Zt(t.betaRegularizer),this.gammaRegularizer=Zt(t.gammaRegularizer),this.supportsMasking=!0}build(t){t=Lt(t);let e=t.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=e);for(let s of this.axis)if(s<0||s>=e)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==Ao(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);let o=this.axis.map(s=>t[s]),n=!0;this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,n):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,n):this.beta=null,this.built=!0}call(t,e){let o=vt(t),n=o.shape,s=n.length;return M(()=>{let{mean:a,variance:l}=gl(o,this.axis,!0),u=Eo(1,s);for(let d of this.axis)u[d]=n[d];let c=d=>d!=null&&d.shape.length!==s?A(d,u):d,p=this.scale?c(this.gamma.read()):null,m=this.center?c(this.beta.read()):null,f=[],h=[];for(let d=0;d<s;++d)this.axis.indexOf(d)!==-1?(f.push(n[d]),h.push(1)):(f.push(1),h.push(n[d]));return a=er(a,f),l=er(l,f),p!=null&&(p=er(p,h)),m!=null&&(m=er(m,h)),Af(o,a,l,m,p,this.epsilon)})}getConfig(){let t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ne(this.betaInitializer),gammaInitializer:ne(this.gammaInitializer),betaRegularizer:Ht(this.betaRegularizer),gammaRegularizer:Ht(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}};Rf.className="LayerNormalization";X.registerClass(Rf);function eU(r,t,e){return M(()=>{if(r.rank!==4)throw new P(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);if(t==null&&(t=[[1,1],[1,1]]),t.length!==2||t[0].length!==2||t[1].length!==2)throw new P("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(e==null&&(e=Er()),e!=="channelsLast"&&e!=="channelsFirst")throw new P(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let o;return e==="channelsFirst"?o=[[0,0],[0,0],t[0],t[1]]:o=[[0,0],t[0],t[1],[0,0]],Nr(r,o)})}var Ff=class extends kt{constructor(t){if(t==null&&(t={}),super(t),this.dataFormat=t.dataFormat==null?Er():t.dataFormat,t.padding==null)this.padding=[[1,1],[1,1]];else if(typeof t.padding=="number")this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,t.padding.length!==2)throw new P(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,o;if(typeof t.padding[0]=="number")e=[t.padding[0],t.padding[0]],o=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,t.padding[0].length!==2)throw new P(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],t.padding[1].length!==2)throw new P(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);o=t.padding[1]}this.padding=[e,o]}this.inputSpec=[new Yt({ndim:4})]}computeOutputShape(t){t=Lt(t);let e,o;return this.dataFormat==="channelsFirst"?(t[2]!=null&&t[2]>=0?e=t[2]+this.padding[0][0]+this.padding[0][1]:e=null,t[3]!=null&&t[3]>=0?o=t[3]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],t[1],e,o]):(t[1]!=null&&t[1]>=0?e=t[1]+this.padding[0][0]+this.padding[0][1]:e=null,t[2]!=null&&t[2]>=0?o=t[2]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],e,o,t[3]])}call(t,e){return M(()=>eU(vt(t),this.padding,this.dataFormat))}getConfig(){let t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};Ff.className="ZeroPadding2D";X.registerClass(Ff);function Jg(r,t,e,o,n,s){return M(()=>{ce(n),e0(s),kr(o),e==null&&(e=[1,1]),o==null&&(o="valid"),n==null&&(n=Er()),s==null&&(s="max"),r=of(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=ha(r,t,e,a):i=la(r,t,e,a),n==="channelsFirst"&&(i=Nt(i,[0,3,1,2])),i})}function Ak(r,t,e,o,n,s){return M(()=>{ce(n),e0(s),kr(o),e==null&&(e=[1,1,1]),o==null&&(o="valid"),n==null&&(n=Er()),s==null&&(s="max"),r=y0(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=vd(r,t,e,a):i=Xh(r,t,e,a),n==="channelsFirst"&&(i=Nt(i,[0,4,1,2,3])),i})}var Kg=class extends kt{constructor(t){if(t.poolSize==null&&(t.poolSize=2),super(t),typeof t.poolSize=="number")this.poolSize=[t.poolSize];else if(Array.isArray(t.poolSize)&&t.poolSize.length===1&&typeof t.poolSize[0]=="number")this.poolSize=t.poolSize;else throw new P(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);if(Ne(this.poolSize,"poolSize"),t.strides==null)this.strides=this.poolSize;else if(typeof t.strides=="number")this.strides=[t.strides];else if(Array.isArray(t.strides)&&t.strides.length===1&&typeof t.strides[0]=="number")this.strides=t.strides;else throw new P(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);Ne(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,kr(this.padding),this.inputSpec=[new Yt({ndim:3})]}computeOutputShape(t){t=Lt(t);let e=Wr(t[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return M(()=>{this.invokeCallHook(t,e),t=qs(vt(t),2);let o=this.poolingFunction(vt(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Jr(o,[2])})}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}},_f=class extends Kg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),kr(n),Jg(t,e,o,n,s,"max")}};_f.className="MaxPooling1D";X.registerClass(_f);var Of=class extends Kg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),kr(n),Jg(t,e,o,n,s,"avg")}};Of.className="AveragePooling1D";X.registerClass(Of);var jg=class extends kt{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==2)throw new P(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];Ne(this.poolSize,"poolSize"),Ne(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),kr(this.padding),this.inputSpec=[new Yt({ndim:4})]}computeOutputShape(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2];return e=Wr(e,this.poolSize[0],this.padding,this.strides[0]),o=Wr(o,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o]:[t[0],e,o,t[3]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(vt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Lf=class extends jg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),kr(n),Jg(t,e,o,n,s,"max")}};Lf.className="MaxPooling2D";X.registerClass(Lf);var Pf=class extends jg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),kr(n),Jg(t,e,o,n,s,"avg")}};Pf.className="AveragePooling2D";X.registerClass(Pf);var Xg=class extends kt{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==3)throw new P(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Ne(this.poolSize,"poolSize"),Ne(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),kr(this.padding),this.inputSpec=[new Yt({ndim:5})]}computeOutputShape(t){t=Lt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[4]:t[3];return e=Wr(e,this.poolSize[0],this.padding,this.strides[0]),o=Wr(o,this.poolSize[1],this.padding,this.strides[1]),n=Wr(n,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o,n]:[t[0],e,o,n,t[4]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(vt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},zf=class extends Xg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),kr(n),Ak(t,e,o,n,s,"max")}};zf.className="MaxPooling3D";X.registerClass(zf);var Mf=class extends Xg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),kr(n),Ak(t,e,o,n,s,"avg")}};Mf.className="AveragePooling3D";X.registerClass(Mf);var Yg=class extends kt{constructor(t){super(t),this.inputSpec=[new Yt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new gt}},Bf=class extends Yg{constructor(t){super(t||{})}call(t,e){return M(()=>{let o=vt(t);return re(o,1)})}};Bf.className="GlobalAveragePooling1D";X.registerClass(Bf);var Vf=class extends Yg{constructor(t){super(t||{})}call(t,e){return M(()=>{let o=vt(t);return ar(o,1)})}};Vf.className="GlobalMaxPooling1D";X.registerClass(Vf);var Zg=class extends kt{constructor(t){super(t),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),this.inputSpec=[new Yt({ndim:4})]}computeOutputShape(t){return t=t,this.dataFormat==="channelsLast"?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new gt}getConfig(){let t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Gf=class extends Zg{call(t,e){return M(()=>{let o=vt(t);return this.dataFormat==="channelsLast"?re(o,[1,2]):re(o,[2,3])})}};Gf.className="GlobalAveragePooling2D";X.registerClass(Gf);var Wf=class extends Zg{call(t,e){return M(()=>{let o=vt(t);return this.dataFormat==="channelsLast"?ar(o,[1,2]):ar(o,[2,3])})}};Wf.className="GlobalMaxPooling2D";X.registerClass(Wf);var Qg=class extends kt{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(t){this.layer!=null&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){let t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,o={}){let n=e.layer,s=Qr(n,o);delete e.layer;let i={layer:s};return Object.assign(i,e),new t(i)}},Uf=class extends Qg{constructor(t){super(t),this.supportsMasking=!0}build(t){if(t=Lt(t),t.length<3)throw new P(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];let e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){t=Lt(t);let e=[t[0]].concat(t.slice(2)),o=this.layer.computeOutputShape(e),n=t[1];return[o[0],n].concat(o.slice(1))}call(t,e){return M(()=>(t=vt(t),w0((i,a)=>[vt(this.layer.call(i,e)),[]],t,[],!1,null,null,!1,!0)[1]))}};Uf.className="TimeDistributed";X.registerClass(Uf);function rU(r){_n(G1,"BidirectionalMergeMode",r)}var oU="concat",Hf=class extends Qg{constructor(t){super(t);let e=t.layer.getConfig(),o={};o.className=t.layer.getClassName(),o.config=e,this.forwardLayer=Qr(o),e.goBackwards=e.goBackwards!==!0;let n={};if(n.className=t.layer.getClassName(),n.config=e,this.backwardLayer=Qr(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=t.mergeMode===void 0?oU:t.mergeMode,rU(this.mergeMode),t.weights)throw new gt("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,this.forwardLayer!=null&&(this.forwardLayer.trainable=t),this.backwardLayer!=null&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){let e=t.length,o=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,o)),this.backwardLayer.setWeights(t.slice(o))}computeOutputShape(t){let e=this.forwardLayer.computeOutputShape(t);Array.isArray(e)&&Array.isArray(e[0])||(e=[e]),e=e;let o,n,s;return this.returnState&&(s=e.slice(1)),o=e[0],o=o,this.mergeMode==="concat"?(o[o.length-1]*=2,n=[o]):this.mergeMode==null?n=[o,o.slice()]:n=[o],this.returnState?this.mergeMode==null?n.concat(s).concat(s.slice()):[o].concat(s).concat(s.slice()):Xe(n)}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=b0(t,o,n,this.numConstants);if(t=s.inputs,o=s.initialState,n=s.constants,Array.isArray(t)&&(o=t.slice(1),t=t[0]),(o==null||o.length===0)&&n==null)return super.apply(t,e);let i=[],a=[];if(o!=null){let u=o.length;if(u%2>0)throw new P("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=o,i.push(...o);let c=o.map(p=>new Yt({shape:p.shape}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),a.push(...c)}if(n!=null)throw new gt("Support for constants in Bidirectional layers is not implemented yet.");let l=i[0]instanceof br;for(let u of i)if(u instanceof br!==l)throw new P("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return M(()=>{let o=e.initialState,n,s;if(o==null)n=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{let l=o.slice(0,o.length/2),u=o.slice(o.length/2);n=this.forwardLayer.call(t,Object.assign(e,{initialState:l})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:u}))}let i;this.returnState&&(Array.isArray(n)&&(i=n.slice(1).concat(s.slice(1))),n=n[0],s=s[0]),this.returnSequences&&(s=Me(s,1));let a;return this.mergeMode==="concat"?a=tp([n,s]):this.mergeMode==="sum"?a=H(n,s):this.mergeMode==="ave"?a=R(.5,H(n,s)):this.mergeMode==="mul"?a=R(n,s):this.mergeMode==null&&(a=[n,s]),this.returnState?this.mergeMode==null?a.concat(i):[a].concat(i):a})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Jo(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),Jo(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){Array.isArray(e)&&(e=e[0]);let o;if(this.returnSequences?this.mergeMode==null?o=[e,e]:o=e:this.mergeMode==null?o=[null,null]:o=null,this.returnState){let s=this.forwardLayer.states.map(i=>null);return Array.isArray(o)?o.concat(s).concat(s):[o].concat(s).concat(s)}else return o}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(t),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){let t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){let o=Qr(e.layer);if(delete e.layer,e.numConstants!=null)throw new gt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");let n=e;return n.layer=o,new t(n)}};Hf.className="Bidirectional";X.registerClass(Hf);var uU=z();uU.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var ho;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(ho||(ho={}));var Dk;(function(r){let t;(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(t=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(Dk||(Dk={}));var pU={};function tx(r){return pU[r]}function v(r,t,e,o,n){let s=t.inputParams[r];if(s&&s.inputIndexStart!==void 0){let a=s.inputIndexStart,l=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?a+1:s.inputIndexEnd;if(s.type==="tensor")return We(t.inputNames[s.inputIndexStart],e,o,n);if(s.type==="tensors")return t.inputNames.slice(a,l).map(m=>We(m,e,o,n));let u=We(t.inputNames.slice(a)[0],e,o,n),c=u.dataSync();return s.type==="number"?c[0]:y.toNestedArray(u.shape,c)}let i=t.attrParams[r];return i&&i.value}function We(r,t,e,o){let[n,s]=Rr(r);if(o!=null){let a=o.getHashTableHandleByName(n);if(a!=null)return a}let i=e.currentContextIds.find(a=>!!t[ex(n,a)]);return i!==void 0?t[ex(n,i)][s]:void 0}function Rk(r,t,e){return t[ex(r,e.currentContextId)]}function Lo(r,t){let[e,o,n]=Rr(r);return[ex(e,t&&t.currentContextId),o,n]}function ex(r,t){return t?`${r}-${t}`:r}function Rr(r){let t=r.split(":");if(t.length===1)return[r,0,void 0];let e=t[0],o=t.length===3?t[1]:void 0,n=Number(t[t.length-1]);return[e,n,o]}function qf(r,t,e){let o=v("pad",r,t,e);if(o==="explicit"){o=v("explicitPaddings",r,t,e);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function on(r){return r.kept?r:Tr(r)}var C0={};qt(C0,{json:()=>mU});var mU=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var v0={};qt(v0,{json:()=>fU});var fU=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var S0={};qt(S0,{json:()=>hU});var hU=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var T0={};qt(T0,{json:()=>dU});var dU=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var I0={};qt(I0,{json:()=>gU});var gU=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var N0={};qt(N0,{json:()=>xU});var xU=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var k0={};qt(k0,{json:()=>yU});var yU=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var E0={};qt(E0,{json:()=>bU});var bU=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var $0={};qt($0,{json:()=>wU});var wU=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var A0={};qt(A0,{json:()=>CU});var CU=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var D0={};qt(D0,{json:()=>vU});var vU=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var R0={};qt(R0,{json:()=>SU});var SU=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var F0={};qt(F0,{json:()=>TU});var TU=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var _0={};qt(_0,{json:()=>IU});var IU=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var O0={};qt(O0,{json:()=>NU});var NU=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var L0={};qt(L0,{json:()=>kU});var kU=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var P0={};qt(P0,{json:()=>EU});var EU=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var z0={};qt(z0,{json:()=>$U});var $U=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var M0={};qt(M0,{json:()=>AU});var AU=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Kf=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let t=[C0,v0,S0,T0,I0,N0,k0,E0,$0,A0,D0,R0,F0,_0,O0,L0,P0,z0,M0],e=[].concat(...t.map(o=>o.json));this.opMappers=e.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(t,e={}){let o=t.node,n=[],s=[],i=[],a=o.reduce((d,g)=>(d[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?n.push(d[g.name]):g.op==="Const"?s.push(d[g.name]):(g.input==null||g.input.length===0)&&i.push(d[g.name]),d),{}),l=[],u=[],c={},p={};e!=null&&(c=this.mapSignatureEntries(e.inputs),p=this.mapSignatureEntries(e.outputs));let m=Object.keys(a);m.forEach(d=>{let g=a[d];g.inputNames.forEach((x,b)=>{let[w,,C]=Lo(x),I=a[w];if(I.outputs!=null){let $=I.outputs.indexOf(C);if($!==-1){let D=`${w}:${$}`;g.inputNames[b]=D}}g.inputs.push(I),I.children.push(g)})}),Object.keys(p).length===0?m.forEach(d=>{let g=a[d];g.children.length===0&&u.push(g)}):Object.keys(p).forEach(d=>{let[g]=Lo(d),x=a[g];x!=null&&(x.signatureKey=p[d],u.push(x))}),Object.keys(c).length>0?Object.keys(c).forEach(d=>{let[g]=Lo(d),x=a[g];x&&(x.signatureKey=c[d],l.push(x))}):l=n;let f={};t.library!=null&&t.library.function!=null&&(f=t.library.function.reduce((d,g)=>(d[g.signature.name]=this.mapFunction(g),d),{}));let h={nodes:a,inputs:l,outputs:u,weights:s,placeholders:n,signature:e,functions:f};return i.length>0&&(h.initNodes=i),h}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,o)=>(e[t[o].name]=o,e),{})}mapNode(t){let e=tx(t.op)||this.opMappers[t.op]||{};t.attr==null&&(t.attr={});let o={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return e.inputs!=null&&(o.inputParams=e.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),e.attrs!=null&&(o.attrParams=e.attrs.reduce((n,s)=>{let i=s.type,a;switch(s.type){case"string":a=rx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=rx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":a=ux(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=ux(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":a=nx(t.attr,s.tfName,s.defaultValue||0),a===void 0&&!!s.tfDeprecatedName&&(a=nx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":a=lx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=lx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":a=ox(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=ox(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":a=px(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=px(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":a=ax(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=ax(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":a=cx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=cx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":a=sx(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=sx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":a=ix(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=ix(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":a=Fk(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Fk(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${t.op}`)}return n[s.name]={value:a,type:i},n},{})),o}mapFunction(t){let e=t.nodeDef,o=[],n=[],s={};e!=null&&(s=e.reduce((p,m)=>(p[m.name]=this.mapNode(m),m.op==="Const"&&n.push(p[m.name]),p),{}));let i=[],a=[];t.signature.inputArg.forEach(p=>{let[m]=Lo(p.name),f={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:B0(p.type),type:"dtype"}},children:[]};f.signatureKey=p.name,i.push(f),s[m]=f}),Object.keys(s).forEach(p=>{let m=s[p];m.inputNames.forEach((f,h)=>{let[d,,g]=Lo(f),x=s[d];if(x.outputs!=null){let b=x.outputs.indexOf(g);if(b!==-1){let w=`${d}:${b}`;m.inputNames[h]=w}}m.inputs.push(x),x.children.push(m)})});let u=t.ret;t.signature.outputArg.forEach(p=>{let[m,f]=Lo(u[p.name]),h=s[m];h!=null&&(h.defaultOutput=f,a.push(h))});let c=this.mapArgsToSignature(t);return{nodes:s,inputs:i,outputs:a,weights:n,placeholders:o,signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o),e),{}),outputs:t.signature.outputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o,t.ret),e),{})}}mapArgToTensorInfo(t,e){let o=t.name;return e!=null&&(o=e[o]),{name:o,dtype:t.type}}};function DU(r){let t=z().global;if(typeof t.atob<"u")return t.atob(r);if(typeof Buffer<"u")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function _k(r,t){let e=Array.isArray(r)?String.fromCharCode.apply(null,r):DU(r);return t?e:e.toLowerCase()}function rx(r,t,e,o=!1){let n=r[t];return n!=null?_k(n.s,o):e}function ox(r,t,e){let o=r[t];return o?o.b:e}function nx(r,t,e){let o=r[t]||{},n=o.i!=null?o.i:o.f!=null?o.f:e;return typeof n=="number"?n:parseInt(n,10)}function B0(r){switch(typeof r=="string"&&(r=ho[r]),r){case ho.DT_FLOAT:case ho.DT_HALF:return"float32";case ho.DT_INT32:case ho.DT_INT64:case ho.DT_INT8:case ho.DT_UINT8:return"int32";case ho.DT_BOOL:return"bool";case ho.DT_DOUBLE:return"float32";case ho.DT_STRING:return"string";default:return null}}function Fk(r,t,e){let o=r[t];return o&&o.func?o.func.name:e}function sx(r,t,e){let o=r[t];return o&&o.type?B0(o.type):e}function ix(r,t,e){let o=r[t];return o&&o.list&&o.list.type?o.list.type.map(n=>B0(n)):e}function Ok(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(t=>typeof t.size=="number"?t.size:parseInt(t.size,10)):[]}function ax(r,t,e){let o=r[t];return o&&o.shape?Ok(o.shape):e}function lx(r,t,e){let o=r[t];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):e}function ux(r,t,e,o=!1){let n=r[t];return n&&n.list&&n.list.s?n.list.s.map(s=>_k(s,o)):e}function cx(r,t,e){let o=r[t];return o&&o.list&&o.list.shape?o.list.shape.map(n=>Ok(n)):e}function px(r,t,e){let o=r[t];return o&&o.list&&o.list.b?o.list.b:e}var mx=class{constructor(t,e,o){this.node=t,this.tensorMap=e,this.context=o,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(n=>this.getInput(n)),t.rawAttrs!=null&&(this.attrs=Object.keys(t.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(t){return We(t,this.tensorMap,this.context)}getAttr(t,e){let o=this.node.rawAttrs[t];if(o.tensor!=null)return We(t,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return nx(this.node.rawAttrs,t,e);if(o.s!=null)return rx(this.node.rawAttrs,t,e);if(o.b!=null)return ox(this.node.rawAttrs,t,e);if(o.shape!=null)return ax(this.node.rawAttrs,t,e);if(o.type!=null)return sx(this.node.rawAttrs,t,e);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return lx(this.node.rawAttrs,t,e);if(o.list.s!=null)return ux(this.node.rawAttrs,t,e);if(o.list.shape!=null)return cx(this.node.rawAttrs,t,e);if(o.list.b!=null)return px(this.node.rawAttrs,t,e);if(o.list.type!=null)return ix(this.node.rawAttrs,t,e)}return e}};var Gt={};qt(Gt,{OP_SCOPE_SUFFIX:()=>uw,abs:()=>ie,acos:()=>Bh,acosh:()=>Vh,add:()=>H,addN:()=>tT,all:()=>wc,any:()=>cl,argMax:()=>bn,argMin:()=>Gh,asin:()=>Wh,asinh:()=>Uh,atan:()=>Hh,atan2:()=>qh,atanh:()=>Kh,avgPool:()=>la,avgPool3d:()=>Xh,basicLSTMCell:()=>oT,batchNorm:()=>Cn,batchNorm2d:()=>Yh,batchNorm3d:()=>Zh,batchNorm4d:()=>Jh,batchToSpaceND:()=>ua,bincount:()=>Qh,booleanMaskAsync:()=>CB,broadcastArgs:()=>sT,broadcastTo:()=>vn,buffer:()=>pt,cast:()=>j,ceil:()=>td,clipByValue:()=>qe,clone:()=>Tr,complex:()=>Lr,concat:()=>Bt,concat1d:()=>ed,concat2d:()=>rd,concat3d:()=>od,concat4d:()=>nd,conv1d:()=>vc,conv2d:()=>zr,conv2dTranspose:()=>Tc,conv3d:()=>sd,conv3dTranspose:()=>ad,cos:()=>ca,cosh:()=>Ic,cosineWindow:()=>wm,cumprod:()=>fl,cumsum:()=>Nc,denseBincount:()=>iT,depthToSpace:()=>ld,depthwiseConv2d:()=>Sn,diag:()=>aT,dilation2d:()=>ud,div:()=>rt,divNoNan:()=>cd,dot:()=>pd,dropout:()=>Vw,einsum:()=>lT,elu:()=>Tn,enclosingPowerOfTwo:()=>Gw,equal:()=>gr,erf:()=>md,euclideanNorm:()=>fd,exp:()=>$e,expandDims:()=>Pe,expm1:()=>hd,eye:()=>dl,fft:()=>ba,fill:()=>In,floor:()=>Nn,floorDiv:()=>bc,fused:()=>Ca,gather:()=>kn,gatherND:()=>AB,greater:()=>Te,greaterEqual:()=>Yr,ifft:()=>Gs,imag:()=>aa,image:()=>An,inTopKAsync:()=>FB,irfft:()=>Bc,isFinite:()=>dd,isInf:()=>gd,isNaN:()=>xd,leakyRelu:()=>pa,less:()=>kc,lessEqual:()=>Zr,linalg:()=>Uw,linspace:()=>pT,localResponseNormalization:()=>yd,log:()=>Ke,log1p:()=>ma,logSigmoid:()=>bd,logSoftmax:()=>Ec,logSumExp:()=>$c,logicalAnd:()=>lr,logicalNot:()=>fa,logicalOr:()=>Ac,logicalXor:()=>wd,losses:()=>FV,lowerBound:()=>mT,matMul:()=>Dt,max:()=>ar,maxPool:()=>ha,maxPool3d:()=>vd,maxPoolWithArgmax:()=>fT,maximum:()=>Br,mean:()=>re,meshgrid:()=>hT,min:()=>hl,minimum:()=>En,mirrorPad:()=>Sd,mod:()=>Td,moments:()=>gl,movingAverage:()=>SB,mul:()=>R,multiRNNCell:()=>dT,multinomial:()=>gT,neg:()=>Ft,norm:()=>Vs,notEqual:()=>Yo,oneHot:()=>ll,ones:()=>ze,onesLike:()=>Ge,op:()=>T,outerProduct:()=>xT,pad:()=>Nr,pad1d:()=>yT,pad2d:()=>bT,pad3d:()=>wT,pad4d:()=>CT,pool:()=>Id,pow:()=>Ir,prelu:()=>ga,print:()=>Rh,prod:()=>Nd,raggedTensorToTensor:()=>vT,rand:()=>ST,randomGamma:()=>BT,randomNormal:()=>bl,randomStandardNormal:()=>VT,randomUniform:()=>$n,range:()=>xa,real:()=>Bs,reciprocal:()=>Dd,relu:()=>rr,relu6:()=>Dc,reshape:()=>A,reverse:()=>Me,reverse1d:()=>GT,reverse2d:()=>WT,reverse3d:()=>UT,reverse4d:()=>HT,rfft:()=>wa,round:()=>Rc,rsqrt:()=>Fc,scalar:()=>nt,scatterND:()=>IB,searchSorted:()=>xm,selu:()=>_c,separableConv2d:()=>Oc,setdiff1dAsync:()=>qT,sigmoid:()=>dr,sign:()=>Rd,signal:()=>RV,sin:()=>Lc,sinh:()=>Pc,slice:()=>Ct,slice1d:()=>zc,slice2d:()=>bm,slice3d:()=>Mc,slice4d:()=>wl,softmax:()=>ya,softplus:()=>Xo,spaceToBatchND:()=>da,sparse:()=>_V,sparseToDense:()=>EB,spectral:()=>DV,split:()=>Be,sqrt:()=>ee,square:()=>$t,squaredDifference:()=>Vc,squeeze:()=>Jr,stack:()=>Ae,step:()=>Io,stridedSlice:()=>Fd,string:()=>OV,sub:()=>tt,sum:()=>st,tan:()=>_d,tanh:()=>wn,tensor:()=>Je,tensor1d:()=>Ce,tensor2d:()=>Ws,tensor3d:()=>zh,tensor4d:()=>KT,tensor5d:()=>jT,tensor6d:()=>XT,tile:()=>er,topk:()=>Od,transpose:()=>Nt,truncatedNormal:()=>Gc,unique:()=>Ld,unsortedSegmentSum:()=>Wc,unstack:()=>je,upperBound:()=>YT,variable:()=>Pd,where:()=>le,whereAsync:()=>Md,zeros:()=>oe,zerosLike:()=>dt});var Lk=(r,t,e,o=Gt)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(v("a",r,t,e),v("b",r,t,e))];case"AddN":return[o.addN(v("tensors",r,t,e))];case"FloorMod":case"Mod":return[o.mod(v("a",r,t,e),v("b",r,t,e))];case"Mul":return[o.mul(v("a",r,t,e),v("b",r,t,e))];case"RealDiv":case"Div":return[o.div(v("a",r,t,e),v("b",r,t,e))];case"DivNoNan":return[o.divNoNan(v("a",r,t,e),v("b",r,t,e))];case"FloorDiv":return[o.floorDiv(v("a",r,t,e),v("b",r,t,e))];case"Sub":return[o.sub(v("a",r,t,e),v("b",r,t,e))];case"Minimum":return[o.minimum(v("a",r,t,e),v("b",r,t,e))];case"Maximum":return[o.maximum(v("a",r,t,e),v("b",r,t,e))];case"Pow":return[o.pow(v("a",r,t,e),v("b",r,t,e))];case"SquaredDifference":return[o.squaredDifference(v("a",r,t,e),v("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Pk=(r,t,e,o=Gt)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(v("x",r,t,e))];case"Acos":return[o.acos(v("x",r,t,e))];case"Acosh":return[o.acosh(v("x",r,t,e))];case"Asin":return[o.asin(v("x",r,t,e))];case"Asinh":return[o.asinh(v("x",r,t,e))];case"Atan":return[o.atan(v("x",r,t,e))];case"Atan2":return[o.atan2(v("x",r,t,e),v("y",r,t,e))];case"Atanh":return[o.atanh(v("x",r,t,e))];case"Ceil":return[o.ceil(v("x",r,t,e))];case"Complex":return[o.complex(v("real",r,t,e),v("imag",r,t,e))];case"Cos":return[o.cos(v("x",r,t,e))];case"Cosh":return[o.cosh(v("x",r,t,e))];case"Elu":return[o.elu(v("x",r,t,e))];case"Erf":return[o.erf(v("x",r,t,e))];case"Exp":return[o.exp(v("x",r,t,e))];case"Expm1":return[o.expm1(v("x",r,t,e))];case"Floor":return[o.floor(v("x",r,t,e))];case"Log":return[o.log(v("x",r,t,e))];case"Log1p":return[o.log1p(v("x",r,t,e))];case"Imag":return[o.imag(v("x",r,t,e))];case"Neg":return[o.neg(v("x",r,t,e))];case"Reciprocal":return[o.reciprocal(v("x",r,t,e))];case"Real":return[o.real(v("x",r,t,e))];case"Relu":return[o.relu(v("x",r,t,e))];case"Round":return[o.round(v("x",r,t,e))];case"Selu":return[o.selu(v("x",r,t,e))];case"Sigmoid":return[o.sigmoid(v("x",r,t,e))];case"Sin":return[o.sin(v("x",r,t,e))];case"Sign":return[o.sign(v("x",r,t,e))];case"Sinh":return[o.sinh(v("x",r,t,e))];case"Softplus":return[o.softplus(v("x",r,t,e))];case"Sqrt":return[o.sqrt(v("x",r,t,e))];case"Square":return[o.square(v("x",r,t,e))];case"Tanh":return[o.tanh(v("x",r,t,e))];case"Tan":return[o.tan(v("x",r,t,e))];case"ClipByValue":return[o.clipByValue(v("x",r,t,e),v("clipValueMin",r,t,e),v("clipValueMax",r,t,e))];case"Relu6":return[o.relu6(v("x",r,t,e))];case"Rsqrt":return[o.rsqrt(We(r.inputNames[0],t,e))];case"Prod":return[o.prod(v("x",r,t,e),v("axes",r,t,e))];case"LeakyRelu":return[o.leakyRelu(v("x",r,t,e),v("alpha",r,t,e))];case"Prelu":return[o.prelu(v("x",r,t,e),v("alpha",r,t,e))];case"IsNan":return[o.isNaN(We(r.inputNames[0],t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function eo(r,t,e=""){if(!(typeof r=="number"||typeof t=="number")){y.assert(r.length===t.length,()=>e+` Shapes ${r} and ${t} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=t[o];y.assert(n<0||s<0||n===s,()=>e+` Shapes ${r} and ${t} must match`)}}}function zk(r){return!(typeof r=="number"||r.some(t=>t<0))}function Cp(r,t,e){let o=fx(r,e),n=!zk(o);if(n&&t.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&t.forEach(s=>{o=fx(s.shape,o)}),!zk(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function fx(r,t){if(typeof r=="number")return t;if(typeof t=="number")return r;if(r.length!==t.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${t}`);let e=[];for(let o=0;o<r.length;++o){let n=r[o],s=t[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${t}`);e[o]=n>=0?n:s}return e}var hx=class{constructor(t,e,o,n,s,i,a){this.name=t,this.dtype=e,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=nt(0),ue(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);let e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=e.shape),eo(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);o.tensor=e,ue(e),o.written=!0,this.tensors[t]=o}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((o,n)=>this.write(o,e[n]))}gather(t,e){if(!!e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let n=0;n<this.size();n++)t.push(n)}if(t.length===0)return Je([],[0].concat(this.elementShape));let o=this.readMany(t);return eo(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),Ae(o,0)}concat(t){if(!!t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(this.size()===0)return Je([],[0].concat(this.elementShape));let e=[];for(let n=0;n<this.size();n++)e.push(n);let o=this.readMany(e);return eo(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),Bt(o,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let o=Math.max(...t);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(t,je(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let o=0,n=t.map(l=>(o+=l,o));if(o!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:e.size/o,i=[];M(()=>{e=A(e,[1,o,s]);for(let l=0;l<t.length;++l){let u=l===0?0:n[l-1],c=[0,u,0],p=[1,t[l],s];i[l]=A(Ct(e,c,p),this.elementShape)}return i});let a=[];for(let l=0;l<t.length;l++)a[l]=l;this.writeMany(a,i)}};var Js=class{constructor(t,e,o,n=-1){this.tensors=t,this.elementShape=e,this.elementDtype=o,t?.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);eo(e,s.shape,"TensorList shape mismatch: "),ue(s)}),this.idTensor=nt(0),this.maxNumElements=n,ue(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Js([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,o=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);eo(t,this.elementShape,"TensorList shape mismatch: ");let n=Cp(this.elementShape,this.tensors,t);return M(()=>{let s=this.tensors.map(i=>A(i,n));return Ae(s,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=Cp(this.elementShape,this.tensors,t),n=this.tensors.pop();return n.kept=!1,eo(n.shape,t,"TensorList shape mismatch: "),A(n,o)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(eo(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ue(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(this.maxNumElements!==-1&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);let e=new Js([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let o=0;o<Math.min(this.tensors.length,t);++o)e.tensors[o]=this.tensors[o];return e}getItem(t,e,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(this.tensors[t]==null)throw new Error(`element at index ${t} is null.`);eo(this.tensors[t].shape,e,"TensorList shape mismatch: ");let n=Cp(this.elementShape,this.tensors,e);return A(this.tensors[t],n)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||this.maxNumElements!==-1&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);eo(this.elementShape,e.shape,"TensorList shape mismatch: "),ue(e),this.tensors[t]!=null&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,o){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);eo(this.elementShape,o,"TensorList shape mismatch: "),t=t.slice(0,this.size());let n=Cp(this.elementShape,this.tensors,o);return t.length===0?Je([],[0].concat(n)):M(()=>{let s=t.map(i=>A(this.tensors[i],n));return Ae(s,0)})}concat(t,e){if(!!t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);eo(this.elementShape,e,"TensorList shape mismatch: ");let o=Cp(this.elementShape,this.tensors,e);return this.size()===0?Je([],[0].concat(o)):M(()=>{let n=this.tensors.map(s=>A(s,o));return Bt(n,0)})}};function Mk(r,t,e){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==e)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${e}`);let n=r.shape.slice(1);eo(n,t,"TensorList shape mismatch: ");let s=je(r);return new Js(s,t,o)}function Bk(r,t,e,o){return new Js([],r,t,o)}function Vk(r,t,e,o){if(t.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${r.shape[0]}`);let n=Math.max(...t);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new Js([],e,r.dtype,o),i=je(r,0);return t.forEach((a,l)=>{s.setItem(a,i[l])}),s}function Gk(r,t,e){let o=0,n=t.map(c=>(o+=c,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),i=fx(s,e),a=o===0?0:r.size/o,l=M(()=>{let c=[];r=A(r,[1,o,a]);for(let p=0;p<t.length;++p){let m=p===0?0:n[p-1],f=[0,m,0],h=[1,t[p],a];c[p]=A(Ct(r,f,h),i)}return r.dispose(),c}),u=new Js([],e,r.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}var Wk=async(r,t,e)=>{switch(r.op){case"If":case"StatelessIf":{let o=v("thenBranch",r,t,e),n=v("elseBranch",r,t,e),s=v("cond",r,t,e),i=v("args",r,t,e);return(await s.data())[0]?e.functionMap[o].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap):e.functionMap[n].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap)}case"While":case"StatelessWhile":{let o=v("body",r,t,e),n=v("cond",r,t,e),s=v("args",r,t,e),i=await e.functionMap[n].executeFunctionAsync(s,e.tensorArrayMap,e.tensorListMap),a=s.map(c=>c.id),l=await i[0].data();i.forEach(c=>{!c.kept&&a.indexOf(c.id)===-1&&c.dispose()});let u=s;for(;l[0];){let c=u;u=await e.functionMap[o].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);let p=u.map(f=>f.id);c.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()});let m=await e.functionMap[n].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);l=await m[0].data(),m.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()})}return u}case"LoopCond":{let o=v("pred",r,t,e);return[on(o)]}case"Switch":{let o=v("pred",r,t,e),n=v("data",r,t,e);return n.kept||(n=on(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>We(n,t,e)!==void 0);if(o){let n=We(o,t,e);return[on(n)]}return}case"Enter":{let o=v("frameName",r,t,e),n=v("tensor",r,t,e);return e.enterFrame(o),[on(n)]}case"Exit":{let o=v("tensor",r,t,e);return e.exitFrame(),[on(o)]}case"NextIteration":{let o=v("tensor",r,t,e);return e.nextIteration(),[on(o)]}case"TensorArrayV3":{let o=v("size",r,t,e),n=v("dtype",r,t,e),s=v("elementShape",r,t,e),i=v("dynamicSize",r,t,e),a=v("clearAfterRead",r,t,e),l=v("identicalElementShapes",r,t,e),u=v("name",r,t,e),c=new hx(u,n,o,s,l,i,a);return e.addTensorArray(c),[c.idTensor,nt(1)]}case"TensorArrayWriteV3":{let o=v("tensorArrayId",r,t,e),n=v("index",r,t,e),s=v("tensor",r,t,e),i=e.getTensorArray(o.id);return i.write(n,s),[i.idTensor]}case"TensorArrayReadV3":{let o=v("tensorArrayId",r,t,e),n=v("index",r,t,e);return[e.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=v("tensorArrayId",r,t,e),n=v("indices",r,t,e),s=v("dtype",r,t,e);return[e.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=v("tensorArrayId",r,t,e),n=v("indices",r,t,e),s=v("tensor",r,t,e),i=e.getTensorArray(o.id);return i.scatter(n,s),[i.idTensor]}case"TensorArrayConcatV3":{let o=v("tensorArrayId",r,t,e),n=e.getTensorArray(o.id),s=v("dtype",r,t,e);return[n.concat(s)]}case"TensorArraySplitV3":{let o=v("tensorArrayId",r,t,e),n=v("tensor",r,t,e),s=v("lengths",r,t,e),i=e.getTensorArray(o.id);return i.split(s,n),[i.idTensor]}case"TensorArraySizeV3":{let o=v("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return[nt(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=v("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=v("tensorListId",r,t,e),n=v("index",r,t,e),s=v("tensor",r,t,e),i=e.getTensorList(o.id);return i.setItem(n,s),[i.idTensor]}case"TensorListGetItem":{let o=v("tensorListId",r,t,e),n=v("index",r,t,e),s=v("elementShape",r,t,e),i=v("elementDType",r,t,e);return[e.getTensorList(o.id).getItem(n,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let o=v("indices",r,t,e),n=v("tensor",r,t,e),s=v("elementShape",r,t,e),i=v("numElements",r,t,e),a=Vk(n,o,s,i);return e.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=v("elementShape",r,t,e),n=v("elementDType",r,t,e),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let i=v(s,r,t,e),a=r.op==="TensorListReserve"?-1:i,l=Bk(o,n,i,a);return e.addTensorList(l),[l.idTensor]}case"TensorListGather":{let o=v("tensorListId",r,t,e),n=v("indices",r,t,e),s=v("elementShape",r,t,e),i=v("elementDType",r,t,e);return[e.getTensorList(o.id).gather(n,i,s)]}case"TensorListStack":{let o=v("tensorListId",r,t,e),n=v("elementShape",r,t,e),s=v("elementDType",r,t,e),i=v("numElements",r,t,e);return[e.getTensorList(o.id).stack(n,s,i)]}case"TensorListFromTensor":{let o=v("tensor",r,t,e),n=v("elementShape",r,t,e),s=v("elementDType",r,t,e),i=Mk(o,n,s);return e.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=v("tensorListId",r,t,e),n=e.getTensorList(o.id),s=v("dtype",r,t,e),i=v("elementShape",r,t,e);return[n.concat(s,i)]}case"TensorListPushBack":{let o=v("tensorListId",r,t,e),n=v("tensor",r,t,e),s=e.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=v("tensorListId",r,t,e),n=v("elementShape",r,t,e),s=v("elementDType",r,t,e);return[e.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=v("tensor",r,t,e),n=v("elementShape",r,t,e),s=v("lengths",r,t,e),i=Gk(o,s,n);return e.addTensorList(i),[i.idTensor]}case"TensorListLength":{let o=v("tensorListId",r,t,e),n=e.getTensorList(o.id);return[nt(n.size(),"int32")]}case"TensorListResize":{let o=v("tensorListId",r,t,e),n=v("size",r,t,e),i=e.getTensorList(o.id).resize(n);return e.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function Uk(r,t,e){let[o,n]=v("fusedOps",r,t,e),s=o==="biasadd",i=!s,a=n==="prelu",l=o==="fusedbatchnorm",u=v("numArgs",r,t,e);if(s){if(a&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let c=v("strides",r,t,e),p=qf(r,t,e),m=v("dataFormat",r,t,e).toUpperCase(),f=v("dilations",r,t,e),[h,d]=v("args",r,t,e);i&&(d=h,h=void 0);let g=v("leakyreluAlpha",r,t,e);return{stride:c,pad:p,dataFormat:m,dilations:f,biasArg:h,preluArg:d,activationFunc:n,leakyreluAlpha:g}}var Hk=(r,t,e,o=Gt)=>{switch(r.op){case"Conv1D":{let n=v("stride",r,t,e),s=v("pad",r,t,e),i=v("dataFormat",r,t,e).toUpperCase(),a=v("dilation",r,t,e);return[o.conv1d(v("x",r,t,e),v("filter",r,t,e),n,s,i,a)]}case"Conv2D":{let n=v("strides",r,t,e),s=qf(r,t,e),i=v("dataFormat",r,t,e).toUpperCase(),a=v("dilations",r,t,e);return[o.conv2d(v("x",r,t,e),v("filter",r,t,e),[n[1],n[2]],s,i,[a[1],a[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=Uk(r,t,e);return[o.fused.conv2d({x:v("x",r,t,e),filter:v("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=Uk(r,t,e);return[o.fused.depthwiseConv2d({x:v("x",r,t,e),filter:v("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=v("outputShape",r,t,e),s=v("strides",r,t,e),i=qf(r,t,e);return[o.conv2dTranspose(v("x",r,t,e),v("filter",r,t,e),n,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=v("strides",r,t,e),s=qf(r,t,e),i=v("dilations",r,t,e),a=v("dataFormat",r,t,e).toUpperCase();return[o.depthwiseConv2d(v("input",r,t,e),v("filter",r,t,e),[n[1],n[2]],s,a,[i[1],i[2]])]}case"Conv3D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("dataFormat",r,t,e).toUpperCase(),a=v("dilations",r,t,e);return[o.conv3d(v("x",r,t,e),v("filter",r,t,e),[n[1],n[2],n[3]],s,i,[a[1],a[2],a[3]])]}case"AvgPool":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.avgPool(v("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.maxPool(v("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e),a=v("includeBatchInIndex",r,t,e),{result:l,indexes:u}=o.maxPoolWithArgmax(v("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s,a);return[l,u]}case"AvgPool3D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.avgPool3d(v("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("kernelSize",r,t,e);return[o.maxPool3d(v("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=v("strides",r,t,e),s=v("pad",r,t,e),i=v("dilations",r,t,e),a=n[1],l=n[2],u=i[1],c=i[2];return[o.dilation2d(v("x",r,t,e),v("filter",r,t,e),[a,l],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var qk=(r,t,e,o=Gt)=>{switch(r.op){case"Fill":{let n=v("shape",r,t,e),s=v("dtype",r,t,e),i=v("value",r,t,e);return[o.fill(n,i,s)]}case"LinSpace":{let n=v("start",r,t,e),s=v("stop",r,t,e),i=v("num",r,t,e);return[o.linspace(n,s,i)]}case"Multinomial":{let n=v("logits",r,t,e),s=v("numSamples",r,t,e),i=v("seed",r,t,e);return[o.multinomial(n,s,i)]}case"OneHot":{let n=v("indices",r,t,e),s=v("depth",r,t,e),i=v("onValue",r,t,e),a=v("offValue",r,t,e),l=v("dtype",r,t,e);return[o.oneHot(n,s,i,a,l)]}case"Ones":return[o.ones(v("shape",r,t,e),v("dtype",r,t,e))];case"OnesLike":return[o.onesLike(v("x",r,t,e))];case"RandomStandardNormal":return[o.randomStandardNormal(v("shape",r,t,e),v("dtype",r,t,e),v("seed",r,t,e))];case"RandomUniform":return[o.randomUniform(v("shape",r,t,e),v("minval",r,t,e),v("maxval",r,t,e),v("dtype",r,t,e))];case"Range":{let n=v("start",r,t,e),s=v("stop",r,t,e),i=v("step",r,t,e);return[o.range(n,s,i,v("dtype",r,t,e))]}case"TruncatedNormal":{let n=v("shape",r,t,e),s=v("mean",r,t,e),i=v("stdDev",r,t,e),a=v("seed",r,t,e);return[o.truncatedNormal(n,s,i,v("dtype",r,t,e),a)]}case"Zeros":return[o.zeros(v("shape",r,t,e),v("dtype",r,t,e))];case"ZerosLike":return[o.zerosLike(v("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function V0(r,t,e){let o=v("boxes",r,t,e),n=v("scores",r,t,e),s=v("maxOutputSize",r,t,e),i=v("iouThreshold",r,t,e),a=v("scoreThreshold",r,t,e),l=v("softNmsSigma",r,t,e);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:i,scoreThreshold:a,softNmsSigma:l}}var Kk=async(r,t,e,o,n=Gt)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=V0(r,t,e),p=await n.image.nonMaxSuppressionWithScoreAsync(s,i,a,l,u,c);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=V0(r,t,e),c=v("padToMaxOutputSize",r,t,e),p=await n.image.nonMaxSuppressionPaddedAsync(s,i,a,l,u,c);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=V0(r,t,e);return[await n.image.nonMaxSuppressionAsync(s,i,a,l,u)]}case"Where":{let s=n.cast(v("condition",r,t,e),"bool"),i=[await n.whereAsync(s)];return s.dispose(),i}case"ListDiff":return n.setdiff1dAsync(v("x",r,t,e),v("y",r,t,e));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var jk=(r,t,e,o=Gt)=>{switch(r.op){case"LowerBound":{let n=v("sortedSequence",r,t,e),s=v("values",r,t,e);return[o.lowerBound(n,s)]}case"TopKV2":{let n=v("x",r,t,e),s=v("k",r,t,e),i=v("sorted",r,t,e),a=o.topk(n,s,i);return[a.values,a.indices]}case"UpperBound":{let n=v("sortedSequence",r,t,e),s=v("values",r,t,e);return[o.upperBound(n,s)]}case"Unique":{let n=v("x",r,t,e),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=v("x",r,t,e),s=v("axis",r,t,e),i=o.unique(n,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Xk=(r,t,e,o=Gt)=>{switch(r.op){case"Const":return t[r.name];case"PlaceholderWithDefault":let n=v("default",r,t,e);return[We(r.name,t,e)||n];case"Placeholder":return[We(r.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let c=v("x",r,t,e);return[on(c)]}case"IdentityN":return v("x",r,t,e).map(c=>on(c));case"Snapshot":let s=v("x",r,t,e);return[on(s)];case"Shape":return[o.tensor1d(v("x",r,t,e).shape,"int32")];case"ShapeN":return v("x",r,t,e).map(c=>o.tensor1d(c.shape));case"Size":return[o.scalar(v("x",r,t,e).size,"int32")];case"Rank":return[o.scalar(v("x",r,t,e).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let i=v("x",r,t,e),a=v("data",r,t,e),l=v("message",r,t,e),u=v("summarize",r,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var dx=class{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=nt(0),this.tensorMap=new Map,ue(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return nt(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),M(()=>{let n=je(e),s=o.length,i=n.length;y.assert(s===i,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${i} elements.`);for(let a=0;a<s;a++){let l=o[a],u=n[a];ue(u),this.tensorMap.set(l,u)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return M(()=>{let n=[];for(let s=0;s<o.length;s++){let i=o[s],a=this.findWithDefault(i,e);n.push(a)}return Ae(n)})}findWithDefault(t,e){let o=this.tensorMap.get(t);return o??e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}};var Yk=async(r,t,e,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=v("keyDType",r,t,e),s=v("valueDType",r,t,e),i=new dx(n,s);return o.addHashTable(r.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{let n=v("tableHandle",r,t,e,o),s=v("keys",r,t,e),i=v("values",r,t,e);return[await o.getHashTableById(n.id).import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let n=v("tableHandle",r,t,e,o),s=v("keys",r,t,e),i=v("defaultValue",r,t,e);return[await o.getHashTableById(n.id).find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=v("tableHandle",r,t,e,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Zk=(r,t,e,o=Gt)=>{switch(r.op){case"ResizeBilinear":{let n=v("images",r,t,e),s=v("size",r,t,e),i=v("alignCorners",r,t,e),a=v("halfPixelCenters",r,t,e);return[o.image.resizeBilinear(n,[s[0],s[1]],i,a)]}case"ResizeNearestNeighbor":{let n=v("images",r,t,e),s=v("size",r,t,e),i=v("alignCorners",r,t,e),a=v("halfPixelCenters",r,t,e);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],i,a)]}case"CropAndResize":{let n=v("image",r,t,e),s=v("boxes",r,t,e),i=v("boxInd",r,t,e),a=v("cropSize",r,t,e),l=v("method",r,t,e),u=v("extrapolationValue",r,t,e);return[o.image.cropAndResize(n,s,i,a,l,u)]}case"ImageProjectiveTransformV3":{let n=v("images",r,t,e),s=v("transforms",r,t,e),i=v("outputShape",r,t,e),a=v("fillValue",r,t,e),l=v("interpolation",r,t,e),u=v("fillMode",r,t,e);return[o.image.transform(n,s,l.toLowerCase(),u.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Jk=(r,t,e,o=Gt)=>{switch(r.op){case"Equal":return[o.equal(v("a",r,t,e),v("b",r,t,e))];case"NotEqual":return[o.notEqual(v("a",r,t,e),v("b",r,t,e))];case"Greater":return[o.greater(v("a",r,t,e),v("b",r,t,e))];case"GreaterEqual":return[o.greaterEqual(v("a",r,t,e),v("b",r,t,e))];case"Less":return[o.less(v("a",r,t,e),v("b",r,t,e))];case"LessEqual":return[o.lessEqual(v("a",r,t,e),v("b",r,t,e))];case"LogicalAnd":return[o.logicalAnd(v("a",r,t,e),v("b",r,t,e))];case"LogicalNot":return[o.logicalNot(v("a",r,t,e))];case"LogicalOr":return[o.logicalOr(v("a",r,t,e),v("b",r,t,e))];case"Select":case"SelectV2":return[o.where(v("condition",r,t,e),v("a",r,t,e),v("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Qk=(r,t,e,o=Gt)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(v("a",r,t,e),v("b",r,t,e),v("transposeA",r,t,e),v("transposeB",r,t,e))];case"Einsum":return[o.einsum(v("equation",r,t,e),...v("tensors",r,t,e))];case"Transpose":return[o.transpose(v("x",r,t,e),v("perm",r,t,e))];case"_FusedMatMul":let[n,s]=v("fusedOps",r,t,e),i=n==="biasadd",a=s==="prelu",l=v("numArgs",r,t,e),u=v("leakyreluAlpha",r,t,e);if(i){if(a&&l!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&l!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[c,p]=v("args",r,t,e);return[o.fused.matMul({a:v("a",r,t,e),b:v("b",r,t,e),transposeA:v("transposeA",r,t,e),transposeB:v("transposeB",r,t,e),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var tE=(r,t,e,o=Gt)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(v("x",r,t,e),v("axis",r,t,e),v("keepDims",r,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(v("x",r,t,e),v("mean",r,t,e),v("variance",r,t,e),v("offset",r,t,e),v("scale",r,t,e),v("epsilon",r,t,e))];case"FusedBatchNormV3":return[o.batchNorm(v("x",r,t,e),v("mean",r,t,e),v("variance",r,t,e),v("offset",r,t,e),v("scale",r,t,e),v("epsilon",r,t,e))];case"LRN":return[o.localResponseNormalization(v("x",r,t,e),v("radius",r,t,e),v("bias",r,t,e),v("alpha",r,t,e),v("beta",r,t,e))];case"Softmax":return[o.softmax(v("x",r,t,e))];case"LogSoftmax":return[o.logSoftmax(v("x",r,t,e))];case"SparseToDense":return[o.sparseToDense(v("sparseIndices",r,t,e),v("outputShape",r,t,e),v("sparseValues",r,t,e),v("defaultValue",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var eE=(r,t,e,o=Gt)=>{switch(r.op){case"Max":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.max(v("x",r,t,e),a,l)]}case"Mean":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.mean(v("x",r,t,e),a,l)]}case"Min":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.min(v("x",r,t,e),a,l)]}case"Sum":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.sum(v("x",r,t,e),a,l)]}case"All":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.all(v("x",r,t,e),a,l)]}case"Any":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.any(v("x",r,t,e),a,l)]}case"ArgMax":{let a=v("axis",r,t,e);return[o.argMax(v("x",r,t,e),a)]}case"ArgMin":{let a=v("axis",r,t,e);return[o.argMin(v("x",r,t,e),a)]}case"Prod":{let a=v("axis",r,t,e),l=v("keepDims",r,t,e);return[o.prod(v("x",r,t,e),a,l)]}case"Cumprod":{let a=v("axis",r,t,e),l=v("exclusive",r,t,e),u=v("reverse",r,t,e);return[o.cumprod(v("x",r,t,e),a,l,u)]}case"Cumsum":{let a=v("axis",r,t,e),l=v("exclusive",r,t,e),u=v("reverse",r,t,e);return[o.cumsum(v("x",r,t,e),a,l,u)]}case"Bincount":let n=v("x",r,t,e),s=v("weights",r,t,e),i=v("size",r,t,e);return[o.bincount(n,s,i)];case"DenseBincount":{let a=v("x",r,t,e),l=v("weights",r,t,e),u=v("size",r,t,e),c=v("binaryOutput",r,t,e);return[o.denseBincount(a,l,u,c)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var rE=(r,t,e,o=Gt)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=v("n",r,t,e),s=v("axis",r,t,e),i=v("tensors",r,t,e);return i=i.slice(0,n),[o.concat(i,s)]}case"Gather":{let n=v("x",r,t,e),s=v("indices",r,t,e);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=v("axis",r,t,e),s=v("batchDims",r,t,e),i=v("x",r,t,e),a=v("indices",r,t,e);return[o.gather(i,o.cast(a,"int32"),n,s)]}case"Reverse":{let n=v("dims",r,t,e),s=[];for(let a=0;a<n.length;a++)n[a]&&s.push(a);let i=v("x",r,t,e);return[o.reverse(i,s)]}case"ReverseV2":{let n=v("axis",r,t,e),s=v("x",r,t,e);return[o.reverse(s,n)]}case"Slice":{let n=v("begin",r,t,e),s=v("size",r,t,e);return[o.slice(v("x",r,t,e),n,s)]}case"StridedSlice":{let n=v("begin",r,t,e),s=v("end",r,t,e),i=v("strides",r,t,e),a=v("beginMask",r,t,e),l=v("endMask",r,t,e),u=v("ellipsisMask",r,t,e),c=v("newAxisMask",r,t,e),p=v("shrinkAxisMask",r,t,e),m=v("x",r,t,e);return[o.stridedSlice(m,n,s,i,a,l,u,c,p)]}case"Pack":return M(()=>{let n=v("axis",r,t,e),s=v("tensors",r,t,e),i=s[0].shape,a=o.squeeze(s[0]).shape,l=s.map(u=>{let c=y.arraysEqual(u.shape,i);if(!c&&!y.arraysEqual(o.squeeze(u).shape,a))throw new Error("the input tensors shape does not match");return c?u:o.reshape(u,i)});return[o.stack(l,n)]});case"Unpack":{let n=v("axis",r,t,e),s=v("tensor",r,t,e);return o.unstack(s,n)}case"Tile":{let n=v("reps",r,t,e);return[o.tile(v("x",r,t,e),n)]}case"Split":case"SplitV":{let n=v("axis",r,t,e),s=v("numOrSizeSplits",r,t,e),i=v("x",r,t,e);return o.split(i,s,n)}case"ScatterNd":{let n=v("indices",r,t,e),s=v("values",r,t,e),i=v("shape",r,t,e);return[o.scatterND(n,s,i)]}case"GatherNd":{let n=v("x",r,t,e),s=v("indices",r,t,e);return[o.gatherND(n,s)]}case"SparseToDense":{let n=v("sparseIndices",r,t,e),s=v("outputShape",r,t,e),i=v("sparseValues",r,t,e),a=v("defaultValue",r,t,e);return[o.sparseToDense(n,i,s,i.dtype===a.dtype?a:o.cast(a,i.dtype))]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var oE=(r,t,e,o=Gt)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:i,reverseIndexMap:a}=o.sparse.sparseFillEmptyRows(v("indices",r,t,e),v("values",r,t,e),v("denseShape",r,t,e),v("defaultValue",r,t,e));return[n,s,i,a]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(v("inputIndices",r,t,e),v("inputShape",r,t,e),v("newShape",r,t,e));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(v("data",r,t,e),v("indices",r,t,e),v("segmentIds",r,t,e))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(v("data",r,t,e),v("indices",r,t,e),v("segmentIds",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var nE=(r,t,e,o=Gt)=>{switch(r.op){case"FFT":return[o.fft(v("x",r,t,e))];case"IFFT":return[o.ifft(v("x",r,t,e))];case"RFFT":return[o.rfft(v("x",r,t,e))];case"IRFFT":return[o.irfft(v("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var sE=(r,t,e,o=Gt)=>{switch(r.op){case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(v("data",r,t,e),v("dataSplits",r,t,e),v("separator",r,t,e),v("nGramWidths",r,t,e),v("leftPad",r,t,e),v("rightPad",r,t,e),v("padWidth",r,t,e),v("preserveShortSequences",r,t,e));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:i}=o.string.stringSplit(v("input",r,t,e),v("delimiter",r,t,e),v("skipEmpty",r,t,e));return[n,s,i]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(v("input",r,t,e),v("numBuckets",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var iE=(r,t,e,o=Gt)=>{switch(r.op){case"Cast":return[o.cast(v("x",r,t,e),v("dtype",r,t,e))];case"ExpandDims":{let n=v("axis",r,t,e);return[o.expandDims(v("x",r,t,e),n)]}case"Squeeze":{let n=v("axis",r,t,e);return[o.squeeze(v("x",r,t,e),n)]}case"Reshape":return[o.reshape(v("x",r,t,e),v("shape",r,t,e))];case"MirrorPad":return[o.mirrorPad(v("x",r,t,e),v("padding",r,t,e),v("mode",r,t,e))];case"PadV2":case"Pad":return[o.pad(v("x",r,t,e),v("padding",r,t,e),v("constantValue",r,t,e))];case"SpaceToBatchND":{let n=v("blockShape",r,t,e),s=v("paddings",r,t,e);return[o.spaceToBatchND(v("x",r,t,e),n,s)]}case"BatchToSpaceND":{let n=v("blockShape",r,t,e),s=v("crops",r,t,e);return[o.batchToSpaceND(v("x",r,t,e),n,s)]}case"DepthToSpace":{let n=v("blockSize",r,t,e),s=v("dataFormat",r,t,e).toUpperCase();return[o.depthToSpace(v("x",r,t,e),n,s)]}case"BroadcastTo":return[o.broadcastTo(v("x",r,t,e),v("shape",r,t,e))];case"BroadcastArgs":return[o.broadcastArgs(v("s0",r,t,e),v("s1",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function G0(r,t,e,o,n=M){let s=((i,a,l)=>{switch(i.category){case"arithmetic":return n(()=>Lk(i,a,l));case"basic_math":return n(()=>Pk(i,a,l));case"control":return Wk(i,a,l);case"convolution":return n(()=>Hk(i,a,l));case"creation":return n(()=>qk(i,a,l));case"dynamic":return Kk(i,a,l);case"evaluation":return n(()=>jk(i,a,l));case"image":return n(()=>Zk(i,a,l));case"graph":return n(()=>Xk(i,a,l));case"logical":return n(()=>Jk(i,a,l));case"matrices":return n(()=>Qk(i,a,l));case"normalization":return n(()=>tE(i,a,l));case"reduction":return n(()=>eE(i,a,l));case"slice_join":return n(()=>rE(i,a,l));case"sparse":return n(()=>oE(i,a,l));case"spectral":return n(()=>nE(i,a,l));case"string":return n(()=>sE(i,a,l));case"transformation":return n(()=>iE(i,a,l));case"hash_table":return Yk(i,a,l,o);case"custom":let u=tx(i.op);if(u&&u.customExecutor)return u.customExecutor(new mx(i,a,l));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,t,e);return y.isPromise(s)?s.then(i=>[].concat(i)):[].concat(s)}var jf=class{constructor(t={},e={},o={},n={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=o,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let t=[];for(let e=0;e<this.contexts.length-1;e++){let o=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(o))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>e.id===0&&e.iterationId===0?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(let e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(let e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}};function W0(r,t,e,o){let n=new Set,s=[],i=null,a=null,l=new Set,u=Object.keys(r).map(m=>Rr(m)[0]),c=[];o!=null&&(c=o.map(m=>Rr(m.name)[0]));let p=[...t];for(;p.length>0;){let m=p.pop();if((U0(m)||t4(m)||e4(m))&&i==null&&(i=m,a=i.children.map(f=>f.name).filter(f=>n.has(f))),n.add(m.name),e[m.name]==null&&u.indexOf(m.name)===-1&&c.indexOf(m.name)===-1){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(f=>{l.has(f.name)||(l.add(f.name),p.push(f))})}}return{inputs:r,outputs:t,usedNodes:n,missingInputs:s,dynamicNode:i,syncInputs:a}}function aE(r,t,e){let{usedNodes:o,inputs:n}=e,s=[],i=Object.keys(n).map(c=>Rr(c)[0]).map(c=>r.nodes[c]),a=r.initNodes;i.forEach(c=>{o.has(c.name)&&s.push(c)}),r.weights.forEach(c=>{o.has(c.name)&&s.push(c)}),a?.forEach(c=>{o.has(c.name)&&s.push(c)});let l=new Set,u=[];for(;s.length>0;){let c=s.pop();l.add(c.name),t[c.name]||u.push(c),c.children.forEach(p=>{!l.has(p.name)&&o.has(p.name)&&p.inputs.every(m=>l.has(m.name))&&s.push(p)})}return u}var ZU=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],JU=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],QU=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function U0(r){return ZU.indexOf(r.op)>=0}function t4(r){return JU.indexOf(r.op)>=0}function e4(r){return QU.indexOf(r.op)>=0}var Ll=class{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,t.functions!=null&&Object.keys(t.functions).forEach(o=>{this._functionExecutorMap[o]=new Ll(t.functions[o],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){let e=Object.keys(t).map(o=>t[o].map(n=>n.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{let e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){let o=t.map(s=>s.name).sort(),n=e.map(s=>s.name).sort();return o.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)}compile(t,e){let o=W0(t,e,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:i}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let a=e.map(u=>u.name),l=Object.keys(t);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${l}]. Missing the following inputs: [${n}]`)}return aE(this.graph,this.weightMap,o)}execute(t,e){t=this.mapInputs(t);let o=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);let n=o.map(p=>this.graph.nodes[Rr(p)[0]]),s=e.map(p=>Rr(p)[0]),i=s.map(p=>this.graph.nodes[p]);this.resetIntermediateTensors(),i.length===0&&(i=this._outputs);let a=this.getCompilationKey(n,i),l=this.compiledMap.get(a);l==null&&(l=this.compile(t,i),this.compiledMap.set(a,l));let u={},c={};return M(()=>{let p=new jf(this.weightMap,u,c,this.functionExecutorMap),m=Object.assign({},this.weightMap);Object.keys(t).forEach(d=>{let[g,x]=Rr(d),b=[];b[x]=t[d],m[g]=b});let f=this.getFrozenTensorIds(m),h={};for(let d=0;d<l.length;d++){let g=l[d];if(!m[g.name]){let x=G0(g,m,p,this._resourceManager);if(y.isPromise(x))throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);m[g.name]=x,this.checkTensorForDisposal(g.name,g,m,p,f,s,h)}}return this.parent==null&&p.dispose(f),e.map(d=>We(d,m,p))})}getFrozenTensorIds(t){let e=[].concat.apply([],Object.keys(t).map(o=>t[o]).map(o=>o.map(n=>n.id)));return new Set(e)}checkTensorForDisposal(t,e,o,n,s,i,a){e.category==="control"||i.indexOf(t)!==-1||(o[t].forEach(l=>{l!=null&&(a[l.id]=(a[l.id]||0)+e.children.length)}),e.inputs.forEach(l=>{if(l.category!=="control"){let u=Rk(l.name,o,n);u?.forEach(c=>{if(c&&!c.kept&&!s.has(c.id)){let p=a[c.id];if(p===1){if(!this.keepTensorForDebug)c.dispose();else{let[m,f]=Lo(e.name,n);this.intermediateTensors[m]?this.intermediateTensors[m][f]=c:(this.intermediateTensors[m]=[],this.intermediateTensors[m][f]=c)}delete a[c.id]}else p!=null&&a[c.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){!this.intermediateTensors||(Object.keys(this.intermediateTensors).forEach(t=>this.intermediateTensors[t].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){!this.tensorsMap||Object.keys(this.tensorsMap).forEach(t=>{this.tensorsMap[t].forEach(o=>{o&&!o.kept&&!o.isDisposed&&!this.keepIds.has(o.id)&&o.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(let t in this.intermediateTensors)this.intermediateTensors[t].forEach(e=>e.dispose()),delete this.intermediateTensors[t]}async _executeAsync(t,e,o=!1,n={},s={}){o||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepTensorForDebug=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(c){console.warn(c.message)}this.resetIntermediateTensors();let i=new jf(this.weightMap,n,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(t,i,e,o);let a=e.map(c=>We(c,this.tensorsMap,i)),l=a.map(c=>c.id),u=Object.keys(t).map(c=>t[c].id);return this.keepIds=new Set([...l,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),this.parent==null&&i.dispose(this.keepIds),a}async executeFunctionAsync(t,e,o){let n=t.reduce((s,i,a)=>(s[this.inputs[a].name]=i,s),{});return this._executeAsync(n,this.outputNodes,!0,e,o)}async executeWithControlFlow(t,e,o,n){let s=Object.keys(t),i=s.map(w=>this.graph.nodes[Rr(w)[0]]),a=o.map(w=>Rr(w)[0]),l=a.map(w=>this.graph.nodes[w]);l.length===0&&(l=this._outputs);let{usedNodes:u,missingInputs:c,dynamicNode:p,syncInputs:m}=W0(t,l,this.weightMap,this._initNodes),f=[...i,...this.graph.weights,...this._initNodes||[]].map(w=>({node:w,contexts:e.currentContext})),h=Object.assign({},this.weightMap);Object.keys(t).forEach(w=>{let[C,I]=Rr(w),$=[];$[I]=t[w],h[C]=$});let d={},g=this.getFrozenTensorIds(h),x={};for(;f.length>0;){let w=this.processStack(i,f,e,h,x,g,a,d,u);await Promise.all(w)}p==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let b=l.filter(w=>!U0(w)&&!We(w.name,h,e)).map(w=>w.name);if(b.length>0){let w="";throw p!=null&&(w=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${w}`)}return h}processStack(t,e,o,n,s,i,a,l,u){let c=[];for(;e.length>0;){let p=e.pop();o.currentContext=p.contexts;let m="";if(p.node.op==="Enter"&&v("isConstant",p.node,n,o)&&([m]=Lo(p.node.name,o)),n[p.node.name]==null){let f=G0(p.node,n,o,this._resourceManager);m||([m]=Lo(p.node.name,o));let h=o.currentContext;y.isPromise(f)?c.push(f.then(d=>(n[m]=d,o.currentContext=h,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u),d))):(n[m]=f,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u))}else this.processChildNodes(p.node,e,o,n,s,u)}return c}processChildNodes(t,e,o,n,s,i){t.children.forEach(a=>{let[l]=Lo(a.name,o);s[l]||!i.has(a.name)||(a.op==="Merge"?a.inputNames.some(u=>!!We(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})):a.inputNames.every(u=>!!We(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{let o=t[e],[n]=Rr(e),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let i=s.attrParams.shape.value,a=i.length===o.shape.length&&o.shape.every((l,u)=>i[u]===-1||i[u]===l);y.assert(a,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&y.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(t){let e={};for(let o in t)if(this._signature!=null&&this._signature.inputs!=null&&this._signature.inputs[o]!=null){let n=this._signature.inputs[o];e[n.name]=t[o]}else e[o]=t[o];return e}checkInputs(t){let e=Object.keys(t).filter(o=>{let[n]=Rr(o);return this.graph.nodes[n]==null});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>this._signature!=null&&this._signature.outputs!=null&&this._signature.outputs[e]!=null?this._signature.outputs[e].name:e,{})}checkOutputs(t){t.forEach(e=>{let[o]=Rr(e);if(!this.graph.nodes[o])throw new Error(`The output '${e}' is not found in the graph`)})}};var gx=class{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(let t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(let t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}};var r4="?tfjs-format=file",o4="model.json",xx=class{constructor(t,e={},o=jo){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=o,e==null&&(this.loadOptions={}),this.resourceManager=new gx}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){let t=this.modelUrl;if(t.load!=null)this.handler=t;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{let e=this.io.getLoadHandlers(t,this.loadOptions);if(e.length===0)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let t=this.handler.load();return y.isPromise(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;let e=this.artifacts.modelTopology,o=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(o=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}this.signature=o,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;let n=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Ll(Kf.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,t.modelInitializer!=null&&t.modelInitializer.node!=null){let s=Kf.Instance.transformGraph(t.modelInitializer);this.initializer=new Ll(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if(typeof t=="string"){let o=this.io.getSaveHandlers(t);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${t}'`);t=o[0]}if(t.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){let o=this.execute(t,this.outputNodes);if(this.structuredOutputKeys){let n=o instanceof At?[o]:o,s={};return n.forEach((i,a)=>s[this.structuredOutputKeys[a]]=i),s}return o}normalizeInputs(t){if(!(t instanceof At)&&!Array.isArray(t))return t;if(t=Array.isArray(t)?t:[t],t.length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,o,n)=>(e[o]=t[n],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=this.executor.execute(t,e);return o.length>1?o:o[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=await this.executor.executeAsync(t,e);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,o)=>(e[o]=[t[o]],e),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}};async function H0(r,t={},e=jo){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");t==null&&(t={}),t.fromTFHub&&typeof r=="string"&&(r=n4(r));let o=new xx(r,t,e);return await o.load(),o}function n4(r){return r.endsWith("/")||(r=r+"/"),`${r}${o4}${r4}`}var yE=Yp(ym());var dE=Yp(ym());function uE(r,t){return cE(r,t)}function cE(r,t,e=new Map,o=new Set){if(r==null)return null;if(typeof Blob=="function"&&r instanceof Blob)return r.slice();if(o.has(r))throw new Error("Circular references are not supported.");if(e.has(r))return e.get(r);let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(n.recurse)if(vp(r)){let s=Array.isArray(r)?[]:{};o.add(r);for(let i in r){let a=r[i],l=cE(a,t,e,o);s[i]=l}return o.delete(r),r.__proto__&&(s.__proto__=r.__proto__),s}else throw new Error(`Can't recurse into non-iterable type: ${r}`);else return e.set(r,n.value),n.value}function pE(r,t=q0){return mE(r,t)}function mE(r,t,e=new Set){let o=r[0];if(e.has(o))throw new Error("Circular references are not supported.");let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(n.recurse)if(vp(o)){let s=Array.isArray(o)?[]:{};e.add(o);for(let i in o){let a=r.map(u=>u[i]),l=mE(a,t,e);s[i]=l}return e.delete(o),s}else throw new Error(`Can't recurse into non-iterable type: ${o}`);else return n.value}function q0(r){return r===null?null:vp(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}function vp(r){let t=!1;if(z().get("IS_BROWSER"))t=r instanceof TextDecoder;else{let{StringDecoder:e}=lE();t=r instanceof e}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof At)&&!(r instanceof Promise)&&!t)}function fE(r){return r==null||i4(r)||Array.isArray(r)||typeof r=="object"&&r instanceof At||y.isTypedArray(r)}function i4(r){return r===null||typeof r!="object"&&typeof r!="function"}function hE(r){return uE(r,a4)}function a4(r){return r instanceof At?{value:r.clone(),recurse:!1}:vp(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}var Sp=class{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,t==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(let e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let e=this.wrap(this.begin+t),o=this.get(e);return this.set(e,this.pop()),o}};var Pl=class extends Sp{constructor(){super(Pl.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){let t=this.capacity*2,e=new Array(t),o=this.length();for(let n=0;n<o;n++)e[n]=this.get(this.wrap(this.begin+n));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=o}};Pl.INITIAL_CAPACITY=32;function gE(r){return new K0(r)}function sC(r){return new j0(r)}function xE(r,t){return new bx(r,t)}var or=class{async toArray(){let t=[],e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){let t=this.prefetch(100),e=[],o=await t.next();for(;!o.done;)e.push(o.value),o=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),o=t(e.value);for(;!e.done&&o;)e=await this.next(),o=t(e.value)}handleErrors(t){return new eC(this,t)}filter(t){return new Q0(this,t)}map(t){return new tC(this,t)}mapAsync(t){return new yx(this,t)}serialMapAsync(t){return new yx(this,t).serial()}flatmap(t){return new rC(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(e=>e===!0)}rowMajorBatch(t,e=!0){return new J0(this,t,e)}columnMajorBatch(t,e=!0,o=q0){return this.rowMajorBatch(t,e).map(s=>pE(s,o))}concatenate(t,e){return new bx(gE([this,t]),e)}take(t){return t<0||t==null?this:new Z0(this,t)}skip(t){return t<0||t==null?this:new Y0(this,t)}prefetch(t){return new wx(this,t)}shuffle(t,e){return new nC(this,t,e)}serial(){return new X0(this)}},K0=class extends or{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let t=this.items[this.trav];return this.trav++,{value:hE(t),done:!1}}},j0=class extends or{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}},X0=class extends or{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}},Y0=class extends or{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let t=await this.upstream.next();if(t.done)return t;xt(t.value)}return this.upstream.next()}},Z0=class extends or{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}},J0=class extends or{constructor(t,e,o=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=o,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let t=[];for(;t.length<this.batchSize;){let e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}},Q0=class extends or{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;xt(t.value)}}},tC=class extends or{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=So.getTensorsInContainer(t.value),o=this.transform(t.value),n=So.getTensorsInContainer(o);for(let s of e)So.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},eC=class extends or{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}},yx=class extends or{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=So.getTensorsInContainer(t.value),o=await this.transform(t.value),n=So.getTensorsInContainer(o);for(let s of e)So.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},Xf=class extends or{constructor(){super(),this.outputQueue=new Pl,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}},rC=class extends Xf{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let t=await this.upstream.next();if(t.done)return!1;let e=So.getTensorsInContainer(t.value),o=this.transform(t.value),n=So.getTensorsInContainer(o);this.outputQueue.pushAll(o);for(let s of e)So.isTensorInList(s,n)||s.dispose();return!0}},bx=class extends or{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,this.iterator==null){let o=await this.moreIterators.next();if(o.done)return{value:null,done:!0};this.iterator=o.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}},oC;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(oC||(oC={}));var wx=class extends or{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new Sp(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}},nC=class extends wx{constructor(t,e,o){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=dE.alea(o||y.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(e.done)this.upstreamExhausted=!0;else return this.refill(),e}return{value:null,done:!0}}};var zl=class{constructor(){this.size=null}batch(t,e=!0){let o=this;y.assert(t>0,()=>`batchSize needs to be positive, but it is
      ${t}`);let n;return this.size===1/0||this.size==null?n=this.size:e?n=Math.ceil(this.size/t):n=Math.floor(this.size/t),nn(async()=>(await o.iterator()).columnMajorBatch(t,e,u4),n)}concatenate(t){let e=this,o;return this.size===1/0||t.size===1/0?o=1/0:this.size!=null&&t.size!=null?o=this.size+t.size:o=null,nn(async()=>(await e.iterator()).concatenate(await t.iterator()),o)}filter(t){let e=this,o;return this.size===1/0?o=1/0:o=null,nn(async()=>(await e.iterator()).filter(n=>M(()=>t(n))),o)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){let e=this;return nn(async()=>(await e.iterator()).map(o=>M(()=>t(o))),this.size)}mapAsync(t){let e=this;return nn(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(t==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let e=this;return nn(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){let e=this,o;return this.size!=null&&t>0?o=this.size*t:t===0?o=0:this.size!=null&&(t===void 0||t<0)?o=1/0:o=null,nn(async()=>{let n=sC(async()=>({value:await e.iterator(),done:!1}));return xE(n.take(t))},o)}skip(t){let e=this,o;return this.size!=null&&t>=0&&this.size>=t?o=this.size-t:this.size!=null&&(this.size<t||t===void 0||t<0)?o=0:o=null,nn(async()=>(await e.iterator()).skip(t),o)}shuffle(t,e,o=!0){if(t==null||t<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,s=yE.alea(e||y.now().toString());return nn(async()=>{let i=s.int32();return o&&(i+=s.int32()),(await n.iterator()).shuffle(t,i.toString())},this.size)}take(t){let e=this,o;return this.size!=null&&this.size>t?o=t:this.size!=null&&this.size<=t?o=this.size:o=null,nn(async()=>(await e.iterator()).take(t),o)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}};zl.MAX_BUFFER_SIZE=1e4;function nn(r,t=null){return new class extends zl{constructor(){super(...arguments),this.size=t}async iterator(){return r()}}}function u4(r){if(r===null)return null;let t=r[0];return fE(t)?{value:c4(r),recurse:!1}:{value:null,recurse:!0}}function c4(r){if(r.length===0)throw new Error("Can't make a batch of zero elements.");return r[0]instanceof At?Ae(r):Je(r)}var L8t=Symbol("out"),P8t=Symbol("field"),z8t=Symbol("quote"),M8t=Symbol("quoteafterquote"),B8t=Symbol("quoteinquote");function Y(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}var w4=pr.whereImpl,Ml=class extends Wn{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Ba(this,uo())}nextDataId(){return Ml.nextDataId++}write(t,e,o){this.firstUse&&(this.firstUse=!1,z().get("IS_NODE")&&N.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:t,dtype:o,refCount:1}),n}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return{dataId:n,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){let e=this.data.get(t);e.refCount++}decRef(t){if(this.data.has(t)){let e=this.data.get(t);e.refCount--}}move(t,e,o,n,s){this.data.set(t,{values:e,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){let{dtype:e,complexTensorInfos:o}=this.data.get(t);if(e==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return N.mergeRealAndImagArrays(n,s)}return this.data.get(t).values}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return pt(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return pt(t.shape,t.dtype,e)}makeOutput(t,e,o){return uo().makeTensorFromTensorInfo(this.makeTensorInfo(e,o,t),this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(t);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){let e=y.now();return t(),{kernelMs:y.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){Y([t],"where");let e=this.readSync(t.dataId);return w4(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Ml.nextDataId=0;var RC={};qt(RC,{addImpl:()=>lC,bincountImpl:()=>Np,bincountReduceImpl:()=>Cx,castImpl:()=>aC,ceilImpl:()=>uC,concatImpl:()=>vx,equalImpl:()=>cC,expImpl:()=>mC,expm1Impl:()=>hC,floorImpl:()=>dC,gatherNdImpl:()=>Sx,gatherV2Impl:()=>Tx,greaterEqualImpl:()=>xC,greaterImpl:()=>gC,lessEqualImpl:()=>bC,lessImpl:()=>yC,linSpaceImpl:()=>Ix,logImpl:()=>wC,maxImpl:()=>Nx,maximumImpl:()=>CC,minimumImpl:()=>vC,multiplyImpl:()=>Yf,negImpl:()=>SC,notEqualImpl:()=>TC,prodImpl:()=>IC,raggedTensorToTensorImpl:()=>kx,rangeImpl:()=>Ex,rsqrtImpl:()=>NC,scatterImpl:()=>Qs,sigmoidImpl:()=>HE,simpleAbsImpl:()=>iC,sliceImpl:()=>EC,sparseFillEmptyRowsImpl:()=>$x,sparseReshapeImpl:()=>Ax,sparseSegmentReductionImpl:()=>$p,sqrtImpl:()=>jE,squaredDifferenceImpl:()=>$C,stridedSliceImpl:()=>Dx,stringNGramsImpl:()=>Rx,stringSplitImpl:()=>Fx,stringToHashBucketFastImpl:()=>_x,subImpl:()=>DC,tileImpl:()=>Ox,topKImpl:()=>Lx,transposeImpl:()=>kp,uniqueImpl:()=>Px});function iC(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}var C4=r=>{let{x:t}=r.inputs,e=r.backend;Y(t,"abs");let o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId).values;return o=iC(n),e.makeOutput(o,t.shape,t.dtype)},bE={kernelName:ci,backendName:"cpu",kernelFunc:C4};function zt(r){return(t,e,o,n,s)=>{let i=N.assertAndGetBroadcastShape(t,e),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=y.computeStrides(t),h=y.computeStrides(e),d=N.getBroadcastDims(t,i),g=N.getBroadcastDims(e,i);if(d.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),w=b.slice(-p);d.forEach(D=>w[D]=0);let C=y.locToIndex(w,p,f),I=b.slice(-m);g.forEach(D=>I[D]=0);let $=y.locToIndex(I,m,h);c[x]=r(o[C],n[$])}return[c,i]}}function Ue(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}var wE={kernelName:fu,backendName:"cpu",kernelFunc:Ue};function Tp(r,t,e="float32"){if(e==="complex64"){let n=Tp(r,t,"float32"),s=Tp(r,t,"float32");return Ue({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function fr(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var CE={kernelName:pn,backendName:"cpu",kernelFunc:fr};function Po(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var vE={kernelName:Wu,backendName:"cpu",kernelFunc:Po};function aC(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,i]=zt((a,l)=>a!==l?1:0)(t,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function zo(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return fr({inputs:{x:n},backend:e});let c=Tp(e,n.shape,n.dtype),p=zo({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=Ue({inputs:{real:p,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=Po({inputs:{input:n},backend:e}),p=zo({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=fr({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=e.data.get(n.dataId).values,[a,l,u]=aC(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}var SE={kernelName:cn,backendName:"cpu",kernelFunc:zo};function Vt(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Y([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?N.fromUint8ToStringArray(u):u,m=i.dtype==="string"?N.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,d]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(d,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=zo({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,d=zo({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(d.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=l.data.get(x.dataId).values,C=l.data.get(b.dataId).values,[I,$,D]=e(i.shape,a.shape,f,h,w,C),F=l.makeTensorInfo(D,"float32",I),O=l.makeTensorInfo(D,"float32",$),L=Ue({inputs:{real:F,imag:O},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(F),l.disposeIntermediateTensorInfo(O),L}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function Ip(r){return(t,e,o,n,s,i)=>{let a=N.assertAndGetBroadcastShape(t,e),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=N.getBroadcastDims(t,a),h=N.getBroadcastDims(e,a),d=N.mergeRealAndImagArrays(o,n),g=N.mergeRealAndImagArrays(s,i),x=t.length,b=y.computeStrides(t),w=e.length,C=y.computeStrides(e);if(f.length+h.length===0)for(let I=0;I<p.length;I++){let $=I%d.length,D=I%g.length,F=r(d[$*2],d[$*2+1],g[D*2],g[D*2+1]);p[I]=F.real,m[I]=F.imag}else for(let I=0;I<p.length;I++){let $=y.indexToLoc(I,u,c),D=$.slice(-x);f.forEach(V=>D[V]=0);let F=y.locToIndex(D,x,b),O=$.slice(-w);h.forEach(V=>O[V]=0);let L=y.locToIndex(O,w,C),B=r(d[F*2],d[F*2+1],g[L*2],g[L*2+1]);p[I]=B.real,m[I]=B.imag}return[p,m,a]}}var lC=zt((r,t)=>r+t),v4=Ip((r,t,e,o)=>({real:r+e,imag:t+o})),Ln=Vt(Ho,lC,v4),TE={kernelName:Ho,backendName:"cpu",kernelFunc:Ln};function Np(r,t,e,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function Cx(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=pt([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function Fr(r){return(t,e,o)=>{let n=y.getTypedArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function bt(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Y(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=e||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=t(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function Mo(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Y(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=e||i.dtype,c=t(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var uC=Fr(r=>Math.ceil(r)),S4=Mo(Jn,uC),IE={kernelName:Jn,backendName:"cpu",kernelFunc:S4};function vx(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?N.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var cC=zt((r,t)=>r===t?1:0),pC=Vt(Wa,cC,null,"bool"),NE={kernelName:Wa,backendName:"cpu",kernelFunc:pC};var mC=Fr(r=>Math.exp(r)),fC=Mo(ss,mC,"float32"),kE={kernelName:ss,backendName:"cpu",kernelFunc:fC};var hC=Fr(r=>Math.expm1(r)),T4=Mo(is,hC),EE={kernelName:is,backendName:"cpu",kernelFunc:T4};var dC=Fr(r=>Math.floor(r)),I4=Mo(as,dC),$E={kernelName:as,backendName:"cpu",kernelFunc:I4};function Sx(r,t,e,o,n,s,i,a,l){let u=pt([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function Tx(r,t,e){let o=pt(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var gC=zt((r,t)=>r>t?1:0),N4=Vt(Ua,gC,null,"bool"),AE={kernelName:Ua,backendName:"cpu",kernelFunc:N4};var xC=zt((r,t)=>r>=t?1:0),k4=Vt(us,xC,null,"bool"),DE={kernelName:us,backendName:"cpu",kernelFunc:k4};var yC=zt((r,t)=>r<t?1:0),E4=Vt(Ha,yC,null,"bool"),RE={kernelName:Ha,backendName:"cpu",kernelFunc:E4};var bC=zt((r,t)=>r<=t?1:0),$4=Vt(qa,bC,null,"bool"),FE={kernelName:qa,backendName:"cpu",kernelFunc:$4};function Ix(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var wC=Fr(r=>Math.log(r)),A4=Mo(fs,wC),_E={kernelName:fs,backendName:"cpu",kernelFunc:A4};function Nx(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var CC=zt((r,t)=>Math.max(r,t)),D4=Vt(ds,CC),OE={kernelName:ds,backendName:"cpu",kernelFunc:D4};var vC=zt((r,t)=>Math.min(r,t)),R4=Vt(gs,vC),LE={kernelName:gs,backendName:"cpu",kernelFunc:R4};var Yf=zt((r,t)=>r*t),F4=Ip((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),Bl=Vt(ys,Yf,F4),PE={kernelName:ys,backendName:"cpu",kernelFunc:Bl};function SC(r,t,e){let o=y.createScalarValue(-1,e);return Yf([],t,o,r,e)}function _4(r){let{inputs:t,backend:e}=r,{x:o}=t;Y(o,"neg");let n=e.data.get(o.dataId).values,[s,i]=SC(n,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,s)}var zE={kernelName:Pi,backendName:"cpu",kernelFunc:_4};var TC=zt((r,t)=>r!==t?1:0),O4=Vt(Ya,TC,null,"bool"),ME={kernelName:Ya,backendName:"cpu",kernelFunc:O4};function kp(r,t,e,o,n){let s=t.length,i=y.sizeFromShape(t),a=y.computeStrides(t),l=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function ge(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{perm:s}=e;Y(n,"transpose");let i=n.shape.length,a=new Array(i);for(let p=0;p<a.length;p++)a[p]=n.shape[s[p]];let l=o.data.get(n.dataId).values,u=kp(l,n.shape,n.dtype,s,a);return{dataId:o.write(u,a,n.dtype),shape:a,dtype:n.dtype}}var BE={kernelName:fn,backendName:"cpu",kernelFunc:ge};function IC(r,t,e,o){let[n,s]=N.computeOutAndReduceShapes(r,o),i=Fe(t,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}function L4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"prod");let a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=N.getAxesPermutation(l,a),c=l,p=n,m=[];u!=null&&(p=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),m.push(p),c=N.getInnerMostAxes(c.length,a));let f=e.data.get(p.dataId).values,{outVals:h,outShape:d,outDtype:g}=IC(p.shape,p.dtype,f,c),x=d;return i&&(x=N.expandShapeToKeepDim(d,l)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(x,g,h)}var VE={kernelName:Wi,backendName:"cpu",kernelFunc:L4};var Bo=N.RowPartitionType,Ep=class{constructor(t,e,o,n,s,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=N.getRowPartitionTypesHelper(c),this.raggedRank=N.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Bo.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Bo.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Bo.VALUE_ROWIDS:return Ep.getMaxWidthValueRowID(e);case Bo.ROW_SPLITS:return Ep.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Bo[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let i=1;i<e;++i){let a=t[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return WE(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;N.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=N.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],i=0;for(let a=0;a<n;++a,i+=e)s.push(i);for(let a=n;a<t;++a)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,i=[];for(let a=0;a<s-1;++a){let l=t[a+1]-t[a],u=Math.min(n,l),c=e[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==t[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,i=[];if(s===0)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<s;++c){let p=t[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=e.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${e.length}`);u=e[p]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case Bo.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case Bo.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${Bo[i]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case Bo.FIRST_DIM_SIZE:return t[0];case Bo.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Bo.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Bo[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=WE(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(t+1);let l=y.sizeFromShape(a),u=e.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let h=this.defaultValueShape;M(()=>{let d=A(c,h);c=vn(d,a).dataSync()})}let p=0,m=0,f=0;for(let h=0;h<=u;++h){let d=h<u?e[h]:-1;if(d===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;GE(x,g,b)}if(h>=u){let g=o.length;d=Math.floor(g/l)}if(d>f)if(this.defaultValue.length===1)i.subarray(f*l,d*l).fill(this.defaultValue[0]),f=d;else for(;d>f;){let g=i.slice(f*l);GE(g,c,l),++f}d<0?(p=h+1,m=f):(p=h,m=f,f=m+1)}}};function GE(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function WE(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function kx(r,t,e,o,n,s,i,a,l,u){return new Ep(r,t,e,o,n,s,i,a,l,u).compute()}function Ex(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=y.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var NC=Fr(r=>1/Math.sqrt(r)),P4=Mo(Ts,NC),UE={kernelName:Ts,backendName:"cpu",kernelFunc:P4};function Qs(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return pt(e,t.dtype);let f=pt(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let d=[],g=0;for(let x=0;x<i;x++){let b=p[h*i+x];d.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${d} does not index into ${e}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[h*n+x]:f.values[g*n+x]=t.rank===0?m[0]:m[h*n+x]}return f}var HE=Fr(r=>1/(1+Math.exp(-r))),kC=bt($s,r=>1/(1+Math.exp(-r))),qE={kernelName:$s,backendName:"cpu",kernelFunc:kC};function EC(r,t,e,o,n){let s=He.isSliceContinous(o,t,e),i=y.sizeFromShape(e),a=y.computeStrides(o);if(s){let p=He.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?N.fromUint8ToStringArray(r):r,u=pt(o,n,l),c=pt(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,d)=>h+t[d]);c.set(u.get(...f),...m)}return n==="string"?N.fromStringArrayToUint8(c.values):c.values}function Vo(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o;Y(n,"slice");let[a,l]=He.parseSliceParams(n,s,i);He.assertParamsValid(n,a,l);let u=e.data.get(n.dataId).values,c=EC(u,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,c)}var KE={kernelName:Xi,backendName:"cpu",kernelFunc:Vo};function $x(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(N.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(N.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(N.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++h[x],m=m&&x>=f,f=x}let d=!0;for(let g=0;g<l;++g){let x=h[g]===0;u[g]=x,d=d&&!x,h[g]=Math.max(h[g],1),g>0&&(h[g]+=h[g-1])}if(d&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=h[l-1],x=y.getArrayFromDType(e,g*p),b=y.getArrayFromDType(n,g),w=new Array(l).fill(0);for(let C=0;C<a;++C){let I=r[C*p],$=w[I],D=(I===0?0:h[I-1])+$;w[I]++;for(let F=0;F<p;++F)x[D*p+F]=r[C*p+F];b[D]=o[C],c[C]=D}for(let C=0;C<l;++C)if(w[C]===0){let $=C===0?0:h[C-1];x[$*p+0]=C;for(let D=1;D<p;++D)x[$*p+D]=0;b[$]=i}return[x,[g,p],b,u,c]}}function Ax(r,t,e,o,n){let s=y.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(N.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(N.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(N.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(N.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(N.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let h=[];if(a>0){h[a-1]=1;for(let g=a-2;g>=0;--g)h[g]=h[g+1]*l[g+1]}let d=y.getArrayFromDType(e,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)d[g*a+b]=Math.trunc(x/h[b]),x%=h[b]}return[d,[i,a],l]}function $p(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(N.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((w,C)=>w*C,1),h=y.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(N.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=0,g=1,x=0,b=n[d];for(;;){let w=0;if(g<a){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(N.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(N.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&h.fill(i,x*u,b*u);for(let C=d;C<g;++C){let I=o[C];if(I<0||I>=l[0])throw new Error(N.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C,o[C],l[0]));for(let $=0;$<u;$++)h[b*u+$]+=r[I*u+$]}if(s)for(let C=0;C<u;C++)h[b*u+C]/=g-d;if(d=g,++g,x=b+1,b=w,g>a)break}return x<p&&h.fill(i,x*u,p*u),[h,m]}var jE=Fr(r=>Math.sqrt(r)),z4=bt(Ds,r=>Math.sqrt(r)),XE={kernelName:Ds,backendName:"cpu",kernelFunc:z4};var $C=zt((r,t)=>{let e=r-t;return e*e}),M4=Vt(Rs,$C),YE={kernelName:Rs,backendName:"cpu",kernelFunc:M4};function Dx(r,t,e,o){let n=pt(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var AC=class{constructor(t,e,o,n,s,i){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let d=o[n+a],g=0,x=b=>b.forEach(w=>d[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(t[m+b]),x(this.separator);if(p>0){x(t[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function Rx(r,t,e,o,n,s,i,a){return new AC(e,o,n,s,i,a).compute(r,t)}function B4(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function Fx(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;B4(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function _x(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var DC=zt((r,t)=>r-t),V4=Ip((r,t,e,o)=>({real:r-e,imag:t-o})),Zf=Vt(Fs,DC,V4),ZE={kernelName:Fs,backendName:"cpu",kernelFunc:Zf};function Ox(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=pt(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var Jf=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function JE(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));JE(r,t,m,f)}let n=r[t],s=e,i=o;for(y.swap(r,e,t),Jf(r[o],n)>0&&y.swap(r,e,o);s<i;){for(y.swap(r,s,i),s++,i--;Jf(r[s],n)<0;)s=s+1;for(;Jf(r[i],n)>0;)i=i-1}Jf(r[e],n)===0?y.swap(r,e,i):(i=i+1,y.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function Lx(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(e,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,w)=>h[w]={value:b,index:w}),o<h.length&&(JE(h,o),h=h.slice(0,o)),n&&h.sort(Jf);let d=p*o,g=l.subarray(d,d+o),x=u.subarray(d,d+o);for(let b=0;b<o;b++)g[b]=h[b].value,x[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[pt(c,e,l),pt(c,"int32",u)]}function Px(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i={},a=new Int32Array(e[n]),l=new Ut(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let d;if(c)d=r[h].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,h,b));d=g.join(",")}if(i[d]!==void 0)a[h]=i[d];else{let g=Object.keys(i).length;i[d]=g,a[h]=g,u.push(h)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new Ut(p,o);u.forEach((h,d)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,h,x),g,d,x)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}Ph("cpu",()=>new Ml,1);var FC=bt(os,r=>r>=0?r:Math.exp(r)-1),QE={kernelName:os,backendName:"cpu",kernelFunc:FC};function _C(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o;Y([n],"leakyRelu");let i=y.sizeFromShape(n.shape),a=e.data.get(n.dataId).values,l=y.getTypedArrayFromDType("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?s*a[u]:a[u];return e.makeTensorInfo(n.shape,"float32",l)}var t$={kernelName:$i,backendName:"cpu",kernelFunc:_C};var G4=zt((r,t)=>r<0?t*r:r);function OC(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t;Y([o,n],"prelu");let s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,[a,l]=G4(o.shape,n.shape,s,i,"float32");return e.makeTensorInfo(l,"float32",a)}var e$={kernelName:Gi,backendName:"cpu",kernelFunc:OC};var LC=bt(Cs,r=>Math.max(0,r)),r$={kernelName:Cs,backendName:"cpu",kernelFunc:LC};var PC=bt(vs,r=>Math.min(Math.max(0,r),6)),o$={kernelName:vs,backendName:"cpu",kernelFunc:PC};function Vl(r,t,e,o,n){if(e==="linear")return fr({inputs:{x:t},backend:r});if(e==="relu")return LC({inputs:{x:t},backend:r});if(e==="elu")return FC({inputs:{x:t},backend:r});if(e==="relu6")return PC({inputs:{x:t},backend:r});if(e==="prelu")return OC({inputs:{x:t,alpha:o},backend:r});if(e==="leakyrelu")return _C({inputs:{x:t},backend:r,attrs:{alpha:n}});if(e==="sigmoid")return kC({inputs:{x:t},backend:r});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function _t(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=y.sizeFromShape(n.shape),a=y.inferFromImplicitShape(s,i),l=y.sizeFromShape(a);y.assert(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(n.dataId);let u=e.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,p=u.complexTensorInfos.imag;c.shape=a,p.shape=a}return{dataId:n.dataId,shape:a,dtype:n.dtype}}var n$={kernelName:Ui,backendName:"cpu",kernelFunc:_t};function zC(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;Y([n,s],"matMul");let l=n.shape.length,u=s.shape.length,c=i?n.shape[l-2]:n.shape[l-1],p=a?s.shape[u-1]:s.shape[u-2],m=i?n.shape[l-1]:n.shape[l-2],f=a?s.shape[u-2]:s.shape[u-1],h=n.shape.slice(0,-2),d=s.shape.slice(0,-2),g=y.sizeFromShape(h),x=y.sizeFromShape(d),w=Xr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,f]);y.assert(c===p,()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${i} and transposeB=${a} must match.`);let C=i?[g,c,m]:[g,m,c],I=a?[x,f,p]:[x,p,f],$=_t({inputs:{x:n},backend:e,attrs:{shape:C}}),D=_t({inputs:{x:s},backend:e,attrs:{shape:I}}),F=i?$.shape[1]:$.shape[2],O=i?$.shape[2]:$.shape[1],L=a?D.shape[1]:D.shape[2],B=Math.max(g,x),V=e.data.get($.dataId).values,G=e.data.get(D.dataId).values,U=y.computeStrides($.shape),W=y.computeStrides(D.shape),[K,Z,q]=i?[U[0],1,U[1]]:[U[0],U[1],1],[J,ot,et]=a?[1,W[1],W[0]]:[W[1],1,W[0]],at=O*L,it=pt([B,O,L],$.dtype),ct=it.values,lt=e.blockSize;for(let mt=0;mt<B;mt++)for(let yt=0;yt<O;yt+=lt)for(let St=0;St<L;St+=lt)for(let It=0;It<F;It+=lt){let Pt=Math.min(yt+lt,O),Mt=Math.min(St+lt,L),se=Math.min(It+lt,F);for(let me=yt;me<Pt;me++)for(let ye=St;ye<Mt;ye++){let ve=0;for(let ae=It;ae<se;ae++){let Re=Math.min(mt,g-1)*K,Oe=Math.min(mt,x-1)*et,Vn=V[Re+me*Z+ae*q],ir=G[ae*J+ye*ot+Oe];ve+=Vn*ir}ct[mt*at+(me*L+ye)]+=ve}}return e.disposeIntermediateTensorInfo($),e.disposeIntermediateTensorInfo(D),e.makeTensorInfo(w,it.dtype,it.values)}var s$={kernelName:gi,backendName:"cpu",kernelFunc:zC};function W4(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o,m,f,h,d=[];m=zC({inputs:{a:n,b:s},attrs:{transposeA:l,transposeB:u},backend:e}),i&&(f=Ln({inputs:{a:m,b:i},backend:e}),d.push(m),m=f),c&&(h=Vl(e,m,c,a,p),d.push(m),m=h);for(let x of d)e.disposeIntermediateTensorInfo(x);return m}var i$={kernelName:Za,backendName:"cpu",kernelFunc:W4};var U4=bt(Hn,r=>Math.acos(r)),a$={kernelName:Hn,backendName:"cpu",kernelFunc:U4};var H4=bt(qn,r=>Math.acosh(r)),l$={kernelName:qn,backendName:"cpu",kernelFunc:H4};function q4(r){let{inputs:t,backend:e}=r,o=t;Y(t,"addN");let n=o.map(a=>e.data.get(a.dataId).values),s=pt(o[0].shape,o[0].dtype),i=s.values;for(let a=0;a<o.length;a++){let l=n[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return e.makeTensorInfo(s.shape,s.dtype,s.values)}var u$={kernelName:pi,backendName:"cpu",kernelFunc:q4};function K4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"all");let a=y.parseAxisParam(s,n.shape),l=a,u=N.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),l=N.getInnerMostAxes(l.length,n.shape.length)),N.assertAxesAreInnerMostDims("all",l,c.shape.length);let[p,m]=N.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let I=d[b+C];w=w&&I}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=N.expandShapeToKeepDim(p,a),b=_t({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var c$={kernelName:au,backendName:"cpu",kernelFunc:K4};function j4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"any");let a=y.parseAxisParam(s,n.shape),l=a,u=N.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),l=N.getInnerMostAxes(l.length,n.shape.length)),N.assertAxesAreInnerMostDims("any",l,c.shape.length);let[p,m]=N.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let I=d[b+C];w=w||I}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=N.expandShapeToKeepDim(p,a),b=_t({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var p$={kernelName:lu,backendName:"cpu",kernelFunc:j4};function X4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMax");let i=y.parseAxisParam(s,n.shape),a=N.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=ge({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=N.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],N.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[c,p]=N.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*h,b=d[x],w=0;for(let C=0;C<h;++C){let I=d[x+C];I>b&&(b=I,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var m$={kernelName:mi,backendName:"cpu",kernelFunc:X4};function Y4(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMin");let i=y.parseAxisParam(s,n.shape),a=N.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=ge({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=N.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],N.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[c,p]=N.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*h,b=d[x],w=0;for(let C=0;C<h;++C){let I=d[x+C];I<b&&(b=I,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var f$={kernelName:fi,backendName:"cpu",kernelFunc:Y4};var Z4=bt(Kn,r=>Math.asin(r)),h$={kernelName:Kn,backendName:"cpu",kernelFunc:Z4};var J4=bt(jn,r=>Math.asinh(r)),d$={kernelName:jn,backendName:"cpu",kernelFunc:J4};var Q4=bt(Xn,r=>Math.atan(r)),g$={kernelName:Xn,backendName:"cpu",kernelFunc:Q4};var tH=zt((r,t)=>Math.atan2(r,t)),eH=Vt(Zn,tH),x$={kernelName:Zn,backendName:"cpu",kernelFunc:eH};var rH=bt(Yn,r=>Math.atanh(r)),y$={kernelName:Yn,backendName:"cpu",kernelFunc:rH};function Ap(r,t,e,o,n,s){let i=n.strideHeight,a=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,p=n.effectiveFilterWidth,m=n.padInfo.top,f=n.padInfo.left,h=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,d=pt(n.outShape,e),g=d.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],w=n.outShape[3];for(let C=0;C<n.batchSize;++C){let I=C*x,$=C*o[0];for(let D=0;D<n.inChannels;++D)for(let F=0;F<n.outHeight;++F){let O=F*i-m,L=Math.max(0,O),B=Math.min(n.inHeight,c+O),V=I+F*b;for(let G=0;G<n.outWidth;++G){let U=G*a-f,W=Math.max(0,U),K=Math.min(n.inWidth,p+U),Z=h,q=0,J=0;for(let et=L;et<B;et+=l){let at=$+et*o[1];for(let it=W;it<K;it+=u){let ct=at+it*o[2],lt=r[ct+D];s==="max"&&lt>Z?Z=lt:s==="avg"&&(q+=lt,J++)}if(isNaN(Z))break}let ot=V+G*w+D;g[ot]=s==="avg"?q/J:Z}}}return d}function zx(r,t,e,o,n=!1,s=!1){let i=pt(o.outShape,"int32"),a=o.strideHeight,l=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,p=o.effectiveFilterHeight,m=o.effectiveFilterWidth,f=o.padInfo.top,h=o.padInfo.left,d=pt(t,e,r);for(let g=0;g<o.batchSize;++g)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let w=b*a-f,C=w;for(;C<0;)C+=u;let I=Math.min(o.inHeight,p+w);for(let $=0;$<o.outWidth;++$){let D=$*l-h,F=D;for(;F<0;)F+=c;let O=Math.min(o.inWidth,m+D),L=Number.NEGATIVE_INFINITY,B=-1;for(let V=C;V<I;V+=u){let G=V-w;for(let U=F;U<O;U+=c){let W=U-D,K=d.get(g,V,U,x);K>L&&(L=K,n?B=s?((g*o.inHeight+V)*o.inWidth+U)*o.inChannels+x:(V*o.inWidth+U)*o.inChannels+x:B=G*m+W)}}i.set(B,g,b,$,x)}}return i}function Mx(r,t,e,o,n,s){let i=n.strideDepth,a=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,p=n.dilationWidth,m=n.effectiveFilterDepth,f=n.effectiveFilterHeight,h=n.effectiveFilterWidth,d=n.padInfo.front,g=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=pt(n.outShape,e),C=w.values,I=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],$=n.outShape[2]*n.outShape[3]*n.outShape[4],D=n.outShape[3]*n.outShape[4],F=n.outShape[4];for(let O=0;O<n.batchSize;++O){let L=O*I,B=O*o[0];for(let V=0;V<n.inChannels;++V)for(let G=0;G<n.outDepth;++G){let U=G*i-d,W=U;for(;W<0;)W+=u;let K=Math.min(n.inDepth,m+U),Z=L+G*$;for(let q=0;q<n.outHeight;++q){let J=q*a-g,ot=J;for(;ot<0;)ot+=c;let et=Math.min(n.inHeight,f+J),at=Z+q*D;for(let it=0;it<n.outWidth;++it){let ct=it*l-x,lt=ct;for(;lt<0;)lt+=p;let mt=Math.min(n.inWidth,h+ct),yt=at+it*F,St=b,It=0,Pt=0;for(let se=W;se<K;se+=u){let me=B+se*o[1];for(let ye=ot;ye<et;ye+=c){let ve=me+ye*o[2];for(let ae=lt;ae<mt;ae+=p){let Re=ve+ae*o[3],Oe=r[Re+V];if(s==="max"&&Oe>St?St=Oe:s==="avg"&&(It+=Oe,Pt++),isNaN(St))break}if(isNaN(St))break}if(isNaN(St))break}let Mt=yt+V;C[Mt]=s==="avg"?It/Pt:St}}}}return w}function b$(r,t){let e=pt(t.outShape,"int32"),o=t.strideDepth,n=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,m=t.padInfo.front,f=t.padInfo.top,h=t.padInfo.left;for(let d=0;d<t.batchSize;++d)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){let b=x*o-m,w=b;for(;w<0;)w+=i;let C=Math.min(t.inDepth,u+b);for(let I=0;I<t.outHeight;++I){let $=I*n-f,D=$;for(;D<0;)D+=a;let F=Math.min(t.inHeight,c+$);for(let O=0;O<t.outWidth;++O){let L=O*s-h,B=L;for(;B<0;)B+=l;let V=Math.min(t.inWidth,p+L),G=Number.NEGATIVE_INFINITY,U=-1;for(let W=w;W<C;W+=i){let K=W-b;for(let Z=D;Z<F;Z+=a){let q=Z-$;for(let J=B;J<V;J+=l){let ot=J-L,et=r.get(d,W,Z,J,g);et>=G&&(G=et,U=K*c*p+q*c+ot)}}}e.set(U,d,x,I,O,g)}}}return e}function oH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(N.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=N.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=fr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=Ap(m,n.shape,n.dtype,f,c,"avg");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var w$={kernelName:hi,backendName:"cpu",kernelFunc:oH};function nH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"avgPool3d");let c=N.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=Mx(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"avg");return e.makeTensorInfo(m.shape,"float32",m.values)}var C$={kernelName:di,backendName:"cpu",kernelFunc:nH};function sH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"avgPool3DGrad");let c=N.computePool3DInfo(s.shape,i,a,1,l,u),p=c.strideDepth,m=c.strideHeight,f=c.strideWidth,h=c.filterDepth,d=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,w=c.dilationWidth,C=c.effectiveFilterDepth,I=c.effectiveFilterHeight,$=c.effectiveFilterWidth,D=C-1-c.padInfo.front,F=$-1-c.padInfo.left,O=I-1-c.padInfo.top,L=pt(s.shape,"float32"),B=1/(h*d*g),V=e.bufferSync(n);for(let G=0;G<c.batchSize;++G)for(let U=0;U<c.inChannels;++U)for(let W=0;W<c.inDepth;++W)for(let K=0;K<c.inHeight;++K)for(let Z=0;Z<c.inWidth;++Z){let q=W-D,J=K-O,ot=Z-F,et=0;for(let at=0;at<C;at+=x){let it=(q+at)/p;if(!(it<0||it>=c.outDepth||Math.floor(it)!==it))for(let ct=0;ct<I;ct+=b){let lt=(J+ct)/m;if(!(lt<0||lt>=c.outHeight||Math.floor(lt)!==lt))for(let mt=0;mt<$;mt+=w){let yt=(ot+mt)/f;if(yt<0||yt>=c.outWidth||Math.floor(yt)!==yt)continue;et+=V.get(G,it,lt,yt,U)}}}L.set(et*B,G,W,K,Z,U)}return e.makeTensorInfo(L.shape,L.dtype,L.values)}var v$={kernelName:cu,backendName:"cpu",kernelFunc:sH};function iH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Y([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=N.computePool2DInfo(i.shape,a,l,1,u),p=c.strideHeight,m=c.strideWidth,f=c.filterHeight,h=c.filterWidth,d=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,w=b-1-c.padInfo.left,C=x-1-c.padInfo.top,I=pt(i.shape,"float32"),$=1/(f*h),D=e.data.get(n.dataId).values,F=pt(n.shape,"float32",D);for(let O=0;O<c.batchSize;++O)for(let L=0;L<c.inChannels;++L)for(let B=0;B<c.inHeight;++B)for(let V=0;V<c.inWidth;++V){let G=B-C,U=V-w,W=0;for(let K=0;K<x;K+=d){let Z=(G+K)/p;if(!(Z<0||Z>=c.outHeight||Math.floor(Z)!==Z))for(let q=0;q<b;q+=g){let J=(U+q)/m;if(J<0||J>=c.outWidth||Math.floor(J)!==J)continue;W+=F.get(O,Z,J,L)}}I.set(W*$,O,B,V,L)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}var S$={kernelName:uu,backendName:"cpu",kernelFunc:iH};function aH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,scale:s,offset:i,mean:a,variance:l}=t;y.assert(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Y([n,a,l,s,i],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=e.data.get(n.dataId).values,p=e.data.get(a.dataId).values,m=e.data.get(l.dataId).values,f=s?e.data.get(s.dataId).values:new Float32Array([1]),h=i?e.data.get(i.dataId).values:new Float32Array([0]),d=new Float32Array(c.length),g=h.length,x=f.length,b=m.length,w=p.length,C=0,I=0,$=0,D=0;for(let F=0;F<c.length;++F)d[F]=h[C++]+(c[F]-p[I++])*f[$++]/Math.sqrt(m[D++]+u),C>=g&&(C=0),I>=w&&(I=0),$>=x&&($=0),D>=b&&(D=0);return e.makeTensorInfo(n.shape,n.dtype,d)}var T$={kernelName:ki,backendName:"cpu",kernelFunc:aH};function lH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;Y([n],"batchToSpaceND");let a=s.reduce((x,b)=>x*b),l=N.getReshaped(n.shape,s,a),u=N.getPermuted(l.length,s.length),c=N.getReshapedPermuted(n.shape,s,a),p=N.getSliceBeginCoords(i,s.length),m=N.getSliceSize(c,i,s.length),f=_t({inputs:{x:n},backend:e,attrs:{shape:l}}),h=ge({inputs:{x:f},backend:e,attrs:{perm:u}}),d=_t({inputs:{x:h},backend:e,attrs:{shape:c}}),g=Vo({inputs:{x:d},backend:e,attrs:{begin:p,size:m}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var I$={kernelName:xi,backendName:"cpu",kernelFunc:lH};function uH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=Np(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var N$={kernelName:pu,backendName:"cpu",kernelFunc:uH};function cH(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=N.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var k$={kernelName:mu,backendName:"cpu",kernelFunc:cH};var pH=bt(Qn,(r,t)=>{let e=t;return r>e.clipValueMax?e.clipValueMax:r<e.clipValueMin?e.clipValueMin:r}),E$={kernelName:Qn,backendName:"cpu",kernelFunc:pH};var mH=r=>{let{x:t}=r.inputs,e=r.backend,o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId),s=n.complexTensorInfos.real,i=n.complexTensorInfos.imag,a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values;for(let u=0;u<a.length;u++){let c=a[u],p=l[u];o[u]=Math.hypot(c,p)}return e.makeOutput(o,t.shape,"float32")},$$={kernelName:yi,backendName:"cpu",kernelFunc:mH};function Pn(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.imag,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var A$={kernelName:Du,backendName:"cpu",kernelFunc:Pn};function Ra(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=N.computeOutShape(t.map(d=>d.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(d=>y.sizeFromShape(d.shape)>0);if(a.length===1)return fr({inputs:{x:a[0]},backend:e});let l=a.map(d=>d.shape);if(N.assertParamsConsistent(l,s),a[0].dtype==="complex64"){let d=a.map(C=>Po({inputs:{input:C},backend:e})),g=a.map(C=>Pn({inputs:{input:C},backend:e})),x=Ra({inputs:d,backend:e,attrs:{axis:s}}),b=Ra({inputs:g,backend:e,attrs:{axis:s}}),w=Ue({inputs:{real:x,imag:b},backend:e});return d.forEach(C=>e.disposeIntermediateTensorInfo(C)),g.forEach(C=>e.disposeIntermediateTensorInfo(C)),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),w}let u=a.map(d=>{let g=y.sizeFromShape(d.shape.slice(s));return _t({inputs:{x:d},backend:e,attrs:{shape:[-1,g]}})}),c=u.map(d=>({vals:e.data.get(d.dataId).values,shape:d.shape}));i=N.computeOutShape(u.map(d=>d.shape),1);let p=u[0].shape[0]===1,m=vx(c,i,t[0].dtype,p),f=N.computeOutShape(a.map(d=>d.shape),s),h=e.makeTensorInfo(f,t[0].dtype,m);return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var D$={kernelName:bi,backendName:"cpu",kernelFunc:Ra};function MC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o;Y([n,s],"conv2d");let p=N.convertConv2DDataFormat(l),m=N.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f=m.filterHeight,h=m.filterWidth,d=m.dilationHeight,g=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,w=m.dataFormat==="channelsLast",C=new Ut(m.outShape,n.dtype),I=y.computeStrides(n.shape),$=y.computeStrides(s.shape),D=I[0],F=w?I[1]:I[2],O=w?I[2]:1,L=w?1:I[1],B=C.strides[0],V=w?C.strides[1]:C.strides[2],G=w?C.strides[2]:1,U=w?1:C.strides[1],W=e.data.get(n.dataId).values,K=e.data.get(s.dataId).values,Z=C.values;for(let q=0;q<m.batchSize;++q){let J=q*D,ot=q*B;for(let et=0;et<m.outHeight;++et){let at=ot+et*V,it=et*m.strideHeight-b;for(let ct=0;ct<f;++ct){let lt=it+ct*d;if(lt<0||lt>=m.inHeight)continue;let mt=ct*$[0],yt=J+lt*F;for(let St=0;St<m.outWidth;++St){let It=at+St*G,Pt=St*m.strideWidth-x;for(let Mt=0;Mt<h;++Mt){let se=Pt+Mt*g;if(se<0||se>=m.inWidth)continue;let me=mt+Mt*$[1],ye=yt+se*O,ve=me;for(let ae=0;ae<m.inChannels;++ae){let Re=W[ye+ae*L];for(let Oe=0;Oe<m.outChannels;++Oe)Z[It+Oe*U]+=Re*K[ve+Oe];ve+=m.outChannels}}}}}}return e.makeTensorInfo(C.shape,C.dtype,Z)}var R$={kernelName:wi,backendName:"cpu",kernelFunc:MC};function fH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"conv2dBackpropFilter");let p=N.convertConv2DDataFormat(l),m=N.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),{strideHeight:f,strideWidth:h,filterHeight:d,filterWidth:g}=m,x=m.dataFormat==="channelsLast",b=new Ut(m.filterShape,"float32"),w=m.padInfo.left,C=m.padInfo.top,I=e.data.get(n.dataId).values,$=e.data.get(s.dataId).values,D=new Ut(n.shape,n.dtype,I),F=new Ut(s.shape,s.dtype,$);for(let O=0;O<d;++O){let L=Math.max(0,Math.ceil((C-O)/f)),B=Math.min(m.outHeight,(m.inHeight+C-O)/f);for(let V=0;V<g;++V){let G=Math.max(0,Math.ceil((w-V)/h)),U=Math.min(m.outWidth,(m.inWidth+w-V)/h);for(let W=0;W<m.inChannels;++W)for(let K=0;K<m.outChannels;++K){let Z=0;for(let q=0;q<m.batchSize;++q)for(let J=L;J<B;++J){let ot=O+J*f-C;for(let et=G;et<U;++et){let at=V+et*h-w;x?Z+=D.get(q,ot,at,W)*F.get(q,J,et,K):Z+=D.get(q,W,ot,at)*F.get(q,K,J,et)}}b.set(Z,O,V,W,K)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var F$={kernelName:hu,backendName:"cpu",kernelFunc:fH};function hH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o;Y([n,s],"conv2dBackpropInput");let p=y.computeStrides(s.shape),m=y.computeStrides(n.shape),f=N.convertConv2DDataFormat(u),h=N.computeConv2DInfo(i,s.shape,a,1,l,c,!1,f),d=new Ut(h.inShape,"float32"),g=d.values,x=e.data.get(n.dataId).values,b=e.data.get(s.dataId).values,[w,C,I]=p,{batchSize:$,filterHeight:D,filterWidth:F,inChannels:O,inHeight:L,inWidth:B,outChannels:V,outHeight:G,outWidth:U,strideHeight:W,strideWidth:K}=h;f=h.dataFormat;let Z=D-1-h.padInfo.top,q=F-1-h.padInfo.left,J=f==="channelsLast",ot=d.strides[0],et=J?d.strides[1]:d.strides[2],at=J?d.strides[2]:1,it=J?1:d.strides[1],ct=m[0],lt=J?m[1]:m[2],mt=J?m[2]:1,yt=J?1:m[1];for(let St=0;St<$;++St)for(let It=0;It<O;++It)for(let Pt=0;Pt<L;++Pt){let Mt=Pt-Z,se=Math.max(0,Math.ceil(Mt/W)),me=Math.min(G,(D+Mt)/W);for(let ye=0;ye<B;++ye){let ve=ye-q,ae=Math.max(0,Math.ceil(ve/K)),Re=Math.min(U,(F+ve)/K),Oe=0;for(let ir=se;ir<me;++ir){let si=ir*W-Mt;for(let no=ae;no<Re;++no){let Ma=no*K-ve,Uo=ct*St+lt*ir+mt*no,Gn=w*(D-1-si)+C*(F-1-Ma)+I*It;for(let ii=0;ii<V;++ii){let ai=x[Uo+yt*ii],li=b[Gn+ii];Oe+=ai*li}}}let Vn=ot*St+et*Pt+at*ye+it*It;g[Vn]=Oe}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}var _$={kernelName:Ci,backendName:"cpu",kernelFunc:hH};function dH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o;Y([n,s],"conv3d");let u=N.computeConv3DInfo(n.shape,s.shape,i,l,a),{filterDepth:c,filterHeight:p,filterWidth:m,dilationDepth:f,dilationHeight:h,dilationWidth:d,padInfo:g}=u,x=g.front,b=g.left,w=g.top,C=new Ut(u.outShape,n.dtype),I=e.data.get(n.dataId).values,$=e.data.get(s.dataId).values,D=C.values,F=y.computeStrides(n.shape),O=y.computeStrides(s.shape);for(let L=0;L<u.batchSize;++L){let B=L*F[0],V=L*C.strides[0];for(let G=0;G<u.outDepth;++G){let U=V+G*C.strides[1],W=G*u.strideDepth-x;for(let K=0;K<c;++K){let Z=W+K*f;if(Z<0||Z>=u.inDepth)continue;let q=K*O[0],J=B+Z*F[1];for(let ot=0;ot<u.outHeight;++ot){let et=U+ot*C.strides[2],at=ot*u.strideHeight-w;for(let it=0;it<p;++it){let ct=at+it*h;if(ct<0||ct>=u.inHeight)continue;let lt=q+it*O[1],mt=J+ct*F[2];for(let yt=0;yt<u.outWidth;++yt){let St=et+yt*u.outChannels,It=yt*u.strideWidth-b;for(let Pt=0;Pt<m;++Pt){let Mt=It+Pt*d;if(Mt<0||Mt>=u.inWidth)continue;let se=lt+Pt*O[2],me=mt+Mt*u.inChannels,ye=se;for(let ve=0;ve<u.inChannels;++ve){let ae=I[me+ve];for(let Re=0;Re<u.outChannels;++Re)D[St+Re]+=ae*$[ye+Re];ye+=u.outChannels}}}}}}}}return e.makeTensorInfo(C.shape,C.dtype,C.values)}var O$={kernelName:vi,backendName:"cpu",kernelFunc:dH};function gH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o;Y([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=N.computeConv3DInfo(n.shape,l,i,1,a),m=p.strideDepth,f=p.strideHeight,h=p.strideWidth,d=p.filterDepth,g=p.filterHeight,x=p.filterWidth,b=new Ut(p.filterShape,"float32"),w=b.values,[C,I,$,D]=b.strides,F=e.data.get(s.dataId).values,[O,L,B,V]=c,G=e.data.get(n.dataId).values,[U,W,K,Z]=u,q=p.padInfo.front,J=p.padInfo.left,ot=p.padInfo.top;for(let et=0;et<d;++et){let at=Math.max(0,Math.ceil((q-et)/m)),it=Math.min(p.outDepth,(p.inDepth+q-et)/m),ct=et*C;for(let lt=0;lt<g;++lt){let mt=Math.max(0,Math.ceil((ot-lt)/f)),yt=Math.min(p.outHeight,(p.inHeight+ot-lt)/f),St=lt*I+ct;for(let It=0;It<x;++It){let Pt=Math.max(0,Math.ceil((J-It)/h)),Mt=Math.min(p.outWidth,(p.inWidth+J-It)/h),se=It*$+St;for(let me=0;me<p.inChannels;++me){let ye=me*D+se;for(let ve=0;ve<p.outChannels;++ve){let ae=0;for(let Re=0;Re<p.batchSize;++Re){let Oe=Re*U,Vn=Re*O;for(let ir=at;ir<it;++ir){let no=(et+ir*m-q)*W+Oe,Ma=ir*L+Vn;for(let Uo=mt;Uo<yt;++Uo){let ii=(lt+Uo*f-ot)*K+no,ai=Uo*B+Ma;for(let li=Pt;li<Mt;++li){let Rb=(It+li*h-J)*Z+ii,Fb=li*V+ai;ae+=G[Rb+me]*F[Fb+ve]}}}}w[ye+ve]=ae}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var L$={kernelName:du,backendName:"cpu",kernelFunc:gH};function xH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o;Y([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=N.computeConv3DInfo(l,s.shape,a,1,i),m=new Ut(p.inShape,"float32"),f=m.values,[h,d,g,x]=m.strides,b=e.data.get(n.dataId).values,[w,C,I,$]=u,D=e.data.get(s.dataId).values,[F,O,L,B]=c,{batchSize:V,filterDepth:G,filterHeight:U,filterWidth:W,inChannels:K,inDepth:Z,inHeight:q,inWidth:J,outChannels:ot,outDepth:et,outHeight:at,outWidth:it,strideDepth:ct,strideHeight:lt,strideWidth:mt}=p,yt=G-1-p.padInfo.front,St=U-1-p.padInfo.top,It=W-1-p.padInfo.left;for(let Pt=0;Pt<V;++Pt)for(let Mt=0;Mt<K;++Mt)for(let se=0;se<Z;++se){let me=se-yt,ye=Math.max(0,Math.ceil(me/ct)),ve=Math.min(et,(G+me)/ct);for(let ae=0;ae<q;++ae){let Re=ae-St,Oe=Math.max(0,Math.ceil(Re/lt)),Vn=Math.min(at,(U+Re)/lt);for(let ir=0;ir<J;++ir){let si=ir-It,no=Math.max(0,Math.ceil(si/mt)),Ma=Math.min(it,(W+si)/mt),Uo=0;for(let Gn=ye;Gn<ve;++Gn){let ii=Gn*ct-me;for(let ai=Oe;ai<Vn;++ai){let li=ai*lt-Re;for(let Xp=no;Xp<Ma;++Xp){let Rb=Xp*mt-si,Fb=w*Pt+C*Gn+I*ai+$*Xp,sL=F*(G-1-ii)+O*(U-1-li)+L*(W-1-Rb)+B*Mt;for(let gh=0;gh<ot;++gh){let iL=b[Fb+gh],aL=D[sL+gh];Uo+=iL*aL}}}}f[h*Pt+d*se+g*ae+x*ir+Mt]=Uo}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}var P$={kernelName:gu,backendName:"cpu",kernelFunc:xH};var yH=bt(ts,r=>Math.cos(r)),z$={kernelName:ts,backendName:"cpu",kernelFunc:yH};var bH=bt(es,r=>Math.cosh(r)),M$={kernelName:es,backendName:"cpu",kernelFunc:bH};function wH(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,[c,p,m,f]=n.shape,h=s.shape[0],[d,g]=a,x=pt([h,d,g,f],"float32"),b=e.data.get(s.dataId).values,w=e.data.get(i.dataId).values,C=e.data.get(n.dataId).values,I=y.computeStrides(n.shape),$=y.computeStrides(x.shape);for(let D=0;D<h;D++){let F=D*4,O=b[F],L=b[F+1],B=b[F+2],V=b[F+3],G=w[D];if(G>=c)continue;let U=d>1?(B-O)*(p-1)/(d-1):0,W=g>1?(V-L)*(m-1)/(g-1):0;for(let K=0;K<d;K++){let Z=d>1?O*(p-1)+K*U:.5*(O+B)*(p-1);if(Z<0||Z>p-1){for(let q=0;q<g;q++)for(let J=0;J<f;J++){let ot=J+q*$[2]+K*$[1]+D*$[0];x.values[ot]=u}continue}if(l==="bilinear"){let q=Math.floor(Z),J=Math.ceil(Z),ot=Z-q;for(let et=0;et<g;et++){let at=g>1?L*(m-1)+et*W:.5*(L+V)*(m-1);if(at<0||at>m-1){for(let mt=0;mt<f;mt++){let yt=mt+et*$[2]+K*$[1]+D*$[0];x.values[yt]=u}continue}let it=Math.floor(at),ct=Math.ceil(at),lt=at-it;for(let mt=0;mt<f;mt++){let yt=mt+it*I[2]+q*I[1]+G*I[0],St=C[yt];yt=mt+ct*I[2]+q*I[1]+G*I[0];let It=C[yt];yt=mt+it*I[2]+J*I[1]+G*I[0];let Pt=C[yt];yt=mt+ct*I[2]+J*I[1]+G*I[0];let Mt=C[yt],se=St+(It-St)*lt,me=Pt+(Mt-Pt)*lt;yt=mt+et*$[2]+K*$[1]+D*$[0],x.values[yt]=se+(me-se)*ot}}}else for(let q=0;q<g;++q){let J=g>1?L*(m-1)+q*W:.5*(L+V)*(m-1);if(J<0||J>m-1){for(let at=0;at<f;at++){let it=at+q*$[2]+K*$[1]+D*$[0];x.values[it]=u}continue}let ot=Math.round(J),et=Math.round(Z);for(let at=0;at<f;at++){let it=at+ot*I[2]+et*I[1]+G*I[0],ct=at+q*$[2]+K*$[1]+D*$[0];x.values[ct]=C[it]}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}var B$={kernelName:yu,backendName:"cpu",kernelFunc:wH};function CH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumprod");let l=N.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=ge({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=N.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Fe(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let w=d(x,b);if(b===0)m[w]=i?1:f[w];else{let C=d(x,b-1);m[w]=i?f[C]*m[C]:f[w]*m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=N.getUndoAxesPermutation(l),b=ge({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var V$={kernelName:xu,backendName:"cpu",kernelFunc:CH};function vH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumsum");let l=N.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=ge({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=N.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Fe(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let w=d(x,b);if(b===0)m[w]=i?0:f[w];else{let C=d(x,b-1);m[w]=i?f[C]+m[C]:f[w]+m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=N.getUndoAxesPermutation(l),b=ge({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var G$={kernelName:Si,backendName:"cpu",kernelFunc:vH};function SH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Np(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=Cx(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var W$={kernelName:bu,backendName:"cpu",kernelFunc:SH};function TH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o;y.assert(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let a=n.shape[0],l=n.shape[1],u=n.shape[2],c=n.shape[3],p=l*s,m=u*s,f=c/(s*s),h=e.data.get(n.dataId).values,d=new Float32Array(a*p*m*f),g=0;for(let x=0;x<a;++x)for(let b=0;b<p;++b){let w=Math.floor(b/s),C=b%s;for(let I=0;I<m;++I){let $=Math.floor(I/s),D=I%s,F=(C*s+D)*f;for(let O=0;O<f;++O){let B=O+F+c*($+u*(w+l*x));d[g++]=h[B]}}}return e.makeTensorInfo([a,p,m,f],n.dtype,d)}var U$={kernelName:wu,backendName:"cpu",kernelFunc:TH};function BC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o;Y([n,s],"depthwiseConv2DNative");let c=y.computeStrides(n.shape),p=y.computeStrides(s.shape),m=l;m==null&&(m=[1,1]),y.assert(N.eitherStridesOrDilationsAreOne(i,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${m}'`);let f=N.computeConv2DInfo(n.shape,s.shape,i,m,a,u,!0),{filterHeight:h,filterWidth:d,dilationHeight:g,dilationWidth:x,padInfo:b}=f,w=b.left,C=b.top,I=f.outChannels/f.inChannels,$=new Ut(f.outShape,n.dtype),D=e.data.get(n.dataId).values,F=e.data.get(s.dataId).values,O=$.values;for(let L=0;L<f.batchSize;++L){let B=L*c[0],V=L*$.strides[0];for(let G=0;G<f.outHeight;++G){let U=V+G*$.strides[1],W=G*f.strideHeight-C;for(let K=0;K<h;++K){let Z=W+K*g;if(Z<0||Z>=f.inHeight)continue;let q=K*p[0],J=B+Z*c[1];for(let ot=0;ot<f.outWidth;++ot){let et=U+ot*$.strides[2],at=ot*f.strideWidth-w;for(let it=0;it<d;++it){let ct=at+it*x;if(ct<0||ct>=f.inWidth)continue;let lt=q+it*p[1],mt=J+ct*f.inChannels,yt=et,St=lt;for(let It=0;It<f.inChannels;++It){let Pt=D[mt+It];for(let Mt=0;Mt<I;++Mt)O[yt+Mt]+=Pt*F[St+Mt];yt+=I,St+=I}}}}}}return e.makeTensorInfo($.shape,$.dtype,$.values)}var H$={kernelName:Ti,backendName:"cpu",kernelFunc:BC};function IH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"depthwiseConv2dNativeBackpropFilter");let p=N.computeConv2DInfo(n.shape,c,i,a,l,u,!0),{strideHeight:m,strideWidth:f,filterHeight:h,filterWidth:d}=p,g=new Ut(p.filterShape,"float32"),x=p.padInfo.left,b=p.padInfo.top,w=p.outChannels/p.inChannels,C=e.data.get(n.dataId).values,I=new Ut(n.shape,n.dtype,C),$=e.data.get(s.dataId).values,D=new Ut(s.shape,s.dtype,$);for(let F=0;F<h;++F){let O=Math.max(0,Math.ceil((b-F)/m)),L=Math.min(p.outHeight,(p.inHeight+b-F)/m);for(let B=0;B<d;++B){let V=Math.max(0,Math.ceil((x-B)/f)),G=Math.min(p.outWidth,(p.inWidth+x-B)/f);for(let U=0;U<p.outChannels;++U){let W=Math.trunc(U/w),K=U%w,Z=0;for(let q=0;q<p.batchSize;++q)for(let J=O;J<L;++J){let ot=F+J*m-b;for(let et=V;et<G;++et){let at=B+et*f-x;Z+=I.get(q,ot,at,W)*D.get(q,J,et,U)}}g.set(Z,F,B,W,K)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}var q$={kernelName:Cu,backendName:"cpu",kernelFunc:IH};function NH(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o;Y([n,s],"depthwiseConv2DNativeBackpropInput");let p=y.computeStrides(n.shape),m=y.computeStrides(s.shape),f=N.computeConv2DInfo(c,s.shape,i,a,l,u,!0),h=new Ut(f.inShape,"float32"),d=h.values,[g,x,b]=h.strides,w=e.data.get(n.dataId).values,[C,I,$]=p,D=e.data.get(s.dataId).values,[F,O,L]=m,{batchSize:B,filterHeight:V,filterWidth:G,inChannels:U,inHeight:W,inWidth:K,outChannels:Z,outHeight:q,outWidth:J,strideHeight:ot,strideWidth:et}=f,at=V-1-f.padInfo.top,it=G-1-f.padInfo.left,ct=Z/U;for(let lt=0;lt<B;++lt)for(let mt=0;mt<U;++mt)for(let yt=0;yt<W;++yt){let St=yt-at,It=Math.max(0,Math.ceil(St/ot)),Pt=Math.min(q,(V+St)/ot);for(let Mt=0;Mt<K;++Mt){let se=Mt-it,me=Math.max(0,Math.ceil(se/et)),ye=Math.min(J,(G+se)/et),ve=0;for(let ae=It;ae<Pt;++ae){let Re=ae*ot-St;for(let Oe=me;Oe<ye;++Oe){let Vn=Oe*et-se,ir=C*lt+I*ae+$*Oe,si=F*(V-1-Re)+O*(G-1-Vn)+L*mt;for(let no=0;no<ct;++no){let Ma=mt*ct+no,Uo=w[ir+Ma],Gn=D[si+no];ve+=Uo*Gn}}}d[g*lt+x*yt+b*Mt+mt]=ve}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}var K$={kernelName:vu,backendName:"cpu",kernelFunc:NH};function kH(r){let{inputs:t,backend:e}=r,{x:o}=t,n=y.sizeFromShape(o.shape),s=e.data.get(o.dataId).values,i=pt([n,n],o.dtype),a=i.values;for(let u=0;u<s.length;u++)a[u*n+u]=s[u];let l=[...o.shape,...o.shape];return e.makeTensorInfo(l,i.dtype,i.values)}var j$={kernelName:Su,backendName:"cpu",kernelFunc:kH};var X$={kernelName:Ii,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n}=r,{strides:s,pad:i,dilations:a}=e,l=t,u=l.data.get(o.dataId).values,c=o.shape.length,p=l.data.get(n.dataId).values,m=n.shape.length,{batchSize:f,inHeight:h,inWidth:d,inChannels:g,outHeight:x,outWidth:b,padInfo:w,strideHeight:C,strideWidth:I,filterHeight:$,filterWidth:D,dilationHeight:F,dilationWidth:O,outShape:L}=N.computeDilation2DInfo(o.shape,n.shape,s,i,"NHWC",a),B=y.sizeFromShape(L),V=L.length,G=y.getArrayFromDType(o.dtype,B);for(let W=0;W<f;++W)for(let K=0;K<x;++K){let Z=K*C-w.top;for(let q=0;q<b;++q){let J=q*I-w.left;for(let ot=0;ot<g;++ot){let et=Number.MIN_SAFE_INTEGER;for(let it=0;it<$;++it){let ct=Z+it*F;if(ct>=0&&ct<h)for(let lt=0;lt<D;++lt){let mt=J+lt*O;if(mt>=0&&mt<d){let yt=y.locToIndex([W,ct,mt,ot],c,y.computeStrides(o.shape)),St=y.locToIndex([it,lt,ot],m,y.computeStrides(n.shape)),It=u[yt]+p[St];It>et&&(et=It)}}}let at=y.locToIndex([W,K,q,ot],V,y.computeStrides(L));G[at]=et}}}return{dataId:l.write(y.toTypedArray(G,o.dtype),L,o.dtype),shape:L,dtype:o.dtype}}};var Y$={kernelName:om,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:I,filterWidth:$,dilationHeight:D,dilationWidth:F,outShape:O}=N.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===O.length,()=>`Error in ${om}, dy must have the same rank as output ${O.length}, but got ${s.rank}`);let L=y.toNestedArray(O,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let G=0;G<m;++G)for(let U=0;U<g;++U){let W=U*w-b.top;for(let K=0;K<x;++K){let Z=K*C-b.left;for(let q=0;q<d;++q){let J=Number.MIN_SAFE_INTEGER,ot=0,et=0;for(let at=0;at<I;++at){let it=W+at*D;if(it>=0&&it<f)for(let ct=0;ct<$;++ct){let lt=Z+ct*F;if(lt>=0&&lt<h){let mt=c[G][it][lt][q]+p[at][ct][q];mt>J&&(J=mt,ot=at,et=ct)}}}B[ot][et][q]+=L[G][U][K][q]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var Z$={kernelName:rm,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:I,filterWidth:$,dilationHeight:D,dilationWidth:F,outShape:O}=N.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===O.length,()=>`Error in ${rm}, dy must have the same rank as output ${O.length}, but got ${s.rank}`);let L=y.toNestedArray(O,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let G=0;G<m;++G)for(let U=0;U<g;++U){let W=U*w-b.top;for(let K=0;K<x;++K){let Z=K*C-b.left;for(let q=0;q<d;++q){let J=Number.MIN_SAFE_INTEGER,ot=W<0?0:W,et=Z<0?0:Z;for(let at=0;at<I;++at){let it=W+at*D;if(it>=0&&it<f)for(let ct=0;ct<$;++ct){let lt=Z+ct*F;if(lt>=0&&lt<h){let mt=c[G][it][lt][q]+p[at][ct][q];mt>J&&(J=mt,ot=it,et=lt)}}}B[G][ot][et][q]+=L[G][U][K][q]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function ti(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"sum");let a;n.dtype==="bool"?a=zo({inputs:{x:n},backend:e,attrs:{dtype:"int32"}}):a=fr({inputs:{x:n},backend:e});let l=a.shape.length,u=y.parseAxisParam(s,a.shape),c=N.getAxesPermutation(u,l),p=u,m=a;c!=null&&(m=ge({inputs:{x:a},backend:e,attrs:{perm:c}}),p=N.getInnerMostAxes(p.length,l)),N.assertAxesAreInnerMostDims("sum",p,m.shape.length);let[f,h]=N.computeOutAndReduceShapes(m.shape,p),d=N.upcastType(m.dtype,"int32"),g=Tp(e,f,d),x=y.sizeFromShape(h),b=e.data.get(g.dataId).values,w=e.data.get(m.dataId).values;for(let C=0;C<b.length;++C){let I=C*x,$=0;for(let D=0;D<x;++D)$+=w[I+D];b[C]=$}if(i){let C=N.expandShapeToKeepDim(g.shape,u),I=g;g=_t({inputs:{x:g},backend:e,attrs:{shape:C}}),e.disposeIntermediateTensorInfo(I)}return e.disposeIntermediateTensorInfo(a),c!=null&&e.disposeIntermediateTensorInfo(m),g}var J$={kernelName:Yi,backendName:"cpu",kernelFunc:ti};function EH(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=N.decodeEinsumEquation(n,s.length);N.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=N.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=N.getEinsumPermutation(f,l[g]),w;N.isIdentityPermutation(x)?w=s[g]:(w=ge({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let I=0;I<b.length;++I)C.splice(b[I],0,1);y.arraysEqual(w.shape,C)||(w=_t({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=Bl({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=ti({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var Q$={kernelName:Tu,backendName:"cpu",kernelFunc:EH};function $H(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t;Y([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),i=e.data.get(n.dataId).values,a=e.data.get(o.dataId).values;for(let l=0;l<i.length;++l){let u=i[l];u>=1?s[l]=a[l]:s[l]=a[l]*(u+1)}return e.makeTensorInfo(n.shape,"float32",s)}var t2={kernelName:Iu,backendName:"cpu",kernelFunc:$H};var AH=N.ERF_P,DH=N.ERF_A1,RH=N.ERF_A2,FH=N.ERF_A3,_H=N.ERF_A4,OH=N.ERF_A5,LH=bt(ns,r=>{let t=Math.sign(r),e=Math.abs(r),o=1/(1+AH*e);return t*(1-((((OH*o+_H)*o+FH)*o+RH)*o+DH)*o*Math.exp(-e*e))}),e2={kernelName:ns,backendName:"cpu",kernelFunc:LH};function Dp(r){let{inputs:t,backend:e,attrs:o}=r,{input:n}=t,{dim:s}=o,i=n.shape.length,a=n.shape.slice(),l=s;return s<0&&(y.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),a.splice(l,0,1),_t({inputs:{x:n},backend:e,attrs:{shape:a}})}var r2={kernelName:Ni,backendName:"cpu",kernelFunc:Dp};var PH=zt((r,t)=>r/t),Qf=Vt(rs,PH),th={kernelName:rs,backendName:"cpu",kernelFunc:Qf};function Bx(r,t,e){let o=r.shape,n=o[0],s=o[1],i=e.data.get(r.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[n,s],c=y.sizeFromShape(u),p=y.getTypedArrayFromDType("float32",c),m=y.getTypedArrayFromDType("float32",c);for(let g=0;g<n;g++){let x=Vo({inputs:{x:a},backend:e,attrs:{begin:[g,0],size:[1,s]}}),b=Vo({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,s]}}),w=Ue({inputs:{real:x,imag:b},backend:e}),{real:C,imag:I}=zH(w,t,e),$=N.mergeRealAndImagArrays(C,I);for(let D=0;D<s;D++){let F=N.getComplexWithIndex($,D);p[g*s+D]=F.real,m[g*s+D]=F.imag}e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w)}let f=e.makeTensorInfo(u,"float32",p),h=e.makeTensorInfo(u,"float32",m),d=Ue({inputs:{real:f,imag:h},backend:e});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}function zH(r,t,e){let o=y.sizeFromShape(r.shape),n=e.data.get(r.dataId),s=e.data.get(n.complexTensorInfos.real.dataId).values,i=e.data.get(n.complexTensorInfos.imag.dataId).values;if(MH(o)){let a=VC(s,i,o,t,e),l=[r.shape[0],r.shape[1]];if(t){let u=e.makeTensorInfo(l,"float32",a.real),c=e.makeTensorInfo(l,"float32",a.imag),p=e.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=fr({inputs:{x:p},backend:e}),f=th.kernelFunc({inputs:{a:u,b:p},backend:e}),h=th.kernelFunc({inputs:{a:c,b:m},backend:e}),d=e.data.get(f.dataId).values,g=e.data.get(h.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),{real:d,imag:g}}return a}else{let a=N.mergeRealAndImagArrays(s,i),l=BH(a,o,t);return N.splitRealAndImagArrays(l)}}function MH(r){return(r&r-1)===0}function VC(r,t,e,o,n){if(e===1)return{real:r,imag:t};let s=N.mergeRealAndImagArrays(r,t),i=e/2,a=N.complexWithEvenIndex(s),l=a.real,u=a.imag,c=[l.length],p=n.makeTensorInfo(c,"float32",l),m=n.makeTensorInfo(c,"float32",u),f=Ue({inputs:{real:p,imag:m},backend:n}),h=N.complexWithOddIndex(s),d=h.real,g=h.imag,x=[d.length],b=n.makeTensorInfo(x,"float32",d),w=n.makeTensorInfo(x,"float32",g),C=Ue({inputs:{real:b,imag:w},backend:n}),I=VC(l,u,i,o,n),$=I.real,D=I.imag,F=[$.length],O=n.makeTensorInfo(F,"float32",$),L=n.makeTensorInfo(F,"float32",D),B=Ue({inputs:{real:O,imag:L},backend:n}),V=VC(d,g,i,o,n),G=V.real,U=V.imag,W=[G.length],K=n.makeTensorInfo(W,"float32",G),Z=n.makeTensorInfo(W,"float32",U),q=Ue({inputs:{real:K,imag:Z},backend:n}),J=N.exponents(e,o),ot=[J.real.length],et=n.makeTensorInfo(ot,"float32",J.real),at=n.makeTensorInfo(ot,"float32",J.imag),it=Ue({inputs:{real:et,imag:at},backend:n}),ct=Bl({inputs:{a:it,b:q},backend:n}),lt=Ln({inputs:{a:B,b:ct},backend:n}),mt=Zf({inputs:{a:B,b:ct},backend:n}),yt=Po({inputs:{input:lt},backend:n}),St=Po({inputs:{input:mt},backend:n}),It=Pn({inputs:{input:lt},backend:n}),Pt=Pn({inputs:{input:mt},backend:n}),Mt=Ra({inputs:[yt,St],backend:n,attrs:{axis:0}}),se=Ra({inputs:[It,Pt],backend:n,attrs:{axis:0}}),me=n.data.get(Mt.dataId).values,ye=n.data.get(se.dataId).values;return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(L),n.disposeIntermediateTensorInfo(B),n.disposeIntermediateTensorInfo(K),n.disposeIntermediateTensorInfo(Z),n.disposeIntermediateTensorInfo(q),n.disposeIntermediateTensorInfo(et),n.disposeIntermediateTensorInfo(at),n.disposeIntermediateTensorInfo(it),n.disposeIntermediateTensorInfo(ct),n.disposeIntermediateTensorInfo(lt),n.disposeIntermediateTensorInfo(mt),n.disposeIntermediateTensorInfo(yt),n.disposeIntermediateTensorInfo(It),n.disposeIntermediateTensorInfo(St),n.disposeIntermediateTensorInfo(Pt),n.disposeIntermediateTensorInfo(Mt),n.disposeIntermediateTensorInfo(se),{real:me,imag:ye}}function BH(r,t,e){let o=new Float32Array(t*2);for(let n=0;n<t;n++){let s=0,i=0;for(let a=0;a<t;a++){let l=N.exponent(n*a,t,e),u=N.getComplexWithIndex(r,a);s+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}e&&(s/=t,i/=t),N.assignToTypedArray(o,s,i,n)}return o}function VH(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=_t({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=Bx(a,!1,e),u=_t({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var o2={kernelName:Nu,backendName:"cpu",kernelFunc:VH};function eh(r){let{backend:t,attrs:e}=r,{shape:o,value:n,dtype:s}=e,i=s||y.inferDtype(n),a=y.getArrayFromDType(i,y.sizeFromShape(o));return GH(a,n,i),t.makeTensorInfo(o,i,a)}var n2={kernelName:ku,backendName:"cpu",kernelFunc:eh};function GH(r,t,e){r.fill(t)}var s2={kernelName:Eu,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,n=e,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[i,a,l,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<i;m++){let f=m*l*a*u;for(let h=0;h<a;h++){let d=h*(l*u);for(let g=0;g<l;g++){let x=g*u;for(let b=0;b<u;b++){let w=Math.round(l-g-1),C=f+d+x+b,I=c[C];if(w>=0&&w<l){let $=w*u,D=f+d+$+b;I=c[D]}s[C]=I}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var WH=zt((r,t)=>Math.floor(r/t)),UH=Vt(ls,WH,null,"int32"),i2={kernelName:ls,backendName:"cpu",kernelFunc:UH};function HH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=MC({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;if(c==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){let x=_t({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});d=Ln({inputs:{a:d,b:x},backend:e}),e.disposeIntermediateTensorInfo(x)}else d=Ln({inputs:{a:d,b:i},backend:e});e.disposeIntermediateTensorInfo(g)}if(f){let g=d;if(c==="NCHW"&&f==="prelu"&&a.shape.length===1&&a.shape[0]!==1){let x=_t({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});d=Vl(e,d,f,x,h),e.disposeIntermediateTensorInfo(x)}else d=Vl(e,d,f,a,h);e.disposeIntermediateTensorInfo(g)}return d}var a2={kernelName:Ja,backendName:"cpu",kernelFunc:HH};function qH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=BC({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;d=Ln({inputs:{a:d,b:i},backend:e}),e.disposeIntermediateTensorInfo(g)}if(f){let g=d;d=Vl(e,d,f,a,h),e.disposeIntermediateTensorInfo(g)}return d}var l2={kernelName:Qa,backendName:"cpu",kernelFunc:qH};function KH(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=y.sizeFromShape(o.shape),i=n.shape,a=i[i.length-1],[l,u,c,p]=N.prepareAndValidate(o,n);if(u===0)return e.makeTensorInfo(l,o.dtype,[]);let m=e.data.get(n.dataId).values,f=e.bufferSync(o),h=Sx(m,f,o.dtype,u,a,c,p,o.shape,s);return e.makeTensorInfo(l,o.dtype,h.values)}var u2={kernelName:$u,backendName:"cpu",kernelFunc:KH};function jH(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o;Y([n,s],"gatherV2");let l=y.parseAxisParam(i,n.shape)[0],u=e.data.get(s.dataId).values,c=n.shape[l];for(let C=0;C<u.length;++C){let I=u[C];y.assert(I<=c-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${c-1}]`)}let p=a;a==null&&(p=0);let m=y.sizeFromShape(s.shape),f=N.segment_util.collectGatherOpShapeInfo(n,s,l,p),h=_t({inputs:{x:n},backend:e,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),d=_t({inputs:{x:s},backend:e,attrs:{shape:[f.batchSize,m/f.batchSize]}}),g=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],x=e.bufferSync(d),b=e.bufferSync(h),w=Tx(b,x,g);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.makeTensorInfo(f.outputShape,w.dtype,w.values)}var c2={kernelName:Ei,backendName:"cpu",kernelFunc:jH};function XH(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=_t({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=Bx(a,!0,e),u=_t({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var p2={kernelName:Au,backendName:"cpu",kernelFunc:XH};var YH=bt(cs,r=>Number.isFinite(r)?1:0,"bool"),m2={kernelName:cs,backendName:"cpu",kernelFunc:YH};var ZH=bt(ps,r=>Math.abs(r)===1/0?1:0,"bool"),f2={kernelName:ps,backendName:"cpu",kernelFunc:ZH};var JH=bt(ms,r=>Number.isNaN(r)?1:0,"bool"),h2={kernelName:ms,backendName:"cpu",kernelFunc:JH};function QH(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=Ix(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var d2={kernelName:Ru,backendName:"cpu",kernelFunc:QH};var tq=bt(hs,r=>Math.log1p(r)),g2={kernelName:hs,backendName:"cpu",kernelFunc:tq};var eq=zt((r,t)=>r&&t),rq=Vt(Ka,eq,null,"bool"),x2={kernelName:Ka,backendName:"cpu",kernelFunc:rq};var oq=bt(ja,r=>r?0:1,"bool"),y2={kernelName:ja,backendName:"cpu",kernelFunc:oq};var nq=zt((r,t)=>r||t),sq=Vt(Xa,nq,null,"bool"),b2={kernelName:Xa,backendName:"cpu",kernelFunc:sq};function iq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o;Y(n,"LRN");let u=n.shape[3],c=u-1,p=e.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),f=new Float32Array(m);function h(d){let g=d%u,x=d-g+Math.max(0,g-s),b=d-g+Math.min(g+s,c),w=0;for(;x<=b;x++){let C=p[x];w+=C*C}return w}for(let d=0;d<m;d++){let g=h(d),x=p[d]*Math.pow(i+a*g,-l);f[d]=x}return e.makeTensorInfo(n.shape,n.dtype,f)}var w2={kernelName:Ai,backendName:"cpu",kernelFunc:iq};function aq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o;Y(i,"LRNGrad");let p=y.sizeFromShape(i.shape),m=i.shape[3],f=e.data.get(i.dataId).values,h=e.data.get(n.dataId).values,d=e.data.get(s.dataId).values,g=new Float32Array(p),x=p;for(let b=0;b<x;b++){let w=b%m,C=b-w+Math.max(0,w-a),I=b-w+Math.min(m,w+a+1),$=0;for(let D=C;D<I;D++)$+=Math.pow(h[D],2);$=u*$+l;for(let D=C;D<I;D++){let F=-2*u*c*h[D]*d[b]/$;b===D&&(F+=Math.pow($,-c)),F*=f[b],g[D]+=F}}return e.makeTensorInfo(i.shape,n.dtype,g)}var C2={kernelName:Fu,backendName:"cpu",kernelFunc:aq};function GC(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=e,l=n.shape,u=l.length,c=y.parseAxisParam(s,l),p=c,m=N.getAxesPermutation(p,u),f=a.data.get(n.dataId).values;if(m!=null){let C=new Array(u);for(let I=0;I<C.length;I++)C[I]=l[m[I]];f=kp(f,l,n.dtype,m,C),p=N.getInnerMostAxes(p.length,u),l=C}Y(n,"max"),N.assertAxesAreInnerMostDims("max",p,u);let[h,d]=N.computeOutAndReduceShapes(l,p),g=y.sizeFromShape(d),x=Nx(f,g,h,n.dtype),b=a.write(x,h,n.dtype),w=h;return i&&(w=N.expandShapeToKeepDim(h,c)),{dataId:b,shape:w,dtype:n.dtype}}var v2={kernelName:Di,backendName:"cpu",kernelFunc:GC};function lq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(N.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=N.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=fr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=Ap(m,n.shape,n.dtype,f,c,"max");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var S2={kernelName:Ri,backendName:"cpu",kernelFunc:lq};function uq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"maxPool3d");let c=N.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=Mx(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"max");return e.makeTensorInfo(m.shape,"float32",m.values)}var T2={kernelName:Fi,backendName:"cpu",kernelFunc:uq};function cq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"maxPool3DGrad");let c=N.computePool3DInfo(s.shape,i,a,1,l,u),p=e.bufferSync(s),m=b$(p,c),f=c.strideDepth,h=c.strideHeight,d=c.strideWidth,g=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,C=c.effectiveFilterHeight,I=c.effectiveFilterWidth,$=w-1-c.padInfo.front,D=I-1-c.padInfo.left,F=C-1-c.padInfo.top,O=pt(s.shape,"float32"),L=e.bufferSync(n);for(let B=0;B<c.batchSize;++B)for(let V=0;V<c.inChannels;++V)for(let G=0;G<c.inDepth;++G)for(let U=0;U<c.inHeight;++U)for(let W=0;W<c.inWidth;++W){let K=G-$,Z=U-F,q=W-D,J=0;for(let ot=0;ot<w;ot+=g){let et=(K+ot)/f;if(!(et<0||et>=c.outDepth||Math.floor(et)!==et))for(let at=0;at<C;at+=x){let it=(Z+at)/h;if(!(it<0||it>=c.outHeight||Math.floor(it)!==it))for(let ct=0;ct<I;ct+=b){let lt=(q+ct)/d;if(lt<0||lt>=c.outWidth||Math.floor(lt)!==lt)continue;let mt=w*C*I-1-m.get(B,et,it,lt,V),yt=ot*C*I+at*I+ct,St=mt===yt?1:0;if(St===0)continue;J+=L.get(B,et,it,lt,V)*St}}}O.set(J,B,G,U,W,V)}return e.makeTensorInfo(O.shape,O.dtype,O.values)}var I2={kernelName:Ou,backendName:"cpu",kernelFunc:cq};function pq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Y([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=N.computePool2DInfo(a.shape,l,u,1,c,p),f=e.data.get(a.dataId).values,h=pt(m.outShape,a.dtype,zx(f,a.shape,a.dtype,m).values),d=m.strideHeight,g=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,w=m.effectiveFilterHeight,C=m.effectiveFilterWidth,I=C-1-m.padInfo.left,$=w-1-m.padInfo.top,D=pt(a.shape,"float32"),F=e.data.get(n.dataId).values,O=pt(n.shape,"float32",F);for(let L=0;L<m.batchSize;++L)for(let B=0;B<m.inChannels;++B)for(let V=0;V<m.inHeight;++V)for(let G=0;G<m.inWidth;++G){let U=V-$,W=G-I,K=0;for(let Z=0;Z<w;Z+=x){let q=(U+Z)/d;if(!(q<0||q>=m.outHeight||Math.floor(q)!==q))for(let J=0;J<C;J+=b){let ot=(W+J)/g;if(ot<0||ot>=m.outWidth||Math.floor(ot)!==ot)continue;let et=w*C-1-h.get(L,q,ot,B),at=Z*C+J,it=et===at?1:0;if(it===0)continue;K+=O.get(L,q,ot,B)*it}}D.set(K,L,V,G,B)}return e.makeTensorInfo(D.shape,D.dtype,D.values)}var N2={kernelName:_u,backendName:"cpu",kernelFunc:pq};function k2(r,t,e,o,n){let s=y.computeStrides(t),i=Ap(r,t,e,s,n,"max"),a=zx(r,t,e,n,!0,o);return[i.values,a.values]}var E2={kernelName:Lu,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;Y(o,"MaxPoolWithArgmax");let u=l.data.get(o.dataId).values,c=N.computePool2DInfo(o.shape,n,s,[1,1],i),[p,m]=k2(u,o.shape,o.dtype,a,c),f=l.write(p,c.outShape,o.dtype),h=l.write(m,c.outShape,o.dtype);return[{dataId:f,shape:c.outShape,dtype:o.dtype},{dataId:h,shape:c.outShape,dtype:"int32"}]}};function mq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=y.parseAxisParam(s,n.shape),u=N.computeOutAndReduceShapes(n.shape,a)[1],c=y.sizeFromShape(u),p=[],m=e.makeTensorInfo([],"float32",new Float32Array([c]));p.push(m);let f=zo({inputs:{x:n},backend:e,attrs:{dtype:"float32"}});p.push(f);let h=Qf({inputs:{a:f,b:m},backend:e});p.push(h);let d=ti({inputs:{x:h},backend:e,attrs:{axis:s,keepDims:i}});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),d}var $2={kernelName:_i,backendName:"cpu",kernelFunc:mq};function fq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"min");let a=y.parseAxisParam(s,n.shape),l=a,u=N.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=ge({inputs:{x:n},backend:e,attrs:{perm:u}}),l=N.getInnerMostAxes(l.length,n.shape.length)),N.assertAxesAreInnerMostDims("min",l,c.shape.length);let[p,m]=N.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let I=d[b+C];(Number.isNaN(I)||I<w)&&(w=I)}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=N.expandShapeToKeepDim(p,a),b=_t({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var A2={kernelName:Oi,backendName:"cpu",kernelFunc:fq};function hq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,mode:i}=o;Y(n,"mirrorPad");let a=s.map((w,C)=>w[0]+n.shape[C]+w[1]),l=s.map(w=>w[0]),u=s.map((w,C)=>w[0]+n.shape[C]),c=i==="reflect"?0:1,p=e.data.get(n.dataId).values,m=n.shape.length,f=y.computeStrides(n.shape),h=y.sizeFromShape(a),d=a.length,g=y.computeStrides(a),x=y.getTypedArrayFromDType(n.dtype,h);for(let w=0;w<h;w++){let C=y.indexToLoc(w,d,g);for(let $=0;$<d;$++)C[$]<l[$]?C[$]=l[$]*2-C[$]-c:C[$]>=u[$]&&(C[$]=(u[$]-1)*2-C[$]+c);C=C.map(($,D)=>$-l[D]);let I=y.locToIndex(C,m,f);x[w]=p[I]}return{dataId:e.write(x,a,n.dtype),shape:a,dtype:n.dtype}}var D2={kernelName:Li,backendName:"cpu",kernelFunc:hq};var dq=zt((r,t)=>{let e=r%t;return r<0&&t<0||r>=0&&t>=0?e:(e+t)%t}),gq=Vt(xs,dq),R2={kernelName:xs,backendName:"cpu",kernelFunc:gq};var _2=Yp(ym());function WC(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=n.shape.length,a=s;if(a===-1&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);let l=y.parseAxisParam([a],n.shape),u=GC({inputs:{x:n},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=N.expandShapeToKeepDim(u.shape,l),p=_t({inputs:{x:u},backend:e,attrs:{shape:c}}),m=Zf({inputs:{a:n,b:p},backend:e}),f=fC({inputs:{x:m},backend:e}),h=ti({inputs:{x:f},backend:e,attrs:{axis:l,keepDims:!1}}),d=_t({inputs:{x:h},backend:e,attrs:{shape:c}}),g=Qf({inputs:{a:f,b:d},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var F2={kernelName:Qi,backendName:"cpu",kernelFunc:WC};function xq(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o;Y(n,"multinomial");let l=a?n:WC({inputs:{logits:n},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=e.data.get(l.dataId).values,m=[u,s],f=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let h=0;h<u;++h){let d=h*c,g=new Float32Array(c-1);g[0]=p[d];for(let w=1;w<g.length;++w)g[w]=g[w-1]+p[d+w];let x=_2.alea(i.toString()),b=h*s;for(let w=0;w<s;++w){let C=x();f[b+w]=g.length;for(let I=0;I<g.length;I++)if(C<g[I]){f[b+w]=I;break}}}return a||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(m,"int32",f)}var O2={kernelName:Pu,backendName:"cpu",kernelFunc:xq};var yq=pr.nonMaxSuppressionV3Impl;function bq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o;Y(n,"NonMaxSuppression");let u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,{selectedIndices:p}=yq(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var L2={kernelName:zu,backendName:"cpu",kernelFunc:bq};var wq=pr.nonMaxSuppressionV4Impl;function Cq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o;Y(n,"NonMaxSuppressionPadded");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,{selectedIndices:m,validOutputs:f}=wq(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var P2={kernelName:Mu,backendName:"cpu",kernelFunc:Cq};var vq=pr.nonMaxSuppressionV5Impl;function Sq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o;Y(n,"NonMaxSuppressionWithScore");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=vq(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var z2={kernelName:Bu,backendName:"cpu",kernelFunc:Sq};function Tq(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o;Y(n,"oneHot");let u=y.sizeFromShape(n.shape),c=new Float32Array(u*i);c.fill(l);let p=e.data.get(n.dataId).values;for(let m=0;m<u;++m)p[m]>=0&&p[m]<i&&(c[m*i+p[m]]=a);return e.makeTensorInfo([...n.shape,i],s,c)}var M2={kernelName:Mi,backendName:"cpu",kernelFunc:Tq};function rh(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Po({inputs:{input:o},backend:e}),s=rh({inputs:{x:n},backend:e}),i=Pn({inputs:{input:o},backend:e}),a=rh({inputs:{x:i},backend:e}),l=Ue({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return eh({backend:e,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var B2={kernelName:ra,backendName:"cpu",kernelFunc:rh};function V2(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Po({inputs:{input:o},backend:e}),s=V2({inputs:{x:n},backend:e}),i=Pn({inputs:{input:o},backend:e}),a=rh({inputs:{x:i},backend:e}),l=Ue({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return eh({backend:e,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var G2={kernelName:zi,backendName:"cpu",kernelFunc:V2};function UC(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return Dp({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=Dp({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=Ra({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var W2={kernelName:Bi,backendName:"cpu",kernelFunc:UC};function Iq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;Y(n,"pad");let a=s.map((b,w)=>b[0]+n.shape[w]+b[1]),l=s.map(b=>b[0]),u=e.data.get(n.dataId).values,c=y.sizeFromShape(n.shape),p=n.shape.length,m=y.computeStrides(n.shape),f=y.sizeFromShape(a),h=a.length,d=y.computeStrides(a),g=y.getTypedArrayFromDType(n.dtype,f);i!==0&&g.fill(i);for(let b=0;b<c;b++){let C=y.indexToLoc(b,p,m).map(($,D)=>$+l[D]),I=y.locToIndex(C,h,d);g[I]=u[b]}return{dataId:e.write(g,a,n.dtype),shape:a,dtype:n.dtype}}var Vx={kernelName:Vi,backendName:"cpu",kernelFunc:Iq};var Nq=zt((r,t)=>Math.pow(r,t)),kq=Vt(bs,Nq),U2={kernelName:bs,backendName:"cpu",kernelFunc:kq};function Eq(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,p=e.data.get(i.dataId).values,m=a.map(g=>e.data.get(g.dataId).values),f=a.map(g=>g.shape),[h,d]=kx(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,d)}var H2={kernelName:Vu,backendName:"cpu",kernelFunc:Eq};function $q(r){let{backend:t,attrs:e}=r,{start:o,stop:n,dtype:s,step:i}=e,a=Ex(o,n,i,s);return t.makeTensorInfo([a.length],s,a)}var q2={kernelName:Gu,backendName:"cpu",kernelFunc:$q};var Aq=bt(ws,r=>1/r),K2={kernelName:ws,backendName:"cpu",kernelFunc:Aq};function Dq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeBilinear");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(y.sizeFromShape([p,u,c,h])),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=0,C=x[0]/b[0],I=x[1]/b[1];for(let $=0;$<p;$++)for(let D=0;D<u;D++){let F;i?F=C*(D+.5)-.5:F=C*D;let O=Math.max(0,Math.floor(F)),L=F-O,B=Math.min(m-1,Math.ceil(F)),V=$*l[0]+O*l[1],G=$*l[0]+B*l[1];for(let U=0;U<c;U++){let W;i?W=I*(U+.5)-.5:W=I*U;let K=Math.max(0,Math.floor(W)),Z=W-K,q=Math.min(f-1,Math.ceil(W)),J=V+K*l[2],ot=G+K*l[2],et=V+q*l[2],at=G+q*l[2];for(let it=0;it<h;it++){let ct=d[J+it],lt=d[ot+it],mt=d[et+it],yt=d[at+it],St=ct+(mt-ct)*Z,It=lt+(yt-lt)*Z,Pt=St+(It-St)*L;g[w++]=Pt}}}return e.makeTensorInfo([p,u,c,h],"float32",g)}var j2={kernelName:qi,backendName:"cpu",kernelFunc:Dq};function Rq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeBilinearGrad");let a=y.computeStrides(n.shape),[l,u,c,p]=n.shape,[,m,f]=s.shape,h=new Float32Array(l*u*c*p),d=[i&&m>1?u-1:u,i&&f>1?c-1:c],g=[i&&m>1?m-1:m,i&&f>1?f-1:f],x=d[0]/g[0],b=d[1]/g[1],w=e.data.get(s.dataId).values,C=0;for(let I=0;I<l;I++){let $=I*a[0];for(let D=0;D<m;D++){let F=D*x,O=Math.floor(F),L=Math.min(Math.ceil(F),u-1),B=$+O*a[1],V=$+L*a[1],G=F-O,U=1-G;for(let W=0;W<f;W++){let K=W*b,Z=Math.floor(K),q=Math.min(Math.ceil(K),c-1),J=K-Z,ot=1-J,et=B+Z*a[2],at=B+q*a[2],it=V+Z*a[2],ct=V+q*a[2],lt=U*ot,mt=U*J,yt=G*ot,St=G*J;for(let It=0;It<p;It++){let Pt=w[C++];h[et+It]+=Pt*lt,h[at+It]+=Pt*mt,h[it+It]+=Pt*yt,h[ct+It]+=Pt*St}}}}return e.makeTensorInfo([l,c,u,p],"float32",h)}var X2={kernelName:Hu,backendName:"cpu",kernelFunc:Rq};function Fq(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeNearestNeighbor");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(p*u*c*h),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=x[0]/b[0],C=x[1]/b[1],I=0;for(let $=0;$<p;$++){let D=$*l[0];for(let F=0;F<u;F++){let O=i?w*(F+.5):w*F,L=Math.min(m-1,s?Math.round(O):Math.floor(O));i&&(L=Math.max(0,L));let B=D+L*l[1];for(let V=0;V<c;V++){let G=i?C*(V+.5):C*V,U=Math.min(f-1,s?Math.round(G):Math.floor(G));i&&(U=Math.max(0,U));let W=B+U*l[2];for(let K=0;K<h;K++){let Z=d[W+K];g[I++]=Z}}}}return e.makeTensorInfo([p,u,c,h],n.dtype,g)}var Y2={kernelName:Hi,backendName:"cpu",kernelFunc:Fq};function _q(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeNearestNeighborGrad");let a=y.computeStrides(n.shape),l=y.computeStrides(s.shape),[u,c,p,m]=n.shape,[,f,h]=s.shape,d=new Float32Array(u*c*p*m),g=e.data.get(s.dataId).values,x=[i&&f>1?c-1:c,i&&h>1?p-1:p],b=[i&&f>1?f-1:f,i&&h>1?h-1:h],w=x[0]/b[0],C=x[1]/b[1],I=1/w,$=1/C,D=Math.ceil(I)*2+2,F=Math.ceil($)*2+2;for(let O=0;O<u;O++){let L=O*a[0];for(let B=0;B<c;B++){let V=L+B*a[1],G=Math.floor(B*I),U=Math.floor(G-D/2);for(let W=0;W<p;W++){let K=V+W*a[2],Z=Math.floor(W*$),q=Math.floor(Z-F/2);for(let J=0;J<m;J++){let ot=0;for(let et=0;et<D;et++){let at=et+U;if(at<0||at>=f)continue;let it=L+at*l[1],ct=at*w,lt=Math.min(c-1,i?Math.round(ct):Math.floor(ct));if(B===lt)for(let mt=0;mt<F;mt++){let yt=mt+q;if(yt<0||yt>=h)continue;let St=it+yt*l[2],It=yt*C,Pt=Math.min(p-1,i?Math.round(It):Math.floor(It));W===Pt&&(ot+=g[St+J])}}d[K+J]=ot}}}}return e.makeTensorInfo(n.shape,n.dtype,d)}var Z2={kernelName:Uu,backendName:"cpu",kernelFunc:_q};function Oq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o;Y(n,"reverse");let i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return fr({inputs:{x:n},backend:e});let l=new Ut(n.shape,n.dtype),u=e.bufferSync(n);for(let c=0;c<l.size;c++){let p=l.indexToLoc(c),m=p.slice();a.forEach(f=>m[f]=n.shape[f]-1-m[f]),l.set(u.get(...m),...p)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}var J2={kernelName:Ki,backendName:"cpu",kernelFunc:Oq};var Q2={kernelName:ac,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,c,p,m]=o.shape,[f,h]=N.getImageCenter(i,c,p),d=255,g=Math.sin(n),x=Math.cos(n),b=a.data.get(o.dataId).values;for(let C=0;C<u;C++){let I=C*p*c*m;for(let $=0;$<c;$++){let D=$*(p*m);for(let F=0;F<p;F++){let O=F*m;for(let L=0;L<m;L++){let B=[u,$,F,L],V=B[2],G=B[1],U=(V-f)*x-(G-h)*g,W=(V-f)*g+(G-h)*x;U=Math.round(U+f),W=Math.round(W+h);let K=s;if(typeof s!="number"&&(L===3?K=d:K=s[L]),U>=0&&U<p&&W>=0&&W<c){let q=W*(p*m),J=U*m,ot=I+q+J+L;K=b[ot]}let Z=I+D+O+L;l[Z]=K}}}}return{dataId:a.write(l,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var Lq=bt(Ss,r=>{let t=Math.floor(r);return r-t<.5?Math.floor(r):r-t>.5?Math.ceil(r):t%2===0?t:t+1}),tA={kernelName:Ss,backendName:"cpu",kernelFunc:Lq};function Pq(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=N.calculateShapes(s,n,i),m=!0,f=e.bufferSync(n),h=e.bufferSync(s),d=Qs(f,h,i,p,u,l,a,c,0,m);return e.makeTensorInfo(i,d.dtype,d.values)}var eA={kernelName:qu,backendName:"cpu",kernelFunc:Pq};function zq(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<t?e=n+1:o=n;return o}function Mq(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<=t?e=n+1:o=n;return o}function rA(r,t,e,o,n,s){let i=y.getArrayFromDType("int32",e*n);for(let a=0;a<e;++a){let l=r.slice(a*o,(a+1)*o),u=a*n;for(let c=0;c<n;++c)i[u+c]=s==="left"?zq(l,t[c+u]):Mq(l,t[c+u])}return i}function Bq(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=rA(a,l,n.shape[0],n.shape[1],s.shape[1],i);return e.makeTensorInfo(s.shape,"int32",u)}var oA={kernelName:Ku,backendName:"cpu",kernelFunc:Bq};function Vq(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t;Y([o,n,s],"select");let i=o.shape.length,a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Fe(n.dtype,s.dtype),p=y.makeZerosTypedArray(y.sizeFromShape(n.shape),c),m=0,f=i===0||i>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let h=0;h<a.length;h++)for(let d=0;d<f;d++)a[h]===1?p[m++]=l[h]:p[m++]=u[h];return e.makeTensorInfo(n.shape,c,p)}var nA={kernelName:ji,backendName:"cpu",kernelFunc:Vq};var Gq=N.SELU_SCALEALPHA,Wq=N.SELU_SCALE,Uq=bt(Is,r=>r>=0?Wq*r:Gq*(Math.exp(r)-1)),sA={kernelName:Is,backendName:"cpu",kernelFunc:Uq};var Hq=bt(Es,r=>r<0?-1:r>0?1:0),iA={kernelName:Es,backendName:"cpu",kernelFunc:Hq};var qq=bt(Ns,r=>Math.sin(r)),aA={kernelName:Ns,backendName:"cpu",kernelFunc:qq};var Kq=bt(ks,r=>Math.sinh(r)),lA={kernelName:ks,backendName:"cpu",kernelFunc:Kq};var jq=11920928955078125e-23,uA=Math.log(jq)+2,Xq=bt(As,r=>{let t=r>-uA,e=r<uA,o=Math.exp(r),n;return e?n=o:t?n=r:n=Math.log(1+o),n}),cA={kernelName:As,backendName:"cpu",kernelFunc:Xq};function Yq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;Y([n],"spaceToBatchND");let a=y.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let $=1+s.length;$<n.shape.length;++$)l.push([0,0]);let u=Vx.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),c=N.getReshaped(u.shape,s,a,!1),p=N.getPermuted(c.length,s.length,!1),m=N.getReshapedPermuted(u.shape,s,a,!1),d=_t({inputs:{x:u},backend:e,attrs:{shape:c}}),b=ge({inputs:{x:d},backend:e,attrs:{perm:p}}),I=_t({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(b),I}var pA={kernelName:Zi,backendName:"cpu",kernelFunc:Yq};function Zq(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=e.data.get(i.dataId).values[0],[p,m,f,h,d]=$x(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var mA={kernelName:ju,backendName:"cpu",kernelFunc:Zq};function Jq(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.data.get(n.dataId).values),a=e.data.get(o.dataId).values,l=Array.from(e.data.get(s.dataId).values),[u,c,p]=Ax(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var fA={kernelName:Xu,backendName:"cpu",kernelFunc:Jq};function Qq(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=$p(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var hA={kernelName:Yu,backendName:"cpu",kernelFunc:Qq};function tK(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=$p(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var dA={kernelName:Zu,backendName:"cpu",kernelFunc:tK};function eK(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=N.calculateShapes(s,n,a),f=!1,h=e.bufferSync(n),d;switch(s.dtype){case"bool":{let g=e.bufferSync(s),x=Boolean(e.data.get(i.dataId).values[0]);d=Qs(h,g,a,m,c,u,l,p,x,f);break}case"float32":{let g=e.bufferSync(s),x=e.data.get(i.dataId).values[0];d=Qs(h,g,a,m,c,u,l,p,x,f);break}case"int32":{let g=e.bufferSync(s),x=e.data.get(i.dataId).values[0];d=Qs(h,g,a,m,c,u,l,p,x,f);break}case"string":{let g=e.bufferSync(s),x=y.decodeString(e.data.get(i.dataId).values[0]);d=Qs(h,g,a,m,c,u,l,p,x,f);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return e.makeTensorInfo(a,d.dtype,d.values)}var gA={kernelName:Ju,backendName:"cpu",kernelFunc:eK};function rK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=N.prepareSplitSize(n,s,a),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return l.map(p=>{let m=[...c];m[a]=p;let f=Vo({inputs:{x:n},backend:e,attrs:{begin:u,size:m}});return u[a]+=p,f})}var xA={kernelName:Ji,backendName:"cpu",kernelFunc:rK};var yA={kernelName:Qu,backendName:"cpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t;Y(e,"square");let n=o.data.get(e.dataId).values,s=new Float32Array(n.length);for(let a=0;a<n.length;++a){let l=n[a];s[a]=l*l}return{dataId:o.write(s,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}};var oK=bt(Ls,(r,t)=>{let e=t;return isNaN(r)?NaN:r>0?1:e.alpha}),bA={kernelName:Ls,backendName:"cpu",kernelFunc:oK};function nK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o;Y(n,"stridedSlice");let{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=He.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(d)I=_t({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let $=He.computeOutShape(b,w,C),D=Vo({inputs:{x:n},backend:e,attrs:{begin:b,size:$}});I=_t({inputs:{x:D},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(D)}else{let $=e.bufferSync(n),D=Dx(f,$,C,b);I=e.makeTensorInfo(h,D.dtype,D.values)}return I}var wA={kernelName:tc,backendName:"cpu",kernelFunc:nK};function sK(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.data.get(c.dataId).values,f=e.data.get(p.dataId).values,[h,d]=Rx(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var CA={kernelName:ec,backendName:"cpu",kernelFunc:sK};function iK(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values[0],[u,c,p]=Fx(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var vA={kernelName:rc,backendName:"cpu",kernelFunc:iK};function aK(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.data.get(s.dataId).values,a=_x(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var SA={kernelName:oc,backendName:"cpu",kernelFunc:aK};var lK=bt(_s,r=>Math.tan(r)),TA={kernelName:_s,backendName:"cpu",kernelFunc:lK};var uK=bt(Os,r=>Math.tanh(r)),IA={kernelName:Os,backendName:"cpu",kernelFunc:uK};function cK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;Y(n,"tile");let i=Ox(e.bufferSync(n),s);return e.makeTensorInfo(i.shape,i.dtype,i.values)}var NA={kernelName:mn,backendName:"cpu",kernelFunc:cK};function pK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o;Y(n,"topk");let a=e.data.get(n.dataId).values,[l,u]=Lx(a,n.shape,n.dtype,s,i);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}var kA={kernelName:nc,backendName:"cpu",kernelFunc:pK};function mK(r){let{inputs:t,attrs:e,backend:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=e,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=y.computeStrides(n.shape),b=x[0],w=x[1],C=x[2],I=y.computeStrides(g),$=I[0],D=I[1],F=I[2],O=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(g));O.fill(l);let L=o.data.get(n.dataId).values,B=o.data.get(s.dataId).values;for(let G=0;G<c;++G){let U=s.shape[0]===1?B:B.subarray(G*8,G*8+8);for(let W=0;W<h;++W)for(let K=0;K<d;++K)for(let Z=0;Z<f;++Z){let q,J=U[6]*K+U[7]*W+1;if(J===0)continue;let ot=(U[0]*K+U[1]*W+U[2])/J,et=(U[3]*K+U[4]*W+U[5])/J,at=EA(ot,m,a),it=EA(et,p,a);switch(i){case"nearest":q=xK(L,p,m,b,w,C,G,it,at,Z,l);break;case"bilinear":q=yK(L,p,m,b,w,C,G,it,at,Z,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let ct=G*$+W*D+K*F+Z;O[ct]=q}return o.makeTensorInfo(g,n.dtype,O)}return{dataId:o.write(O,g,n.dtype),shape:n.shape,dtype:n.dtype}}var $A={kernelName:sc,backendName:"cpu",kernelFunc:mK};function EA(r,t,e){switch(e){case"reflect":return fK(r,t);case"wrap":return hK(r,t);case"nearest":return gK(r,t);case"constant":default:return dK(r,t)}}function fK(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=2*t;e<o&&(e=o*Math.trunc(-e/o)+e),e=e<-t?e+o:-e-1}else if(e>t-1)if(t<=1)e=0;else{let o=2*t;e-=o*Math.trunc(e/o),e>=t&&(e=o-e-1)}return y.clamp(0,e,t-1)}function hK(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=t-1;e+=t*(Math.trunc(-e/o)+1)}else if(e>t-1)if(t<=1)e=0;else{let o=t-1;e-=t*Math.trunc(e/o)}return y.clamp(0,e,t-1)}function dK(r,t){return r}function gK(r,t){return y.clamp(0,r,t-1)}function oh(r,t,e,o,n,s,i,a,l,u,c){let p=i*o+a*n+l*s+u;return 0<=a&&a<t&&0<=l&&l<e?r[p]:c}function xK(r,t,e,o,n,s,i,a,l,u,c){let p=Math.round(a),m=Math.round(l);return oh(r,t,e,o,n,s,i,p,m,u,c)}function yK(r,t,e,o,n,s,i,a,l,u,c){let p=Math.floor(a),m=Math.floor(l),f=p+1,h=m+1,d=(h-l)*oh(r,t,e,o,n,s,i,p,m,u,c)+(l-m)*oh(r,t,e,o,n,s,i,p,h,u,c),g=(h-l)*oh(r,t,e,o,n,s,i,f,m,u,c)+(l-m)*oh(r,t,e,o,n,s,i,f,h,u,c);return(f-a)*d+(a-p)*g}function bK(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Y(s,"unique");let i=o.data.get(s.dataId).values,{outputValues:a,outputShape:l,indices:u}=Px(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var AA={kernelName:ic,backendName:"cpu",kernelFunc:bK};function wK(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n.shape.length,a=n.shape[s],l=new Array(i-1),u=0;for(let f=0;f<i;f++)f!==s&&(l[u++]=n.shape[f]);let c=new Array(i).fill(0),p=n.shape.slice();p[s]=1;let m=new Array(a);for(let f=0;f<m.length;f++){c[s]=f;let h=Vo({inputs:{x:n},backend:e,attrs:{begin:c,size:p}});m[f]=_t({inputs:{x:h},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(h)}return m}var DA={kernelName:ta,backendName:"cpu",kernelFunc:wK};function CK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o;Y(n,"unsortedSegmentSum");let a=n.shape.length,l=s.shape.length,u=[],c=[],p=a-l,m=s;for(let h=0;h<p;++h){let d=Dp({inputs:{input:m},backend:e,attrs:{dim:h+1}});m=d,c.push(d)}for(let h=0;h<i;++h){let d=y.createScalarValue(h,"int32"),g=e.makeTensorInfo([],"int32",d),x=pC({inputs:{a:g,b:m},backend:e}),b=zo({inputs:{x},backend:e,attrs:{dtype:"float32"}}),w=Bl({inputs:{a:b,b:n},backend:e}),C=ti({inputs:{x:w},backend:e,attrs:{axis:0,keepDims:!1}});u.push(C),c.push(g),c.push(x),c.push(b),c.push(w),c.push(C)}let f=UC({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var RA={kernelName:ea,backendName:"cpu",kernelFunc:CK};var vK=[i$,bE,a$,l$,TE,u$,c$,p$,m$,f$,h$,d$,g$,x$,y$,w$,C$,v$,S$,s$,T$,I$,N$,k$,SE,IE,E$,wE,$$,D$,R$,F$,_$,O$,L$,P$,z$,M$,B$,V$,G$,W$,U$,H$,q$,K$,j$,X$,Y$,Z$,Q$,QE,t2,NE,e2,kE,r2,EE,o2,n2,s2,$E,i2,a2,l2,u2,c2,AE,DE,CE,p2,A$,m2,f2,h2,t$,RE,FE,d2,_E,g2,x2,y2,b2,w2,C2,v2,OE,S2,T2,I2,N2,E2,$2,A2,LE,D2,R2,O2,PE,zE,L2,P2,z2,ME,M2,G2,W2,Vx,U2,e$,VE,H2,q2,vE,th,K2,r$,o$,n$,j2,X2,Y2,Z2,J2,Q2,tA,UE,eA,oA,nA,sA,qE,iA,aA,lA,KE,F2,cA,pA,mA,fA,hA,dA,gA,xA,XE,yA,YE,bA,wA,CA,vA,SA,ZE,J$,TA,IA,NA,kA,$A,BE,AA,DA,RA,B2];for(let r of vK)wh(r);var Gl={},Gx={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function FA(r,t){Gl[r]=t}function ro(r,t){if(!(r in Gl)||t!=null){let o=TK(r,t);if(o!==null)Gl[r]=o;else return console.log("Could not get context for WebGL version",r),null}let e=Gl[r];return e==null||e.isContextLost()?(delete Gl[r],ro(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Gl[r])}function SK(r){if(typeof OffscreenCanvas<"u"&&r===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function TK(r,t){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let e=t??SK(r);return e.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete Gl[r]},!1),z().getBool("SOFTWARE_WEBGL_ENABLED")&&(Gx.failIfMajorPerformanceCaveat=!1),r===1?e.getContext("webgl",Gx)||e.getContext("experimental-webgl",Gx):e.getContext("webgl2",Gx)}var Fa;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Fa||(Fa={}));var hr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(hr||(hr={}));var nr;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(nr||(nr={}));function Wl(r,t){return[t,r]}function _A(r,t){return r*t}function nh(r){let t=y.sizeFromShape(r),e=Math.ceil(t/4);return y.sizeToSquarishShape(e)}function zn(r,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(r/2))]}function OA(r,t){let[e,o]=zn(r,t);return e*o*4}function sh(r,t){let e=r,o,n,s,i,a,l,u,c,p,m;return z().getNumber("WEBGL_VERSION")===2?(o=e.R32F,n=e.R16F,s=e.RGBA16F,i=e.RGBA32F,a=e.RED,u=4,c=1,p=e.HALF_FLOAT,m=e.FLOAT,l=e.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=e.RGBA,a=r.RGBA,u=4,c=4,p=t!=null?t.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function ht(r,t){let e=t();return z().getBool("DEBUG")&&IK(r),e}function IK(r){let t=r.getError();if(t!==r.NO_ERROR)throw new Error("WebGL Error: "+EK(r,t))}var NK=596e-10,kK=65504;function LA(r){return!!(z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||NK<Math.abs(r)&&Math.abs(r)<kK)}function EK(r,t){switch(t){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function ih(r,t){return ei(r,()=>r.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function PA(r,t){let e=ei(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ht(r,()=>r.shaderSource(e,t)),ht(r,()=>r.compileShader(e)),r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function zA(r,t){let e=ei(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ht(r,()=>r.shaderSource(e,t)),ht(r,()=>r.compileShader(e)),z().get("ENGINE_COMPILE_ONLY"))return e;if(r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw XC(t,r.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}var $K=/ERROR: [0-9]+:([0-9]+):/g;function XC(r,t){let e=$K.exec(t);if(e==null){console.log(`Couldn't parse line number in error: ${t}`),console.log(r);return}let o=+e[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>y.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(t.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function MA(r){return ei(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function BA(r,t){if(ht(r,()=>r.linkProgram(t)),!z().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(t,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function Ux(r,t){if(ht(r,()=>r.validateProgram(t)),r.getProgramParameter(t,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function VA(r,t){let e=ei(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ht(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),ht(r,()=>r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function GA(r,t){let e=ei(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ht(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)),ht(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function WA(r){return ei(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function UA(r,t){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||t<=0){let o=`[${r}x${t}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>e||t>e){let o=`[${r}x${t}]`,n=`[${e}x${e}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function HA(r){return ei(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function YC(r,t,e,o,n,s,i){let a=r.getAttribLocation(t,e);return a===-1?!1:(ht(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),ht(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),ht(r,()=>r.enableVertexAttribArray(a)),!0)}function AK(r,t,e){RK(r,e),ht(r,()=>r.activeTexture(r.TEXTURE0+e)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,t))}function qA(r,t,e){return ei(r,()=>r.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function KA(r,t,e){return r.getUniformLocation(t,e)}function jA(r,t,e,o){ht(r,()=>AK(r,t,o)),ht(r,()=>r.uniform1i(e,o))}function Hx(r,t,e){ht(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),ht(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0))}function ZC(r,t){ht(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),ht(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function ah(r){let t=r.checkFramebufferStatus(r.FRAMEBUFFER);if(t!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+DK(r,t))}function DK(r,t){switch(t){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function ei(r,t,e){let o=ht(r,()=>t());if(o==null)throw new Error(e);return o}function RK(r,t){let e=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=t+r.TEXTURE0;if(o<r.TEXTURE0||o>e){let n=`[gl.TEXTURE0, gl.TEXTURE${e}]`;throw new Error(`textureUnit must be in ${n}.`)}}function _a(r,t=2){return y.sizeFromShape(r.slice(0,r.length-t))}function Oa(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function qx(r){let t=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(t=[_a(r),...Oa(r)]),t}function XA(r,t=!1){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");t&&(e=e*2,r=r.map((n,s)=>s>=r.length-2?y.nearestLargerEven(r[s]):r[s]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let o=y.sizeFromShape(r);if(r.length<=1&&o<=e)return[1,o];if(r.length===2&&r[0]<=e&&r[1]<=e)return r;if(r.length===3&&r[0]*r[1]<=e&&r[2]<=e)return[r[0]*r[1],r[2]];if(r.length===3&&r[0]<=e&&r[1]*r[2]<=e)return[r[0],r[1]*r[2]];if(r.length===4&&r[0]*r[1]*r[2]<=e&&r[3]<=e)return[r[0]*r[1]*r[2],r[3]];if(r.length===4&&r[0]<=e&&r[1]*r[2]*r[3]<=e)return[r[0],r[1]*r[2]*r[3]];if(t){let n=_a(r),s=2,i=2;return r.length&&([s,i]=Oa(r)),o=n*(s/2)*(i/2),y.sizeToSquarishShape(o).map(a=>a*2)}return y.sizeToSquarishShape(o)}function Wx(r){return r%2===0}function Ul(r,t){if(r=r.slice(-2),t=t.slice(-2),y.arraysEqual(r,t)||!r.length||!t.length||r[0]===0||r[1]===0||t[0]===0||t[1]===0)return!0;if(r.length!==t.length){let e=r.slice(-1)[0],o=t.slice(-1)[0];if(e===o||Wx(e)&&Wx(o)&&(r[0]===1||t[0]===1))return!0}return r[1]===t[1]&&Wx(r[0])&&Wx(t[0])}var qC,KC;function YA(r){if(qC==null){let t=ro(r);qC=t.getParameter(t.MAX_TEXTURE_SIZE)}return qC}function ZA(r){if(KC==null){let t=ro(r);KC=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,KC)}function JA(r){if(r===0)return 0;let t,e=ro(r);return go(e,"EXT_disjoint_timer_query_webgl2")&&r===2?t=2:go(e,"EXT_disjoint_timer_query")?t=1:t=0,t}function go(r,t){return r.getExtension(t)!=null}function JC(r){try{if(ro(r)!=null)return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function QA(r){if(r===0)return!1;let t=ro(r);if(r===1){if(!go(t,"OES_texture_float"))return!1}else if(!go(t,"EXT_color_buffer_float"))return!1;return jC(t)}function tD(r){if(r===0)return!1;let t=ro(r);if(r===1){if(!go(t,"OES_texture_float")||!go(t,"WEBGL_color_buffer_float"))return!1}else{if(go(t,"EXT_color_buffer_float"))return jC(t);let o="EXT_color_buffer_half_float";if(go(t,o)){let n=t.getExtension(o);return FK(t,n)}return!1}return jC(t)}function jC(r){let t=sh(r),e=r.createTexture();r.bindTexture(r.TEXTURE_2D,e);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatFloat,o,n,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(e),r.deleteFramebuffer(s),i}function FK(r,t){let e=sh(r,t),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatHalfFloat,n,s,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function eD(r){return r!==2?!1:ro(r).fenceSync!=null}function Mn(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}var wt=z();wt.registerFlag("HAS_WEBGL",()=>wt.getNumber("WEBGL_VERSION")>0);wt.registerFlag("WEBGL_VERSION",()=>JC(2)?2:JC(1)?1:0);wt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);wt.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>wt.get("WEBGL_VERSION")===2);wt.registerFlag("WEBGL_CPU_FORWARD",()=>!0);wt.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);wt.registerFlag("WEBGL_PACK",()=>wt.getBool("HAS_WEBGL"));wt.registerFlag("WEBGL_PACK_NORMALIZATION",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_CLIP",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_PACK_REDUCE",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_LAZILY_UNPACK",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_CONV_IM2COL",()=>wt.getBool("WEBGL_PACK"));wt.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>YA(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>ZA(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=wt.getNumber("WEBGL_VERSION");return r===0?0:JA(r)});wt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>wt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!sa.isMobile());wt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>QA(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>wt.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:wt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));wt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>tD(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_FENCE_API_ENABLED",()=>eD(wt.getNumber("WEBGL_VERSION")));wt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>wt.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);wt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});wt.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>sa.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});wt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);wt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);wt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);wt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);wt.registerFlag("WEBGL_EXP_CONV",()=>!1);wt.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>wt.getBool("IS_TEST"));function xe(){let r,t,e,o,n,s,i,a,l,u;return z().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",t="in",e="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",t="attribute",e="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:t,varyingVs:e,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function sn(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function Hl(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function _K(r,t){let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function rD(r,t,e="index"){let o=r.map((s,i)=>i),n=_K(o,t);return n.map((s,i)=>{let a=`int ${r[i]} = ${e} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${e} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function Rp(r){let t=y.computeStrides(r).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function Fp(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var jx=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:oD}=N;function nD(r,t,e){let o=[];if(r.forEach(f=>{let h=y.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${h>1?`[${h}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),e.enableShapeUniforms){let{uniformShape:d}=Xx(e.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(d.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>OK(f,t,e.packedInputs,e.enableShapeUniforms)).join(`
`),i=t.texShape,a=xe(),l=zK(a),u,c,p=VK(a);return t.isPacked?(u=LK(t.logicalShape,i,e.enableShapeUniforms),c=BK(a)):(u=PK(t.logicalShape,i,e.enableShapeUniforms),c=MK(a)),e.packedInputs&&(p+=HK),[p,l,c,n,u,s,e.userCode].join(`
`)}function Op(r,t=!1){let e=r.shapeInfo.logicalShape;switch(e.length){case 0:return oj(r,t);case 1:return sj(r,t);case 2:return aj(r,t);case 3:return uj(r,t);case 4:return pj(r,t);case 5:return mj(r);case 6:return fj(r);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function sD(r,t){switch(r.shapeInfo.logicalShape.length){case 0:return rj(r);case 1:return nj(r,t);case 2:return ij(r,t);case 3:return lj(r,t);default:return cj(r,t)}}function OK(r,t,e=!1,o){let n="";e?n+=sD(r,o):n+=Op(r,o);let s=r.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(e?n+=hj(r,t):n+=dj(r,t)),n}function LK(r,t,e){switch(r.length){case 0:return iD();case 1:return qK(r,t,e);case 2:return tj(r,t,e);case 3:return jK(r,t,e);default:return YK(r,t,e)}}function PK(r,t,e){switch(r.length){case 0:return iD();case 1:return KK(r,t,e);case 2:return ej(r,t,e);case 3:return XK(r,t,e);case 4:return ZK(r,t,e);case 5:return JK(r,t);case 6:return QK(r,t);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function zK(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function MK(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function BK(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function VK(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${GK}
    ${WK}
    ${UK}
  `}var GK=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,WK=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,UK=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,HK=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function iD(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function qK(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return o[0]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function KK(r,t,e){return t[0]===1?e?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:t[1]===1?e?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `}function jK(r,t,e){if(e)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function XK(r,t,e){if(e)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Hl(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=sn(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function YK(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function ZK(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Hl(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=sn(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function JK(r,t){let e=sn(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function QK(r,t){let e=sn(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function tj(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(y.arraysEqual(r,t))return e?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return e?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function ej(r,t,e){return y.arraysEqual(r,t)?e?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:r[1]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:e?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function ql(r){return`offset${r}`}function rj(r){let t=r.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),o=xe();return`
    vec4 ${e}() {
      return ${o.texture2D}(${t}, halfCR);
    }
  `}function oj(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${e};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;let i=ql(e);if(t)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `}function nj(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=r.shapeInfo.texShape,s=xe();if(t)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `}function sj(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${Lp(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;let a=ql(e);return i===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    `:s===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `:t?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `}function ij(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=xe();if(s!=null&&y.arraysEqual(e,s))return t?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(t)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function aj(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(e,s)){if(t)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=y.squeezeShape(e),l=i;if(l.length<e.length){let m=Pp(r,l),f=["row","col"];return`
      ${Op(m,t)}
      float ${n}(int row, int col) {
        return ${n}(${zp(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Lp(r)}
      }
    `;let u=s[0],c=s[1],p=ql(o);return c===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:t?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function lj(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(e[0]===1){let m=e.slice(1),f=[1,2],h=Pp(r,m),d=["b","row","col"];return`
        ${sD(h,t)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${zp(d,f)});
        }
      `}let a=xe();if(t)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(e[2]/2),p=c*Math.ceil(e[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function uj(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[1]*e[2],i=e[2],{newShape:a,keptDims:l}=y.squeezeShape(e),u=a;if(u.length<e.length){let d=Pp(r,u),g=["row","col","depth"];return`
        ${Op(d,t)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${zp(g,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${Lp(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let h=ql(o);return t?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * ${s} + col * ${i} + depth + ${h};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${h};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function cj(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=xe();if(t)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",h=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let d=2;d<i-1;d++)f=`int b${d}, `+f,m*=s[i-d-1],h=`b${d} * ${m} + `+h;return`
    vec4 ${o}(${f}) {
      int index = ${h};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `}function pj(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[3],i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(e);if(l.length<e.length){let b=Pp(r,l),w=["row","col","depth","depth2"];return`
      ${Op(b,t)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${zp(w,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${Lp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],h=`int stride2 = ${o}Shape[3];`,d=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${h}
        ${d}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1]*e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=ql(o);return t?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${h}
      ${d}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function mj(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=t[4],s=t[3]*n,i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(t);if(l.length<t.length){let d=Pp(r,l),g=["row","col","depth","depth2","depth3"];return`
      ${Op(d)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${zp(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${Lp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]},
               ${t[2]*t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;let h=ql(e);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${h};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `}function fj(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(t);if(n.length<t.length){let g=Pp(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Op(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${zp(x,s)});
      }
    `}let i=t[5],a=t[4]*i,l=t[3]*a,u=t[2]*l,c=t[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Lp(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],h=m[1];if(h===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(h===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]*t[4]},
               ${t[2]*t[3]*t[4]},
               ${t[3]*t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;let d=ql(e);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${d};
      vec2 uv = uvFromFlat(${f}, ${h}, index);
      return sampleTexture(${e}, uv);
    }
  `}function Lp(r){let t=r.name,e=y.sizeFromShape(r.shapeInfo.logicalShape);return e<2?`return ${t};`:`
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function hj(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=oD(r.shapeInfo.logicalShape,t.logicalShape),l=Et(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,w)=>`coords.${p[w+u]}`).join(", ");let f="return outputValue;",d=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(t.logicalShape)===1;if(s===1&&!d&&!x)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(d&&!x)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,w=s-1;a.indexOf(b)>-1&&a.indexOf(w)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(w)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function dj(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=t.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&y.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;let u=Et(l),c=oD(r.shapeInfo.logicalShape,t.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(d=>`coords.${f[d+p]} = 0;`).join(`
`);let h="";return l<2&&a>0?h="coords":h=r.shapeInfo.logicalShape.map((d,g)=>`coords.${f[g+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${h});
    }
  `}function Et(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function Xx(r,t,e){let{newShape:o,keptDims:n}=y.squeezeShape(t),s=t.length,i=r&&s===3&&t[0]===1,a=i?t.slice(1):o,l=!r&&s>1&&!y.arraysEqual(t,e)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:t,keptDims:n}}function Pp(r,t){let e=JSON.parse(JSON.stringify(r));return e.shapeInfo.logicalShape=t,e}function zp(r,t){return t.map(e=>r[e]).join(", ")}function lD(r,t,e,o){let n=e.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=nD(n,i,t),l=zA(r.gl,a),u=r.createProgram(l);return z().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},QC(r,t,u))}function QC(r,t,e){let o={},n={},s={},i=[],a,l,u,c=null,p=null;p=r.getUniformLocation(e,"NAN",!1),z().getNumber("WEBGL_VERSION")===1&&(c=r.getUniformLocation(e,"INFINITY",!1));let m=!1;for(let f=0;f<t.variableNames.length;f++){let h=t.variableNames[f];o[h]=r.getUniformLocation(e,h,m),o[`offset${h}`]=r.getUniformLocation(e,`offset${h}`,m),t.enableShapeUniforms&&(n[`${h}Shape`]=r.getUniformLocation(e,`${h}Shape`,m),s[`${h}TexShape`]=r.getUniformLocation(e,`${h}TexShape`,m))}return t.enableShapeUniforms&&(a=r.getUniformLocation(e,"outShape",m),u=r.getUniformLocation(e,"outShapeStrides",m),l=r.getUniformLocation(e,"outTexShape",m)),t.customUniforms&&t.customUniforms.forEach((f,h)=>{i[h]=r.getUniformLocation(e,f.name,m)}),{uniformLocations:o,customUniformLocations:i,infLoc:c,nanLoc:p,inShapesLocations:n,inTexShapesLocations:s,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}}function aD(r,t){if(r.length!==t.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t.length} inputs`);r.forEach((e,o)=>{let n=e.logicalShape,s=t[o],i=s.shape;if(!y.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&s.isUniform)return;let a=e.texShape,l=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function uD(r,t,e,o,n){t.program.enableShapeUniforms||(aD(t.inShapeInfos,e),aD([t.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(t.webGLProgram),z().getNumber("WEBGL_VERSION")===1&&t.infLoc!==null&&r.gl.uniform1f(t.infLoc,1/0),t.nanLoc!==null&&r.gl.uniform1f(t.nanLoc,NaN),e.forEach((l,u)=>{let c=t.program.variableNames[u],p=t.uniformLocations[c],m=t.uniformLocations[`offset${c}`],f=t.inShapesLocations[`${c}Shape`],h=t.inTexShapesLocations[`${c}TexShape`];if(f){let{uniformShape:d}=Xx(t.program.packedInputs,l.shape,l.texData.texShape);switch(d.length){case 1:r.gl.uniform1iv(f,new Int32Array(d));break;case 2:r.gl.uniform2iv(f,new Int32Array(d));break;case 3:r.gl.uniform3iv(f,new Int32Array(d));break;case 4:r.gl.uniform4iv(f,new Int32Array(d));break;default:break}}if(h&&r.gl.uniform2i(h,l.texData.texShape[0],l.texData.texShape[1]),p!=null){if(l.isUniform){if(y.sizeFromShape(l.shape)<2)r.gl.uniform1f(p,l.uniformValues[0]);else{let d=l.uniformValues;d instanceof Float32Array||(d=new Float32Array(d)),r.gl.uniform1fv(p,d)}return}l.texData.slice!=null&&m!=null&&r.gl.uniform1i(m,l.texData.slice.flatOffset),r.setInputMatrixTexture(l.texData.texture.texture,p,u)}});let a=t.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(t.outShapeStridesLocation){let l=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l));break;default:break}}t.outTexShapeLocation&&r.gl.uniform2i(t.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),t.program.customUniforms&&n&&t.program.customUniforms.forEach((l,u)=>{let c=t.customUniformLocations[u],p=n[u];if(l.type==="float")r.gl.uniform1fv(c,p);else if(l.type==="vec2")r.gl.uniform2fv(c,p);else if(l.type==="vec3")r.gl.uniform3fv(c,p);else if(l.type==="vec4")r.gl.uniform4fv(c,p);else if(l.type==="int")r.gl.uniform1iv(c,p);else if(l.type==="ivec2")r.gl.uniform2iv(c,p);else if(l.type==="ivec3")r.gl.uniform3iv(c,p);else if(l.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${l.type} is not supported yet.`)}),r.executeProgram()}function cD(r,t,e){let o="";t.concat(e).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=Xx(r.packedInputs,i.shape,l),m="",f="",h="";if(c.length===1&&r.packedInputs){let I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${I[0]>1}_${I[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let I=y.computeStrides(c);h=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}let d=i.shape.length,g=c.length===2&&y.arraysEqual(i.shape,l),x=y.sizeFromShape(i.shape)===1,b=N.getBroadcastDims(i.shape,e.shape),w=!r.packedInputs&&d===e.shape.length&&y.arraysEqual(l,e.texData.texShape),C=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${d}_${w}_${u?p:""}_${c.length}_${x}_${b}_${g}_${m}_${f}_${h}_${C}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${z().getNumber("WEBGL_VERSION")}`,s}function Jt(r){return z().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var Yx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Fa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=xe();this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Hl(["r","c","d"],t):sn(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `}};var Zx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Fa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=xe();this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Hl(["r","c","d"],t):sn(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `}};var Jx=class{constructor(t){this.variableNames=["A"],this.outTexUsage=hr.DOWNLOAD;let e=xe();this.outputShape=t,this.userCode=`
      ${jx}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `}};var Qx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=hr.DOWNLOAD;let e=xe();this.outputShape=t,this.userCode=`
      ${jx}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `}};var ty=class{constructor(t,e=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=xe();this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length);let n="result";e&&(n="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?Fp():Rp(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${o.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${o.output} = vec4(${n}, 0., 0., 0.);
      }
    `}};var ey=class{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=xe();this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length);let n="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Fp():Rp(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function pD(r){let t=xe(),e=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return PA(r,e)}function mD(r){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return VA(r,t)}function fD(r){let t=new Uint16Array([0,1,2,2,1,3]);return GA(r,t)}function lh(r,t,e,o,n,s){UA(t,e);let i=WA(r),a=r.TEXTURE_2D;return ht(r,()=>r.bindTexture(a,i)),ht(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),ht(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),ht(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),ht(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),z().getNumber("WEBGL_VERSION")===1?ht(r,()=>r.texImage2D(a,0,o,t,e,0,n,s,null)):ht(r,()=>r.texStorage2D(a,1,o,t,e)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function tv(r){return r.internalFormatFloat}function hD(r,t,e,o){let[n,s]=Wl(t,e);return lh(r,n,s,tv(o),o.textureFormatFloat,r.FLOAT)}function ev(r){return r.internalFormatHalfFloat}function dD(r,t,e,o){let[n,s]=Wl(t,e);return lh(r,n,s,ev(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function rv(r){return r.downloadTextureFormat}function gD(r,t,e,o){let[n,s]=Wl(t,e);return lh(r,n,s,rv(o),r.RGBA,r.UNSIGNED_BYTE)}function ov(r){return r.internalFormatPackedFloat}function xD(r,t,e,o){let[n,s]=zn(t,e);return lh(r,n,s,ov(o),r.RGBA,r.FLOAT)}function nv(r){return r.internalFormatPackedHalfFloat}function yD(r,t,e,o){let[n,s]=zn(t,e);return lh(r,n,s,nv(o),r.RGBA,o.textureTypeHalfFloat)}function bD(r,t,e){return ht(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),YC(r,t,"clipSpacePos",e,3,20,0)&&YC(r,t,"uv",e,2,20,12)}function wD(r,t,e,o,n,s){ht(r,()=>r.bindTexture(r.TEXTURE_2D,t));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(e*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(e*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),z().getNumber("WEBGL_VERSION")===2?ht(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e,o,r.RGBA,a,i)):ht(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,e,o,0,r.RGBA,a,i)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function CD(r,t,e){ht(r,()=>r.bindTexture(r.TEXTURE_2D,t)),e.data instanceof Uint8Array?z().getNumber("WEBGL_VERSION")===2?ht(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,e.data)):ht(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width,e.height,0,r.RGBA,r.UNSIGNED_BYTE,e.data)):z().getNumber("WEBGL_VERSION")===2?ht(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,e)):ht(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)),ht(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function vD(r,t,e,o){let n=r.createBuffer();ht(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*t*e;return ht(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),ht(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,0)),ht(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function SD(r,t,e){let o=r,n=new Float32Array(e);return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function TD(r,t,e,o){let[n,s]=Wl(t,e),i=4,a=new Uint8Array(_A(t*e,i));return ht(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function ID(r,t,e,o,n,s,i,a){let l=r,u=new Float32Array(OA(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function ND(r,t,e){let o=new Float32Array(t*e*4);return ht(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,o)),o}var Mp=class{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let e=z().getNumber("WEBGL_VERSION");t!=null?(this.gl=t,FA(e,t)):this.gl=ro(e);let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),z().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=ih(this.gl,s),go(this.gl,i))this.textureHalfFloatExtension=ih(this.gl,i);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),go(this.gl,n))this.colorBufferHalfFloatExtension=ih(this.gl,n);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",go(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(go(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=mD(this.gl),this.indexBuffer=fD(this.gl),this.framebuffer=HA(this.gl),this.textureConfig=sh(this.gl,this.textureHalfFloatExtension)}get debug(){return z().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let t=this.gl;ht(t,()=>t.finish()),ht(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ht(t,()=>t.deleteFramebuffer(this.framebuffer)),ht(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ht(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ht(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),hD(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),dD(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),gD(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),CD(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,o,n){this.throwIfDisposed(),wD(this.gl,t,e,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),yD(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),xD(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(ZC(this.gl,this.framebuffer),this.outputTexture=null),ht(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,o){return this.downloadMatrixDriver(t,()=>TD(this.gl,e,o,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,o,n,s,i){return ID(this.gl,t,e,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return SD(this.gl,t,e)}createBufferFromTexture(t,e,o){this.bindTextureToFrameBuffer(t);let n=vD(this.gl,e,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,o;if(z().getBool("WEBGL_FENCE_API_ENABLED")){let n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},e=s}else z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(e,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:e,isFencePassed:o}}downloadMatrixFromPackedTexture(t,e,o){return this.downloadMatrixDriver(t,()=>ND(this.gl,e,o))}createProgram(t){this.throwIfDisposed();let e=this.gl;this.vertexShader==null&&(this.vertexShader=pD(e));let o=MA(e);return ht(e,()=>e.attachShader(o,this.vertexShader)),ht(e,()=>e.attachShader(o,t)),BA(e,o),this.debug&&Ux(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=bD(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),t!=null&&ht(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,this.program!=null&&this.debug&&Ux(this.gl,this.program),ht(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,o=!0){return this.throwIfDisposed(),o?qA(this.gl,t,e):KA(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ht(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,o){this.throwIfDisposed(),this.throwIfNoProgram(),jA(this.gl,t,e,o)}setOutputMatrixTexture(t,e,o){this.setOutputMatrixTextureDriver(t,o,e)}setOutputPackedMatrixTexture(t,e,o){this.throwIfDisposed();let[n,s]=zn(e,o);this.setOutputMatrixTextureDriver(t,n,s)}setOutputMatrixWriteRegion(t,e,o,n){this.setOutputMatrixWriteRegionDriver(o,t,n,e)}setOutputPackedMatrixWriteRegion(t,e,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&Ux(this.gl,this.program),ah(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let t=this.gl;this.debug&&this.debugValidate(),ht(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ht(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=ih(this.gl,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let e=this.gl,o=this.getQueryTimerExtensionWebGL2();e.endQuery(o.TIME_ELAPSED_EXT);return}let t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(e===0)return null;if(e===2){let o=this.gl;return o.getQueryParameter(t,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(t,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(e===0)return!0;if(e===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(t,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(t,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){let t=bj(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){let{resolveFn:o}=this.itemsToPoll[e];o()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),!(this.itemsToPoll.length>1)&&y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Hx(this.gl,t,this.framebuffer),this.debug&&ah(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(Hx(this.gl,this.outputTexture,this.framebuffer),this.debug&&ah(this.gl)):ZC(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);let o=e();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(t,e,o){this.throwIfDisposed();let n=this.gl;Hx(n,t,this.framebuffer),this.debug&&ah(n),this.outputTexture=t,ht(n,()=>n.viewport(0,0,e,o)),ht(n,()=>n.scissor(0,0,e,o))}setOutputMatrixWriteRegionDriver(t,e,o,n){this.throwIfDisposed(),ht(this.gl,()=>this.gl.scissor(t,e,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function bj(r){let t=0;for(;t<r.length&&r[t]();++t);return t-1}var{addImpl:kD,bincountImpl:ry,bincountReduceImpl:ED,castImpl:$D,ceilImpl:AD,concatImpl:DD,equalImpl:RD,expImpl:FD,expm1Impl:_D,floorImpl:OD,gatherNdImpl:LD,gatherV2Impl:PD,greaterImpl:zD,greaterEqualImpl:MD,lessImpl:BD,lessEqualImpl:VD,linSpaceImpl:GD,logImpl:WD,maxImpl:UD,maximumImpl:HD,minimumImpl:qD,multiplyImpl:KD,negImpl:jD,notEqualImpl:XD,prodImpl:YD,raggedTensorToTensorImpl:ZD,rangeImpl:JD,rsqrtImpl:QD,scatterImpl:tR,sigmoidImpl:eR,simpleAbsImpl:oy,sliceImpl:rR,sparseFillEmptyRowsImpl:oR,sparseReshapeImpl:nR,sparseSegmentReductionImpl:ny,sqrtImpl:sR,stridedSliceImpl:iR,stringNGramsImpl:aR,stringSplitImpl:lR,stringToHashBucketFastImpl:uR,subImpl:cR,tileImpl:pR,topKImpl:mR,transposeImpl:Kl,uniqueImpl:fR}=RC;function sv(r,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${r}.${e}`)}function ke(r,t){return t===1?[r]:sv(r,t)}function hR(r,t){if(r===1)return"rc";let e="";for(let o=0;o<r;o++)e+=t[o],o<r-1&&(e+=",");return e}var sy=class{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=Jt(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=ke("rc",this.rank),o=Et(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),i=this.getOutput(e);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(t){let e=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${t[t.length-1-i]},`+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let o=this.rank-2;o<this.rank;o++)e+=`${t[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(e+="||");return e}getSetup(t){if(this.rank===1)return"";let e=t.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(t){let e=this.getSourceCoordsArr(t);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`}};var Bp=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${wj(e,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Fp():Rp(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};

        ${o}

        setOutput(result);
      }
    `}};function wj(r,t){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t?rD(["r","c","d"],"inputShape"):sn(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var iy=class{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,o){let n=gR(e,o),s=xR(t,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=dR(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].shift();return this.usedTextures[s].push(l),l}let a;return n===nr.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):n===nr.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):n===nr.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):n===nr.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):n===nr.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,o,n){if(this.freeTextures==null)return;let s=gR(o,n),i=xR(e,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=dR(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=z().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;let t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);let e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function Cj(r,t){let e=r;if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===r.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}function dR(r,t,e,o,n){let s=vj(t,o),i;if(n){let[l,u]=zn(r[0],r[1]);i=l*u}else{let[l,u]=Wl(r[0],r[1]);i=l*u}let a=Cj(e,s);return i*a}function vj(r,t){switch(r){case nr.PACKED_2X2_FLOAT32:return ov(t);case nr.PACKED_2X2_FLOAT16:return nv(t);case nr.UNPACKED_FLOAT32:return tv(t);case nr.UNPACKED_FLOAT16:return ev(t);case nr.PACKED_4X1_UNSIGNED_BYTE:return rv(t);default:throw new Error(`Unknown physical texture type ${r}`)}}function Sj(r){return z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?nr.PACKED_2X2_FLOAT32:nr.UNPACKED_FLOAT32:r?nr.PACKED_2X2_FLOAT16:nr.UNPACKED_FLOAT16}function gR(r,t){if(r===hr.UPLOAD)return nr.PACKED_2X2_FLOAT32;if(r===hr.RENDER||r==null)return Sj(t);if(r===hr.DOWNLOAD||r===hr.PIXELS)return nr.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function xR(r,t,e){return`${r[0]}_${r[1]}_${t}_${e}`}var Cr=class{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},Ve="if (isnan(x)) return x;",yR="return x;",iv="return abs(x);";var bR="return (x >= 0.0) ? x : (exp(x) - 1.0);",wR=Ve+`
  return (x < 0.0) ? 0.0 : x;
`,CR=Ve+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,jl="return x;",vR="return 1.0 / (1.0 + exp(-1.0 * x));";var TR="return x;",IR=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,NR=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,kR=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,ER="return 1.0 / (1.0 + exp(-1.0 * x));",xo=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var ay=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length);let e=t.length,o=ke("rc",e),n=Et(e),s=hR(e,o),i=o.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var Ij=pr.whereImpl,Nj=1e-7,kj=1e-4,ly={};function Ej(r){return r in ly||(ly[r]={}),ly[r]}var $j=z().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),Aj=600;function Dj(){return z().global.screen==null?1024:z().global.screen.height*z().global.screen.width*window.devicePixelRatio*Aj/1024/1024}var Xl=class extends Wn{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!z().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(t!=null){if(t instanceof Mp)e=t;else{let o=ro(z().getNumber("WEBGL_VERSION"),t);e=new Mp(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=ro(z().getNumber("WEBGL_VERSION"));e=new Mp(o),this.binaryCache=Ej(z().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new iy(this.gpgpu),this.numMBBeforeWarning=Dj(),this.texData=new Ba(this,uo())}nextDataId(){return Xl.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(t,e,o){if((z().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||z().getBool("DEBUG"))&&this.checkNumericalProblems(t),o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:e,dtype:o,values:t,usage:hr.UPLOAD,refCount:1}),n}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){let e=this.texData.get(t);e.refCount++}decRef(t){if(this.texData.has(t)){let e=this.texData.get(t);e.refCount--}}move(t,e,o,n,s){if(z().getBool("DEBUG")&&this.checkNumericalProblems(e),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:o,dtype:n,values:e,usage:hr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){let e=this.texData.get(t),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=e;if(i!=null){let m;l?m=new xo(a,jl):m=new Cr(a,jl);let f=this.runWebGLProgram(m,[{dataId:t,shape:a,dtype:n}],n),h=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),h}if(o!=null)return this.convertAndCacheOnCPU(t);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=N.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(t,p)}async read(t){if(this.pendingRead.has(t)){let h=this.pendingRead.get(t);return new Promise(d=>h.push(d))}let e=this.texData.get(t),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=e;if(s!=null){let h;l?h=new xo(n,jl):h=new Cr(n,jl);let d=this.runWebGLProgram(h,[{dataId:t,shape:n,dtype:i}],i),g=this.read(d.dataId);return this.disposeIntermediateTensorInfo(d),g}if(o!=null)return this.convertAndCacheOnCPU(t);if(z().getBool("DEBUG")&&!z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&z().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&z().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);let h=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(h.texture.texture,...nh(n))}this.pendingRead.set(t,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let h=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),d=h[0],g=h[1];p=N.mergeRealAndImagArrays(d,g)}else if(u==null)p=this.getValuesFromTexture(t);else{let h=y.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,h)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let h=this.gpgpu.gl;ht(h,()=>h.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(t,p),f=this.pendingRead.get(t);return this.pendingRead.delete(t),f.forEach(h=>h(m)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&uo().removeDataId(t,this),this.pendingDeletes--),m}readToGPU(t,e={}){let o=this.texData.get(t),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new xo(s,jl):f=new Cr(s,jl);let h=this.runWebGLProgram(f,[{dataId:t,shape:s,dtype:a}],a),d=this.readToGPU(h,e);return this.disposeIntermediateTensorInfo(h),d}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(t,e.customTexShape),p=uo().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return pt(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return pt(t.shape,t.dtype,e)}checkNumericalProblems(t){if(t!=null)for(let e=0;e<t.length;e++){let o=t[e];if(!LA(o))throw z().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(t){let{shape:e,dtype:o,isPacked:n}=this.texData.get(t),s=y.sizeFromShape(e);if(z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(t),f=this.texData.get(m.dataId),h=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...nh(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),h}let i=z().getBool("WEBGL_PACK")&&n===!0,a=i?qx(e):e,l=i?new Qx(a):new Jx(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:t}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=y.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(t){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=y.now(),t)}async getQueryTime(t){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);let e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);let{complexTensorInfos:o}=this.texData.get(t);return o!=null&&(this.disposeData(o.real.dataId,e),this.disposeData(o.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){let{texture:e,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(t),l=a&&a.origDataId||t,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),e!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(e,n,s,i)));let c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=$j){return z().getBool("WEBGL_CPU_FORWARD")&&t.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){N.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let e=t.dataSync();return Ij(t.shape,e)}packedUnaryOp(t,e,o){let n=new xo(t.shape,e),s=this.compileAndRun(n,[t],o);return uo().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&t.dtype!=="complex64"){let n=oy(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,n)}if(z().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,iv,t.dtype);let e=new Cr(t.shape,iv),o=this.compileAndRun(e,[t]);return uo().makeTensorFromTensorInfo(o)}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e,o){return uo().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,o),this)}unpackTensor(t){let e=new ay(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){let e=new sy(t.shape),o=!0;return this.runWebGLProgram(e,[t],t.dtype,null,o)}packedReshape(t,e){let o=[_a(t.shape),...Oa(t.shape)],n={dtype:t.dtype,shape:o,dataId:t.dataId},s=[_a(e),...Oa(e)],i=new Bp(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],t.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}decode(t,e){let o=this.texData.get(t),{isPacked:n,shape:s,dtype:i}=o;if(e!=null){let m=y.sizeFromShape(s),f=e[0]*e[1]*4;y.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=qx(s),l;n?l=new Zx(a):l=new Yx(a);let u=!0,c=[e??nh(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:t}],i,c,u,e);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(t,e,o,n,s=!1,i){let a=this.makeTensorInfo(t.outputShape,o),l=this.texData.get(a.dataId);if(t.packedOutput&&(l.isPacked=!0),t.outPackingScheme===Fa.DENSE){let x=i??nh(t.outputShape);l.texShape=x.map(b=>b*2)}if(t.outTexUsage!=null&&(l.usage=t.outTexUsage),y.sizeFromShape(a.shape)===0)return l.values=y.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=e.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!t.packedInputs&&y.sizeFromShape(x.shape)<=z().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};t.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!t.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Ul(b.shape,x.shape)){let w=x,C=x.shape;x.shape=b.shape,x=this.packedReshape(x,C),u.push(x),b=this.texData.get(x.dataId),w.shape=C}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=cD(t,c,p),f=this.getAndSaveBinary(m,()=>lD(this.gpgpu,t,c,p)),h=this.activeTimers!=null,d;h&&(d=this.startTimer()),z().get("ENGINE_COMPILE_ONLY")||uD(this.gpgpu,f,c,p,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),h&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)}));let g=z().get("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!z().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let x=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),x}return a}compileAndRun(t,e,o,n,s=!1){return o=o||e[0].dtype,this.runWebGLProgram(t,e,o,n,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(z().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=M(()=>{if(!z().get("WEBGL_RENDER_FLOAT32_ENABLED")){let t=z().getBool("DEBUG");z().set("DEBUG",!1);let e=this.abs(nt(1e-8)).dataSync()[0];if(z().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?Nj:kj}uploadToGPU(t){let e=this.texData.get(t),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=e;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let p=e.texShape;if(p==null&&(p=XA(o,l),e.texShape=p),s!=null){let m=qx(o),f,h=p[1],d=p[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!g)&&([h,d]=zn(p[0],p[1])),l?f=new ey(m,g):f=new ty(m,g);let x=g?[d,h]:p,b=this.makeTensorInfo(x,n),w=this.texData.get(b.dataId);g?w.usage=hr.PIXELS:w.usage=hr.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),h,d,s);let C=[[d,h]],I=!0,$=this.runWebGLProgram(f,[b],n,C,I),D=this.texData.get($.dataId);e.texShape=D.texShape,e.isPacked=D.isPacked,e.usage=D.usage,z().get("ENGINE_COMPILE_ONLY")?this.disposeData($.dataId):(e.texture=D.texture,e.values=null,this.texData.delete($.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(p,a,n,l);e.texture=m}}convertAndCacheOnCPU(t,e){let o=this.texData.get(t),{dtype:n}=o;return this.releaseGPUData(t),e!=null&&(o.values=Rj(e,n)),o.values}acquireTexture(t,e,o,n){if(this.numBytesInGPU+=this.computeBytes(t,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,n)}computeBytes(t,e){return t[0]*t[1]*y.bytesPerElement(e)}checkCompileCompletion(){for(let[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){let t=[];if(this.gpgpu.parallelCompilationExtension){for(let[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}else{for(let[,e]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(e),n(!0)}catch(s){throw s}});t.push(o)}return Promise.all(t)}}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await Cm(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(XC(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let[,t]of Object.entries(this.binaryCache)){let{uniformLocations:e,customUniformLocations:o,infLoc:n,nanLoc:s,inShapesLocations:i,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=QC(this.gpgpu,t.program,t.webGLProgram);t.uniformLocations=e,t.customUniformLocations=o,t.infLoc=n,t.nanLoc=s,t.inShapesLocations=i,t.inTexShapesLocations=a,t.outShapeLocation=l,t.outShapeStridesLocation=u,t.outTexShapeLocation=c}}};Xl.nextDataId=0;function Rj(r,t){if(t==="float32"||t==="complex64")return r;if(t==="int32"||t==="bool"){let e=t==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<e.length;++o)e[o]=Math.round(r[o]);return e}else throw new Error(`Unknown dtype ${t}`)}sa.isBrowser()&&Ph("webgl",()=>new Xl,2);var uy=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var yo=class{constructor(t,e,o){this.variableNames=["A","B"],this.outputShape=N.assertAndGetBroadcastShape(e,o),this.enableShapeUniforms=Jt(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var La=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;var Go=class{constructor(t,e,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=N.assertAndGetBroadcastShape(e,o);let s=this.outputShape.length;this.enableShapeUniforms=Jt(s);let i="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${Et(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=ke("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function Ee(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var $R={kernelName:pn,backendName:"webgl",kernelFunc:Ee};function Ur(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.texData.get(s.dataId),a=Ee({inputs:{x:o},backend:e}),l=Ee({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var AR={kernelName:fu,backendName:"webgl",kernelFunc:Ur};var av="return (a < 0.) ? b * a : a;",lv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function Fj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=e.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Go(lv,n.shape,i.shape):new yo(av,n.shape,i.shape),l=e.runWebGLProgram(a,[n,i],"float32");return e.disposeIntermediateTensorInfo(i),l}var DR={kernelName:$i,backendName:"webgl",kernelFunc:Fj};var uv="return (a < 0.) ? b * a : a;",cv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function _j(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Go(cv,o.shape,n.shape):new yo(uv,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],"float32")}var RR={kernelName:Gi,backendName:"webgl",kernelFunc:_j};var Wo="if (isnan(x)) return x;",FR=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,_R=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;function ft({opSnippet:r,packedOpSnippet:t,cpuKernelImpl:e,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&e!=null){let p=a.texData.get(i.dataId),m=e(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&t!=null,c;return u?c=new xo(i.shape,t):c=new Cr(i.shape,r),a.runWebGLProgram(c,[i],l)}}function Wt({opSnippet:r,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let h=c.texData.get(l.dataId),d=c.texData.get(u.dataId),[g,x]=[[h.complexTensorInfos.real,d.complexTensorInfos.real],[h.complexTensorInfos.imag,d.complexTensorInfos.imag]].map(w=>{let[C,I]=w,$={dataId:C.dataId,dtype:C.dtype,shape:l.shape},D={dataId:I.dataId,dtype:I.dtype,shape:u.shape},F=new yo(r,l.shape,u.shape);return c.runWebGLProgram(F,[$,D],Fe(C.dtype,I.dtype))}),b=Ur({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),b}let p=s||Fe(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let h=c.texData.get(l.dataId).values,d=c.texData.get(u.dataId).values,g=l.dtype==="string"?N.fromUint8ToStringArray(h):h,x=l.dtype==="string"?N.fromUint8ToStringArray(d):d,[b,w]=n(l.shape,u.shape,g,x,p),C=c.makeTensorInfo(w,p),I=c.texData.get(C.dataId);return I.values=b,C}let m=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&t!=null,f;return m?f=new Go(t,l.shape,u.shape,e):f=new yo(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function ri(r,t=!1){if(r==="linear")return t?TR:yR;if(r==="relu")return t?NR:wR;if(r==="elu")return t?IR:bR;if(r==="relu6")return t?kR:CR;if(r==="prelu")return t?cv:uv;if(r==="leakyrelu")return t?lv:av;if(r==="sigmoid")return t?ER:vR;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Vp=class{constructor(t,e,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=Jt(this.outputShape.length);let c=n?t[1]:t[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";a&&(l?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:g=`vec4 activation(vec4 x) {
          ${a}
        }`,x="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let w="rc.x",C="rc.x";t[0]<e[0]?w=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(C=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${w};
          int batchB = ${C};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${d[0]});
          result += (${h[1]} * ${d[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var pv={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},uh=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=N.assertAndGetBroadcastShape(e,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var OR="return a * b;";function ch(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=N.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),u=new uh(pv.REAL,o.shape,n.shape),c=new uh(pv.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Ur({inputs:{real:m,imag:f},backend:e});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}if(e.shouldExecuteOnCPU([o,n])){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),[u,c]=KD(o.shape,n.shape,a.values,l.values,s),p=e.makeTensorInfo(c,s),m=e.texData.get(p.dataId);return m.values=u,p}let i;return z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new Go(OR,o.shape,n.shape):i=new yo(OR,o.shape,n.shape),e.runWebGLProgram(i,[o,n],s)}var LR={kernelName:ys,backendName:"webgl",kernelFunc:ch};function PR(r,t,e){let o=[_a(r.shape),...Oa(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[_a(t),...Oa(t)],i=new Bp(s,o),a=!0,l=[o],u=e.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=e,a=y.sizeFromShape(n.shape),l=y.inferFromImplicitShape(s,a),u=y.sizeFromShape(l);y.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!Ul(n.shape,l)&&!(c.texture!==null&&Ul(c.shape,l))?PR(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var zR={kernelName:Ui,backendName:"webgl",kernelFunc:Q};var ph=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(e!=null){let p=1/e;u=`sumValue += dot(values * ${y.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var cy=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a="0.0",l="";e==="prod"?a="1.0":e==="min"?(a="1.0 / 1e-20",l="min"):e==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="sum"?u="sumValue":e==="prod"?u="prodValue":e==="all"?u="allValue":e==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${e==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${e==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e==="min"} || ${e==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";e==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):e==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function Lj(r){let t=[];for(;t.length===0||t[t.length-1].outSize!==1;){let e=t.length?t[t.length-1].outSize:r[1],o=N.computeOptimalWindowSize(e);t.push({inSize:e,windowSize:o,outSize:Math.ceil(e/o)})}return t}function oo(r,t,e,o){let n=Lj(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;e==="mean"?c=i===0?new ph({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new ph({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new cy({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},e),p=s,s=o.runWebGLProgram(c,[s],t),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var py=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[e[i]];this.outputShape=o,this.rank=o.length;let n=Et(this.rank),s=Pj(e);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function Pj(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(t);for(let n=0;n<r.length;n++)o[r[n]]=e[n];return o.join()}var my=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(t.length);for(let c=0;c<o.length;c++)o[c]=t[e[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=Et(this.rank),s=sv("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function Pa(r,t,e){let o=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new my(r.shape,t):new py(r.shape,t);return e.runWebGLProgram(o,[r],r.dtype)}function MR(r,t,e,o){let n=t,s=r.shape.length,i=y.parseAxisParam(n,r.shape),a=i,l=N.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=Pa(r,l,o),a=N.getInnerMostAxes(a.length,s)),N.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=N.computeOutAndReduceShapes(c.shape,a),f=p;e&&(f=N.expandShapeToKeepDim(p,i));let h=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/h,x=Q({inputs:{x:c},attrs:{shape:[g,h]},backend:o}),b=sl(r.dtype),w=oo(x,b,"sum",o),C=Q({inputs:{x:w},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),u&&o.disposeIntermediateTensorInfo(c),C}function Yl(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return MR(n,s,i,e)}var BR={kernelName:Yi,backendName:"webgl",kernelFunc:Yl};function pe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=Kl(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=Pa(n,s,i);return u}var VR={kernelName:fn,backendName:"webgl",kernelFunc:pe};var mv=1e3;function Zl({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],d=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(d),b=y.sizeFromShape(g),C=Xr.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let I=e?[x,p,f]:[x,f,p],$=o?[b,h,m]:[b,m,h],D=Q({inputs:{x:r},backend:n,attrs:{shape:I}}),F=Q({inputs:{x:t},backend:n,attrs:{shape:$}}),O=[D,F],L=Math.max(x,b),B=e?D.shape[1]:D.shape[2],V=s!=null,G=i!=null,U=l==="leakyrelu",W=l!=null?ri(l,!0):null,K=V||G||U||W!=null,Z;if((f===1||h===1)&&B>mv&&K===!1){let J=D,ot=F;e&&(J=pe({inputs:{x:D},backend:n,attrs:{perm:[0,2,1]}}),O.push(J)),o&&(ot=pe({inputs:{x:F},backend:n,attrs:{perm:[0,2,1]}}),O.push(ot));let et=h!==1,at=h===1,it=J;et&&(it=Q({inputs:{x:J},backend:n,attrs:{shape:[L,B,1]}}),O.push(it));let ct=h===1?2:1,lt=ot;at&&(lt=Q({inputs:{x:ot},backend:n,attrs:{shape:[L,1,B]}}),O.push(lt));let mt=ch({inputs:{a:it,b:lt},backend:n});Z=Yl({inputs:{x:mt},backend:n,attrs:{axis:ct,keepDims:!0}}),O.push(mt)}else{let J=Fe(r.dtype,t.dtype),ot=new Vp(I,$,[L,f,h],e,o,V,W,G,U),et=[D,F];if(s!=null&&et.push(s),G&&et.push(i),U){let at=n.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));et.push(at),O.push(at)}Z=n.runWebGLProgram(ot,et,J)}let q=Q({inputs:{x:Z},backend:n,attrs:{shape:C}});O.push(Z);for(let J of O)n.disposeIntermediateTensorInfo(J);return q}function zj(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return Zl({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var GR={kernelName:Za,backendName:"webgl",kernelFunc:zj};var WR="return abs(x);";function Mj(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=e.texData.get(o.dataId),i=oy(s.values);return e.makeTensorInfo(o.shape,o.dtype,i)}let n;return z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new xo(o.shape,WR):n=new Cr(o.shape,WR),e.runWebGLProgram(n,[o],o.dtype)}var UR={kernelName:ci,backendName:"webgl",kernelFunc:Mj};var Bj=Ve+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,Vj=ft({opSnippet:Bj}),HR={kernelName:Hn,backendName:"webgl",kernelFunc:Vj};var Gj=Ve+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,Wj=ft({opSnippet:Gj}),qR={kernelName:qn,backendName:"webgl",kernelFunc:Wj};var KR="return a + b;",Uj=Wt({opSnippet:KR,packedOpSnippet:KR,supportsComplex:!0,cpuKernelImpl:kD}),jR={kernelName:Ho,backendName:"webgl",kernelFunc:Uj};var fy=class{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var hy=class{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function dy(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return Ee({inputs:{x:o[0]},backend:e});if(o.length>z().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=dy({inputs:o.slice(0,l),backend:e}),c=dy({inputs:o.slice(l),backend:e});return dy({inputs:[u,c],backend:e})}let n=o.map(l=>l.dtype).reduce((l,u)=>Fe(l,u)),s=o.map(l=>l.shape),a=z().getBool("WEBGL_PACK")?new hy(o[0].shape,s):new fy(o[0].shape,s);return e.runWebGLProgram(a,o,n)}var XR={kernelName:pi,backendName:"webgl",kernelFunc:dy};function Hj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=N.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=N.getInnerMostAxes(u.length,a)),N.assertAxesAreInnerMostDims("all",u,a);let[m,f]=N.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=oo(d,d.dtype,"all",e),x;if(i){let b=N.expandShapeToKeepDim(m,l);x=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var YR={kernelName:au,backendName:"webgl",kernelFunc:Hj};function qj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=N.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=N.getInnerMostAxes(u.length,a)),N.assertAxesAreInnerMostDims("any",u,a);let[m,f]=N.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=oo(d,d.dtype,"any",e),x;if(i){let b=N.expandShapeToKeepDim(m,l);x=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var ZR={kernelName:lu,backendName:"webgl",kernelFunc:qj};var gy=class{constructor(t,e,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=t;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=e==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var xy=class{constructor(t,e,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(t.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=Et(l),c=ke("coords",l),p,m;if(i===1){m=l+1;let F=Et(m);p=`
        ${F} sourceLocR = ${F}(${c.join()}, 0);
        ++${c[l-1]};
        ${F} sourceLocG = ${F}(${c.join()}, 0);
        ++${c[l-2]};
        ${F} sourceLocA = ${F}(${c.join()}, 0);
        --${c[l-1]};
        ${F} sourceLocB = ${F}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),h="."+f[m-1],d=f.map(F=>"int "+F),g=ke("sourceLocR",m-1).concat("inIdx.r"),x=ke("sourceLocG",m-1).concat("inIdx.g"),b=ke("sourceLocB",m-1).concat("inIdx.b"),w=ke("sourceLocA",m-1).concat("inIdx.a"),C=o==="max"?"greaterThan":"lessThan",I=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`,$=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,D=n?"":`
      float getBestIndicesAChannel(${d.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${d.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${D}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${$};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${$};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${C}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function JR(r,t,e,o=null){let n=t.shape[0],s=t.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=N.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new gy(a,e,o==null),u=[t];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=JR(r,t,e,c);return r.disposeIntermediateTensorInfo(c),p}function QR(r,t,e,o=null){let n=o!=null?o.shape:t.shape,s=n[n.length-1],i=N.computeOptimalWindowSize(s),a=new xy(n,i,e,o==null),l=o==null?[t]:[t,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===t.shape.length){let c=QR(r,t,e,u);return r.disposeIntermediateTensorInfo(u),c}return u}function yy(r,t,e,o){let n=[e];if(N.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,t.shape.length),!z().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let s=[],i=r.texData.get(t.dataId),a=i!==null&&i.isPacked,l=t;a&&(l=r.unpackTensor(t),s.push(l));let[u,c]=N.computeOutAndReduceShapes(l.shape,n),p=y.sizeFromShape(c),m=Q({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=JR(r,m,o);s.push(f);let h=Q({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(d=>r.disposeIntermediateTensorInfo(d)),h}return QR(r,t,o)}function Kj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=N.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=pe({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=N.getInnerMostAxes(i.length,l.shape.length)),N.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=yy(e,l,i[0],"max");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var tF={kernelName:mi,backendName:"webgl",kernelFunc:Kj};function jj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=N.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=pe({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=N.getInnerMostAxes(i.length,l.shape.length)),N.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=yy(e,l,i[0],"min");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var eF={kernelName:fi,backendName:"webgl",kernelFunc:jj};var Xj=Ve+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,Yj=ft({opSnippet:Xj}),rF={kernelName:Kn,backendName:"webgl",kernelFunc:Yj};var Zj=Ve+"return log(x + sqrt(x * x + 1.0));",Jj=ft({opSnippet:Zj}),oF={kernelName:jn,backendName:"webgl",kernelFunc:Jj};var Qj=Ve+`
  return atan(x);
`,t6=ft({opSnippet:Qj}),nF={kernelName:Xn,backendName:"webgl",kernelFunc:t6};var e6=FR+`
  return atan(a, b);
`,r6=`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+_R+`
  return result;
`,o6=Wt({opSnippet:e6,packedOpSnippet:r6}),sF={kernelName:Zn,backendName:"webgl",kernelFunc:o6};var n6=Ve+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,s6=ft({opSnippet:n6}),iF={kernelName:Yn,backendName:"webgl",kernelFunc:s6};var an=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterHeight,m=t.effectiveFilterWidth,f=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;let d=e==="avg",g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,x=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`,b="0.0";if(d||(b="-1.0 / 1e-20"),o){let F=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${F} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let w="max",C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(C="avgValue / count");let I=Math.floor(i/4)*4,$=i%4,D=`
      if (${d}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${D}
          }

          int xC = xCCorner + ${I};
          if (${$===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${D}
          } else if (${$===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${D}
          } else if (${$===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${D}
          }
        }
        setOutput(${C});
      }
    `}},za=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,p=t.dilationHeight,m=t.dilationWidth,f=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,g=t.padInfo.front,x=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;let w=e==="avg",C="0.0";if(w||(C="-1.0 / 1e-20"),o){let L=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${d};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${L} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${h} * ${d} +
                      wR * ${d} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let I="max",$=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&($="avgValue / count");let D=Math.floor(i/4)*4,F=i%4,O=`
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${C};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${C});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${D}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${O}
            }

            int xC = xCCorner + ${D};
            if (${F===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${O}
            } else if (${F===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${O}
            } else if (${F===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${O}
            }
          }
          setOutput(${$});
        }
      }
    `}};function i6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Mn(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(N.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=N.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Ee({inputs:{x:n},backend:e});let p=new an(c,"avg",!1);return e.runWebGLProgram(p,[n],"float32")}var aF={kernelName:hi,backendName:"webgl",kernelFunc:i6};function a6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=N.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new za(p,"avg",!1);return e.runWebGLProgram(m,[n],"float32")}var lF={kernelName:di,backendName:"webgl",kernelFunc:a6};var by=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=l-1-t.padInfo.top,p=u-1-t.padInfo.left,m=1/(e*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},wy=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterDepth,m=t.effectiveFilterHeight,f=t.effectiveFilterWidth,h=p-1-t.padInfo.front,d=m-1-t.padInfo.top,g=f-1-t.padInfo.left,x=1/(e*o*n);this.userCode=`
      const ivec3 pads = ivec3(${h}, ${d}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function l6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=N.computePool3DInfo(i.shape,a,l,p,u,c),f=new wy(m);return e.runWebGLProgram(f,[n],i.dtype)}var uF={kernelName:cu,backendName:"webgl",kernelFunc:l6};function u6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Mn([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=N.computePool2DInfo(i.shape,a,l,1,u),p=new by(c);return e.runWebGLProgram(p,[n],i.dtype)}var cF={kernelName:uu,backendName:"webgl",kernelFunc:u6};function c6(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return Zl({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var pF={kernelName:gi,backendName:"webgl",kernelFunc:c6};var Cy=class{constructor(t,e,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],N.assertAndGetBroadcastShape(t,e),N.assertAndGetBroadcastShape(t,o);let a="0.0";n!=null&&(N.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(N.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var vy=class{constructor(t,e,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],N.assertAndGetBroadcastShape(t,e),N.assertAndGetBroadcastShape(t,o);let a="vec4(0.0)";n!=null&&(N.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(N.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var p6=({inputs:r,backend:t,attrs:e})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=z().getBool("WEBGL_PACK_NORMALIZATION")?new vy(o.shape,n.shape,s.shape,c,p,l):new Cy(o.shape,n.shape,s.shape,c,p,l);return t.runWebGLProgram(m,u,u[0].dtype)},mF={kernelName:ki,backendName:"webgl",kernelFunc:p6};var Sy=class{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;let e=Et(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=m6(this.rank),n,s=t.map((i,a)=>`sourceLoc.${fv[a]} = start[${a}] + coords.${fv[a]};`);n=`
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},fv=["x","y","z","w","u","v"];function m6(r){if(r===1)return"sourceLoc";if(r<=6)return fv.slice(0,r).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var Ty=class{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let e=Et(this.rank),o=ke("coords",this.rank),n=ke("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${t[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${e}(${t.map((c,p)=>`start[${p}]`).join()});`:t.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function f6(r,t,e,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(e,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=e,i.dtype=r.dtype;let a=He.computeFlatOffset(t,y.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function ln(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=He.parseSliceParams(n,s,i);if(He.assertParamsValid(n,a,l),y.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);if(e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.texData.get(n.dataId),m=rR(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=e.texData.get(n.dataId),c=He.isSliceContinous(n.shape,a,l);if(u||!c){let p=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ty(l):new Sy(l),m=[a];return e.runWebGLProgram(p,[n],n.dtype,m)}return e.uploadToGPU(n.dataId),f6(n,a,l,e)}var fF={kernelName:Xi,backendName:"webgl",kernelFunc:ln};var h6=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,w)=>b*w),l=N.getReshaped(n.shape,s,a),u=N.getPermuted(l.length,s.length),c=N.getReshapedPermuted(n.shape,s,a),p=N.getSliceBeginCoords(i,s.length),m=N.getSliceSize(c,i,s.length),f=[],h=Q({inputs:{x:n},backend:e,attrs:{shape:l}}),d=pe({inputs:{x:h},backend:e,attrs:{perm:u}}),g=Q({inputs:{x:d},backend:e,attrs:{shape:c}}),x=ln({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(d),f.push(g),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),x},hF={kernelName:xi,backendName:"webgl",kernelFunc:h6};function d6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.readSync(n.dataId),l=e.readSync(s.dataId),u=ry(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var dF={kernelName:pu,backendName:"webgl",kernelFunc:d6};function g6(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.readSync(o.dataId),i=e.readSync(n.dataId),a=N.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var gF={kernelName:mu,backendName:"webgl",kernelFunc:g6};var x6="return float(a != b);",hv=Wt({opSnippet:x6,cpuKernelImpl:XD,dtype:"bool"}),xF={kernelName:Ya,backendName:"webgl",kernelFunc:hv};function oi(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return Ee({inputs:{x:n.complexTensorInfos.real},backend:e})}var yF={kernelName:Wu,backendName:"webgl",kernelFunc:oi};var y6="return float(int(x));";function bF(r,t){let e=new Cr(r.shape,y6),o=t.runWebGLProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function dv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Ee({inputs:{x:n},backend:e});let i=oe(n.shape),a=dv({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=Ur({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=oi({inputs:{input:n},backend:e}),a=dv({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(i),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=Ee({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let i=e.texData.get(n.dataId).values,[a,l,u]=$D(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}if(s==="int32")return bF(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=hv({inputs:{a:n,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var wF={kernelName:cn,backendName:"webgl",kernelFunc:dv};var CF="return ceil(x);",b6=ft({opSnippet:CF,packedOpSnippet:CF,cpuKernelImpl:AD}),vF={kernelName:Jn,backendName:"webgl",kernelFunc:b6};var Iy=class{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var Ny=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function w6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a;z().getBool("WEBGL_PACK_CLIP")?a=new Ny(n.shape):a=new Iy(n.shape);let l=[[s],[i]];return e.runWebGLProgram(a,[n],n.dtype,l)}var SF={kernelName:Qn,backendName:"webgl",kernelFunc:w6};var ky=class{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function TF(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function C6(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.texData.get(o.dataId),s=new ky(o.shape),i=[TF(o,n.complexTensorInfos.real),TF(o,n.complexTensorInfos.imag)];return e.runWebGLProgram(s,i,i[0].dtype)}var IF={kernelName:yi,backendName:"webgl",kernelFunc:C6};var Ey=class{constructor(t){this.outputShape=[],this.outputShape=N.computeOutShape(t,1),this.variableNames=t.map((i,a)=>`T${a}`);let e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];let o=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){let a=e[i-1];o.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=e.length,s=e[e.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var Ay=class{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=N.computeOutShape(t,e);let o=this.outputShape,n=o.length,s=Et(n),i=ke("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((d,g)=>`T${g}`);let l=new Array(t.length-1);l[0]=t[0][e];for(let d=1;d<l.length;d++)l[d]=l[d-1]+t[d][e];let u=a[e],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let d=1;d<l.length;d++){let g=l[d-1];m+=`
        if (${u} < ${l[d]}  && ${u} >= ${l[d-1]}) {
          return getChannel(
            getT${d}(${$y(a,u,g)}),
            vec2(${$y(c,u,g)}));
        }`}let f=l.length,h=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${$y(a,u,h)}),
          vec2(${$y(c,u,h)}));`,this.userCode=`
      float getValue(${a.map(d=>"int "+d)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function $y(r,t,e){let o=r.indexOf(t);return r.map((s,i)=>i===o?`${s} - ${e}`:s).join()}function Jl(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return Ee({inputs:{x:n.complexTensorInfos.imag},backend:e})}var NF={kernelName:Du,backendName:"webgl",kernelFunc:Jl};function Gp(r,t,e){let o=r[0].dtype;if(o==="complex64"){let p=r.map(g=>oi({inputs:{input:g},backend:e})),m=r.map(g=>Jl({inputs:{input:g},backend:e})),f=Gp(p,t,e),h=Gp(m,t,e),d=Ur({inputs:{real:f,imag:h},backend:e});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),m.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let p=r.map(b=>{let w=y.sizeFromShape(b.shape.slice(t));return Q({inputs:{x:b},backend:e,attrs:{shape:[-1,w]}})}),m=p.map(b=>({vals:e.readSync(b.dataId),shape:b.shape})),f=N.computeOutShape(p.map(b=>b.shape),1),h=p[0].shape[0]===1,d=DD(m,f,o,h),g=N.computeOutShape(r.map(b=>b.shape),t),x=e.makeTensorInfo(g,o,d);return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}let s=z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>s){let p=[];for(let f=0;f<r.length;f+=s){let h=r.slice(f,f+s);p.push(Gp(h,t,e))}let m=Gp(p,t,e);for(let f of p)e.disposeIntermediateTensorInfo(f);return m}if(z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){let p=new Ay(r.map(m=>m.shape),t);return e.runWebGLProgram(p,r,o)}let{tensors2D:i,outShape:a}=v6(r,t,e),l=new Ey(i.map(p=>p.shape)),u=e.runWebGLProgram(l,i,o);i.forEach(p=>e.disposeIntermediateTensorInfo(p));let c=Q({inputs:{x:u},attrs:{shape:a},backend:e});return e.disposeIntermediateTensorInfo(u),c}function v6(r,t,e){let o=N.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>Q({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(t))]},backend:e})),outShape:o}}function gv(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=N.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return Ee({inputs:{x:a[0]},backend:e});let l=a.map(u=>u.shape);return N.assertParamsConsistent(l,s),Gp(a,s,e)}var kF={kernelName:bi,backendName:"webgl",kernelFunc:gv};var Wp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;let i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,p=t.dilationWidth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4,g=t.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,w=g?3:1,C="",I="";o&&(n?C=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?C=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:C=`
          float activation(float x) {
            ${o}
          }
        `,I="result = activation(result);");let $=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${C}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${d===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${d===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${d===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${$}
        ${I}
        setOutput(result);
      }
    `}},Dy=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let e=t.padInfo.front,o=t.padInfo.top,n=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.filterDepth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${d===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${d===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${d===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var Up=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Jt(this.outputShape.length);let i=t.padInfo.left,a=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,p=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<c;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;for(let g=0;g<c;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(p+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*l};
           `,a===1){if(x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,l===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=i%2===0?y.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,l>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let f="",h="";o&&(n?f=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?f=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:f=`vec4 activation(vec4 x) {
           ${o}
         }`,h="result = activation(result);");let d=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${f}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${d}
         ${h}
         setOutput(result);
       }
     `}};var Ry=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=Jt(this.outputShape.length);let{dataFormat:o}=e,n=xe(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function Fy(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function _y({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=e.inChannels,p=l[0]*l[1]*l[2],m=e.outChannels,f=e.dataFormat==="channelsLast",h=!1,d=!1,g,x=[];if(s!=null){let C=Fy(s.shape,f);C!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:C}}),x.push(s))}if(n!=null){let C=Fy(n.shape,f);C!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:C}}),x.push(n))}if(!((p===1||m===1)&&c>mv)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),l.slice(-3))){let C=l[0]*l[1]*(l[2]+1),I={dataId:r.dataId,shape:[1,C,e.inChannels],dtype:r.dtype},$=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(Ul(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);let D=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});x.push(D);let F=Zl({a:I,b:D,backend:o,transposeA:h,transposeB:d,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),O=o.texData.get(F.dataId);y.assert(O.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=$,O.shape=e.outShape,g=Ee({inputs:{x:F},backend:o}),g.shape=e.outShape,x.push(F)}else{let C=e.outHeight*e.outWidth,I=Q({inputs:{x:r},backend:o,attrs:{shape:f?[e.batchSize,C,e.inChannels]:[e.batchSize,e.inChannels,C]}}),$=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}}),D=Zl({a:f?I:$,b:f?$:I,transposeA:!f,transposeB:d,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});g=Q({inputs:{x:D},backend:o,attrs:{shape:e.outShape}}),x.push(I),x.push($),x.push(D)}for(let C of x)o.disposeIntermediateTensorInfo(C);return g}function Oy({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=e,h=f==="channelsLast",d=l*u*c,g=m*p,x=[e.batchSize,d,g],b=!0,w=!1,C=[];if(s!=null){let q=Fy(s.shape,h);q!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:q}}),C.push(s))}if(n!=null){let q=Fy(n.shape,h);q!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:q}}),C.push(n))}let I=Q({inputs:{x:t},backend:o,attrs:{shape:[1,d,y.sizeFromShape(t.shape)/d]}});C.push(I);let $=new Ry(x,e),D=[r.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]],F=o.runWebGLProgram($,[r],"float32",D),O=Q({inputs:{x:F},backend:o,attrs:{shape:x}});C.push(F),C.push(O);let L=n!=null,B=s!=null,V=a==="leakyrelu",G=a?ri(a,!0):null,U=new Vp(h?O.shape:I.shape,h?I.shape:O.shape,h?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],b,w,L,G,B,V),W=h?[O,I]:[I,O];if(n&&W.push(n),B&&W.push(s),V){let q=o.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));W.push(q),C.push(q)}let K=o.runWebGLProgram(U,W,"float32"),Z=Q({inputs:{x:K},backend:o,attrs:{shape:e.outShape}});C.push(K);for(let q of C)o.disposeIntermediateTensorInfo(q);return Z}function S6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=N.convertConv2DDataFormat(l),m=N.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=_y({x:n,filter:s,convInfo:m,backend:e});else if(m.strideWidth<=2&&p==="channelsLast"&&z().getBool("WEBGL_EXP_CONV")){let d=new Up(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];f=e.runWebGLProgram(d,[n,s],"float32",g)}else if(z().getBool("WEBGL_CONV_IM2COL"))f=Oy({x:n,filter:s,convInfo:m,backend:e});else{let d=new Wp(m);f=e.runWebGLProgram(d,[n,s],"float32")}let h=Q({inputs:{x:f},backend:e,attrs:{shape:m.outShape}});return e.disposeIntermediateTensorInfo(f),h}var EF={kernelName:wi,backendName:"webgl",kernelFunc:S6};var Ly=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Py=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dataFormat==="channelsLast",a=e-1-t.padInfo.top,l=o-1-t.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},zy=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},My=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=e-1-t.padInfo.front,u=o-1-t.padInfo.top,c=n-1-t.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function T6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=N.convertConv2DDataFormat(l),m=N.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new Ly(m);return e.runWebGLProgram(f,[n,s],"float32")}var $F={kernelName:hu,backendName:"webgl",kernelFunc:T6};function I6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=N.convertConv2DDataFormat(u),m=N.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=new Py(m);return e.runWebGLProgram(f,[n,s],"float32")}var AF={kernelName:Ci,backendName:"webgl",kernelFunc:I6};function N6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=N.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new Dy(u);return e.runWebGLProgram(c,[n,s],"float32")}var DF={kernelName:vi,backendName:"webgl",kernelFunc:N6};function k6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o,u=N.computeConv3DInfo(n.shape,l,i,1,a),c=new zy(u);return e.runWebGLProgram(c,[n,s],"float32")}var RF={kernelName:du,backendName:"webgl",kernelFunc:k6};function E6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o,u=N.computeConv3DInfo(l,s.shape,a,1,i),c=new My(u);return e.runWebGLProgram(c,[n,s],"float32")}var FF={kernelName:gu,backendName:"webgl",kernelFunc:E6};var $6=Wo+`
  return cos(x);
`,A6=ft({opSnippet:$6}),_F={kernelName:ts,backendName:"webgl",kernelFunc:A6};var D6=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,R6=ft({opSnippet:D6}),OF={kernelName:es,backendName:"webgl",kernelFunc:R6};var By=class{constructor(t,e,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=t,[c]=e,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[h,d]=[`${a-1}.0`,`${l-1}.0`],[g,x,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[w,C,I]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${d} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${d}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${C};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${d} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var F6=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new By(n.shape,s.shape,a,l,u);return e.runWebGLProgram(c,[n,s,i],"float32")},LF={kernelName:yu,backendName:"webgl",kernelFunc:F6};var Ql;(function(r){r.Prod="*",r.Sum="+"})(Ql||(Ql={}));var mh=class{constructor(t,e,o,n){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===Ql.Prod?"1.0":"0.0",a=o?i:`getX(${PF(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Et(s)} coords = getOutputCoords();
        int end = ${zF(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${zF(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${PF(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function PF(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function zF(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function Vy(r,t,e,o,n,s){let i=t.shape.length,a=N.getAxesPermutation([o],i),l=t;a!=null&&(l=pe({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=N.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=Ee({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new mh(r,l.shape,!1,s),h=[[m]],d=p;p=e.runWebGLProgram(f,[p],p.dtype,h),e.disposeIntermediateTensorInfo(d)}if(n){let m=new mh(r,l.shape,n,s),f=p;p=e.runWebGLProgram(m,[p],p.dtype),e.disposeIntermediateTensorInfo(f)}if(a!=null){let m=N.getUndoAxesPermutation(a),f=pe({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(l),f}return p}function _6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return Vy(Ql.Prod,n,e,s,i,a)}var MF={kernelName:xu,backendName:"webgl",kernelFunc:_6};function O6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return Vy(Ql.Sum,n,e,s,i,a)}var BF={kernelName:Si,backendName:"webgl",kernelFunc:O6};function L6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=ry(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=ED(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var VF={kernelName:bu,backendName:"webgl",kernelFunc:L6};var Gy=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function P6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],d=new Gy(h,s,i);return e.runWebGLProgram(d,[n],n.dtype)}var GF={kernelName:wu,backendName:"webgl",kernelFunc:P6};var Hp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Jt(this.outputShape.length);let i=t.filterHeight,a=t.filterWidth,l=t.outChannels/t.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var qp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Jt(this.outputShape.length);let i=t.outChannels/t.inChannels,a=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,p=t.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<p;x++)f+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<p;x++)f+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let w=a%2===0?y.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:f+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):w===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let h="",d="";o&&(n?h=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?h=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:h=`vec4 activation(vec4 x) {
          ${o}
        }`,d="result = activation(result);");let g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${d}
        setOutput(result);
      }
    `}};function z6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),y.assert(N.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=N.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;z().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new qp(p):m=new Hp(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return e.runWebGLProgram(m,[n,s],"float32",f)}var WF={kernelName:Ti,backendName:"webgl",kernelFunc:z6};var Wy=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Uy=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,a=o-1-t.padInfo.left,l=t.outChannels/t.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function M6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=N.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new Wy(p);return e.runWebGLProgram(m,[n,s],"float32")}var UF={kernelName:Cu,backendName:"webgl",kernelFunc:M6};function B6(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=N.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new Uy(p);return e.runWebGLProgram(m,[n,s],"float32")}var HF={kernelName:vu,backendName:"webgl",kernelFunc:B6};var Hy=class{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function V6(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),i=Q({inputs:{x:o},backend:e,attrs:{shape:[s]}}),a=new Hy(s),l=e.runWebGLProgram(a,[i],i.dtype),u=Q({inputs:{x:l},backend:e,attrs:{shape:n}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}var qF={kernelName:Su,backendName:"webgl",kernelFunc:V6};var qy=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let{inHeight:e,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function G6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=N.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new qy(u);c=e.runWebGLProgram(p,[n,s],"float32");let m=Q({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),m}var KF={kernelName:Ii,backendName:"webgl",kernelFunc:G6};function W6(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=N.decodeEinsumEquation(n,s.length);N.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=N.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=N.getEinsumPermutation(f,l[g]),w;N.isIdentityPermutation(x)?w=s[g]:(w=pe({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let I=0;I<b.length;++I)C.splice(b[I],0,1);y.arraysEqual(w.shape,C)||(w=Q({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=ch({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=Yl({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var jF={kernelName:Tu,backendName:"webgl",kernelFunc:W6};var U6="return (x >= 0.0) ? x : (exp(x) - 1.0);",H6=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,q6=ft({opSnippet:U6,packedOpSnippet:H6}),XF={kernelName:os,backendName:"webgl",kernelFunc:q6};var K6="return (b >= 1.0) ? a : a * (b + 1.0);",j6=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,X6=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Go(j6,o.shape,n.shape):new yo(K6,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],o.dtype)},YF={kernelName:Iu,backendName:"webgl",kernelFunc:X6};var Y6=`
  return vec4(equal(a, b));
`,Z6="return float(a == b);",J6=Wt({opSnippet:Z6,packedOpSnippet:Y6,dtype:"bool",cpuKernelImpl:RD}),ZF={kernelName:Wa,backendName:"webgl",kernelFunc:J6};var Q6=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${N.ERF_P};
  float a1 = ${N.ERF_A1};
  float a2 = ${N.ERF_A2};
  float a3 = ${N.ERF_A3};
  float a4 = ${N.ERF_A4};
  float a5 = ${N.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,tX=ft({opSnippet:Q6}),JF={kernelName:ns,backendName:"webgl",kernelFunc:tX};var eX=Wo+`
  return exp(x);
`,rX=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,xv=ft({opSnippet:eX,packedOpSnippet:rX,cpuKernelImpl:FD,dtype:"float32"}),QF={kernelName:ss,backendName:"webgl",kernelFunc:xv};function Ky(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),Q({inputs:{x:s},backend:o,attrs:{shape:a}})}var t_={kernelName:Ni,backendName:"webgl",kernelFunc:Ky};var e_="return exp(x) - 1.0;",oX=ft({opSnippet:e_,packedOpSnippet:e_,cpuKernelImpl:_D}),r_={kernelName:is,backendName:"webgl",kernelFunc:oX};var fh=class{constructor(t,e,o){this.variableNames=["real","imag"];let n=e[1];this.outputShape=e;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(t==="real")a="return real * expR - imag * expI;";else if(t==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function jy(r,t,e){let o=e.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=Q({inputs:{x:r},backend:e,attrs:{shape:[i,s]}}),l=a.shape,u=new fh("real",l,t),c=new fh("imag",l,t),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Ur({inputs:{real:m,imag:f},backend:e});e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f);let d=Q({inputs:{x:h},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(h),d}function nX(r){let{inputs:t,backend:e}=r,{input:o}=t;return jy(o,!1,e)}var o_={kernelName:Nu,backendName:"webgl",kernelFunc:nX};var Xy=class{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function ni(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new Xy(o,n),a=[[n]];return t.runWebGLProgram(i,[],s,a)}}var n_={kernelName:ku,backendName:"webgl",kernelFunc:ni};var Yy=class{constructor(t){this.variableNames=["Image"],this.outputShape=[];let e=t[2];this.outputShape=t,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var s_={kernelName:Eu,backendName:"webgl",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new Yy(e.shape);return o.runWebGLProgram(n,[e],e.dtype)}};var i_="return floor(x);",sX=ft({opSnippet:i_,packedOpSnippet:i_,cpuKernelImpl:OD}),a_={kernelName:as,backendName:"webgl",kernelFunc:sX};var iX=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,aX=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,lX=Wt({opSnippet:iX,packedOpSnippet:aX,dtype:"int32"}),l_={kernelName:ls,backendName:"webgl",kernelFunc:lX};var Zy=class{constructor(t){this.variableNames=["A"];let e=xe(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var Jy=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let e=xe(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `}};var u_={kernelName:nm,backendName:"webgl",kernelFunc:uX},Kp,yv=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function uX(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o,i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];if(a||i){let d=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(Kp==null||d!==yv)&&(yv=d,Kp=document.createElement("canvas").getContext("2d",{willReadFrequently:yv})),Kp.canvas.width=l,Kp.canvas.height=u,Kp.drawImage(n,0,0,l,u),n=Kp.canvas}let m=e.makeTensorInfo(c,"int32");e.texData.get(m.dataId).usage=hr.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId),n);let f=z().getBool("WEBGL_PACK")?new Jy(p):new Zy(p),h=e.runWebGLProgram(f,[m],"int32");return e.disposeData(m.dataId),h}function cX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=N.convertConv2DDataFormat(c),g=N.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,d),x,b=[],w=i!=null,C=a!=null,I=f==="leakyrelu",$=()=>{let F=[n,s],O=(L,B)=>{if(B==="NCHW"&&L.shape.length===1&&L.shape[0]!==1){let V=Q({inputs:{x:L},backend:e,attrs:{shape:[L.shape[0],1,1]}});return b.push(V),V}return L};if(w&&F.push(O(i,c)),C&&F.push(O(a,c)),I){let L=e.makeTensorInfo([],"float32",y.createScalarValue(h,"float32"));F.push(L),b.push(L)}return F};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=_y({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else if(g.strideWidth<=2&&d==="channelsLast"&&z().getBool("WEBGL_EXP_CONV")){let F=f?ri(f,!0):null,O=new Up(g,w,F,C,I),L=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],B=$();x=e.runWebGLProgram(O,B,"float32",L)}else if(z().getBool("WEBGL_CONV_IM2COL"))x=Oy({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else{let F=f?ri(f,!1):null,O=new Wp(g,w,F,C,I),L=$();x=e.runWebGLProgram(O,L,"float32")}let D=Q({inputs:{x},backend:e,attrs:{shape:g.outShape}});return b.push(x),b.forEach(F=>e.disposeIntermediateTensorInfo(F)),D}var c_={kernelName:Ja,backendName:"webgl",kernelFunc:cX};function pX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=[],d=c;d==null&&(d=[1,1]),y.assert(N.eitherStridesOrDilationsAreOne(l,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${d}'`);let g=N.computeConv2DInfo(n.shape,s.shape,l,d,u,p,!0),x=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?ri(m,x):null,w=[n,s],C=i!=null,I=a!=null,$=m==="leakyrelu";if(C&&w.push(i),I&&w.push(a),$){let L=e.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));w.push(L),h.push(L)}let D;x?D=new qp(g,C,b,I,$):D=new Hp(g,C,b,I,$);let F=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],O=e.runWebGLProgram(D,w,"float32",F);return h.forEach(L=>e.disposeIntermediateTensorInfo(L)),O}var p_={kernelName:Qa,backendName:"webgl",kernelFunc:pX};var Qy=class{constructor(t,e,o,n){this.sliceDim=t,this.strides=e,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=Et(e.length),i=Et(o.length),a=this.sliceDim>1?"strides[j]":"strides",l=Et(n.length),u=n.length>1?"paramsShape[j]":"paramsShape";this.userCode=`
        ${s} strides = ${s}(${this.strides});
        ${l} paramsShape = ${l}(${this.paramsShape});
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            out_of_bounds = out_of_bounds || index < 0;
            out_of_bounds = out_of_bounds || index >= ${u};
            flattenIndex += index * ${a};
          }
          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function mX(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=N.prepareAndValidate(o,n),m=Q({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=Q({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=e.readSync(n.dataId),b=e.bufferSync(o),w=LD(x,b,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,w.values)}let h=new Qy(i,p,[u,c],o.shape),d=e.runWebGLProgram(h,[f,m],f.dtype),g=Q({inputs:{x:d},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(d),g}var m_={kernelName:$u,backendName:"webgl",kernelFunc:mX};var tb=class{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;let o=Et(this.rank),n=fX(t,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function fX(r,t){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${e[n]}`);return o.join()}function bv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0];if(z().get("DEBUG")){let b=e.readSync(s.dataId),w=n.shape[l];for(let C=0;C<b.length;++C){let I=b[C];y.assert(I<=w-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${w-1}]`)}}let u=N.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=Q({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=Q({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=e.bufferSync(f),w=e.bufferSync(m),C=PD(w,b,h);return p.forEach(I=>e.disposeIntermediateTensorInfo(I)),e.makeTensorInfo(u.outputShape,C.dtype,C.values)}let d=new tb(m.shape,h),g=e.runWebGLProgram(d,[m,f],m.dtype);p.push(g);let x=Q({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}var f_={kernelName:Ei,backendName:"webgl",kernelFunc:bv};var hX="return float(a > b);",dX=`
  return vec4(greaterThan(a, b));
`,gX=Wt({opSnippet:hX,packedOpSnippet:dX,cpuKernelImpl:zD,dtype:"bool"}),h_={kernelName:Ua,backendName:"webgl",kernelFunc:gX};var xX="return float(a >= b);",yX=`
  return vec4(greaterThanEqual(a, b));
`,bX=Wt({opSnippet:xX,packedOpSnippet:yX,dtype:"bool",cpuKernelImpl:MD}),d_={kernelName:us,backendName:"webgl",kernelFunc:bX};function wX(r){let{inputs:t,backend:e}=r,{input:o}=t;return jy(o,!0,e)}var g_={kernelName:Au,backendName:"webgl",kernelFunc:wX};var CX="return float(!isnan(x) && !isinf(x));",vX=ft({opSnippet:CX,dtype:"bool"}),x_={kernelName:cs,backendName:"webgl",kernelFunc:vX};var SX="return float(isinf(x));",TX=ft({opSnippet:SX,dtype:"bool"}),y_={kernelName:ps,backendName:"webgl",kernelFunc:TX};var IX="return float(isnan(x));",NX=ft({opSnippet:IX,dtype:"bool"}),b_={kernelName:ms,backendName:"webgl",kernelFunc:NX};var kX="return float(a < b);",EX=`
  return vec4(lessThan(a, b));
`,$X=Wt({opSnippet:kX,packedOpSnippet:EX,cpuKernelImpl:BD,dtype:"bool"}),w_={kernelName:Ha,backendName:"webgl",kernelFunc:$X};var AX="return float(a <= b);",DX=`
  return vec4(lessThanEqual(a, b));
`,RX=Wt({opSnippet:AX,packedOpSnippet:DX,cpuKernelImpl:VD,dtype:"bool"}),C_={kernelName:qa,backendName:"webgl",kernelFunc:RX};function FX(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=GD(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var v_={kernelName:Ru,backendName:"webgl",kernelFunc:FX};var _X=Wo+`
  return x < 0.0 ? 0./0. : log(x);
`,OX=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,LX=ft({opSnippet:_X,packedOpSnippet:OX,cpuKernelImpl:WD}),S_={kernelName:fs,backendName:"webgl",kernelFunc:LX};var PX=Wo+`
  return log(1.0 + x);
`,zX=ft({opSnippet:PX}),T_={kernelName:hs,backendName:"webgl",kernelFunc:zX};var MX="return float(a >= 1.0 && b >= 1.0);",BX=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,VX=Wt({opSnippet:MX,packedOpSnippet:BX,dtype:"bool"}),I_={kernelName:Ka,backendName:"webgl",kernelFunc:VX};var GX="return float(!(x >= 1.0));",WX=ft({opSnippet:GX}),N_={kernelName:ja,backendName:"webgl",kernelFunc:WX};var UX="return float(a >= 1.0 || b >= 1.0);",HX=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,qX=Wt({opSnippet:UX,packedOpSnippet:HX,dtype:"bool"}),k_={kernelName:Xa,backendName:"webgl",kernelFunc:qX};var eb=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var rb=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var KX=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=z().getBool("WEBGL_PACK_NORMALIZATION")?new rb(n.shape,s,i,a,l):new eb(n.shape,s,i,a,l);return e.runWebGLProgram(u,[n],n.dtype)},E_={kernelName:Ai,backendName:"webgl",kernelFunc:KX};var ob=class{constructor(t,e,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var jX=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new ob(n.shape,a,l,u,c);return e.runWebGLProgram(p,[n,s,i],n.dtype)},$_={kernelName:Fu,backendName:"webgl",kernelFunc:jX};function A_(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=oo(a,r.dtype,"max",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function wv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=N.getAxesPermutation(u,a),p=c!=null,m=e.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let w=e.texData.get(f.dataId).values,C=new Array(a);for(let D=0;D<C.length;D++)C[D]=n.shape[c[D]];let I=Kl(w,n.shape,n.dtype,c,C);f=e.makeTensorInfo(C,n.dtype);let $=e.texData.get(f.dataId);$.values=I}else f=Pa(n,c,e);u=N.getInnerMostAxes(u.length,a)}N.assertAxesAreInnerMostDims("max",u,a);let[h,d]=N.computeOutAndReduceShapes(f.shape,u),g=h;i&&(g=N.expandShapeToKeepDim(h,l));let x;if(m){let w=e.texData.get(f.dataId).values,C=UD(w,y.sizeFromShape(d),g,n.dtype);x=e.makeTensorInfo(g,n.dtype);let I=e.texData.get(x.dataId);I.values=C}else x=A_(f,d,g,e);return p&&e.disposeIntermediateTensorInfo(f),x}var D_={kernelName:Di,backendName:"webgl",kernelFunc:wv};var XX=uy+`
  return max(a, b);
`,YX=`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+La+`
  return result;
`,ZX=Wt({opSnippet:XX,packedOpSnippet:YX,cpuKernelImpl:HD}),R_={kernelName:ds,backendName:"webgl",kernelFunc:ZX};function JX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Mn(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(N.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=N.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Ee({inputs:{x:n},backend:e});let p=new an(c,"max",!1);return e.runWebGLProgram(p,[n],n.dtype)}var F_={kernelName:Ri,backendName:"webgl",kernelFunc:JX};function QX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=N.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new za(p,"max",!1);return e.runWebGLProgram(m,[n],n.dtype)}var __={kernelName:Fi,backendName:"webgl",kernelFunc:QX};var nb=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideHeight,o=t.strideWidth,n=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=s-1-t.padInfo.top,l=i-1-t.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},sb=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,p=l-1-t.padInfo.front,m=u-1-t.padInfo.top,f=c-1-t.padInfo.left,h=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function t5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=N.computePool3DInfo(i.shape,a,l,p,u,c),f=new za(m,"max",!0),h=e.runWebGLProgram(f,[i],i.dtype),d=new sb(m),g=e.runWebGLProgram(d,[n,h],i.dtype);return e.disposeIntermediateTensorInfo(h),g}var O_={kernelName:Ou,backendName:"webgl",kernelFunc:t5};function e5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Mn([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=N.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,h=new an(m,"max",f),d=e.runWebGLProgram(h,[a],a.dtype),g=new nb(m),x=e.runWebGLProgram(g,[n,d],a.dtype);return e.disposeIntermediateTensorInfo(d),x}var L_={kernelName:_u,backendName:"webgl",kernelFunc:e5};function P_(r,t,e,o){let n=new an(e,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new an(e,"max",!0,!0,t);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var z_={kernelName:Lu,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(N.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=N.computePool2DInfo(o.shape,n,s,u,i),[p,m]=P_(o,a,c,l);return[p,m]}};function M_(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=oo(a,"float32","mean",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var B_={kernelName:_i,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{keepDims:n,axis:s}=t,i=e,a=o.shape.length,l=y.parseAxisParam(s,o.shape),u=l,c=N.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],h=o;if(p){if(m){let C=i.texData.get(h.dataId).values,I=new Array(a);for(let F=0;F<I.length;F++)I[F]=o.shape[c[F]];let $=Kl(C,o.shape,o.dtype,c,I);h=i.makeTensorInfo(I,o.dtype);let D=i.texData.get(h.dataId);D.values=$}else h=Pa(o,c,i);f.push(h),u=N.getInnerMostAxes(u.length,a)}N.assertAxesAreInnerMostDims("sum",u,a);let[d,g]=N.computeOutAndReduceShapes(h.shape,u),x=d;n&&(x=N.expandShapeToKeepDim(d,l));let b=M_(h,g,x,i);for(let w of f)i.disposeIntermediateTensorInfo(w);return b}};function r5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=N.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=N.getInnerMostAxes(u.length,n.shape.length)),N.assertAxesAreInnerMostDims("min",u,a);let[m,f]=N.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=oo(d,d.dtype,"min",e),x;if(i){let b=N.expandShapeToKeepDim(m,l);x=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var V_={kernelName:Oi,backendName:"webgl",kernelFunc:r5};var o5=uy+`
  return min(a, b);
`,n5=`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+La+`
  return result;
`,s5=Wt({opSnippet:o5,packedOpSnippet:n5,cpuKernelImpl:qD}),G_={kernelName:gs,backendName:"webgl",kernelFunc:s5};var ib=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=e.map((c,p)=>c[0]+t[p]+c[1]);let n=t.length,s=Et(n),i=e.map(c=>c[0]).join(","),a=e.map((c,p)=>c[0]+t[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var ab=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((h,d)=>h[0]+t[d]+h[1]);let n=t.length,s=Et(n),i=e.map(h=>h[0]).join(","),a=e.map((h,d)=>h[0]+t[d]).join(","),l=ke("rc",n),u=ke("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let h=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let h=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${h}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${h}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var i5=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{paddings:n,mode:s}=e,i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ab(o.shape,n,s):new ib(o.shape,n,s);return t.runWebGLProgram(i,[o],o.dtype)},W_={kernelName:Li,backendName:"webgl",kernelFunc:i5};var a5=`if (b == 0.0) return NAN;
  return mod(a, b);`,l5=`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  `+La+`
  return result;
`,u5=Wt({opSnippet:a5,packedOpSnippet:l5}),U_={kernelName:xs,backendName:"webgl",kernelFunc:u5};var lb=class{constructor(t,e,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e-1}));
      }
    `}};var c5=`
if (a == b) {
  return 1.0;
};
return a / b;`,p5=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,Cv=Wt({opSnippet:c5,packedOpSnippet:p5,checkOutOfBounds:!0}),H_={kernelName:rs,backendName:"webgl",kernelFunc:Cv};var q_="return a - b;",vv=Wt({opSnippet:q_,packedOpSnippet:q_,supportsComplex:!0,cpuKernelImpl:cR}),K_={kernelName:Fs,backendName:"webgl",kernelFunc:vv};function Sv(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=wv({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=N.expandShapeToKeepDim(a.shape,i),u=Q({inputs:{x:a},backend:e,attrs:{shape:l}}),c=vv({inputs:{a:n,b:u},backend:e}),p=xv({inputs:{x:c},backend:e}),m=Yl({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=Q({inputs:{x:m},backend:e,attrs:{shape:l}}),h=Cv({inputs:{a:p,b:f},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}var j_={kernelName:Qi,backendName:"webgl",kernelFunc:Sv};function m5(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o,l=a?n:Sv({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new lb(u,c,s),m=[[i]],f=e.runWebGLProgram(p,[l],"int32",m);return a||e.disposeIntermediateTensorInfo(l),f}var X_={kernelName:Pu,backendName:"webgl",kernelFunc:m5};var f5=Ve+`
  return -x;
`,h5=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function d5(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.texData.get(o.dataId),[i,a]=jD(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n;return z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new xo(o.shape,h5):n=new Cr(o.shape,f5),e.runWebGLProgram(n,[o],o.dtype)}var Y_={kernelName:Pi,backendName:"webgl",kernelFunc:d5};var g5=pr.nonMaxSuppressionV3Impl;function x5(r){N.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=g5(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var Z_={kernelName:zu,backendName:"webgl",kernelFunc:x5};var y5=pr.nonMaxSuppressionV4Impl;function b5(r){N.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=y5(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var J_={kernelName:Mu,backendName:"webgl",kernelFunc:b5};var w5=pr.nonMaxSuppressionV5Impl;function C5(r){N.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=w5(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var Q_={kernelName:Bu,backendName:"webgl",kernelFunc:C5};var ub=class{constructor(t,e,o,n){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var v5=r=>{let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o,u=y.sizeFromShape(n.shape),c=new ub(u,i,a,l),p=Q({inputs:{x:n},backend:e,attrs:{shape:[u]}}),m=e.runWebGLProgram(c,[p],s);e.disposeIntermediateTensorInfo(p);let f=[...n.shape,i],h=Q({inputs:{x:m},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(m),h},tO={kernelName:Mi,backendName:"webgl",kernelFunc:v5};function hh(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=oi({inputs:{input:o},backend:e}),s=hh({inputs:{x:n},backend:e}),i=Jl({inputs:{input:o},backend:e}),a=hh({inputs:{x:i},backend:e}),l=Ur({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return ni({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var eO={kernelName:ra,backendName:"webgl",kernelFunc:hh};function rO(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=oi({inputs:{input:o},backend:e}),s=rO({inputs:{x:n},backend:e}),i=Jl({inputs:{input:o},backend:e}),a=hh({inputs:{x:i},backend:e}),l=Ur({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return ni({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var oO={kernelName:zi,backendName:"webgl",kernelFunc:rO};function S5(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return Ky({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=Ky({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=gv({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var nO={kernelName:Bi,backendName:"webgl",kernelFunc:S5};var cb=class{constructor(t,e,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);let n=t.length,s=Et(n),i=e.map(u=>u[0]).join(","),a=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var pb=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((d,g)=>d[0]+t[g]+d[1]);let n=t.length,s=Et(n),i=e.map(d=>d[0]).join(","),a=e.map((d,g)=>d[0]+t[g]).join(","),l=ke("rc",n),u=ke("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",h="";for(let d=0,g=n===1?2:4;d<g;d++)h+=`
        ${m[d]}
        if (${f}) {
          result[${d}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${d}] = getChannel(getX(${u.join()}), ${p});
        }
      `;h+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `}};var Tv=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return ni({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pb(n.shape,s,i):new cb(n.shape,s,i),l=[[i]];return e.runWebGLProgram(a,[n],n.dtype,l)},sO={kernelName:Vi,backendName:"webgl",kernelFunc:Tv};var T5=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,I5=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  `+La+`
  return result;
`,N5=Wt({opSnippet:T5,packedOpSnippet:I5}),iO={kernelName:bs,backendName:"webgl",kernelFunc:N5};function k5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=y.parseAxisParam(s,n.shape),c=u,p=N.getAxesPermutation(c,a),m=n;p!=null&&(m=pe({inputs:{x:n},backend:e,attrs:{perm:p}}),c=N.getInnerMostAxes(c.length,a),l.push(m)),N.assertAxesAreInnerMostDims("prod",c,a);let f;if(e.shouldExecuteOnCPU([m])){let h=e.texData.get(m.dataId).values,{outVals:d,outShape:g,outDtype:x}=YD(m.shape,m.dtype,h,c);f=e.makeTensorInfo(g,x,d)}else{let[h,d]=N.computeOutAndReduceShapes(m.shape,c),g=y.sizeFromShape(d),x=Q({inputs:{x:m},backend:e,attrs:{shape:[-1,g]}}),b=sl(n.dtype),w=oo(x,b,"prod",e);f=Q({inputs:{x:w},backend:e,attrs:{shape:h}}),l.push(x),l.push(w)}if(i){l.push(f);let h=N.expandShapeToKeepDim(f.shape,u);f=Q({inputs:{x:f},backend:e,attrs:{shape:h}})}return l.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var aO={kernelName:Wi,backendName:"webgl",kernelFunc:k5};function E5(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),p=e.readSync(i.dataId),m=a.map(g=>e.readSync(g.dataId)),f=a.map(g=>g.shape),[h,d]=ZD(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,d)}var lO={kernelName:Vu,backendName:"webgl",kernelFunc:E5};var Iv=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=JD(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},uO={kernelName:Gu,backendName:"webgl",kernelFunc:Iv};var $5="return 1.0 / x;",A5=ft({opSnippet:$5}),cO={kernelName:ws,backendName:"webgl",kernelFunc:A5};var D5=Ve+`
  return (x < 0.0) ? 0.0 : x;
`,R5=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,F5=ft({opSnippet:D5,packedOpSnippet:R5}),pO={kernelName:Cs,backendName:"webgl",kernelFunc:F5};var _5=Ve+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,O5=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,L5=ft({opSnippet:_5,packedOpSnippet:O5}),mO={kernelName:vs,backendName:"webgl",kernelFunc:L5};var mb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var fb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function P5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new fb(n.shape,l,u,s,i):new mb(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],"float32")}var fO={kernelName:qi,backendName:"webgl",kernelFunc:P5};var hb=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function z5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new hb(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var hO={kernelName:Hu,backendName:"webgl",kernelFunc:z5};var db=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var gb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function M5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new gb(n.shape,l,u,s,i):new db(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],n.dtype)}var dO={kernelName:Hi,backendName:"webgl",kernelFunc:M5};var xb=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function B5(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new xb(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var gO={kernelName:Uu,backendName:"webgl",kernelFunc:B5};var yb=class{constructor(t,e){this.variableNames=["x"];let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=t,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;return}let n=a=>e.indexOf(a)!==-1&&t[a]!==1?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`,s=t.map((a,l)=>n(l)).join(","),i=Et(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var bb=class{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=t;let n=ke("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=Et(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(h){return m(h)}function u(h){return h[o-1]="("+h[o-1]+" + 1)",m(h)}function c(h){return h[o-2]="("+h[o-2]+" + 1)",m(h)}function p(h){return h[o-1]="("+h[o-1]+" + 1)",h[o-2]="("+h[o-2]+" + 1)",m(h)}function m(h){let d=t.map((b,w)=>f(w,h)),g=d.join(","),x=d.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function f(h,d){return e.indexOf(h)!==-1&&t[h]!==1?`${t[h]} - ${d[h]} - 1`:`${d[h]}`}}};function V5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Ee({inputs:{x:n},backend:e});let l=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bb(n.shape,a):new yb(n.shape,a);return e.runWebGLProgram(l,[n],n.dtype)}var xO={kernelName:Ki,backendName:"webgl",kernelFunc:V5};var wb=class{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=t[1],n=t[2];this.outputShape=t;let s="";typeof e=="number"?s=`float outputValue = ${e.toFixed(2)};`:s=`
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var yO={kernelName:ac,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new wb(o.shape,s),[u,c]=N.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var G5=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,W5=ft({opSnippet:G5}),bO={kernelName:Ss,backendName:"webgl",kernelFunc:W5};var U5="return inversesqrt(x);",H5=ft({opSnippet:U5,cpuKernelImpl:QD}),wO={kernelName:Ts,backendName:"webgl",kernelFunc:H5};var jp=class{constructor(t,e,o,n,s,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=Et(s.length),u=Et(i.length),c="";o===1?c="i":o===2&&(c="i, j");let p=`getIndices(${c})`,m="";n===1?m="i":n===2&&(m="i, coords[1]");let f=`getUpdates(${m})`,h=e>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${h};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}};function q5(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=N.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=Q({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=Q({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),d=e.makeTensorInfo([],"float32",new Float32Array([0])),g=new jp(l,a,f.shape.length,h.shape.length,c,m),x=e.runWebGLProgram(g,[h,f,d],h.dtype),b=Q({inputs:{x},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(d),b}var CO={kernelName:qu,backendName:"webgl",kernelFunc:q5};var Cb=class{constructor(t,e,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=z().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function K5(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=new Cb(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return e.runWebGLProgram(a,[n,s],"int32",l)}var vO={kernelName:Ku,backendName:"webgl",kernelFunc:K5};var vb=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.outputShape=e;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${a[c]}`),c<t&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=Et(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function j5(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new vb(o.shape.length,n.shape,n.shape.length);return e.runWebGLProgram(i,[o,n,s],Fe(n.dtype,s.dtype))}var SO={kernelName:ji,backendName:"webgl",kernelFunc:j5};var X5=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${N.SELU_SCALEALPHA};
  float scale = ${N.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,Y5=ft({opSnippet:X5}),TO={kernelName:Is,backendName:"webgl",kernelFunc:Y5};var Z5=Wo+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,J5=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Q5=ft({opSnippet:Z5,packedOpSnippet:J5,cpuKernelImpl:eR}),IO={kernelName:$s,backendName:"webgl",kernelFunc:Q5};var t8=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,e8=ft({opSnippet:t8}),NO={kernelName:Es,backendName:"webgl",kernelFunc:e8};var r8=Wo+`
  return sin(x);
`,o8=ft({opSnippet:r8}),kO={kernelName:Ns,backendName:"webgl",kernelFunc:o8};var n8=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,s8=ft({opSnippet:n8}),EO={kernelName:ks,backendName:"webgl",kernelFunc:s8};var i8=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,a8=ft({opSnippet:i8}),$O={kernelName:As,backendName:"webgl",kernelFunc:a8};var l8=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=Tv({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=N.getReshaped(c.shape,s,a,!1),m=N.getPermuted(p.length,s.length,!1),f=N.getReshapedPermuted(c.shape,s,a,!1),h=Q({inputs:{x:c},backend:e,attrs:{shape:p}}),d=pe({inputs:{x:h},backend:e,attrs:{perm:m}}),g=Q({inputs:{x:d},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(d),u.forEach(x=>e.disposeIntermediateTensorInfo(x)),g},AO={kernelName:Zi,backendName:"webgl",kernelFunc:l8};function u8(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.readSync(o.dataId),l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=e.readSync(i.dataId)[0],[p,m,f,h,d]=oR(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var DO={kernelName:ju,backendName:"webgl",kernelFunc:u8};function c8(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.readSync(n.dataId)),a=e.readSync(o.dataId),l=Array.from(e.readSync(s.dataId)),[u,c,p]=nR(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var RO={kernelName:Xu,backendName:"webgl",kernelFunc:c8};function p8(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=ny(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var FO={kernelName:Yu,backendName:"webgl",kernelFunc:p8};function m8(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=ny(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var _O={kernelName:Zu,backendName:"webgl",kernelFunc:m8};function f8(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=N.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let x=e.bufferSync(n),b=e.bufferSync(s),w=y.decodeString(e.readSync(i.dataId)[0]),C=tR(x,b,a,m,c,u,l,p,w,f);return e.makeTensorInfo(a,C.dtype,C.values)}let h=new jp(u,l,n.shape.length,s.shape.length,p,[m,1],f),d=e.runWebGLProgram(h,[s,n,i],s.dtype),g=Q({inputs:{x:d},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(d),g}var OO={kernelName:Ju,backendName:"webgl",kernelFunc:f8};function h8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=N.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=ln({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var LO={kernelName:Ji,backendName:"webgl",kernelFunc:h8};var PO="return sqrt(x);",d8=ft({opSnippet:PO,packedOpSnippet:PO,cpuKernelImpl:sR}),zO={kernelName:Ds,backendName:"webgl",kernelFunc:d8};var g8="return x * x;",x8=ft({opSnippet:g8}),MO={kernelName:Qu,backendName:"webgl",kernelFunc:x8};var BO="return (a - b) * (a - b);",y8=Wt({opSnippet:BO,packedOpSnippet:BO}),VO={kernelName:Rs,backendName:"webgl",kernelFunc:y8};function b8({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=Ve+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new Cr(o.shape,n);return e.runWebGLProgram(s,[o],o.dtype)}var GO={kernelName:Ls,backendName:"webgl",kernelFunc:b8};var Sb=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=Et(o.length),i=Et(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${t});
      ${s} strides = ${s}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function w8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=He.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(d)I=Q({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let D=He.computeOutShape(b,w,C),F=ln({inputs:{x:n},backend:e,attrs:{begin:b,size:D}});I=Q({inputs:{x:F},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(F)}else if(e.shouldExecuteOnCPU([n])){let F=e.readSync(n.dataId),O=pt(n.shape,n.dtype,F),L=iR(f,O,C,b);I=e.makeTensorInfo(h,n.dtype,L.values)}else{let F=new Sb(b,C,f);I=e.runWebGLProgram(F,[n],n.dtype)}let $=Q({inputs:{x:I},backend:e,attrs:{shape:h}});return e.disposeIntermediateTensorInfo(I),$}var WO={kernelName:tc,backendName:"webgl",kernelFunc:w8};function C8(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,d]=aR(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var UO={kernelName:ec,backendName:"webgl",kernelFunc:C8};function v8(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.readSync(s.dataId),l=e.readSync(i.dataId)[0],[u,c,p]=lR(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var HO={kernelName:rc,backendName:"webgl",kernelFunc:v8};function S8(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.readSync(s.dataId),a=uR(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var qO={kernelName:oc,backendName:"webgl",kernelFunc:S8};var T8="return tan(x);",I8=ft({opSnippet:T8}),KO={kernelName:_s,backendName:"webgl",kernelFunc:I8};var N8=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,k8=ft({opSnippet:N8}),jO={kernelName:Os,backendName:"webgl",kernelFunc:k8};var Tb=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[i]*e[i];this.outputShape=o,this.rank=o.length;let n=Et(this.rank),s=E8(t);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function E8(r){let t=r.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(t===1)return`imod(resRC, ${r[0]})`;let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${e[n]}, ${r[n]})`);return o.join()}function Nv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=pt(n.shape,n.dtype,u),p=pR(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new Tb(n.shape,s);return e.runWebGLProgram(i,[n],n.dtype)}var XO={kernelName:mn,backendName:"webgl",kernelFunc:Nv};var Ib=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},Nb=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function tu(r,t){t!==null&&r.disposeIntermediateTensorInfo(t)}function YO(r){let t=1;for(;t<r;)t*=2;return t}function $8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=z().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=z().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([n])||c<a||s>l){let L=e.readSync(n.dataId),[B,V]=mR(L,u,n.dtype,s,i);return[e.makeTensorInfo(B.shape,B.dtype,B.values),e.makeTensorInfo(V.shape,V.dtype,V.values)]}if(s===0)return u[u.length-1]=0,[e.makeTensorInfo(u,n.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(c===1)return[n,ni({attrs:{shape:u,dtype:"int32",value:0},backend:e})];let p=e.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?e.unpackTensor(n):n,d=y.sizeFromShape(u)/c,g=Q({inputs:{x:f},attrs:{shape:[d,c]},backend:e});m&&tu(e,f);let x=YO(s),b=YO(c),w=null,C=()=>w===null?[g,g]:[g,w],I=(L,B,V)=>{let G=C(),U=new Ib(V),K=[[c],[w===null?1:0],[Number.NEGATIVE_INFINITY],[L],[B]],Z=w;w=e.runWebGLProgram(U,G,"int32",K),tu(e,Z)};for(let L=1;L<x;L*=2){let B=L*2;for(let V=L;V>=1;V/=2)I(B,V,[d,b])}for(let L=b;L>x;L/=2){let B=C(),V=new Nb([d,L/2]),U=[[c],[w===null?1:0],[x]],W=w;w=e.runWebGLProgram(V,B,"int32",U),tu(e,W);let K=x/2,Z=K*2;for(let q=K;q>=1;q/=2)I(Z,q,w.shape)}let $=w;w=ln({inputs:{x:w},backend:e,attrs:{begin:0,size:[d,s]}}),tu(e,$);let D=bv({inputs:{x:g,indices:w},backend:e,attrs:{axis:1,batchDims:1}});tu(e,g);let F=u.slice(0,-1);F.push(s),$=w,w=Q({inputs:{x:w},attrs:{shape:F},backend:e}),tu(e,$);let O=D;return D=Q({inputs:{x:D},attrs:{shape:F},backend:e}),tu(e,O),[D,w]}var ZO={kernelName:nc,backendName:"webgl",kernelFunc:$8};var kb=class{constructor(t,e,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function A8(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=new kb(p,m,i,a,l,g);return e.runWebGLProgram(x,[n,s],"float32")}var JO={kernelName:sc,backendName:"webgl",kernelFunc:A8};function D8(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Mn(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=fR(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var QO={kernelName:ic,backendName:"webgl",kernelFunc:D8};function R8(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let d=0;d<a;d++)d!==s&&(u[c++]=i.shape[d]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let d=0;d<h.length;d++){m[s]=d;let g=ln({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),x=Q({inputs:{x:g},backend:e,attrs:{shape:u}});h[d]=x,p.push(g)}return p.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var tL={kernelName:ta,backendName:"webgl",kernelFunc:R8};var Eb=class{constructor(t,e){this.variableNames=["x","segmentIds"];let o=t.windowSize,n=t.batchSize,s=t.inSize,i=t.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function F8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=N.getAxesPermutation([u],a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),l.push(p),u=N.getInnerMostAxes(1,a)[0]);let m=N.segment_util.computeOutShape(p.shape,u,i),f=y.sizeFromShape([p.shape[u]]),h=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,f]}});l.push(h);let d=sl(n.dtype),g=(C,I,$,D,F)=>{let O=C.shape[0],L=C.shape[1],B=N.segment_util.segOpComputeOptimalWindowSize(L,F),V={windowSize:B,inSize:L,batchSize:O,numSegments:F},G=new Eb(V,I),U=e.compileAndRun(G,[C,$],D);if(l.push(U),U.shape[1]===F)return U;let W=Iv({backend:e,attrs:{start:0,stop:F,step:1,dtype:"float32"}}),K=Nv({inputs:{x:W},backend:e,attrs:{reps:[L/B]}});return l.push(W),l.push(K),g(U,I,K,D,F)},x=g(h,"unsortedSegmentSum",s,d,i),b=Q({inputs:{x},backend:e,attrs:{shape:m}}),w=b;if(c!=null){l.push(b);let C=N.getUndoAxesPermutation(c);w=pe({inputs:{x:w},backend:e,attrs:{perm:C}})}return l.forEach(C=>e.disposeIntermediateTensorInfo(C)),w}var eL={kernelName:ea,backendName:"webgl",kernelFunc:F8};var _8=[GR,UR,HR,qR,jR,XR,YR,ZR,tF,eF,rF,oF,nF,sF,iF,aF,lF,uF,cF,pF,mF,hF,dF,gF,wF,vF,SF,AR,IF,kF,EF,$F,AF,DF,RF,FF,_F,OF,LF,MF,BF,VF,GF,WF,UF,HF,qF,KF,jF,XF,YF,ZF,JF,QF,t_,r_,o_,n_,s_,a_,l_,u_,c_,p_,m_,f_,h_,d_,$R,g_,NF,x_,y_,b_,DR,w_,C_,v_,S_,T_,I_,N_,k_,E_,$_,D_,R_,F_,__,O_,L_,z_,B_,V_,G_,W_,U_,X_,LR,Y_,Z_,J_,Q_,xF,tO,oO,nO,sO,iO,RR,aO,lO,uO,yF,H_,cO,pO,mO,zR,fO,hO,dO,gO,xO,yO,bO,wO,CO,vO,SO,TO,IO,NO,kO,EO,fF,j_,$O,AO,DO,RO,FO,_O,OO,LO,zO,MO,VO,GO,WO,UO,HO,qO,K_,BR,KO,jO,XO,ZO,JO,VR,QO,tL,eL,eO];for(let r of _8)wh(r);var Hr=document.getElementById("video"),Bn=document.getElementById("canvas"),$b=document.createElement("canvas"),rL=$b.getContext("2d"),L8=document.getElementById("markregions"),P8=document.getElementById("blurnude"),z8=document.getElementById("blursexy"),sr=Bn.getContext("2d"),Ye={},Db,Ab=r=>console.log(r),_r={modelPath:"../model/model.json",videoPath:"../samples/video.webm",minScore:.3,maxResults:50,iouThreshold:.5,outputNodes:["output1","output2","output3"],blurRadius:25,resolution:[1280,720]},M8=["exposed anus","exposed armpits","belly","exposed belly","buttocks","exposed buttocks","female face","male face","feet","exposed feet","breast","exposed breast","vagina","exposed vagina","male breast","exposed male breast"],dh={person:[6,7],sexy:[1,2,3,4,8,9,10,15],nude:[0,5,11,12,13]};async function B8(r,t,e,o){let n=await r.array(),s=await t.data(),i=await e.data(),a=await An.nonMaxSuppressionAsync(n[0],s,_r.maxResults,_r.iouThreshold,_r.minScore),l=await a.data();xt(a);let u=[];for(let p in l){let m=parseInt(p);u.push({score:s[p],id:i[m],class:M8[i[m]],box:[Math.trunc(n[0][m][0]),Math.trunc(n[0][m][1]),Math.trunc(n[0][m][3]-n[0][m][1]),Math.trunc(n[0][m][2]-n[0][m][0])]})}return{input:{width:o.shape[2],height:o.shape[1]},person:u.filter(p=>dh.person.includes(p.id)).length>0,sexy:u.filter(p=>dh.sexy.includes(p.id)).length>0,nude:u.filter(p=>dh.nude.includes(p.id)).length>0,parts:u}}function oL({left:r=0,top:t=0,width:e=0,height:o=0}){e===0||o===0||Bn.width===0||Bn.height===0||($b.width=e/_r.blurRadius+1,$b.height=o/_r.blurRadius+1,rL.imageSmoothingEnabled=!0,rL.drawImage(Bn,r,t,e,o,0,0,e/_r.blurRadius,o/_r.blurRadius),sr.drawImage($b,r,t,e,o))}function V8({x:r=0,y:t=0,width:e=0,height:o=0,radius:n=8,lineWidth:s=2,color:i="white",title:a="",font:l='16px "Segoe UI"'}){sr.lineWidth=s,sr.beginPath(),sr.moveTo(r+n,t),sr.lineTo(r+e-n,t),sr.quadraticCurveTo(r+e,t,r+e,t+n),sr.lineTo(r+e,t+o-n),sr.quadraticCurveTo(r+e,t+o,r+e-n,t+o),sr.lineTo(r+n,t+o),sr.quadraticCurveTo(r,t+o,r,t+o-n),sr.lineTo(r,t+n),sr.quadraticCurveTo(r,t,r+n,t),sr.closePath(),sr.strokeStyle=i,sr.stroke(),sr.lineWidth=2,sr.fillStyle=i,sr.font=l,sr.fillText(a,r+4,t-4)}function G8(r){for(let t of r.parts)dh.nude.includes(t.id)&&P8.checked&&oL({left:t.box[0],top:t.box[1],width:t.box[2],height:t.box[3]}),dh.sexy.includes(t.id)&&z8.checked&&oL({left:t.box[0],top:t.box[1],width:t.box[2],height:t.box[3]}),L8.checked&&V8({x:t.box[0],y:t.box[1],width:t.box[2],height:t.box[3],title:`${Math.round(100*t.score)}% ${t.class}`})}var kv=0;async function nL(){if(Bn.width!==Hr.videoWidth&&(Bn.width=Hr.videoWidth),Bn.height!==Hr.videoHeight&&(Bn.height=Hr.videoHeight),Hr.currentTime!==kv&&Bn.width>0&&Db&&Hr.readyState>=2){kv=Hr.currentTime,Ye.buffer=await yc.fromPixelsAsync(Hr),Ye.resize=_r.resolution[0]>0&&_r.resolution[1]>0&&(_r.resolution[0]!==Hr.videoWidth||_r.resolution[1]!==Hr.videoHeight)?An.resizeNearestNeighbor(Ye.buffer,[_r.resolution[1],_r.resolution[0]]):Ye.buffer,Ye.cast=j(Ye.resize,"float32"),Ye.batch=Pe(Ye.cast,0);let r=Date.now();[Ye.boxes,Ye.scores,Ye.classes]=await Db.executeAsync(Ye.batch,_r.outputNodes);let t=Date.now(),e=await B8(Ye.boxes,Ye.scores,Ye.classes,Ye.cast);await yc.toPixels(Ye.resize,Bn),G8(e),Ab({ts:kv,time:t-r,res:e,t:Ye}),Object.keys(Ye).forEach(o=>xt(Ye[o]))}requestAnimationFrame(nL)}async function W8(){uo().registryFactory.webgpu&&navigator?.gpu?await Lh("webgpu"):await Lh("webgl"),z().set("WEBGL_USE_SHAPES_UNIFORMS",!0),await MS(),Ab({tf:Mh,backend:BS(),available:uo().registryFactory,flags:z().getFlags()}),Db=await H0(_r.modelPath),Ab({model:Db}),Hr.oncanplay=()=>Ab({video:Hr.src,width:Hr.videoWidth,height:Hr.videoHeight}),Hr.src=_r.videoPath,await nL()}window.onload=W8;
//# sourceMappingURL=index.js.map
