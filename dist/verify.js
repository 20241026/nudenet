/*
  NudeNet
  author: <https://github.com/vladmandic>'
*/

var Tz=Object.create;var Wb=Object.defineProperty;var Nz=Object.getOwnPropertyDescriptor;var Ez=Object.getOwnPropertyNames;var $z=Object.getPrototypeOf,Az=Object.prototype.hasOwnProperty;var to=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),Br=(r,t)=>{for(var e in t)Wb(r,e,{get:t[e],enumerable:!0})},Dz=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Ez(t))!Az.call(r,n)&&n!==e&&Wb(r,n,{get:()=>t[n],enumerable:!(o=Nz(t,n))||o.enumerable});return r};var Gp=(r,t,e)=>(e=r!=null?Tz($z(r)):{},Dz(t||!r||!r.__esModule?Wb(e,"default",{value:r,enumerable:!0}):e,r));var GS=to((e9,VS)=>{VS.exports=ve;var _o=null;try{_o=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function ve(r,t,e){this.low=r|0,this.high=t|0,this.unsigned=!!e}ve.prototype.__isLong__;Object.defineProperty(ve.prototype,"__isLong__",{value:!0});function Ur(r){return(r&&r.__isLong__)===!0}ve.isLong=Ur;var RS={},FS={};function ml(r,t){var e,o,n;return t?(r>>>=0,(n=0<=r&&r<256)&&(o=FS[r],o)?o:(e=ke(r,(r|0)<0?-1:0,!0),n&&(FS[r]=e),e)):(r|=0,(n=-128<=r&&r<128)&&(o=RS[r],o)?o:(e=ke(r,r<0?-1:0,!1),n&&(RS[r]=e),e))}ve.fromInt=ml;function Oo(r,t){if(isNaN(r))return t?pl:Po;if(t){if(r<0)return pl;if(r>=LS)return BS}else{if(r<=-OS)return Gr;if(r+1>=OS)return MS}return r<0?Oo(-r,t).neg():ke(r%Qu|0,r/Qu|0,t)}ve.fromNumber=Oo;function ke(r,t,e){return new ve(r,t,e)}ve.fromBits=ke;var Xh=Math.pow;function ow(r,t,e){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return Po;if(typeof t=="number"?(e=t,t=!1):t=!!t,e=e||10,e<2||36<e)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return ow(r.substring(1),t,e).neg();for(var n=Oo(Xh(e,8)),s=Po,i=0;i<r.length;i+=8){var a=Math.min(8,r.length-i),l=parseInt(r.substring(i,i+a),e);if(a<8){var u=Oo(Xh(e,a));s=s.mul(u).add(Oo(l))}else s=s.mul(n),s=s.add(Oo(l))}return s.unsigned=t,s}ve.fromString=ow;function Ln(r,t){return typeof r=="number"?Oo(r,t):typeof r=="string"?ow(r,t):ke(r.low,r.high,typeof t=="boolean"?t:r.unsigned)}ve.fromValue=Ln;var _S=1<<16,tM=1<<24,Qu=_S*_S,LS=Qu*Qu,OS=LS/2,PS=ml(tM),Po=ml(0);ve.ZERO=Po;var pl=ml(0,!0);ve.UZERO=pl;var Zu=ml(1);ve.ONE=Zu;var zS=ml(1,!0);ve.UONE=zS;var rw=ml(-1);ve.NEG_ONE=rw;var MS=ke(-1,2147483647,!1);ve.MAX_VALUE=MS;var BS=ke(-1,-1,!0);ve.MAX_UNSIGNED_VALUE=BS;var Gr=ke(0,-2147483648,!1);ve.MIN_VALUE=Gr;var ct=ve.prototype;ct.toInt=function(){return this.unsigned?this.low>>>0:this.low};ct.toNumber=function(){return this.unsigned?(this.high>>>0)*Qu+(this.low>>>0):this.high*Qu+(this.low>>>0)};ct.toString=function(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(Gr)){var e=Oo(t),o=this.div(e),n=o.mul(e).sub(this);return o.toString(t)+n.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var s=Oo(Xh(t,6),this.unsigned),i=this,a="";;){var l=i.div(s),u=i.sub(l.mul(s)).toInt()>>>0,c=u.toString(t);if(i=l,i.isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}};ct.getHighBits=function(){return this.high};ct.getHighBitsUnsigned=function(){return this.high>>>0};ct.getLowBits=function(){return this.low};ct.getLowBitsUnsigned=function(){return this.low>>>0};ct.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Gr)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,e=31;e>0&&(t&1<<e)==0;e--);return this.high!=0?e+33:e+1};ct.isZero=function(){return this.high===0&&this.low===0};ct.eqz=ct.isZero;ct.isNegative=function(){return!this.unsigned&&this.high<0};ct.isPositive=function(){return this.unsigned||this.high>=0};ct.isOdd=function(){return(this.low&1)===1};ct.isEven=function(){return(this.low&1)===0};ct.equals=function(t){return Ur(t)||(t=Ln(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};ct.eq=ct.equals;ct.notEquals=function(t){return!this.eq(t)};ct.neq=ct.notEquals;ct.ne=ct.notEquals;ct.lessThan=function(t){return this.comp(t)<0};ct.lt=ct.lessThan;ct.lessThanOrEqual=function(t){return this.comp(t)<=0};ct.lte=ct.lessThanOrEqual;ct.le=ct.lessThanOrEqual;ct.greaterThan=function(t){return this.comp(t)>0};ct.gt=ct.greaterThan;ct.greaterThanOrEqual=function(t){return this.comp(t)>=0};ct.gte=ct.greaterThanOrEqual;ct.ge=ct.greaterThanOrEqual;ct.compare=function(t){if(Ur(t)||(t=Ln(t)),this.eq(t))return 0;var e=this.isNegative(),o=t.isNegative();return e&&!o?-1:!e&&o?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};ct.comp=ct.compare;ct.negate=function(){return!this.unsigned&&this.eq(Gr)?Gr:this.not().add(Zu)};ct.neg=ct.negate;ct.add=function(t){Ur(t)||(t=Ln(t));var e=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,i=t.high>>>16,a=t.high&65535,l=t.low>>>16,u=t.low&65535,c=0,p=0,m=0,f=0;return f+=s+u,m+=f>>>16,f&=65535,m+=n+l,p+=m>>>16,m&=65535,p+=o+a,c+=p>>>16,p&=65535,c+=e+i,c&=65535,ke(m<<16|f,c<<16|p,this.unsigned)};ct.subtract=function(t){return Ur(t)||(t=Ln(t)),this.add(t.neg())};ct.sub=ct.subtract;ct.multiply=function(t){if(this.isZero())return Po;if(Ur(t)||(t=Ln(t)),_o){var e=_o.mul(this.low,this.high,t.low,t.high);return ke(e,_o.get_high(),this.unsigned)}if(t.isZero())return Po;if(this.eq(Gr))return t.isOdd()?Gr:Po;if(t.eq(Gr))return this.isOdd()?Gr:Po;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(PS)&&t.lt(PS))return Oo(this.toNumber()*t.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,i=this.low&65535,a=t.high>>>16,l=t.high&65535,u=t.low>>>16,c=t.low&65535,p=0,m=0,f=0,h=0;return h+=i*c,f+=h>>>16,h&=65535,f+=s*c,m+=f>>>16,f&=65535,f+=i*u,m+=f>>>16,f&=65535,m+=n*c,p+=m>>>16,m&=65535,m+=s*u,p+=m>>>16,m&=65535,m+=i*l,p+=m>>>16,m&=65535,p+=o*c+n*u+s*l+i*a,p&=65535,ke(f<<16|h,p<<16|m,this.unsigned)};ct.mul=ct.multiply;ct.divide=function(t){if(Ur(t)||(t=Ln(t)),t.isZero())throw Error("division by zero");if(_o){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var e=(this.unsigned?_o.div_u:_o.div_s)(this.low,this.high,t.low,t.high);return ke(e,_o.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?pl:Po;var o,n,s;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return pl;if(t.gt(this.shru(1)))return zS;s=pl}else{if(this.eq(Gr)){if(t.eq(Zu)||t.eq(rw))return Gr;if(t.eq(Gr))return Zu;var i=this.shr(1);return o=i.div(t).shl(1),o.eq(Po)?t.isNegative()?Zu:rw:(n=this.sub(t.mul(o)),s=o.add(n.div(t)),s)}else if(t.eq(Gr))return this.unsigned?pl:Po;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();s=Po}for(n=this;n.gte(t);){o=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(o)/Math.LN2),l=a<=48?1:Xh(2,a-48),u=Oo(o),c=u.mul(t);c.isNegative()||c.gt(n);)o-=l,u=Oo(o,this.unsigned),c=u.mul(t);u.isZero()&&(u=Zu),s=s.add(u),n=n.sub(c)}return s};ct.div=ct.divide;ct.modulo=function(t){if(Ur(t)||(t=Ln(t)),_o){var e=(this.unsigned?_o.rem_u:_o.rem_s)(this.low,this.high,t.low,t.high);return ke(e,_o.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};ct.mod=ct.modulo;ct.rem=ct.modulo;ct.not=function(){return ke(~this.low,~this.high,this.unsigned)};ct.and=function(t){return Ur(t)||(t=Ln(t)),ke(this.low&t.low,this.high&t.high,this.unsigned)};ct.or=function(t){return Ur(t)||(t=Ln(t)),ke(this.low|t.low,this.high|t.high,this.unsigned)};ct.xor=function(t){return Ur(t)||(t=Ln(t)),ke(this.low^t.low,this.high^t.high,this.unsigned)};ct.shiftLeft=function(t){return Ur(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?ke(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):ke(0,this.low<<t-32,this.unsigned)};ct.shl=ct.shiftLeft;ct.shiftRight=function(t){return Ur(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?ke(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):ke(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};ct.shr=ct.shiftRight;ct.shiftRightUnsigned=function(t){if(Ur(t)&&(t=t.toInt()),t&=63,t===0)return this;var e=this.high;if(t<32){var o=this.low;return ke(o>>>t|e<<32-t,e>>>t,this.unsigned)}else return t===32?ke(e,0,this.unsigned):ke(e>>>t-32,0,this.unsigned)};ct.shru=ct.shiftRightUnsigned;ct.shr_u=ct.shiftRightUnsigned;ct.toSigned=function(){return this.unsigned?ke(this.low,this.high,!1):this};ct.toUnsigned=function(){return this.unsigned?this:ke(this.low,this.high,!0)};ct.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()};ct.toBytesLE=function(){var t=this.high,e=this.low;return[e&255,e>>>8&255,e>>>16&255,e>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};ct.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,e>>>24,e>>>16&255,e>>>8&255,e&255]};ve.fromBytes=function(t,e,o){return o?ve.fromBytesLE(t,e):ve.fromBytesBE(t,e)};ve.fromBytesLE=function(t,e){return new ve(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)};ve.fromBytesBE=function(t,e){return new ve(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}});var Iv=to(()=>{});var Sv=to(()=>{});var g1=to((d1,mC)=>{(function(r,t,e){function o(a){var l=this,u=i();l.next=function(){var c=2091639*l.s0+l.c*23283064365386963e-26;return l.s0=l.s1,l.s1=l.s2,l.s2=c-(l.c=c|0)},l.c=1,l.s0=u(" "),l.s1=u(" "),l.s2=u(" "),l.s0-=u(a),l.s0<0&&(l.s0+=1),l.s1-=u(a),l.s1<0&&(l.s1+=1),l.s2-=u(a),l.s2<0&&(l.s2+=1),u=null}function n(a,l){return l.c=a.c,l.s0=a.s0,l.s1=a.s1,l.s2=a.s2,l}function s(a,l){var u=new o(a),c=l&&l.state,p=u.next;return p.int32=function(){return u.next()*4294967296|0},p.double=function(){return p()+(p()*2097152|0)*11102230246251565e-32},p.quick=p,c&&(typeof c=="object"&&n(c,u),p.state=function(){return n(u,{})}),p}function i(){var a=4022871197,l=function(u){u=String(u);for(var c=0;c<u.length;c++){a+=u.charCodeAt(c);var p=.02519603282416938*a;a=p>>>0,p-=a,p*=a,a=p>>>0,p-=a,a+=p*4294967296}return(a>>>0)*23283064365386963e-26};return l}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.alea=s})(d1,typeof mC=="object"&&mC,typeof define=="function"&&define)});var y1=to((x1,fC)=>{(function(r,t,e){function o(i){var a=this,l="";a.x=0,a.y=0,a.z=0,a.w=0,a.next=function(){var c=a.x^a.x<<11;return a.x=a.y,a.y=a.z,a.z=a.w,a.w^=a.w>>>19^c^c>>>8},i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor128=s})(x1,typeof fC=="object"&&fC,typeof define=="function"&&define)});var w1=to((b1,hC)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.x^a.x>>>2;return a.x=a.y,a.y=a.z,a.z=a.w,a.w=a.v,(a.d=a.d+362437|0)+(a.v=a.v^a.v<<4^(c^c<<1))|0},a.x=0,a.y=0,a.z=0,a.w=0,a.v=0,i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,u==l.length&&(a.d=a.x<<10^a.x>>>4),a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a.v=i.v,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorwow=s})(b1,typeof hC=="object"&&hC,typeof define=="function"&&define)});var I1=to((C1,dC)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.x,c=a.i,p,m,f;return p=u[c],p^=p>>>7,m=p^p<<24,p=u[c+1&7],m^=p^p>>>10,p=u[c+3&7],m^=p^p>>>3,p=u[c+4&7],m^=p^p<<7,p=u[c+7&7],p=p^p<<13,m^=p^p<<9,u[c]=m,a.i=c+1&7,m};function l(u,c){var p,m,f=[];if(c===(c|0))m=f[0]=c;else for(c=""+c,p=0;p<c.length;++p)f[p&7]=f[p&7]<<15^c.charCodeAt(p)+f[p+1&7]<<13;for(;f.length<8;)f.push(0);for(p=0;p<8&&f[p]===0;++p);for(p==8?m=f[7]=-1:m=f[p],u.x=f,u.i=0,p=256;p>0;--p)u.next()}l(a,i)}function n(i,a){return a.x=i.x.slice(),a.i=i.i,a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.x&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorshift7=s})(C1,typeof dC=="object"&&dC,typeof define=="function"&&define)});var v1=to((S1,gC)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.w,c=a.X,p=a.i,m,f;return a.w=u=u+1640531527|0,f=c[p+34&127],m=c[p=p+1&127],f^=f<<13,m^=m<<17,f^=f>>>15,m^=m>>>12,f=c[p]=f^m,a.i=p,f+(u^u>>>16)|0};function l(u,c){var p,m,f,h,d,g=[],x=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,x=Math.max(x,c.length)),f=0,h=-32;h<x;++h)c&&(m^=c.charCodeAt((h+32)%c.length)),h===0&&(d=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,h>=0&&(d=d+1640531527|0,p=g[h&127]^=m+d,f=p==0?f+1:0);for(f>=128&&(g[(c&&c.length||0)&127]=-1),f=127,h=4*128;h>0;--h)m=g[f+34&127],p=g[f=f+1&127],m^=m<<13,p^=p<<17,m^=m>>>15,p^=p>>>12,g[f]=m^p;u.w=d,u.X=g,u.i=f}l(a,i)}function n(i,a){return a.i=i.i,a.w=i.w,a.X=i.X.slice(),a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.X&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor4096=s})(S1,typeof gC=="object"&&gC,typeof define=="function"&&define)});var T1=to((k1,xC)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.b,p=a.c,m=a.d,f=a.a;return c=c<<25^c>>>7^p,p=p-m|0,m=m<<24^m>>>8^f,f=f-c|0,a.b=c=c<<20^c>>>12^p,a.c=p=p-m|0,a.d=m<<16^p>>>16^f,a.a=f-c|0},a.a=0,a.b=0,a.c=-1640531527,a.d=1367130551,i===Math.floor(i)?(a.a=i/4294967296|0,a.b=i|0):l+=i;for(var u=0;u<l.length+20;u++)a.b^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.a=i.a,a.b=i.b,a.c=i.c,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.tychei=s})(k1,typeof xC=="object"&&xC,typeof define=="function"&&define)});var N1=to(()=>{});var $1=to((E1,xd)=>{(function(r,t,e){var o=256,n=6,s=52,i="random",a=e.pow(o,n),l=e.pow(2,s),u=l*2,c=o-1,p;function m(w,C,S){var k=[];C=C==!0?{entropy:!0}:C||{};var E=g(d(C.entropy?[w,b(t)]:w??x(),3),k),A=new f(k),D=function(){for(var O=A.g(n),M=a,B=0;O<l;)O=(O+B)*o,M*=o,B=A.g(1);for(;O>=u;)O/=2,M/=2,B>>>=1;return(O+B)/M};return D.int32=function(){return A.g(4)|0},D.quick=function(){return A.g(4)/4294967296},D.double=D,g(b(A.S),t),(C.pass||S||function(O,M,B,V){return V&&(V.S&&h(V,A),O.state=function(){return h(A,{})}),B?(e[i]=O,M):O})(D,E,"global"in C?C.global:this==e,C.state)}function f(w){var C,S=w.length,k=this,E=0,A=k.i=k.j=0,D=k.S=[];for(S||(w=[S++]);E<o;)D[E]=E++;for(E=0;E<o;E++)D[E]=D[A=c&A+w[E%S]+(C=D[E])],D[A]=C;(k.g=function(O){for(var M,B=0,V=k.i,U=k.j,G=k.S;O--;)M=G[V=c&V+1],B=B*o+G[c&(G[V]=G[U=c&U+M])+(G[U]=M)];return k.i=V,k.j=U,B})(o)}function h(w,C){return C.i=w.i,C.j=w.j,C.S=w.S.slice(),C}function d(w,C){var S=[],k=typeof w,E;if(C&&k=="object")for(E in w)try{S.push(d(w[E],C-1))}catch{}return S.length?S:k=="string"?w:w+"\0"}function g(w,C){for(var S=w+"",k,E=0;E<S.length;)C[c&E]=c&(k^=C[c&E]*19)+S.charCodeAt(E++);return b(C)}function x(){try{var w;return p&&(w=p.randomBytes)?w=w(o):(w=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(w)),b(w)}catch{var C=r.navigator,S=C&&C.plugins;return[+new Date,r,S,r.screen,b(t)]}}function b(w){return String.fromCharCode.apply(0,w)}if(g(e.random(),t),typeof xd=="object"&&xd.exports){xd.exports=m;try{p=N1()}catch{}}else typeof define=="function"&&define.amd?define(function(){return m}):e["seed"+i]=m})(typeof self<"u"?self:E1,[],Math)});var gm=to((bht,A1)=>{var AG=g1(),DG=y1(),RG=w1(),FG=I1(),_G=v1(),OG=T1(),Al=$1();Al.alea=AG;Al.xor128=DG;Al.xorwow=RG;Al.xorshift7=FG;Al.xor4096=_G;Al.tychei=OG;A1.exports=Al});var t2=to(()=>{});var ri=class{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}},mn=class{refCount(t){return eo("refCount")}incRef(t){return eo("incRef")}timerAvailable(){return!0}time(t){return eo("time")}read(t){return eo("read")}readSync(t){return eo("readSync")}readToGPU(t,e){return eo("readToGPU")}numDataIds(){return eo("numDataIds")}disposeData(t,e){return eo("disposeData")}write(t,e,o){return eo("write")}move(t,e,o,n,s){return eo("move")}memory(){return eo("memory")}floatPrecision(){return eo("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return eo("dispose")}};function eo(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function CS(r){let t=r.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,Dh(r,t,e)}function Rz(r,t){if(r.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t.length}`);let e=r.length,o=0;for(;e>0;)o=Math.random()*e|0,e--,Dh(r,e,o),Dh(t,e,o)}function bu(r,t,e){return Math.max(r,Math.min(t,e))}function Fz(r){return r%2===0?r:r+1}function Dh(r,t,e){let o=r[t];r[t]=r[e],r[e]=o}function _z(r){let t=0;for(let e=0;e<r.length;e++)t+=r[e];return t}function Oz(r,t){let e=Math.random();return t*e+(1-e)*r}function Pz(r,t){let e=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(t[o]);e+=n*n}return e}function $(r,t){if(!r)throw new Error(typeof t=="string"?t:t())}function Rh(r,t,e=""){$(ia(r,t),()=>e+` Shapes ${r} and ${t} must match`)}function al(r){$(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function sa(r,t=[],e=!1){if(t==null&&(t=[]),Array.isArray(r)||Vr(r)&&!e)for(let o=0;o<r.length;++o)sa(r[o],t,e);else t.push(r);return t}function Kt(r){if(r.length===0)return 1;let t=r[0];for(let e=1;e<r.length;e++)t*=r[e];return t}function Lz(r){return r.length===0}function ia(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function oi(r){return r%1===0}function zz(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let t=Math.exp(2*r);return(t-1)/(t+1)}}function Mz(r){let t=Math.ceil(Math.sqrt(r));return[t,Math.ceil(r/t)]}function Bz(r){let t=new Uint32Array(r);for(let e=0;e<r;++e)t[e]=e;return CS(t),t}function ll(r,t){return t<=r.length?r:r+" ".repeat(t-r.length)}function Vz(r,t=o=>0,e){return new Promise((o,n)=>{let s=0,i=()=>{if(r()){o();return}s++;let a=t(s);if(e!=null&&s>=e){n();return}setTimeout(i,a)};i()})}function Gz(r,t){let e=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)e*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${r}`);return r}if(e===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(t%e!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);let n=r.slice();return n[o]=t/e,n}function Ge(r,t){let e=t.length;return r=r==null?t.map((o,n)=>n):[].concat(r),$(r.every(o=>o>=-e&&o<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`),$(r.every(o=>oi(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?e+o:o)}function Hb(r,t){let e=[],o=[],n=t!=null&&Array.isArray(t)&&t.length===0,s=t==null||n?null:Ge(t,r).sort(),i=0;for(let a=0;a<r.length;++a){if(s!=null){if(s[i]===a&&r[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${r[a]}' is not 1`);(s[i]==null||s[i]>a)&&r[a]===1&&(e.push(r[a]),o.push(a)),s[i]<=a&&i++}r[a]!==1&&(e.push(r[a]),o.push(a))}return{newShape:e,keptDims:o}}function Uz(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else throw new Error(`Unknown data type ${r}`);return e}function Kb(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else if(r==="string")e=new Array(t);else throw new Error(`Unknown data type ${r}`);return e}function qb(r,t){for(let e=0;e<r.length;e++){let o=r[e];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${t} being uploaded contains ${o}.`)}}function jb(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function Wz(r,t){return!(t==="complex64"||t==="float32"&&r!=="complex64"||t==="int32"&&r!=="float32"&&r!=="complex64"||t==="bool"&&r==="bool")}function Vr(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}function Fh(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function Xb(r){if(r==null)return 0;let t=0;return r.forEach(e=>t+=e.length),t}function wu(r){return typeof r=="string"||r instanceof String}function IS(r){return typeof r=="boolean"}function SS(r){return typeof r=="number"}function Cu(r){return Array.isArray(r)?Cu(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":SS(r)?"float32":wu(r)?"string":IS(r)?"bool":"float32"}function Iu(r){return!!(r&&r.constructor&&r.call&&r.apply)}function Su(r,t){for(let e=t;e<r;++e)if(r%e===0)return e;return r}function rs(r){let t=r.length;if(t<2)return[];let e=new Array(t-1);e[t-2]=r[t-1];for(let o=t-3;o>=0;--o)e[o]=e[o+1]*r[o+1];return e}function vS(r,t,e,o=!1){let n=new Array;if(t.length===1){let s=t[0]*(o?2:1);for(let i=0;i<s;i++)n[i]=e[r+i]}else{let s=t[0],i=t.slice(1),a=i.reduce((l,u)=>l*u)*(o?2:1);for(let l=0;l<s;l++)n[l]=vS(r+l*a,i,e,o)}return n}function il(r,t,e=!1){if(r.length===0)return t[0];let o=r.reduce((n,s)=>n*s)*(e?2:1);if(o===0)return[];if(o!==t.length)throw new Error(`[${r}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return vS(0,r,t,e)}function Up(r,t){let e=vu(r,t);for(let o=0;o<e.length;o++)e[o]=1;return e}function vu(r,t){if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${t}`)}function Hz(r,t){let e=r.reduce((o,n)=>o*n,1);if(t==null||t==="float32")return il(r,new Float32Array(e));if(t==="int32")return il(r,new Int32Array(e));if(t==="bool")return il(r,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Wp(r){r.forEach(t=>{$(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function Kz(r,t,e){if(t===0)return 0;if(t===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=e[n]*r[n];return o}function qz(r,t,e){if(t===0)return[];if(t===1)return[r];let o=new Array(t);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/e[n]),r-=o[n]*e[n];return o[o.length-1]=r,o}function Hp(r){return r&&r.then&&typeof r.then=="function"}var kS="tfjsflags",Kp=class{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Xz,this.populateURLFlags()}setPlatform(t,e){this.platform!=null&&(P().getBool("IS_TEST")||P().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,o){if(this.flagRegistry[t]={evaluationFn:e,setHook:o},this.urlFlags[t]!=null){let n=this.urlFlags[t];P().getBool("IS_TEST")||P().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${n}.`),this.set(t,n)}}async getAsync(t){return t in this.flags?this.flags[t]:(this.flags[t]=await this.evaluateFlag(t),this.flags[t])}get(t){if(t in this.flags)return this.flags[t];let e=this.evaluateFlag(t);if(Hp(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(this.flagRegistry[t]==null)throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,this.flagRegistry[t].setHook!=null&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(this.flagRegistry[t]==null)throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;let t=this.getQueryParams(this.global.location.search);kS in t&&t[kS].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=Zz(n,s)})}};function Xz(r){let t={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...o)=>(Yz(t,o[0],o[1]),o.join("="))),t}function Yz(r,t,e){r[decodeURIComponent(t)]=decodeURIComponent(e||"")}function Zz(r,t){if(t=t.toLowerCase(),t==="true"||t==="false")return t==="true";if(`${+t}`===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${r}.`)}function P(){return Yb}var Yb=null;function TS(r){Yb=r}var Zb;function Qb(){if(Zb==null){let r;if(typeof window<"u")r=window;else if(typeof global<"u")r=global;else if(typeof process<"u")r=process;else if(typeof self<"u")r=self;else throw new Error("Could not find a global object");Zb=r}return Zb}function Qz(){let r=Qb();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function qp(r,t){let e=Qz();if(e.has(r))return e.get(r);{let o=t();return e.set(r,o),e.get(r)}}var fn="Abs",ni="Acos",si="Acosh",Rr="Add",aa="AddN",ku="All",Tu="Any",os="ArgMax",ns="ArgMin",ii="Asin",ai="Asinh",li="Atan",ui="Atanh",hn="Atan2",ss="AvgPool",Nu="AvgPoolGrad",la="AvgPool3D",Eu="AvgPool3DGrad",is="BatchMatMul",as="BatchToSpaceND",$u="Bincount",NS="BroadcastTo",_h="BroadcastArgs",ro="Cast",oo="Ceil",dn="ClipByValue",ci="Complex",ua="ComplexAbs",ls="Concat",us="Conv2D",Au="Conv2DBackpropFilter",cs="Conv2DBackpropInput",ca="Conv3D",Du="Conv3DBackpropFilterV2",Ru="Conv3DBackpropInputV2",gn="Cos",xn="Cosh",pa="Cumprod",ps="Cumsum",ma="CropAndResize",Oh="DenseBincount",fa="DepthToSpace",ms="DepthwiseConv2dNative",Fu="DepthwiseConv2dNativeBackpropFilter",_u="DepthwiseConv2dNativeBackpropInput",Ph="Diag",ha="Dilation2D",jp="Dilation2DBackpropInput",Xp="Dilation2DBackpropFilter",yn="RealDiv",Ou="Einsum",bn="Elu",Pu="EluGrad",pi="Erf",wn="Equal",no="Exp",fs="ExpandDims",so="Expm1",Lu="FFT",da="Fill",ga="FlipLeftRight",io="Floor",Cn="FloorDiv",hs="FusedBatchNorm",ds="GatherV2",zu="GatherNd",In="Greater",ao="GreaterEqual",lo="Identity",Mu="IFFT",xa="Imag",mi="IsFinite",fi="IsInf",Sn="IsNan",gs="LeakyRelu",vn="Less",kn="LessEqual",Lh="LinSpace",uo="Log",hi="Log1p",di="LogicalAnd",gi="LogicalNot",ul="LogicalOr";var ES="LogSoftmax";var ya="LRN",Bu="LRNGrad",xs="Max",co="Maximum",ys="MaxPool",Vu="MaxPoolGrad",ba="MaxPool3D",Gu="MaxPool3DGrad",zh="MaxPoolWithArgmax",bs="Mean",ws="Min",po="Minimum",Cs="MirrorPad",xi="Mod",Mh="Multinomial",mo="Multiply",Tn="Neg",Nn="NotEqual",wa="NonMaxSuppressionV3",Uu="NonMaxSuppressionV4",Ca="NonMaxSuppressionV5",Is="OnesLike",Ia="OneHot",Ss="Pack",vs="PadV2";var En="Pow",ks="Prelu",$n="Prod",Bh="RaggedTensorToTensor",Sa="Range",yi="Real",An="Reciprocal",Dn="Relu",Ts="Reshape",Ns="ResizeNearestNeighbor",Wu="ResizeNearestNeighborGrad",Es="ResizeBilinear",Hu="ResizeBilinearGrad",Rn="Relu6",va="Reverse",bi="Round",fo="Rsqrt",Ku="ScatterNd",Vh="SearchSorted",$s="Select",wi="Selu",Fn="Slice",_n="Sin",On="Sinh",Ci="Sign",ho="Sigmoid",Ii="Softplus",go="Sqrt",As="Sum",Ds="SpaceToBatchND",Rs="SplitV",Fs="Softmax",Gh="SparseFillEmptyRows",Uh="SparseReshape",Wh="SparseSegmentMean",Hh="SparseSegmentSum",qu="SparseToDense",xo="SquaredDifference",ka="Square",Ta="StridedSlice",ju="StringNGrams",Kh="StringSplit",qh="StringToHashBucketFast",yo="Sub",Si="Tan",Pn="Tanh",Ro="Tile",Na="TopK",Ea="Transform",Fo="Transpose",Xu="Unique",_s="Unpack",$a="UnsortedSegmentSum";var Os="ZerosLike",vi="Step",cl="FromPixels",Aa="RotateWithOffset",ki="_FusedMatMul",Ti="FusedConv2D",Ni="FusedDepthwiseConv2D";function Ps(...r){P().getBool("IS_TEST")||P().getBool("PROD")||console.warn(...r)}function Jz(...r){P().getBool("IS_TEST")||P().getBool("PROD")||console.log(...r)}var jh=qp("kernelRegistry",()=>new Map),Jb=qp("gradRegistry",()=>new Map);function Yp(r,t){let e=DS(r,t);return jh.get(e)}function tw(r){return Jb.get(r)}function ew(r){let t=jh.entries(),e=[];for(;;){let{done:o,value:n}=t.next();if(o)break;let[s,i]=n,[a]=s.split("_");a===r&&e.push(i)}return e}function Yu(r){let{kernelName:t,backendName:e}=r,o=DS(t,e);jh.has(o)&&Ps(`The kernel '${t}' for backend '${e}' is already registered`),jh.set(o,r)}function AS(r){let{kernelName:t}=r;Jb.has(t)&&P().getBool("DEBUG")&&Ps(`Overriding the gradient for '${t}'`),Jb.set(t,r)}function DS(r,t){return`${t}_${r}`}var y={};Br(y,{arraysEqual:()=>ia,assert:()=>$,assertNonNegativeIntegerDimensions:()=>Wp,assertNonNull:()=>al,assertShapesMatch:()=>Rh,bytesFromStringArray:()=>Xb,bytesPerElement:()=>Fh,checkConversionForErrors:()=>qb,clamp:()=>bu,computeStrides:()=>rs,createScalarValue:()=>iM,createShuffledIndices:()=>Bz,decodeString:()=>ec,distSquared:()=>Pz,encodeString:()=>tc,fetch:()=>lM,fingerPrint64:()=>sM,flatten:()=>sa,getArrayFromDType:()=>Kb,getTypedArrayFromDType:()=>Uz,hasEncodingLoss:()=>Wz,hexToLong:()=>Zp,indexToLoc:()=>qz,inferDtype:()=>Cu,inferFromImplicitShape:()=>Gz,isBoolean:()=>IS,isFunction:()=>Iu,isInt:()=>oi,isNumber:()=>SS,isPromise:()=>Hp,isScalarShape:()=>Lz,isString:()=>wu,isTypedArray:()=>Vr,isValidDtype:()=>jb,locToIndex:()=>Kz,makeOnesTypedArray:()=>Up,makeZerosNestedTypedArray:()=>Hz,makeZerosTypedArray:()=>vu,nearestDivisor:()=>Su,nearestLargerEven:()=>Fz,now:()=>dl,parseAxisParam:()=>Ge,randUniform:()=>Oz,repeatedTry:()=>Vz,rightPad:()=>ll,shuffle:()=>CS,shuffleCombo:()=>Rz,sizeFromShape:()=>Kt,sizeToSquarishShape:()=>Mz,squeezeShape:()=>Hb,sum:()=>_z,swap:()=>Dh,tanh:()=>zz,toNestedArray:()=>il,toTypedArray:()=>Ju});var sw=Gp(GS());var hl=sw.default||sw;function Zp(r){return hl.fromString(r,!0,16)}var WS=Zp("c3a5c85c97cb3127"),fl=Zp("b492b66fbe98f273"),br=Zp("9ae16a3b2f90404f");function nw(r){return r.xor(r.shru(47))}function HS(r,t,e){let o=r.slice(t,t+e);return hl.fromBytes(Array.from(o),!0,!0)}function ye(r,t){return HS(r,t,8)}function US(r,t){return HS(r,t,4)}function Ye(r,t){return t===0?r:r.shru(t).or(r.shl(64-t))}function Da(r,t,e=Zp("9ddfea08eb382d69")){let o=r.xor(t).mul(e);o=o.xor(o.shru(47));let n=t.xor(o).mul(e);return n=n.xor(n.shru(47)),n=n.mul(e),n}function eM(r,t,e,o,n,s){n=n.add(r),s=Ye(s.add(n).add(o),21);let i=n;return n=n.add(t),n=n.add(e),s=s.add(Ye(n,44)),[n.add(o),s.add(i)]}function Yh(r,t,e,o){return eM(ye(r,t),ye(r,t+8),ye(r,t+16),ye(r,t+24),e,o)}function rM(r,t=r.length){if(t>=8){let e=br.add(t*2),o=ye(r,0).add(br),n=ye(r,t-8),s=Ye(n,37).mul(e).add(o),i=Ye(o,25).add(n).mul(e);return Da(s,i,e)}if(t>=4){let e=br.add(t*2),o=US(r,0);return Da(o.shl(3).add(t),US(r,t-4),e)}if(t>0){let e=r[0],o=r[t>>1],n=r[t-1],s=e+(o<<8),i=t+(n<<2);return nw(br.mul(s).xor(WS.mul(i))).mul(br)}return br}function oM(r,t=r.length){let e=br.add(t*2),o=ye(r,0).mul(fl),n=ye(r,8),s=ye(r,t-8).mul(e),i=ye(r,t-16).mul(br);return Da(Ye(o.add(n),43).add(Ye(s,30)).add(i),o.add(Ye(n.add(br),18)).add(s),e)}function nM(r,t=r.length){let e=br.add(t*2),o=ye(r,0).mul(br),n=ye(r,8),s=ye(r,t-8).mul(e),i=ye(r,t-16).mul(br),a=Ye(o.add(n),43).add(Ye(s,30)).add(i),l=Da(a,o.add(Ye(n.add(br),18)).add(s),e),u=ye(r,16).mul(e),c=ye(r,24),p=a.add(ye(r,t-32)).mul(e),m=l.add(ye(r,t-24)).mul(e);return Da(Ye(u.add(c),43).add(Ye(p,30)).add(m),u.add(Ye(c.add(o),18)).add(p),e)}function sM(r,t=r.length){let e=hl.fromNumber(81,!0);if(t<=32)return t<=16?rM(r,t):oM(r,t);if(t<=64)return nM(r,t);let o=e,n=e.mul(fl).add(113),s=nw(n.mul(br).add(113)).mul(br),i=[hl.UZERO,hl.UZERO],a=[hl.UZERO,hl.UZERO];o=o.mul(br).add(ye(r,0));let l=0,u=(t-1>>6)*64,c=u+(t-1&63)-63;do o=Ye(o.add(n).add(i[0]).add(ye(r,l+8)),37).mul(fl),n=Ye(n.add(i[1]).add(ye(r,l+48)),42).mul(fl),o=o.xor(a[1]),n=n.add(i[0]).add(ye(r,l+40)),s=Ye(s.add(a[0]),33).mul(fl),i=Yh(r,l,i[1].mul(fl),o.add(a[0])),a=Yh(r,l+32,s.add(a[1]),n.add(ye(r,l+16))),[s,o]=[o,s],l+=64;while(l!==u);let p=fl.add(s.and(255).shl(1));return l=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),o=Ye(o.add(n).add(i[0]).add(ye(r,l+8)),37).mul(p),n=Ye(n.add(i[1]).add(ye(r,l+48)),42).mul(p),o=o.xor(a[1].mul(9)),n=n.add(i[0].mul(9).add(ye(r,l+40))),s=Ye(s.add(a[0]),33).mul(p),i=Yh(r,l,i[1].mul(p),o.add(a[0])),a=Yh(r,l+32,s.add(a[1]),n.add(ye(r,l+16))),[s,o]=[o,s],Da(Da(i[0],a[0],p).add(nw(n).mul(WS)).add(s),Da(i[1],a[1],p).add(o),p)}function iM(r,t){return t==="string"?tc(r):Ju([r],t)}function aM(r,t){return r instanceof Float32Array&&t==="float32"||r instanceof Int32Array&&t==="int32"||r instanceof Uint8Array&&t==="bool"}function Ju(r,t){if(t==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=sa(r)),P().getBool("DEBUG")&&qb(r,t),aM(r,t))return r;if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"){let e=new Uint8Array(r.length);for(let o=0;o<e.length;++o)Math.round(r[o])!==0&&(e[o]=1);return e}else throw new Error(`Unknown data type ${t}`)}function dl(){return P().platform.now()}function lM(r,t){return P().platform.fetch(r,t)}function tc(r,t="utf-8"){return t=t||"utf-8",P().platform.encode(r,t)}function ec(r,t="utf-8"){return t=t||"utf-8",P().platform.decode(r,t)}var Zh=class{constructor(t,e){this.backendTimer=t,this.logger=e,e==null&&(this.logger=new iw)}profileKernel(t,e,o){let n,s=()=>{n=o()},i,a=dl();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();i=Promise.resolve({kernelMs:dl()-a})}if(P().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(p=>{uM(p,c.dtype,t)})}return{kernelName:t,outputs:n,inputs:e,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(t){let{kernelName:e,outputs:o,timeMs:n,inputs:s,extraInfo:i}=t;o.forEach(a=>{Promise.all([a.data(),n,i]).then(l=>{this.logger.logKernelProfile(e,a,l[0],l[1],s,l[2])})})}};function uM(r,t,e){if(t!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${e}'`),!0}return!1}var iw=class{logKernelProfile(t,e,o,n,s,i){let a=typeof n=="number"?ll(`${n}ms`,9):n.error,l=ll(t,25),u=e.rank,c=e.size,p=ll(e.shape.toString(),14),m="";for(let f in s){let h=s[f];if(h!=null){let d=h.shape||e.shape,g=d.length;m+=`${f}: ${g}D ${g>0?d:""} `}}console.log(`%c${l}	%c${a}	%c${u}D ${p}	%c${c}	%c${m}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function KS(r,t,e){let o={},n={};for(let l=0;l<t.length;l++)o[t[l].id]=!0;for(let l=0;l<r.length;l++){let u=r[l],c=u.inputs;for(let p in c){let m=c[p],f=!1;for(let h=0;h<t.length;h++)if(o[m.id]){u.outputs.forEach(d=>o[d.id]=!0),f=!0,n[u.id]=!0;break}if(f)break}}let s={};s[e.id]=!0;let i={};for(let l=r.length-1;l>=0;l--){let u=r[l],c=u.inputs;for(let p=0;p<u.outputs.length;p++)if(s[u.outputs[p].id]){for(let m in c)s[c[m].id]=!0,i[u.id]=!0;break}}let a=[];for(let l=0;l<r.length;l++){let u=r[l];if(n[u.id]&&i[u.id]){let c={};for(let m in u.inputs){let f=u.inputs[m];o[f.id]&&(c[m]=f)}let p=Object.assign({},u);p.inputs=c,p.outputs=u.outputs,a.push(p)}}return a}function qS(r,t,e,o){for(let n=t.length-1;n>=0;n--){let s=t[n],i=[];if(s.outputs.forEach(l=>{let u=r[l.id];u!=null?i.push(u):i.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let a=s.gradient(i);for(let l in s.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);let u=e(()=>a[l]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[l];if(!ia(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let p=r[c.id];r[c.id]=o(p,u),p.dispose()}}}}var jS=20,Qp=3,aw=7;function XS(r,t,e,o){let n=rs(t),s=cM(r,t,e,n),i=t.length,a=Qh(r,t,e,n,s),l=["Tensor"];return o&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join(`
`)),l.join(`
`)}function cM(r,t,e,o){let n=Kt(t),s=o[o.length-1],i=new Array(s).fill(0),a=t.length,l=e==="complex64"?tm(r):r;if(a>1)for(let u=0;u<n/s;u++){let c=u*s;for(let p=0;p<s;p++)i[p]=Math.max(i[p],Jp(l[c+p],0,e).length)}return i}function Jp(r,t,e){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(aw))} + ${parseFloat(r[1].toFixed(aw))}j`:wu(r)?o=`'${r}'`:e==="bool"?o=YS(r):o=parseFloat(r.toFixed(aw)).toString(),ll(o,t)}function YS(r){return r===0?"false":"true"}function Qh(r,t,e,o,n,s=!0){let i=e==="complex64"?2:1,a=t[0],l=t.length;if(l===0){if(e==="complex64"){let d=tm(r);return[Jp(d[0],0,e)]}return e==="bool"?[YS(r[0])]:[r[0].toString()]}if(l===1){if(a>jS){let g=Qp*i,x=Array.from(r.slice(0,g)),b=Array.from(r.slice((a-Qp)*i,a*i));return e==="complex64"&&(x=tm(x),b=tm(b)),["["+x.map((w,C)=>Jp(w,n[C],e)).join(", ")+", ..., "+b.map((w,C)=>Jp(w,n[a-Qp+C],e)).join(", ")+"]"]}let d=e==="complex64"?tm(r):Array.from(r);return["["+d.map((g,x)=>Jp(g,n[x],e)).join(", ")+"]"]}let u=t.slice(1),c=o.slice(1),p=o[0]*i,m=[];if(a>jS){for(let d=0;d<Qp;d++){let g=d*p,x=g+p;m.push(...Qh(r.slice(g,x),u,e,c,n,!1))}m.push("...");for(let d=a-Qp;d<a;d++){let g=d*p,x=g+p;m.push(...Qh(r.slice(g,x),u,e,c,n,d===a-1))}}else for(let d=0;d<a;d++){let g=d*p,x=g+p;m.push(...Qh(r.slice(g,x),u,e,c,n,d===a-1))}let f=l===2?",":"";m[0]="["+m[0]+f;for(let d=1;d<m.length-1;d++)m[d]=" "+m[d]+f;let h=`,
`;for(let d=2;d<l;d++)h+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":h),m}function tm(r){let t=[];for(let e=0;e<r.length;e+=2)t.push([r[e],r[e+1]]);return t}var jt=class{constructor(t,e,o){if(this.dtype=e,this.shape=t.slice(),this.size=Kt(t),o!=null){let n=o.length;$(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(e==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||Kb(e,this.size),this.strides=rs(t)}set(t,...e){e.length===0&&(e=[0]),$(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);let o=this.locToIndex(e);this.values[o]=t}get(...t){t.length===0&&(t=[0]);let e=0;for(let n of t){if(n<0||n>=this.shape[e]){let s=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(s)}e++}let o=t[t.length-1];for(let n=0;n<t.length-1;++n)o+=this.strides[n]*t[n];return this.values[o]}locToIndex(t){if(this.rank===0)return 0;if(this.rank===1)return t[0];let e=t[t.length-1];for(let o=0;o<t.length-1;++o)e+=this.strides[o]*t[o];return e}indexToLoc(t){if(this.rank===0)return[];if(this.rank===1)return[t];let e=new Array(this.shape.length);for(let o=0;o<e.length-1;++o)e[o]=Math.floor(t/this.strides[o]),t-=e[o]*this.strides[o];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return zn().makeTensor(this.values,this.shape,this.dtype)}},zn=null,rc=null,pM=null;function ZS(r){zn=r}function QS(r){rc=r}function JS(r){pM=r}var Ot=class{constructor(t,e,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Kt(t),this.strides=rs(t),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let t=await this.data();return rc.buffer(this.shape,this.dtype,t)}bufferSync(){return rc.buffer(this.shape,this.dtype,this.dataSync())}async array(){let t=await this.data();return il(this.shape,t,this.dtype==="complex64")}arraySync(){return il(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let t=zn().read(this.dataId);if(this.dtype==="string"){let e=await t;try{return e.map(o=>ec(o))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),zn().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();let t=zn().readSync(this.dataId);if(this.dtype==="string")try{return t.map(e=>ec(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();let t=await zn().read(this.dataId);return this.dtype==="string"?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(zn().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return rc.print(this,t)}clone(){return this.throwIfDisposed(),rc.clone(this)}toString(t=!1){let e=this.dataSync();return XS(e,this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),rc.cast(this,t)}variable(t=!0,e,o){return this.throwIfDisposed(),zn().makeVariable(this,t,e,o)}};Object.defineProperty(Ot,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function R(){return qp("Tensor",()=>Ot)}R();var Ei=class extends Ot{constructor(t,e,o,n){super(t.shape,t.dtype,t.dataId,n),this.trainable=e,this.name=o}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!ia(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);zn().disposeTensor(this),this.dataId=t.dataId,zn().incRef(this,null)}dispose(){zn().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(Ei,Symbol.hasInstance,{value:r=>r instanceof Ot&&r.assign!=null&&r.assign instanceof Function});var Lo={};Br(Lo,{assertTypesMatch:()=>fM,getTensorsInContainer:()=>em,isTensorInList:()=>hM,makeTypesMatch:()=>_t});var lw;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(lw||(lw={}));var uw;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(uw||(uw={}));var cw;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(cw||(cw={}));var pw;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(pw||(pw={}));var mw;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(mw||(mw={}));var mM={float32:pw,int32:uw,bool:cw,complex64:mw};function Qt(r,t){if(r==="string"||t==="string"){if(r==="string"&&t==="string")return"string";throw new Error(`Can not upcast ${r} with ${t}`)}return mM[r][t]}function $i(r){return Qt(r,"int32")}function _t(r,t){if(r.dtype===t.dtype)return[r,t];let e=Qt(r.dtype,t.dtype);return[r.cast(e),t.cast(e)]}function fM(r,t){$(r.dtype===t.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${t.dtype}) input must match`)}function hM(r,t){return t.some(e=>e.id===r.id)}function em(r){let t=[];return tv(r,t,new Set),t}function tv(r,t,e){if(r==null)return;if(r instanceof Ot){t.push(r);return}if(!dM(r))return;let o=r;for(let n in o){let s=o[n];e.has(s)||(e.add(s),tv(s,t,e))}}function dM(r){return Array.isArray(r)||typeof r=="object"}function fw(r){return r.kernelName!=null}var Jh=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(let t in this.registeredVariables)this.registeredVariables[t].dispose()}},Ra=class{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Jh}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry))if(t in this.registryFactory){let{asyncInit:e}=this.initializeBackend(t);if(e)return null}else return null;return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,o=1){return t in this.registryFactory?(Ps(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:o},!0)}async setBackend(t){if(this.registryFactory[t]==null)throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,this.registry[t]==null){this.backendInstance=null;let{success:e,asyncInit:o}=this.initializeBackend(t);if(!(o?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Zh(this.backendInstance),!0}setupRegisteredKernels(){ew(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){ew(t).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[t])})}initializeBackend(t){let e=this.registryFactory[t];if(e==null)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{let o=e.factory();if(o&&!(o instanceof mn)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(i=>n<this.pendingBackendInitId?!1:(this.registry[t]=i,this.pendingBackendInit=null,!0)).catch(i=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,Ps(`Initialization of backend ${t} failed`),Ps(i.stack||i.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[t]=o,{success:!0,asyncInit:!1}}catch(o){return Ps(`Initialization of backend ${t} failed`),Ps(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){let o=this.state.tensorInfo.get(e),n=o.backend,s=this.readSync(e),i=n.refCount(e);n.disposeData(e,!0),o.backend=t,t.move(e,s,o.shape,o.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let o=null;if(e==null){if(typeof t!="function")throw new Error("Please provide a function to tidy()");e=t}else{if(typeof t!="string"&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof e!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,o){t();try{let n=o();return e(),n}catch(n){throw e(),n}}nextTensorId(){return Ra.nextTensorId++}nextVariableId(){return Ra.nextVariableId++}clone(t){let e=T.runKernel(lo,{x:t}),o={x:t},n=i=>({x:()=>{let a="float32",l={x:i},u={dtype:a};return T.runKernel(ro,l,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[e],n,s,{}),e}runKernel(t,e,o){if(this.backendName==null&&this.backend,!(Yp(t,this.backendName)!=null))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,o){let n=this.backend.numDataIds(),s=0;o.forEach(l=>{s+=l.dtype==="complex64"?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=n-e-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t){let e,o=[],n=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l,u=fw(t)?t.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(fw(t)){let{kernelName:h,inputs:d,attrs:g}=t;this.backendName==null&&this.backend;let x=Yp(h,this.backendName);$(x!=null,()=>`Cannot find registered kernel '${h}' for backend '${this.backendName}'`),a=()=>{let b=this.backend.numDataIds();l=x.kernelFunc({inputs:d,attrs:g,backend:this.backend});let w=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,b,w);let C=w.map(S=>S.rank!=null?S:this.makeTensorFromTensorInfo(S));if(n){let S=this.getTensorsForGradient(h,d,C);o=this.saveTensorsForBackwardMode(S)}return C}}else{let{forwardFunc:h}=t,d=g=>{!n||(o=g.map(x=>this.keep(this.clone(x))))};a=()=>{let g=this.backend.numDataIds();l=this.tidy(()=>h(this.backend,d));let x=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,x),x}}let{inputs:c,attrs:p}=t,m=fw(t)?null:t.backwardsFunc,f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?e=a():(f=this.profiler.profileKernel(u,c,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),e=f.outputs)}),n&&this.addTapeNode(u,c,e,m,o,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(h=>c[h]!=null?c[h].shape:null),outputShapes:e.map(h=>h.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?e:e[0]}saveTensorsForBackwardMode(t){return t.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(t,e,o){let n=tw(t);if(n!=null){let s=n.inputsToSave||[],i=n.outputsToSave||[],a;n.saveAllInputs?($(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(u=>e[u])):a=s.map(u=>e[u]);let l=o.filter((u,c)=>i[c]);return a.concat(l)}return[]}makeTensor(t,e,o,n){if(t==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=t;o==="string"&&wu(t[0])&&(s=t.map(l=>tc(l)));let i=n.write(s,e,o),a=new Ot(e,o,i,this.nextTensorId());if(this.trackTensor(a,n),o==="string"){let l=this.state.tensorInfo.get(i),u=Xb(s);this.state.numBytes+=u-l.bytes,l.bytes=u}return a}makeTensorFromDataId(t,e,o,n){o=o||"float32";let s={dataId:t,shape:e,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(t,e){let{dataId:o,shape:n,dtype:s}=t,i=new Ot(n,s,o,this.nextTensorId());return this.trackTensor(i,e),i}makeVariable(t,e=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==t.dtype&&(t=t.cast(n));let s=new Ei(t,e,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,t.dtype==="string"&&this.state.numStringTensors++;let o=0;t.dtype!=="complex64"&&t.dtype!=="string"&&(o=t.size*Fh(t.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:o})),t instanceof Ei||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;let e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,t.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),t.dtype!=="complex64"&&t.dtype!=="string"){let o=t.size*Fh(t.dtype);this.state.numBytes-=o}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(let t in this.state.registeredVariables){let e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),this.state.registeredVariables[t.name]!=null&&delete this.state.registeredVariables[t.name]}memory(){let t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,t.reasons==null&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;let e=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(t,e,o,n,s,i){let a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:o,saved:s},l=tw(t);l!=null&&(n=l.gradFunc),n!=null&&(a.gradient=u=>(u=u.map((c,p)=>{if(c==null){let m=o[p],f=vu(m.size,m.dtype);return this.makeTensor(f,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){let e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){let e=em(t),o=new Set(e.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let i=this.state.activeScope.track[s];!i.kept&&!o.has(i.id)&&i.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(t,e,o,n=!1){if($(e.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));$(s instanceof Ot,()=>"The result y returned by f() must be a tensor.");let i=KS(this.state.activeTape,e,s);if(!n&&i.length===0&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let a={};a[s.id]=o??gM(s.shape),qS(a,i,u=>this.tidy(u),xM);let l=e.map(u=>a[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:l}})}customGrad(t){return $(Iu(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{$(e.every(a=>a instanceof Ot),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};e.forEach((a,l)=>{n[l]=a});let s=(a,l)=>(o=t(...e,l),$(o.value instanceof Ot,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),$(Iu(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),i=(a,l)=>{let u=o.gradFunc(a,l),c=Array.isArray(u)?u:[u];$(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),$(c.every(m=>m instanceof Ot),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let p={};return c.forEach((m,f)=>{p[f]=()=>m}),p};return this.runKernelFunc({forwardFunc:s,backwardsFunc:i,inputs:n})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){let e=dl(),o=await this.backend.time(t);return o.wallMs=dl()-e,o}track(t){return this.state.activeScope!=null&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Jh;for(let t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};Ra.nextTensorId=0;Ra.nextVariableId=0;function gM(r){let t=Up(Kt(r),"float32");return T.makeTensor(t,r,"float32")}function hw(){let r=Qb();if(r._tfengine==null){let t=new Kp(r);r._tfengine=new Ra(t)}return TS(r._tfengine.ENV),ZS(()=>r._tfengine),r._tfengine}var T=hw();function xM(r,t){let e={a:r,b:t};return T.runKernel(Rr,e)}var Fa={};Br(Fa,{isBrowser:()=>gw,isMobile:()=>wM,mockIsMobile:()=>bM});function yM(){return typeof navigator<"u"&&navigator!=null}var dw;function bM(r){dw=r}function wM(r){if(dw!==void 0)return dw;if(r||yM()){if(r||(r=navigator),r.product==="ReactNative")return!0;let t=r.userAgent||r.vendor||(typeof window<"u"?window.opera:"");if(!t){let e=r;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function gw(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}var bo=P();bo.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});bo.registerFlag("IS_BROWSER",()=>gw());bo.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u");bo.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));bo.registerFlag("PROD",()=>!1);bo.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>bo.getBool("DEBUG"));bo.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);bo.registerFlag("IS_TEST",()=>!1);bo.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);bo.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);bo.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);bo.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);function Ai(r,t){let e=r;if(Vr(r))return t==="string"?[]:[r.length];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(e)||Vr(e)&&t!=="string";)o.push(e.length),e=e[0];return Array.isArray(r)&&P().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&rv(r,o,[]),o}function rv(r,t,e){if(e=e||[],!Array.isArray(r)&&!Vr(r)){$(t.length===0,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);return}$(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`),$(r.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${r.length} elements`);let o=t.slice(1);for(let n=0;n<r.length;++n)rv(r[n],o,e.concat(n))}function ev(r,t,e,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==t||r==="numeric"&&t==="string")throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t} tensor`)}}function v(r,t,e,o="numeric"){if(r instanceof Ot)return ev(o,r.dtype,t,e),r;let n=Cu(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),ev(o,n,t,e),r==null||!Vr(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let l=r==null?"null":r.constructor.name;throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`)}let s=Ai(r,n);!Vr(r)&&!Array.isArray(r)&&(r=[r]);let a=n!=="string"?Ju(r,n):sa(r,[],!0);return T.makeTensor(a,s,n)}function td(r,t,e,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,i)=>v(s,`${t}[${i}]`,e,o))}var CM="__op";function N(r){let t=Object.keys(r);if(t.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0],o=r[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e=e+CM;let n=(...s)=>{T.startScope(e);try{let i=o(...s);return Hp(i)&&console.error("Cannot return a Promise inside of tidy."),T.endScope(i),i}catch(i){throw T.endScope(null),i}};return Object.defineProperty(n,"name",{value:e,configurable:!0}),n}function IM(r,t){let e=v(r,"real","complex"),o=v(t,"imag","complex");Rh(e.shape,o.shape,`real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:e,imag:o};return T.runKernel(ci,n)}var wo=N({complex_:IM});function Ls(r,t,e,o){if(o==null&&(o=Cu(r)),o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Vr(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(t!=null){Wp(t);let n=Kt(t),s=Kt(e);$(n===s,()=>`Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`);for(let i=0;i<e.length;++i){let a=e[i],l=i===e.length-1?a!==Kt(t.slice(i)):!0;$(e[i]===t[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Vr(r)&&!Array.isArray(r)&&(r=[r]),t=t||e,r=o!=="string"?Ju(r,o):sa(r,[],!0),T.makeTensor(r,t,o)}function zo(r,t,e){let o=Ai(r,e);return Ls(r,t,o,e)}var rm={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var ed=4;async function nv(r,t){let e=[],o=[],n=Array.isArray(r)?r.map(i=>i.name):Object.keys(r);for(let i=0;i<n.length;++i){let a=n[i],l=Array.isArray(r)?r[i].tensor:r[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);let u={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){let c=new Promise(async p=>{let m=await l.bytes(),f=m.reduce((g,x)=>g+x.length,0)+ed*m.length,h=new Uint8Array(f),d=0;for(let g=0;g<m.length;g++){let x=m[g],b=new Uint8Array(new Uint32Array([x.length]).buffer);h.set(b,d),d+=ed,h.set(x,d),d+=x.length}p(h)});o.push(c)}else o.push(l.data());t!=null&&(u.group=t),e.push(u)}let s=await Promise.all(o);return{data:SM(s),specs:e}}function rd(r,t){let e={},o,n=0;for(let s of t){let i=s.name,a=s.dtype,l=s.shape,u=Kt(l),c;if("quantization"in s){let p=s.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(a!=="float32")throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${a}.`)}else throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let m=rm[p.dtype],f=r.slice(n,n+u*m),h=p.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(a==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){c=new Float32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=g*p.scale+p.min}}else if(p.dtype==="float16")o===void 0&&(o=NM()),c=o(h);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(a==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);c=new Int32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=Math.round(g*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*m}else if(a==="string"){let p=Kt(s.shape);c=[];for(let m=0;m<p;m++){let f=new Uint32Array(r.slice(n,n+ed))[0];n+=ed;let h=new Uint8Array(r.slice(n,n+f));c.push(h),n+=f}}else{let p=rm[a],m=r.slice(n,n+u*p);if(a==="float32")c=new Float32Array(m);else if(a==="int32")c=new Int32Array(m);else if(a==="bool")c=new Uint8Array(m);else if(a==="complex64"){c=new Float32Array(m);let f=new Float32Array(c.length/2),h=new Float32Array(c.length/2);for(let x=0;x<f.length;x++)f[x]=c[x*2],h[x]=c[x*2+1];let d=zo(f,l,"float32"),g=zo(h,l,"float32");e[i]=wo(d,g),d.dispose(),g.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*p}a!=="complex64"&&(e[i]=zo(c,l,a))}return e}function SM(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let t=0,e=[];r.forEach(s=>{if(t+=s.byteLength,e.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(t),n=0;return e.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var xw=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function ov(r){return xw?Buffer.byteLength(r):new Blob([r]).size}function sv(r){if(xw)return Buffer.from(r).toString("base64");let t=new Uint8Array(r),e="";for(let o=0,n=t.length;o<n;o++)e+=String.fromCharCode(t[o]);return btoa(e)}function iv(r){if(xw){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let t=atob(r),e=new Uint8Array(t.length);for(let o=0;o<t.length;++o)e.set([t.charCodeAt(o)],o);return e.buffer}function oc(r){if(r.length===1)return r[0];let t=0;r.forEach(n=>{t+=n.byteLength});let e=new Uint8Array(t),o=0;return r.forEach(n=>{e.set(new Uint8Array(n),o),o+=n.byteLength}),e.buffer}function yw(r){let t="/";for(r=r.trim();r.endsWith(t);)r=r.slice(0,r.length-1);let e=r.split(t);return e[e.length-1]}function od(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:t};return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),e}async function nc(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),r.weightsManifest!=null){let[o,n]=await t(r.weightsManifest);e.weightSpecs=o,e.weightData=n}return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),e}function zs(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:ov(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:ov(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function vM(){let r=e=>{let o=e<<13,n=0;for(;(o&8388608)===0;)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=r(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}function kM(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let t=1;t<31;t++)r[t]=t<<23;for(let t=33;t<63;t++)r[t]=2147483648+(t-32<<23);return r}function TM(){let r=new Uint32Array(64);for(let t=0;t<64;t++)r[t]=1024;return r[0]=r[32]=0,r}function NM(){let r=vM(),t=kM(),e=TM();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let i=0;i<o.length;i++){let a=o[i],l=r[e[a>>10]+(a&1023)]+t[a>>10];s[i]=l}return new Float32Array(n)}}var se=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return se.instance==null&&(se.instance=new se),se.instance}static registerSaveRouter(t){se.getInstance().saveRouters.push(t)}static registerLoadRouter(t){se.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return se.getHandlers(t,"save")}static getLoadHandlers(t,e){return se.getHandlers(t,"load",e)}static getHandlers(t,e,o){let n=[];return(e==="load"?se.getInstance().loadRouters:se.getInstance().saveRouters).forEach(i=>{let a=i(t,o);a!==null&&n.push(a)}),n}},av=r=>se.registerSaveRouter(r),lv=r=>se.registerLoadRouter(r),uv=r=>se.getSaveHandlers(r),cv=(r,t)=>se.getLoadHandlers(r,t);var bw="tensorflowjs",ww=1,gl="models_store",_a="model_info_store";function pv(){if(!P().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window>"u"?self:window,t=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(t==null)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Cw(r){let t=r.result;t.createObjectStore(gl,{keyPath:"modelPath"}),t.createObjectStore(_a,{keyPath:"modelPath"})}var Ms=class{constructor(t){if(this.indexedDB=pv(),t==null||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((o,n)=>{let s=this.indexedDB.open(bw,ww);s.onupgradeneeded=()=>Cw(s),s.onsuccess=()=>{let i=s.result;if(e==null){let a=i.transaction(gl,"readonly"),u=a.objectStore(gl).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return i.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(i.close(),n(u.error)),a.oncomplete=()=>i.close()}else{let a=zs(e),l=i.transaction(_a,"readwrite"),u=l.objectStore(_a),c=u.put({modelPath:this.modelPath,modelArtifactsInfo:a}),p;c.onsuccess=()=>{p=i.transaction(gl,"readwrite");let f=p.objectStore(gl).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:a});f.onsuccess=()=>o({modelArtifactsInfo:a}),f.onerror=h=>{u=l.objectStore(_a);let d=u.delete(this.modelPath);d.onsuccess=()=>(i.close(),n(f.error)),d.onerror=g=>(i.close(),n(f.error))}},c.onerror=m=>(i.close(),n(c.error)),l.oncomplete=()=>{p==null?i.close():p.oncomplete=()=>i.close()}}},s.onerror=i=>n(s.error)})}};Ms.URL_SCHEME="indexeddb://";var mv=r=>P().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Ms.URL_SCHEME)?EM(r.slice(Ms.URL_SCHEME.length)):null;se.registerSaveRouter(mv);se.registerLoadRouter(mv);function EM(r){return new Ms(r)}function $M(r){return r.startsWith(Ms.URL_SCHEME)?r.slice(Ms.URL_SCHEME.length):r}var nd=class{constructor(){this.indexedDB=pv()}async listModels(){return new Promise((t,e)=>{let o=this.indexedDB.open(bw,ww);o.onupgradeneeded=()=>Cw(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(_a,"readonly"),a=s.objectStore(_a).getAll();a.onsuccess=()=>{let l={};for(let u of a.result)l[u.modelPath]=u.modelArtifactsInfo;t(l)},a.onerror=l=>(n.close(),e(a.error)),s.oncomplete=()=>n.close()},o.onerror=n=>e(o.error)})}async removeModel(t){return t=$M(t),new Promise((e,o)=>{let n=this.indexedDB.open(bw,ww);n.onupgradeneeded=()=>Cw(n),n.onsuccess=()=>{let s=n.result,i=s.transaction(_a,"readwrite"),a=i.objectStore(_a),l=a.get(t),u;l.onsuccess=()=>{if(l.result==null)return s.close(),o(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{let c=a.delete(t),p=()=>{u=s.transaction(gl,"readwrite");let f=u.objectStore(gl).delete(t);f.onsuccess=()=>e(l.result.modelArtifactsInfo),f.onerror=h=>o(l.error)};c.onsuccess=p,c.onerror=m=>(p(),s.close(),o(l.error))}},l.onerror=c=>(s.close(),o(l.error)),i.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var Di="/",sc="tensorflowjs_models",fv="info",AM="model_topology",DM="weight_specs",RM="weight_data",FM="model_metadata";function hv(r){return{info:[sc,r,fv].join(Di),topology:[sc,r,AM].join(Di),weightSpecs:[sc,r,DM].join(Di),weightData:[sc,r,RM].join(Di),modelMetadata:[sc,r,FM].join(Di)}}function dv(r){for(let t of Object.values(r))window.localStorage.removeItem(t)}function _M(r){let t=r.split(Di);if(t.length<3)throw new Error(`Invalid key format: ${r}`);return t.slice(1,t.length-1).join(Di)}function OM(r){return r.startsWith(Bs.URL_SCHEME)?r.slice(Bs.URL_SCHEME.length):r}var Bs=class{constructor(t){if(!P().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,t==null||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=hv(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let e=JSON.stringify(t.modelTopology),o=JSON.stringify(t.weightSpecs),n=zs(t);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,sv(t.weightData));let s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:t.signature!=null?t.signature:void 0,userDefinedMetadata:t.userDefinedMetadata!=null?t.userDefinedMetadata:void 0,modelInitializer:t.modelInitializer!=null?t.modelInitializer:void 0,trainingConfig:t.trainingConfig!=null?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:n}}catch{throw dv(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let t=JSON.parse(this.LS.getItem(this.keys.info));if(t==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(t.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let e={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let a=JSON.parse(s);e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy,a.signature!=null&&(e.signature=a.signature),a.userDefinedMetadata!=null&&(e.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(e.modelInitializer=a.modelInitializer),a.trainingConfig!=null&&(e.trainingConfig=a.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=iv(i),e}};Bs.URL_SCHEME="localstorage://";var gv=r=>P().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Bs.URL_SCHEME)?PM(r.slice(Bs.URL_SCHEME.length)):null;se.registerSaveRouter(gv);se.registerLoadRouter(gv);function PM(r){return new Bs(r)}var sd=class{constructor(){$(P().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),$(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let t={},e=sc+Di,o=Di+fv;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(e)&&s.endsWith(o)){let i=_M(s);t[i]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){t=OM(t);let e=hv(t);if(this.LS.getItem(e.info)==null)throw new Error(`Cannot find model at path '${t}'`);let o=JSON.parse(this.LS.getItem(e.info));return dv(e),o}};var ic="://",Ze=class{constructor(){this.managers={}}static getInstance(){return Ze.instance==null&&(Ze.instance=new Ze),Ze.instance}static registerManager(t,e){$(t!=null,()=>"scheme must not be undefined or null."),t.endsWith(ic)&&(t=t.slice(0,t.indexOf(ic))),$(t.length>0,()=>"scheme must not be an empty string.");let o=Ze.getInstance();$(o.managers[t]==null,()=>`A model store manager is already registered for scheme '${t}'.`),o.managers[t]=e}static getManager(t){let e=Ze.getInstance().managers[t];if(e==null)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(Ze.getInstance().managers)}};function id(r){if(r.indexOf(ic)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Ze.getSchemes().join(",")}`);return{scheme:r.split(ic)[0],path:r.split(ic)[1]}}async function xv(r,t,e=!1){$(r!==t,()=>`Old path and new path are the same: '${r}'`);let o=se.getLoadHandlers(r);$(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),$(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=se.getSaveHandlers(t);$(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),$(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${t}.`);let i=s[0],a=id(r).scheme,l=id(r).path,u=a===id(r).scheme,c=await n.load();e&&u&&await Ze.getManager(a).removeModel(l);let p=await i.save(c);return e&&!u&&await Ze.getManager(a).removeModel(l),p.modelArtifactsInfo}async function yv(){let r=Ze.getSchemes(),t={};for(let e of r){let o=await Ze.getManager(e).listModels();for(let n in o){let s=e+ic+n;t[s]=o[n]}}return t}async function bv(r){let t=id(r);return Ze.getManager(t.scheme).removeModel(t.path)}async function wv(r,t){return xv(r,t,!1)}async function Cv(r,t){return xv(r,t,!0)}var Iw=class{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}};if(P().get("IS_BROWSER")){P().setPlatform("browser",new Iw);try{Ze.registerManager(Bs.URL_SCHEME,new sd)}catch{}try{Ze.registerManager(Ms.URL_SCHEME,new nd)}catch{}}var LM={importFetch:()=>Iv()},Sw;var vw=class{constructor(){this.util=Sv(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return P().global.fetch!=null?P().global.fetch(t,e):(Sw==null&&(Sw=LM.importFetch()),Sw(t,e))}now(){let t=process.hrtime();return t[0]*1e3+t[1]/1e6}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return t.length===0?"":new this.util.TextDecoder(e).decode(t)}};P().get("IS_NODE")&&!P().get("IS_BROWSER")&&P().setPlatform("node",new vw);function et(r,t="float32",e){return t=t||"float32",Wp(r),new jt(r,t,e)}function zM(r,t){let e=v(r,"x","cast");if(!jb(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if(t==="string"&&e.dtype!=="string"||t!=="string"&&e.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:e},n={dtype:t};return T.runKernel(ro,o,n)}var Y=N({cast_:zM});function MM(r){let e={x:v(r,"x","clone","string_or_numeric")};return T.runKernel(lo,e)}var Wr=N({clone_:MM});function vv(r,t=!1){console.log(r.toString(t))}hw();var BM={buffer:et,cast:Y,clone:Wr,print:vv};QS(BM);var Fi={};Br(Fi,{browserFiles:()=>Tv,browserHTTPRequest:()=>$v,concatenateArrayBuffers:()=>oc,copyModel:()=>wv,decodeWeights:()=>rd,encodeWeights:()=>nv,fromMemory:()=>Av,fromMemorySync:()=>Aw,getLoadHandlers:()=>cv,getModelArtifactsForJSON:()=>nc,getModelArtifactsInfoForJSON:()=>zs,getSaveHandlers:()=>uv,http:()=>ld,isHTTPScheme:()=>ad,listModels:()=>yv,loadWeights:()=>Nv,moveModel:()=>Cv,registerLoadRouter:()=>lv,registerSaveRouter:()=>av,removeModel:()=>bv,weightsLoaderFactory:()=>Ew,withSaveHandler:()=>Dv,withSaveHandlerSync:()=>Rv});var VM="model",GM=".json",UM=".weights.bin";function kv(r){return new Promise(t=>setTimeout(t)).then(r)}var Ri=class{constructor(t){if(!P().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ri.URL_SCHEME)&&(t=t.slice(Ri.URL_SCHEME.length)),(t==null||t.length===0)&&(t=VM),this.modelJsonFileName=t+GM,this.weightDataFileName=t+UM}async save(t){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let o=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],n=od(t,o),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=s,await kv(()=>i.dispatchEvent(new MouseEvent("click"))),t.weightData!=null){let a=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;a.download=this.weightDataFileName,a.href=e,await kv(()=>a.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:zs(t)}}}};Ri.URL_SCHEME="downloads://";var kw=class{constructor(t){if(t==null||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),i=s.modelTopology;if(i==null){e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){t({modelTopology:i});return}let l=nc(s,u=>this.loadWeights(u));t(l)},o.onerror=n=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(t){let e=[],o=[];for(let i of t)e.push(...i.weights),o.push(...i.paths);let n=this.checkManifestAndWeightFiles(t),s=o.map(i=>this.loadWeightsFile(i,n[i]));return Promise.all(s).then(i=>[e,oc(i)])}loadWeightsFile(t,e){return new Promise((o,n)=>{let s=new FileReader;s.onload=i=>{let a=i.target.result;o(a)},s.onerror=i=>n(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){let e=[],o=this.weightsFiles.map(s=>yw(s.name)),n={};for(let s of t)s.paths.forEach(i=>{let a=yw(i);if(e.indexOf(a)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),o.indexOf(a)===-1)throw new Error(`Weight file with basename '${a}' is not provided.`);n[i]=this.weightsFiles[o.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},WM=r=>P().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Ri.URL_SCHEME)?HM(r.slice(Ri.URL_SCHEME.length)):null;se.registerSaveRouter(WM);function HM(r="model"){return new Ri(r)}function Tv(r){return new kw(r)}function Tw(r,t,e,o){i(r),e=e??0,o=o??1,a(e,o);let n=0,s=l=>(l.then(u=>{let c=e+ ++n/r.length*(o-e);return t(c),u}),l);function i(l){$(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")}function a(l,u){$(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),$(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),$(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}return Promise.all(r.map(s))}async function Nw(r,t){t==null&&(t={});let e=t.fetchFunc==null?P().platform.fetch:t.fetchFunc,o=r.map(p=>e(p,t.requestInit,{isBinary:!0})),n=0,s=.5,a=(t.onProgress==null?await Promise.all(o):await Tw(o,t.onProgress,n,s)).map(p=>p.arrayBuffer()),l=.5,u=1;return t.onProgress==null?await Promise.all(a):await Tw(a,t.onProgress,l,u)}async function Nv(r,t="",e,o){return Ew(i=>Nw(i,{requestInit:o}))(r,t,e)}function Ew(r){return async(t,e="",o)=>{let n=t.map(()=>!1),s={},i=o!=null?o.map(()=>!1):[],a=[];if(t.forEach((f,h)=>{let d=0;f.weights.forEach(g=>{let x="quantization"in g?g.quantization.dtype:g.dtype,b=rm[x]*Kt(g.shape),w=()=>{n[h]=!0,s[h]==null&&(s[h]=[]),s[h].push({manifestEntry:g,groupOffset:d,sizeBytes:b})};o!=null?o.forEach((C,S)=>{C===g.name&&(w(),i[S]=!0)}):w(),a.push(g.name),d+=b})}),!i.every(f=>f)){let f=o.filter((h,d)=>!i[d]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`)}let l=n.reduce((f,h,d)=>(h&&f.push(d),f),[]),u=[];l.forEach(f=>{t[f].paths.forEach(h=>{let d=e+(e.endsWith("/")?"":"/")+h;u.push(d)})});let c=await r(u),p={},m=0;return l.forEach(f=>{let h=t[f].paths.length,d=0;for(let C=0;C<h;C++)d+=c[m+C].byteLength;let g=new ArrayBuffer(d),x=new Uint8Array(g),b=0;for(let C=0;C<h;C++){let S=new Uint8Array(c[m+C]);x.set(S,b),b+=S.byteLength}s[f].forEach(C=>{let S=g.slice(C.groupOffset,C.groupOffset+C.sizeBytes),k=rd(S,[C.manifestEntry]);for(let E in k)p[E]=k[E]}),m+=h}),p}}var KM="application/octet-stream",qM="application/json",om=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?($(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=P().platform.fetch,$(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&$(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],n=od(t,o);e.body.append("model.json",new Blob([JSON.stringify(n)],{type:qM}),"model.json"),t.weightData!=null&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:KM}),"model.weights.bin");let s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:zs(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=e.modelTopology,n=e.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return nc(e,s=>this.loadWeights(s))}async loadWeights(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=jM(e),s=this.weightPathPrefix||o,i=[];for(let c of t)i.push(...c.weights);let a=[],l=[];for(let c of t)for(let p of c.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(p)):a.push(s+p+n);this.weightUrlConverter&&a.push(...await Promise.all(l));let u=await Nw(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,oc(u)]}};om.URL_SCHEME_REGEX=/^https?:\/\//;function jM(r){let t=r.lastIndexOf("/"),e=r.lastIndexOf("?"),o=r.substring(0,t),n=e>t?r.substring(e):"";return[o+"/",n]}function ad(r){return r.match(om.URL_SCHEME_REGEX)!=null}var Ev=(r,t)=>{if(typeof fetch>"u"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(r)?e=r.every(o=>ad(o)):e=ad(r),e)return ld(r,t)}return null};se.registerSaveRouter(Ev);se.registerLoadRouter(Ev);function ld(r,t){return new om(r,t)}function $v(r,t){return ld(r,t)}var nm=class{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}},ud=class{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}},$w=class{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}};function Av(r,t,e,o){let n=arguments;return new $w(Aw(...n))}function Aw(r,t,e,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new nm(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new nm({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new nm({modelTopology:r,weightSpecs:t,weightData:e,trainingConfig:o}))}function Dv(r){return new ud(r)}function Rv(r){return new ud(r)}function XM(r,t,e=!1,o=!1){let n=v(r,"a","matMul"),s=v(t,"b","matMul");[n,s]=_t(n,s);let i={a:n,b:s},a={transposeA:e,transposeB:o};return T.runKernel(is,i,a)}var Gt=N({matMul_:XM});function YM(r,t,e=1,o=0,n="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i={indices:v(r,"indices","oneHot","int32")},a={dtype:n,depth:t,onValue:e,offValue:o};return T.runKernel(Ia,i,a)}var ac=N({oneHot_:YM});function ZM(r){P().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}JS(ZM);function Fr(){return T}function sm(){return T.memory()}function z(r,t){return T.tidy(r,t)}function St(r){em(r).forEach(e=>e.dispose())}function qe(r){return T.keep(r)}function Dw(r){return T.setBackend(r)}function Fv(){return T.ready()}function _v(){return T.backendName}function lc(r,t,e=1){return T.registerBackend(r,t,e)}function Ov(){return T.backend}function QM(r){let e={input:v(r,"input","imag")};return T.runKernel(xa,e)}var uc=N({imag_:QM});function JM(r){let e={x:v(r,"x","neg")};return T.runKernel(Tn,e)}var Ut=N({neg_:JM});function tB(r){let e={input:v(r,"input","real")};return T.runKernel(yi,e)}var xl=N({real_:tB});function eB(r,t,e){let o=v(r,"x","transpose");if(t==null&&(t=o.shape.map((i,a)=>a).reverse()),$(o.rank===t.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${t}.`),t.forEach(i=>{$(i>=0&&i<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${t}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:t};return o.dtype==="complex64"?z(()=>{let i=xl(o),a=uc(o);return i=T.runKernel(Fo,{x:i},s),a=T.runKernel(Fo,{x:a},s),e&&(a=Ut(a)),wo(i,a)}):T.runKernel(Fo,n,s)}var Rt=N({transpose_:eB});var wr={};Br(wr,{assertAndGetBroadcastShape:()=>Et,getBroadcastDims:()=>Pv,getReductionAxes:()=>Jt});function Pv(r,t){let e=r.length,o=[];for(let n=0;n<e;n++){let s=e-1-n,i=r[s]||1;(t[t.length-1-n]||1)>1&&i===1&&o.unshift(s)}return o}function Jt(r,t){let e=[];for(let o=0;o<t.length;o++){let n=r[r.length-o-1],s=t.length-o-1,i=t[s];(n==null||n===1&&i>1)&&e.unshift(s)}return e}function Et(r,t){let e=[],o=Math.max(r.length,t.length);for(let n=0;n<o;n++){let s=r[r.length-n-1];s==null&&(s=1);let i=t[t.length-n-1];if(i==null&&(i=1),s===1)e.unshift(i);else if(i===1)e.unshift(s);else if(s!==i){let a=`Operands could not be broadcast together with shapes ${r} and ${t}.`;throw Error(a)}else e.unshift(s)}return e}var cc={};Br(cc,{fromPixels:()=>lB,fromPixelsAsync:()=>iB,toPixels:()=>aB});function Lv(r,t,e){if(al(r),t!=null&&t.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=Ai(r,e);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ls(r,t,o,e)}var yl;function zv(r,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,o=!1,n=!1,s=!1,i=!1,a=!1;if(r.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)i=!0;else if(typeof ImageBitmap<"u"&&r instanceof ImageBitmap)a=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(Yp(cl,T.backendName)!=null){let h={pixels:r},d={numChannels:t};return T.runKernel(cl,h,d)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],p;if(i)p=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||e)p=r.data;else if(s||n||a){if(yl==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")yl=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else yl=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});yl.canvas.width=u,yl.canvas.height=c,yl.drawImage(r,0,0,u,c),p=yl.getImageData(0,0,u,c).data}let m;if(t===4)m=new Int32Array(p);else{let h=u*c;m=new Int32Array(h*t);for(let d=0;d<h;d++)for(let g=0;g<t;++g)m[d*t+g]=p[d*4+g]}return Lv(m,[c,u,t],"int32")}function rB(r){return r!=null&&r.data instanceof Uint8Array}function oB(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}function nB(r){return r!=null&&r.width!==0&&r.height!==0}function sB(r){return oB()&&!(r instanceof ImageBitmap)&&nB(r)&&!rB(r)}async function iB(r,t=3){let e=null;if(P().getBool("WRAP_TO_IMAGEBITMAP")&&sB(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch{o=null}o!=null&&o.width===r.width&&o.height===r.height?e=o:e=r}else e=r;return zv(e,t)}async function aB(r,t){let e=v(r,"img","toPixels");if(!(r instanceof Ot)){let u=e;e=Y(u,"int32"),u.dispose()}if(e.rank!==2&&e.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let[o,n]=e.shape.slice(0,2),s=e.rank===2?1:e.shape[2];if(s>4||s===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if(e.dtype!=="float32"&&e.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);let i=await e.data(),a=e.dtype==="float32"?255:1,l=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let f=i[u*s+m];if(e.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(e.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);s===1?(c[0]=f*a,c[1]=f*a,c[2]=f*a):c[m]=f*a}let p=u*4;l[p+0]=Math.round(c[0]),l[p+1]=Math.round(c[1]),l[p+2]=Math.round(c[2]),l[p+3]=Math.round(c[3])}if(t!=null){t.width=n,t.height=o;let u=t.getContext("2d"),c=new ImageData(l,n,o);u.putImageData(c,0,0)}return e!==r&&e.dispose(),l}var lB=N({fromPixels_:zv});function uB(r,t){let e=r.shape.length,o=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(t.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[o-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[o-1]} vs. ${e}`);if(Kt(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=t.shape,s=n[n.length-1],i=1;for(let p=0;p<n.length-1;++p)i*=n[p];let a=r.shape,l=n.slice();l.pop();let u=1;for(let p=s;p<e;++p)u*=a[p],l.push(a[p]);let c=[...rs(r.shape).map(p=>p/u),1].slice(0,s);return[l,i,u,c]}function Mv(r,t,e){let o=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(e.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(e.rank-n))throw new Error(s+` Output shape length < ${o+(e.rank-n)}`);if(e.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let i=0;i<n;++i)if(e.shape[i]!==t.shape[i])throw new Error(s+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-n;++i)if(e.shape[i+n]!==r[i+o])throw new Error(s+` updates.shape[${i+n}] (${e.shape[i+n]}) != shape[${i+n}] (${r[i+n]})`)}function cB(r,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(t.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(e.length===0){if(t.size===0)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}Mv(e,t,r)}function pB(r,t,e){let o=t.shape.length,n=o>1?t.shape[o-1]:1,s=e.length,i=1;for(let p=n;p<s;++p)i*=e[p];let a=n<1?1:n,l=Kt(t.shape)/a,u=[...rs(e.slice(0,n)),1],c=Kt(e);return{sliceRank:n,numUpdates:l,sliceSize:i,strides:u,outputSize:c}}var me={};Br(me,{assertParamsValid:()=>fB,computeFlatOffset:()=>yB,computeOutShape:()=>dB,getNormalizedAxes:()=>gB,isSliceContinous:()=>xB,maskToAxes:()=>hB,parseSliceParams:()=>Fw,sliceInfo:()=>bB,startForAxis:()=>qv,startIndicesWithElidedDims:()=>Wv,stopForAxis:()=>jv,stopIndicesWithElidedDims:()=>Hv,stridesForAxis:()=>Kv,stridesWithElidedDims:()=>Vv});var Rw=-2,mB=-1;function fB(r,t,e){let o=r.shape.length;$(o===t.length,()=>`Error in slice${o}D: Length of begin ${t} must match the rank of the array (${o}).`),$(o===e.length,()=>`Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)$(t[n]+e[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${t[n]+e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function hB(r){let t=[],e=0;for(;r>0;)r&1&&t.push(e),r/=2,e++;return t}function dB(r,t,e){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((t[n]-r[n])/e[n]);return o}function Vv(r,t,e,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<e;s++)s===0?n[t]=1:(n.splice(t,0,1),n.pop());return n}function Gv(r,t,e){return e<=r?e:e-(t-1)}function Uv(r,t){let e=[];for(let o=0;o<r;o++)e.push(t+o);return e}function gB(r,t,e,o,n,s,i,a,l){let u=r.length,c=new Array(u),p=new Array(u),m=new Array(u);if(t.length&&e>0){let f=t[0],h=e+1;c=Wv(i,f,h,o,r),p=Hv(a,f,h,n,r),m=Vv(s,f,h,r)}else for(let f=0;f<u;f++)c[f]=qv(i,o,s,r,f,l),p[f]=jv(a,n,s,r,f,l),m[f]=Kv(s,f,l);return{begin:c,end:p,strides:m}}function Wv(r,t,e,o,n){let s=[...n],i=Uv(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{let l=Gv(t,e,a),u=o[l];r&1<<l&&(u=0),s[a]=u}return s}function Hv(r,t,e,o,n){let s=[...n],i=Uv(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{let l=Gv(t,e,a),u=o[l];r&1<<l&&(u=Number.MAX_SAFE_INTEGER),s[a]=u}for(let a=0;a<s.length;a++){let l=n[a];s[a]<0&&(s[a]+=l),s[a]=bu(0,s[a],n[a])}return s}function Kv(r,t,e){let o=r[t];return(e&1<<t||o==null)&&(o=1),o}function qv(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),i=bu(0,i,l-1),i}function jv(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),a>0?i=bu(0,i,l):i=bu(-1,i,l-1),i}function xB(r,t,e){let o=e.length;for(let n=0;n<e.length;n++)if(e[n]>1){o=n;break}for(let n=o+1;n<e.length;n++)if(t[n]>0||e[n]!==r[n])return!1;return!0}function yB(r,t){let e=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)e+=r[o]*t[o];return e}function Fw(r,t,e){let o,n=r.shape.length;typeof t=="number"?o=[t,...new Array(n-1).fill(0)]:t.length<n?o=t.concat(new Array(n-t.length).fill(0)):o=t.slice(),o.forEach(i=>{$(i!==-1,()=>"slice() does not support negative begin indexing.")});let s;return e==null?s=new Array(n).fill(-1):typeof e=="number"?s=[e,...new Array(n-1).fill(-1)]:e.length<n?s=e.concat(new Array(n-e.length).fill(-1)):s=e,s=s.map((i,a)=>i>=0?i:($(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),r.shape[a]-o[a])),[o,s]}function bB(r,t,e,o,n,s,i,a,l){let u;if(o==null?(u=new Array(t.length),u.fill(1)):u=o,i!=null&&(i&i-1)!==0)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let w=0;w<p.dims;w++)c&&(1<<w&a)!==0&&p.numAddAxisAfterEllipsis++,1<<w&i&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};wB(p,m);let f=!0,h=!0,d=!0,g=[],x=[];for(let w=0;w<r.length;++w){if(m.strides[w]===0)throw Error(`strides[${w}] must be non-zero`);let C=!!(m.shrinkAxisMask&1<<w),S=r[w];if(S===-1){g.push(C?1:-1);continue}let k=[m.beginMask&1<<w,m.endMask&1<<w],E=[m.strides[w]>0?0:-1,m.strides[w]>0?S:S-1];if(C&&m.strides[w]<=0)throw Error("only stride 1 allowed on non-range indexing.");d=d&&m.strides[w]===1;let A=!!(m.beginMask&1<<w&&m.endMask&1<<w);if(m.beginValid&&m.endValid){if(C){let B=m.begin[w]<0?S+m.begin[w]:m.begin[w];if(m.begin[w]=B,m.end[w]=m.begin[w]+1,B<0||B>=S)throw Error(`slice index ${m.begin[w]} of dimension ${w} out of bounds.`)}else m.begin[w]=Bv(m.begin[w],0,m.strides[w],S,k,E),m.end[w]=Bv(m.end[w],1,m.strides[w],S,k,E);let M=m.strides[w]===1&&m.begin[w]===0&&m.end[w]===S;f=f&&M,h=h&&(w===0&&m.strides[w]===1||M)}else f=f&&m.strides[w]===1&&A,h=h&&(w===0&&m.strides[w]===1||A);let D,O=!1;if(m.beginValid&&m.endValid?(D=m.end[w]-m.begin[w],O=!0):C?(D=1,O=!0):A&&S>=0&&(m.strides[w]<0?D=-S:D=S,O=!0),O){let M;D===0||D<0!=m.strides[w]<0?M=0:M=Math.trunc(D/m.strides[w])+(D%m.strides[w]!==0?1:0),g.push(M)}else g.push(-1)}for(let w=0;w<m.finalShapeGatherIndices.length;++w){let C=m.finalShapeGatherIndices[w];C>=0?x.push(g[C]):C===Rw&&x.push(1)}return{finalShapeSparse:x.filter((w,C)=>m.finalShapeGatherIndices[C]!==Rw),finalShape:x,isIdentity:f,sliceDim0:h,isSimpleSlice:d,begin:m.begin,end:m.end,strides:m.strides}}function wB(r,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=r.begin!=null,t.endValid=r.end!=null,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(t.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,t.dims);for(;e<n;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=o}else if(1<<o&r.newAxisMask)t.finalShapeGatherIndices.push(Rw),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);r.begin!=null&&(t.begin[e]=r.begin[o]),r.end!=null&&(t.end[e]=r.end[o]),t.strides[e]=r.strides[o],r.beginMask&1<<o&&(t.beginMask|=1<<e),r.endMask&1<<o&&(t.endMask|=1<<e),r.shrinkAxisMask&1<<o?(t.finalShapeGatherIndices.push(mB),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(o)),t.inputShapeGatherIndicesSparse[e]=o,e++}}function Bv(r,t,e,o,n,s){if(n[t])return e>0?s[t]:s[t+1&1];{let i=r<0?o+r:r;return i<s[0]?s[0]:i>s[1]?s[1]:i}}var K={};Br(K,{Serializable:()=>im,SerializationMap:()=>Vs,registerClass:()=>_r});var im=class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}},Vs=class{constructor(){this.classNameMap={}}static getMap(){return Vs.instance==null&&(Vs.instance=new Vs),Vs.instance}static register(t){Vs.getMap().classNameMap[t.className]=[t,t.fromConfig]}};function _r(r){$(r.className!=null,()=>"Class being registered does not have the static className property defined."),$(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),$(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Vs.register(r)}var cd="3.20.0";function CB(r,t){let e=v(r,"a","add"),o=v(t,"b","add");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(Rr,n)}var X=N({add_:CB});function IB(r,t){let e=v(r,"a","floorDiv"),o=v(t,"b","floorDiv");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(Cn,n)}var pd=N({floorDiv_:IB});function SB(r,t){let e=v(r,"a","div"),o=v(t,"b","div");if([e,o]=_t(e,o),e.dtype==="int32"&&o.dtype==="int32")return pd(e,o);let n={a:e,b:o},s={};return T.runKernel(yn,n,s)}var nt=N({div_:SB});function vB(r,t){let e=v(r,"a","mul"),o=v(t,"b","mul");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(mo,n)}var _=N({mul_:vB});function kB(r){let t=v(r,"x","abs");if(t.dtype==="complex64"){let e={x:t};return T.runKernel(ua,e)}else{let e={x:t};return T.runKernel(fn,e)}}var Le=N({abs_:kB});function TB(r){let e={x:v(r,"x","acos")};return T.runKernel(ni,e)}var _w=N({acos_:TB});function NB(r){let e={x:v(r,"x","acosh")};return T.runKernel(si,e)}var Ow=N({acosh_:NB});function EB(r,t=null,e=!1){let n={x:v(r,"x","all","bool")},s={axis:t,keepDims:e};return T.runKernel(ku,n,s)}var am=N({all_:EB});function $B(r,t=null,e=!1){let n={x:v(r,"x","any","bool")},s={axis:t,keepDims:e};return T.runKernel(Tu,n,s)}var pc=N({any_:$B});function AB(r,t=0){let o={x:v(r,"x","argMax")},n={axis:t};return T.runKernel(os,o,n)}var _i=N({argMax_:AB});function DB(r,t=0){let o={x:v(r,"x","argMin")},n={axis:t};return T.runKernel(ns,o,n)}var Xv=N({argMin_:DB});function RB(r){let e={x:v(r,"x","asin")};return T.runKernel(ii,e)}var Pw=N({asin_:RB});function FB(r){let e={x:v(r,"x","asinh")};return T.runKernel(ai,e)}var Lw=N({asinh_:FB});function _B(r){let e={x:v(r,"x","atan")};return T.runKernel(li,e)}var zw=N({atan_:_B});function OB(r,t){let e=v(r,"a","atan2"),o=v(t,"b","atan2");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(hn,n)}var Yv=N({atan2_:OB});function PB(r){let e={x:v(r,"x","atanh")};return T.runKernel(ui,e)}var Mw=N({atanh_:PB});function LB(r,t,e,o,n="NHWC",s){let i=r[3],a=[...t,i],l=Qv(n);return wl(r,a,e,s,o,null,null,l)}function Vw(r,t,e,o,n,s,i="channelsLast"){let[a,l]=md(t),u;if(i==="channelsLast")u=[a,l,r[3],r[3]];else if(i==="channelsFirst")u=[a,l,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return wl(r,u,e,o,n,s,!1,i)}function zB(r,t,e,o,n,s,i="NDHWC"){let[a,l,u]=Bw(t),c,p;if(i==="NDHWC")p="channelsLast",c=[a,l,u,r[4],r[4]];else if(i==="NCDHW")p="channelsFirst",c=[a,l,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return Zv(r,c,e,o,n,!1,p,s)}function wl(r,t,e,o,n,s,i=!1,a="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if(a==="channelsLast")[l,u,c,p]=r;else if(a==="channelsFirst")[l,p,u,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[m,f,,h]=t,[d,g]=md(e),[x,b]=md(o),w=mc(m,x),C=mc(f,b),{padInfo:S,outHeight:k,outWidth:E}=VB(n,u,c,d,g,w,C,s,a),A=i?h*p:h,D;return a==="channelsFirst"?D=[l,A,k,E]:a==="channelsLast"&&(D=[l,k,E,A]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:p,outHeight:k,outWidth:E,outChannels:A,padInfo:S,strideHeight:d,strideWidth:g,filterHeight:m,filterWidth:f,effectiveFilterHeight:w,effectiveFilterWidth:C,dilationHeight:x,dilationWidth:b,inShape:r,outShape:D,filterShape:t}}function Zv(r,t,e,o,n,s=!1,i="channelsLast",a){let[l,u,c,p,m]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[l,u,c,p,m]=r;else if(i==="channelsFirst")[l,m,u,c,p]=r;else throw new Error(`Unknown dataFormat ${i}`);let[f,h,d,,g]=t,[x,b,w]=Bw(e),[C,S,k]=Bw(o),E=mc(f,C),A=mc(h,S),D=mc(d,k),{padInfo:O,outDepth:M,outHeight:B,outWidth:V}=GB(n,u,c,p,x,b,w,E,A,D,a),U=s?g*m:g,G;return i==="channelsFirst"?G=[l,U,M,B,V]:i==="channelsLast"&&(G=[l,M,B,V,U]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:p,inChannels:m,outDepth:M,outHeight:B,outWidth:V,outChannels:U,padInfo:O,strideDepth:x,strideHeight:b,strideWidth:w,filterDepth:f,filterHeight:h,filterWidth:d,effectiveFilterDepth:E,effectiveFilterHeight:A,effectiveFilterWidth:D,dilationDepth:C,dilationHeight:S,dilationWidth:k,inShape:r,outShape:G,filterShape:t}}function MB(r,t,e,o,n){o==null&&(o=Gw(r,t,e));let s=r[0],i=r[1],a=bl((s-t+2*o)/e+1,n),l=bl((i-t+2*o)/e+1,n);return[a,l]}function BB(r,t,e,o,n,s){n==null&&(n=Gw(r,t,o));let i=r[0],a=r[1],l=r[2],u=bl((i-t+2*n)/o+1,s),c=bl((a-t+2*n)/o+1,s),p=bl((l-t+2*n)/o+1,s);return[u,c,p,e]}function Gw(r,t,e,o=1){let n=mc(t,o);return Math.floor((r[0]*(e-1)-e+n)/2)}function md(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function Bw(r){return typeof r=="number"?[r,r,r]:r}function mc(r,t){return t<=1?r:r+(r-1)*(t-1)}function VB(r,t,e,o,n,s,i,a,l){let u,c,p;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let f=MB([t,e],s,o,r,a);c=f[0],p=f[1]}else if(r==="same"){c=Math.ceil(t/o),p=Math.ceil(e/n);let m=Math.max(0,(c-1)*o+s-t),f=Math.max(0,(p-1)*n+i-e),h=Math.floor(m/2),d=m-h,g=Math.floor(f/2),x=f-g;u={top:h,bottom:d,left:g,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/o),p=Math.ceil((e-i+1)/n);else if(typeof r=="object"){let m=l==="channelsLast"?r[1][0]:r[2][0],f=l==="channelsLast"?r[1][1]:r[2][1],h=l==="channelsLast"?r[2][0]:r[3][0],d=l==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:f,left:h,right:d,type:m===0&&f===0&&h===0&&d===0?"VALID":"EXPLICIT"},c=bl((t-s+m+f)/o+1,a),p=bl((e-i+h+d)/n+1,a)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:p}}function GB(r,t,e,o,n,s,i,a,l,u,c){let p,m,f,h;if(typeof r=="number"){p={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=BB([t,e,o,1],a,1,n,r,c);m=g[0],f=g[1],h=g[2]}else if(r==="same"){m=Math.ceil(t/n),f=Math.ceil(e/s),h=Math.ceil(o/i);let d=(m-1)*n+a-t,g=(f-1)*s+l-e,x=(h-1)*i+u-o,b=Math.floor(d/2),w=d-b,C=Math.floor(g/2),S=g-C,k=Math.floor(x/2),E=x-k;p={top:C,bottom:S,left:k,right:E,front:b,back:w,type:"SAME"}}else if(r==="valid")p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},m=Math.ceil((t-a+1)/n),f=Math.ceil((e-l+1)/s),h=Math.ceil((o-u+1)/i);else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:p,outDepth:m,outHeight:f,outWidth:h}}function bl(r,t){if(!t)return Math.trunc(r);switch(t){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${t}`)}}function Co(r){let[t,e,o]=md(r);return t===1&&e===1&&o===1}function Qe(r,t){return Co(r)||Co(t)}function Qv(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function ie(r,t,e){if(e!=null){if(typeof t=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if(typeof t=="number")$(oi(t),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else if(typeof t=="object")t.forEach(o=>{o.forEach(n=>{$(oi(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${t}`)}}function UB(r,t){let o={x:v(r,"x","reshape","string_or_numeric")},n={shape:t};return T.runKernel(Ts,o,n)}var F=N({reshape_:UB});function WB(r,t,e,o,n){let s=v(r,"x","avgPool","float32"),i=1;$(Qe(e,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);let a=s,l=!1;s.rank===3&&(l=!0,a=F(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),ie("avgPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=T.runKernel(ss,u,c);return p=Y(p,s.dtype),l?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Cl=N({avgPool_:WB});function HB(r,t,e,o,n,s="NDHWC"){let i=v(r,"x","avgPool3d","float32"),a=i,l=!1;i.rank===4&&(l=!0,a=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),$(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),$(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),ie("avgPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=T.runKernel(la,u,c);return p=Y(p,a.dtype),l?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var Uw=N({avgPool3d_:HB});function KB(r,t=0){$(r.length>=1,()=>"Pass at least one tensor to concat");let e=td(r,"tensors","concat","string_or_numeric");if(e[0].dtype==="complex64"&&e.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),e.length===1)return Wr(e[0]);let o=e,n={axis:t};return T.runKernel(ls,o,n)}var ue=N({concat_:KB});function qB(r){let e={x:v(r,"x","sigmoid","float32")};return T.runKernel(ho,e)}var Mo=N({sigmoid_:qB});function jB(r,t,e){let o=v(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:t,size:e};return T.runKernel(Fn,n,s)}var Lt=N({slice_:jB});function XB(r){let e={x:v(r,"x","tanh","float32")};return T.runKernel(Pn,e)}var fc=N({tanh_:XB});function YB(r,t,e){let o=v(r,"x","batchToSpaceND"),n=t.reduce((a,l)=>a*l);$(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),$(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),$(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${n}`);let s={x:o},i={blockShape:t,crops:e};return T.runKernel(as,s,i)}var hc=N({batchToSpaceND_:YB});function Jv(r){let t;return r.rank===0||r.rank===1?t=F(r,[1,1,1,r.size]):r.rank===2?t=F(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?t=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]):t=r,t}function ZB(r,t,e,o,n,s){s==null&&(s=.001);let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;o!=null&&(c=v(o,"offset","batchNorm")),$(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),$(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),$(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:Jv(i),scale:u,offset:c,mean:a,variance:l},f={varianceEpsilon:s},h=T.runKernel(hs,m,f);return F(h,i.shape)}var Oa=N({batchNorm_:ZB});function QB(r,t,e,o,n,s){let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),$(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),$(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),u!=null&&$(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Oa(i,a,l,c,u,s)}var Ww=N({batchNorm2d_:QB});function JB(r,t,e,o,n,s){let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),$(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),$(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),u!=null&&$(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Oa(i,a,l,c,u,s)}var Hw=N({batchNorm3d_:JB});function tV(r,t,e,o,n,s){let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),$(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),$(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),u!=null&&$(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Oa(i,a,l,c,u,s)}var Kw=N({batchNorm4d_:tV});function eV(r,t,e){let o=v(r,"x","bincount"),n=v(t,"weights","bincount");$(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),$(e>=0,()=>`size must be non-negative, but got ${e}.`),$(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},i={size:e};return T.runKernel($u,s,i)}var t1=N({bincount_:eV});function rV(r,t){let e=v(r,"broadcastTo","x"),o=e.shape;if(t.some(u=>!(u>0)||u%1!==0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){let u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}let n=e.shape,s=Array.from(t);for(let u=t.length-1;u>=0;u--)if(n[u]===t[u])s[u]=1;else if(e.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return Wr(e);let a={x:e},l={reps:s};return T.runKernel(Ro,a,l)}var Mn=N({broadcastTo_:rV});function oV(r){let e={x:v(r,"x","ceil","float32")};return T.runKernel(oo,e)}var qw=N({ceil_:oV});function nV(r,t,e){let o=v(r,"x","clipByValue");$(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`);let n={x:o},s={clipValueMin:t,clipValueMax:e};return T.runKernel(dn,n,s)}var Je=N({clipByValue_:nV});function sV(r){return ue(r,0)}var jw=N({concat1d_:sV});function iV(r,t){return ue(r,t)}var Xw=N({concat2d_:iV});function aV(r,t){return ue(r,t)}var Yw=N({concat3d_:aV});function lV(r,t){return ue(r,t)}var Zw=N({concat4d_:lV});function uV(r,t,e,o,n="NHWC",s=[1,1],i){let a=v(r,"x","conv2d","float32"),l=v(t,"filter","conv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),$(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),$(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),ie("conv2d",o,i);let p=n==="NHWC"?u.shape[3]:u.shape[1];$(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),$(Qe(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=T.runKernel(us,m,f);return c?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Hr=N({conv2d_:uV});function cV(r,t,e,o,n="NWC",s=1,i){let a=v(r,"x","conv1d"),l=v(t,"filter","conv1d"),u=a,c=!1;a.rank===2&&(c=!0,u=F(a,[1,a.shape[0],a.shape[1]])),$(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),$(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),ie("conv1d",o,i),$(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),$(Qe(e,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`),$(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let p=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),m=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=Hr(m,p,[1,e],o,"NHWC",[1,s],i);return c?F(g,[g.shape[2],g.shape[3]]):F(g,[g.shape[0],g.shape[2],g.shape[3]])}var lm=N({conv1d_:cV});function pV(r,t,e,o,n,s="NHWC",i){$(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let a=r,l=t,u=!1;t.rank===3&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,r[0],r[1],r[2]]),$(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),$(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),$(e.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);let c=s==="NHWC"?a[3]:a[1],p=s==="NHWC"?l.shape[3]:l.shape[1];$(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),$(p===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${e.shape[3]}.`),ie("conv2dDerInput",n,i);let m={dy:l,filter:e},f={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,inputShape:a},h=T.runKernel(cs,m,f);return u?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var dc=N({conv2DBackpropInput_:pV});function mV(r,t,e,o,n,s){let i=v(r,"x","conv2dTranspose"),a=v(t,"filter","conv2dTranspose");return dc(e,i,a,o,n,"NHWC",s)}var um=N({conv2dTranspose_:mV});function fV(r,t,e,o,n="NDHWC",s=[1,1,1]){let i=v(r,"x","conv3d"),a=v(t,"filter","conv3d"),l=i,u=!1;i.rank===4&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),$(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),$(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),$(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),$(Qe(e,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),$(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`);let c={x:l,filter:a},p={strides:e,pad:o,dataFormat:n,dilations:s},m=T.runKernel(ca,c,p);return u?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var Qw=N({conv3d_:fV});function hV(r,t,e,o,n){$(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let s=r,i=t,a=!1;t.rank===4&&(a=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let l=s[4],u=i.shape[4];$(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),$(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),$(e.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),$(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),$(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);let c={dy:i,filter:e},p={pad:n,strides:o,inputShape:s},m=T.runKernel(Ru,c,p);return a?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var fd=N({conv3DBackpropInput_:hV});function dV(r,t,e,o,n){let s=v(r,"x","conv3dTranspose"),i=v(t,"filter","conv3dTranspose");return fd(e,s,i,o,n)}var Jw=N({conv3dTranspose_:dV});function gV(r){let e={x:v(r,"x","cos","float32")};return T.runKernel(gn,e)}var Il=N({cos_:gV});function xV(r){let e={x:v(r,"x","cosh","float32")};return T.runKernel(xn,e)}var cm=N({cosh_:xV});function yV(r,t=0,e=!1,o=!1){let s={x:v(r,"x","cumprod")},i={axis:t,exclusive:e,reverse:o};return T.runKernel(pa,s,i)}var pm=N({cumprod_:yV});function bV(r,t=0,e=!1,o=!1){let s={x:v(r,"x","cumsum")},i={axis:t,exclusive:e,reverse:o};return T.runKernel(ps,s,i)}var hd=N({cumsum_:bV});function wV(r,t,e="NHWC"){let o=v(r,"x","depthToSpace","float32"),n=e==="NHWC"?o.shape[1]:o.shape[2],s=e==="NHWC"?o.shape[2]:o.shape[3],i=e==="NHWC"?o.shape[3]:o.shape[1];$(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),$(n*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${o.shape}`),$(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${o.shape}`),$(i%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${o.shape}`);let a={x:o},l={blockSize:t,dataFormat:e};return T.runKernel(fa,a,l)}var e1=N({depthToSpace_:wV});function CV(r,t,e,o,n="NHWC",s=[1,1],i){let a=v(r,"x","depthwiseConv2d","float32"),l=v(t,"filter","depthwiseConv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),$(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),$(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p=n==="NHWC"?u.shape[3]:u.shape[1];$(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),ie("depthwiseConv2d",o,i);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=T.runKernel(ms,m,f);return c?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Oi=N({depthwiseConv2d_:CV});function IV(r,t,e,o,n=[1,1],s="NHWC"){let i=v(r,"x","dilation2d"),a=v(t,"filter","dilation2d");$(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),$(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),$(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;i.rank===3&&(l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let c={x:l,filter:a},p={strides:e,pad:o,dilations:n},m=T.runKernel(ha,c,p);return u?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var r1=N({dilation2d_:IV});function SV(r,t){let e=v(r,"a","equal","string_or_numeric"),o=v(t,"b","equal","string_or_numeric");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(wn,n)}var Cr=N({equal_:SV});function vV(r,t,e){let o=v(t,"a","where"),n=v(e,"b","where"),s=v(r,"condition","where","bool"),i=Et(Et(s.shape,o.shape),n.shape),a=Mn(s,i),l=Mn(o,i),u=Mn(n,i),c={condition:a,t:l,e:u};return T.runKernel($s,c)}var fe=N({where_:vV});function kV(r){let e={x:v(r,"x","zerosLike")};return T.runKernel(Os,e)}var xt=N({zerosLike_:kV});function TV(r,t){let e=v(r,"a","div"),o=v(t,"b","div");[e,o]=_t(e,o);let n=nt(e,o),s=xt(n),i=Cr(o,s);return fe(i,s,n)}var o1=N({divNoNan_:TV});function NV(r,t){let e=v(r,"t1","dot"),o=v(t,"t2","dot");$((e.rank===1||e.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);let n=e.rank===1?e.size:e.shape[1],s=o.rank===1?o.size:o.shape[0];if($(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),e.rank===1&&o.rank===1){let i=F(e,[1,-1]),a=F(o,[-1,1]),l=Gt(i,a);return F(l,[])}else if(e.rank===1&&o.rank===2){let i=F(e,[1,-1]),a=F(o,[o.shape[0],o.shape[1]]),l=Gt(i,a);return F(l,[l.size])}else if(e.rank===2&&o.rank===1){let i=F(o,[-1,1]),a=Gt(e,i);return F(a,[a.size])}else{let i=F(o,[o.shape[0],o.shape[1]]);return Gt(e,i)}}var n1=N({dot_:NV});function EV(r){let e={x:v(r,"x","elu","float32")};return T.runKernel(bn,e)}var Pi=N({elu_:EV});function $V(r){let t=v(r,"x","erf");$(t.dtype==="int32"||t.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),t.dtype==="int32"&&(t=Y(t,"float32"));let e={x:t};return T.runKernel(pi,e)}var tC=N({erf_:$V});function eC(r,t){for(let e=0;e<r.length;++e)if(r[r.length-e-1]!==t-1-e)return!1;return!0}function s1(r,t,e){let o=r.length+t.length,n=[],s=0,i=0;for(let a=0;a<o;a++)e.indexOf(a)===-1?n.push(r[s++]):n.push(t[i++]);return n}function rC(r,t){let e=[],o=r.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&e.push(r[s]);let n=t.map(s=>r[s]);return[e,n]}function Gs(r,t){let e=t.map(o=>1);return s1(r,e,t)}function AV(r,t,e){$(eC(t,e),()=>`${r} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function oC(r,t){if(eC(r,t))return null;let e=[];for(let o=0;o<t;++o)r.indexOf(o)===-1&&e.push(o);return r.forEach(o=>e.push(o)),e}function mm(r){return r.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function DV(r,t){let e=[];for(let o=t-r;o<t;++o)e.push(o);return e}function RV(r,t=null,e=!1){let n={x:v(r,"x","max")},s={reductionIndices:t,keepDims:e};return T.runKernel(xs,n,s)}var mr=N({max_:RV});function FV(r,t=null,e=!1){let n={x:v(r,"x","min")},s={axis:t,keepDims:e};return T.runKernel(ws,n,s)}var fm=N({min_:FV});function _V(r,t){let e=v(r,"base","pow"),o=v(t,"exp","pow");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(En,n)}var Bo=N({pow_:_V});function Ct(r,t){if((Vr(r)&&t!=="string"||Array.isArray(r))&&t!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(t==="string"&&Vr(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ls(r,[],[],t)}function OV(r){let e={x:v(r,"x","sqrt","float32")};return T.runKernel(go,e)}var ce=N({sqrt_:OV});function PV(r){let t=v(r,"x","square"),e={};return T.runKernel("Square",{x:t},e)}var Ft=N({square_:PV});function LV(r,t=null,e=!1){let o=v(r,"x","sum");o.dtype==="bool"&&(o=Y(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return T.runKernel(As,n,s)}var at=N({sum_:LV});function zV(r,t="euclidean",e=null,o=!1){r=v(r,"x","norm");let n=i1(r,t,e),s=n.shape;if(o){let i=Ge(e,r.shape);s=Gs(n.shape,i)}return F(n,s)}function i1(r,t,e=null){if(r.rank===0)return Le(r);if(r.rank!==1&&e===null)return i1(F(r,[-1]),t,e);if(r.rank===1||typeof e=="number"||Array.isArray(e)&&e.length===1){if(t===1)return at(Le(r),e);if(t===1/0)return mr(Le(r),e);if(t===-1/0)return fm(Le(r),e);if(t==="euclidean"||t===2)return ce(at(Bo(Le(r),Ct(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&e.length===2){if(t===1)return mr(at(Le(r),e[0]),e[1]-1);if(t===1/0)return mr(at(Le(r),e[1]),e[0]);if(t===-1/0)return fm(at(Le(r),e[1]),e[0]);if(t==="fro"||t==="euclidean")return ce(at(Ft(r),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}var Pa=N({norm_:zV});function MV(r,t=null,e=!1){return Pa(r,"euclidean",t,e)}var a1=N({euclideanNorm_:MV});function BV(r){let e={x:v(r,"x","exp")};return T.runKernel(no,e)}var ir=N({exp_:BV});function VV(r,t=0){let e=v(r,"x","expandDims","string_or_numeric");$(t<=e.rank,()=>"Axis must be <= rank of the tensor");let o={input:e},n={dim:t};return T.runKernel(fs,o,n)}var tr=N({expandDims_:VV});function GV(r){let e={x:v(r,"x","expm1")};return T.runKernel(so,e)}var sC=N({expm1_:GV});function UV(r,t){let e=v(r,"x","tile","string_or_numeric");$(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);let o={x:e},n={reps:t};return T.runKernel(Ro,o,n)}var ar=N({tile_:UV});function WV(r,t,e,o="float32"){t==null&&(t=r);let n=et([r,t],o),s=r<=t?r:t;for(let a=0;a<s;++a)n.set(1,a,a);let i=F(n.toTensor(),[r,t]);if(e==null)return i;if(e.length===1)return ar(tr(i,0),[e[0],1,1]);if(e.length===2)return ar(tr(tr(i,0),0),[e[0],e[1],1,1]);if(e.length===3)return ar(tr(tr(tr(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}var gc=N({eye_:WV});function Sl(r,t,e){let o={shape:r,value:t,dtype:e};return T.runKernel(da,{},o)}function HV(r){let e={x:v(r,"x","floor","float32")};return T.runKernel(io,e)}var Li=N({floor_:HV});function KV(r,t,e=0,o=0){let n=v(r,"x","gather"),s=v(t,"indices","gather","int32"),i={x:n,indices:s},a={axis:e,batchDims:o};return T.runKernel(ds,i,a)}var vl=N({gather_:KV});function qV(r,t){let e=v(r,"a","greater","string_or_numeric"),o=v(t,"b","greater","string_or_numeric");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(In,n)}var _e=N({greater_:qV});function jV(r,t){let e=v(r,"a","greaterEqual","string_or_numeric"),o=v(t,"b","greaterEqual","string_or_numeric");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(ao,n)}var So=N({greaterEqual_:jV});function XV(r){let e={x:v(r,"x","isFinite")};return T.runKernel(mi,e)}var iC=N({isFinite_:XV});function YV(r){let e={x:v(r,"x","isInf")};return T.runKernel(fi,e)}var aC=N({isInf_:YV});function ZV(r){let e={x:v(r,"x","isNaN")};return T.runKernel(Sn,e)}var lC=N({isNaN_:ZV});function QV(r,t=.2){let o={x:v(r,"x","leakyRelu")},n={alpha:t};return T.runKernel(gs,o,n)}var kl=N({leakyRelu_:QV});function JV(r,t){let e=v(r,"a","less","string_or_numeric"),o=v(t,"b","less","string_or_numeric");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(vn,n)}var dd=N({less_:JV});function tG(r,t){let e=v(r,"a","lessEqual","string_or_numeric"),o=v(t,"b","lessEqual","string_or_numeric");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(kn,n)}var Vo=N({lessEqual_:tG});function eG(r,t=5,e=1,o=1,n=.5){let s=v(r,"x","localResponseNormalization");$(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),$(oi(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,a=!1;s.rank===3&&(a=!0,i=F(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u={depthRadius:t,bias:e,alpha:o,beta:n},c=T.runKernel(ya,l,u);return a?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var l1=N({localResponseNormalization_:eG});function rG(r){let e={x:v(r,"x","log","float32")};return T.runKernel(uo,e)}var Ir=N({log_:rG});function oG(r){let e={x:v(r,"x","log1p")};return T.runKernel(hi,e)}var hm=N({log1p_:oG});function uC(r,t){$(Iu(r),()=>"The f passed in variableGrads(f) must be a function"),$(t==null||Array.isArray(t)&&t.every(u=>u instanceof Ei),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let e=t!=null;if(!e){t=[];for(let u in T.registeredVariables)t.push(T.registeredVariables[u])}let o=e?t.filter(u=>!u.trainable):null,n=t.length;t=t.filter(u=>u.trainable),$(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:i,grads:a}=T.gradients(r,t,null,s);$(a.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),$(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let l={};return t.forEach((u,c)=>{a[c]!=null&&(l[u.name]=a[c])}),o?.forEach(u=>l[u.name]=null),{value:i,grads:l}}function vo(r){return T.customGrad(r)}function nG(r){let e={x:v(r,"x","softplus")};return T.runKernel(Ii,e)}var Us=N({softplus_:nG});function sG(r){let t=v(r,"x","logSigmoid");return vo(o=>({value:Ut(Us(Ut(o))),gradFunc:i=>_(i,Mo(Ut(o)))}))(t)}var cC=N({logSigmoid_:sG});function iG(r,t){let e=v(r,"a","sub"),o=v(t,"b","sub");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(yo,n)}var mt=N({sub_:iG});function aG(r,t=-1){let e=v(r,"logits","logSoftmax");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return vo((n,s)=>{let a=mr(n,t,!0),l=mt(n,a),u=mt(Y(l,"float32"),Ir(at(ir(l),t,!0)));return s([u]),{value:u,gradFunc:(p,m)=>{let[f]=m,h=!0,d=ir(f);return mt(p,_(at(p,t,h),d))}}})(e)}var dm=N({logSoftmax_:aG});function lG(r,t=null,e=!1){let o=v(r,"x","logSumExp"),n=Ge(t,o.shape),s=mr(o,n,!0),i=mt(o,s),a=ir(i),l=at(a,n),u=Ir(l),c=X(F(s,u.shape),u);if(e){let p=Gs(c.shape,n);return F(c,p)}return c}var u1=N({logSumExp_:lG});function uG(r,t){let e=v(r,"a","logicalAnd","bool"),o=v(t,"b","logicalAnd","bool");Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(di,n)}var fr=N({logicalAnd_:uG});function cG(r){let e={x:v(r,"x","logicalNot","bool")};return T.runKernel(gi,e)}var xc=N({logicalNot_:cG});function pG(r,t){let e=v(r,"a","logicalOr","bool"),o=v(t,"b","logicalOr","bool");Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(ul,n)}var gd=N({logicalOr_:pG});function mG(r,t){let e=v(r,"a","logicalXor","bool"),o=v(t,"b","logicalXor","bool");return Et(e.shape,o.shape),fr(gd(r,t),xc(fr(r,t)))}var c1=N({logicalXor_:mG});function fG(r,t,e,o,n){let s=v(r,"x","maxPool"),i=1,a=s,l=!1;s.rank===3&&(l=!0,a=F(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),$(Qe(e,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`),ie("maxPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=T.runKernel(ys,u,c);return l?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Tl=N({maxPool_:fG});function hG(r,t=[1,1,1],e,o,n,s="NDHWC"){let i=v(r,"x","maxPool3d"),a=i,l=!1;i.rank===4&&(l=!0,a=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),$(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),$(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),ie("maxPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=T.runKernel(ba,u,c);return l?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var pC=N({maxPool3d_:hG});function dG(r,t){let e=v(r,"a","maximum"),o=v(t,"b","maximum");[e,o]=_t(e,o),e.dtype==="bool"&&(e=Y(e,"int32"),o=Y(o,"int32")),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(co,n)}var Kr=N({maximum_:dG});function gG(r,t=null,e=!1){let n={x:v(r,"x","mean")},s={axis:t,keepDims:e};return T.runKernel(bs,n,s)}var he=N({mean_:gG});function te(r,t="float32"){if(t==="complex64"){let o=te(r,"float32"),n=te(r,"float32");return wo(o,n)}let e=vu(Kt(r),t);return T.makeTensor(e,r,t)}function qr(r,t="float32"){if(t==="complex64"){let o=qr(r,"float32"),n=te(r,"float32");return wo(o,n)}let e=Up(Kt(r),t);return T.makeTensor(e,r,t)}function xG(r,t){let e=v(r,"a","minimum"),o=v(t,"b","minimum");[e,o]=_t(e,o),e.dtype==="bool"&&(e=Y(e,"int32"),o=Y(o,"int32")),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(po,n)}var Nl=N({minimum_:xG});function yG(r,t,e){$(e==="reflect"||e==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);let o=v(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");$(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);let n=e==="reflect"?1:0;for(let a=0;a<o.rank;a++)$(t[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),$(t[a][0]>=0&&t[a][0]<=o.shape[a]-n&&t[a][1]>=0&&t[a][1]<=o.shape[a]-n,()=>`Padding in dimension ${a} cannot be greater than or equal to ${o.shape[a]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:t,mode:e},i={x:o};return T.runKernel(Cs,i,s)}var p1=N({mirrorPad_:yG});function bG(r,t){let e=v(r,"a","mod"),o=v(t,"b","mod");[e,o]=_t(e,o);let n={a:e,b:o};return T.runKernel(xi,n)}var m1=N({mod_:bG});function wG(r,t=null,e=!1){r=v(r,"x","moments");let o=Ge(t,r.shape),n=he(r,o,e),s=n.shape;e||(s=Gs(n.shape,o));let i=Ft(mt(Y(r,"float32"),F(n,s))),a=he(i,o,e);return{mean:n,variance:a}}var yc=N({moments_:wG});function CG(r,t){let e=v(r,"a","notEqual","string_or_numeric"),o=v(t,"b","notEqual","string_or_numeric");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Nn,n)}var La=N({notEqual_:CG});function IG(r){let e={x:v(r,"x","onesLike")};return T.runKernel(Is,e)}var je=N({onesLike_:IG});function SG(r,t,e=0){let o=v(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:t,constantValue:e},s={x:o};return T.runKernel(vs,s,n)}var El=N({pad_:SG});function vG(r,t,e){let o=v(r,"x","spaceToBatchND");$(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),$(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),$(o.shape.reduce((i,a,l)=>l>0&&l<=t.length?i&&(a+e[l-1][0]+e[l-1][1])%t[l-1]===0:i,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);let n={x:o},s={blockShape:t,paddings:e};return T.runKernel(Ds,n,s)}var bc=N({spaceToBatchND_:vG});function kG(r,t,e,o,n,s,i){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let a=v(r,"x","maxPool"),l=a,u=!1;a.rank===3&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),$(Qe(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=Vw(l.shape,t,s,n,o),p=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=NG([c.filterHeight,c.filterWidth],p):m=[[0,0],[0,0]];let f=p[0]===1&&p[1]===1,[h,d]=TG([c.inHeight,c.inWidth],p,m),g=f?o:"valid",x=f?l:bc(l,p,h),w=(e==="avg"?()=>Cl(x,t,s,g,i):()=>Tl(x,t,s,g,i))(),C=f?w:hc(w,p,d);return u?F(C,[C.shape[1],C.shape[2],C.shape[3]]):C}function TG(r,t,e){let o=e.map(c=>c[0]),n=e.map(c=>c[1]),s=r.concat(o,n),i=t.map((c,p)=>(c-s[p]%c)%c),a=n.map((c,p)=>c+i[p]),l=t.map((c,p)=>[o[p],a[p]]),u=t.map((c,p)=>[0,i[p]]);return[l,u]}function NG(r,t){let o=r.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),n=o.map(i=>Math.floor(i/2)),s=o.map((i,a)=>i-n[a]);return o.map((i,a)=>[n[a],s[a]])}var f1=N({pool_:kG});function EG(r,t){let e=v(r,"x","prelu"),o=v(t,"alpha","prelu"),n={x:e,alpha:o};return T.runKernel(ks,n)}var $l=N({prelu_:EG});function $G(r,t=null,e=!1){let o=v(r,"x","prod");o.dtype==="bool"&&(o=Y(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return T.runKernel($n,n,s)}var h1=N({prod_:$G});var yC=Gp(gm());var wc=class{constructor(t,e,o,n,s){this.mean=t,this.stdDev=e,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let i=s||Math.random();this.random=yC.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let t,e,o=!1;for(;!o;){let n,s,i;do n=2*this.random()-1,s=2*this.random()-1,i=n*n+s*s;while(i>=1||i===0);let a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*n*a,e=this.mean+this.stdDev*s*a,(!this.truncated||this.isValidTruncated(t))&&(o=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return this.dtype==null||this.dtype==="float32"?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}};var yd=class{constructor(t=0,e=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=t,this.range=e-t,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=yC.alea(n)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function PG(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new wc(t,e,o,!1,n),i=et(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var bd=N({randomNormal_:PG});function LG(r,t=0,e=1,o="float32",n){let s=et(r,o),i=new yd(t,e,null,n);for(let a=0;a<s.values.length;a++)s.values[a]=i.nextValue();return s.toTensor()}var zi=N({randomUniform_:LG});function Cc(r,t,e=1,o="float32"){if(e===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:t,step:e,dtype:o};return T.runKernel(Sa,{},n)}function zG(r){let e={x:v(r,"x","reciprocal")};return T.runKernel(An,e)}var bC=N({reciprocal_:zG});function MG(r){let e={x:v(r,"x","relu")};return T.runKernel(Dn,e)}var jr=N({relu_:MG});function BG(r){let e={x:v(r,"x","relu6")};return T.runKernel(Rn,e)}var wd=N({relu6_:BG});function VG(r,t){let o={x:v(r,"x","reverse")},n={dims:t};return T.runKernel(va,o,n)}var ko=N({reverse_:VG});function GG(r){let e={x:v(r,"x","round")};return T.runKernel(bi,e)}var xm=N({round_:GG});function UG(r){let e={x:v(r,"x","rsqrt","float32")};return T.runKernel(fo,e)}var ym=N({rsqrt_:UG});function WG(r){let e={x:v(r,"x","selu")};return T.runKernel(wi,e)}var bm=N({selu_:WG});function HG(r,t,e,o,n,s=[1,1],i="NHWC"){let a=v(r,"x","separableConv2d"),l=v(t,"depthwiseFilter","separableConv2d"),u=v(e,"pointwiseFilter","separableConv2d"),c=a,p=!1;if(a.rank===3&&(p=!0,c=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");$(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),$(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),$(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),$(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),$(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=l.shape[2],f=l.shape[3];$(u.shape[2]===m*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*f}, but got ${u.shape[2]}.`);let h=Oi(c,l,o,n,i,s),g=Hr(h,u,1,"valid",i);return p?F(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var wm=N({separableConv2d_:HG});function KG(r){let e={x:v(r,"x","sign")};return T.runKernel(Ci,e)}var wC=N({sign_:KG});function qG(r){let e={x:v(r,"x","sin","float32")};return T.runKernel(_n,e)}var Cm=N({sin_:qG});function jG(r){let e={x:v(r,"x","sinh")};return T.runKernel(On,e)}var Im=N({sinh_:jG});function XG(r,t,e){let o=v(r,"x","slice1d");return $(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Lt(o,[t],[e])}var Sm=N({slice1d_:XG});function YG(r,t,e){let o=v(r,"x","slice2d");return $(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Lt(o,t,e)}var Cd=N({slice2d_:YG});function ZG(r,t,e){let o=v(r,"x","slice3d");return $(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Lt(o,t,e)}var vm=N({slice3d_:ZG});function QG(r,t,e){let o=v(r,"x","slice4d");return $(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Lt(o,t,e)}var Ic=N({slice4d_:QG});function JG(r,t=-1){let e=v(r,"logits","softmax","float32");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);let o={logits:e},n={dim:t};return T.runKernel(Fs,o,n)}var Dl=N({softmax_:JG});function tU(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let t={input:r};return T.runKernel(Lu,t)}var km=N({fft_:tU});function eU(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let t={input:r};return T.runKernel(Mu,t)}var Sc=N({ifft_:eU});function rU(r){let t=r.shape[r.shape.length-1],e=r.size/t,o;if(t<=2){let n=F(r,[e,t]);o=Sc(n)}else{let n=[e,2*(t-1)],s=F(xl(r),[e,t]),i=F(uc(r),[e,t]),a=ko(Lt(s,[0,1],[e,t-2]),1),l=_(ko(Lt(i,[0,1],[e,t-2]),1),Ct(-1)),u=ue([s,a],1),c=ue([i,l],1),p=F(wo(u,c),[n[0],n[1]]);o=Sc(p)}if(o=xl(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=F(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var CC=N({irfft_:rU});function oU(r,t,e=0){let n={x:v(r,"x","split")},s={numOrSizeSplits:t,axis:e};return T.runKernel(Rs,n,s)}var He=N({split_:oU});function nU(r,t){$(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let e=r.shape[r.shape.length-1],o=r.size/e,n;if(t!=null&&t<e){let h=r.shape.map(g=>0),d=r.shape.map(g=>g);d[r.shape.length-1]=t,n=Lt(r,h,d),e=t}else if(t!=null&&t>e){let h=r.shape.map(d=>d);h[r.shape.length-1]=t-e,n=ue([r,te(h)],r.shape.length-1),e=t}else n=r;let s=xt(n),i=F(wo(n,s),[o,e]),a=km(i),l=Math.floor(e/2)+1,u=xl(a),c=uc(a),p=He(u,[l,e-l],u.shape.length-1),m=He(c,[l,e-l],c.shape.length-1),f=n.shape.slice();return f[n.shape.length-1]=l,F(wo(p[0],m[0]),f)}var IC=N({rfft_:nU});function sU(r,t){let e=v(r,"a","squaredDifference"),o=v(t,"b","squaredDifference");[e,o]=_t(e,o),Et(e.shape,o.shape);let n={a:e,b:o},s={};return T.runKernel(xo,n,s)}var D1=N({squaredDifference_:sU});function iU(r,t){let e=v(r,"x","squeeze","string_or_numeric");return F(e,Hb(e.shape,t).newShape)}var Bn=N({squeeze_:iU});function aU(r,t=0){let e=td(r,"tensors","stack","string_or_numeric");$(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&$(t<=e[0].rank,()=>"Axis must be <= rank of the tensor");let o=e,n={axis:t};return T.runKernel(Ss,o,n)}var er=N({stack_:aU});function lU(r,t=0){let o={x:v(r,"x","step")},n={alpha:t};return T.runKernel(vi,o,n)}var Vn=N({step_:lU});function uU(r,t,e,o,n=0,s=0,i=0,a=0,l=0){let c={x:v(r,"x","stridedSlice","string_or_numeric")},p={begin:t,end:e,strides:o,beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};return T.runKernel(Ta,c,p)}var SC=N({stridedSlice_:uU});function cU(r){let e={x:v(r,"x","tan","float32")};return T.runKernel(Si,e)}var vC=N({tan_:cU});function ze(r,t){al(r);let e=Ai(r,t);if(e.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ls(r,null,e,t)}function Tm(r,t,e){if(al(r),t!=null&&t.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=Ai(r,e);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ls(r,t,o,e)}function pU(r,t=1,e=!0){let o=v(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);let s={x:o},i={k:t,sorted:e},[a,l]=T.runKernel(Na,s,i);return{values:a,indices:l}}var R1=N({topk_:pU});function mU(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new wc(t,e,o,!0,n),i=et(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Nm=N({truncatedNormal_:mU});function fU(r,t=0){let e=v(r,"x","unique","string_or_numeric");$(e.rank>0,()=>"The input tensor must be at least 1D");let o={x:e},n={axis:t},[s,i]=T.runKernel(Xu,o,n);return{values:s,indices:i}}var F1=N({unique_:fU});function hU(r,t,e){let o=v(r,"x","unsortedSegmentSum"),n=v(t,"segmentIds","unsortedSegmentSum","int32");$(oi(e),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},i={numSegments:e};return T.runKernel($a,s,i)}var Id=N({unsortedSegmentSum_:hU});function dU(r,t=0){let e=v(r,"x","unstack","string_or_numeric");$(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);let o={value:e},n={axis:t};return T.runKernel(_s,o,n)}var Or=N({unstack_:dU});function kC(r,t=!0,e,o){return T.makeVariable(r,t,e,o)}function _1(r,t){let e=[];for(let s=0;s<t.length;s++)t[s]&&e.push(s);let o=et(r,"int32"),n=et([e.length,r.length],"int32");for(let s=0;s<e.length;s++){let i=o.indexToLoc(e[s]),a=s*r.length;n.values.set(i,a)}return n.toTensor()}function O1(r,t){if(t==null)return r.shape.slice();if(ia(r.shape,t))return t;if(r.shape.length===t.length){let e=[];for(let o=0;o<r.shape.length;o++)t[o]==null&&r.shape[o]!=null?e.push(r.shape[o]):e.push(t[o]);return e}return t}function gU(r,t,e,o){let n=v(r,"x","dropout");if($(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),$(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),t===0)return r instanceof Ot?n.clone():n;let s=O1(n,e),i=1-t,a=nt(Li(X(zi(s,0,1,"float32",o),i)),i);return _(n,a)}var P1=N({dropout_:gU});var Pl={};Br(Pl,{conv2d:()=>L1,depthwiseConv2d:()=>z1,matMul:()=>M1});function xU(r,t,e,o,n,s="NHWC",i){let a=r;r.rank===3&&(a=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),$(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),$(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),$(e.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);let u=s==="NHWC"?a.shape[3]:a.shape[1],c=s==="NHWC"?l.shape[3]:l.shape[1];$(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),$(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),ie("conv2dDerFilter",n,i);let p={x:a,dy:l},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,filterShape:e};return T.runKernel(Au,p,m)}var vc=N({conv2DBackpropFilter_:xU});function Rl(r,t,e){if(e==null||e==="linear")return r;if(e==="relu")return _(r,Vn(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function Fl(r,t){let e=t,o=Jt(r.shape,t.shape);return o.length>0&&(e=at(e,o)),F(e,r.shape)}function _l(r,t,e,o){if(t==="linear")return r;if(t==="relu")return jr(r);if(t==="elu")return Pi(r);if(t==="relu6")return wd(r);if(t==="prelu")return $l(r,e);if(t==="leakyrelu")return kl(r,o);if(t==="sigmoid")return Mo(r);throw new Error(`Unknown fused activation ${t}.`)}var Ol=(r,t)=>!(r>0)||t==="linear";function yU({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",Ol(T.state.gradientDepth,l)===!1){$(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let k=Hr(r,t,e,o,n,s,i);return a!=null&&(k=X(k,a)),_l(k,l,u,c)}let p=v(r,"x","conv2d","float32"),m=v(t,"filter","conv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=F(p,[1,p.shape[0],p.shape[1],p.shape[2]])),$(f.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),$(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),ie("fused conv2d",o,i);let d=n==="NHWC"?f.shape[3]:f.shape[1];$(m.shape[2]===d,()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${m.shape[2]}.`),$(Qe(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let g=wl(f.shape,m.shape,e,s,o,i),x;a!=null&&(x=v(a,"bias","fused conv2d"),[x]=_t(x,p),n==="NHWC"?Et(g.outShape,x.shape):($(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),$(x.shape.length===0||x.shape[0]===g.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let k=u.shape;if($(k.length<=1||k.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${k.length}.`),k.length===1)$(k[0]===1||k[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${k}) is not compatible with the number of output channels (${g.outChannels}).`);else if(k.length===3)try{Et(k,g.outShape)}catch{let A=`Error in fused conv2d: PReLU activation weights (${k}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(A)}b=v(u,"prelu weights","fused conv2d")}let w=(k,E)=>{$(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[A,D,O,M]=E,B=Rl(k,O,l);$(Co(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let V=dc(D.shape,B,A,e,o),U=vc(D,B,A.shape,e,o),G=[V,U];if(M!=null){let W=Fl(M,B);G.push(W)}return G},C={x:f,filter:m,bias:x,preluActivationWeights:b},S={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?vo((E,A,D)=>{let O=T.runKernel(Ti,C,S);return D([A,E,O]),h&&(O=F(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:w}})(f,m):vo((E,A,D,O)=>{let M=T.runKernel(Ti,C,S);return O([A,E,M,D]),h&&(M=F(M,[M.shape[1],M.shape[2],M.shape[3]])),{value:M,gradFunc:w}})(f,m,x)}var L1=N({fusedConv2d_:yU});function bU(r,t,e,o,n,s=[1,1],i){let a=r;r.rank===3&&(a=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:a,dy:l},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,filterShape:e};return T.runKernel(Fu,u,c)}var Sd=N({depthwiseConv2dNativeBackpropFilter_:bU});function wU(r,t,e,o,n,s=[1,1],i){let a=t,l=!1;t.rank===3&&(l=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:a,filter:e},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,inputShape:r},p=T.runKernel(_u,u,c);return l?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var vd=N({depthwiseConv2dNativeBackpropInput_:wU});function CU({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(Ol(T.state.gradientDepth,l)===!1){let S=Oi(r,t,e,o,n,s,i);return a!=null&&(S=X(S,a)),_l(S,l,u,c)}let p=v(r,"x","depthwiseConv2d","float32"),m=v(t,"filter","depthwiseConv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=F(p,[1,p.shape[0],p.shape[1],p.shape[2]])),$(f.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),$(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),$(f.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),$(Qe(e,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),ie("fused depthwiseConv2d",o,i);let d=wl(f.shape,m.shape,e,s,o,i,!0),g;a!=null&&(g=v(a,"bias","fused conv2d"),[g]=_t(g,p),Et(d.outShape,g.shape));let x;u!=null&&(x=v(u,"prelu weights","fused depthwiseConv2d"));let b=(S,k)=>{$(Co(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[E,A,D,O]=k,M=Rl(S,D,l),B=vd(A.shape,M,E,e,o,s,i),V=Sd(A,M,E.shape,e,o,s,i);if(O!=null){let U=Fl(g,M);return[B,V,U]}return[B,V]},w={x:f,filter:m,bias:g,preluActivationWeights:x},C={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?vo((k,E,A)=>{let D=T.runKernel(Ni,w,C);return A([E,k,D]),h&&(D=F(D,[D.shape[1],D.shape[2],D.shape[3]])),{value:D,gradFunc:b}})(f,m):vo((k,E,A,D)=>{let O=T.runKernel(Ni,w,C);return D([E,k,O,A]),h&&(O=F(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:b}})(f,m,g)}var z1=N({fusedDepthwiseConv2d_:CU});function IU({a:r,b:t,transposeA:e=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(Ol(T.state.gradientDepth,s)===!1){let M=Gt(r,t,e,o);return n!=null&&(M=X(M,n)),_l(M,s,i,a)}let l=v(r,"a","fused matMul"),u=v(t,"b","fused matMul");[l,u]=_t(l,u);let c=e?l.shape[l.rank-2]:l.shape[l.rank-1],p=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=e?l.shape[l.rank-1]:l.shape[l.rank-2],f=o?u.shape[u.rank-2]:u.shape[u.rank-1],h=l.shape.slice(0,-2),d=u.shape.slice(0,-2),g=Kt(h),x=Kt(d);$(c===p,()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);let w=Et(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,f]),C=e?F(l,[g,c,m]):F(l,[g,m,c]),S=o?F(u,[x,f,p]):F(u,[x,p,f]),k;n!=null&&(k=v(n,"bias","fused matMul"),[k]=_t(k,l),Et(w,k.shape));let E;i!=null&&(E=v(i,"prelu weights","fused matMul"));let A=(M,B)=>{let[V,U,G,W]=B,j=Rl(F(M,G.shape),G,s),H,Z;if(!e&&!o?(H=Gt(j,U,!1,!0),Z=Gt(V,j,!0,!1)):!e&&o?(H=Gt(j,U,!1,!1),Z=Gt(j,V,!0,!1)):e&&!o?(H=Gt(U,j,!1,!0),Z=Gt(V,j,!1,!1)):(H=Gt(U,j,!0,!0),Z=Gt(j,V,!0,!0)),n!=null){let J=Fl(W,j);return[H,Z,J]}else return[H,Z]},D={a:C,b:S,bias:k,preluActivationWeights:E},O={transposeA:e,transposeB:o,activation:s,leakyreluAlpha:a};return n==null?vo((B,V,U)=>{let G=T.runKernel(ki,D,O);return U([B,V,G]),{value:F(G,w),gradFunc:A}})(C,S):vo((B,V,U,G)=>{let W=T.runKernel(ki,D,O);return G([B,V,W,U]),{value:F(W,w),gradFunc:A}})(C,S,k)}var M1=N({fusedMatMul_:IU});function SU(r,t,e,o,n="bilinear",s=0){let i=v(r,"image","cropAndResize"),a=v(t,"boxes","cropAndResize","float32"),l=v(e,"boxInd","cropAndResize","int32"),u=a.shape[0];$(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),$(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),$(l.rank===1&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),$(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),$(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),$(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:i,boxes:a,boxInd:l},p={method:n,extrapolationValue:s,cropSize:o};return T.runKernel(ma,c,p)}var B1=N({cropAndResize_:SU});function vU(r){let t=v(r,"image","flipLeftRight","float32");$(t.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let e={image:t};return T.runKernel(ga,e,{})}var V1=N({flipLeftRight_:vU});function kU(r){let t=v(r,"image","grayscaleToRGB"),e=t.rank-1,o=t.shape[e];$(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),$(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(t.rank);return n.fill(1,0,e),n[e]=3,ar(t,n)}var G1=N({grayscaleToRGB_:kU});function TU(r,t,e=0,o=.5){let n=v(r,"image","rotateWithOffset","float32");$(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},i={radians:t,fillValue:e,center:o};return T.runKernel(Aa,s,i)}var U1=N({rotateWithOffset_:TU});function Go(r,t,e,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let i=r.shape[0];return e=Math.min(e,i),$(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),$(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),$(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),$(t.rank===1,()=>"scores must be a 1D tensor"),$(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),$(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function NU(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppression","float32"),i=v(t,"scores","nonMaxSuppression","float32"),a=Go(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l={maxOutputSize:e,iouThreshold:o,scoreThreshold:n};return T.runKernel(wa,{boxes:s,scores:i},l)}var W1=N({nonMaxSuppression_:NU});function H1(r,t,e){let o=EU(r,t,e),n=o<0?-(o+1):o;r.splice(n,0,t)}function EU(r,t,e){return AU(r,t,e||$U)}function $U(r,t){return r>t?1:r<t?-1:0}function AU(r,t,e){let o=0,n=r.length,s=0,i=!1;for(;o<n;){s=o+(n-o>>>1);let a=e(t,r[s]);a>0?o=s+1:(n=s,i=!a)}return i?o:-o-1}function kd(r,t,e,o,n){return TC(r,t,e,o,n,0)}function Td(r,t,e,o,n,s){return TC(r,t,e,o,n,0,!1,s,!0)}function Nd(r,t,e,o,n,s){return TC(r,t,e,o,n,s,!0)}function TC(r,t,e,o,n,s,i=!1,a=!1,l=!1){let u=[];for(let g=0;g<t.length;g++)t[g]>n&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(K1);let c=s>0?-.5/s:0,p=[],m=[];for(;p.length<e&&u.length>0;){let g=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:w}=g;if(x<n)break;let C=!1;for(let S=p.length-1;S>=w;--S){let k=DU(r,b,p[S]);if(k>=o){C=!0;break}if(g.score=g.score*RU(o,c,k),g.score<=n)break}g.suppressBeginIndex=p.length,C||(g.score===x?(p.push(b),m.push(g.score)):g.score>n&&H1(u,g,K1))}let f=p.length,h=e-f;a&&h>0&&(p.push(...new Array(h).fill(0)),m.push(...new Array(h).fill(0)));let d={selectedIndices:p};return i&&(d.selectedScores=m),l&&(d.validOutputs=f),d}function DU(r,t,e){let o=r.subarray(t*4,t*4+4),n=r.subarray(e*4,e*4+4),s=Math.min(o[0],o[2]),i=Math.min(o[1],o[3]),a=Math.max(o[0],o[2]),l=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),p=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),f=(a-s)*(l-i),h=(p-u)*(m-c);if(f<=0||h<=0)return 0;let d=Math.max(s,u),g=Math.max(i,c),x=Math.min(a,p),b=Math.min(l,m),w=Math.max(x-d,0)*Math.max(b-g,0);return w/(f+h-w)}function RU(r,t,e){let o=Math.exp(t*e*e);return e<=r?o:0}function K1(r,t){return r.score-t.score||r.score===t.score&&t.boxIndex-r.boxIndex}async function FU(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppressionAsync"),i=v(t,"scores","nonMaxSuppressionAsync"),a=Go(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:p}=kd(u,c,e,o,n);return s!==r&&s.dispose(),i!==t&&i.dispose(),ze(p,"int32")}var q1=FU;function _U(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=v(r,"boxes","nonMaxSuppression"),a=v(t,"scores","nonMaxSuppression"),l=Go(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u={boxes:i,scores:a},c={maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},p=T.runKernel(Ca,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}var j1=N({nonMaxSuppressionWithScore_:_U});async function OU(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=v(r,"boxes","nonMaxSuppressionAsync"),a=v(t,"scores","nonMaxSuppressionAsync"),l=Go(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),a.data()]),c=u[0],p=u[1],{selectedIndices:m,selectedScores:f}=Nd(c,p,e,o,n,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:ze(m,"int32"),selectedScores:ze(f)}}var X1=OU;function PU(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=v(r,"boxes","nonMaxSuppression"),a=v(t,"scores","nonMaxSuppression"),l=Go(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,m={boxes:i,scores:a},f={maxOutputSize:u,iouThreshold:c,scoreThreshold:p,padToMaxOutputSize:s},h=T.runKernel(Uu,m,f);return{selectedIndices:h[0],validOutputs:h[1]}}var Y1=N({nonMaxSuppressionPadded_:PU});async function LU(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=v(r,"boxes","nonMaxSuppressionAsync"),a=v(t,"scores","nonMaxSuppressionAsync"),l=Go(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[m,f]=await Promise.all([i.data(),a.data()]),{selectedIndices:h,validOutputs:d}=Td(m,f,u,c,p,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:ze(h,"int32"),validOutputs:Ct(d,"int32")}}var Z1=LU;function zU(r,t,e=!1,o=!1){let n=v(r,"images","resizeBilinear");$(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),$(t.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),$(o===!1||e===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=T.runKernel(Es,a,l);return i?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var Ed=N({resizeBilinear_:zU});function MU(r,t,e=!1,o=!1){let n=v(r,"images","resizeNearestNeighbor");$(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),$(t.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),$(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),$(o===!1||e===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=T.runKernel(Ns,a,l);return i?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var $d=N({resizeNearestNeighbor_:MU});function BU(r,t="binary",e=!1,o=.5){let n=v(r,"image","threshold"),s=.2989,i=.587,a=.114,l=n.shape[0]*n.shape[1],u=_(ze([o]),255),c,p,m,f;if($(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),$(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),$(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),$(t==="otsu"||t==="binary",()=>`Method must be binary or otsu, but was ${t}`),n.shape[2]===3){[c,p,m]=He(n,[1,1,1],-1);let g=_(c,s),x=_(p,i),b=_(m,a);f=X(X(g,x),b)}else f=r;if(t==="otsu"){let g=t1(Y(xm(f),"int32"),zo([]),256);u=VU(g,l)}let h=e?Vo(f,u):_e(f,u);return Y(_(h,255),"int32")}function VU(r,t){let e=ze([-1]),o=ze([0]),n=ze([0]),s,i,a,l,u,c;for(let p=0;p<r.size-1;p++){s=Lt(r,0,p+1),i=Lt(r,p+1),u=nt(at(s),t),c=nt(at(i),t);let m=at(_(s,Cc(0,s.size)));a=nt(m,at(s));let f=Sl(i.shape,s.size),h=X(Cc(0,i.size),f),d=_(i,h);l=nt(at(d),at(i));let g=mt(a,l),x=mt(a,l),b=_(u,c);n=_(_(b,g),x);let w=_e(n,o);o=fe(w,n,o),e=fe(w,ze([p]),e)}return e}var Q1=N({threshold_:BU});function GU(r,t,e="nearest",o="constant",n=0,s){let i=v(r,"image","transform","float32"),a=v(t,"transforms","transform","float32");$(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),$(a.rank===2&&(a.shape[0]===i.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),$(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let l={image:i,transforms:a},u={interpolation:e,fillMode:o,fillValue:n,outputShape:s};return T.runKernel(Ea,l,u)}var J1=N({transform_:GU});function UU(r,t,e){$(t%1===0,()=>`bandPart(): numLower must be an integer, got ${t}.`),$(e%1===0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);let o=v(r,"a","bandPart");$(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,i]=o.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(e<=i))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),e<0&&(e=i);let a=F(Cc(0,s,1,"int32"),[-1,1]),l=Cc(0,i,1,"int32"),u=mt(a,l),c=fr(Vo(u,Ct(+t,"int32")),So(u,Ct(-e,"int32"))),p=te([s,i],o.dtype);return F(er(Or(F(o,[-1,s,i])).map(m=>fe(c,m,p))),n)}var tk=N({bandPart_:UU});function WU(r){let t;if(Array.isArray(r)){t=!1,$(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)$(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else t=!0,r=He(r,r.shape[0],0).map(n=>Bn(n,[0]));$(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let e=[],o=r;for(let n=0;n<r.length;++n)e.push(T.tidy(()=>{let s=o[n];if(n>0)for(let i=0;i<n;++i){let a=_(at(_(e[i],s)),e[i]);s=mt(s,a)}return nt(s,Pa(s,"euclidean"))}));return t?er(e,0):e}var ek=N({gramSchmidt_:WU});function HU(r,t=!1){if($(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return rk(r,t);{let e=r.shape.slice(0,r.shape.length-2).reduce((l,u)=>l*u),o=Or(F(r,[e,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(l=>{let[u,c]=rk(l,t);n.push(u),s.push(c)});let i=F(er(n,0),r.shape),a=F(er(s,0),r.shape);return[i,a]}}function rk(r,t=!1){return T.tidy(()=>{$(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let e=r.shape[0],o=r.shape[1],n=gc(e),s=Wr(r),i=Tm([[1]],[1,1]),a=Wr(i),l=e>=o?o:e;for(let u=0;u<l;++u){let c=s,p=a,m=n;[a,s,n]=T.tidy(()=>{let f=Lt(s,[u,u],[e-u,1]),h=Pa(f),d=Lt(s,[u,u],[1,1]),g=fe(_e(d,0),Tm([[-1]]),Tm([[1]])),x=mt(d,_(g,h)),b=nt(f,x);b.shape[0]===1?a=Wr(i):a=ue([i,Lt(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let w=Ut(nt(Gt(g,x),h)),C=Lt(s,[u,0],[e-u,o]),S=_(w,a),k=Rt(a);if(u===0)s=mt(C,Gt(S,Gt(k,C)));else{let D=mt(C,Gt(S,Gt(k,C)));s=ue([Lt(s,[0,0],[u,o]),D],0)}let E=Rt(S),A=Lt(n,[0,u],[e,n.shape[1]-u]);if(u===0)n=mt(A,Gt(Gt(A,a),E));else{let D=mt(A,Gt(Gt(A,a),E));n=ue([Lt(n,[0,0],[e,u]),D],1)}return[a,s,n]}),St([c,p,m])}return!t&&e>o&&(n=Lt(n,[0,0],[e,o]),s=Lt(s,[0,0],[o,o])),[n,s]})}var ok=N({qr_:HU});var kc={flipLeftRight:V1,grayscaleToRGB:G1,resizeNearestNeighbor:$d,resizeBilinear:Ed,rotateWithOffset:U1,cropAndResize:B1,nonMaxSuppression:W1,nonMaxSuppressionAsync:q1,nonMaxSuppressionWithScore:j1,nonMaxSuppressionWithScoreAsync:X1,nonMaxSuppressionPadded:Y1,nonMaxSuppressionPaddedAsync:Z1,threshold:Q1,transform:J1},nk={bandPart:tk,gramSchmidt:ek,qr:ok};var lr=class extends im{minimize(t,e=!1,o){let{value:n,grads:s}=this.computeGradients(t,o);if(o!=null){let i=o.map(a=>({name:a.name,tensor:s[a.name]}));this.applyGradients(i)}else this.applyGradients(s);return St(s),e?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return uC(t,e)}dispose(){this.iterations_!=null&&St(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:Ct(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}};Object.defineProperty(lr,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var Tc=class extends lr{constructor(t,e,o=null){super(),this.learningRate=t,this.rho=e,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=T.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o],i=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:z(()=>xt(s).variable(i))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:z(()=>xt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;z(()=>{let c=X(_(l,this.rho),_(Ft(a),1-this.rho)),p=_(nt(ce(X(u,this.epsilon)),ce(X(l,this.epsilon))),a),m=X(_(u,this.rho),_(Ft(p),1-this.rho));l.assign(c),u.assign(m);let f=X(_(p,-this.learningRate),s);s.assign(f)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(St(this.accumulatedGrads.map(t=>t.variable)),St(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){let t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=t.length/2,o=!1;this.accumulatedGrads=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}};Tc.className="Adadelta";_r(Tc);var Nc=class extends lr{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:z(()=>Sl(s.shape,this.initialAccumulatorValue).variable(!1))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let a=this.accumulatedGrads[n].variable;z(()=>{let l=X(a,Ft(i));a.assign(l);let u=X(_(nt(i,ce(X(l,T.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&St(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulatedGrads=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}};Nc.className="Adagrad";_r(Nc);var Ec=class extends lr{constructor(t,e,o,n=null){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],z(()=>{this.accBeta1=Ct(e).variable(),this.accBeta2=Ct(o).variable()}),n==null&&(this.epsilon=T.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);z(()=>{let o=mt(1,this.accBeta1),n=mt(1,this.accBeta2);e.forEach((s,i)=>{let a=T.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:z(()=>xt(a).variable(l))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${s}/v`,variable:z(()=>xt(a).variable(l))});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedSecondMoment[i].variable,m=X(_(c,this.beta1),_(u,1-this.beta1)),f=X(_(p,this.beta2),_(Ft(u),1-this.beta2)),h=nt(m,o),d=nt(f,n);c.assign(m),p.assign(f);let g=X(_(nt(h,X(ce(d),this.epsilon)),-this.learningRate),a);a.assign(g)}),this.accBeta1.assign(_(this.accBeta1,this.beta1)),this.accBeta2.assign(_(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&St(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedSecondMoment!=null&&St(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t),z(()=>{this.accBeta1.assign(Bo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Bo(this.beta2,this.iterations_+1))});let e=t.length/2,o=!1;this.accumulatedFirstMoment=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}};Ec.className="Adam";_r(Ec);var $c=class extends lr{constructor(t,e,o,n=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],z(()=>{this.iteration=Ct(0).variable(),this.accBeta1=Ct(e).variable()}),n==null&&(this.epsilon=T.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);z(()=>{let o=mt(1,this.accBeta1),n=nt(-this.learningRate,X(_(this.iteration,this.decay),1));e.forEach((s,i)=>{let a=T.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:xt(a).variable(l)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${s}/v`,variable:xt(a).variable(l)});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedWeightedInfNorm[i].variable,m=X(_(c,this.beta1),_(u,1-this.beta1)),f=_(p,this.beta2),h=Le(u),d=Kr(f,h);c.assign(m),p.assign(d);let g=X(_(nt(n,o),nt(m,X(d,this.epsilon))),a);a.assign(g)}),this.iteration.assign(X(this.iteration,1)),this.accBeta1.assign(_(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&St(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedWeightedInfNorm!=null&&St(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}};$c.className="Adamax";_r($c);var za=class extends lr{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=Array.isArray(t)?t[n].tensor:t[o];if(s==null)return;let i=T.registeredVariables[o];z(()=>{let a=X(_(this.c,s),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,this.c!=null&&this.c.dispose(),this.c=qe(Ct(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(t=await this.extractIterations(t),t.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}};za.className="SGD";_r(za);var Ac=class extends za{constructor(t,e,o=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=o,this.accumulations=[],this.m=Ct(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:z(()=>xt(s).variable(!1))});let i=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[o];a!=null&&z(()=>{let l,u=X(_(this.m,i),a);this.useNesterov?l=X(_(this.c,X(a,_(u,this.m))),s):l=X(_(this.c,u),s),i.assign(u),s.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&St(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulations=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}};Ac.className="Momentum";_r(Ac);var Dc=class extends lr{constructor(t,e=.9,o=0,n=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=T.backend.epsilon()),t==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o],i=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:z(()=>xt(s).variable(i))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:z(()=>xt(s).variable(i))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:z(()=>xt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;z(()=>{let c=X(_(l,this.decay),_(Ft(a),1-this.decay));if(this.centered){let p=this.accumulatedMeanGrads[n].variable,m=X(_(p,this.decay),_(a,1-this.decay)),f=nt(_(a,this.learningRate),ce(mt(c,X(Ft(m),this.epsilon)))),h=X(_(u,this.momentum),f);l.assign(c),p.assign(m),u.assign(h);let d=mt(s,h);s.assign(d)}else{let p=X(_(l,this.decay),_(Ft(a),1-this.decay)),m=X(_(u,this.momentum),nt(_(a,this.learningRate),ce(X(p,this.epsilon))));l.assign(p),u.assign(m);let f=mt(s,m);s.assign(f)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&St(this.accumulatedMeanSquares.map(t=>t.variable)),this.accumulatedMeanGrads!=null&&this.centered&&St(this.accumulatedMeanGrads.map(t=>t.variable)),this.accumulatedMoments!=null&&St(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=this.centered?t.length/3:t.length/2,o=!1;this.accumulatedMeanSquares=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=t.slice(e*2,e*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}};Dc.className="RMSProp";_r(Dc);var Ws=class{static sgd(t){return new za(t)}static momentum(t,e,o=!1){return new Ac(t,e,o)}static rmsprop(t,e=.9,o=0,n=null,s=!1){return new Dc(t,e,o,n,s)}static adam(t=.001,e=.9,o=.999,n=null){return new Ec(t,e,o,n)}static adadelta(t=.001,e=.95,o=null){return new Tc(t,e,o)}static adamax(t=.002,e=.9,o=.999,n=null,s=0){return new $c(t,e,o,n,s)}static adagrad(t,e=.1){return new Nc(t,e)}};var Ll={sgd:Ws.sgd,momentum:Ws.momentum,adadelta:Ws.adadelta,adagrad:Ws.adagrad,rmsprop:Ws.rmsprop,adamax:Ws.adamax,adam:Ws.adam};var KU=(()=>typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:r=>r())();function Em(){return new Promise(r=>KU(()=>r()))}var I={};Br(I,{ERF_A1:()=>aW,ERF_A2:()=>lW,ERF_A3:()=>uW,ERF_A4:()=>cW,ERF_A5:()=>pW,ERF_P:()=>iW,PARALLELIZE_THRESHOLD:()=>Ad,RowPartitionType:()=>Hs,SELU_SCALE:()=>EC,SELU_SCALEALPHA:()=>NC,applyActivation:()=>_l,assertAndGetBroadcastShape:()=>Et,assertAxesAreInnerMostDims:()=>AV,assertParamsConsistent:()=>qU,assignToTypedArray:()=>xW,axesAreInnerMostDims:()=>eC,calculateShapes:()=>pB,checkEinsumDimSizes:()=>SW,checkPadOnDimRoundingMode:()=>ie,combineLocations:()=>s1,combineRaggedTensorToTensorShapes:()=>XU,complexWithEvenIndex:()=>hW,complexWithOddIndex:()=>dW,computeConv2DInfo:()=>wl,computeConv3DInfo:()=>Zv,computeDefaultPad:()=>Gw,computeDilation2DInfo:()=>LB,computeOptimalWindowSize:()=>JU,computeOutAndReduceShapes:()=>rC,computeOutShape:()=>jU,computePool2DInfo:()=>Vw,computePool3DInfo:()=>zB,convertConv2DDataFormat:()=>Qv,decodeEinsumEquation:()=>CW,eitherStridesOrDilationsAreOne:()=>Qe,expandShapeToKeepDim:()=>Gs,exponent:()=>bW,exponents:()=>yW,fromStringArrayToUint8:()=>WW,fromUint8ToStringArray:()=>UW,getAxesPermutation:()=>oC,getBroadcastDims:()=>Pv,getComplexWithIndex:()=>gW,getEinsumComputePath:()=>vW,getEinsumPermutation:()=>IW,getFusedBiasGradient:()=>Fl,getFusedDyActivation:()=>Rl,getImageCenter:()=>tW,getInnerMostAxes:()=>DV,getPermuted:()=>rW,getRaggedRank:()=>ZU,getReductionAxes:()=>Jt,getReshaped:()=>eW,getReshapedPermuted:()=>oW,getRowPartitionTypesHelper:()=>YU,getSliceBeginCoords:()=>nW,getSliceSize:()=>sW,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>EW,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>$W,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>AW,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>FW,getSparseReshapeInputOutputMismatchErrorMessage:()=>OW,getSparseReshapeInputOutputMultipleErrorMessage:()=>_W,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>DW,getSparseReshapeNegativeOutputDimErrorMessage:()=>RW,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>MW,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>PW,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>LW,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>zW,getUndoAxesPermutation:()=>mm,isIdentityPermutation:()=>kW,log:()=>Jz,mergeRealAndImagArrays:()=>mW,prepareAndValidate:()=>uB,prepareSplitSize:()=>NW,segment_util:()=>AC,shouldFuse:()=>Ol,slice_util:()=>me,splitRealAndImagArrays:()=>fW,tupleValuesAreOne:()=>Co,upcastType:()=>Qt,validateDefaultValueShape:()=>QU,validateInput:()=>cB,validateUpdateShape:()=>Mv,warn:()=>Ps});function qU(r,t){let e=r[0].length;r.forEach((n,s)=>{$(n.length===e,()=>`Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`)}),$(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);let o=r[0];r.forEach((n,s)=>{for(let i=0;i<e;i++)$(i===t||n[i]===o[i],()=>`Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function jU(r,t){let e=r[0].slice();for(let o=1;o<r.length;o++)e[t]+=r[o][t];return e}var Hs;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(Hs||(Hs={}));function XU(r,t,e){let o=new Array;if(e==null&&t==null)return o;if(t==null)for(;o.length<r+e.length;)o.push(-1);else o=t.slice();if(e==null)return o;if(r+e.length!==o.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${r+e.length}, but shape.rank = ${o.length}`);for(let n=1;n<e.length;++n){let s=e[n],i=o[o.length-e.length+n],a=o[i];if(s>=0)if(a>=0){if(a!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${a}`)}else o[i]=s}return o}function YU(r){let t={FIRST_DIM_SIZE:Hs.FIRST_DIM_SIZE,VALUE_ROWIDS:Hs.VALUE_ROWIDS,ROW_LENGTHS:Hs.ROW_LENGTHS,ROW_SPLITS:Hs.ROW_SPLITS,ROW_LIMITS:Hs.ROW_LIMITS,ROW_STARTS:Hs.ROW_STARTS},e=[];for(let o of r)if(o in t)e.push(t[o]);else break;return e}function ZU(r){return r.length===0?0:r[0]===Hs.FIRST_DIM_SIZE?r.length-1:r.length}function QU(r,t){if(r==null||t==null)return;let e=r.length,o=t.length;if(e>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(e,o-1);++n){let s=r[n],i=t[n+1];if(s>=0&&i>=0&&s!==1&&s!==i)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${i}`)}}var Ad=30;function JU(r){return r<=Ad?r:Su(r,Math.floor(Math.sqrt(r)))}function tW(r,t,e){let o=e*(typeof r=="number"?r:r[0]),n=t*(typeof r=="number"?r:r[1]);return[o,n]}function eW(r,t,e,o=!0){let n=[];if(o)n=n.concat(t.slice(0)),n.push(r[0]/e),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=t.length;for(let i=0;i<s;++i)n=n.concat([r[i+1]/t[i],t[i]]);n=n.concat(r.slice(s+1))}return n}function rW(r,t,e=!0){let o=[];if(e){o.push(t);for(let n=t+1;n<r;++n)n<=2*t?(o.push(n),o.push(n-(t+1))):o.push(n)}else{let n=[],s=[];for(let i=1;i<r;++i)i>=t*2+1||i%2===1?s.push(i):n.push(i);o.push(...n),o.push(0),o.push(...s)}return o}function oW(r,t,e,o=!0){let n=[];o?n.push(r[0]/e):n.push(r[0]*e);for(let s=1;s<r.length;++s)s<=t.length?o?n.push(t[s-1]*r[s]):n.push(r[s]/t[s-1]):n.push(r[s]);return n}function nW(r,t){let e=[0];for(let o=0;o<t;++o)e.push(r[o][0]);return e}function sW(r,t,e){let o=r.slice(0,1);for(let n=0;n<e;++n)o.push(r[n+1]-t[n][0]-t[n][1]);return o}var NC=1.7580993408473768,EC=1.0507009873554805;var iW=.3275911,aW=.254829592,lW=-.284496736,uW=1.421413741,cW=-1.453152027,pW=1.061405429;function mW(r,t){if(r.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t.length}.`);let e=new Float32Array(r.length*2);for(let o=0;o<e.length;o+=2)e[o]=r[o/2],e[o+1]=t[o/2];return e}function fW(r){let t=new Float32Array(r.length/2),e=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)t[o/2]=r[o],e[o/2]=r[o+1];return{real:t,imag:e}}function hW(r){let t=Math.ceil(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=0;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function dW(r){let t=Math.floor(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=2;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function gW(r,t){let e=r[t*2],o=r[t*2+1];return{real:e,imag:o}}function xW(r,t,e,o){r[o*2]=t,r[o*2+1]=e}function yW(r,t){let e=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(t?2:-2)*Math.PI*(n/r);e[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:e,imag:o}}function bW(r,t,e){let o=(e?2:-2)*Math.PI*(r/t),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var $C="->",wW=/->/g,sk=",",ik="...";function CW(r,t){r=r.replace(/\s/g,"");let e=(r.length-r.replace(wW,"").length)/$C.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${$C}").`);let[o,n]=r.split($C);$(o.indexOf(ik)===-1,()=>`The ellipsis notation ("${ik}") is not supported yet.`);let s=o.split(sk),i=s.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let a=[];for(let m=0;m<n.length;++m){let f=n[m];if(!s.some(h=>h.indexOf(f)!==-1))throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);a.indexOf(f)===-1&&a.push(f)}for(let m=0;m<o.length;++m){let f=o[m];a.indexOf(f)===-1&&f!==sk&&a.push(f)}let l=new Array(s.length);for(let m=0;m<i;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);l[m]=[];for(let f=0;f<s[m].length;++f)l[m].push(a.indexOf(s[m][f]))}let u=a.length,c=n.length,p=[];for(let m=c;m<u;++m)p.push(m);return{allDims:a,summedDims:p,idDims:l}}function IW(r,t){let e=new Array(r);e.fill(-1);for(let n=0;n<t.length;++n)e[t[n]]=n;let o=[];for(let n=0;n<r;++n)e[n]===-1&&o.push(n);return e=e.filter(n=>n!==-1),{permutationIndices:e,expandDims:o}}function SW(r,t,e){let o=new Array(r);for(let n=0;n<e.length;++n){let s=e[n].shape;for(let i=0;i<t[n].length;++i)o[t[n][i]]===void 0?o[t[n][i]]=s[i]:$(o[t[n][i]]===s[i],()=>`Expected dimension ${o[t[n][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`)}}function vW(r,t){let e=r,o=[],n=0;r.length===0&&e.push(-1),n=r.length+1;for(let i=0;i<n;++i)o.push([]);let s=[];for(let i=0;i<e.length;++i){let a=e[i],l=TW(t,a);for(let u of l)s.indexOf(u)===-1&&(o[i].push(u),s.push(u))}return{path:e,steps:o}}function kW(r){return r.every((t,e)=>t===e)}function TW(r,t){let e=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(t)!==-1||t===-1)&&e.push(o);return e}function NW(r,t,e=0){let o=[];if(typeof t=="number")$(r.shape[e]%t===0,()=>"Number of splits must evenly divide the axis."),o=new Array(t).fill(r.shape[e]/t);else{let n=t.reduce((i,a)=>(a===-1&&(i+=1),i),0);$(n<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(s!==-1){let i=t.reduce((a,l)=>l>0?a+l:a);t[s]=r.shape[e]-i}$(r.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),o=t}return o}function EW(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function $W(r,t){return`indices(${r}, 0) is invalid: ${t} < 0`}function AW(r,t,e){return`indices(${r}, 0) is invalid: ${t} >= ${e}`}function DW(r,t){return`only one output dimension may be -1, not both ${r} and ${t}`}function RW(r,t){return`size ${r} must be non-negative, not ${t}`}function FW(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function _W(r,t){let e=Kt(r),o=Kt(t);return`Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t}`}function OW(r,t){let e=Kt(r),o=Kt(t);return`Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t}`}function PW(){return"segment ids must be >= 0"}function LW(){return"segment ids are not increasing"}function zW(r,t){return`Segment id ${r} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function MW(r,t,e){return`Bad: indices[${r}] == ${t} out of range [0, ${e})`}var AC={};Br(AC,{collectGatherOpShapeInfo:()=>GW,computeOutShape:()=>VW,segOpComputeOptimalWindowSize:()=>BW});function BW(r,t){let e=!1,o;for(r<=Ad?(o=r,e=!0):o=Su(r,Math.floor(Math.sqrt(r)));!e;)o>t||o===r?e=!0:o=Su(r,o+1);return o}function VW(r,t,e){let o=[],n=r.length;for(let s=0;s<n;s++)s!==t?o.push(r[s]):o.push(e);return o}function GW(r,t,e,o){let n=t.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(e<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);for(let p=0;p<o;++p)if(r.shape[p]!==t.shape[p])throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${t.shape[p]}.`);let i=r.shape[e],a=[],l=1,u=1,c=1;for(let p=0;p<o;++p)a.push(r.shape[p]),l*=r.shape[p];for(let p=o;p<e;p++)a.push(r.shape[p]),u*=r.shape[p];for(let p=o;p<n;p++)a.push(t.shape[p]);for(let p=e+1;p<s;p++)a.push(r.shape[p]),c*=r.shape[p];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function UW(r){try{return r.map(t=>ec(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function WW(r){return r.map(t=>tc(t))}var Ue={};Br(Ue,{nonMaxSuppressionV3Impl:()=>kd,nonMaxSuppressionV4Impl:()=>Td,nonMaxSuppressionV5Impl:()=>Nd,whereImpl:()=>_1});var Dd={kernelName:fn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,Vn(Y(e,"float32"),-1))}}};var ak={kernelName:ni,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=Ft(Y(e,"float32")),n=ce(mt(Ct(1),o));return Ut(nt(r,n))}}}};var lk={kernelName:si,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=ce(mt(Ft(Y(e,"float32")),1));return nt(r,o)}}}};var uk={kernelName:Rr,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=r,l=Jt(e.shape,n);return l.length>0&&(a=at(a,l)),F(a,e.shape)},b:()=>{let a=r,l=Jt(o.shape,n);return l.length>0&&(a=at(a,l)),F(a,o.shape)}}}};var ck={kernelName:aa,saveAllInputs:!0,gradFunc:(r,t)=>{let e={};return t.forEach((o,n)=>{e[n]=()=>r.clone()}),e}};var pk={kernelName:os,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>xt(e)}}};var mk={kernelName:ns,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>xt(e)}}};var fk={kernelName:ii,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,ce(mt(Ct(1),Ft(Y(e,"float32")))))}}};var hk={kernelName:ai,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=ce(X(Ct(1),Ft(Y(e,"float32"))));return nt(r,o)}}}};var dk={kernelName:hn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=X(Ft(e),Ft(o)),l=_(r,nt(o,a)),u=Jt(e.shape,n);return u.length>0&&(l=at(l,u)),F(l,e.shape)},b:()=>{let a=X(Ft(e),Ft(o)),l=Ut(_(r,nt(e,a))),u=Jt(o.shape,n);return u.length>0&&(l=at(l,u)),F(l,o.shape)}}}};var gk={kernelName:li,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,X(Ft(Y(e,"float32")),1))}}};var xk={kernelName:ui,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,mt(Ct(1),Ft(Y(e,"float32"))))}}};function HW(r,t,e,o,n,s){let i=v(r,"dy","avgPool3dGrad"),a=v(t,"input","avgPool3dGrad"),l=i,u=a,c=!1;a.rank===4&&(c=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),$(u.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),ie("avgPool3dGrad",n,s);let p={dy:l,input:u},m={filterSize:e,strides:o,pad:n,dimRoundingMode:s},f=T.runKernel(Eu,p,m);return c?F(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}var yk=N({avgPool3dGrad_:HW});var bk={kernelName:la,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i,dimRoundingMode:a}=e;return{x:()=>yk(r,o,n,s,i,a)}}};function KW(r,t,e,o,n){let s=v(r,"dy","avgPoolGrad"),i=v(t,"input","avgPoolGrad");$(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let a=i,l=s,u=!1;i.rank===3&&(u=!0,a=F(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=F(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),$(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);let c={dy:l,input:a},p={filterSize:e,strides:o,pad:n},m=T.runKernel(Nu,c,p);return u?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var wk=N({avgPoolGrad_:KW});var Ck={kernelName:ss,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i}=e;return{x:()=>wk(r,o,n,s,i)}}};var Ik={kernelName:is,inputsToSave:["a","b"],gradFunc:(r,t,e)=>{let[o,n]=t,{transposeA:s,transposeB:i}=e;return!s&&!i?{a:()=>Gt(r,n,!1,!0),b:()=>Gt(o,r,!0,!1)}:!s&&i?{a:()=>Gt(r,n,!1,!1),b:()=>Gt(r,o,!0,!1)}:s&&!i?{a:()=>Gt(n,r,!1,!0),b:()=>Gt(o,r,!1,!1)}:{a:()=>Gt(n,r,!0,!0),b:()=>Gt(r,o,!0,!0)}}};var Sk={kernelName:as,gradFunc:(r,t,e)=>{let{blockShape:o,crops:n}=e;return{x:()=>bc(r,o,n)}}};var vk={kernelName:NS,gradFunc:(r,t,e)=>{let o=e,n=o.inputShape,s=o.shape,i=Array.from(s);for(let l=n.length-1;l>=0;l--)if(n[l]===s[l])i[l]=1;else if(n[l]!==1)throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${s}].`);let a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>at(r,a,!0)}}};var kk={kernelName:ro,gradFunc:r=>({x:()=>r.clone()})};var Tk={kernelName:oo,gradFunc:r=>({x:()=>xt(r)})};var Nk={kernelName:dn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{clipValueMin:n,clipValueMax:s}=e;return{x:()=>fe(fr(So(o,n),Vo(o,s)),r,xt(r))}}};var Ek={kernelName:ua,inputsToSave:["x"],gradFunc:Dd.gradFunc};var $k={kernelName:ls,saveAllInputs:!0,gradFunc:(r,t,e)=>{let o=t.map(l=>l.shape),{axis:n}=e,s=Ge(n,t[0].shape)[0],i=o.map(l=>l[s]);return He(r,i,s).map(l=>()=>l)}};var Ak={kernelName:us,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{dilations:s,strides:i,pad:a,dataFormat:l}=e;return $(Co(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>dc(o.shape,r,n,i,a,l),filter:()=>vc(o,r,n.shape,i,a,l)}}};var Dk={kernelName:cs,inputsToSave:["dy","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{strides:s,pad:i,dataFormat:a,dimRoundingMode:l}=e;return{dy:()=>Hr(r,n,s,i,a,1,l),filter:()=>vc(r,o,n.shape,s,i,a,l)}}};function qW(r,t,e,o,n){let s=r;r.rank===4&&(s=F(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let i=t;i.rank===4&&(i=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),$(s.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),$(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),$(e.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),$(s.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${e[3]}.`),$(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);let a={x:s,dy:i},l={strides:o,pad:n,filterShape:e};return T.runKernel(Du,a,l)}var Rk=N({conv3DBackpropFilter_:qW});var Fk={kernelName:ca,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s}=e;$(Co(o),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);let[i,a]=t;return{x:()=>fd(i.shape,r,a,n,s),filter:()=>Rk(i,r,a.shape,n,s)}}};var _k={kernelName:gn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(Ut(Cm(Y(e,"float32"))),r)}}};var Ok={kernelName:xn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(Im(Y(e,"float32")),r)}}};var Pk={kernelName:ps,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n,exclusive:s,reverse:i}=e;return{x:()=>{let a=oC([n],o.rank),l=hd(r,n,s,!i);return a!=null&&(l=Rt(l,a)),l}}}};var Lk={kernelName:ms,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s,dimRoundingMode:i}=e,a=o??[1,1];$(Co(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);let[l,u]=t;return $(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),$(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),$(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),$(Qe(n,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${a}'.`),ie("depthwiseConv2d",s,i),{x:()=>vd(l.shape,r,u,n,s,a,i),filter:()=>Sd(l,r,u.shape,n,s,a,i)}}};var zk={kernelName:ha,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,s={x:o,filter:n,dy:r},i={x:o,filter:n,dy:r};return{x:()=>T.runKernel(jp,s,e),filter:()=>T.runKernel(Xp,i,e)}}};var Mk={kernelName:bn,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t,o={dy:r,y:e};return{x:()=>T.runKernel(Pu,o)}}};var Bk={kernelName:pi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=_(ir(Ut(Ft(e))),2/Math.sqrt(Math.PI));return{x:()=>_(r,o)}}};var Vk={kernelName:no,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,e)}}};var Gk={kernelName:fs,inputsToSave:["input"],gradFunc:(r,t)=>{let[e]=t;return{input:()=>F(r,e.shape)}}};var Uk={kernelName:so,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,ir(e))}}};var Wk={kernelName:io,gradFunc:r=>({x:()=>xt(r)})};var Hk={kernelName:Cn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=nt(r,Y(o,"float32")),l=Jt(e.shape,n);return l.length>0?F(at(a,l),e.shape):a},b:()=>{let a=_(r,Y(e,"float32")),l=Jt(o.shape,n);l.length>0&&(a=F(at(a,l),o.shape));let u=Ft(o);return Ut(nt(a,Y(u,"float32")))}}}};var Kk={kernelName:hs,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,t,e)=>{let{varianceEpsilon:o}=e,[n,s,i,a]=t,l=a??Ct(1),u=Jt(s.shape,n.shape),c=[];if(s.rank===1){for(let C=0;C<n.shape.length-1;++C)c.push(n.shape[C]);c.push(1)}let p=mt(n,s),m=_(r,l),f=ym(X(i,Ct(o))),h=_(_(_(f,f),f),Ct(-.5));return{x:()=>s.rank===1?F(_(_(r,ar(F(f,[1,1,1,s.shape[0]]),c)),l),n.shape):F(_(_(r,f),l),n.shape),mean:()=>{let C=_(_(f,Ct(-1)),m);return s.rank===1&&(C=at(C,u)),F(C,s.shape)},variance:()=>{let C=_(_(h,p),m);return s.rank===1&&(C=at(C,u)),F(C,s.shape)},scale:()=>{let C=_(p,f),S=_(r,C);return s.rank===1&&(S=at(S,u)),F(S,s.shape)},offset:()=>{let C=r;return s.rank===1&&(C=at(C,u)),F(C,s.shape)}}}};var Xk={kernelName:ds,inputsToSave:["x","indices"],gradFunc:(r,t,e)=>{let[o,n]=t,{axis:s}=e,i=Ge(s,o.shape)[0];return{x:()=>{let l=o.shape,u=n.size,c=l.slice(0,i),p=c.length,m=l.slice(s,l.length).slice(1),f=m.length,h=qk(0,p),d=qk(p+1,p+1+f),g=jk([c,[u],m]),x=F(r,g),b=F(n,[u]),w=jk([[p],h,d]),C=Rt(x,w),S=Id(C,b,o.shape[i]),k=mm(w);return S=Rt(S,k),S},indices:()=>n}}};function qk(r,t){let e=[];for(let o=r;o<t;++o)e.push(o);return e}function jk(r){let t=[];for(let e=0;e<r.length;++e)for(let o=0;o<r[e].length;++o)t.push(r[e][o]);return t}var Yk={kernelName:ao,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>xt(e),b:()=>xt(o)}}};var Zk={kernelName:lo,gradFunc:r=>({x:()=>Y(r,"float32")})};var Qk={kernelName:mi,gradFunc:r=>({x:()=>xt(r)})};var Jk={kernelName:fi,gradFunc:r=>({x:()=>xt(r)})};var tT={kernelName:Sn,gradFunc:r=>({x:()=>xt(r)})};var eT={kernelName:gs,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{alpha:n}=e,s=_e(o,0);return{x:()=>fe(s,r,_(r,n))}}};var rT={kernelName:hi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,X(e,1))}}};var oT={kernelName:uo,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,Y(e,"float32"))}}};var nT={kernelName:ES,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e;return{logits:()=>{let i=ir(o);return mt(r,_(at(r,n,!0),i))}}}};function jW(r,t,e,o=5,n=1,s=1,i=.5){let a={x:r,y:t,dy:e},l={depthRadius:o,bias:n,alpha:s,beta:i};return T.runKernel(Bu,a,l)}var sT=N({localResponseNormalizationBackprop_:jW});var iT={kernelName:ya,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{depthRadius:s,bias:i,alpha:a,beta:l}=e;return{x:()=>sT(o,n,r,s,i,a,l)}}};function Rd(r,t,e,o){return t.rank<e.rank&&(t=F(t,Gs(t.shape,o))),r.rank<e.rank&&(r=F(r,Gs(r.shape,o))),{x:()=>_(r,Y(Cr(e,t),r.dtype))}}var DC={kernelName:xs,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{reductionIndices:n}=o,s=t[0],i=t[1],a=Ge(n,s.shape),l=Rd(r,i,s,a);return{x:()=>l.x()}}};var aT={kernelName:co,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>_(r,Y(So(e,o),"float32")),b:()=>_(r,Y(dd(e,o),"float32"))}}};function XW(r,t,e,o,n,s,i){let a=v(r,"dy","maxPool3dGrad"),l=v(t,"input","maxPool3dGrad"),u=v(e,"output","maxPool3dGrad"),c=a,p=l,m=u,f=!1;l.rank===4&&(f=!0,c=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),p=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),$(c.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),$(p.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),$(m.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`),ie("maxPool3dGrad",s,i);let h={dy:c,input:p,output:m},d={filterSize:o,strides:n,pad:s,dimRoundingMode:i},g=T.runKernel(Gu,h,d);return f?F(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}var lT=N({maxPool3dGrad_:XW});var uT={kernelName:ba,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=e;return{x:()=>lT(r,o,n,s,i,a,l)}}};function YW(r,t,e,o,n,s,i){let a=v(r,"dy","maxPoolGrad"),l=v(t,"input","maxPoolGrad"),u=v(e,"output","maxPoolGrad");$(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),$(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),$(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),ie("maxPoolGrad",s,i);let c={dy:a,input:l,output:u},p={filterSize:o,strides:n,pad:s,dimRoundingMode:i};return T.runKernel(Vu,c,p)}var cT=N({maxPoolGrad_:YW});var pT={kernelName:ys,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a}=e;return{x:()=>cT(r,o,n,s,i,a)}}};var mT={kernelName:bs,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=Ge(n,o.shape),a=rC(o.shape,s)[1],l=Kt(a);return{x:()=>{let c=o.shape.slice();s.forEach(f=>{c[f]=1});let p=F(r,c);return nt(_(p,qr(o.shape,"float32")),l)}}}};var fT={kernelName:ws,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{axis:n}=o,[s,i]=t,a=Ge(n,s.shape),l=Rd(r,i,s,a);return{x:()=>l.x()}}};var hT={kernelName:po,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>_(r,Y(Vo(e,o),"float32")),b:()=>_(r,Y(_e(e,o),"float32"))}}};var dT={kernelName:Cs,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Lt(r,s,o.shape)}}};var gT={kernelName:xi,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=Jt(e.shape,n);return a.length>0?F(at(r,a),e.shape):r},b:()=>{let a=_(r,Ut(Li(nt(e,o)))),l=Jt(o.shape,n);return l.length>0?F(at(a,l),o.shape):a}}}};var xT={kernelName:mo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=_(r,Y(o,"float32")),l=Jt(e.shape,n);return l.length>0?F(at(a,l),e.shape):a},b:()=>{let a=_(r,Y(e,"float32")),l=Jt(o.shape,n);return l.length>0?F(at(a,l),o.shape):a}}}};var yT={kernelName:Tn,gradFunc:r=>({x:()=>Ut(r)})};var bT={kernelName:Ia,inputsToSave:["indices"],gradFunc:(r,t)=>{let e=t[0];return{indices:()=>te(e.shape,"float32")}}};var wT={kernelName:Is,gradFunc:r=>({x:()=>xt(r)})};var CT={kernelName:Ss,saveAllInputs:!0,gradFunc:(r,t,e)=>{let{axis:o}=e;return Or(r,o).map(s=>()=>s)}};var RC={kernelName:vs,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Lt(r,s,o.shape)}}};var IT={kernelName:En,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,t)=>{let[e,o,n]=t,s=e,i=o,a=Et(s.shape,i.shape);return{a:()=>{let c=Y(i,"float32"),p=_(r,_(c,Bo(s,mt(c,Ct(1))))),m=Jt(s.shape,a);return m.length>0&&(p=at(p,m)),F(p,s.shape)},b:()=>{let c=_e(s,0),p=fe(c,Ir(s),xt(s)),m=_(r,_(n,p)),f=Jt(i.shape,a);return f.length>0&&(m=at(m,f)),F(m,i.shape)}}}};var ST={kernelName:ks,inputsToSave:["x","alpha"],gradFunc:(r,t)=>{let[e,o]=t,n=_e(e,0);return{x:()=>fe(n,r,_(r,o)),alpha:()=>{let s=fe(n,xt(r),_(r,e)),i=Jt(o.shape,r.shape);return i.length>0&&(s=at(s,i)),F(s,o.shape)}}}};function ZW(r,t,e){let o=r.shape.slice();o[e]=1;let n=F(t,o),s=pm(r,e,!0,!1),i=pm(r,e,!0,!0),a=_(s,i);return _(n,a)}function QW(r,t,e){let o=r.shape.length,n=o-e.length,s=I.getAxesPermutation(e,o),i=r;s!=null&&(i=Rt(r,s));let a=i.shape.slice(),u=a.splice(o-e.length,e.length).reduce((m,f)=>m*f,1);a.push(u);let c=i.reshape(a),p=ZW(c,t,n);if(p=p.reshape(i.shape),s!=null){let m=I.getUndoAxesPermutation(s);p=Rt(p,m)}return p}var vT={kernelName:$n,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=[];return n==null?s=o.shape.map((i,a)=>a):typeof n=="number"?s=[n]:s=n,{x:()=>QW(o,r,s)}}};var kT={kernelName:yn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=nt(r,Y(o,"float32")),l=Jt(e.shape,n);return l.length>0?F(at(a,l),e.shape):a},b:()=>{let a=_(r,Y(e,"float32")),l=Jt(o.shape,n);l.length>0&&(a=F(at(a,l),o.shape));let u=Ft(o);return Ut(nt(a,Y(u,"float32")))}}}};var TT={kernelName:An,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,Ut(Ft(e)))}}};var NT={kernelName:Rn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=_(Vo(e,6),Vn(e));return{x:()=>_(r,Y(o,"float32"))}}};var ET={kernelName:Dn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,Y(Vn(e),"float32"))}}};var $T={kernelName:Ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,e.shape)}}};var AT={kernelName:Es,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>T.runKernel(Hu,n,e)}}};var DT={kernelName:Ns,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>T.runKernel(Wu,n,e)}}};var RT={kernelName:va,gradFunc:(r,t,e)=>{let{dims:o}=e,n=Ge(o,r.shape);return{x:()=>ko(r,n)}}};var FT={kernelName:bi,gradFunc:r=>({x:()=>xt(r)})};var _T={kernelName:fo,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>Ut(nt(r,_(Bo(e,1.5),2)))}}};var OT={kernelName:$s,inputsToSave:["condition"],gradFunc:(r,t)=>{let[e]=t;return{condition:()=>Y(xt(e),"float32"),t:()=>_(r,Y(e,r.dtype)),e:()=>_(r,Y(xc(e),r.dtype))}}};var PT={kernelName:wi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=_e(e,Ct(0)),n=Ct(NC),s=Ct(EC),i=_(r,s),a=_(_(r,n),ir(Y(e,"float32")));return fe(o,i,a)}}}};var LT={kernelName:ho,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,_(e,mt(Ct(1),e)))}}};var zT={kernelName:Ci,gradFunc:r=>({x:()=>xt(r)})};var MT={kernelName:_n,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(Il(Y(e,"float32")),r)}}};var BT={kernelName:On,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(cm(Y(e,"float32")),r)}}};var VT={kernelName:Fn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{begin:n,size:s}=e,i=o.shape,[a,l]=Fw(o,n,s),u=[];for(let c=0;c<r.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>El(r,u)}}};var GT={kernelName:Fs,outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{dim:n}=e,s=!0,i=_(r,o);return{logits:()=>mt(i,_(at(i,[n],s),o))}}};var UT={kernelName:Ii,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,Mo(e))}}};var FC={kernelName:Ds,gradFunc:(r,t,e)=>{let{blockShape:o,paddings:n}=e;return{x:()=>hc(r,o,n)}}};var _C={kernelName:Rs,gradFunc:(r,t,e)=>{let{axis:o}=e;return{x:()=>ue(r,o)}}};var WT={kernelName:go,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,_(ce(Y(e,"float32")),2))}}};var HT={kernelName:ka,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(r,_(Y(e,"float32"),2))}}};var KT={kernelName:xo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Ct(2);return{a:()=>_(r,_(n,mt(e,o))),b:()=>_(r,_(n,mt(o,e)))}}};var qT={kernelName:vi,gradFunc:r=>({x:()=>xt(r)})};var jT={kernelName:yo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Et(e.shape,o.shape);return{a:()=>{let a=r,l=Jt(e.shape,n);return l.length>0&&(a=at(a,l)),F(a,e.shape)},b:()=>{let a=r,l=Jt(o.shape,n);return l.length>0&&(a=at(a,l)),F(Ut(a),o.shape)}}}};var XT={kernelName:As,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,n=o.shape.slice(),{axis:s}=e;Ge(s,o.shape).forEach(u=>{n[u]=1});let a=F(r,n),l=_(a,qr(o.shape,"float32"));return{x:()=>l}}};var YT={kernelName:Si,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,Ft(Il(e)))}}};var ZT={kernelName:Pn,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>_(mt(Ct(1),Ft(e)),r)}}};var QT={kernelName:Ro,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{reps:n}=e;return{x:()=>{let i=xt(o);if(o.rank===1)for(let a=0;a<n[0];++a)i=X(i,Lt(r,[a*o.shape[0]],[o.shape[0]]));else if(o.rank===2)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)i=X(i,Lt(r,[a*o.shape[0],l*o.shape[1]],[o.shape[0],o.shape[1]]));else if(o.rank===3)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)i=X(i,Lt(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2]],[o.shape[0],o.shape[1],o.shape[2]]));else if(o.rank===4)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)for(let c=0;c<n[3];++c)i=X(i,Lt(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2],c*o.shape[3]],[o.shape[0],o.shape[1],o.shape[2],o.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${o.rank} tensors yet.`);return i}}}};var JT={kernelName:Fo,gradFunc:(r,t,e)=>{let o=e,{perm:n}=o,s=mm(n);return{x:()=>Rt(r,s)}}};var tN={kernelName:_s,gradFunc:(r,t,e)=>{let o=e,{axis:n}=o;return{value:()=>er(r,n)}}};var eN={kernelName:$a,inputsToSave:["segmentIds"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>JW(r,e)}}};function JW(r,t){let e=Kr(t,xt(t)),o=vl(r,e),n=So(t,Ct(0,"int32")),s=o.rank-n.rank;for(let a=0;a<s;++a)n=tr(n,a+1);n=fr(n,qr(o.shape,"bool"));let i=xt(o);return fe(n,o,i)}var rN={kernelName:Os,gradFunc:r=>({x:()=>xt(r)})};var t4=[Dd,ak,lk,uk,ck,pk,mk,fk,hk,dk,gk,xk,bk,Ck,Ik,Sk,vk,kk,Tk,Nk,Ek,$k,Dk,Ak,Fk,_k,Ok,Pk,Lk,zk,kT,Mk,Bk,Vk,Gk,Uk,Hk,Wk,Kk,Xk,Yk,Zk,Qk,Jk,tT,eT,rT,oT,nT,iT,DC,DC,aT,uT,pT,mT,fT,hT,dT,gT,xT,yT,bT,wT,CT,RC,RC,IT,ST,vT,TT,NT,ET,$T,AT,DT,RT,FT,_T,OT,PT,LT,zT,MT,BT,VT,GT,UT,FC,FC,_C,_C,WT,KT,HT,qT,jT,XT,YT,ZT,QT,JT,tN,eN,rN];for(let r of t4)AS(r);R().prototype.abs=function(){return this.throwIfDisposed(),Le(this)};R().prototype.acos=function(){return this.throwIfDisposed(),_w(this)};R().prototype.acosh=function(){return this.throwIfDisposed(),Ow(this)};R().prototype.add=function(r){return this.throwIfDisposed(),X(this,r)};R().prototype.all=function(r,t){return this.throwIfDisposed(),am(this,r,t)};R().prototype.any=function(r,t){return this.throwIfDisposed(),pc(this,r,t)};R().prototype.argMax=function(r){return this.throwIfDisposed(),_i(this,r)};R().prototype.argMin=function(r){return this.throwIfDisposed(),Xv(this,r)};R().prototype.asScalar=function(){return this.throwIfDisposed(),$(this.size===1,()=>"The array must have only 1 element."),F(this,[])};R().prototype.asType=function(r){return this.throwIfDisposed(),Y(this,r)};R().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])};R().prototype.as2D=function(r,t){return this.throwIfDisposed(),F(this,[r,t])};R().prototype.as3D=function(r,t,e){return this.throwIfDisposed(),F(this,[r,t,e])};R().prototype.as4D=function(r,t,e,o){return this.throwIfDisposed(),F(this,[r,t,e,o])};R().prototype.as5D=function(r,t,e,o,n){return this.throwIfDisposed(),F(this,[r,t,e,o,n])};R().prototype.asin=function(){return this.throwIfDisposed(),Pw(this)};R().prototype.asinh=function(){return this.throwIfDisposed(),Lw(this)};R().prototype.atan=function(){return this.throwIfDisposed(),zw(this)};R().prototype.atan2=function(r){return this.throwIfDisposed(),Yv(this,r)};R().prototype.atanh=function(){return this.throwIfDisposed(),Mw(this)};R().prototype.avgPool=function(r,t,e,o){return this.throwIfDisposed(),Cl(this,r,t,e,o)};R().prototype.batchToSpaceND=function(r,t){return this.throwIfDisposed(),hc(this,r,t)};R().prototype.batchNorm=function(r,t,e,o,n){return this.throwIfDisposed(),Oa(this,r,t,e,o,n)};R().prototype.broadcastTo=function(r){return this.throwIfDisposed(),Mn(this,r)};R().prototype.cast=function(r){return this.throwIfDisposed(),Y(this,r)};R().prototype.ceil=function(){return this.throwIfDisposed(),qw(this)};R().prototype.clipByValue=function(r,t){return this.throwIfDisposed(),Je(this,r,t)};R().prototype.concat=function(r,t){return this.throwIfDisposed(),r instanceof Ot&&(r=[r]),ue([this,...r],t)};R().prototype.conv1d=function(r,t,e,o,n,s){return this.throwIfDisposed(),lm(this,r,t,e,o,n,s)};R().prototype.conv2dTranspose=function(r,t,e,o,n){return this.throwIfDisposed(),um(this,r,t,e,o,n)};R().prototype.conv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Hr(this,r,t,e,o,n,s)};R().prototype.cos=function(){return this.throwIfDisposed(),Il(this)};R().prototype.cosh=function(){return this.throwIfDisposed(),cm(this)};R().prototype.cumprod=function(r,t,e){return this.throwIfDisposed(),pm(this,r,t,e)};R().prototype.cumsum=function(r,t,e){return this.throwIfDisposed(),hd(this,r,t,e)};R().prototype.depthToSpace=function(r,t){return this.throwIfDisposed(),e1(this,r,t)};R().prototype.depthwiseConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Oi(this,r,t,e,o,n,s)};R().prototype.dilation2d=function(r,t,e,o,n){return this.throwIfDisposed(),r1(this,r,t,e,o,n)};R().prototype.divNoNan=function(r){return this.throwIfDisposed(),o1(this,r)};R().prototype.div=function(r){return this.throwIfDisposed(),nt(this,r)};R().prototype.dot=function(r){return this.throwIfDisposed(),n1(this,r)};R().prototype.elu=function(){return this.throwIfDisposed(),Pi(this)};R().prototype.equal=function(r){return this.throwIfDisposed(),Cr(this,r)};R().prototype.erf=function(){return this.throwIfDisposed(),tC(this)};R().prototype.euclideanNorm=function(r,t){return this.throwIfDisposed(),a1(this,r,t)};R().prototype.exp=function(){return this.throwIfDisposed(),ir(this)};R().prototype.expandDims=function(r){return this.throwIfDisposed(),tr(this,r)};R().prototype.expm1=function(){return this.throwIfDisposed(),sC(this)};R().prototype.fft=function(){return this.throwIfDisposed(),km(this)};R().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])};R().prototype.floor=function(){return this.throwIfDisposed(),Li(this)};R().prototype.floorDiv=function(r){return this.throwIfDisposed(),pd(this,r)};R().prototype.gather=function(r,t){return this.throwIfDisposed(),vl(this,r,t)};R().prototype.greaterEqual=function(r){return this.throwIfDisposed(),So(this,r)};R().prototype.greater=function(r){return this.throwIfDisposed(),_e(this,r)};R().prototype.ifft=function(){return this.throwIfDisposed(),Sc(this)};R().prototype.irfft=function(){return this.throwIfDisposed(),CC(this)};R().prototype.isFinite=function(){return this.throwIfDisposed(),iC(this)};R().prototype.isInf=function(){return this.throwIfDisposed(),aC(this)};R().prototype.isNaN=function(){return this.throwIfDisposed(),lC(this)};R().prototype.leakyRelu=function(r){return this.throwIfDisposed(),kl(this,r)};R().prototype.lessEqual=function(r){return this.throwIfDisposed(),Vo(this,r)};R().prototype.less=function(r){return this.throwIfDisposed(),dd(this,r)};R().prototype.localResponseNormalization=function(r,t,e,o){return this.throwIfDisposed(),l1(this,r,t,e,o)};R().prototype.logSigmoid=function(){return this.throwIfDisposed(),cC(this)};R().prototype.logSoftmax=function(r){return this.throwIfDisposed(),dm(this,r)};R().prototype.logSumExp=function(r,t){return this.throwIfDisposed(),u1(this,r,t)};R().prototype.log=function(){return this.throwIfDisposed(),Ir(this)};R().prototype.log1p=function(){return this.throwIfDisposed(),hm(this)};R().prototype.logicalAnd=function(r){return this.throwIfDisposed(),fr(this,r)};R().prototype.logicalNot=function(){return this.throwIfDisposed(),xc(this)};R().prototype.logicalOr=function(r){return this.throwIfDisposed(),gd(this,r)};R().prototype.logicalXor=function(r){return this.throwIfDisposed(),c1(this,r)};R().prototype.matMul=function(r,t,e){return this.throwIfDisposed(),Gt(this,r,t,e)};R().prototype.maxPool=function(r,t,e,o){return this.throwIfDisposed(),Tl(this,r,t,e,o)};R().prototype.max=function(r,t){return this.throwIfDisposed(),mr(this,r,t)};R().prototype.maximum=function(r){return this.throwIfDisposed(),Kr(this,r)};R().prototype.mean=function(r,t){return this.throwIfDisposed(),he(this,r,t)};R().prototype.min=function(r,t){return this.throwIfDisposed(),fm(this,r,t)};R().prototype.minimum=function(r){return this.throwIfDisposed(),Nl(this,r)};R().prototype.mirrorPad=function(r,t){return this.throwIfDisposed(),p1(this,r,t)};R().prototype.mod=function(r){return this.throwIfDisposed(),m1(this,r)};R().prototype.mul=function(r){return this.throwIfDisposed(),_(this,r)};R().prototype.neg=function(){return this.throwIfDisposed(),Ut(this)};R().prototype.norm=function(r,t,e){return this.throwIfDisposed(),Pa(this,r,t,e)};R().prototype.notEqual=function(r){return this.throwIfDisposed(),La(this,r)};R().prototype.oneHot=function(r,t=1,e=0){return this.throwIfDisposed(),ac(this,r,t,e)};R().prototype.onesLike=function(){return this.throwIfDisposed(),je(this)};R().prototype.pad=function(r,t){return this.throwIfDisposed(),El(this,r,t)};R().prototype.pool=function(r,t,e,o,n,s){return this.throwIfDisposed(),f1(this,r,t,e,o,n,s)};R().prototype.pow=function(r){return this.throwIfDisposed(),Bo(this,r)};R().prototype.prelu=function(r){return this.throwIfDisposed(),$l(this,r)};R().prototype.prod=function(r,t){return this.throwIfDisposed(),h1(this,r,t)};R().prototype.reciprocal=function(){return this.throwIfDisposed(),bC(this)};R().prototype.relu=function(){return this.throwIfDisposed(),jr(this)};R().prototype.relu6=function(){return this.throwIfDisposed(),wd(this)};R().prototype.reshapeAs=function(r){return this.throwIfDisposed(),F(this,r.shape)};R().prototype.reshape=function(r){return this.throwIfDisposed(),F(this,r)};R().prototype.resizeBilinear=function(r,t,e){return this.throwIfDisposed(),Ed(this,r,t,e)};R().prototype.resizeNearestNeighbor=function(r,t,e){return this.throwIfDisposed(),$d(this,r,t,e)};R().prototype.reverse=function(r){return this.throwIfDisposed(),ko(this,r)};R().prototype.rfft=function(){return this.throwIfDisposed(),IC(this)};R().prototype.round=function(){return this.throwIfDisposed(),xm(this)};R().prototype.rsqrt=function(){return this.throwIfDisposed(),ym(this)};R().prototype.selu=function(){return this.throwIfDisposed(),bm(this)};R().prototype.separableConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),wm(this,r,t,e,o,n,s)};R().prototype.sigmoid=function(){return this.throwIfDisposed(),Mo(this)};R().prototype.sign=function(){return this.throwIfDisposed(),wC(this)};R().prototype.sin=function(){return this.throwIfDisposed(),Cm(this)};R().prototype.sinh=function(){return this.throwIfDisposed(),Im(this)};R().prototype.slice=function(r,t){return this.throwIfDisposed(),Lt(this,r,t)};R().prototype.softmax=function(r){return this.throwIfDisposed(),Dl(this,r)};R().prototype.softplus=function(){return this.throwIfDisposed(),Us(this)};R().prototype.spaceToBatchND=function(r,t){return this.throwIfDisposed(),bc(this,r,t)};R().prototype.split=function(r,t){return this.throwIfDisposed(),He(this,r,t)};R().prototype.sqrt=function(){return this.throwIfDisposed(),ce(this)};R().prototype.square=function(){return this.throwIfDisposed(),Ft(this)};R().prototype.squaredDifference=function(r){return this.throwIfDisposed(),D1(this,r)};R().prototype.squeeze=function(r){return this.throwIfDisposed(),Bn(this,r)};R().prototype.stack=function(r,t){this.throwIfDisposed();let e=r instanceof Ot?[this,r]:[this,...r];return er(e,t)};R().prototype.step=function(r){return this.throwIfDisposed(),Vn(this,r)};R().prototype.stridedSlice=function(r,t,e,o,n,s,i,a){return this.throwIfDisposed(),SC(this,r,t,e,o,n,s,i,a)};R().prototype.sub=function(r){return this.throwIfDisposed(),mt(this,r)};R().prototype.sum=function(r,t){return this.throwIfDisposed(),at(this,r,t)};R().prototype.tan=function(){return this.throwIfDisposed(),vC(this)};R().prototype.tanh=function(){return this.throwIfDisposed(),fc(this)};R().prototype.tile=function(r){return this.throwIfDisposed(),ar(this,r)};R().prototype.toBool=function(){return this.throwIfDisposed(),Y(this,"bool")};R().prototype.toFloat=function(){return this.throwIfDisposed(),Y(this,"float32")};R().prototype.toInt=function(){return this.throwIfDisposed(),Y(this,"int32")};R().prototype.topk=function(r,t){return this.throwIfDisposed(),R1(this,r,t)};R().prototype.transpose=function(r){return this.throwIfDisposed(),Rt(this,r)};R().prototype.unique=function(r){return this.throwIfDisposed(),F1(this,r)};R().prototype.unsortedSegmentSum=function(r,t){return this.throwIfDisposed(),Id(this,r,t)};R().prototype.unstack=function(r){return this.throwIfDisposed(),Or(this,r)};R().prototype.where=function(r,t){return this.throwIfDisposed(),fe(r,this,t)};R().prototype.zerosLike=function(){return this.throwIfDisposed(),xt(this)};var Pr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Pr.prototype)}},ur=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ur.prototype)}},L=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,L.prototype)}},yt=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,yt.prototype)}},Rc=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Rc.prototype)}};var $m=class{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){let o=this.cache.keys().next().value;this.cache.delete(o)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){let o=this.cache.keys().next().value;this.cache.delete(o)}this.maxEntries=t}};function Wo(r,t){if(Array.isArray(r)){let e=[];for(let o=0;o<t;o++)e=e.concat(r);return e}else{let e=new Array(t);return e.fill(r),e}}function To(r,t){if(!r)throw new Rc(t)}function PC(r,t){let e=0;for(let o of r)o===t&&e++;return e}function Xe(r){return r.length===1?r[0]:r}function ee(r){return Array.isArray(r)?r:[r]}function Ho(r){let e=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return e[0]!=="_"?e:"private"+e}function Mi(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}var Uo={};function Fc(r){if(r==null)return null;let t={};return t.className=r.getClassName(),t.config=r.getConfig(),t}function OC(r){if(!(r==null||typeof r!="object"))if(Array.isArray(r))r.forEach(t=>OC(t));else{let t=Object.keys(r);for(let e of t){let o=r[e];o!=null&&typeof o=="object"&&(!Array.isArray(o)&&o.type==="ndarray"&&typeof o.value=="number"?r[e]=o.value:OC(o))}}}function Ks(r,t={},e={},o="object",n=!1){if(typeof r=="string"){let s=r,i;if(s in e)i=e[s];else if(s in Uo)i=Uo[s];else if(i=t[s],i==null)throw new L(`Unknown ${o}: ${r}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{let s=r;if(s.className==null||s.config==null)throw new L(`${o}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);let i=s.className,a,l;if(i in e?[a,l]=e[i]:i in Uo?[a,l]=Uo.className:i in t&&([a,l]=t[i]),a==null)throw new L(`Unknown ${o}: ${i}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){let u={};for(let f of Object.keys(Uo))u[f]=Uo[f];for(let f of Object.keys(e))u[f]=e[f];let c=s.config;c.customObjects=u;let p=Object.assign({},Uo);for(let f of Object.keys(e))Uo[f]=e[f];OC(s.config);let m=l(a,s.config,e,n);return Uo=Object.assign({},p),m}else{let u=Object.assign({},Uo);for(let p of Object.keys(e))Uo[p]=e[p];let c=new a(s.config);return Uo=Object.assign({},u),c}}}function e4(r,t){return r<t?-1:r>t?1:0}function Am(r,t){return-1*e4(r,t)}function Ko(r){if(r==null)return r;let t=[];for(let e of r)t.indexOf(e)===-1&&t.push(e);return t}function oN(r){if(r==null)throw new L(`Invalid value in obj: ${JSON.stringify(r)}`);for(let t in r)if(r.hasOwnProperty(t))return!1;return!0}function qs(r,t,e){if(e!=null&&r.indexOf(e)<0)throw new L(`${e} is not a valid ${t}.  Valid values are ${r} or null/undefined.`)}function Fd(r,t,e=0,o=1/0){return To(e>=0),To(o>=e),Array.isArray(r)&&r.length>=e&&r.length<=o&&r.every(n=>typeof n===t)}function Ae(r,t){Array.isArray(r)?(y.assert(r.length>0,()=>`${t} is unexpectedly an empty array.`),r.forEach((e,o)=>Ae(e,`element ${o+1} of ${t}`))):y.assert(Number.isInteger(r)&&r>0,()=>`Expected ${t} to be a positive integer, but got ${nN(r)}.`)}function nN(r){return r===null?"null":Array.isArray(r)?"["+r.map(t=>nN(t)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function sN(r,t,e){let o=e!=null?e():y.now(),n;return(...i)=>{let a=e!=null?e():y.now();return a-o<t||(o=a,n=r(...i)),n}}function _d(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}var r4=0;function Pd(){return r4++}var Od={};function Ma(r=""){return r in Od||(Od[r]=0),Od[r]+=1,r+Od[r].toString()}var iN=["channelsFirst","channelsLast"],aN=["nearest","bilinear"],lN=["valid","same","causal"],uN=["max","avg"],cN=["sum","mul","concat","ave"];var _c=new Map;function de(r){qs(iN,"DataFormat",r)}function mN(r){qs(aN,"InterpolationFormat",r)}function Sr(r){qs(lN,"PaddingMode",r)}function LC(r){qs(uN,"PoolMode",r)}var Dm=[],pN="/";function Un(r,t){Dm.push(r);try{let e=t();return Dm.pop(),e}catch(e){throw Dm.pop(),e}}function o4(){return Dm.length===0?"":Dm.join(pN)+pN}function Ld(r){if(!fN(r))throw new Error("Not a valid tensor name: '"+r+"'");return o4()+r}function zd(r){if(!fN(r))throw new Error("Not a valid tensor name: '"+r+"'");_c.has(r)||_c.set(r,0);let t=_c.get(r);if(_c.set(r,_c.get(r)+1),t>0){let e=`${r}_${t}`;return _c.set(e,1),e}else return r}var n4=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function fN(r){return!!r.match(n4)}function hN(r){return r===parseInt(r.toString(),10)}function qo(r,t,e){t==null&&(t=0),e==null&&(e=r.length);let o=1;for(let n=t;n<e;++n)o*=r[n];return o}function zl(r){if(r.length===0)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o<t&&(t=o)}return t}function Wn(r){if(r.length===0)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o>t&&(t=o)}return t}function hr(r,t){if(t<r)throw new L(`end (${t}) < begin (${r}) is forbidden.`);let e=[];for(let o=r;o<t;++o)e.push(o);return e}var zC;function Me(){return zC==null&&(zC=Ov().epsilon()),zC}function vr(){return"channelsLast"}function Ml(r,t){return Y(r,t)}function Vi(r,t=-1){let e=r.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(r,e)}function dN(r,t){return z(()=>{if(r.shape.length!==2)throw new L(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);let e=Vi(r,1);return Bd(e,[1,t,1])})}function gN(r){let t=[qo(r.shape)];return F(r,t)}function xN(r){if(r.rank<=1)throw new L(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let t=[r.shape[0],qo(r.shape,1)];return F(r,t)}function Bi(r,t,e){return z(()=>{switch(r.rank){case 1:return Sm(r,t,e);case 2:return Cd(r,[t,0],[e,r.shape[1]]);case 3:return vm(r,[t,0,0],[e,r.shape[1],r.shape[2]]);case 4:return Ic(r,[t,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Lt(r,[t,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Lt(r,[t,0,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function MC(r,t,e){return z(()=>{switch(r.rank){case 1:return Sm(r,t,e);case 2:return Cd(r,[0,t],[r.shape[0],e]);case 3:return vm(r,[0,0,t],[r.shape[0],r.shape[1],e]);case 4:return Ic(r,[0,0,0,t],[r.shape[0],r.shape[1],r.shape[2],e]);default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Rm(r,t,e,o){return z(()=>{switch(r.rank){case 1:return Sm(r,t,e);case 2:switch(o){case 1:return Bi(r,t,e);case 2:return MC(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}case 3:switch(o){case 1:return Bi(r,t,e);case 2:return vm(r,[0,t,0],[r.shape[0],e,r.shape[2]]);case 3:return MC(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}case 4:switch(o){case 1:return Bi(r,t,e);case 2:return Ic(r,[0,t,0,0],[r.shape[0],e,r.shape[2],r.shape[3]]);case 3:return Ic(r,[0,0,t,0],[r.shape[0],r.shape[1],e,r.shape[3]]);case 4:return MC(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Oc(r,t=-1){let e;return t<0&&(e=r[0].rank,e!==0?t=e:t=0),t===r[0].rank&&(t=-1),ue(r,t)}function VC(r,t){switch(r.rank){case 1:return jw([r,t]);case 2:return Xw([r,t],0);case 3:return Yw([r,t],0);case 4:return Zw([r,t],0);default:throw new L(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function Bd(r,t){if(Array.isArray(t)||(t=[t]),r.rank!==t.length)throw new L(`The length of input n (${t.length}) does not match the number of dimensions in input x (${r.rank})`);return ar(r,t)}function Pc(r,t=0,e=1,o,n){return bd(r,t,e,o,n)}function jo(r,t,e,o){if(r.rank<2||t.rank<2)throw new yt(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${t.shape}`);if(t.rank>=3){let n=r.shape.slice(-1)[0],s=t.shape.slice(-2)[0];if(n!==s)throw new yt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${t.shape}`)}if(r.rank===2&&t.rank===2)return Pl.matMul({a:r,b:t,transposeA:!1,transposeB:!1,bias:o?BC(r.rank,o,vr()):null,activation:e});{let n=r.shape.slice(),s=n.pop();r=F(r,[-1,s]);let i=t.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:t.rank},(h,d)=>d===0?t.rank-2:d<=t.rank-2?d-1:d);t=F(Rt(t,c),[l,-1]);let p=[...n,...u],m=!1,f=!1;return F(Pl.matMul({a:r,b:t,transposeA:m,transposeB:f,bias:o?BC(r.rank,o,vr()):null,activation:e}),p)}}function Vd(r,t,e){return z(()=>(Array.isArray(t)?t=ze(t,"int32"):t=Y(t,"int32"),vl(r,t,e)))}function Bl(r){return _(r,r)}function BC(r,t,e){let o=t.shape;if(t.rank!==1&&t.rank!==r)throw new L(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${r}`);if(r===5){if(e==="channelsFirst")return o.length===1?F(t,[1,o[0],1,1,1]):F(t,[1,o[3],o[0],o[1],o[2]]);if(e==="channelsLast")return o.length===1?F(t,[1,1,1,1,o[0]]):F(t,[1].concat(o))}else if(r===4){if(e==="channelsFirst")return o.length===1?F(t,[1,o[0],1,1]):F(t,[1,o[2],o[0],o[1]]);if(e==="channelsLast")return o.length===1?F(t,[1,1,1,o[0]]):F(t,[1].concat(o))}else if(r===3){if(e==="channelsFirst")return o.length===1?F(t,[1,o[0],1]):F(t,[1,o[1],o[0]]);if(e==="channelsLast")return o.length===1?F(t,[1,1,o[0]]):F(t,[1].concat(o))}else if(r<3)return t;throw new L(`Unsupported input rank by biasAdd: ${t.rank}`)}function kr(r,t,e){return z(()=>(e==null&&(e=vr()),de(e),X(r,BC(r.rank,t,e))))}function yN(r,t=1){if(t!==1)throw new yt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Pi(r)}function bN(r){return z(()=>nt(r,X(Le(r),1)))}function Gd(r,t,e,o){return z(()=>P1(r,t,e,o))}function wN(r){return z(()=>{let t=X(.5,_(.2,r));return Je(t,0,1)})}function Ba(r,t,e=!1){return e?r():t()}var CN=["fanIn","fanOut","fanAvg"],IN=["normal","uniform","truncatedNormal"];function s4(r){qs(CN,"FanMode",r)}function i4(r){qs(IN,"Distribution",r)}var Nr=class extends K.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}},Fm=class extends Nr{apply(t,e){return te(t,e)}};Fm.className="Zeros";K.registerClass(Fm);var Vl=class extends Nr{apply(t,e){return qr(t,e)}};Vl.className="Ones";K.registerClass(Vl);var _m=class extends Nr{constructor(t){if(super(),typeof t!="object")throw new L(`Expected argument of type ConstantConfig but got ${t}`);if(t.value===void 0)throw new L(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return z(()=>_(Ct(this.value),qr(t,e)))}getConfig(){return{value:this.value}}};_m.className="Constant";K.registerClass(_m);var Om=class extends Nr{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return zi(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}};Om.className="RandomUniform";K.registerClass(Om);var Pm=class extends Nr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new yt(`randomNormal does not support dType ${e}.`);return Pc(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Pm.className="RandomNormal";K.registerClass(Pm);var Lm=class extends Nr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new yt(`truncatedNormal does not support dType ${e}.`);return Nm(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Lm.className="TruncatedNormal";K.registerClass(Lm);var zm=class extends Nr{constructor(t){super(),this.gain=t.gain!=null?t.gain:1}apply(t,e){return z(()=>{if(t.length!==2||t[0]!==t[1])throw new L("Identity matrix initializer can only be used for 2D square matrices.");return _(this.gain,gc(t[0]))})}getConfig(){return{gain:this.gain}}};zm.className="Identity";K.registerClass(zm);function a4(r,t="channelsLast"){let e,o;if(de(t),r.length===2)e=r[0],o=r[1];else if([3,4,5].indexOf(r.length)!==-1){if(t==="channelsFirst"){let n=qo(r,2);e=r[1]*n,o=r[0]*n}else if(t==="channelsLast"){let n=qo(r,0,r.length-2);e=r[r.length-2]*n,o=r[r.length-1]*n}}else{let n=qo(r);e=Math.sqrt(n),o=Math.sqrt(n)}return[e,o]}var dr=class extends Nr{constructor(t){if(super(),t.scale<0)throw new L(`scale must be a positive float. Got: ${t.scale}`);this.scale=t.scale==null?1:t.scale,this.mode=t.mode==null?"fanIn":t.mode,s4(this.mode),this.distribution=t.distribution==null?"normal":t.distribution,i4(this.distribution),this.seed=t.seed}apply(t,e){let o=a4(t),n=o[0],s=o[1],i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,n):this.mode==="fanOut"?i/=Math.max(1,s):i/=Math.max(1,(n+s)/2),this.distribution==="normal"){let a=Math.sqrt(i);if(e=e||"float32",e!=="float32"&&e!=="int32")throw new yt(`${this.getClassName()} does not support dType ${e}.`);return Nm(t,0,a,e,this.seed)}else{let a=Math.sqrt(3*i);return zi(t,-a,a,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}};dr.className="VarianceScaling";K.registerClass(dr);var Lc=class extends dr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return dr.className}};Lc.className="GlorotUniform";K.registerClass(Lc);var zc=class extends dr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return dr.className}};zc.className="GlorotNormal";K.registerClass(zc);var Mc=class extends dr{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return dr.className}};Mc.className="HeNormal";K.registerClass(Mc);var Bc=class extends dr{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return dr.className}};Bc.className="HeUniform";K.registerClass(Bc);var Vc=class extends dr{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return dr.className}};Vc.className="LeCunNormal";K.registerClass(Vc);var Gc=class extends dr{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return dr.className}};Gc.className="LeCunNormal";K.registerClass(Gc);var Mm=class extends Nr{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=t.gain==null?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,this.seed!=null)throw new yt("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return z(()=>{if(t.length<2)throw new yt("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);let o=t[0]>t[1]?[t[1],t[0]]:t,n=Pc(o,0,1,"float32"),s=nk.gramSchmidt(n);return t[0]>t[1]&&(s=Rt(s)),_(this.gain,s)})}getConfig(){return{gain:this.gain,seed:this.seed}}};Mm.className="Orthogonal";K.registerClass(Mm);var SN={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function vN(r,t={}){return Ks(r,K.SerializationMap.getMap().classNameMap,t,"initializer")}function ae(r){return Fc(r)}function Zt(r){if(typeof r=="string"){let t=r in SN?SN[r]:r;if(t==="GlorotNormal")return new zc;if(t==="GlorotUniform")return new Lc;if(t==="HeNormal")return new Mc;if(t==="HeUniform")return new Bc;if(t==="LeCunNormal")return new Vc;if(t==="LeCunUniform")return new Gc;{let e={};return e.className=t,e.config={},vN(e)}}else return r instanceof Nr?r:vN(r)}function Ud(r){return Array.isArray(r)&&Array.isArray(r[0])}function Uc(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function Tt(r){let t;if(Array.isArray(r)){if(r.length!==1)throw new L(`Expected Tensor length to be 1; got ${r.length}`);t=r[0]}else t=r;return t}function zt(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return r=r,r[0];throw new L(`Expected exactly 1 Shape; got ${r.length}`)}else return r}function Wc(r){let t=0;for(let e of r)e.shape.length===0?t+=1:t+=e.shape.reduce((o,n)=>o*n);return t}var TN="Variable",Bm=class{constructor(t,e="float32",o=TN,n=!0,s=null){this.dtype=e??"float32",this.shape=t.shape,this.id=Pd(),o=o??TN,this.originalName=Ld(o),this.name=zd(this.originalName),this.trainable_=n,this.constraint=s,this.val=kC(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),u4(this.val,t),this.val.id!==t.id&&(this.val.assign(t),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}};function u4(r,t){if(r.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(r.shape)+" vs. "+JSON.stringify(t.shape))}function Vm(r){return r.map(t=>t.read())}function Hc(r){r.forEach(t=>{t[0].write(t[1])})}var re=class{constructor(t){this.dtype=t.dtype,this.shape=t.shape,t.shape!=null?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}},gr=class{constructor(t,e,o,n,s,i,a){this.dtype=t,this.shape=e,this.sourceLayer=o,this.inputs=n,this.callArgs=s,this.outputTensorIndex=a,this.id=Pd(),i!=null&&(this.originalName=Ld(i),this.name=zd(this.originalName)),this.rank=e.length}},c4=0,Gi=class{constructor(t,e){this.callArgs=e,this.id=c4++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(let o of t.inboundLayers)o?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){let t=[];for(let e of this.inboundLayers)e!=null?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},p4=0,At=class extends K.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=p4++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){let o=this.getClassName();e=Ho(o)+"_"+Ma(o)}if(this.name=e,this.trainable_=t.trainable==null?!0:t.trainable,t.inputShape!=null||t.batchInputShape!=null){let o;if(t.batchInputShape!=null)o=t.batchInputShape;else if(t.inputShape!=null){let s=null;t.batchSize!=null&&(s=t.batchSize),o=[s].concat(t.inputShape)}this.batchInputShape=o;let n=t.dtype;n==null&&(n=t.inputDType),n==null&&(n="float32"),this.dtype=n}t.weights!=null?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(this.inboundNodes.length===0)throw new ur(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new L(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Xe(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Xe(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Pr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new Pr(`Layer ${this.name} is not connected, no input to return.`);return Xe(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new Pr(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Pr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Xe(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=ee(t),this.inputSpec==null||this.inputSpec.length===0)return;let e=ee(this.inputSpec);if(t.length!==e.length)throw new L(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let o=0;o<t.length;o++){let n=t[o],s=e[o];if(s==null)continue;let i=n.rank;if(s.ndim!=null&&i!==s.ndim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(s.maxNDim!=null&&i>s.maxNDim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(s.minNDim!=null&&i<s.minNDim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(s.dtype!=null&&n.dtype!==s.dtype)throw new L(`Input ${o} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${n.dtype}.`);if(s.axes){let a=n.shape;for(let l in s.axes){let u=Number(l),c=s.axes[l],p=u>=0?a[u]:a[a.length+u];if(c!=null&&[c,null].indexOf(p)===-1)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(s.shape!=null)for(let a=0;a<s.shape.length;++a){let l=s.shape[a],u=n.shape[a];if(l!=null&&u!=null&&l!==u)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${n.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){this._callHook!=null&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();let o=ee(t),n=!0;for(let i of o)if(!(i instanceof gr)){n=!1;break}let s=!0;for(let i of o)if(i instanceof gr){s=!1;break}if(n===s)throw new L("Arguments to apply() must be all SymbolicTensors or all Tensors");return Un(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);let i=[];for(let a of ee(t))i.push(a.shape);this.build(Xe(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let i=this.call(t,e),a=ee(i),l=[];for(let u of a)o.indexOf(u)!==-1&&(u=u.clone()),l.push(u);if(i=Xe(l),this.activityRegularizer!=null)throw new yt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{let i=m4(t),a=this.computeOutputShape(i),l,u=f4(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?i[0]:i),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((c,p)=>new gr(u,c,this,ee(t),e,this.name,p)):l=new gr(u,a,this,ee(t),e,this.name),this.addInboundNode(t,l,null,null,i,a,e),this._refCount++,this.activityRegularizer!=null)throw new yt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(this.batchInputShape!=null)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((o,n)=>{o!=null&&t[n]!=null&&t[n]!==o&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new Pr(`The layer ${this.name} has never been called and thus has no defined output shape.`);let t=[];for(let e of this.inboundNodes){let o=JSON.stringify(e.outputShapes);t.indexOf(o)===-1&&t.push(o)}if(t.length===1){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&e.length===1?e[0]:e}else throw new Pr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new ur(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Wc(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Vm(t?this.trainableWeights:this.weights)}setWeights(t){z(()=>{let e=this.weights;if(e.length!==t.length)throw new L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(e.length===0)return;let o=[],n=Vm(e);for(let s=0;s<n.length;++s){let i=n[s],a=e[s],l=t[s];if(!y.arraysEqual(i.shape,l.shape))throw new L(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);o.push([a,l])}Hc(o)})}addWeight(t,e,o,n,s,i,a,l){if(this._addedWeightNames.indexOf(t)!==-1)throw new L(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),o==null&&(o="float32"),this.fastWeightInitDuringBuild&&(n=l!=null?l():Zt("zeros"));let u=n.apply(e,o),c=new Bm(u,o,t,i,a);return u.dispose(),s!=null&&this.addLoss(()=>s.apply(c.read())),i==null&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){t==null||Array.isArray(t)&&t.length===0||(t=ee(t),this._losses!==void 0&&this._losses!==null&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(e!=null)if(Array.isArray(e))e.forEach(o=>{if(o!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return e}addInboundNode(t,e,o,n,s,i,a=null){let l=ee(t);e=ee(e),o=ee(o),n=ee(n),s=Uc(s),i=Uc(i);let u=[],c=[],p=[];for(let m of l)u.push(m.sourceLayer),c.push(m.nodeIndex),p.push(m.tensorIndex);new Gi({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:p,inputTensors:l,outputTensors:e,inputMasks:o,outputMasks:n,inputShapes:s,outputShapes:i},a);for(let m=0;m<e.length;m++)e[m].sourceLayer=this,e[m].nodeIndex=this.inboundNodes.length-1,e[m].tensorIndex=m}getConfig(){let t={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(t.batchInputShape=this.batchInputShape),this.dtype!=null&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return--this._refCount===0&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}};function m4(r){r=ee(r);let t=[];for(let e of r)t.push(e.shape);return Xe(t)}function f4(r){return"float32"}function GC(r,t,e){if((t==null||e!=null&&e>0)&&(t=r.sourceLayer,e=r.nodeIndex),t.inboundNodes.length===0)return[r];{let o=t.inboundNodes[e];if(o.inboundLayers.length===0)return o.inputTensors;{let n=[];for(let s=0;s<o.inboundLayers.length;s++){let i=o.inputTensors[s],a=o.inboundLayers[s],l=o.nodeIndices[s],u=GC(i,a,l);for(let c of u)n.indexOf(c)===-1&&n.push(c)}return n}}}var js=class extends At{constructor(t){if(super({dtype:t.dtype,name:t.name!=null?t.name:Ma("input").toString()}),t.batchSize==null&&(t.batchSize=null),t.sparse==null&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,t.inputShape!=null&&t.batchInputShape!=null)throw new L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(e==null){if(t.inputShape==null)throw new L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(t.batchSize!=null)throw new L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let o=t.dtype||"float32";this.batchInputShape=e,this.dtype=o,this.inputSpec=[{shape:e}];let n=new gr(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new Gi({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}};js.className="InputLayer";K.registerClass(js);function UC(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=r.batchShape;r.shape!=null&&t==null&&(t=[null].concat(r.shape));let e=r.dtype;return e==null&&(e="float32"),new js({batchInputShape:t,name:r.name,dtype:e,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}function h4(r,t){if(r.dtype==null||r.dtype===t.dtype)return t;try{return Y(t,r.dtype)}catch{throw new L(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`)}}var Xo=class{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Xo)for(let e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(t==null)return;for(let e of t)this.add(e.key,e.value)}}add(t,e,o){if(this.id2Value[t.id]==null)this.id2Value[t.id]=h4(t,e),this.name2Id[t.name]=t.id,o!=null&&(this.id2Mask[t.id]=o);else throw new L(`Duplicate key: name=${t.name}, id=${t.id}`);return this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return this.id2Value[t.id]!=null}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof gr){if(this.id2Value[t.id]==null)throw new L(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}else{let e=this.name2Id[t];if(e==null)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof gr){if(this.id2Value[t.id]==null)throw new L(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}else{let e=this.name2Id[t];if(e==null)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){this.id2Mask!=null&&St(this.id2Mask)}},Wd=new $m,Hd=new $m;function EN(r){Wd?.setMaxEntries(r),Hd?.setMaxEntries(r)}function Gl(r,t,e,o){let n=e==null?!1:e.training,s=Array.isArray(r),i=s?r:[r],a=i.map(h=>h.name),l=[],u=t.names();for(let h of a)u.indexOf(h)!==-1?l.push(t.getValue(h)):l.push(null);o!=null&&(o.maxNumTensors=-1/0,o.minNumTensors=1/0);let c=a.join(",")+"|"+t.names().sort().join(","),p=Wd.get(c),m;if(p==null){let h=d4(i,t);p=h.sorted,m=h.recipientCounts,Wd.put(c,p),Hd.put(c,m)}m={},n||Object.assign(m,Hd.get(c));let f=new Xo(t);for(let h=0;h<p.length;++h){if(o!=null){let D=sm().numTensors;D>o.maxNumTensors&&(o.maxNumTensors=D),D<o.minNumTensors&&(o.minNumTensors=D)}let d=p[h],g=d.sourceLayer;if(g instanceof js)continue;let x=[],b=[],w=[],C=!1;for(let D of d.inputs){let O=f.getValue(D),M=f.getMask(D);x.push(O),b.push(M),M!=null&&(C=!0),n||(m[D.name]--,m[D.name]===0&&!t.hasKey(D)&&a.indexOf(D.name)===-1&&!O.isDisposed&&D.sourceLayer.stateful!==!0&&w.push(O))}C&&(e=e||{},e.mask=b[0]);let S=ee(g.apply(x,e)),k=null;g.supportsMasking&&(k=g.computeMask(x,b));let E=x4(d),A=Array.isArray(E)?E:[E];for(let D=0;D<A.length;++D){f.hasKey(A[D])||f.add(A[D],S[D],Array.isArray(k)?k[0]:k);let O=a.indexOf(A[D].name);O!==-1&&(l[O]=S[D])}n||St(w)}return f.disposeMasks(),s?l:l[0]}function d4(r,t){y.assert(r!=null&&r.length>0,()=>"Expected at least one fetch, got none");let e=[],o={};if(r.length===1){let n=NN(r[0],t);e=n.sorted,o=n.recipientMap}else{let n=new Set;for(let s of r){let{sorted:i,recipientMap:a}=NN(s,t);for(let l of i)n.has(l.name)||(e.push(l),n.add(l.name));for(let l in a)o[l]==null&&(o[l]=new Set),a[l].forEach(u=>o[l].add(u))}}return{sorted:e,recipientCounts:g4(o)}}function g4(r){let t={};for(let e in r)t[e]=r[e].size;return t}function NN(r,t){let e=new Set,o=[],n={};for(let a of t.names())e.add(a);let s=[],i=[];for(s.push(r);s.length>0;){let a=s[s.length-1];if(e.has(a.name)){s.pop();continue}let l=i[i.length-1]===s.length-1;if(a.inputs.length===0||l)s.pop(),o.push(a),e.add(a.name),l&&i.pop();else{i.push(s.length-1);for(let u of a.inputs)n[u.name]==null&&(n[u.name]=new Set),n[u.name].add(a.name),!e.has(u.name)&&s.push(u)}}return{sorted:o,recipientMap:n}}function x4(r){let t;if(r.sourceLayer.inboundNodes.length===1)t=r.sourceLayer.output;else{let e=null;for(let o=0;o<r.sourceLayer.inboundNodes.length;++o)for(let n of r.sourceLayer.inboundNodes[o].outputTensors)if(n.id===r.id){e=o;break}t=r.sourceLayer.getOutputAt(e)}return t}var y4=P();y4.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,EN);function WC(r,t){return z(()=>ce(at(_(r,r),t,!0)))}var Ul=class extends K.Serializable{getConfig(){return{}}},Gm=class extends Ul{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return z(()=>{let e=WC(t,this.axis),o=Je(e,0,this.maxValue);return _(t,nt(o,X(Me(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}};Gm.className="MaxNorm";K.registerClass(Gm);var Um=class extends Ul{constructor(t){super(),this.defaultAxis=0,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return z(()=>nt(t,X(Me(),WC(t,this.axis))))}getConfig(){return{axis:this.axis}}};Um.className="UnitNorm";K.registerClass(Um);var Wm=class extends Ul{apply(t){return jr(t)}};Wm.className="NonNeg";K.registerClass(Wm);var Hm=class extends Ul{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=t.minValue!=null?t.minValue:this.defaultMinValue,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.rate=t.rate!=null?t.rate:this.defaultRate,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return z(()=>{let e=WC(t,this.axis),o=X(_(this.rate,Je(e,this.minValue,this.maxValue)),_(1-this.rate,e));return _(t,nt(o,X(Me(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}};Hm.className="MinMaxNorm";K.registerClass(Hm);var $N={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function be(r){return Fc(r)}function AN(r,t={}){return Ks(r,K.SerializationMap.getMap().classNameMap,t,"constraint")}function we(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in $N?$N[r]:r,config:{}};return AN(e)}else return r instanceof Ul?r:AN(r)}async function Ui(r){if(r==null)return;let t=[],e=[],o=[];for(let n in r){let s=r[n];if(typeof s!="number"){let i=s;t.push(i.data()),e.push(n),o.push(i)}}if(t.length>0){let n=await Promise.all(t);for(let s=0;s<n.length;++s)r[e[s]]=n[s][0];St(o)}}function Kd(r){if(r!=null)for(let t in r){let e=r[t];typeof e!="number"&&e.dispose()}}var DN;(function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"})(DN||(DN={}));var C4=125,Va=class{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}},qd=class{constructor(t,e=10){t==null&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(let e of this.callbacks)e.setParams(t)}setModel(t){for(let e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochBegin(t,e)}async onEpochEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochEnd(t,e)}async onBatchBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchBegin(t,e)}async onBatchEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchEnd(t,e)}async onTrainBegin(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainEnd(t)}},HC=class extends Va{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){e==null&&(e={});let o=e.size==null?0:e.size;this.seen+=o;for(let n in e){let s=e[n];if(typeof s=="number")this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+s*o;else{let i;n in this.totals?i=this.totals[n]:this.totals[n]=0;let a=z(()=>X(this.totals[n],_(s,o)));this.totals[n]=a,i?.dispose()}}}async onEpochEnd(t,e){if(e!=null)for(let o of this.params.metrics)this.totals[o]!=null&&(typeof this.totals[o]=="number"?e[o]=this.totals[o]/this.seen:z(()=>{let n=_(nt(1,this.seen),this.totals[o]);e[o]=n,this.totals[o].dispose(),qe(e[o])}))}},jd=class extends Va{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){e==null&&(e={}),this.epoch.push(t);for(let o in e)this.history[o]==null&&(this.history[o]=[]),this.history[o].push(e[o])}async syncData(){let t=[],e=[],o=[];for(let s in this.history){let i=this.history[s];for(let a=0;a<i.length;++a)if(typeof i[a]!="number"){let l=i[a];t.push(l.data()),e.push(s),o.push(a)}}let n=await Promise.all(t);for(let s=0;s<n.length;++s)this.history[e[s]][o[s]].dispose(),this.history[e[s]][o[s]]=n[s][0]}},Xd=class extends Va{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Em,this.yieldEvery=e||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=C4),this.yieldEvery==="never"&&t.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");y.isNumber(this.yieldEvery)&&(this.maybeWait=sN(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,o){let n=[];this.yield!=null&&(await Ui(o),n.push(this.yield(t,e,o))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(t,e){this.currentEpoch=t,this.epochBegin!=null&&(await Ui(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){let o=[];this.epochEnd!=null&&(await Ui(e),o.push(this.epochEnd(t,e))),this.yieldEvery==="epoch"&&o.push(this.nextFrameFunc()),await Promise.all(o)}async onBatchBegin(t,e){this.batchBegin!=null&&(await Ui(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){let o=[];this.batchEnd!=null&&(await Ui(e),o.push(this.batchEnd(t,e))),this.yieldEvery==="batch"?o.push(this.nextFrameFunc()):y.isNumber(this.yieldEvery)&&o.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(o)}async onTrainBegin(t){this.trainBegin!=null&&(await Ui(t),await this.trainBegin(t))}async onTrainEnd(t){this.trainEnd!=null&&(await Ui(t),await this.trainEnd(t))}};function Yd(r,t){return r==null&&(r={}),r instanceof Va?[r]:Array.isArray(r)&&r[0]instanceof Va?r:ee(r).map(o=>new Xd(o,t))}var Lr=class{constructor(){}static registerCallbackConstructor(t,e){y.assert(t>=0&&Number.isInteger(t),()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`),Lr.checkForDuplicate(e),Lr.constructors[t]==null&&(Lr.constructors[t]=[]),Lr.constructors[t].push(e)}static checkForDuplicate(t){for(let e in Lr.constructors)Lr.constructors[+e].forEach(n=>{if(n===t)throw new L("Duplicate callback constructor.")})}static clear(){Lr.constructors={}}static createCallbacks(t){let e=[];for(let o in Lr.constructors){let n=+o;t>=n&&e.push(...Lr.constructors[n])}return e.map(o=>new o)}};Lr.constructors={};function Zd(r,t,e,o,n,s,i,a,l){let u=new jd,c=[new HC,...Lr.createCallbacks(t)];r!=null&&c.push(...r),c.push(u);let p=new qd(c);return p.setParams({epochs:e,initialEpoch:o,samples:n,steps:s,batchSize:i,verbose:t,doValidation:a,metrics:l}),{callbackList:p,history:u}}function Xr(r,t={},e=!1){return Ks(r,K.SerializationMap.getMap().classNameMap,t,"layer",e)}function Km(r,t){return z(()=>{r.dtype!=="float32"&&(r=Y(r,"float32"));let e=at(Bl(r),t,!0),o=Sl(e.shape,Me()),n=ce(Kr(e,o));return nt(r,n)})}function Wl(r,t){return z(()=>he(Bl(mt(t,r)),-1))}function jm(r,t){return z(()=>he(Le(mt(t,r)),-1))}function Xm(r,t){return z(()=>{let e=mt(r,t),o=Je(Le(r),Me(),Number.MAX_VALUE),n=Le(nt(e,o));return _(100,he(n,-1))})}function I4(r,t){return z(()=>{let e=Je(t,Me(),Number.MAX_VALUE),o=Ir(X(1,e)),n=Je(r,Me(),Number.MAX_VALUE),s=Ir(X(1,n));return he(Bl(mt(o,s)),-1)})}function S4(r,t){return z(()=>{let e=Kr(0,mt(1,_(r,t)));return he(Bl(e),-1)})}function v4(r,t){return z(()=>{let e=Kr(0,mt(1,_(r,t)));return he(e,-1)})}function k4(r,t){return z(()=>{let e=at(_(r,t),-1),o=mr(_(mt(1,r),t),-1);return Kr(0,X(1,mt(o,e)))})}function T4(r,t){return z(()=>{let e=Math.log(2),o=mt(t,r),n=mt(X(o,Us(_(-2,o))),e);return he(n,-1)})}function Hl(r,t,e=!1){return z(()=>{if(e)t=Dl(t);else{let o=at(t,t.shape.length-1,!0);t=nt(t,o)}return t=Je(t,Me(),1-Me()),Ut(at(_(Y(r,"float32"),Ir(t)),t.shape.length-1))})}function Kc(r,t,e=!1){return z(()=>{let o=Y(Li(gN(r)),"int32");t=Je(t,Me(),1-Me());let n=t.shape,s=F(ac(o,n[n.length-1]),n);return Hl(s,t,e)})}function N4(r,t){if(!y.arraysEqual(r.shape,t.shape))throw new L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(t.shape)}`);return z(()=>{let e=jr(t),o=Ut(Le(t));return X(mt(e,_(t,r)),hm(ir(o)))})}function qc(r,t){return z(()=>{let e;return e=Je(t,Me(),1-Me()),e=Ir(nt(e,mt(1,e))),he(N4(r,e),-1)})}function E4(r,t){return z(()=>{let e=Je(r,Me(),1),o=Je(t,Me(),1);return at(_(r,Ir(nt(e,o))),-1)})}function $4(r,t){return z(()=>{let e=Ir(X(Me(),t));return he(mt(t,_(r,e)),-1)})}function Qd(r,t){return z(()=>{let e=Km(r,-1),o=Km(t,-1),n=_(e,o);return Ut(at(n,-1))})}var qm={meanSquaredError:Wl,meanAbsoluteError:jm,meanAbsolutePercentageError:Xm,meanSquaredLogarithmicError:I4,squaredHinge:S4,hinge:v4,categoricalHinge:k4,logcosh:T4,categoricalCrossentropy:Hl,sparseCategoricalCrossentropy:Kc,binaryCrossentropy:qc,kullbackLeiblerDivergence:E4,poisson:$4,cosineProximity:Qd};function Jd(r){if(typeof r=="string"){if(r in qm)return qm[r];let t=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new L(t)}else return r}function eg(r,t){return z(()=>{let e=_(.5,je(t)),o=Ml(_e(t,e),r.dtype);return he(Cr(r,o),-1)})}function rg(r,t){return z(()=>Ml(Cr(_i(r,-1),_i(t,-1)),"float32"))}function A4(r,t){return z(()=>Y(at(fr(Cr(r,1),Cr(t,1))),"float32"))}function D4(r,t){return z(()=>Y(at(fr(Cr(r,0),Cr(t,1))),"float32"))}function FN(r,t){return z(()=>{let e=A4(r,t),o=D4(r,t),n=X(e,o);return Y(fe(_e(n,0),nt(e,n),0),"float32")})}function KC(r,t){return qc(r,t)}function qC(r,t){return r.rank===t.rank&&(r=Bn(r,[r.rank-1])),t=_i(t,-1),t.dtype!==r.dtype&&(t=Y(t,r.dtype)),Y(Cr(r,t),"float32")}var R4=Wl,F4=Wl,_4=jm,O4=jm,P4=Xm,L4=Xm,og=Hl,z4=Qd,jC=Kc,tg={binaryAccuracy:eg,categoricalAccuracy:rg,precision:FN,categoricalCrossentropy:og,sparseCategoricalCrossentropy:jC,mse:R4,MSE:F4,mae:_4,MAE:O4,mape:P4,MAPE:L4,cosine:z4};function _N(r){if(typeof r=="string"&&r in tg)return tg[r];if(typeof r!="string"&&r!=null)return r;throw new L(`Unknown metric ${r}`)}function Ym(r){if(To(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let t;for(let e of Object.keys(qm))if(qm[e]===r){t=e;break}if(t!==void 0)return t;for(let e of Object.keys(tg))if(tg[e]===r){t=e;break}return t!==void 0?t:r.name}}function PN(r){let t={Adagrad:()=>Ll.adagrad(.01),Adadelta:()=>Ll.adadelta(1,.95,Me()),Adam:()=>Ll.adam(.001,.9,.999,Me()),Adamax:()=>Ll.adamax(.002,.9,.999,Me(),0),RMSProp:()=>Ll.rmsprop(.001,.9,0,Me()),SGD:()=>Ll.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,r in t)return t[r]();throw new L(`Unknown Optimizer ${r}`)}function YC(r,t,e=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!XC(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){let o=JSON.stringify(r);o.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${o.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${1048576}.`)}}function XC(r){if(r===null)return!0;if(typeof r=="object")if(Object.getPrototypeOf(r)===Object.prototype){let t=Object.keys(r);for(let e of t)if(typeof e!="string"||!XC(r[e]))return!1;return!0}else if(Array.isArray(r)){for(let t of r)if(!XC(t))return!1;return!0}else return!1;else{let t=typeof r;return t==="string"||t==="number"||t==="boolean"}}function LN(r,t,e,o=console.log){let n=V4(r),s=["Layer (type)","Input Shape","Output shape","Param #"];n?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c)));let i;if(!n){s.push("Receives inputs"),i=[];for(let c in r.nodesByDepth)i.push(...r.nodesByDepth[c])}o("_".repeat(t)),ng(s,e,o),o("=".repeat(t));let a=r.layers;for(let c=0;c<a.length;++c)n?G4(a[c],e,o):U4(a[c],e,i,o),o((c===a.length-1?"=":"_").repeat(t));r.checkTrainableWeightsConsistency();let l=B4(r),u=Wc(r.nonTrainableWeights);o(`Total params: ${l+u}`),o(`Trainable params: ${l}`),o(`Non-trainable params: ${u}`),o("_".repeat(t))}function B4(r){let t;return r.collectedTrainableWeights!=null?t=Wc(r.collectedTrainableWeights):t=Wc(r.trainableWeights),t}function V4(r){let t=!0,e=[],o=[];for(let n in r.nodesByDepth)e.push(r.nodesByDepth[n]);for(let n of e){if(n.length>1||n.length===1&&n[0].inboundLayers.length>1){t=!1;break}o.push(...n)}if(t)for(let n of r.layers){let s=!1;for(let i of n.inboundNodes)if(o.indexOf(i)!==-1)if(s){t=!1;break}else s=!0;if(!t)break}return t}function ng(r,t,e=console.log){let o="";for(let n=0;n<r.length;++n)n>0&&(o=o.slice(0,o.length-1)+" "),o+=r[n],o=o.slice(0,t[n]),o+=" ".repeat(t[n]-o.length);e(o)}function G4(r,t,e){let o,n;try{n=r.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{n="multiple"}try{o=JSON.stringify(r.outputShape)}catch{o="multiple"}let s=r.name,i=r.getClassName(),a=[`${s} (${i})`,n,o,r.countParams().toString()];ng(a,t,e)}function U4(r,t,e,o){let n,s;try{s=r.inboundNodes.map(p=>JSON.stringify(p.inputShapes)).join(",")}catch{s="multiple"}try{n=JSON.stringify(r.outputShape)}catch{n="multiple"}let i=[];for(let p of r.inboundNodes)if(!(e!=null&&e.length>0&&e.indexOf(p)===-1))for(let m=0;m<p.inboundLayers.length;++m){let f=p.inboundLayers[m].name,h=p.nodeIndices[m],d=p.tensorIndices[m];i.push(`${f}[${h}][${d}]`)}let a=r.name,l=r.getClassName(),u=i.length===0?"":i[0],c=[`${a} (${l})`,s,n,r.countParams().toString(),u];ng(c,t,o);for(let p=1;p<i.length;++p)ng(["","","","",i[p]],t,o)}function zN(r,t,e){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&t===0&&typeof e=="string"}function Zm(r,t){if(r===null)return null;if(typeof r=="string")return Mi(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];zN(t,n,s)?e.push(s):e.push(Zm(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o];if(o==="name"&&typeof n=="string")e[o]=n;else{let s=Mi(o);e[s]=Zm(n,s)}}return e}}function sg(r,t){if(r==null)return null;if(typeof r=="string")return Ho(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];zN(t,n,s)?e.push(s):e.push(sg(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o],s=Ho(o);(o==="name"||o==="className")&&typeof n=="string"?e[s]=n:e[s]=sg(n,o)}return e}}var jc="3.20.0";var Yr=class extends At{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,this.name==null){let b=this.getClassName().toLowerCase();this.name=Ma(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Ko(this.inputs).length!==this.inputs.length)throw new L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);Ko(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(let b of this.outputs){let w=b.sourceLayer,C=b.nodeIndex,S=b.tensorIndex;this.outputLayers.push(w),this.outputLayersNodeIndices.push(C),this.outputLayersTensorIndices.push(S)}for(let b of this.inputs){let w=b.sourceLayer,C=b.nodeIndex,S=b.tensorIndex;To(C===0,"input layer has >1 nodes"),To(S===0,"input layer has >1 tensors"),this.inputLayers.push(w),this.inputLayersNodeIndices.push(C),this.inputLayersTensorIndices.push(S)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){let w=this.inputLayers[b];if(!(w instanceof js))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);this.inputNames.push(w.name),this.feedInputShapes.push(w.batchInputShape),this.feedInputNames.push(w.name)}for(let b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);let e={},o={},n={},s={},i={},a=[],l=(b,w,C,S,k,E)=>{(S==null||k==null||E==null)&&(S=b.sourceLayer,k=b.nodeIndex,E=b.tensorIndex);let A=S.inboundNodes[k];if(C.indexOf(A)!==-1)throw new ur(`The tensor ${b.name} at layer "${S.name}" is part of a cycle.`);if(w.indexOf(A)!==-1)return;this.containerNodes.add(Yr.nodeKey(S,k)),S.id in i||(i[S.id]=Object.keys(i).length),C.indexOf(A)===-1&&C.push(A);let D=A.inboundLayers.length;for(let O=0;O<D;O++){let M=A.inputTensors[O],B=A.inboundLayers[O],V=A.nodeIndices[O],U=A.tensorIndices[O];l(M,w,C,B,V,U)}for(w.push(A);C.indexOf(A)>=0;)C.splice(C.indexOf(A),1);a.push(A)},u=[],c=[];for(let b of this.outputs)l(b,u,c);let p=a.slice().reverse();for(let b of p){o[b.id]=b,b.id in e||(e[b.id]=0);let w=e[b.id],C=n[b.outboundLayer.id]==null?0:n[b.outboundLayer.id];w=Math.max(w,C),n[b.outboundLayer.id]=w,s[b.outboundLayer.id]=b.outboundLayer,e[b.id]=w;for(let S=0;S<b.inboundLayers.length;S++){let k=b.inboundLayers[S],E=b.nodeIndices[S],A=k.inboundNodes[E],D=e[A.id]==null?0:e[A.id];e[A.id]=Math.max(w+1,D),o[A.id]=A}}let m={};for(let b in e){let w=e[b];w in m||(m[w]=[]),m[w].push(o[b])}let f={};for(let b in n){let w=n[b];w in f||(f[w]=[]),f[w].push(s[b])}let h=Object.keys(f).map(b=>parseInt(b,10)).sort(Am);this.layers=[];for(let b of h){let w=f[b];w.sort((C,S)=>{let k=i[C.id],E=i[S.id];return k<E?-1:k>E?1:0});for(let C of w)C instanceof Yr&&this.internalContainerRefs.push(C),this.layers.push(C)}this.layersByDepth=f,h=Object.keys(m).map(b=>parseInt(b,10)).sort(Am);let d=this.inputs.slice(),g=[];for(let b of h)for(let w of m[b]){let C=w.outboundLayer;if(C!=null){for(let S of w.inputTensors)if(d.indexOf(S)===-1)throw new ur(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${C.name}". The following previous layers were accessed without issue: ${g}`);for(let S of w.outputTensors)d.push(S);g.push(C.name)}}this.nodesByDepth=m;let x=this.layers.map(b=>b.name);for(let b of x){let w=x.filter(C=>C===b).length;if(w!==1)throw new ur(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(x))}this.outboundNodes=[],this.inboundNodes=[],new Gi({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let t={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(let e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(let e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(o=>o.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(let e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.layers)e.push(...o.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){let o={},n=0;for(let i of this.layers)for(let a of i.weights){if(o[a.originalName]!=null)throw new L(`Duplicate weight name: ${a.originalName}`);o[a.originalName]=a,n++}let s=[];for(let i in t){let a=i;if(o[i]==null){let l=i.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(o[a]!=null)s.push([o[a],t[i]]);else if(e)throw new L(`Provided weight data has no target variable: ${i}`);delete o[a]}if(e){let i=[];for(let a in o)i.push(a);if(i.length>0)throw new L(`${i.length} of ${n} weights are not set: ${i}`)}Hc(s)}updatedConfig(){let t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${jc}`,e.backend="TensorFlow.js",e}toJSON(t,e=!0){let o=sg(this.updatedConfig());return e?JSON.stringify(o):o}call(t,e){return z(()=>{t=ee(t);let o=new Xo;for(let n=0;n<this.inputs.length;++n)o.add(this.inputs[n],t[n]);return Gl(this.outputs,o,e)})}computeMask(t,e){return z(()=>{t=ee(t);let o;return e==null?o=Wo(null,t.length):o=ee(e),this.runInternalGraph(t,o)[1]})}computeOutputShape(t){let e=Uc(t);if(e.length!==this.inputLayers.length)throw new L(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);let o={};for(let a=0;a<e.length;a++){let l=this.inputLayers[a],u=e[a],c=l.name+"_0_0";o[c]=u}let n=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(Am);if(n.length>1)for(let a of n){let l=this.nodesByDepth[a];for(let u of l){let c=u.outboundLayer;if(this.inputLayers.map(d=>d.id).indexOf(c.id)!==-1)continue;let p=[];for(let d=0;d<u.inboundLayers.length;d++){let g=u.inboundLayers[d],x=u.nodeIndices[d],b=u.tensorIndices[d],w=`${g.name}_${x}_${b}`,C=o[w];p.push(C)}let m=c.computeOutputShape(Xe(p)),f=Uc(m),h=c.inboundNodes.indexOf(u);for(let d=0;d<f.length;d++){let g=`${c.name}_${h}_${d}`;o[g]=f[d]}}}let s=[],i=[];for(let a=0;a<this.outputLayers.length;a++){let l=this.outputLayers[a],u=this.outputLayersNodeIndices[a],c=this.outputLayersTensorIndices[a],p=`${l.name}_${u}_${c}`;i.push(p)}for(let a=0;a<i.length;a++){let l=i[a];To(l in o),s.push(o[l])}return Xe(s)}runInternalGraph(t,e){e==null&&(e=Wo(null,t.length));let o={};for(let l=0;l<this.inputs.length;++l){let u=this.inputs[l],c=t[l],p=e[l];o[u.id]=[c,p]}let n=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Am);for(let l of n){let u=this.nodesByDepth[l];for(let c of u){let p=c.outboundLayer,m=c.inputTensors,f=c.outputTensors,h=new Array;for(let d of m)d.id in o&&h.push(o[d.id]);if(h.length===m.length){let d={},g,x,b,w;if(c.callArgs!=null&&(d=c.callArgs),h.length===1){let[C,S]=h[0];d.mask==null&&(d.mask=S),b=ee(p.call(C,d)),w=ee(p.computeMask(C,S)),g=[C],x=[S]}else g=h.map(C=>C[0]),x=h.map(C=>C[1]),d.mask==null&&(d.mask=x),b=ee(p.call(g,d)),w=ee(p.computeMask(g,x));if(p.activityRegularizer)throw new yt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let C=0;C<f.length;++C){let S=f[C],k=b[C],E=w[C];o[S.id]=[k,E]}}}}let s=[],i=[],a=[];for(let l of this.outputs){To(l.id in o,`Could not compute output ${l.name} : ${l.id}`);let[u,c]=o[l.id];a.push(u.shape),s.push(u),i.push(c)}return[s,i,a]}buildNodeConversionMap(t){let e={},o;for(let n of this.layers){o=n instanceof Yr?1:0;for(let s=0;s<n.inboundNodes.length;s++){let i=Yr.nodeKey(n,s);this.containerNodes.has(i)&&(e[i]=o,o+=1)}}return e}getLayer(t,e){if(e!=null){if(this.layers.length<=e)throw new L(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}else if(t==null)throw new L("Provide either a layer name or layer index");for(let o of this.layers)if(o.name===t)return o;throw new L(`No such layer: ${t}`)}calculateLosses(){return z(()=>{let t=[];for(let e of this.layers)for(let o=0;o<e.inboundNodes.length;++o){let n=Yr.nodeKey(e,o);this.containerNodes.has(n)&&t.push(...e.calculateLosses())}return t})}getConfig(){let t={name:this.name},e=this.buildNodeConversionMap(this.layers),o=[];for(let i of this.layers){let a=i.getClassName(),l=i.getConfig(),u=[];for(let p=0;p<i.inboundNodes.length;p++){let m=i.inboundNodes[p],f=Yr.nodeKey(i,p),h={};if(this.containerNodes.has(f)){if(m.callArgs)try{JSON.stringify(m.callArgs),h=m.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),h={}}if(m.inboundLayers.length>0){let d=[];for(let g=0;g<m.inboundLayers.length;g++){let x=m.inboundLayers[g],b=m.nodeIndices[g],w=m.tensorIndices[g],C=Yr.nodeKey(x,b),S=e[C];S==null&&(S=0),d.push([x.name,S,w,h])}u.push(d)}}}let c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,o.push(c)}t.layers=o;let n=[];for(let i=0;i<this.inputLayers.length;i++){let a=this.inputLayers[i],l=this.inputLayersNodeIndices[i],u=Yr.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.inputLayersTensorIndices[i];n.push([a.name,c,p])}t.inputLayers=n;let s=[];for(let i=0;i<this.outputLayers.length;i++){let a=this.outputLayers[i],l=this.outputLayersNodeIndices[i],u=Yr.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.outputLayersTensorIndices[i];s.push([a.name,c,p])}return t.outputLayers=s,t}static fromConfig(t,e,o={},n=!1){let s={},i={};function a(g,x){g.name in i?i[g.name].push(x):i[g.name]=[x]}function l(g,x){let b=[],w;for(let C of x){let S=C[0],k=C[1],E=C[2];if(w=C[3]==null?{}:C[3],!(S in s)){a(g,x);return}let A=s[S];if(A.inboundNodes.length<=k){a(g,x);return}let D=A.inboundNodes[k];b.push(D.outputTensors[E])}b.length>0&&g.apply(Xe(b),w)}function u(g){let x=g.name,b=Xr(g,e.customObjects!=null?e.customObjects:{});b.setFastWeightInitDuringBuild(n),s[x]=b,g.inboundNodes.forEach(C=>{if(!(C instanceof Array))throw new L(`Corrupted configuration, expected array for nodeData: ${C}`);a(b,C)})}let c=e.name,p=e.layers;for(let g of p)u(g);for(;!oN(i);)for(let g of p){let x=s[g.name];if(x.name in i){let b=i[x.name];delete i[x.name];for(let w of b)l(x,w)}}let m=[],f=[],h=e.inputLayers;for(let g of h){let x=g[0],b=g[1],w=g[2];To(x in s);let S=s[x].inboundNodes[b].outputTensors;m.push(S[w])}let d=e.outputLayers;for(let g of d){let x=g[0],b=g[1],w=g[2];To(x in s);let S=s[x].inboundNodes[b].outputTensors;f.push(S[w])}return new t({inputs:m,outputs:f,name:c})}get stateful(){if(this._stateful)throw new L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let t of this.layers)if(t.stateful)return!0;return!1}resetStates(){z(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}};function W4(r,t,e){let o=t.length;if(r==null||Array.isArray(r)&&r.length===0)return t.map(n=>null);if(o===1)return Array.isArray(r)&&r.length===1?r:typeof r=="object"&&t[0]in r?[r[t[0]]]:[r];if(Array.isArray(r)){if(r.length!==o)throw new Error(`Provided ${e} is an array of ${r.length} element(s), but the model has ${o} outputs. Make sure a set of weights is provided for each model output.`);return r}else if(typeof r=="object"&&Object.keys(r).length>0&&typeof r[Object.keys(r)[0]]=="object"){let n=[];return t.forEach(s=>{s in r?n.push(r[s]):n.push(null)}),n}else throw new Error(`The model has multiple (${o}) outputs, so ${e} must be either an array with ${o} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(r)}`)}function ig(r,t){return W4(r,t,"classWeight")}async function ag(r,t,e,o){if(t!=null||o!=null)throw new Error("Support sampleWeight is not implemented yet");if(e!=null){let n=z(()=>{if(r.shape.length===1)return Wr(r);if(r.shape.length===2){if(r.shape[1]>1)return _i(r,1);if(r.shape[1]===1)return F(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await n.data());St(n);let i=[];return s.forEach(a=>{if(e[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(e[a])}),ze(i,"float32")}else return null}function MN(r,t){return _(r,t)}var H4=32;function GN(r,t){let e,o,n=t;e=n.xs,o=n.ys,y.assert(e!=null&&o!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let s=BN("input",r.inputNames,e),i=BN("output",r.outputNames,o),a=s[0].shape[0];y.assert(s.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),y.assert(i.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let l=0;l<s.length;l++)y.assert(s[l].shape[0]===a,()=>`Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);for(let l=0;l<i.length;l++)y.assert(i[l].shape[0]===a,()=>`Batch size mismatch: output ${r.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);return{xs:s,ys:i}}function BN(r,t,e){if(e instanceof Ot)return[e];if(Array.isArray(e))return y.assert(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${r} keys ${t}.`),e;{let o=[];for(let n of t){if(e[n]==null)throw new L(`The feature data generated by the dataset lacks the required ${r} key '${n}'.`);o.push(e[n])}return o}}function K4(r){if(r.length===3)throw new yt("Validation with sample weights is not implemented yet.");return{xs:r[0],ys:r[1]}}async function UN(r,t,e){let o=e.batchesPerEpoch!=null;if(y.assert(r.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),y.assert(e!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),y.assert(e.epochs!=null&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),y.assert(!o||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),y.assert(e.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;try{let n=e.validationData!=null,s,i;if(n)if(VN(e.validationData))y.assert(e.validationBatches==null||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{let g=K4(e.validationData);s=g.xs,i=g.ys}let a=r.makeTrainFunction(),l=r.getDedupedMetricsNames(),u;n?u=l.slice().concat(l.map(g=>"val_"+g)):u=l.slice();let c=Yd(e.callbacks,e.yieldEvery),p=e.verbose==null?1:e.verbose,{callbackList:m,history:f}=Zd(c,p,e.epochs,null,null,q4(t,e),null,n,u);m.setModel(r),r.history=f,await m.onTrainBegin(),r.stopTraining_=!1;let h=e.initialEpoch==null?0:e.initialEpoch,d=await t.iterator();for(;h<e.epochs;){let g={};await m.onEpochBegin(h);let x=0,b=0;for(o||(d=await t.iterator());!o||x<e.batchesPerEpoch;){let w=await d.next();if(o&&w.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${x} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(w.value!=null){let{xs:C,ys:S}=GN(r,w.value),k={};k.batch=b,k.size=C[0].shape[0],await m.onBatchBegin(b,k);let E=[];if(e.classWeight!=null){let O=ig(e.classWeight,r.outputNames);for(let M=0;M<O.length;++M)E.push(await ag(S[M],null,O[M]))}let A=C.concat(S).concat(E),D=a(A);St(A);for(let O=0;O<l.length;++O){let M=l[O],B=D[O];k[M]=B,qe(B)}await m.onBatchEnd(b,k),Kd(k),b++,x++}if(o?x>=e.batchesPerEpoch:w.done){if(n){let C;VN(e.validationData)?C=ee(await r.evaluateDataset(e.validationData,{batches:e.validationBatches})):C=ee(r.evaluate(s,i,{batchSize:e.validationBatchSize==null?H4:e.validationBatchSize,verbose:0}));for(let S=0;S<r.metricsNames.length;++S)g[`val_${r.metricsNames[S]}`]=C[S]}break}if(r.stopTraining_)break}if(await m.onEpochEnd(h,g),h++,r.stopTraining_)break}return await m.onTrainEnd(),await r.history.syncData(),r.history}finally{r.isTraining=!1}}function q4(r,t){let e=null;return t.batchesPerEpoch!=null?e=t.batchesPerEpoch:Number.isFinite(r.size)&&(e=r.size),e}function VN(r){return typeof r.iterator=="function"}function j4(r){return typeof r.next=="function"}async function WN(r,t,e){e=e||{};let o=e.batches!=null,n=r.testFunction,s=[];if(e.verbose>0)throw new yt("Verbose mode is not implemented yet.");y.assert(!o||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);let i=j4(t)?t:await t.iterator(),a=0,l=0;for(;!o||l<e.batches;){let u=await i.next();if(s=z(()=>{if(u.value){let{xs:c,ys:p}=GN(r,u.value),m=c.concat(p),f=z(()=>n(m));if(St(m),l===0)for(let d=0;d<f.length;++d)s.push(Ct(0));let h=m[0].shape[0];for(let d=0;d<f.length;++d){let g=f[d],x=s[d];s[d]=z(()=>X(s[d],_(h,g))),l>0&&St(x)}St(f),a+=h,++l}return s}),u.done){o&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<s.length;++u){let c=s[u];s[u]=nt(s[u],a),St(c)}return Xe(s)}function lg(r){y.assert(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function Xc(r,t,e){return r==null?[null]:Array.isArray(r)?r.map(o=>Bi(o,t,e-t)):Bi(r,t,e-t)}function ug(r,t){return z(()=>r==null?null:Array.isArray(r)?r.map(e=>ug(e,t)):Vd(r,t.dtype==="int32"?t:Y(t,"int32")))}function cg(r,t){let e=[],o=0,n=null;for(;o<r;)n=o+t,n>=r&&(n=r),e.push([o,n]),o=n;return e}async function X4(r,t,e,o,n,s,i,a,l,u,c,p,m,f,h){n==null&&(n=32),s==null&&(s=1),c==null&&(c=!0),m==null&&(m=0);let d=!1;if(l!=null&&u!=null&&(d=!0),h!=null&&(d=!0,f==null))throw new L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let g=r.checkNumSamples(e,n,f,"steps_per_epoch"),x;g!=null&&(x=hr(0,g)),i==null&&(i=1);let{callbackList:b,history:w}=Zd(a,i,s,m,g,f,n,d,p);b.setModel(r),r.history=w,await b.onTrainBegin(),r.stopTraining_=!1;for(let C=m;C<s;++C){await b.onEpochBegin(C);let S={};if(f!=null)throw new yt("stepsPerEpoch mode is not implemented yet.");{if(c==="batch")throw new yt("batch shuffling is not implemneted yet");c&&y.shuffle(x);let k=ze(x),E=cg(g,n);for(let A=0;A<E.length;++A){let D={};if(await b.onBatchBegin(A,D),z(()=>{let O=E[A][0],M=E[A][1],B=Bi(k,O,M-O);D.batch=A,D.size=M-O;let V=ug(e,B),U=t(V);for(let G=0;G<o.length;++G){let W=o[G],j=U[G];D[W]=j,qe(j)}if(A===E.length-1&&d){let G=r.testLoop(l,u,n);for(let W=0;W<o.length;++W){let j=o[W],H=G[W];qe(H),S["val_"+j]=H}}}),await b.onBatchEnd(A,D),Kd(D),r.stopTraining_)break}k.dispose()}if(await b.onEpochEnd(C,S),r.stopTraining_)break}return await b.onTrainEnd(),await r.history.syncData(),r.history}async function HN(r,t,e,o={}){if(r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;let n,s,i,a,l,u,c,p,m;try{let f=o.batchSize==null?32:o.batchSize;lg(f);let h=!1,d=await r.standardizeUserData(t,e,o.sampleWeight,o.classWeight,h,f);n=d[0],s=d[1],m=d[2];let g=!1,x;if(o.validationData!=null&&o.validationData.length>0){if(g=!0,o.validationData.length===2)l=o.validationData[0],u=o.validationData[1];else throw o.validationData.length===3?new yt("validationData including sample weights is not supported yet."):new L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${o.validationData} is invalid.`);let D=!0,O=await r.standardizeUserData(l,u,null,null,D,f);c=O[0],p=O[1],x=c.concat(p)}else if(o.validationSplit!=null&&o.validationSplit>0&&o.validationSplit<1){g=!0;let D=Math.floor(n[0].shape[0]*(1-o.validationSplit)),O=n[0].shape[0];c=Xc(n,D,O),i=n,n=Xc(n,0,D),p=Xc(s,D,O),a=s,s=Xc(s,0,D),x=c.concat(p)}else o.validationSteps!=null&&(g=!0);let b=n.concat(s).concat(m);r.checkTrainableWeightsConsistency();let w=r.makeTrainFunction(),C=r.getDedupedMetricsNames(),S,k;g?(r.makeTestFunction(),S=r.testFunction,k=C.slice().concat(C.map(D=>"val_"+D))):(S=null,x=[],k=C.slice());let E=Yd(o.callbacks,o.yieldEvery);return await X4(r,w,b,C,f,o.epochs,o.verbose,E,S,x,o.shuffle,k,o.initialEpoch,null,null)}finally{r.isTraining=!1,Yo(n,t),Yo(s,e),Yo(i,t),Yo(a,e),Yo(c,l),Yo(p,u),m!=null&&St(m)}}function ZC(r){let t=[];r instanceof Ot&&(r=[r]);for(let e=0;e<r.length;++e){let o=r[e];if(o.rank===1)t.push(Vi(o,1));else{if(o.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(o)}}return t}function Yo(r,t){if(r==null)return;let e=[];if(t instanceof Ot)e.push(t.id);else if(Array.isArray(t))t.forEach(n=>e.push(n.id));else if(t!=null)for(let n in t){let s=t[n];e.push(s.id)}let o=[];if(r instanceof Ot)e.indexOf(r.id)===-1&&o.push(r);else if(Array.isArray(r))r.forEach(n=>{e.indexOf(n.id)===-1&&o.push(n)});else if(r!=null)for(let n in r){let s=r[n];e.indexOf(s.id)===-1&&o.push(s)}o.forEach(n=>{n.isDisposed||n.dispose()})}function Y4(r){return r instanceof Ot}function QC(r){return Array.isArray(r)}function KN(r){return!Y4(r)&&!QC(r)}function qN(r,t,e,o=!0,n=""){if(t==null||t.length===0){if(r!=null){let i=!1;if(QC(r)&&r.length>0)i=!0;else if(KN(r)){for(let a in r)if(r.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new L(`Error when checking model ${n} expected no data, but got ${r}`)}return[]}if(r==null)return t.map(i=>null);let s;if(KN(r)){r=r,s=[];for(let i of t){if(r[i]==null)throw new L(`No data provided for "${i}". Need data for each key in: ${t}`);s.push(r[i])}}else if(QC(r)){if(r=r,r.length!==t.length)throw new L(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);s=r}else{if(r=r,t.length>1)throw new L(`The model ${n} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);s=[r]}if(s=ZC(s),e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new L(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c>=0&&u!==c)throw new L(`${n} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${n} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return s}function Z4(r,t,e){let o=Ko(r.map(s=>s.shape[0]));o.sort();let n=Ko(t.map(s=>s.shape[0]));if(n.sort(),o.length>1)throw new L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map(s=>s.shape))}`);if(n.length>1)throw new L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(s=>s.shape))}`);if(o.length>0&&n.length>0&&!y.arraysEqual(o,n))throw new L(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${n[0]} target sample(s).`)}function Q4(r,t,e){let o=[Wl,qc,Hl];for(let n=0;n<r.length;++n){let s=r[n],i=t[n],a=e[n];if(i!=null){if(i===Hl&&s.shape[s.shape.length-1]===1)throw new L(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(o.indexOf(i)!==-1){let l=s.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){let p=l[c],m=u[c];if(m!=null&&p!==m)throw new L(`A target Tensor with shape ${s.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function jN(r,t,e,o=!0,n=""){let s;if(Array.isArray(r)){if(r.length!==t.length)throw new L(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${r.length} Tensors(s).`);s=r}else{if(t.length>1)throw new L(`The model expects ${t.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);s=[r]}if(e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new L(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c!==u)throw new L(`Error when checking ${n}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function J4(r,t){if(r==null||Array.isArray(r)&&r.length===0)return t.map(o=>[]);let e;if(typeof r=="string"||typeof r=="function")e=[r];else if(Array.isArray(r)||typeof r=="object")e=r;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);if(Array.isArray(e))return t.map(o=>e);{let o=[];for(let n of t){let s=e.hasOwnProperty(n)?e[n]:[];Array.isArray(s)||(s=[s]),o.push(s)}return o}}var tH="layers-model",Zo=class extends Yr{constructor(t){super(t),this.isTraining=!1}summary(t,e,o=console.log){if(!this.built)throw new L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");LN(this,t,e,o)}compile(t){if(t.loss==null&&(t.loss=[]),this.loss=t.loss,typeof t.optimizer=="string")this.optimizer_=PN(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof lr))throw new L("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(!Array.isArray(t.loss)&&typeof t.loss!="string"&&typeof t.loss!="function"){t.loss=t.loss;for(let i in t.loss)if(this.outputNames.indexOf(i)===-1)throw new L(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(let i of this.outputNames)t.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),e.push(Jd(t.loss[i]))}else if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);e=t.loss.map(a=>Jd(a))}else{let i=Jd(t.loss);this.outputs.forEach(a=>{e.push(i)})}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){let a=this.internalOutputShapes[i],l=this.outputNames[i];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[i])}let o=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Un("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([a,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});let n=J4(t.metrics,this.outputNames),s=(i,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[i]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,i])};Un("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=n[i];(u=>{let c="",p,m,f;for(let h of u){if(typeof h=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(h)!==-1){let g=this.internalOutputShapes[i];g[g.length-1]===1||this.lossFunctions[i]===qc?["accuracy","acc"].indexOf(h)!==-1?m=eg:["crossentropy","ce"].indexOf(h)!==-1&&(m=KC):this.lossFunctions[i]===Kc?["accuracy","acc"].indexOf(h)!==-1?m=qC:["crossentropy","ce"].indexOf(h)!==-1&&(m=jC):["accuracy","acc"].indexOf(h)!==-1?m=rg:["crossentropy","ce"].indexOf(h)!==-1&&(m=og);let x;["accuracy","acc"].indexOf(h)!==-1?x="acc":["crossentropy","ce"].indexOf(h)!==-1&&(x="ce"),f=m,p=c+x}else f=_N(h),p=c+Ym(h);let d;Un(p,()=>{d=f}),s(i,p,d)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,o={}){let n=o.batchSize==null?32:o.batchSize;lg(n);let s=!0,i=this.standardizeUserDataXY(t,e,s,n);try{let a=i[0].concat(i[1]);this.makeTestFunction();let l=this.testFunction,u=this.testLoop(l,a,n,o.verbose,o.steps);return Xe(u)}finally{Yo(i[0],t),Yo(i[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),WN(this,t,e)}checkNumSamples(t,e,o,n="steps"){let s;if(o!=null){if(s=null,e!=null)throw new L(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else if(t!=null)Array.isArray(t)?s=t[0].shape[0]:s=t.shape[0];else throw new L(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return s}execute(t,e){if(Array.isArray(e)&&e.length===0)throw new L("`outputs` is an empty Array, which is not allowed.");let o=Array.isArray(e),n=o?e:[e],s=this.retrieveSymbolicTensors(n),i=new Xo;if(t instanceof Ot&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new L(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)i.add(this.inputs[l],t[l])}else for(let l of this.inputs){let u=t[l.name];if(u==null)throw new L(`No value is provided for the model's input ${l.name}`);i.add(l,u)}let a=Gl(s,i);return o?a:a[0]}retrieveSymbolicTensors(t){let e=Wo(null,t.length),o=t.length;for(let n of this.layers){let s=Array.isArray(n.output)?n.output:[n.output],i=s.map(a=>a.name);for(let a=0;a<t.length;++a){let l=i.indexOf(t[a]);if(l!==-1&&(e[a]=s[l],o--),o===0)break}if(o===0)break}if(o>0){let n=[];throw e.forEach((s,i)=>{s==null&&n.push(t[i])}),new L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,o=!1){return z(()=>{let n=this.checkNumSamples(t);if(o)throw new yt("Verbose predictLoop() is not implemented yet.");let s=cg(n,e),i=this.outputs.map(a=>[]);for(let a=0;a<s.length;++a)z(()=>{let u=s[a][0],c=s[a][1],p=Xc(t,u,c),m=[];if(Array.isArray(p))for(let h=0;h<p.length;++h)m.push({key:this.inputs[h],value:p[h]});else m.push({key:this.inputs[0],value:p});let f=new Xo(m);return Gl(this.outputs,f)}).forEach((u,c)=>i[c].push(u));return Xe(i.map(a=>ue(a,0)))})}predict(t,e={}){let o=ZC(t);jN(o,this.inputNames,this.feedInputShapes,!1);try{let n=e.batchSize==null?32:e.batchSize;return lg(n),this.predictLoop(o,n)}finally{Yo(o,t)}}predictOnBatch(t){jN(t,this.inputNames,this.feedInputShapes,!0);let e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,o=!0,n){if(this.optimizer_==null)throw new ur("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let s=[];for(let i=0;i<this.feedOutputShapes.length;++i){let a=this.feedOutputShapes[i];this.feedLossFns[i]===Kc?s.push(a.slice(0,a.length-1).concat([1])):s.push(a)}if(t=qN(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=qN(e,this.feedOutputNames,s,!1,"target"),Z4(t,e,null),Q4(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&n!=null&&n>0&&t[0].shape[0]%n!==0)throw new L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,o,n,s=!0,i){let[a,l]=this.standardizeUserDataXY(t,e,s,i);if(o!=null)throw new Error("sample weight is not supported yet.");let u=null;if(n!=null){let c=ig(n,this.outputNames);u=[];for(let p=0;p<c.length;++p)u.push(await ag(l[p],null,c[p]))}return[a,l,u]}testLoop(t,e,o,n=0,s){return z(()=>{let i=this.checkNumSamples(e,o,s,"steps"),a=[];if(n>0)throw new yt("Verbose mode is not implemented yet.");if(s!=null)throw new yt("steps mode in testLoop() is not implemented yet");{let l=cg(i,o),u=ze(hr(0,i));for(let c=0;c<l.length;++c){let p=l[c][0],m=l[c][1],f=Bi(u,p,m-p),h=ug(e,f),d=t(h);if(c===0)for(let g=0;g<d.length;++g)a.push(Ct(0));for(let g=0;g<d.length;++g){let x=d[g];a[g]=X(a[g],_(m-p,x))}}for(let c=0;c<a.length;++c)a[c]=nt(a[c],i)}return a})}getDedupedMetricsNames(){let t=this.metricsNames,e=[];for(let o=0;o<t.length;++o){let n=t[o],s=n;PC(t,n)>1&&(s+=`_${PC(t.slice(0,o),n)}`),e.push(s)}return e}makeTrainFunction(){return t=>{let e=[],o=t.slice(0,this.inputs.length),n=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],a=()=>{let p=[];for(let d=0;d<this.inputs.length;++d)p.push({key:this.inputs[d],value:o[d]});let m=new Xo(p),f=Gl(this.outputs,m,{training:!0}),h;for(let d=0;d<this.lossFunctions.length;++d){let g=this.lossFunctions[d],x=g(n[d],f[d]);s[d]!=null&&(x=MN(x,s[d]));let b=he(x);e.push(b),d===0?h=x:h=X(h,x)}for(let d=0;d<this.metricsTensors.length;++d){let g;if(this.outputs.length>1&&d<this.outputs.length)g=e[d];else{let x=this.metricsTensors[d][0],b=this.metricsTensors[d][1];g=he(x(n[b],f[b]))}qe(g),i.push(g)}return h=he(h),this.calculateLosses().forEach(d=>{h=X(h,d)}),h},l=this.collectedTrainableWeights.map(p=>p.read()),u=!0;return[this.optimizer_.minimize(a,u,l)].concat(i)}}makeTestFunction(){this.testFunction=t=>z(()=>{let e=[],o,n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let u=0;u<this.inputs.length;++u)i.push({key:this.inputs[u],value:n[u]});let a=new Xo(i),l=Gl(this.outputs,a);for(let u=0;u<this.lossFunctions.length;++u){let c=this.lossFunctions[u],p=he(c(s[u],l[u]));u===0?o=p:o=X(o,p),e.push(o)}for(let u=0;u<this.metricsTensors.length;++u){let c=this.metricsTensors[u][0],p=this.metricsTensors[u][1],m=he(c(s[p],l[p]));e.push(m)}return e})}async fit(t,e,o={}){return HN(this,t,e,o)}async fitDataset(t,e){return UN(this,t,e)}async trainOnBatch(t,e){let o=await this.standardizeUserData(t,e),n=o[0],s=o[1],a=this.makeTrainFunction()(n.concat(s)),l=[];for(let u of a){let c=await u.data();l.push(c[0])}return St(a),Yo(o[0],t),Yo(o[1],e),Xe(l)}getNamedWeights(t){let e=[],o=t!=null&&t.trainableOnly,n=o?this.trainableWeights:this.weights,s=this.getWeights(o);for(let i=0;i<n.length;++i)o&&!n[i].trainable||e.push({name:n[i].originalName,tensor:s[i]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){let t=super.dispose();if(t.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){let e=sm().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-sm().numTensors}return t}getLossIdentifiers(){let t;if(typeof this.loss=="string")t=Ho(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if(typeof e!="string")throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(e=>Ho(e))}else{let e=Object.keys(this.loss);t={};let o=this.loss;for(let n of e)if(typeof o[n]=="string")t[n]=Ho(o[n]);else throw new Error("Serialization of non-string loss is not supported.")}return t}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[Ho(Ym(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Ho(Ym(t)));{let t={};for(let e in this.metrics)t[e]=Ho(Ym(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(t.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(t.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(t.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");let e=Zm(t.optimizer_config),o=Xr(e),n;if(typeof t.loss=="string")n=Mi(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(i=>Mi(i));else if(t.loss!=null){n={};for(let i in t.loss)n[i]=Mi(t.loss[i])}let s;if(Array.isArray(t.metrics))s=t.metrics.map(i=>Mi(i));else if(t.metrics!=null){s={};for(let i in t.metrics)s[i]=Mi(t.metrics[i])}this.compile({loss:n,metrics:s,optimizer:o})}async save(t,e){if(typeof t=="string"){let u=Fi.getSaveHandlers(t);if(u.length===0)throw new L(`Cannot find any save handlers for URL '${t}'`);if(u.length>1)throw new L(`Found more than one (${u.length}) save handlers for URL '${t}'`);t=u[0]}if(t.save==null)throw new L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let o=await Fi.encodeWeights(this.getNamedWeights(e)),n=!1,s=null,a={modelTopology:this.toJSON(s,n),format:tH,generatedBy:`TensorFlow.js tfjs-layers v${jc}`,convertedBy:null};if((e==null?!1:e.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();let u="optimizer",{data:c,specs:p}=await Fi.encodeWeights(await this.optimizer.getWeights(),u);o.specs.push(...p),o.data=Fi.concatenateArrayBuffers([o.data,c])}return this.userDefinedMetadata!=null&&(YC(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=o.data,a.weightSpecs=o.specs,t.save(a)}setUserDefinedMetadata(t){YC(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}};Zo.className="Model";K.registerClass(Zo);var pg=class extends Zo{};pg.className="Functional";K.registerClass(pg);var Wi=class extends Zo{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=t.name!=null?t.name:Ma("sequential_"),t.layers!=null)for(let e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(o=>o<0))throw new L(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){let e=t instanceof Wi||t instanceof Zo,o;if(e){if(o=t,o.outputs.length!==1)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(o.inputs.length!==1)throw new L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(t.inboundNodes.length===0){if(t.batchInputShape==null)throw new L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let n=UC({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(n)}if(e)this.outputs=o.outputs,this.inputs=o.inputs;else{if(t.inboundNodes.length!==1)throw new L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(t.inboundNodes[0].outputTensors.length!==1)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=GC(this.outputs[0])}this.inboundNodes=[],new Gi({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Wo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(n=>n.shape),outputShapes:this.outputs[0].shape})}else{let n=t.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return this.model==null&&this.build(),this.model.call(t,e)}build(t){if(zt(t),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Zo({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,o=console.log){this.built||this.build(),super.summary(t,e,o)}setWeights(t){this.model==null&&this.build(),this.model.setWeights(t)}evaluate(t,e,o={}){if(!this.built)throw new ur("The model needs to be compiled before being used.");return this.model.evaluate(t,e,o)}async evaluateDataset(t,e){if(!this.built)throw new ur("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return this.model==null&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return this.model==null&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,o={}){if(!this.built)throw new ur("The model needs to be compiled before being used.");return this.model.fit(t,e,o)}async fitDataset(t,e){if(!this.built)throw new ur("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,o={},n=!1){let s,i={};if(e instanceof Array){if(e[0].className==null||e[0].className==="Merge")throw new L("Legacy serialization format not supported yet.");s=e}else y.assert(e.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,i=e;let a=new t(i);if(!(a instanceof Wi))throw new yt(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(let l of s){let c=Xr(l,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),a.add(c)}return a}set stopTraining(t){if(this.model==null)throw new L("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(this.model==null)throw new L("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let t=[];for(let e of this.layers){let o={};o.className=e.getClassName(),o.config=e.getConfig(),t.push(o)}return{name:this.name,layers:t}}};Wi.className="Sequential";K.registerClass(Wi);var xr=class extends K.Serializable{getConfig(){return{}}},mg=class extends xr{apply(t,e=1){return yN(t,e)}};mg.className="elu";K.registerClass(mg);var fg=class extends xr{apply(t){return bm(t)}};fg.className="selu";K.registerClass(fg);var hg=class extends xr{apply(t){return jr(t)}};hg.className="relu";K.registerClass(hg);var dg=class extends xr{apply(t){return z(()=>Nl(6,jr(t)))}};dg.className="relu6";K.registerClass(dg);var gg=class extends xr{apply(t){return t}};gg.className="linear";K.registerClass(gg);var xg=class extends xr{apply(t){return Mo(t)}};xg.className="sigmoid";K.registerClass(xg);var yg=class extends xr{apply(t){return wN(t)}};yg.className="hardSigmoid";K.registerClass(yg);var bg=class extends xr{apply(t){return Us(t)}};bg.className="softplus";K.registerClass(bg);var wg=class extends xr{apply(t){return bN(t)}};wg.className="softsign";K.registerClass(wg);var Cg=class extends xr{apply(t){return fc(t)}};Cg.className="tanh";K.registerClass(Cg);var Yc=class extends xr{apply(t,e=-1){return Dl(t,e)}};Yc.className="softmax";K.registerClass(Yc);var Ig=class extends xr{apply(t,e=-1){return dm(t,e)}};Ig.className="logSoftmax";K.registerClass(Ig);var Sg=class extends xr{apply(t,e=1){return z(()=>_(Mo(_(t,e)),t))}};Sg.className="swish";K.registerClass(Sg);var vg=class extends xr{apply(t){return z(()=>_(t,fc(Us(t))))}};vg.className="mish";K.registerClass(vg);function Hn(r){return r.getClassName()}function JC(r,t={}){return Ks(r,K.SerializationMap.getMap().classNameMap,t,"activation")}function Kn(r){if(r==null){let t={};return t.className="linear",t.config={},JC(t)}if(typeof r=="string"){let t={};return t.className=r,t.config={},JC(t)}else return r instanceof xr?r:JC(r)}function eH(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}var kg=class extends K.Serializable{},Qm=class extends kg{constructor(t){super(),eH(t),this.l1=t==null||t.l1==null?.01:t.l1,this.l2=t==null||t.l2==null?.01:t.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(t){return z(()=>{let e=te([1]);return this.hasL1&&(e=X(e,at(_(this.l1,Le(t))))),this.hasL2&&(e=X(e,at(_(this.l2,Bl(t))))),F(e,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}};Qm.className="L1L2";K.registerClass(Qm);var XN={l1l2:"L1L2"};function Xt(r){return Fc(r)}function YN(r,t={}){return Ks(r,K.SerializationMap.getMap().classNameMap,t,"regularizer")}function oe(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in XN?XN[r]:r,config:{}};return YN(e)}else return r instanceof kg?r:YN(r)}var Jm=class extends At{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null&&(this.maxValue=t.maxValue)}call(t,e){t=Tt(t);let o=jr(t);return this.maxValue!=null&&(o=Je(o,0,this.maxValue)),o}computeOutputShape(t){return t}getConfig(){let t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}};Jm.className="ReLU";K.registerClass(Jm);var tf=class extends At{constructor(t){super(t??{}),this.DEFAULT_ALPHA=.3,t==null&&(t={}),this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=Tt(t);return kl(o,this.alpha)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};tf.className="LeakyReLU";K.registerClass(tf);var ef=class extends At{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",t==null&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Zt(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=oe(t.alphaRegularizer),this.alphaConstraint=we(t.alphaConstraint),t.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else if(typeof t.sharedAxes=="number")this.sharedAxes=[t.sharedAxes];else throw new L(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`)}build(t){t=zt(t);let e=t.slice(1);if(this.sharedAxes!=null)for(let n of this.sharedAxes)e[n-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let o={};if(this.sharedAxes!=null)for(let n=1;n<t.length;++n)o[n]=t[n];this.inputSpec=[new re({ndim:t.length,axes:o})],this.built=!0}call(t,e){return t=Tt(t),$l(t,this.alpha.read())}getConfig(){let t={alphaInitializer:ae(this.alphaInitializer),alphaRegularizer:Xt(this.alphaRegularizer),alphaConstraint:be(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}};ef.className="PReLU";K.registerClass(ef);var rf=class extends At{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA=1,t==null&&(t={}),t.alpha!=null&&t.alpha!==this.DEFAULT_ALPHA)throw new yt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=Tt(t);return Pi(o)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};rf.className="ELU";K.registerClass(rf);var of=class extends At{constructor(t){super(t??{}),this.DEFAULT_THETA=1,t==null&&(t={}),this.theta=t.theta==null?this.DEFAULT_THETA:t.theta}call(t,e){let o=Tt(t);return _(o,Y(_e(o,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){let t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}};of.className="ThresholdedReLU";K.registerClass(of);var nf=class extends At{constructor(t){super(t??{}),this.DEFAULT_AXIS=1,t==null&&(t={}),this.softmax=new Yc().apply,this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis}call(t,e){let o=Tt(t);return this.softmax(o,this.axis)}computeOutputShape(t){return t}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};nf.className="Softmax";K.registerClass(nf);function Ga(r,t,e){if(typeof r=="number")return Wo(r,t);if(r.length!==t)throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${r.length} elements.`);for(let o=0;o<t;++o){let n=r[o];if(!hN(n))throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(r)} including a non-integer number ${n}`)}return r}function zr(r,t,e,o,n=1){if(r==null)return r;let s=t+(t-1)*(n-1),i;return e==="same"?i=r:i=r-s+1,Math.floor((i+o-1)/o)}function qn(r,t,e,o){if(r==null)return null;if(o==="valid")r=r*t+Wn([e-t,0]);else if(o==="same")r=r*t;else throw new L(`Unsupport padding mode: ${o}.`);return r}function pf(r,t){return z(()=>(de(t),t==="channelsFirst"?Rt(r,[0,2,3,1]):r))}function t0(r,t){return z(()=>(de(t),t==="channelsFirst"?Rt(r,[0,2,3,4,1]):r))}function oH(r,t,e,o=1,n="valid",s,i=1){return z(()=>{if(s==null&&(s=vr()),de(s),r.shape.length!==3)throw new L(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);if(t.shape.length!==3)throw new L(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(e!=null&&e.shape.length!==1)throw new L(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if(s==="channelsFirst"&&(r=Rt(r,[0,2,1])),n==="causal")throw new yt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=lm(r,t,o,n==="same"?"same":"valid","NWC",i);return e!=null&&(a=kr(a,e)),a})}function ZN(r,t,e,o=[1,1],n="valid",s,i,a=null){return z(()=>{if(s==null&&(s=vr()),de(s),r.rank!==3&&r.rank!==4)throw new L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(t.rank!==3&&t.rank!==4)throw new L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let l=pf(r,s);if(n==="causal")throw new yt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Pl.conv2d({x:l,filter:t,strides:o,pad:n==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:a}),s==="channelsFirst"&&(l=Rt(l,[0,3,1,2])),l})}function nH(r,t,e,o=[1,1,1],n="valid",s,i){return z(()=>{if(s==null&&(s=vr()),de(s),r.rank!==4&&r.rank!==5)throw new L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);if(t.rank!==4&&t.rank!==5)throw new L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);let a=t0(r,s);if(n==="causal")throw new yt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=Qw(a,t,o,n==="same"?"same":"valid","NDHWC",i),e!=null&&(a=kr(a,e)),s==="channelsFirst"&&(a=Rt(a,[0,4,1,2,3])),a})}var Kl=class extends At{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Kl.verifyArgs(e),this.rank=t,Ae(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new yt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Ga(e.kernelSize,t,"kernelSize"),this.strides=Ga(e.strides==null?1:e.strides,t,"strides"),this.padding=e.padding==null?"valid":e.padding,Sr(this.padding),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,de(this.dataFormat),this.activation=Kn(e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.biasInitializer=Zt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=we(e.biasConstraint),this.biasRegularizer=oe(e.biasRegularizer),this.activityRegularizer=oe(e.activityRegularizer),this.dilationRate=Ga(e.dilationRate==null?1:e.dilationRate,t,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(t){if(To("kernelSize"in t,"required key 'kernelSize' not in config"),typeof t.kernelSize!="number"&&!Fd(t.kernelSize,"number",1,3))throw new L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){let t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Hn(this.activation),useBias:this.useBias,biasInitializer:ae(this.biasInitializer),biasRegularizer:Xt(this.biasRegularizer),activityRegularizer:Xt(this.activityRegularizer),biasConstraint:be(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}},Ua=class extends Kl{constructor(t,e){super(t,e),this.kernel=null,Ua.verifyArgs(e),this.filters=e.filters,Ae(this.filters,"filters"),this.kernelInitializer=Zt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=we(e.kernelConstraint),this.kernelRegularizer=oe(e.kernelRegularizer)}build(t){t=zt(t);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L(`The channel dimension of the input should be defined. Found ${t[e]}`);let o=t[e],n=this.kernelSize.concat([o,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:o}}],this.built=!0}call(t,e){return z(()=>{t=Tt(t);let o,n=this.bias==null?null:this.bias.read(),s=_d(this.activation.getClassName());if(s!=null&&this.rank===2)o=ZN(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(this.rank===1)o=oH(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)o=ZN(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)o=nH(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new yt("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(o=this.activation.apply(o))}return o})}computeOutputShape(t){t=zt(t);let e=[],o=this.dataFormat==="channelsLast"?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<o.length;++s){let i=zr(o[s],this.kernelSize[s],this.padding,this.strides[s],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[s]);e.push(i)}let n=[t[0]];return this.dataFormat==="channelsLast"?(n=n.concat(e),n.push(this.filters)):(n.push(this.filters),n=n.concat(e)),n}getConfig(){let t={filters:this.filters,kernelInitializer:ae(this.kernelInitializer),kernelRegularizer:Xt(this.kernelRegularizer),kernelConstraint:be(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||typeof t.filters!="number"||t.filters<1)throw new L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}},Wa=class extends Ua{constructor(t){super(2,t),Wa.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Fd(t.kernelSize,"number",1,2))throw new L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}};Wa.className="Conv2D";K.registerClass(Wa);var Ha=class extends Ua{constructor(t){super(3,t),Ha.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!(Array.isArray(t.kernelSize)&&(t.kernelSize.length===1||t.kernelSize.length===3)))throw new L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}};Ha.className="Conv3D";K.registerClass(Ha);var sf=class extends Wa{constructor(t){if(super(t),this.inputSpec=[new re({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=zt(t),t.length!==4)throw new L("Input should have rank 4; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new re({ndim:4,axes:{[e]:o}})],this.built=!0}call(t,e){return z(()=>{let o=Tt(t);if(o.shape.length!==4)throw new L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a;this.dataFormat==="channelsFirst"?(i=2,a=3):(i=1,a=2);let l=n[i],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],m=this.strides[0],f=this.strides[1],h=qn(l,m,c,this.padding),d=qn(u,f,p,this.padding),g=[s,h,d,this.filters];this.dataFormat!=="channelsLast"&&(o=Rt(o,[0,2,3,1]));let x=um(o,this.kernel.read(),g,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(x=Rt(x,[0,3,1,2])),this.bias!=null&&(x=kr(x,this.bias.read(),this.dataFormat)),this.activation!=null&&(x=this.activation.apply(x)),x})}computeOutputShape(t){t=zt(t);let e=t.slice(),o,n,s;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3):(o=3,n=1,s=2);let i=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],u=this.strides[1];return e[o]=this.filters,e[n]=qn(e[n],l,i,this.padding),e[s]=qn(e[s],u,a,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};sf.className="Conv2DTranspose";K.registerClass(sf);var af=class extends Ha{constructor(t){if(super(t),this.inputSpec=[new re({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=zt(t),t.length!==5)throw new L("Input should have rank 5; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new re({ndim:5,axes:{[e]:o}})],this.built=!0}call(t,e){return z(()=>{let o=Tt(t);if(o.shape.length!==5)throw new L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a,l;this.dataFormat==="channelsFirst"?(l=2,i=3,a=4):(l=1,i=2,a=3);let u=n[l],c=n[i],p=n[a],m=this.kernelSize[0],f=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],g=this.strides[1],x=this.strides[2],b=qn(u,d,m,this.padding),w=qn(c,g,f,this.padding),C=qn(p,x,h,this.padding),S=[s,b,w,C,this.filters];this.dataFormat!=="channelsLast"&&(o=Rt(o,[0,2,3,4,1]));let k=Jw(o,this.kernel.read(),S,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(k=Rt(k,[0,4,1,2,3])),this.bias!==null&&(k=kr(k,this.bias.read(),this.dataFormat)),this.activation!==null&&(k=this.activation.apply(k)),k})}computeOutputShape(t){t=zt(t);let e=t.slice(),o,n,s,i;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3,i=4):(o=4,n=1,s=2,i=3);let a=this.kernelSize[0],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[0],p=this.strides[1],m=this.strides[2];return e[o]=this.filters,e[n]=qn(e[n],c,a,this.padding),e[s]=qn(e[s],p,l,this.padding),e[i]=qn(e[i],m,u,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};af.className="Conv3DTranspose";K.registerClass(af);var Tg=class extends Ua{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,e.filters==null)throw new L("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(e.kernelInitializer!=null||e.kernelRegularizer!=null||e.kernelConstraint!=null)throw new L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(e.padding!=null&&e.padding!=="same"&&e.padding!=="valid")throw new L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=Zt(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=oe(e.depthwiseRegularizer),this.depthwiseConstraint=we(e.depthwiseConstraint),this.pointwiseInitializer=Zt(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=oe(e.pointwiseRegularizer),this.pointwiseConstraint=we(e.pointwiseConstraint)}build(t){if(t=zt(t),t.length<this.rank+2)throw new L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null||t[e]<0)throw new L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);let o=t[e],n=this.kernelSize.concat([o,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(o*this.depthMultiplier,this.filters);let i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new re({ndim:this.rank+2,axes:{[e]:o}})],this.built=!0}call(t,e){return z(()=>{t=Tt(t);let o;if(this.rank===1)throw new yt("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(t=Rt(t,[0,2,3,1])),o=wm(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(o=kr(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),this.dataFormat==="channelsFirst"&&(o=Rt(o,[0,3,1,2])),o})}getConfig(){let t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=ae(this.depthwiseInitializer),t.pointwiseInitializer=ae(this.pointwiseInitializer),t.depthwiseRegularizer=Xt(this.depthwiseRegularizer),t.pointwiseRegularizer=Xt(this.pointwiseRegularizer),t.depthwiseConstraint=be(this.depthwiseConstraint),t.pointwiseConstraint=be(this.pointwiseConstraint),t}};Tg.className="SeparableConv";var lf=class extends Tg{constructor(t){super(2,t)}};lf.className="SeparableConv2D";K.registerClass(lf);var ql=class extends Ua{constructor(t){super(1,t),ql.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){let t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Fd(t.kernelSize,"number",1,1))throw new L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}};ql.className="Conv1D";K.registerClass(ql);var uf=class extends At{constructor(t){super(t),typeof t.cropping=="number"?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:typeof t.cropping[0]=="number"?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=t.dataFormat===void 0?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return this.dataFormat==="channelsFirst"?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return z(()=>{if(t=Tt(t),this.dataFormat==="channelsLast"){let o=Rm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Rm(o,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{let o=Rm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Rm(o,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};uf.className="Cropping2D";K.registerClass(uf);var cf=class extends At{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=t.size==null?this.DEFAULT_SIZE:t.size,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,de(this.dataFormat),this.interpolation=t.interpolation==null?"nearest":t.interpolation,mN(this.interpolation)}computeOutputShape(t){if(this.dataFormat==="channelsFirst"){let e=t[2]==null?null:this.size[0]*t[2],o=t[3]==null?null:this.size[1]*t[3];return[t[0],t[1],e,o]}else{let e=t[1]==null?null:this.size[0]*t[1],o=t[2]==null?null:this.size[1]*t[2];return[t[0],e,o,t[3]]}}call(t,e){return z(()=>{let o=Tt(t),n=o.shape;if(this.dataFormat==="channelsFirst"){o=Rt(o,[0,2,3,1]);let s=this.size[0]*n[2],i=this.size[1]*n[3],a=this.interpolation==="nearest"?kc.resizeNearestNeighbor(o,[s,i]):kc.resizeBilinear(o,[s,i]);return Rt(a,[0,3,1,2])}else{let s=this.size[0]*n[1],i=this.size[1]*n[2];return this.interpolation==="nearest"?kc.resizeNearestNeighbor(o,[s,i]):kc.resizeBilinear(o,[s,i])}})}getConfig(){let t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}};cf.className="UpSampling2D";K.registerClass(cf);function sH(r,t,e=[1,1],o="valid",n,s){return z(()=>{n==null&&(n=vr()),de(n);let i=pf(r,n);if(r.rank!==4)throw new L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);if(t.rank!==4)throw new L(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Oi(i,t,e,o==="same"?"same":"valid","NHWC",s),n==="channelsFirst"&&(i=Rt(i,[0,3,1,2])),i})}var mf=class extends Kl{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=Zt(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=we(t.depthwiseConstraint),this.depthwiseRegularizer=oe(t.depthwiseRegularizer)}build(t){if(t=zt(t),t.length<4)throw new L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);let e=this.dataFormat==="channelsFirst"?1:3;if(t[e]==null||t[e]<0)throw new L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);let o=t[e],n=[this.kernelSize[0],this.kernelSize[1],o,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[o*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return z(()=>{t=Tt(t);let o=sH(t,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(o=kr(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),o})}computeOutputShape(t){t=zt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=zr(e,this.kernelSize[0],this.padding,this.strides[0]),i=zr(o,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[t[0],n,s,i]:[t[0],s,i,n]}getConfig(){let t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=ae(this.depthwiseInitializer),t.depthwiseRegularizer=Xt(this.depthwiseRegularizer),t.depthwiseConstraint=be(this.depthwiseRegularizer),t}};mf.className="DepthwiseConv2D";K.registerClass(mf);function e0(r,t,e,o){if(Array.isArray(r)){if(t!=null||e!=null)throw new L("When inputs is an array, neither initialState or constants should be provided");o!=null&&(e=r.slice(r.length-o,r.length),r=r.slice(0,r.length-o)),r.length>1&&(t=r.slice(1,r.length)),r=r[0]}function n(s){return s==null||Array.isArray(s)?s:[s]}return t=n(t),e=n(e),{inputs:r,initialState:t,constants:e}}function r0(r,t,e,o=!1,n,s,i=!1,a=!1){return z(()=>{let l=t.shape.length;if(l<3)throw new L(`Input should be at least 3D, but is ${l}D.`);let u=[1,0].concat(hr(2,l));if(t=Rt(t,u),s!=null)throw new yt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),n!=null&&(n=Y(Y(n,"bool"),"float32"),n.rank===l-1&&(n=tr(n,-1)),n=Rt(n,u)),o&&(t=ko(t,0),n!=null&&(n=ko(n,0)));let c=[],p,m=e,f=t.shape[0],h=Or(t),d;n!=null&&(d=Or(n));for(let x=0;x<f;++x){let b=h[x],w=z(()=>r(b,m));if(n==null)p=w[0],m=w[1];else{let C=z(()=>{let S=d[x],k=mt(je(S),S),E=X(_(w[0],S),_(m[0],k)),A=m.map((D,O)=>X(_(w[1][O],S),_(D,k)));return{output:E,newStates:A}});p=C.output,m=C.newStates}a&&c.push(p)}let g;return a&&(g=er(c,1)),[p,g,m]})}var No=class extends At{constructor(t){super(t);let e;if(t.cell==null)throw new L("cell property is missing for the constructor of RNN.");if(Array.isArray(t.cell)?e=new Jc({cells:t.cell}):e=t.cell,e.stateSize==null)throw new L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=t.returnSequences==null?!1:t.returnSequences,this.returnState=t.returnState==null?!1:t.returnState,this.goBackwards=t.goBackwards==null?!1:t.goBackwards,this._stateful=t.stateful==null?!1:t.stateful,this.unroll=t.unroll==null?!1:t.unroll,this.supportsMasking=!0,this.inputSpec=[new re({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return hr(0,t).map(e=>null)}else return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Ud(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);let o=e[0],n;if(this.returnSequences?n=[t[0],t[1],o]:n=[t[0],o],this.returnState){let s=[];for(let i of e)s.push([t[0],i]);return[n].concat(s)}else return n}computeMask(t,e){return z(()=>{Array.isArray(e)&&(e=e[0]);let o=this.returnSequences?e:null;if(this.returnState){let n=this.states.map(s=>null);return[o].concat(n)}else return o})}get states(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let o=0;o<t;++o)e.push(null);return e}else return this.states_}set states(t){this.states_=t}build(t){if(this.numConstants!=null)throw new yt("Constants support is not implemented in RNN yet.");Ud(t)&&(t=t[0]),t=t;let o=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new re({shape:[o,null,...n]});let s=[t[0]].concat(t.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!y.arraysEqual(this.stateSpec.map(a=>a.shape[a.shape.length-1]),i))throw new L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(a=>new re({shape:[null,a]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){z(()=>{if(!this.stateful)throw new Pr("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape[0];if(o==null)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>te([o,n])):this.states_=[te([o,this.cell.stateSize])];else if(t==null)St(this.states_),this.keptStates!=null&&(St(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>te([o,n])):this.states_[0]=te([o,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e===!0?this.keptStates.push(this.states_.slice()):St(this.states_);for(let n=0;n<this.states_.length;++n){let s=t[n],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,a=[o,i];if(!y.arraysEqual(s.shape,a))throw new L(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map(n=>qe(n.clone()))})}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=e0(t,o,n,this.numConstants);t=s.inputs,o=s.initialState,n=s.constants;let i=[],a=[];if(o!=null){e.initialState=o,i=i.concat(o),this.stateSpec=[];for(let u of o)this.stateSpec.push(new re({shape:u.shape}));a=a.concat(this.stateSpec)}if(n!=null&&(e.constants=n,i=i.concat(n),this.numConstants=n.length),i[0]instanceof gr){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return z(()=>{let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;t=Tt(t),s==null&&(this.stateful?s=this.states_:s=this.getInitialState(t));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new L(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let a={training:n},u=r0((h,d)=>{let g=this.cell.call([h].concat(d),a);return[g[0],g.slice(1)]},t,s,this.goBackwards,o,null,this.unroll,this.returnSequences),c=u[0],p=u[1],m=u[2];this.stateful&&this.resetStates(m,n);let f=this.returnSequences?p:c;return this.returnState?[f].concat(m):f})}getInitialState(t){return z(()=>{let e=te(t.shape);return e=at(e,[1,2]),e=Vi(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>o>1?Bd(e,[1,o]):e):this.cell.stateSize>1?[Bd(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){let t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(e.numConstants=this.numConstants);let o=this.cell.getConfig();return this.getClassName()===No.className&&(e.cell={className:this.cell.getClassName(),config:o}),Object.assign({},o,t,e)}static fromConfig(t,e,o={}){let n=e.cell,s=Xr(n,o);return new t(Object.assign(e,{cell:s}))}};No.className="RNN";K.registerClass(No);var Ka=class extends At{},Zc=class extends Ka{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Ae(this.units,"units"),this.activation=Kn(t.activation==null?this.DEFAULT_ACTIVATION:t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Zt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=oe(t.kernelRegularizer),this.recurrentRegularizer=oe(t.recurrentRegularizer),this.biasRegularizer=oe(t.biasRegularizer),this.kernelConstraint=we(t.kernelConstraint),this.recurrentConstraint=we(t.recurrentConstraint),this.biasConstraint=we(t.biasConstraint),this.dropout=zl([1,Wn([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=zl([1,Wn([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=zt(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return z(()=>{if(t=t,t.length!==2)throw new L(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let o=t[1];t=t[0];let n=e.training==null?!1:e.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Hi({ones:()=>je(t),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Hi({ones:()=>je(o),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));let s,i=this.dropoutMask,a=this.recurrentDropoutMask;i!=null?s=jo(_(t,i),this.kernel.read()):s=jo(t,this.kernel.read()),this.bias!=null&&(s=kr(s,this.bias.read())),a!=null&&(o=_(o,a));let l=X(s,jo(o,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:Hn(this.activation),useBias:this.useBias,kernelInitializer:ae(this.kernelInitializer),recurrentInitializer:ae(this.recurrentInitializer),biasInitializer:ae(this.biasInitializer),kernelRegularizer:Xt(this.kernelRegularizer),recurrentRegularizer:Xt(this.recurrentRegularizer),biasRegularizer:Xt(this.biasRegularizer),activityRegularizer:Xt(this.activityRegularizer),kernelConstraint:be(this.kernelConstraint),recurrentConstraint:be(this.recurrentConstraint),biasConstraint:be(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}};Zc.className="SimpleRNNCell";K.registerClass(Zc);var ff=class extends No{constructor(t){t.cell=new Zc(t),super(t)}call(t,e){return z(()=>{this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return new t(e)}};ff.className="SimpleRNN";K.registerClass(ff);var Qc=class extends Ka{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new L("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Ae(this.units,"units"),this.activation=Kn(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Kn(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Zt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=oe(t.kernelRegularizer),this.recurrentRegularizer=oe(t.recurrentRegularizer),this.biasRegularizer=oe(t.biasRegularizer),this.kernelConstraint=we(t.kernelConstraint),this.recurrentConstraint=we(t.recurrentConstraint),this.biasConstraint=we(t.biasConstraint),this.dropout=zl([1,Wn([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=zl([1,Wn([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=zt(t);let e=t[t.length-1];this.kernel=this.addWeight("kernel",[e,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return z(()=>{if(t=t,t.length!==2)throw new L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training==null?!1:e.training,n=t[1];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Hi({ones:()=>je(t),rate:this.dropout,training:o,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Hi({ones:()=>je(n),rate:this.recurrentDropout,training:o,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask,a,l,u;0<this.dropout&&this.dropout<1&&(t=_(t,s[0]));let c=jo(t,this.kernel.read());this.useBias&&(c=kr(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=_(n,i[0]));let p=this.recurrentKernel.read(),[m,f]=He(p,[2*this.units,this.units],p.rank-1),h=jo(n,m),[d,g,x]=He(c,3,c.rank-1),[b,w]=He(h,2,h.rank-1);a=this.recurrentActivation.apply(X(d,b)),l=this.recurrentActivation.apply(X(g,w));let C=jo(_(l,n),f);u=this.activation.apply(X(x,C));let S=X(_(a,n),_(X(1,Ut(a)),u));return[S,S]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:Hn(this.activation),recurrentActivation:Hn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ae(this.kernelInitializer),recurrentInitializer:ae(this.recurrentInitializer),biasInitializer:ae(this.biasInitializer),kernelRegularizer:Xt(this.kernelRegularizer),recurrentRegularizer:Xt(this.recurrentRegularizer),biasRegularizer:Xt(this.biasRegularizer),activityRegularizer:Xt(this.activityRegularizer),kernelConstraint:be(this.kernelConstraint),recurrentConstraint:be(this.recurrentConstraint),biasConstraint:be(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}};Qc.className="GRUCell";K.registerClass(Qc);var hf=class extends No{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Qc(t),super(t)}call(t,e){return z(()=>{this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};hf.className="GRU";K.registerClass(hf);var qa=class extends Ka{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Ae(this.units,"units"),this.activation=Kn(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Kn(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=Zt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=oe(t.kernelRegularizer),this.recurrentRegularizer=oe(t.recurrentRegularizer),this.biasRegularizer=oe(t.biasRegularizer),this.kernelConstraint=we(t.kernelConstraint),this.recurrentConstraint=we(t.recurrentConstraint),this.biasConstraint=we(t.biasConstraint),this.dropout=zl([1,Wn([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=zl([1,Wn([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;t=zt(t);let o=t[t.length-1];this.kernel=this.addWeight("kernel",[o,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let n;if(this.useBias){if(this.unitForgetBias){let s=this.biasInitializer,i=this.units;n=new(e=class extends Nr{apply(l,u){let c=s.apply([i]),p=new Vl().apply([i]),m=s.apply([i*2]);return VC(VC(c,p),m)}},e.className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return z(()=>{let o=e.training==null?!1:e.training;if(t=t,t.length!==3)throw new L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let n=t[1],s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Hi({ones:()=>je(t),rate:this.dropout,training:o,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Hi({ones:()=>je(n),rate:this.recurrentDropout,training:o,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,a=this.recurrentDropoutMask,l,u,c,p;0<this.dropout&&this.dropout<1&&(t=_(t,i[0]));let m=jo(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=_(n,a[0])),m=X(m,jo(n,this.recurrentKernel.read())),this.useBias&&(m=kr(m,this.bias.read()));let[f,h,d,g]=He(m,4,m.rank-1);l=this.recurrentActivation.apply(f),u=this.recurrentActivation.apply(h),c=X(_(u,s),_(l,this.activation.apply(d))),p=this.recurrentActivation.apply(g);let x=_(p,this.activation.apply(c));return[x,x,c]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:Hn(this.activation),recurrentActivation:Hn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ae(this.kernelInitializer),recurrentInitializer:ae(this.recurrentInitializer),biasInitializer:ae(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Xt(this.kernelRegularizer),recurrentRegularizer:Xt(this.recurrentRegularizer),biasRegularizer:Xt(this.biasRegularizer),activityRegularizer:Xt(this.activityRegularizer),kernelConstraint:be(this.kernelConstraint),recurrentConstraint:be(this.recurrentConstraint),biasConstraint:be(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}};qa.className="LSTMCell";K.registerClass(qa);var df=class extends No{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new qa(t),super(t)}call(t,e){return z(()=>{this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};df.className="LSTM";K.registerClass(df);var Jc=class extends Ka{constructor(t){super(t),this.cells=t.cells}get stateSize(){let t=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return z(()=>{t=t;let o=t.slice(1),n=[];for(let a of this.cells.slice().reverse())Array.isArray(a.stateSize)?n.push(o.splice(0,a.stateSize.length)):n.push(o.splice(0,1));n.reverse();let s=[],i;for(let a=0;a<this.cells.length;++a){let l=this.cells[a];o=n[a],a===0?i=[t[0]].concat(o):i=[i[0]].concat(o),i=l.call(i,e),s.push(i.slice(1))}o=[];for(let a of s.slice().reverse())o.push(...a);return[i[0]].concat(o)})}build(t){Ud(t)&&(t=t[0]),t=t;let e;this.cells.forEach((o,n)=>{Un(`RNNCell_${n}`,()=>{o.build(t),Array.isArray(o.stateSize)?e=o.stateSize[0]:e=o.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){let t=super.getConfig(),e=s=>({className:s.getClassName(),config:s.getConfig()}),n={cells:this.cells.map(e)};return Object.assign({},t,n)}static fromConfig(t,e,o={}){let n=[];for(let s of e.cells)n.push(Xr(s,o));return new t({cells:n})}get trainableWeights(){if(!this.trainable)return[];let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.cells)e.push(...o.trainableWeights);return e.concat(t)}return t}getWeights(){let t=[];for(let e of this.cells)t.push(...e.weights);return Vm(t)}setWeights(t){let e=[];for(let o of this.cells){let n=o.weights.length,s=t.splice(n);for(let i=0;i<o.weights.length;++i)e.push([o.weights[i],s[i]])}Hc(e)}};Jc.className="StackedRNNCells";K.registerClass(Jc);function Hi(r){let{ones:t,rate:e,training:o=!1,count:n=1,dropoutFunc:s}=r,i=()=>s!=null?s(t(),e):Gd(t(),e),a=()=>Ba(i,t,o);return!n||n<=1?qe(a().clone()):Array(n).fill(void 0).map(a).map(u=>qe(u.clone()))}var iH=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&t.indexOf(o)<0&&(e[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var n=0,o=Object.getOwnPropertySymbols(r);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(r,o[n])&&(e[o[n]]=r[o[n]]);return e};var Ng=class extends No{constructor(t){if(t.unroll)throw new yt("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new yt("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new re({ndim:5})]}call(t,e){return z(()=>{if(this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new L("ConvRNN2D cell does not support constants");let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return z(()=>{let{stateSize:e}=this.cell,o=t.shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)],i=te(s);return Array.isArray(e)?Array(e.length).fill(i):[i]})}resetStates(t,e=!1){z(()=>{if(!this.stateful)throw new Pr("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)];if(o[0]==null)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>te(s)):this.states_=[te(s)];else if(t==null)St(this.states_),this.keptStates!=null&&(St(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>te(s)):this.states_[0]=te(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):St(this.states_);for(let a=0;a<this.states_.length;++a){let l=t[a],u=s;if(!y.arraysEqual(l.shape,u))throw new L(`State ${a} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>qe(a.clone()))})}computeSingleOutputShape(t){let{dataFormat:e,filters:o,kernelSize:n,padding:s,strides:i,dilationRate:a}=this.cell,l=e==="channelsFirst",u=t[l?3:2],c=t[l?4:3],p=zr(u,n[0],s,i[0],a[0]),m=zr(c,n[1],s,i[1],a[1]);return[...t.slice(0,2),...l?[o,p,m]:[p,m,o]]}};Ng.className="ConvRNN2D";var tp=class extends qa{constructor(t){let{filters:e,kernelSize:o,strides:n,padding:s,dataFormat:i,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,Ae(this.filters,"filters"),this.kernelSize=Ga(o,2,"kernelSize"),this.kernelSize.forEach(l=>Ae(l,"kernelSize")),this.strides=Ga(n||1,2,"strides"),this.strides.forEach(l=>Ae(l,"strides")),this.padding=s||"valid",Sr(this.padding),this.dataFormat=i||"channelsLast",de(this.dataFormat),this.dilationRate=Ga(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>Ae(l,"dilationRate"))}build(t){var e;t=zt(t);let o=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[o]==null)throw new L(`The channel dimension of the input should be defined. Found ${t[o]}`);let n=t[o],s=4,i=this.kernelSize.concat([n,this.filters*s]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let a=this.kernelSize.concat([this.filters,this.filters*s]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){let u=this.biasInitializer,c=this.filters;l=new(e=class extends Nr{apply(m,f){let h=u.apply([c]),d=qr([c]),g=u.apply([c*2]);return Oc([h,d,g])}},e.className="CustomInit",e)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*s],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return z(()=>{if(t.length!==3)throw new L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training||!1,n=t[0],s=t[1],i=t[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Hi({ones:()=>je(n),rate:this.dropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=(J,tt,ot)=>!tt||!tt[ot]?J:_(tt[ot],J),c=u(n,l,0),p=u(n,l,1),m=u(n,l,2),f=u(n,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Hi({ones:()=>je(s),rate:this.recurrentDropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let h=this.recurrentDropoutMask,d=u(s,h,0),g=u(s,h,1),x=u(s,h,2),b=u(s,h,3),w=3,[C,S,k,E]=He(this.kernel.read(),a,w),[A,D,O,M]=this.useBias?He(this.bias.read(),a):[null,null,null,null];c=this.inputConv(c,C,A,this.padding),p=this.inputConv(p,S,D,this.padding),m=this.inputConv(m,k,O,this.padding),f=this.inputConv(f,E,M,this.padding);let[B,V,U,G]=He(this.recurrentKernel.read(),a,w);d=this.recurrentConv(d,B),g=this.recurrentConv(g,V),x=this.recurrentConv(x,U),b=this.recurrentConv(b,G);let W=this.recurrentActivation.apply(X(c,d)),j=this.recurrentActivation.apply(X(p,g)),H=X(_(j,i),_(W,this.activation.apply(X(m,x)))),Z=_(this.recurrentActivation.apply(X(f,b)),this.activation.apply(H));return[Z,Z,H]})}getConfig(){let t=super.getConfig(),{units:e}=t,o=iH(t,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},o,n)}inputConv(t,e,o,n){let s=Hr(t,e,this.strides,n||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return o?kr(s,o,this.dataFormat):s}recurrentConv(t,e){return Hr(t,e,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}};tp.className="ConvLSTM2DCell";K.registerClass(tp);var gf=class extends Ng{constructor(t){let e=new tp(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}};gf.className="ConvLSTM2D";K.registerClass(gf);var ep=class extends At{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(this.noiseShape==null)return this.noiseShape;let e=t.shape,o=[];for(let n=0;n<this.noiseShape.length;++n)o.push(this.noiseShape[n]==null?e[n]:this.noiseShape[n]);return o}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t);if(0<this.rate&&this.rate<1){let n=e.training==null?!1:e.training,s=this.getNoiseShape(o);return Ba(()=>Gd(o,this.rate,s,this.seed),()=>o,n)}return t})}getConfig(){let t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}};ep.className="Dropout";K.registerClass(ep);var xf=class extends ep{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){let e=t.shape;return[e[0],1,e[2]]}};xf.className="SpatialDropout1D";K.registerClass(xf);var yf=class extends At{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.batchInputShape==null&&t.inputShape==null&&t.inputDim!=null){let e=null;t.batchSize!=null&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Ae(this.units,"units"),this.activation=Kn(t.activation),t.useBias!=null&&(this.useBias=t.useBias),this.kernelInitializer=Zt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Zt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=we(t.kernelConstraint),this.biasConstraint=we(t.biasConstraint),this.kernelRegularizer=oe(t.kernelRegularizer),this.biasRegularizer=oe(t.biasRegularizer),this.activityRegularizer=oe(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){t=zt(t);let e=t[t.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){t=zt(t);let e=t.slice();return e[e.length-1]=this.units,e}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t),n=_d(this.activation.getClassName()),s;return n!=null?s=jo(o,this.kernel.read(),n,this.bias?this.bias.read():null):(s=jo(o,this.kernel.read()),this.bias!=null&&(s=kr(s,this.bias.read())),this.activation!=null&&(s=this.activation.apply(s))),s})}getConfig(){let t={units:this.units,activation:Hn(this.activation),useBias:this.useBias,kernelInitializer:ae(this.kernelInitializer),biasInitializer:ae(this.biasInitializer),kernelRegularizer:Xt(this.kernelRegularizer),biasRegularizer:Xt(this.biasRegularizer),activityRegularizer:Xt(this.activityRegularizer),kernelConstraint:be(this.kernelConstraint),biasConstraint:be(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}};yf.className="Dense";K.registerClass(yf);var bf=class extends At{constructor(t){t=t||{},super(t),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=zt(t);for(let e of t.slice(1))if(e==null)throw new L(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],qo(t,1)]}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t);if(this.dataFormat==="channelsFirst"&&o.rank>1){let n=[0];for(let s=2;s<o.rank;++s)n.push(s);n.push(1),o=Rt(o,n)}return xN(o)})}getConfig(){let t={};this.dataFormat!=null&&(t.dataFormat=this.dataFormat);let e=super.getConfig();return Object.assign(t,e),t}};bf.className="Flatten";K.registerClass(bf);var wf=class extends At{constructor(t){super(t),this.supportsMasking=!0,this.activation=Kn(t.activation)}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t);return this.activation.apply(o)})}getConfig(){let t={activation:Hn(this.activation)},e=super.getConfig();return Object.assign(t,e),t}};wf.className="Activation";K.registerClass(wf);var Cf=class extends At{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return z(()=>(t=Tt(t),dN(t,this.n)))}getConfig(){let t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}};Cf.className="RepeatVector";K.registerClass(Cf);var If=class extends At{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||t==null}fixUnknownDimension(t,e){let o="Total size of new array must be unchanged.",n=e.slice(),s=1,i=null;for(let l=0;l<n.length;++l){let u=n[l];if(this.isUnknown(u))if(i===null)i=l;else throw new L("Can only specifiy one unknown dimension.");else s*=u}let a=qo(t);if(i!==null){if(s===0||a%s!==0)throw new L(o);n[i]=a/s}else if(a!==s)throw new L(o);return n}computeOutputShape(t){let e=!1;for(let o=0;o<t.length;++o)if(this.isUnknown(t[o])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t),n=o.shape,s=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return F(o,s)})}getConfig(){let t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}};If.className="Reshape";K.registerClass(If);var Sf=class extends At{constructor(t){if(super(t),t.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);let e=hr(1,t.dims.length+1);if(!y.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new re({ndim:this.dims.length+1})]}computeOutputShape(t){t=zt(t);let e=t.slice();return this.dims.forEach((o,n)=>{e[n+1]=t[o]}),e}call(t,e){return Rt(Tt(t),this.dimsIncludingBatch)}getConfig(){let t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}};Sf.className="Permute";K.registerClass(Sf);var vf=class extends At{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null?this.maskValue=t.maskValue==null?0:t.maskValue:this.maskValue=0}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){let o=Tt(t),n=-1;return pc(La(o,this.maskValue),n)}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t),n=-1,s=!0,i=pc(La(o,this.maskValue),n,s);return _(o,Y(i,o.dtype))})}};vf.className="Masking";K.registerClass(vf);var kf=class extends At{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",t.batchInputShape==null&&t.inputShape==null){let e=null;t.batchSize!=null&&(e=t.batchSize),t.inputLength==null?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(ee(t.inputLength))}this.inputDim=t.inputDim,Ae(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Ae(this.outputDim,"outputDim"),this.embeddingsInitializer=Zt(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=oe(t.embeddingsRegularizer),this.activityRegularizer=oe(t.activityRegularizer),this.embeddingsConstraint=we(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return z(()=>this.maskZero?(t=Tt(t),La(t,xt(t))):null)}computeOutputShape(t){if(t=zt(t),this.inputLength==null)return[...t,this.outputDim];let e=ee(this.inputLength);if(e.length!==t.length-1)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let o=0;for(let n=0;n<e.length;++n){let s=e[n],i=t[n+1];if(s!=null&&i!=null&&s!==i)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);s==null&&(e[o]=i),o++}}return[t[0],...e,this.outputDim]}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t);o.dtype!=="int32"&&(o=Ml(o,"int32"));let n=Vd(this.embeddings.read(),F(o,[o.size]));return F(n,zt(this.computeOutputShape(o.shape)))})}getConfig(){let t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ae(this.embeddingsInitializer),embeddingsRegularizer:Xt(this.embeddingsRegularizer),activityRegularizer:Xt(this.activityRegularizer),embeddingsConstraint:be(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}};kf.className="Embedding";K.registerClass(kf);var Ki=class extends At{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new yt}computeElementwiseOpOutputShape(t,e){if(t==null||e==null)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(e.length===0)return t;let o=t.slice(0,t.length-e.length);for(let n=0;n<e.length;++n){let s=t[t.length-e.length+n],i=e[n];if(s==null||i==null||s<0||i<0)o.push(null);else if(s===1)o.push(i);else if(i===1)o.push(s);else{if(s!==i)throw new L("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));o.push(s)}}return o}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[zt(t)]),t=t,t.length<2)throw new L(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(let s of t)s!=null&&s[0]!==null&&e.push(s[0]);if(e=Ko(e),e.length>1)throw new L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let o=t[0]==null?null:t[0].slice(1);for(let s=1;s<t.length;++s){let i=t[s]==null?null:t[s].slice(1);o=this.computeElementwiseOpOutputShape(o,i)}let n=t.map(s=>s.length);t.indexOf(null)===-1&&Ko(n).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return z(()=>{if(t=t,this.reshapeRequired){let o=[],n=t.map(s=>s.rank);if(n.indexOf(null)===-1){let s=Wn(n);for(let i of t){let a=i.rank;for(let l=0;l<s-a;++l)i=Vi(i,1);o.push(i)}return this.mergeFunction(o)}else{let s=!1;for(let l of t){let u=l.rank;if(u==null){let c=l.shape,p=c[0],m=c.slice(1).concat([p]),f=F(l,[p].concat(qo(c.slice(1))));f=Rt(f,[1,0]),f=F(f,m),o.push(f),s=!0}else if(u>1){let c=hr(1,u).concat([0]);o.push(Rt(l,c)),s=!0}else o.push(l)}let i=this.mergeFunction(o),a=i.rank;if(s){if(a==null){let l=i.shape,u=l.length,c=l[u-1],p=[c].concat(l.slice(0,l.length-1));i=F(Rt(F(i,[-1,c]),[1,0]),p)}else if(a>1){let l=[a-1].concat(hr(0,a-1));i=Rt(i,l)}}return i}}else return this.mergeFunction(t)})}computeOutputShape(t){t=t;let e;t[0]==null?e=null:e=t[0].slice(1);for(let n=1;n<t.length;++n){let s=t[n]==null?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let o=[];for(let n of t)n!=null&&n[0]!==null&&o.push(n[0]);return o=Ko(o),o.length===1?e=o.concat(e):e=[null].concat(e),e}computeMask(t,e){return z(()=>{if(e==null)return null;if(!Array.isArray(e))throw new L("`mask` should be an Array");if(!Array.isArray(t))throw new L("`inputs` should be an Array");if(e.length!==t.length)throw new L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(n=>n==null))return null;e=e.map(n=>n==null?n:tr(n,0));let o=e[0];for(let n=1;n<e.length-1;++n)o=fr(o,e[n]);return o})}},Nf=class extends Ki{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=X(e,t[o]);return e})}};Nf.className="Add";K.registerClass(Nf);var Ef=class extends Ki{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=_(e,t[o]);return e})}};Ef.className="Multiply";K.registerClass(Ef);var $f=class extends Ki{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=X(e,t[o]);return _(1/t.length,e)})}};$f.className="Average";K.registerClass($f);var Af=class extends Ki{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=Kr(e,t[o]);return e})}};Af.className="Maximum";K.registerClass(Af);var Df=class extends Ki{constructor(t){super(t)}mergeFunction(t){return z(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=Nl(e,t[o]);return e})}};Df.className="Minimum";K.registerClass(Df);var Rf=class extends Ki{constructor(t){super(t),this.DEFAULT_AXIS=-1,t==null&&(t={}),this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!(Array.isArray(t)&&Array.isArray(t[0]))||t.length===1)throw new L("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(let n of t)if(n!=null){e=!1;break}if(e)return;let o=[];for(let n=0;n<t.length;++n){let s=t[n].slice();s.splice(this.axis,1);let i=!1;for(let a of o)if(y.arraysEqual(a,s)){i=!0;break}i||o.push(s)}if(o.length>1)throw new L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return z(()=>Oc(t,this.axis))}computeOutputShape(t){if(!(Array.isArray(t)&&Array.isArray(t[0])))throw new L("A `Concatenate` layer should be called on a list of inputs.");let e=t,o=e[0].slice(),n=this.axis<0?o.length+this.axis:this.axis;for(let s of e.slice(1)){if(o[n]==null||s[n]==null){o[n]=null;break}o[n]+=s[n]}return o}computeMask(t,e){if(e==null)return null;if(!Array.isArray(e))throw new L("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new L("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new L(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return z(()=>{let o=!0;if(e.forEach(i=>{if(i!=null){o=!1;return}}),o)return null;let n=[];for(let i=0;i<t.length;++i)e[i]==null?n.push(Y(je(t[i]),"bool")):e[i].rank<t[i].rank?n.push(tr(e[i],-1)):n.push(e[i]);let s=ue(n,this.axis);return am(s,-1,!1)})}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};Rf.className="Concatenate";K.registerClass(Rf);function Tf(r,t){for(;r<0;)r+=t;return r}function aH(r,t,e){if(r.shape.length>3||t.shape.length>3)throw new yt("batchDot is not implemented for tensors of 4D or higher rank yet");if(y.assert(r.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`),y.assert(r.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),typeof e=="number"&&(e=[e,e]),r.dtype==="complex64"||t.dtype==="complex64")throw new yt("batchDot is not implemented for complex64-type Tensors yet.");let o=r.shape.length,n=t.shape.length;e==null&&(e=[o-1,n-2]);let s=e;return z(()=>{let i;if(o>n){i=o-n;let l=[];for(let u=0;u<i;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(n>o){i=n-o;let l=[];for(let u=0;u<i;++u)l.push(1);r=F(r,r.shape.concat(l))}else i=0;let a;if(r.shape.length===2&&t.shape.length===2)s[0]===s[1]?a=at(_(r,t),s[0]):a=at(_(Rt(r,[1,0]),t),s[1]);else{let l=s[0]!==r.shape.length-1,u=s[1]===t.shape.length-1;a=Gt(r,t,l,u)}if(i>0){let l;o>n?l=o+n-3:l=o-1;let u=[];for(let c=l;c<l+i;++c)u.push(c);a=Bn(a,u)}return a.shape.length===1&&(a=tr(a,1)),a})}var Ff=class extends Ki{constructor(t){super(t),this.axes=t.axes,this.normalize=t.normalize==null?!1:t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0],o=t[1];if(e.length>3||o.length>3)throw new yt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);if(e[n[0]]!==o[n[1]])throw new L(`Dimension incompatibility: ${e[n[0]]} !== ${o[n[1]]}`)}mergeFunction(t){if(t.length!==2)throw new L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e=t[0],o=t[1],n;return Array.isArray(this.axes)?n=this.axes.map((s,i)=>Tf(s,t[i].shape.length)):n=[Tf(this.axes,e.shape.length),Tf(this.axes,o.shape.length)],this.normalize&&(e=Km(e,n[0]),o=Km(o,n[1])),aH(e,o,n)}interpretAxes(t,e){let o;return Array.isArray(this.axes)?o=this.axes:o=[Tf(this.axes,t.length),Tf(this.axes,e.length)],o}computeOutputShape(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0].slice(),o=t[1].slice();if(e.length>3||o.length>3)throw new yt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);e.splice(n[0],1),o.splice(n[1],1),o.splice(0,1);let s=e.concat(o);return s.length===1&&s.push(1),s}computeMask(t,e){return null}getConfig(){let t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}};Ff.className="Dot";K.registerClass(Ff);var _f=class extends At{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t);return Ba(()=>X(Pc(o.shape,0,this.stddev),o),()=>o,e.training||!1)})}};_f.className="GaussianNoise";K.registerClass(_f);var Of=class extends At{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return z(()=>{this.invokeCallHook(t,e);let o=Tt(t);return this.rate>0&&this.rate<1?Ba(()=>{let s=Math.sqrt(this.rate/(1-this.rate));return _(o,Pc(o.shape,1,s))},()=>o,e.training||!1):o})}};Of.className="GaussianDropout";K.registerClass(Of);var Pf=class extends At{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Tt(t).shape}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return z(()=>{if(this.rate<1&&this.rate>0){let o=this._getNoiseShape(t);return Ba(()=>{let s=Tt(t),i=1.6732632423543772,a=1.0507009873554805,l=-i*a,u=So(zi(o),this.rate);u=Ml(u,"float32");let c=((1-this.rate)*(1+this.rate*l**2))**-.5,p=-c*l*this.rate,m=X(_(s,u),_(X(u,-1),l));return X(_(m,c),p)},()=>Tt(t),e.training||!1)}return t})}};Pf.className="AlphaDropout";K.registerClass(Pf);function Lf(r,t,e,o,n,s=.001){let i;if(r.rank===2)i=Ww(r,t,e,o,n,s);else if(r.rank===3)i=Hw(r,t,e,o,n,s);else if(r.rank===4)i=Kw(r,t,e,o,n,s);else throw new yt(`batchNormalization is not implemented for array of rank ${r.rank} yet`);return i}function lH(r,t,e,o,n=.001){return z(()=>{let s=yc(r,o),i=s.mean,a=s.variance;return[Lf(r,i,a,e,t,n),i,a]})}function uH(r,t,e,o,n=.001){return z(()=>{let s=yc(r,o),i=s.mean,a=s.variance,l=[];for(let h of hr(0,r.rank))o.indexOf(h)!==-1?l.push(1):l.push(r.shape[h]);let u=F(i,l),c=F(a,l),p=t==null?null:F(t,l),m=e==null?null:F(e,l);return[Lf(r,u,c,m,p,n),i,a]})}function cH(r,t,e,o,n=.001){return y.arraysEqual(o.slice().sort(),hr(0,r.rank-1))?lH(r,t,e,o,n):uH(r,t,e,o,n)}var zf=class extends At{constructor(t){t==null&&(t={}),super(t),this.supportsMasking=!0,this.axis=t.axis==null?-1:t.axis,this.momentum=t.momentum==null?.99:t.momentum,this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=Zt(t.betaInitializer||"zeros"),this.gammaInitializer=Zt(t.gammaInitializer||"ones"),this.movingMeanInitializer=Zt(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Zt(t.movingVarianceInitializer||"ones"),this.betaConstraint=we(t.betaConstraint),this.gammaConstraint=we(t.gammaConstraint),this.betaRegularizer=oe(t.betaRegularizer),this.gammaRegularizer=oe(t.gammaRegularizer)}build(t){t=zt(t);let e=this.axis>=0?this.axis:this.axis+t.length,o=t[e];if(o==null)throw new L(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new re({ndim:t.length,axes:{[e]:o}})];let n=[o];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return z(()=>{let o=e.training==null?!1:e.training,n=Tt(t),s=n.shape,i=s.length,a=hr(0,i),l=this.axis>=0?this.axis:this.axis+i;a.splice(l,1);let u=Wo(1,i);u[l]=s[l];let c=a.slice();c.sort();let p=!y.arraysEqual(c,hr(0,i).slice(0,i-1)),m=()=>{if(p){let b=F(this.movingMean.read(),u),w=F(this.movingVariance.read(),u),C=this.center?F(this.beta.read(),u):null,S=this.scale?F(this.gamma.read(),u):null;return Lf(n,b,w,C,S,this.epsilon)}else return Lf(n,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!o)return m();let[f,h,d]=cH(n,this.gamma.read(),this.beta.read(),a,this.epsilon),g=(b,w,C)=>{z(()=>{let S=1-C,k=b.read(),E=_(mt(k,w),S);b.write(mt(k,E))})};return(()=>{g(this.movingMean,h,this.momentum),g(this.movingVariance,d,this.momentum)})(),f})}getConfig(){let t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ae(this.betaInitializer),gammaInitializer:ae(this.gammaInitializer),movingMeanInitializer:ae(this.movingMeanInitializer),movingVarianceInitializer:ae(this.movingVarianceInitializer),betaRegularizer:Xt(this.betaRegularizer),gammaRegularizer:Xt(this.gammaRegularizer),betaConstraint:be(this.betaConstraint),gammaConstraint:be(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}};zf.className="BatchNormalization";K.registerClass(zf);var Mf=class extends At{constructor(t){if(t==null&&(t={}),super(t),this.axis=t.axis==null?-1:t.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=Zt(t.betaInitializer||"zeros"),this.gammaInitializer=Zt(t.gammaInitializer||"ones"),this.betaRegularizer=oe(t.betaRegularizer),this.gammaRegularizer=oe(t.gammaRegularizer),this.supportsMasking=!0}build(t){t=zt(t);let e=t.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=e);for(let s of this.axis)if(s<0||s>=e)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==Ko(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);let o=this.axis.map(s=>t[s]),n=!0;this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,n):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,n):this.beta=null,this.built=!0}call(t,e){let o=Tt(t),n=o.shape,s=n.length;return z(()=>{let{mean:a,variance:l}=yc(o,this.axis,!0),u=Wo(1,s);for(let d of this.axis)u[d]=n[d];let c=d=>d!=null&&d.shape.length!==s?F(d,u):d,p=this.scale?c(this.gamma.read()):null,m=this.center?c(this.beta.read()):null,f=[],h=[];for(let d=0;d<s;++d)this.axis.indexOf(d)!==-1?(f.push(n[d]),h.push(1)):(f.push(1),h.push(n[d]));return a=ar(a,f),l=ar(l,f),p!=null&&(p=ar(p,h)),m!=null&&(m=ar(m,h)),Lf(o,a,l,m,p,this.epsilon)})}getConfig(){let t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ae(this.betaInitializer),gammaInitializer:ae(this.gammaInitializer),betaRegularizer:Xt(this.betaRegularizer),gammaRegularizer:Xt(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}};Mf.className="LayerNormalization";K.registerClass(Mf);function pH(r,t,e){return z(()=>{if(r.rank!==4)throw new L(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);if(t==null&&(t=[[1,1],[1,1]]),t.length!==2||t[0].length!==2||t[1].length!==2)throw new L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(e==null&&(e=vr()),e!=="channelsLast"&&e!=="channelsFirst")throw new L(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let o;return e==="channelsFirst"?o=[[0,0],[0,0],t[0],t[1]]:o=[[0,0],t[0],t[1],[0,0]],El(r,o)})}var Bf=class extends At{constructor(t){if(t==null&&(t={}),super(t),this.dataFormat=t.dataFormat==null?vr():t.dataFormat,t.padding==null)this.padding=[[1,1],[1,1]];else if(typeof t.padding=="number")this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,t.padding.length!==2)throw new L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,o;if(typeof t.padding[0]=="number")e=[t.padding[0],t.padding[0]],o=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,t.padding[0].length!==2)throw new L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],t.padding[1].length!==2)throw new L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);o=t.padding[1]}this.padding=[e,o]}this.inputSpec=[new re({ndim:4})]}computeOutputShape(t){t=zt(t);let e,o;return this.dataFormat==="channelsFirst"?(t[2]!=null&&t[2]>=0?e=t[2]+this.padding[0][0]+this.padding[0][1]:e=null,t[3]!=null&&t[3]>=0?o=t[3]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],t[1],e,o]):(t[1]!=null&&t[1]>=0?e=t[1]+this.padding[0][0]+this.padding[0][1]:e=null,t[2]!=null&&t[2]>=0?o=t[2]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],e,o,t[3]])}call(t,e){return z(()=>pH(Tt(t),this.padding,this.dataFormat))}getConfig(){let t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};Bf.className="ZeroPadding2D";K.registerClass(Bf);function Fg(r,t,e,o,n,s){return z(()=>{de(n),LC(s),Sr(o),e==null&&(e=[1,1]),o==null&&(o="valid"),n==null&&(n=vr()),s==null&&(s="max"),r=pf(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=Tl(r,t,e,a):i=Cl(r,t,e,a),n==="channelsFirst"&&(i=Rt(i,[0,3,1,2])),i})}function QN(r,t,e,o,n,s){return z(()=>{de(n),LC(s),Sr(o),e==null&&(e=[1,1,1]),o==null&&(o="valid"),n==null&&(n=vr()),s==null&&(s="max"),r=t0(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=pC(r,t,e,a):i=Uw(r,t,e,a),n==="channelsFirst"&&(i=Rt(i,[0,4,1,2,3])),i})}var Eg=class extends At{constructor(t){if(t.poolSize==null&&(t.poolSize=2),super(t),typeof t.poolSize=="number")this.poolSize=[t.poolSize];else if(Array.isArray(t.poolSize)&&t.poolSize.length===1&&typeof t.poolSize[0]=="number")this.poolSize=t.poolSize;else throw new L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);if(Ae(this.poolSize,"poolSize"),t.strides==null)this.strides=this.poolSize;else if(typeof t.strides=="number")this.strides=[t.strides];else if(Array.isArray(t.strides)&&t.strides.length===1&&typeof t.strides[0]=="number")this.strides=t.strides;else throw new L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);Ae(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,Sr(this.padding),this.inputSpec=[new re({ndim:3})]}computeOutputShape(t){t=zt(t);let e=zr(t[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return z(()=>{this.invokeCallHook(t,e),t=Vi(Tt(t),2);let o=this.poolingFunction(Tt(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Bn(o,[2])})}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}},Vf=class extends Eg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return de(s),Sr(n),Fg(t,e,o,n,s,"max")}};Vf.className="MaxPooling1D";K.registerClass(Vf);var Gf=class extends Eg{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return de(s),Sr(n),Fg(t,e,o,n,s,"avg")}};Gf.className="AveragePooling1D";K.registerClass(Gf);var $g=class extends At{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==2)throw new L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];Ae(this.poolSize,"poolSize"),Ae(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,de(this.dataFormat),Sr(this.padding),this.inputSpec=[new re({ndim:4})]}computeOutputShape(t){t=zt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2];return e=zr(e,this.poolSize[0],this.padding,this.strides[0]),o=zr(o,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o]:[t[0],e,o,t[3]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Tt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Uf=class extends $g{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return de(s),Sr(n),Fg(t,e,o,n,s,"max")}};Uf.className="MaxPooling2D";K.registerClass(Uf);var Wf=class extends $g{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return de(s),Sr(n),Fg(t,e,o,n,s,"avg")}};Wf.className="AveragePooling2D";K.registerClass(Wf);var Ag=class extends At{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==3)throw new L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Ae(this.poolSize,"poolSize"),Ae(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,de(this.dataFormat),Sr(this.padding),this.inputSpec=[new re({ndim:5})]}computeOutputShape(t){t=zt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[4]:t[3];return e=zr(e,this.poolSize[0],this.padding,this.strides[0]),o=zr(o,this.poolSize[1],this.padding,this.strides[1]),n=zr(n,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o,n]:[t[0],e,o,n,t[4]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Tt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Hf=class extends Ag{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return de(s),Sr(n),QN(t,e,o,n,s,"max")}};Hf.className="MaxPooling3D";K.registerClass(Hf);var Kf=class extends Ag{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return de(s),Sr(n),QN(t,e,o,n,s,"avg")}};Kf.className="AveragePooling3D";K.registerClass(Kf);var Dg=class extends At{constructor(t){super(t),this.inputSpec=[new re({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new yt}},qf=class extends Dg{constructor(t){super(t||{})}call(t,e){return z(()=>{let o=Tt(t);return he(o,1)})}};qf.className="GlobalAveragePooling1D";K.registerClass(qf);var jf=class extends Dg{constructor(t){super(t||{})}call(t,e){return z(()=>{let o=Tt(t);return mr(o,1)})}};jf.className="GlobalMaxPooling1D";K.registerClass(jf);var Rg=class extends At{constructor(t){super(t),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,de(this.dataFormat),this.inputSpec=[new re({ndim:4})]}computeOutputShape(t){return t=t,this.dataFormat==="channelsLast"?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new yt}getConfig(){let t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Xf=class extends Rg{call(t,e){return z(()=>{let o=Tt(t);return this.dataFormat==="channelsLast"?he(o,[1,2]):he(o,[2,3])})}};Xf.className="GlobalAveragePooling2D";K.registerClass(Xf);var Yf=class extends Rg{call(t,e){return z(()=>{let o=Tt(t);return this.dataFormat==="channelsLast"?mr(o,[1,2]):mr(o,[2,3])})}};Yf.className="GlobalMaxPooling2D";K.registerClass(Yf);var _g=class extends At{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(t){this.layer!=null&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){let t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,o={}){let n=e.layer,s=Xr(n,o);delete e.layer;let i={layer:s};return Object.assign(i,e),new t(i)}},Zf=class extends _g{constructor(t){super(t),this.supportsMasking=!0}build(t){if(t=zt(t),t.length<3)throw new L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];let e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){t=zt(t);let e=[t[0]].concat(t.slice(2)),o=this.layer.computeOutputShape(e),n=t[1];return[o[0],n].concat(o.slice(1))}call(t,e){return z(()=>(t=Tt(t),r0((i,a)=>[Tt(this.layer.call(i,e)),[]],t,[],!1,null,null,!1,!0)[1]))}};Zf.className="TimeDistributed";K.registerClass(Zf);function mH(r){qs(cN,"BidirectionalMergeMode",r)}var fH="concat",Qf=class extends _g{constructor(t){super(t);let e=t.layer.getConfig(),o={};o.className=t.layer.getClassName(),o.config=e,this.forwardLayer=Xr(o),e.goBackwards=e.goBackwards!==!0;let n={};if(n.className=t.layer.getClassName(),n.config=e,this.backwardLayer=Xr(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=t.mergeMode===void 0?fH:t.mergeMode,mH(this.mergeMode),t.weights)throw new yt("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,this.forwardLayer!=null&&(this.forwardLayer.trainable=t),this.backwardLayer!=null&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){let e=t.length,o=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,o)),this.backwardLayer.setWeights(t.slice(o))}computeOutputShape(t){let e=this.forwardLayer.computeOutputShape(t);Array.isArray(e)&&Array.isArray(e[0])||(e=[e]),e=e;let o,n,s;return this.returnState&&(s=e.slice(1)),o=e[0],o=o,this.mergeMode==="concat"?(o[o.length-1]*=2,n=[o]):this.mergeMode==null?n=[o,o.slice()]:n=[o],this.returnState?this.mergeMode==null?n.concat(s).concat(s.slice()):[o].concat(s).concat(s.slice()):Xe(n)}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=e0(t,o,n,this.numConstants);if(t=s.inputs,o=s.initialState,n=s.constants,Array.isArray(t)&&(o=t.slice(1),t=t[0]),(o==null||o.length===0)&&n==null)return super.apply(t,e);let i=[],a=[];if(o!=null){let u=o.length;if(u%2>0)throw new L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=o,i.push(...o);let c=o.map(p=>new re({shape:p.shape}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),a.push(...c)}if(n!=null)throw new yt("Support for constants in Bidirectional layers is not implemented yet.");let l=i[0]instanceof gr;for(let u of i)if(u instanceof gr!==l)throw new L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return z(()=>{let o=e.initialState,n,s;if(o==null)n=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{let l=o.slice(0,o.length/2),u=o.slice(o.length/2);n=this.forwardLayer.call(t,Object.assign(e,{initialState:l})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:u}))}let i;this.returnState&&(Array.isArray(n)&&(i=n.slice(1).concat(s.slice(1))),n=n[0],s=s[0]),this.returnSequences&&(s=ko(s,1));let a;return this.mergeMode==="concat"?a=Oc([n,s]):this.mergeMode==="sum"?a=X(n,s):this.mergeMode==="ave"?a=_(.5,X(n,s)):this.mergeMode==="mul"?a=_(n,s):this.mergeMode==null&&(a=[n,s]),this.returnState?this.mergeMode==null?a.concat(i):[a].concat(i):a})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Un(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),Un(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){Array.isArray(e)&&(e=e[0]);let o;if(this.returnSequences?this.mergeMode==null?o=[e,e]:o=e:this.mergeMode==null?o=[null,null]:o=null,this.returnState){let s=this.forwardLayer.states.map(i=>null);return Array.isArray(o)?o.concat(s).concat(s):[o].concat(s).concat(s)}else return o}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(t),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){let t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){let o=Xr(e.layer);if(delete e.layer,e.numConstants!=null)throw new yt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");let n=e;return n.layer=o,new t(n)}};Qf.className="Bidirectional";K.registerClass(Qf);var bH=P();bH.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var o0;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(o0||(o0={}));var JN;(function(r){let t;(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(t=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(JN||(JN={}));var c2=Gp(gm());var a2=Gp(gm());function e2(r,t){return r2(r,t)}function r2(r,t,e=new Map,o=new Set){if(r==null)return null;if(typeof Blob=="function"&&r instanceof Blob)return r.slice();if(o.has(r))throw new Error("Circular references are not supported.");if(e.has(r))return e.get(r);let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(n.recurse)if(rp(r)){let s=Array.isArray(r)?[]:{};o.add(r);for(let i in r){let a=r[i],l=r2(a,t,e,o);s[i]=l}return o.delete(r),r.__proto__&&(s.__proto__=r.__proto__),s}else throw new Error(`Can't recurse into non-iterable type: ${r}`);else return e.set(r,n.value),n.value}function o2(r,t=n0){return n2(r,t)}function n2(r,t,e=new Set){let o=r[0];if(e.has(o))throw new Error("Circular references are not supported.");let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(n.recurse)if(rp(o)){let s=Array.isArray(o)?[]:{};e.add(o);for(let i in o){let a=r.map(u=>u[i]),l=n2(a,t,e);s[i]=l}return e.delete(o),s}else throw new Error(`Can't recurse into non-iterable type: ${o}`);else return n.value}function n0(r){return r===null?null:rp(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}function rp(r){let t=!1;if(P().get("IS_BROWSER"))t=r instanceof TextDecoder;else{let{StringDecoder:e}=t2();t=r instanceof e}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof Ot)&&!(r instanceof Promise)&&!t)}function s2(r){return r==null||pK(r)||Array.isArray(r)||typeof r=="object"&&r instanceof Ot||y.isTypedArray(r)}function pK(r){return r===null||typeof r!="object"&&typeof r!="function"}function i2(r){return e2(r,mK)}function mK(r){return r instanceof Ot?{value:r.clone(),recurse:!1}:rp(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}var op=class{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,t==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(let e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let e=this.wrap(this.begin+t),o=this.get(e);return this.set(e,this.pop()),o}};var jl=class extends op{constructor(){super(jl.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){let t=this.capacity*2,e=new Array(t),o=this.length();for(let n=0;n<o;n++)e[n]=this.get(this.wrap(this.begin+n));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=o}};jl.INITIAL_CAPACITY=32;function l2(r){return new s0(r)}function x0(r){return new i0(r)}function u2(r,t){return new Lg(r,t)}var or=class{async toArray(){let t=[],e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){let t=this.prefetch(100),e=[],o=await t.next();for(;!o.done;)e.push(o.value),o=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),o=t(e.value);for(;!e.done&&o;)e=await this.next(),o=t(e.value)}handleErrors(t){return new f0(this,t)}filter(t){return new p0(this,t)}map(t){return new m0(this,t)}mapAsync(t){return new Pg(this,t)}serialMapAsync(t){return new Pg(this,t).serial()}flatmap(t){return new h0(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(e=>e===!0)}rowMajorBatch(t,e=!0){return new c0(this,t,e)}columnMajorBatch(t,e=!0,o=n0){return this.rowMajorBatch(t,e).map(s=>o2(s,o))}concatenate(t,e){return new Lg(l2([this,t]),e)}take(t){return t<0||t==null?this:new u0(this,t)}skip(t){return t<0||t==null?this:new l0(this,t)}prefetch(t){return new zg(this,t)}shuffle(t,e){return new g0(this,t,e)}serial(){return new a0(this)}},s0=class extends or{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let t=this.items[this.trav];return this.trav++,{value:i2(t),done:!1}}},i0=class extends or{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}},a0=class extends or{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}},l0=class extends or{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let t=await this.upstream.next();if(t.done)return t;St(t.value)}return this.upstream.next()}},u0=class extends or{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}},c0=class extends or{constructor(t,e,o=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=o,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let t=[];for(;t.length<this.batchSize;){let e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}},p0=class extends or{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;St(t.value)}}},m0=class extends or{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=Lo.getTensorsInContainer(t.value),o=this.transform(t.value),n=Lo.getTensorsInContainer(o);for(let s of e)Lo.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},f0=class extends or{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}},Pg=class extends or{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=Lo.getTensorsInContainer(t.value),o=await this.transform(t.value),n=Lo.getTensorsInContainer(o);for(let s of e)Lo.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},Jf=class extends or{constructor(){super(),this.outputQueue=new jl,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}},h0=class extends Jf{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let t=await this.upstream.next();if(t.done)return!1;let e=Lo.getTensorsInContainer(t.value),o=this.transform(t.value),n=Lo.getTensorsInContainer(o);this.outputQueue.pushAll(o);for(let s of e)Lo.isTensorInList(s,n)||s.dispose();return!0}},Lg=class extends or{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,this.iterator==null){let o=await this.moreIterators.next();if(o.done)return{value:null,done:!0};this.iterator=o.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}},d0;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(d0||(d0={}));var zg=class extends or{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new op(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}},g0=class extends zg{constructor(t,e,o){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=a2.alea(o||y.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(e.done)this.upstreamExhausted=!0;else return this.refill(),e}return{value:null,done:!0}}};var Xl=class{constructor(){this.size=null}batch(t,e=!0){let o=this;y.assert(t>0,()=>`batchSize needs to be positive, but it is
      ${t}`);let n;return this.size===1/0||this.size==null?n=this.size:e?n=Math.ceil(this.size/t):n=Math.floor(this.size/t),jn(async()=>(await o.iterator()).columnMajorBatch(t,e,hK),n)}concatenate(t){let e=this,o;return this.size===1/0||t.size===1/0?o=1/0:this.size!=null&&t.size!=null?o=this.size+t.size:o=null,jn(async()=>(await e.iterator()).concatenate(await t.iterator()),o)}filter(t){let e=this,o;return this.size===1/0?o=1/0:o=null,jn(async()=>(await e.iterator()).filter(n=>z(()=>t(n))),o)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){let e=this;return jn(async()=>(await e.iterator()).map(o=>z(()=>t(o))),this.size)}mapAsync(t){let e=this;return jn(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(t==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let e=this;return jn(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){let e=this,o;return this.size!=null&&t>0?o=this.size*t:t===0?o=0:this.size!=null&&(t===void 0||t<0)?o=1/0:o=null,jn(async()=>{let n=x0(async()=>({value:await e.iterator(),done:!1}));return u2(n.take(t))},o)}skip(t){let e=this,o;return this.size!=null&&t>=0&&this.size>=t?o=this.size-t:this.size!=null&&(this.size<t||t===void 0||t<0)?o=0:o=null,jn(async()=>(await e.iterator()).skip(t),o)}shuffle(t,e,o=!0){if(t==null||t<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,s=c2.alea(e||y.now().toString());return jn(async()=>{let i=s.int32();return o&&(i+=s.int32()),(await n.iterator()).shuffle(t,i.toString())},this.size)}take(t){let e=this,o;return this.size!=null&&this.size>t?o=t:this.size!=null&&this.size<=t?o=this.size:o=null,jn(async()=>(await e.iterator()).take(t),o)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}};Xl.MAX_BUFFER_SIZE=1e4;function jn(r,t=null){return new class extends Xl{constructor(){super(...arguments),this.size=t}async iterator(){return r()}}}function hK(r){if(r===null)return null;let t=r[0];return s2(t)?{value:dK(r),recurse:!1}:{value:null,recurse:!0}}function dK(r){if(r.length===0)throw new Error("Can't make a batch of zero elements.");return r[0]instanceof Ot?er(r):zo(r)}var AXt=Symbol("out"),DXt=Symbol("field"),RXt=Symbol("quote"),FXt=Symbol("quoteafterquote"),_Xt=Symbol("quoteinquote");function q(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}var kK=Ue.whereImpl,Yl=class extends mn{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new ri(this,Fr())}nextDataId(){return Yl.nextDataId++}write(t,e,o){this.firstUse&&(this.firstUse=!1,P().get("IS_NODE")&&I.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:t,dtype:o,refCount:1}),n}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return{dataId:n,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){let e=this.data.get(t);e.refCount++}decRef(t){if(this.data.has(t)){let e=this.data.get(t);e.refCount--}}move(t,e,o,n,s){this.data.set(t,{values:e,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){let{dtype:e,complexTensorInfos:o}=this.data.get(t);if(e==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return I.mergeRealAndImagArrays(n,s)}return this.data.get(t).values}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return et(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return et(t.shape,t.dtype,e)}makeOutput(t,e,o){return Fr().makeTensorFromTensorInfo(this.makeTensorInfo(e,o,t),this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(t);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){let e=y.now();return t(),{kernelMs:y.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){q([t],"where");let e=this.readSync(t.dataId);return kK(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Yl.nextDataId=0;var W0={};Br(W0,{addImpl:()=>w0,bincountImpl:()=>ip,bincountReduceImpl:()=>Mg,castImpl:()=>b0,ceilImpl:()=>C0,concatImpl:()=>Bg,equalImpl:()=>I0,expImpl:()=>v0,expm1Impl:()=>T0,floorImpl:()=>N0,gatherNdImpl:()=>Vg,gatherV2Impl:()=>Gg,greaterEqualImpl:()=>$0,greaterImpl:()=>E0,lessEqualImpl:()=>D0,lessImpl:()=>A0,linSpaceImpl:()=>Ug,logImpl:()=>R0,maxImpl:()=>Wg,maximumImpl:()=>F0,minimumImpl:()=>_0,multiplyImpl:()=>th,negImpl:()=>O0,notEqualImpl:()=>P0,prodImpl:()=>L0,raggedTensorToTensorImpl:()=>Hg,rangeImpl:()=>Kg,rsqrtImpl:()=>z0,scatterImpl:()=>qi,sigmoidImpl:()=>L2,simpleAbsImpl:()=>y0,sliceImpl:()=>B0,sparseFillEmptyRowsImpl:()=>qg,sparseReshapeImpl:()=>jg,sparseSegmentReductionImpl:()=>up,sqrtImpl:()=>B2,squaredDifferenceImpl:()=>V0,stridedSliceImpl:()=>Xg,stringNGramsImpl:()=>Yg,stringSplitImpl:()=>Zg,stringToHashBucketFastImpl:()=>Qg,subImpl:()=>U0,tileImpl:()=>Jg,topKImpl:()=>tx,transposeImpl:()=>ap,uniqueImpl:()=>ex});function y0(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}var TK=r=>{let{x:t}=r.inputs,e=r.backend;q(t,"abs");let o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId).values;return o=y0(n),e.makeOutput(o,t.shape,t.dtype)},p2={kernelName:fn,backendName:"cpu",kernelFunc:TK};function Bt(r){return(t,e,o,n,s)=>{let i=I.assertAndGetBroadcastShape(t,e),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=y.computeStrides(t),h=y.computeStrides(e),d=I.getBroadcastDims(t,i),g=I.getBroadcastDims(e,i);if(d.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),w=b.slice(-p);d.forEach(E=>w[E]=0);let C=y.locToIndex(w,p,f),S=b.slice(-m);g.forEach(E=>S[E]=0);let k=y.locToIndex(S,m,h);c[x]=r(o[C],n[k])}return[c,i]}}function Ke(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}var m2={kernelName:ci,backendName:"cpu",kernelFunc:Ke};function np(r,t,e="float32"){if(e==="complex64"){let n=np(r,t,"float32"),s=np(r,t,"float32");return Ke({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function cr(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var f2={kernelName:lo,backendName:"cpu",kernelFunc:cr};function Qo(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var h2={kernelName:yi,backendName:"cpu",kernelFunc:Qo};function b0(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,i]=Bt((a,l)=>a!==l?1:0)(t,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function Jo(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return cr({inputs:{x:n},backend:e});let c=np(e,n.shape,n.dtype),p=Jo({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=Ke({inputs:{real:p,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=Qo({inputs:{input:n},backend:e}),p=Jo({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=cr({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=e.data.get(n.dataId).values,[a,l,u]=b0(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}var d2={kernelName:ro,backendName:"cpu",kernelFunc:Jo};function Ht(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;q([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?I.fromUint8ToStringArray(u):u,m=i.dtype==="string"?I.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,d]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(d,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=Jo({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,d=Jo({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(d.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=l.data.get(x.dataId).values,C=l.data.get(b.dataId).values,[S,k,E]=e(i.shape,a.shape,f,h,w,C),A=l.makeTensorInfo(E,"float32",S),D=l.makeTensorInfo(E,"float32",k),O=Ke({inputs:{real:A,imag:D},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(A),l.disposeIntermediateTensorInfo(D),O}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function sp(r){return(t,e,o,n,s,i)=>{let a=I.assertAndGetBroadcastShape(t,e),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=I.getBroadcastDims(t,a),h=I.getBroadcastDims(e,a),d=I.mergeRealAndImagArrays(o,n),g=I.mergeRealAndImagArrays(s,i),x=t.length,b=y.computeStrides(t),w=e.length,C=y.computeStrides(e);if(f.length+h.length===0)for(let S=0;S<p.length;S++){let k=S%d.length,E=S%g.length,A=r(d[k*2],d[k*2+1],g[E*2],g[E*2+1]);p[S]=A.real,m[S]=A.imag}else for(let S=0;S<p.length;S++){let k=y.indexToLoc(S,u,c),E=k.slice(-x);f.forEach(B=>E[B]=0);let A=y.locToIndex(E,x,b),D=k.slice(-w);h.forEach(B=>D[B]=0);let O=y.locToIndex(D,w,C),M=r(d[A*2],d[A*2+1],g[O*2],g[O*2+1]);p[S]=M.real,m[S]=M.imag}return[p,m,a]}}var w0=Bt((r,t)=>r+t),NK=sp((r,t,e,o)=>({real:r+e,imag:t+o})),Xs=Ht(Rr,w0,NK),g2={kernelName:Rr,backendName:"cpu",kernelFunc:Xs};function ip(r,t,e,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function Mg(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=et([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function Er(r){return(t,e,o)=>{let n=y.getTypedArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function vt(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(q(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=e||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=t(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function tn(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(q(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=e||i.dtype,c=t(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var C0=Er(r=>Math.ceil(r)),EK=tn(oo,C0),x2={kernelName:oo,backendName:"cpu",kernelFunc:EK};function Bg(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?I.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var I0=Bt((r,t)=>r===t?1:0),S0=Ht(wn,I0,null,"bool"),y2={kernelName:wn,backendName:"cpu",kernelFunc:S0};var v0=Er(r=>Math.exp(r)),k0=tn(no,v0,"float32"),b2={kernelName:no,backendName:"cpu",kernelFunc:k0};var T0=Er(r=>Math.expm1(r)),$K=tn(so,T0),w2={kernelName:so,backendName:"cpu",kernelFunc:$K};var N0=Er(r=>Math.floor(r)),AK=tn(io,N0),C2={kernelName:io,backendName:"cpu",kernelFunc:AK};function Vg(r,t,e,o,n,s,i,a,l){let u=et([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function Gg(r,t,e){let o=et(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var E0=Bt((r,t)=>r>t?1:0),DK=Ht(In,E0,null,"bool"),I2={kernelName:In,backendName:"cpu",kernelFunc:DK};var $0=Bt((r,t)=>r>=t?1:0),RK=Ht(ao,$0,null,"bool"),S2={kernelName:ao,backendName:"cpu",kernelFunc:RK};var A0=Bt((r,t)=>r<t?1:0),FK=Ht(vn,A0,null,"bool"),v2={kernelName:vn,backendName:"cpu",kernelFunc:FK};var D0=Bt((r,t)=>r<=t?1:0),_K=Ht(kn,D0,null,"bool"),k2={kernelName:kn,backendName:"cpu",kernelFunc:_K};function Ug(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var R0=Er(r=>Math.log(r)),OK=tn(uo,R0),T2={kernelName:uo,backendName:"cpu",kernelFunc:OK};function Wg(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var F0=Bt((r,t)=>Math.max(r,t)),PK=Ht(co,F0),N2={kernelName:co,backendName:"cpu",kernelFunc:PK};var _0=Bt((r,t)=>Math.min(r,t)),LK=Ht(po,_0),E2={kernelName:po,backendName:"cpu",kernelFunc:LK};var th=Bt((r,t)=>r*t),zK=sp((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),Zl=Ht(mo,th,zK),$2={kernelName:mo,backendName:"cpu",kernelFunc:Zl};function O0(r,t,e){let o=y.createScalarValue(-1,e);return th([],t,o,r,e)}function MK(r){let{inputs:t,backend:e}=r,{x:o}=t;q(o,"neg");let n=e.data.get(o.dataId).values,[s,i]=O0(n,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,s)}var A2={kernelName:Tn,backendName:"cpu",kernelFunc:MK};var P0=Bt((r,t)=>r!==t?1:0),BK=Ht(Nn,P0,null,"bool"),D2={kernelName:Nn,backendName:"cpu",kernelFunc:BK};function ap(r,t,e,o,n){let s=t.length,i=y.sizeFromShape(t),a=y.computeStrides(t),l=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function Ce(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{perm:s}=e;q(n,"transpose");let i=n.shape.length,a=new Array(i);for(let p=0;p<a.length;p++)a[p]=n.shape[s[p]];let l=o.data.get(n.dataId).values,u=ap(l,n.shape,n.dtype,s,a);return{dataId:o.write(u,a,n.dtype),shape:a,dtype:n.dtype}}var R2={kernelName:Fo,backendName:"cpu",kernelFunc:Ce};function L0(r,t,e,o){let[n,s]=I.computeOutAndReduceShapes(r,o),i=Qt(t,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}function VK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;q(n,"prod");let a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=I.getAxesPermutation(l,a),c=l,p=n,m=[];u!=null&&(p=Ce({inputs:{x:n},backend:e,attrs:{perm:u}}),m.push(p),c=I.getInnerMostAxes(c.length,a));let f=e.data.get(p.dataId).values,{outVals:h,outShape:d,outDtype:g}=L0(p.shape,p.dtype,f,c),x=d;return i&&(x=I.expandShapeToKeepDim(d,l)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(x,g,h)}var F2={kernelName:$n,backendName:"cpu",kernelFunc:VK};var en=I.RowPartitionType,lp=class{constructor(t,e,o,n,s,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=I.getRowPartitionTypesHelper(c),this.raggedRank=I.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===en.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===en.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case en.VALUE_ROWIDS:return lp.getMaxWidthValueRowID(e);case en.ROW_SPLITS:return lp.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${en[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let i=1;i<e;++i){let a=t[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return O2(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;I.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=I.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],i=0;for(let a=0;a<n;++a,i+=e)s.push(i);for(let a=n;a<t;++a)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,i=[];for(let a=0;a<s-1;++a){let l=t[a+1]-t[a],u=Math.min(n,l),c=e[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==t[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,i=[];if(s===0)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<s;++c){let p=t[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=e.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${e.length}`);u=e[p]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case en.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case en.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${en[i]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case en.FIRST_DIM_SIZE:return t[0];case en.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case en.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${en[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=O2(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(t+1);let l=y.sizeFromShape(a),u=e.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let h=this.defaultValueShape;z(()=>{let d=F(c,h);c=Mn(d,a).dataSync()})}let p=0,m=0,f=0;for(let h=0;h<=u;++h){let d=h<u?e[h]:-1;if(d===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;_2(x,g,b)}if(h>=u){let g=o.length;d=Math.floor(g/l)}if(d>f)if(this.defaultValue.length===1)i.subarray(f*l,d*l).fill(this.defaultValue[0]),f=d;else for(;d>f;){let g=i.slice(f*l);_2(g,c,l),++f}d<0?(p=h+1,m=f):(p=h,m=f,f=m+1)}}};function _2(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function O2(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function Hg(r,t,e,o,n,s,i,a,l,u){return new lp(r,t,e,o,n,s,i,a,l,u).compute()}function Kg(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=y.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var z0=Er(r=>1/Math.sqrt(r)),GK=tn(fo,z0),P2={kernelName:fo,backendName:"cpu",kernelFunc:GK};function qi(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return et(e,t.dtype);let f=et(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let d=[],g=0;for(let x=0;x<i;x++){let b=p[h*i+x];d.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${d} does not index into ${e}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[h*n+x]:f.values[g*n+x]=t.rank===0?m[0]:m[h*n+x]}return f}var L2=Er(r=>1/(1+Math.exp(-r))),M0=vt(ho,r=>1/(1+Math.exp(-r))),z2={kernelName:ho,backendName:"cpu",kernelFunc:M0};function B0(r,t,e,o,n){let s=me.isSliceContinous(o,t,e),i=y.sizeFromShape(e),a=y.computeStrides(o);if(s){let p=me.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?I.fromUint8ToStringArray(r):r,u=et(o,n,l),c=et(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,d)=>h+t[d]);c.set(u.get(...f),...m)}return n==="string"?I.fromStringArrayToUint8(c.values):c.values}function rn(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o;q(n,"slice");let[a,l]=me.parseSliceParams(n,s,i);me.assertParamsValid(n,a,l);let u=e.data.get(n.dataId).values,c=B0(u,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,c)}var M2={kernelName:Fn,backendName:"cpu",kernelFunc:rn};function qg(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(I.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(I.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(I.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++h[x],m=m&&x>=f,f=x}let d=!0;for(let g=0;g<l;++g){let x=h[g]===0;u[g]=x,d=d&&!x,h[g]=Math.max(h[g],1),g>0&&(h[g]+=h[g-1])}if(d&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=h[l-1],x=y.getArrayFromDType(e,g*p),b=y.getArrayFromDType(n,g),w=new Array(l).fill(0);for(let C=0;C<a;++C){let S=r[C*p],k=w[S],E=(S===0?0:h[S-1])+k;w[S]++;for(let A=0;A<p;++A)x[E*p+A]=r[C*p+A];b[E]=o[C],c[C]=E}for(let C=0;C<l;++C)if(w[C]===0){let k=C===0?0:h[C-1];x[k*p+0]=C;for(let E=1;E<p;++E)x[k*p+E]=0;b[k]=i}return[x,[g,p],b,u,c]}}function jg(r,t,e,o,n){let s=y.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(I.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(I.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(I.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(I.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(I.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let h=[];if(a>0){h[a-1]=1;for(let g=a-2;g>=0;--g)h[g]=h[g+1]*l[g+1]}let d=y.getArrayFromDType(e,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)d[g*a+b]=Math.trunc(x/h[b]),x%=h[b]}return[d,[i,a],l]}function up(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((w,C)=>w*C,1),h=y.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=0,g=1,x=0,b=n[d];for(;;){let w=0;if(g<a){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(I.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(I.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&h.fill(i,x*u,b*u);for(let C=d;C<g;++C){let S=o[C];if(S<0||S>=l[0])throw new Error(I.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C,o[C],l[0]));for(let k=0;k<u;k++)h[b*u+k]+=r[S*u+k]}if(s)for(let C=0;C<u;C++)h[b*u+C]/=g-d;if(d=g,++g,x=b+1,b=w,g>a)break}return x<p&&h.fill(i,x*u,p*u),[h,m]}var B2=Er(r=>Math.sqrt(r)),UK=vt(go,r=>Math.sqrt(r)),V2={kernelName:go,backendName:"cpu",kernelFunc:UK};var V0=Bt((r,t)=>{let e=r-t;return e*e}),WK=Ht(xo,V0),G2={kernelName:xo,backendName:"cpu",kernelFunc:WK};function Xg(r,t,e,o){let n=et(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var G0=class{constructor(t,e,o,n,s,i){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let d=o[n+a],g=0,x=b=>b.forEach(w=>d[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(t[m+b]),x(this.separator);if(p>0){x(t[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function Yg(r,t,e,o,n,s,i,a){return new G0(e,o,n,s,i,a).compute(r,t)}function HK(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function Zg(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;HK(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function Qg(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var U0=Bt((r,t)=>r-t),KK=sp((r,t,e,o)=>({real:r-e,imag:t-o})),eh=Ht(yo,U0,KK),U2={kernelName:yo,backendName:"cpu",kernelFunc:eh};function Jg(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=et(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var rh=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function W2(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));W2(r,t,m,f)}let n=r[t],s=e,i=o;for(y.swap(r,e,t),rh(r[o],n)>0&&y.swap(r,e,o);s<i;){for(y.swap(r,s,i),s++,i--;rh(r[s],n)<0;)s=s+1;for(;rh(r[i],n)>0;)i=i-1}rh(r[e],n)===0?y.swap(r,e,i):(i=i+1,y.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function tx(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(e,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,w)=>h[w]={value:b,index:w}),o<h.length&&(W2(h,o),h=h.slice(0,o)),n&&h.sort(rh);let d=p*o,g=l.subarray(d,d+o),x=u.subarray(d,d+o);for(let b=0;b<o;b++)g[b]=h[b].value,x[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[et(c,e,l),et(c,"int32",u)]}function ex(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i={},a=new Int32Array(e[n]),l=new jt(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let d;if(c)d=r[h].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,h,b));d=g.join(",")}if(i[d]!==void 0)a[h]=i[d];else{let g=Object.keys(i).length;i[d]=g,a[h]=g,u.push(h)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new jt(p,o);u.forEach((h,d)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,h,x),g,d,x)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}lc("cpu",()=>new Yl,1);var H0=vt(bn,r=>r>=0?r:Math.exp(r)-1),H2={kernelName:bn,backendName:"cpu",kernelFunc:H0};function K0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o;q([n],"leakyRelu");let i=y.sizeFromShape(n.shape),a=e.data.get(n.dataId).values,l=y.getTypedArrayFromDType("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?s*a[u]:a[u];return e.makeTensorInfo(n.shape,"float32",l)}var K2={kernelName:gs,backendName:"cpu",kernelFunc:K0};var qK=Bt((r,t)=>r<0?t*r:r);function q0(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t;q([o,n],"prelu");let s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,[a,l]=qK(o.shape,n.shape,s,i,"float32");return e.makeTensorInfo(l,"float32",a)}var q2={kernelName:ks,backendName:"cpu",kernelFunc:q0};var j0=vt(Dn,r=>Math.max(0,r)),j2={kernelName:Dn,backendName:"cpu",kernelFunc:j0};var X0=vt(Rn,r=>Math.min(Math.max(0,r),6)),X2={kernelName:Rn,backendName:"cpu",kernelFunc:X0};function Ql(r,t,e,o,n){if(e==="linear")return cr({inputs:{x:t},backend:r});if(e==="relu")return j0({inputs:{x:t},backend:r});if(e==="elu")return H0({inputs:{x:t},backend:r});if(e==="relu6")return X0({inputs:{x:t},backend:r});if(e==="prelu")return q0({inputs:{x:t,alpha:o},backend:r});if(e==="leakyrelu")return K0({inputs:{x:t},backend:r,attrs:{alpha:n}});if(e==="sigmoid")return M0({inputs:{x:t},backend:r});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Pt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=y.sizeFromShape(n.shape),a=y.inferFromImplicitShape(s,i),l=y.sizeFromShape(a);y.assert(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(n.dataId);let u=e.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,p=u.complexTensorInfos.imag;c.shape=a,p.shape=a}return{dataId:n.dataId,shape:a,dtype:n.dtype}}var Y2={kernelName:Ts,backendName:"cpu",kernelFunc:Pt};function Y0(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;q([n,s],"matMul");let l=n.shape.length,u=s.shape.length,c=i?n.shape[l-2]:n.shape[l-1],p=a?s.shape[u-1]:s.shape[u-2],m=i?n.shape[l-1]:n.shape[l-2],f=a?s.shape[u-2]:s.shape[u-1],h=n.shape.slice(0,-2),d=s.shape.slice(0,-2),g=y.sizeFromShape(h),x=y.sizeFromShape(d),w=wr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,f]);y.assert(c===p,()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${i} and transposeB=${a} must match.`);let C=i?[g,c,m]:[g,m,c],S=a?[x,f,p]:[x,p,f],k=Pt({inputs:{x:n},backend:e,attrs:{shape:C}}),E=Pt({inputs:{x:s},backend:e,attrs:{shape:S}}),A=i?k.shape[1]:k.shape[2],D=i?k.shape[2]:k.shape[1],O=a?E.shape[1]:E.shape[2],M=Math.max(g,x),B=e.data.get(k.dataId).values,V=e.data.get(E.dataId).values,U=y.computeStrides(k.shape),G=y.computeStrides(E.shape),[W,j,H]=i?[U[0],1,U[1]]:[U[0],U[1],1],[Z,J,tt]=a?[1,G[1],G[0]]:[G[1],1,G[0]],ot=D*O,rt=et([M,D,O],k.dtype),pt=rt.values,it=e.blockSize;for(let ht=0;ht<M;ht++)for(let It=0;It<D;It+=it)for(let Nt=0;Nt<O;Nt+=it)for(let $t=0;$t<A;$t+=it){let Mt=Math.min(It+it,D),Wt=Math.min(Nt+it,O),le=Math.min($t+it,A);for(let xe=It;xe<Mt;xe++)for(let Se=Nt;Se<Wt;Se++){let $e=0;for(let pe=$t;pe<le;pe++){let Pe=Math.min(ht,g-1)*W,Ve=Math.min(ht,x-1)*tt,ti=B[Pe+xe*j+pe*H],sr=V[pe*Z+Se*J+Ve];$e+=ti*sr}pt[ht*ot+(xe*O+Se)]+=$e}}return e.disposeIntermediateTensorInfo(k),e.disposeIntermediateTensorInfo(E),e.makeTensorInfo(w,rt.dtype,rt.values)}var Z2={kernelName:is,backendName:"cpu",kernelFunc:Y0};function jK(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o,m,f,h,d=[];m=Y0({inputs:{a:n,b:s},attrs:{transposeA:l,transposeB:u},backend:e}),i&&(f=Xs({inputs:{a:m,b:i},backend:e}),d.push(m),m=f),c&&(h=Ql(e,m,c,a,p),d.push(m),m=h);for(let x of d)e.disposeIntermediateTensorInfo(x);return m}var Q2={kernelName:ki,backendName:"cpu",kernelFunc:jK};var XK=vt(ni,r=>Math.acos(r)),J2={kernelName:ni,backendName:"cpu",kernelFunc:XK};var YK=vt(si,r=>Math.acosh(r)),tE={kernelName:si,backendName:"cpu",kernelFunc:YK};function ZK(r){let{inputs:t,backend:e}=r,o=t;q(t,"addN");let n=o.map(a=>e.data.get(a.dataId).values),s=et(o[0].shape,o[0].dtype),i=s.values;for(let a=0;a<o.length;a++){let l=n[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return e.makeTensorInfo(s.shape,s.dtype,s.values)}var eE={kernelName:aa,backendName:"cpu",kernelFunc:ZK};function QK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;q(n,"all");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Ce({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("all",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let S=d[b+C];w=w&&S}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Pt({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var rE={kernelName:ku,backendName:"cpu",kernelFunc:QK};function JK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;q(n,"any");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Ce({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("any",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let S=d[b+C];w=w||S}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Pt({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var oE={kernelName:Tu,backendName:"cpu",kernelFunc:JK};function tq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;q(n,"argMax");let i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Ce({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],I.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[c,p]=I.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*h,b=d[x],w=0;for(let C=0;C<h;++C){let S=d[x+C];S>b&&(b=S,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var nE={kernelName:os,backendName:"cpu",kernelFunc:tq};function eq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;q(n,"argMin");let i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Ce({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],I.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[c,p]=I.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*h,b=d[x],w=0;for(let C=0;C<h;++C){let S=d[x+C];S<b&&(b=S,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var sE={kernelName:ns,backendName:"cpu",kernelFunc:eq};var rq=vt(ii,r=>Math.asin(r)),iE={kernelName:ii,backendName:"cpu",kernelFunc:rq};var oq=vt(ai,r=>Math.asinh(r)),aE={kernelName:ai,backendName:"cpu",kernelFunc:oq};var nq=vt(li,r=>Math.atan(r)),lE={kernelName:li,backendName:"cpu",kernelFunc:nq};var sq=Bt((r,t)=>Math.atan2(r,t)),iq=Ht(hn,sq),uE={kernelName:hn,backendName:"cpu",kernelFunc:iq};var aq=vt(ui,r=>Math.atanh(r)),cE={kernelName:ui,backendName:"cpu",kernelFunc:aq};function cp(r,t,e,o,n,s){let i=n.strideHeight,a=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,p=n.effectiveFilterWidth,m=n.padInfo.top,f=n.padInfo.left,h=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,d=et(n.outShape,e),g=d.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],w=n.outShape[3];for(let C=0;C<n.batchSize;++C){let S=C*x,k=C*o[0];for(let E=0;E<n.inChannels;++E)for(let A=0;A<n.outHeight;++A){let D=A*i-m,O=Math.max(0,D),M=Math.min(n.inHeight,c+D),B=S+A*b;for(let V=0;V<n.outWidth;++V){let U=V*a-f,G=Math.max(0,U),W=Math.min(n.inWidth,p+U),j=h,H=0,Z=0;for(let tt=O;tt<M;tt+=l){let ot=k+tt*o[1];for(let rt=G;rt<W;rt+=u){let pt=ot+rt*o[2],it=r[pt+E];s==="max"&&it>j?j=it:s==="avg"&&(H+=it,Z++)}if(isNaN(j))break}let J=B+V*w+E;g[J]=s==="avg"?H/Z:j}}}return d}function rx(r,t,e,o,n=!1,s=!1){let i=et(o.outShape,"int32"),a=o.strideHeight,l=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,p=o.effectiveFilterHeight,m=o.effectiveFilterWidth,f=o.padInfo.top,h=o.padInfo.left,d=et(t,e,r);for(let g=0;g<o.batchSize;++g)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let w=b*a-f,C=w;for(;C<0;)C+=u;let S=Math.min(o.inHeight,p+w);for(let k=0;k<o.outWidth;++k){let E=k*l-h,A=E;for(;A<0;)A+=c;let D=Math.min(o.inWidth,m+E),O=Number.NEGATIVE_INFINITY,M=-1;for(let B=C;B<S;B+=u){let V=B-w;for(let U=A;U<D;U+=c){let G=U-E,W=d.get(g,B,U,x);W>O&&(O=W,n?M=s?((g*o.inHeight+B)*o.inWidth+U)*o.inChannels+x:(B*o.inWidth+U)*o.inChannels+x:M=V*m+G)}}i.set(M,g,b,k,x)}}return i}function ox(r,t,e,o,n,s){let i=n.strideDepth,a=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,p=n.dilationWidth,m=n.effectiveFilterDepth,f=n.effectiveFilterHeight,h=n.effectiveFilterWidth,d=n.padInfo.front,g=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=et(n.outShape,e),C=w.values,S=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],k=n.outShape[2]*n.outShape[3]*n.outShape[4],E=n.outShape[3]*n.outShape[4],A=n.outShape[4];for(let D=0;D<n.batchSize;++D){let O=D*S,M=D*o[0];for(let B=0;B<n.inChannels;++B)for(let V=0;V<n.outDepth;++V){let U=V*i-d,G=U;for(;G<0;)G+=u;let W=Math.min(n.inDepth,m+U),j=O+V*k;for(let H=0;H<n.outHeight;++H){let Z=H*a-g,J=Z;for(;J<0;)J+=c;let tt=Math.min(n.inHeight,f+Z),ot=j+H*E;for(let rt=0;rt<n.outWidth;++rt){let pt=rt*l-x,it=pt;for(;it<0;)it+=p;let ht=Math.min(n.inWidth,h+pt),It=ot+rt*A,Nt=b,$t=0,Mt=0;for(let le=G;le<W;le+=u){let xe=M+le*o[1];for(let Se=J;Se<tt;Se+=c){let $e=xe+Se*o[2];for(let pe=it;pe<ht;pe+=p){let Pe=$e+pe*o[3],Ve=r[Pe+B];if(s==="max"&&Ve>Nt?Nt=Ve:s==="avg"&&($t+=Ve,Mt++),isNaN(Nt))break}if(isNaN(Nt))break}if(isNaN(Nt))break}let Wt=It+B;C[Wt]=s==="avg"?$t/Mt:Nt}}}}return w}function pE(r,t){let e=et(t.outShape,"int32"),o=t.strideDepth,n=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,m=t.padInfo.front,f=t.padInfo.top,h=t.padInfo.left;for(let d=0;d<t.batchSize;++d)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){let b=x*o-m,w=b;for(;w<0;)w+=i;let C=Math.min(t.inDepth,u+b);for(let S=0;S<t.outHeight;++S){let k=S*n-f,E=k;for(;E<0;)E+=a;let A=Math.min(t.inHeight,c+k);for(let D=0;D<t.outWidth;++D){let O=D*s-h,M=O;for(;M<0;)M+=l;let B=Math.min(t.inWidth,p+O),V=Number.NEGATIVE_INFINITY,U=-1;for(let G=w;G<C;G+=i){let W=G-b;for(let j=E;j<A;j+=a){let H=j-k;for(let Z=M;Z<B;Z+=l){let J=Z-O,tt=r.get(d,G,j,Z,g);tt>=V&&(V=tt,U=W*c*p+H*c+J)}}}e.set(U,d,x,S,D,g)}}}return e}function lq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;q(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=cr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=cp(m,n.shape,n.dtype,f,c,"avg");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var mE={kernelName:ss,backendName:"cpu",kernelFunc:lq};function uq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;q(n,"avgPool3d");let c=I.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=ox(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"avg");return e.makeTensorInfo(m.shape,"float32",m.values)}var fE={kernelName:la,backendName:"cpu",kernelFunc:uq};function cq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;q([n,s],"avgPool3DGrad");let c=I.computePool3DInfo(s.shape,i,a,1,l,u),p=c.strideDepth,m=c.strideHeight,f=c.strideWidth,h=c.filterDepth,d=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,w=c.dilationWidth,C=c.effectiveFilterDepth,S=c.effectiveFilterHeight,k=c.effectiveFilterWidth,E=C-1-c.padInfo.front,A=k-1-c.padInfo.left,D=S-1-c.padInfo.top,O=et(s.shape,"float32"),M=1/(h*d*g),B=e.bufferSync(n);for(let V=0;V<c.batchSize;++V)for(let U=0;U<c.inChannels;++U)for(let G=0;G<c.inDepth;++G)for(let W=0;W<c.inHeight;++W)for(let j=0;j<c.inWidth;++j){let H=G-E,Z=W-D,J=j-A,tt=0;for(let ot=0;ot<C;ot+=x){let rt=(H+ot)/p;if(!(rt<0||rt>=c.outDepth||Math.floor(rt)!==rt))for(let pt=0;pt<S;pt+=b){let it=(Z+pt)/m;if(!(it<0||it>=c.outHeight||Math.floor(it)!==it))for(let ht=0;ht<k;ht+=w){let It=(J+ht)/f;if(It<0||It>=c.outWidth||Math.floor(It)!==It)continue;tt+=B.get(V,rt,it,It,U)}}}O.set(tt*M,V,G,W,j,U)}return e.makeTensorInfo(O.shape,O.dtype,O.values)}var hE={kernelName:Eu,backendName:"cpu",kernelFunc:cq};function pq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;q([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=I.computePool2DInfo(i.shape,a,l,1,u),p=c.strideHeight,m=c.strideWidth,f=c.filterHeight,h=c.filterWidth,d=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,w=b-1-c.padInfo.left,C=x-1-c.padInfo.top,S=et(i.shape,"float32"),k=1/(f*h),E=e.data.get(n.dataId).values,A=et(n.shape,"float32",E);for(let D=0;D<c.batchSize;++D)for(let O=0;O<c.inChannels;++O)for(let M=0;M<c.inHeight;++M)for(let B=0;B<c.inWidth;++B){let V=M-C,U=B-w,G=0;for(let W=0;W<x;W+=d){let j=(V+W)/p;if(!(j<0||j>=c.outHeight||Math.floor(j)!==j))for(let H=0;H<b;H+=g){let Z=(U+H)/m;if(Z<0||Z>=c.outWidth||Math.floor(Z)!==Z)continue;G+=A.get(D,j,Z,O)}}S.set(G*k,D,M,B,O)}return e.makeTensorInfo(S.shape,S.dtype,S.values)}var dE={kernelName:Nu,backendName:"cpu",kernelFunc:pq};function mq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,scale:s,offset:i,mean:a,variance:l}=t;y.assert(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),q([n,a,l,s,i],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=e.data.get(n.dataId).values,p=e.data.get(a.dataId).values,m=e.data.get(l.dataId).values,f=s?e.data.get(s.dataId).values:new Float32Array([1]),h=i?e.data.get(i.dataId).values:new Float32Array([0]),d=new Float32Array(c.length),g=h.length,x=f.length,b=m.length,w=p.length,C=0,S=0,k=0,E=0;for(let A=0;A<c.length;++A)d[A]=h[C++]+(c[A]-p[S++])*f[k++]/Math.sqrt(m[E++]+u),C>=g&&(C=0),S>=w&&(S=0),k>=x&&(k=0),E>=b&&(E=0);return e.makeTensorInfo(n.shape,n.dtype,d)}var gE={kernelName:hs,backendName:"cpu",kernelFunc:mq};function fq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;q([n],"batchToSpaceND");let a=s.reduce((x,b)=>x*b),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=Pt({inputs:{x:n},backend:e,attrs:{shape:l}}),h=Ce({inputs:{x:f},backend:e,attrs:{perm:u}}),d=Pt({inputs:{x:h},backend:e,attrs:{shape:c}}),g=rn({inputs:{x:d},backend:e,attrs:{begin:p,size:m}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var xE={kernelName:as,backendName:"cpu",kernelFunc:fq};function hq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=ip(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var yE={kernelName:$u,backendName:"cpu",kernelFunc:hq};function dq(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=I.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var bE={kernelName:_h,backendName:"cpu",kernelFunc:dq};var gq=vt(dn,(r,t)=>{let e=t;return r>e.clipValueMax?e.clipValueMax:r<e.clipValueMin?e.clipValueMin:r}),wE={kernelName:dn,backendName:"cpu",kernelFunc:gq};var xq=r=>{let{x:t}=r.inputs,e=r.backend,o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId),s=n.complexTensorInfos.real,i=n.complexTensorInfos.imag,a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values;for(let u=0;u<a.length;u++){let c=a[u],p=l[u];o[u]=Math.hypot(c,p)}return e.makeOutput(o,t.shape,"float32")},CE={kernelName:ua,backendName:"cpu",kernelFunc:xq};function Ys(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.imag,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var IE={kernelName:xa,backendName:"cpu",kernelFunc:Ys};function ja(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=I.computeOutShape(t.map(d=>d.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(d=>y.sizeFromShape(d.shape)>0);if(a.length===1)return cr({inputs:{x:a[0]},backend:e});let l=a.map(d=>d.shape);if(I.assertParamsConsistent(l,s),a[0].dtype==="complex64"){let d=a.map(C=>Qo({inputs:{input:C},backend:e})),g=a.map(C=>Ys({inputs:{input:C},backend:e})),x=ja({inputs:d,backend:e,attrs:{axis:s}}),b=ja({inputs:g,backend:e,attrs:{axis:s}}),w=Ke({inputs:{real:x,imag:b},backend:e});return d.forEach(C=>e.disposeIntermediateTensorInfo(C)),g.forEach(C=>e.disposeIntermediateTensorInfo(C)),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),w}let u=a.map(d=>{let g=y.sizeFromShape(d.shape.slice(s));return Pt({inputs:{x:d},backend:e,attrs:{shape:[-1,g]}})}),c=u.map(d=>({vals:e.data.get(d.dataId).values,shape:d.shape}));i=I.computeOutShape(u.map(d=>d.shape),1);let p=u[0].shape[0]===1,m=Bg(c,i,t[0].dtype,p),f=I.computeOutShape(a.map(d=>d.shape),s),h=e.makeTensorInfo(f,t[0].dtype,m);return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var SE={kernelName:ls,backendName:"cpu",kernelFunc:ja};function Z0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o;q([n,s],"conv2d");let p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f=m.filterHeight,h=m.filterWidth,d=m.dilationHeight,g=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,w=m.dataFormat==="channelsLast",C=new jt(m.outShape,n.dtype),S=y.computeStrides(n.shape),k=y.computeStrides(s.shape),E=S[0],A=w?S[1]:S[2],D=w?S[2]:1,O=w?1:S[1],M=C.strides[0],B=w?C.strides[1]:C.strides[2],V=w?C.strides[2]:1,U=w?1:C.strides[1],G=e.data.get(n.dataId).values,W=e.data.get(s.dataId).values,j=C.values;for(let H=0;H<m.batchSize;++H){let Z=H*E,J=H*M;for(let tt=0;tt<m.outHeight;++tt){let ot=J+tt*B,rt=tt*m.strideHeight-b;for(let pt=0;pt<f;++pt){let it=rt+pt*d;if(it<0||it>=m.inHeight)continue;let ht=pt*k[0],It=Z+it*A;for(let Nt=0;Nt<m.outWidth;++Nt){let $t=ot+Nt*V,Mt=Nt*m.strideWidth-x;for(let Wt=0;Wt<h;++Wt){let le=Mt+Wt*g;if(le<0||le>=m.inWidth)continue;let xe=ht+Wt*k[1],Se=It+le*D,$e=xe;for(let pe=0;pe<m.inChannels;++pe){let Pe=G[Se+pe*O];for(let Ve=0;Ve<m.outChannels;++Ve)j[$t+Ve*U]+=Pe*W[$e+Ve];$e+=m.outChannels}}}}}}return e.makeTensorInfo(C.shape,C.dtype,j)}var vE={kernelName:us,backendName:"cpu",kernelFunc:Z0};function yq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o;q([n,s],"conv2dBackpropFilter");let p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),{strideHeight:f,strideWidth:h,filterHeight:d,filterWidth:g}=m,x=m.dataFormat==="channelsLast",b=new jt(m.filterShape,"float32"),w=m.padInfo.left,C=m.padInfo.top,S=e.data.get(n.dataId).values,k=e.data.get(s.dataId).values,E=new jt(n.shape,n.dtype,S),A=new jt(s.shape,s.dtype,k);for(let D=0;D<d;++D){let O=Math.max(0,Math.ceil((C-D)/f)),M=Math.min(m.outHeight,(m.inHeight+C-D)/f);for(let B=0;B<g;++B){let V=Math.max(0,Math.ceil((w-B)/h)),U=Math.min(m.outWidth,(m.inWidth+w-B)/h);for(let G=0;G<m.inChannels;++G)for(let W=0;W<m.outChannels;++W){let j=0;for(let H=0;H<m.batchSize;++H)for(let Z=O;Z<M;++Z){let J=D+Z*f-C;for(let tt=V;tt<U;++tt){let ot=B+tt*h-w;x?j+=E.get(H,J,ot,G)*A.get(H,Z,tt,W):j+=E.get(H,G,J,ot)*A.get(H,W,Z,tt)}}b.set(j,D,B,G,W)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var kE={kernelName:Au,backendName:"cpu",kernelFunc:yq};function bq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o;q([n,s],"conv2dBackpropInput");let p=y.computeStrides(s.shape),m=y.computeStrides(n.shape),f=I.convertConv2DDataFormat(u),h=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,f),d=new jt(h.inShape,"float32"),g=d.values,x=e.data.get(n.dataId).values,b=e.data.get(s.dataId).values,[w,C,S]=p,{batchSize:k,filterHeight:E,filterWidth:A,inChannels:D,inHeight:O,inWidth:M,outChannels:B,outHeight:V,outWidth:U,strideHeight:G,strideWidth:W}=h;f=h.dataFormat;let j=E-1-h.padInfo.top,H=A-1-h.padInfo.left,Z=f==="channelsLast",J=d.strides[0],tt=Z?d.strides[1]:d.strides[2],ot=Z?d.strides[2]:1,rt=Z?1:d.strides[1],pt=m[0],it=Z?m[1]:m[2],ht=Z?m[2]:1,It=Z?1:m[1];for(let Nt=0;Nt<k;++Nt)for(let $t=0;$t<D;++$t)for(let Mt=0;Mt<O;++Mt){let Wt=Mt-j,le=Math.max(0,Math.ceil(Wt/G)),xe=Math.min(V,(E+Wt)/G);for(let Se=0;Se<M;++Se){let $e=Se-H,pe=Math.max(0,Math.ceil($e/W)),Pe=Math.min(U,(A+$e)/W),Ve=0;for(let sr=le;sr<xe;++sr){let ea=sr*G-Wt;for(let Jr=pe;Jr<Pe;++Jr){let sl=Jr*W-$e,pn=pt*Nt+it*sr+ht*Jr,ei=w*(E-1-ea)+C*(A-1-sl)+S*$t;for(let ra=0;ra<B;++ra){let oa=x[pn+It*ra],na=b[ei+ra];Ve+=oa*na}}}let ti=J*Nt+tt*Mt+ot*Se+rt*$t;g[ti]=Ve}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}var TE={kernelName:cs,backendName:"cpu",kernelFunc:bq};function wq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o;q([n,s],"conv3d");let u=I.computeConv3DInfo(n.shape,s.shape,i,l,a),{filterDepth:c,filterHeight:p,filterWidth:m,dilationDepth:f,dilationHeight:h,dilationWidth:d,padInfo:g}=u,x=g.front,b=g.left,w=g.top,C=new jt(u.outShape,n.dtype),S=e.data.get(n.dataId).values,k=e.data.get(s.dataId).values,E=C.values,A=y.computeStrides(n.shape),D=y.computeStrides(s.shape);for(let O=0;O<u.batchSize;++O){let M=O*A[0],B=O*C.strides[0];for(let V=0;V<u.outDepth;++V){let U=B+V*C.strides[1],G=V*u.strideDepth-x;for(let W=0;W<c;++W){let j=G+W*f;if(j<0||j>=u.inDepth)continue;let H=W*D[0],Z=M+j*A[1];for(let J=0;J<u.outHeight;++J){let tt=U+J*C.strides[2],ot=J*u.strideHeight-w;for(let rt=0;rt<p;++rt){let pt=ot+rt*h;if(pt<0||pt>=u.inHeight)continue;let it=H+rt*D[1],ht=Z+pt*A[2];for(let It=0;It<u.outWidth;++It){let Nt=tt+It*u.outChannels,$t=It*u.strideWidth-b;for(let Mt=0;Mt<m;++Mt){let Wt=$t+Mt*d;if(Wt<0||Wt>=u.inWidth)continue;let le=it+Mt*D[2],xe=ht+Wt*u.inChannels,Se=le;for(let $e=0;$e<u.inChannels;++$e){let pe=S[xe+$e];for(let Pe=0;Pe<u.outChannels;++Pe)E[Nt+Pe]+=pe*k[Se+Pe];Se+=u.outChannels}}}}}}}}return e.makeTensorInfo(C.shape,C.dtype,C.values)}var NE={kernelName:ca,backendName:"cpu",kernelFunc:wq};function Cq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o;q([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=I.computeConv3DInfo(n.shape,l,i,1,a),m=p.strideDepth,f=p.strideHeight,h=p.strideWidth,d=p.filterDepth,g=p.filterHeight,x=p.filterWidth,b=new jt(p.filterShape,"float32"),w=b.values,[C,S,k,E]=b.strides,A=e.data.get(s.dataId).values,[D,O,M,B]=c,V=e.data.get(n.dataId).values,[U,G,W,j]=u,H=p.padInfo.front,Z=p.padInfo.left,J=p.padInfo.top;for(let tt=0;tt<d;++tt){let ot=Math.max(0,Math.ceil((H-tt)/m)),rt=Math.min(p.outDepth,(p.inDepth+H-tt)/m),pt=tt*C;for(let it=0;it<g;++it){let ht=Math.max(0,Math.ceil((J-it)/f)),It=Math.min(p.outHeight,(p.inHeight+J-it)/f),Nt=it*S+pt;for(let $t=0;$t<x;++$t){let Mt=Math.max(0,Math.ceil((Z-$t)/h)),Wt=Math.min(p.outWidth,(p.inWidth+Z-$t)/h),le=$t*k+Nt;for(let xe=0;xe<p.inChannels;++xe){let Se=xe*E+le;for(let $e=0;$e<p.outChannels;++$e){let pe=0;for(let Pe=0;Pe<p.batchSize;++Pe){let Ve=Pe*U,ti=Pe*D;for(let sr=ot;sr<rt;++sr){let Jr=(tt+sr*m-H)*G+Ve,sl=sr*O+ti;for(let pn=ht;pn<It;++pn){let ra=(it+pn*f-J)*W+Jr,oa=pn*M+sl;for(let na=Mt;na<Wt;++na){let Gb=($t+na*h-Z)*j+ra,Ub=na*B+oa;pe+=V[Gb+xe]*A[Ub+$e]}}}}w[Se+$e]=pe}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var EE={kernelName:Du,backendName:"cpu",kernelFunc:Cq};function Iq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o;q([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=I.computeConv3DInfo(l,s.shape,a,1,i),m=new jt(p.inShape,"float32"),f=m.values,[h,d,g,x]=m.strides,b=e.data.get(n.dataId).values,[w,C,S,k]=u,E=e.data.get(s.dataId).values,[A,D,O,M]=c,{batchSize:B,filterDepth:V,filterHeight:U,filterWidth:G,inChannels:W,inDepth:j,inHeight:H,inWidth:Z,outChannels:J,outDepth:tt,outHeight:ot,outWidth:rt,strideDepth:pt,strideHeight:it,strideWidth:ht}=p,It=V-1-p.padInfo.front,Nt=U-1-p.padInfo.top,$t=G-1-p.padInfo.left;for(let Mt=0;Mt<B;++Mt)for(let Wt=0;Wt<W;++Wt)for(let le=0;le<j;++le){let xe=le-It,Se=Math.max(0,Math.ceil(xe/pt)),$e=Math.min(tt,(V+xe)/pt);for(let pe=0;pe<H;++pe){let Pe=pe-Nt,Ve=Math.max(0,Math.ceil(Pe/it)),ti=Math.min(ot,(U+Pe)/it);for(let sr=0;sr<Z;++sr){let ea=sr-$t,Jr=Math.max(0,Math.ceil(ea/ht)),sl=Math.min(rt,(G+ea)/ht),pn=0;for(let ei=Se;ei<$e;++ei){let ra=ei*pt-xe;for(let oa=Ve;oa<ti;++oa){let na=oa*it-Pe;for(let Vp=Jr;Vp<sl;++Vp){let Gb=Vp*ht-ea,Ub=w*Mt+C*ei+S*oa+k*Vp,Sz=A*(V-1-ra)+D*(U-1-na)+O*(G-1-Gb)+M*Wt;for(let Ah=0;Ah<J;++Ah){let vz=b[Ub+Ah],kz=E[Sz+Ah];pn+=vz*kz}}}}f[h*Mt+d*le+g*pe+x*sr+Wt]=pn}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}var $E={kernelName:Ru,backendName:"cpu",kernelFunc:Iq};var Sq=vt(gn,r=>Math.cos(r)),AE={kernelName:gn,backendName:"cpu",kernelFunc:Sq};var vq=vt(xn,r=>Math.cosh(r)),DE={kernelName:xn,backendName:"cpu",kernelFunc:vq};function kq(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,[c,p,m,f]=n.shape,h=s.shape[0],[d,g]=a,x=et([h,d,g,f],"float32"),b=e.data.get(s.dataId).values,w=e.data.get(i.dataId).values,C=e.data.get(n.dataId).values,S=y.computeStrides(n.shape),k=y.computeStrides(x.shape);for(let E=0;E<h;E++){let A=E*4,D=b[A],O=b[A+1],M=b[A+2],B=b[A+3],V=w[E];if(V>=c)continue;let U=d>1?(M-D)*(p-1)/(d-1):0,G=g>1?(B-O)*(m-1)/(g-1):0;for(let W=0;W<d;W++){let j=d>1?D*(p-1)+W*U:.5*(D+M)*(p-1);if(j<0||j>p-1){for(let H=0;H<g;H++)for(let Z=0;Z<f;Z++){let J=Z+H*k[2]+W*k[1]+E*k[0];x.values[J]=u}continue}if(l==="bilinear"){let H=Math.floor(j),Z=Math.ceil(j),J=j-H;for(let tt=0;tt<g;tt++){let ot=g>1?O*(m-1)+tt*G:.5*(O+B)*(m-1);if(ot<0||ot>m-1){for(let ht=0;ht<f;ht++){let It=ht+tt*k[2]+W*k[1]+E*k[0];x.values[It]=u}continue}let rt=Math.floor(ot),pt=Math.ceil(ot),it=ot-rt;for(let ht=0;ht<f;ht++){let It=ht+rt*S[2]+H*S[1]+V*S[0],Nt=C[It];It=ht+pt*S[2]+H*S[1]+V*S[0];let $t=C[It];It=ht+rt*S[2]+Z*S[1]+V*S[0];let Mt=C[It];It=ht+pt*S[2]+Z*S[1]+V*S[0];let Wt=C[It],le=Nt+($t-Nt)*it,xe=Mt+(Wt-Mt)*it;It=ht+tt*k[2]+W*k[1]+E*k[0],x.values[It]=le+(xe-le)*J}}}else for(let H=0;H<g;++H){let Z=g>1?O*(m-1)+H*G:.5*(O+B)*(m-1);if(Z<0||Z>m-1){for(let ot=0;ot<f;ot++){let rt=ot+H*k[2]+W*k[1]+E*k[0];x.values[rt]=u}continue}let J=Math.round(Z),tt=Math.round(j);for(let ot=0;ot<f;ot++){let rt=ot+J*S[2]+tt*S[1]+V*S[0],pt=ot+H*k[2]+W*k[1]+E*k[0];x.values[pt]=C[rt]}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}var RE={kernelName:ma,backendName:"cpu",kernelFunc:kq};function Tq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;q(n,"cumprod");let l=I.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=Ce({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=I.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Qt(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let w=d(x,b);if(b===0)m[w]=i?1:f[w];else{let C=d(x,b-1);m[w]=i?f[C]*m[C]:f[w]*m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=I.getUndoAxesPermutation(l),b=Ce({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var FE={kernelName:pa,backendName:"cpu",kernelFunc:Tq};function Nq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;q(n,"cumsum");let l=I.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=Ce({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=I.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Qt(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let w=d(x,b);if(b===0)m[w]=i?0:f[w];else{let C=d(x,b-1);m[w]=i?f[C]+m[C]:f[w]+m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=I.getUndoAxesPermutation(l),b=Ce({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var _E={kernelName:ps,backendName:"cpu",kernelFunc:Nq};function Eq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=ip(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=Mg(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var OE={kernelName:Oh,backendName:"cpu",kernelFunc:Eq};function $q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o;y.assert(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let a=n.shape[0],l=n.shape[1],u=n.shape[2],c=n.shape[3],p=l*s,m=u*s,f=c/(s*s),h=e.data.get(n.dataId).values,d=new Float32Array(a*p*m*f),g=0;for(let x=0;x<a;++x)for(let b=0;b<p;++b){let w=Math.floor(b/s),C=b%s;for(let S=0;S<m;++S){let k=Math.floor(S/s),E=S%s,A=(C*s+E)*f;for(let D=0;D<f;++D){let M=D+A+c*(k+u*(w+l*x));d[g++]=h[M]}}}return e.makeTensorInfo([a,p,m,f],n.dtype,d)}var PE={kernelName:fa,backendName:"cpu",kernelFunc:$q};function Q0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o;q([n,s],"depthwiseConv2DNative");let c=y.computeStrides(n.shape),p=y.computeStrides(s.shape),m=l;m==null&&(m=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(i,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${m}'`);let f=I.computeConv2DInfo(n.shape,s.shape,i,m,a,u,!0),{filterHeight:h,filterWidth:d,dilationHeight:g,dilationWidth:x,padInfo:b}=f,w=b.left,C=b.top,S=f.outChannels/f.inChannels,k=new jt(f.outShape,n.dtype),E=e.data.get(n.dataId).values,A=e.data.get(s.dataId).values,D=k.values;for(let O=0;O<f.batchSize;++O){let M=O*c[0],B=O*k.strides[0];for(let V=0;V<f.outHeight;++V){let U=B+V*k.strides[1],G=V*f.strideHeight-C;for(let W=0;W<h;++W){let j=G+W*g;if(j<0||j>=f.inHeight)continue;let H=W*p[0],Z=M+j*c[1];for(let J=0;J<f.outWidth;++J){let tt=U+J*k.strides[2],ot=J*f.strideWidth-w;for(let rt=0;rt<d;++rt){let pt=ot+rt*x;if(pt<0||pt>=f.inWidth)continue;let it=H+rt*p[1],ht=Z+pt*f.inChannels,It=tt,Nt=it;for(let $t=0;$t<f.inChannels;++$t){let Mt=E[ht+$t];for(let Wt=0;Wt<S;++Wt)D[It+Wt]+=Mt*A[Nt+Wt];It+=S,Nt+=S}}}}}}return e.makeTensorInfo(k.shape,k.dtype,k.values)}var LE={kernelName:ms,backendName:"cpu",kernelFunc:Q0};function Aq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o;q([n,s],"depthwiseConv2dNativeBackpropFilter");let p=I.computeConv2DInfo(n.shape,c,i,a,l,u,!0),{strideHeight:m,strideWidth:f,filterHeight:h,filterWidth:d}=p,g=new jt(p.filterShape,"float32"),x=p.padInfo.left,b=p.padInfo.top,w=p.outChannels/p.inChannels,C=e.data.get(n.dataId).values,S=new jt(n.shape,n.dtype,C),k=e.data.get(s.dataId).values,E=new jt(s.shape,s.dtype,k);for(let A=0;A<h;++A){let D=Math.max(0,Math.ceil((b-A)/m)),O=Math.min(p.outHeight,(p.inHeight+b-A)/m);for(let M=0;M<d;++M){let B=Math.max(0,Math.ceil((x-M)/f)),V=Math.min(p.outWidth,(p.inWidth+x-M)/f);for(let U=0;U<p.outChannels;++U){let G=Math.trunc(U/w),W=U%w,j=0;for(let H=0;H<p.batchSize;++H)for(let Z=D;Z<O;++Z){let J=A+Z*m-b;for(let tt=B;tt<V;++tt){let ot=M+tt*f-x;j+=S.get(H,J,ot,G)*E.get(H,Z,tt,U)}}g.set(j,A,M,G,W)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}var zE={kernelName:Fu,backendName:"cpu",kernelFunc:Aq};function Dq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o;q([n,s],"depthwiseConv2DNativeBackpropInput");let p=y.computeStrides(n.shape),m=y.computeStrides(s.shape),f=I.computeConv2DInfo(c,s.shape,i,a,l,u,!0),h=new jt(f.inShape,"float32"),d=h.values,[g,x,b]=h.strides,w=e.data.get(n.dataId).values,[C,S,k]=p,E=e.data.get(s.dataId).values,[A,D,O]=m,{batchSize:M,filterHeight:B,filterWidth:V,inChannels:U,inHeight:G,inWidth:W,outChannels:j,outHeight:H,outWidth:Z,strideHeight:J,strideWidth:tt}=f,ot=B-1-f.padInfo.top,rt=V-1-f.padInfo.left,pt=j/U;for(let it=0;it<M;++it)for(let ht=0;ht<U;++ht)for(let It=0;It<G;++It){let Nt=It-ot,$t=Math.max(0,Math.ceil(Nt/J)),Mt=Math.min(H,(B+Nt)/J);for(let Wt=0;Wt<W;++Wt){let le=Wt-rt,xe=Math.max(0,Math.ceil(le/tt)),Se=Math.min(Z,(V+le)/tt),$e=0;for(let pe=$t;pe<Mt;++pe){let Pe=pe*J-Nt;for(let Ve=xe;Ve<Se;++Ve){let ti=Ve*tt-le,sr=C*it+S*pe+k*Ve,ea=A*(B-1-Pe)+D*(V-1-ti)+O*ht;for(let Jr=0;Jr<pt;++Jr){let sl=ht*pt+Jr,pn=w[sr+sl],ei=E[ea+Jr];$e+=pn*ei}}}d[g*it+x*It+b*Wt+ht]=$e}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}var ME={kernelName:_u,backendName:"cpu",kernelFunc:Dq};function Rq(r){let{inputs:t,backend:e}=r,{x:o}=t,n=y.sizeFromShape(o.shape),s=e.data.get(o.dataId).values,i=et([n,n],o.dtype),a=i.values;for(let u=0;u<s.length;u++)a[u*n+u]=s[u];let l=[...o.shape,...o.shape];return e.makeTensorInfo(l,i.dtype,i.values)}var BE={kernelName:Ph,backendName:"cpu",kernelFunc:Rq};var VE={kernelName:ha,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n}=r,{strides:s,pad:i,dilations:a}=e,l=t,u=l.data.get(o.dataId).values,c=o.shape.length,p=l.data.get(n.dataId).values,m=n.shape.length,{batchSize:f,inHeight:h,inWidth:d,inChannels:g,outHeight:x,outWidth:b,padInfo:w,strideHeight:C,strideWidth:S,filterHeight:k,filterWidth:E,dilationHeight:A,dilationWidth:D,outShape:O}=I.computeDilation2DInfo(o.shape,n.shape,s,i,"NHWC",a),M=y.sizeFromShape(O),B=O.length,V=y.getArrayFromDType(o.dtype,M);for(let G=0;G<f;++G)for(let W=0;W<x;++W){let j=W*C-w.top;for(let H=0;H<b;++H){let Z=H*S-w.left;for(let J=0;J<g;++J){let tt=Number.MIN_SAFE_INTEGER;for(let rt=0;rt<k;++rt){let pt=j+rt*A;if(pt>=0&&pt<h)for(let it=0;it<E;++it){let ht=Z+it*D;if(ht>=0&&ht<d){let It=y.locToIndex([G,pt,ht,J],c,y.computeStrides(o.shape)),Nt=y.locToIndex([rt,it,J],m,y.computeStrides(n.shape)),$t=u[It]+p[Nt];$t>tt&&(tt=$t)}}}let ot=y.locToIndex([G,W,H,J],B,y.computeStrides(O));V[ot]=tt}}}return{dataId:l.write(y.toTypedArray(V,o.dtype),O,o.dtype),shape:O,dtype:o.dtype}}};var GE={kernelName:Xp,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:S,filterWidth:k,dilationHeight:E,dilationWidth:A,outShape:D}=I.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===D.length,()=>`Error in ${Xp}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);let O=y.toNestedArray(D,u.data.get(s.dataId).values),M=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let V=0;V<m;++V)for(let U=0;U<g;++U){let G=U*w-b.top;for(let W=0;W<x;++W){let j=W*C-b.left;for(let H=0;H<d;++H){let Z=Number.MIN_SAFE_INTEGER,J=0,tt=0;for(let ot=0;ot<S;++ot){let rt=G+ot*E;if(rt>=0&&rt<f)for(let pt=0;pt<k;++pt){let it=j+pt*A;if(it>=0&&it<h){let ht=c[V][rt][it][H]+p[ot][pt][H];ht>Z&&(Z=ht,J=ot,tt=pt)}}}M[J][tt][H]+=O[V][U][W][H]}}}return{dataId:u.write(y.toTypedArray(M,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var UE={kernelName:jp,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:S,filterWidth:k,dilationHeight:E,dilationWidth:A,outShape:D}=I.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===D.length,()=>`Error in ${jp}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);let O=y.toNestedArray(D,u.data.get(s.dataId).values),M=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let V=0;V<m;++V)for(let U=0;U<g;++U){let G=U*w-b.top;for(let W=0;W<x;++W){let j=W*C-b.left;for(let H=0;H<d;++H){let Z=Number.MIN_SAFE_INTEGER,J=G<0?0:G,tt=j<0?0:j;for(let ot=0;ot<S;++ot){let rt=G+ot*E;if(rt>=0&&rt<f)for(let pt=0;pt<k;++pt){let it=j+pt*A;if(it>=0&&it<h){let ht=c[V][rt][it][H]+p[ot][pt][H];ht>Z&&(Z=ht,J=rt,tt=it)}}}M[V][J][tt][H]+=O[V][U][W][H]}}}return{dataId:u.write(y.toTypedArray(M,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function ji(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;q(n,"sum");let a;n.dtype==="bool"?a=Jo({inputs:{x:n},backend:e,attrs:{dtype:"int32"}}):a=cr({inputs:{x:n},backend:e});let l=a.shape.length,u=y.parseAxisParam(s,a.shape),c=I.getAxesPermutation(u,l),p=u,m=a;c!=null&&(m=Ce({inputs:{x:a},backend:e,attrs:{perm:c}}),p=I.getInnerMostAxes(p.length,l)),I.assertAxesAreInnerMostDims("sum",p,m.shape.length);let[f,h]=I.computeOutAndReduceShapes(m.shape,p),d=I.upcastType(m.dtype,"int32"),g=np(e,f,d),x=y.sizeFromShape(h),b=e.data.get(g.dataId).values,w=e.data.get(m.dataId).values;for(let C=0;C<b.length;++C){let S=C*x,k=0;for(let E=0;E<x;++E)k+=w[S+E];b[C]=k}if(i){let C=I.expandShapeToKeepDim(g.shape,u),S=g;g=Pt({inputs:{x:g},backend:e,attrs:{shape:C}}),e.disposeIntermediateTensorInfo(S)}return e.disposeIntermediateTensorInfo(a),c!=null&&e.disposeIntermediateTensorInfo(m),g}var WE={kernelName:As,backendName:"cpu",kernelFunc:ji};function Fq(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[g]),w;I.isIdentityPermutation(x)?w=s[g]:(w=Ce({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let S=0;S<b.length;++S)C.splice(b[S],0,1);y.arraysEqual(w.shape,C)||(w=Pt({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=Zl({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=ji({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var HE={kernelName:Ou,backendName:"cpu",kernelFunc:Fq};function _q(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t;q([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),i=e.data.get(n.dataId).values,a=e.data.get(o.dataId).values;for(let l=0;l<i.length;++l){let u=i[l];u>=1?s[l]=a[l]:s[l]=a[l]*(u+1)}return e.makeTensorInfo(n.shape,"float32",s)}var KE={kernelName:Pu,backendName:"cpu",kernelFunc:_q};var Oq=I.ERF_P,Pq=I.ERF_A1,Lq=I.ERF_A2,zq=I.ERF_A3,Mq=I.ERF_A4,Bq=I.ERF_A5,Vq=vt(pi,r=>{let t=Math.sign(r),e=Math.abs(r),o=1/(1+Oq*e);return t*(1-((((Bq*o+Mq)*o+zq)*o+Lq)*o+Pq)*o*Math.exp(-e*e))}),qE={kernelName:pi,backendName:"cpu",kernelFunc:Vq};function pp(r){let{inputs:t,backend:e,attrs:o}=r,{input:n}=t,{dim:s}=o,i=n.shape.length,a=n.shape.slice(),l=s;return s<0&&(y.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),a.splice(l,0,1),Pt({inputs:{x:n},backend:e,attrs:{shape:a}})}var jE={kernelName:fs,backendName:"cpu",kernelFunc:pp};var Gq=Bt((r,t)=>r/t),oh=Ht(yn,Gq),nh={kernelName:yn,backendName:"cpu",kernelFunc:oh};function nx(r,t,e){let o=r.shape,n=o[0],s=o[1],i=e.data.get(r.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[n,s],c=y.sizeFromShape(u),p=y.getTypedArrayFromDType("float32",c),m=y.getTypedArrayFromDType("float32",c);for(let g=0;g<n;g++){let x=rn({inputs:{x:a},backend:e,attrs:{begin:[g,0],size:[1,s]}}),b=rn({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,s]}}),w=Ke({inputs:{real:x,imag:b},backend:e}),{real:C,imag:S}=Uq(w,t,e),k=I.mergeRealAndImagArrays(C,S);for(let E=0;E<s;E++){let A=I.getComplexWithIndex(k,E);p[g*s+E]=A.real,m[g*s+E]=A.imag}e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w)}let f=e.makeTensorInfo(u,"float32",p),h=e.makeTensorInfo(u,"float32",m),d=Ke({inputs:{real:f,imag:h},backend:e});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}function Uq(r,t,e){let o=y.sizeFromShape(r.shape),n=e.data.get(r.dataId),s=e.data.get(n.complexTensorInfos.real.dataId).values,i=e.data.get(n.complexTensorInfos.imag.dataId).values;if(Wq(o)){let a=J0(s,i,o,t,e),l=[r.shape[0],r.shape[1]];if(t){let u=e.makeTensorInfo(l,"float32",a.real),c=e.makeTensorInfo(l,"float32",a.imag),p=e.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=cr({inputs:{x:p},backend:e}),f=nh.kernelFunc({inputs:{a:u,b:p},backend:e}),h=nh.kernelFunc({inputs:{a:c,b:m},backend:e}),d=e.data.get(f.dataId).values,g=e.data.get(h.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),{real:d,imag:g}}return a}else{let a=I.mergeRealAndImagArrays(s,i),l=Hq(a,o,t);return I.splitRealAndImagArrays(l)}}function Wq(r){return(r&r-1)===0}function J0(r,t,e,o,n){if(e===1)return{real:r,imag:t};let s=I.mergeRealAndImagArrays(r,t),i=e/2,a=I.complexWithEvenIndex(s),l=a.real,u=a.imag,c=[l.length],p=n.makeTensorInfo(c,"float32",l),m=n.makeTensorInfo(c,"float32",u),f=Ke({inputs:{real:p,imag:m},backend:n}),h=I.complexWithOddIndex(s),d=h.real,g=h.imag,x=[d.length],b=n.makeTensorInfo(x,"float32",d),w=n.makeTensorInfo(x,"float32",g),C=Ke({inputs:{real:b,imag:w},backend:n}),S=J0(l,u,i,o,n),k=S.real,E=S.imag,A=[k.length],D=n.makeTensorInfo(A,"float32",k),O=n.makeTensorInfo(A,"float32",E),M=Ke({inputs:{real:D,imag:O},backend:n}),B=J0(d,g,i,o,n),V=B.real,U=B.imag,G=[V.length],W=n.makeTensorInfo(G,"float32",V),j=n.makeTensorInfo(G,"float32",U),H=Ke({inputs:{real:W,imag:j},backend:n}),Z=I.exponents(e,o),J=[Z.real.length],tt=n.makeTensorInfo(J,"float32",Z.real),ot=n.makeTensorInfo(J,"float32",Z.imag),rt=Ke({inputs:{real:tt,imag:ot},backend:n}),pt=Zl({inputs:{a:rt,b:H},backend:n}),it=Xs({inputs:{a:M,b:pt},backend:n}),ht=eh({inputs:{a:M,b:pt},backend:n}),It=Qo({inputs:{input:it},backend:n}),Nt=Qo({inputs:{input:ht},backend:n}),$t=Ys({inputs:{input:it},backend:n}),Mt=Ys({inputs:{input:ht},backend:n}),Wt=ja({inputs:[It,Nt],backend:n,attrs:{axis:0}}),le=ja({inputs:[$t,Mt],backend:n,attrs:{axis:0}}),xe=n.data.get(Wt.dataId).values,Se=n.data.get(le.dataId).values;return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo(D),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(M),n.disposeIntermediateTensorInfo(W),n.disposeIntermediateTensorInfo(j),n.disposeIntermediateTensorInfo(H),n.disposeIntermediateTensorInfo(tt),n.disposeIntermediateTensorInfo(ot),n.disposeIntermediateTensorInfo(rt),n.disposeIntermediateTensorInfo(pt),n.disposeIntermediateTensorInfo(it),n.disposeIntermediateTensorInfo(ht),n.disposeIntermediateTensorInfo(It),n.disposeIntermediateTensorInfo($t),n.disposeIntermediateTensorInfo(Nt),n.disposeIntermediateTensorInfo(Mt),n.disposeIntermediateTensorInfo(Wt),n.disposeIntermediateTensorInfo(le),{real:xe,imag:Se}}function Hq(r,t,e){let o=new Float32Array(t*2);for(let n=0;n<t;n++){let s=0,i=0;for(let a=0;a<t;a++){let l=I.exponent(n*a,t,e),u=I.getComplexWithIndex(r,a);s+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}e&&(s/=t,i/=t),I.assignToTypedArray(o,s,i,n)}return o}function Kq(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=Pt({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=nx(a,!1,e),u=Pt({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var XE={kernelName:Lu,backendName:"cpu",kernelFunc:Kq};function sh(r){let{backend:t,attrs:e}=r,{shape:o,value:n,dtype:s}=e,i=s||y.inferDtype(n),a=y.getArrayFromDType(i,y.sizeFromShape(o));return qq(a,n,i),t.makeTensorInfo(o,i,a)}var YE={kernelName:da,backendName:"cpu",kernelFunc:sh};function qq(r,t,e){r.fill(t)}var ZE={kernelName:ga,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,n=e,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[i,a,l,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<i;m++){let f=m*l*a*u;for(let h=0;h<a;h++){let d=h*(l*u);for(let g=0;g<l;g++){let x=g*u;for(let b=0;b<u;b++){let w=Math.round(l-g-1),C=f+d+x+b,S=c[C];if(w>=0&&w<l){let k=w*u,E=f+d+k+b;S=c[E]}s[C]=S}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var jq=Bt((r,t)=>Math.floor(r/t)),Xq=Ht(Cn,jq,null,"int32"),QE={kernelName:Cn,backendName:"cpu",kernelFunc:Xq};function Yq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=Z0({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;if(c==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){let x=Pt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});d=Xs({inputs:{a:d,b:x},backend:e}),e.disposeIntermediateTensorInfo(x)}else d=Xs({inputs:{a:d,b:i},backend:e});e.disposeIntermediateTensorInfo(g)}if(f){let g=d;if(c==="NCHW"&&f==="prelu"&&a.shape.length===1&&a.shape[0]!==1){let x=Pt({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});d=Ql(e,d,f,x,h),e.disposeIntermediateTensorInfo(x)}else d=Ql(e,d,f,a,h);e.disposeIntermediateTensorInfo(g)}return d}var JE={kernelName:Ti,backendName:"cpu",kernelFunc:Yq};function Zq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=Q0({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;d=Xs({inputs:{a:d,b:i},backend:e}),e.disposeIntermediateTensorInfo(g)}if(f){let g=d;d=Ql(e,d,f,a,h),e.disposeIntermediateTensorInfo(g)}return d}var t$={kernelName:Ni,backendName:"cpu",kernelFunc:Zq};function Qq(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=y.sizeFromShape(o.shape),i=n.shape,a=i[i.length-1],[l,u,c,p]=I.prepareAndValidate(o,n);if(u===0)return e.makeTensorInfo(l,o.dtype,[]);let m=e.data.get(n.dataId).values,f=e.bufferSync(o),h=Vg(m,f,o.dtype,u,a,c,p,o.shape,s);return e.makeTensorInfo(l,o.dtype,h.values)}var e$={kernelName:zu,backendName:"cpu",kernelFunc:Qq};function Jq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o;q([n,s],"gatherV2");let l=y.parseAxisParam(i,n.shape)[0],u=e.data.get(s.dataId).values,c=n.shape[l];for(let C=0;C<u.length;++C){let S=u[C];y.assert(S<=c-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${c-1}]`)}let p=a;a==null&&(p=0);let m=y.sizeFromShape(s.shape),f=I.segment_util.collectGatherOpShapeInfo(n,s,l,p),h=Pt({inputs:{x:n},backend:e,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),d=Pt({inputs:{x:s},backend:e,attrs:{shape:[f.batchSize,m/f.batchSize]}}),g=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],x=e.bufferSync(d),b=e.bufferSync(h),w=Gg(b,x,g);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.makeTensorInfo(f.outputShape,w.dtype,w.values)}var r$={kernelName:ds,backendName:"cpu",kernelFunc:Jq};function tj(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=Pt({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=nx(a,!0,e),u=Pt({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var o$={kernelName:Mu,backendName:"cpu",kernelFunc:tj};var ej=vt(mi,r=>Number.isFinite(r)?1:0,"bool"),n$={kernelName:mi,backendName:"cpu",kernelFunc:ej};var rj=vt(fi,r=>Math.abs(r)===1/0?1:0,"bool"),s$={kernelName:fi,backendName:"cpu",kernelFunc:rj};var oj=vt(Sn,r=>Number.isNaN(r)?1:0,"bool"),i$={kernelName:Sn,backendName:"cpu",kernelFunc:oj};function nj(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=Ug(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var a$={kernelName:Lh,backendName:"cpu",kernelFunc:nj};var sj=vt(hi,r=>Math.log1p(r)),l$={kernelName:hi,backendName:"cpu",kernelFunc:sj};var ij=Bt((r,t)=>r&&t),aj=Ht(di,ij,null,"bool"),u$={kernelName:di,backendName:"cpu",kernelFunc:aj};var lj=vt(gi,r=>r?0:1,"bool"),c$={kernelName:gi,backendName:"cpu",kernelFunc:lj};var uj=Bt((r,t)=>r||t),cj=Ht(ul,uj,null,"bool"),p$={kernelName:ul,backendName:"cpu",kernelFunc:cj};function pj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o;q(n,"LRN");let u=n.shape[3],c=u-1,p=e.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),f=new Float32Array(m);function h(d){let g=d%u,x=d-g+Math.max(0,g-s),b=d-g+Math.min(g+s,c),w=0;for(;x<=b;x++){let C=p[x];w+=C*C}return w}for(let d=0;d<m;d++){let g=h(d),x=p[d]*Math.pow(i+a*g,-l);f[d]=x}return e.makeTensorInfo(n.shape,n.dtype,f)}var m$={kernelName:ya,backendName:"cpu",kernelFunc:pj};function mj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o;q(i,"LRNGrad");let p=y.sizeFromShape(i.shape),m=i.shape[3],f=e.data.get(i.dataId).values,h=e.data.get(n.dataId).values,d=e.data.get(s.dataId).values,g=new Float32Array(p),x=p;for(let b=0;b<x;b++){let w=b%m,C=b-w+Math.max(0,w-a),S=b-w+Math.min(m,w+a+1),k=0;for(let E=C;E<S;E++)k+=Math.pow(h[E],2);k=u*k+l;for(let E=C;E<S;E++){let A=-2*u*c*h[E]*d[b]/k;b===E&&(A+=Math.pow(k,-c)),A*=f[b],g[E]+=A}}return e.makeTensorInfo(i.shape,n.dtype,g)}var f$={kernelName:Bu,backendName:"cpu",kernelFunc:mj};function tI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=e,l=n.shape,u=l.length,c=y.parseAxisParam(s,l),p=c,m=I.getAxesPermutation(p,u),f=a.data.get(n.dataId).values;if(m!=null){let C=new Array(u);for(let S=0;S<C.length;S++)C[S]=l[m[S]];f=ap(f,l,n.dtype,m,C),p=I.getInnerMostAxes(p.length,u),l=C}q(n,"max"),I.assertAxesAreInnerMostDims("max",p,u);let[h,d]=I.computeOutAndReduceShapes(l,p),g=y.sizeFromShape(d),x=Wg(f,g,h,n.dtype),b=a.write(x,h,n.dtype),w=h;return i&&(w=I.expandShapeToKeepDim(h,c)),{dataId:b,shape:w,dtype:n.dtype}}var h$={kernelName:xs,backendName:"cpu",kernelFunc:tI};function fj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;q(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=cr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=cp(m,n.shape,n.dtype,f,c,"max");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var d$={kernelName:ys,backendName:"cpu",kernelFunc:fj};function hj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;q(n,"maxPool3d");let c=I.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=ox(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"max");return e.makeTensorInfo(m.shape,"float32",m.values)}var g$={kernelName:ba,backendName:"cpu",kernelFunc:hj};function dj(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;q([n,s],"maxPool3DGrad");let c=I.computePool3DInfo(s.shape,i,a,1,l,u),p=e.bufferSync(s),m=pE(p,c),f=c.strideDepth,h=c.strideHeight,d=c.strideWidth,g=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,C=c.effectiveFilterHeight,S=c.effectiveFilterWidth,k=w-1-c.padInfo.front,E=S-1-c.padInfo.left,A=C-1-c.padInfo.top,D=et(s.shape,"float32"),O=e.bufferSync(n);for(let M=0;M<c.batchSize;++M)for(let B=0;B<c.inChannels;++B)for(let V=0;V<c.inDepth;++V)for(let U=0;U<c.inHeight;++U)for(let G=0;G<c.inWidth;++G){let W=V-k,j=U-A,H=G-E,Z=0;for(let J=0;J<w;J+=g){let tt=(W+J)/f;if(!(tt<0||tt>=c.outDepth||Math.floor(tt)!==tt))for(let ot=0;ot<C;ot+=x){let rt=(j+ot)/h;if(!(rt<0||rt>=c.outHeight||Math.floor(rt)!==rt))for(let pt=0;pt<S;pt+=b){let it=(H+pt)/d;if(it<0||it>=c.outWidth||Math.floor(it)!==it)continue;let ht=w*C*S-1-m.get(M,tt,rt,it,B),It=J*C*S+ot*S+pt,Nt=ht===It?1:0;if(Nt===0)continue;Z+=O.get(M,tt,rt,it,B)*Nt}}}D.set(Z,M,V,U,G,B)}return e.makeTensorInfo(D.shape,D.dtype,D.values)}var x$={kernelName:Gu,backendName:"cpu",kernelFunc:dj};function gj(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;q([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=I.computePool2DInfo(a.shape,l,u,1,c,p),f=e.data.get(a.dataId).values,h=et(m.outShape,a.dtype,rx(f,a.shape,a.dtype,m).values),d=m.strideHeight,g=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,w=m.effectiveFilterHeight,C=m.effectiveFilterWidth,S=C-1-m.padInfo.left,k=w-1-m.padInfo.top,E=et(a.shape,"float32"),A=e.data.get(n.dataId).values,D=et(n.shape,"float32",A);for(let O=0;O<m.batchSize;++O)for(let M=0;M<m.inChannels;++M)for(let B=0;B<m.inHeight;++B)for(let V=0;V<m.inWidth;++V){let U=B-k,G=V-S,W=0;for(let j=0;j<w;j+=x){let H=(U+j)/d;if(!(H<0||H>=m.outHeight||Math.floor(H)!==H))for(let Z=0;Z<C;Z+=b){let J=(G+Z)/g;if(J<0||J>=m.outWidth||Math.floor(J)!==J)continue;let tt=w*C-1-h.get(O,H,J,M),ot=j*C+Z,rt=tt===ot?1:0;if(rt===0)continue;W+=D.get(O,H,J,M)*rt}}E.set(W,O,B,V,M)}return e.makeTensorInfo(E.shape,E.dtype,E.values)}var y$={kernelName:Vu,backendName:"cpu",kernelFunc:gj};function b$(r,t,e,o,n){let s=y.computeStrides(t),i=cp(r,t,e,s,n,"max"),a=rx(r,t,e,n,!0,o);return[i.values,a.values]}var w$={kernelName:zh,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;q(o,"MaxPoolWithArgmax");let u=l.data.get(o.dataId).values,c=I.computePool2DInfo(o.shape,n,s,[1,1],i),[p,m]=b$(u,o.shape,o.dtype,a,c),f=l.write(p,c.outShape,o.dtype),h=l.write(m,c.outShape,o.dtype);return[{dataId:f,shape:c.outShape,dtype:o.dtype},{dataId:h,shape:c.outShape,dtype:"int32"}]}};function xj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=y.parseAxisParam(s,n.shape),u=I.computeOutAndReduceShapes(n.shape,a)[1],c=y.sizeFromShape(u),p=[],m=e.makeTensorInfo([],"float32",new Float32Array([c]));p.push(m);let f=Jo({inputs:{x:n},backend:e,attrs:{dtype:"float32"}});p.push(f);let h=oh({inputs:{a:f,b:m},backend:e});p.push(h);let d=ji({inputs:{x:h},backend:e,attrs:{axis:s,keepDims:i}});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),d}var C$={kernelName:bs,backendName:"cpu",kernelFunc:xj};function yj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;q(n,"min");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Ce({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("min",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let S=d[b+C];(Number.isNaN(S)||S<w)&&(w=S)}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Pt({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var I$={kernelName:ws,backendName:"cpu",kernelFunc:yj};function bj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,mode:i}=o;q(n,"mirrorPad");let a=s.map((w,C)=>w[0]+n.shape[C]+w[1]),l=s.map(w=>w[0]),u=s.map((w,C)=>w[0]+n.shape[C]),c=i==="reflect"?0:1,p=e.data.get(n.dataId).values,m=n.shape.length,f=y.computeStrides(n.shape),h=y.sizeFromShape(a),d=a.length,g=y.computeStrides(a),x=y.getTypedArrayFromDType(n.dtype,h);for(let w=0;w<h;w++){let C=y.indexToLoc(w,d,g);for(let k=0;k<d;k++)C[k]<l[k]?C[k]=l[k]*2-C[k]-c:C[k]>=u[k]&&(C[k]=(u[k]-1)*2-C[k]+c);C=C.map((k,E)=>k-l[E]);let S=y.locToIndex(C,m,f);x[w]=p[S]}return{dataId:e.write(x,a,n.dtype),shape:a,dtype:n.dtype}}var S$={kernelName:Cs,backendName:"cpu",kernelFunc:bj};var wj=Bt((r,t)=>{let e=r%t;return r<0&&t<0||r>=0&&t>=0?e:(e+t)%t}),Cj=Ht(xi,wj),v$={kernelName:xi,backendName:"cpu",kernelFunc:Cj};var T$=Gp(gm());function eI(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=n.shape.length,a=s;if(a===-1&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);let l=y.parseAxisParam([a],n.shape),u=tI({inputs:{x:n},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=I.expandShapeToKeepDim(u.shape,l),p=Pt({inputs:{x:u},backend:e,attrs:{shape:c}}),m=eh({inputs:{a:n,b:p},backend:e}),f=k0({inputs:{x:m},backend:e}),h=ji({inputs:{x:f},backend:e,attrs:{axis:l,keepDims:!1}}),d=Pt({inputs:{x:h},backend:e,attrs:{shape:c}}),g=oh({inputs:{a:f,b:d},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var k$={kernelName:Fs,backendName:"cpu",kernelFunc:eI};function Ij(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o;q(n,"multinomial");let l=a?n:eI({inputs:{logits:n},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=e.data.get(l.dataId).values,m=[u,s],f=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let h=0;h<u;++h){let d=h*c,g=new Float32Array(c-1);g[0]=p[d];for(let w=1;w<g.length;++w)g[w]=g[w-1]+p[d+w];let x=T$.alea(i.toString()),b=h*s;for(let w=0;w<s;++w){let C=x();f[b+w]=g.length;for(let S=0;S<g.length;S++)if(C<g[S]){f[b+w]=S;break}}}return a||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(m,"int32",f)}var N$={kernelName:Mh,backendName:"cpu",kernelFunc:Ij};var Sj=Ue.nonMaxSuppressionV3Impl;function vj(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o;q(n,"NonMaxSuppression");let u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,{selectedIndices:p}=Sj(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var E$={kernelName:wa,backendName:"cpu",kernelFunc:vj};var kj=Ue.nonMaxSuppressionV4Impl;function Tj(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o;q(n,"NonMaxSuppressionPadded");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,{selectedIndices:m,validOutputs:f}=kj(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var $$={kernelName:Uu,backendName:"cpu",kernelFunc:Tj};var Nj=Ue.nonMaxSuppressionV5Impl;function Ej(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o;q(n,"NonMaxSuppressionWithScore");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=Nj(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var A$={kernelName:Ca,backendName:"cpu",kernelFunc:Ej};function $j(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o;q(n,"oneHot");let u=y.sizeFromShape(n.shape),c=new Float32Array(u*i);c.fill(l);let p=e.data.get(n.dataId).values;for(let m=0;m<u;++m)p[m]>=0&&p[m]<i&&(c[m*i+p[m]]=a);return e.makeTensorInfo([...n.shape,i],s,c)}var D$={kernelName:Ia,backendName:"cpu",kernelFunc:$j};function ih(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Qo({inputs:{input:o},backend:e}),s=ih({inputs:{x:n},backend:e}),i=Ys({inputs:{input:o},backend:e}),a=ih({inputs:{x:i},backend:e}),l=Ke({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return sh({backend:e,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var R$={kernelName:Os,backendName:"cpu",kernelFunc:ih};function F$(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Qo({inputs:{input:o},backend:e}),s=F$({inputs:{x:n},backend:e}),i=Ys({inputs:{input:o},backend:e}),a=ih({inputs:{x:i},backend:e}),l=Ke({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return sh({backend:e,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var _$={kernelName:Is,backendName:"cpu",kernelFunc:F$};function rI(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return pp({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=pp({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=ja({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var O$={kernelName:Ss,backendName:"cpu",kernelFunc:rI};function Aj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;q(n,"pad");let a=s.map((b,w)=>b[0]+n.shape[w]+b[1]),l=s.map(b=>b[0]),u=e.data.get(n.dataId).values,c=y.sizeFromShape(n.shape),p=n.shape.length,m=y.computeStrides(n.shape),f=y.sizeFromShape(a),h=a.length,d=y.computeStrides(a),g=y.getTypedArrayFromDType(n.dtype,f);i!==0&&g.fill(i);for(let b=0;b<c;b++){let C=y.indexToLoc(b,p,m).map((k,E)=>k+l[E]),S=y.locToIndex(C,h,d);g[S]=u[b]}return{dataId:e.write(g,a,n.dtype),shape:a,dtype:n.dtype}}var sx={kernelName:vs,backendName:"cpu",kernelFunc:Aj};var Dj=Bt((r,t)=>Math.pow(r,t)),Rj=Ht(En,Dj),P$={kernelName:En,backendName:"cpu",kernelFunc:Rj};function Fj(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,p=e.data.get(i.dataId).values,m=a.map(g=>e.data.get(g.dataId).values),f=a.map(g=>g.shape),[h,d]=Hg(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,d)}var L$={kernelName:Bh,backendName:"cpu",kernelFunc:Fj};function _j(r){let{backend:t,attrs:e}=r,{start:o,stop:n,dtype:s,step:i}=e,a=Kg(o,n,i,s);return t.makeTensorInfo([a.length],s,a)}var z$={kernelName:Sa,backendName:"cpu",kernelFunc:_j};var Oj=vt(An,r=>1/r),M$={kernelName:An,backendName:"cpu",kernelFunc:Oj};function Pj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;q(n,"resizeBilinear");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(y.sizeFromShape([p,u,c,h])),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=0,C=x[0]/b[0],S=x[1]/b[1];for(let k=0;k<p;k++)for(let E=0;E<u;E++){let A;i?A=C*(E+.5)-.5:A=C*E;let D=Math.max(0,Math.floor(A)),O=A-D,M=Math.min(m-1,Math.ceil(A)),B=k*l[0]+D*l[1],V=k*l[0]+M*l[1];for(let U=0;U<c;U++){let G;i?G=S*(U+.5)-.5:G=S*U;let W=Math.max(0,Math.floor(G)),j=G-W,H=Math.min(f-1,Math.ceil(G)),Z=B+W*l[2],J=V+W*l[2],tt=B+H*l[2],ot=V+H*l[2];for(let rt=0;rt<h;rt++){let pt=d[Z+rt],it=d[J+rt],ht=d[tt+rt],It=d[ot+rt],Nt=pt+(ht-pt)*j,$t=it+(It-it)*j,Mt=Nt+($t-Nt)*O;g[w++]=Mt}}}return e.makeTensorInfo([p,u,c,h],"float32",g)}var B$={kernelName:Es,backendName:"cpu",kernelFunc:Pj};function Lj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;q([s,n],"resizeBilinearGrad");let a=y.computeStrides(n.shape),[l,u,c,p]=n.shape,[,m,f]=s.shape,h=new Float32Array(l*u*c*p),d=[i&&m>1?u-1:u,i&&f>1?c-1:c],g=[i&&m>1?m-1:m,i&&f>1?f-1:f],x=d[0]/g[0],b=d[1]/g[1],w=e.data.get(s.dataId).values,C=0;for(let S=0;S<l;S++){let k=S*a[0];for(let E=0;E<m;E++){let A=E*x,D=Math.floor(A),O=Math.min(Math.ceil(A),u-1),M=k+D*a[1],B=k+O*a[1],V=A-D,U=1-V;for(let G=0;G<f;G++){let W=G*b,j=Math.floor(W),H=Math.min(Math.ceil(W),c-1),Z=W-j,J=1-Z,tt=M+j*a[2],ot=M+H*a[2],rt=B+j*a[2],pt=B+H*a[2],it=U*J,ht=U*Z,It=V*J,Nt=V*Z;for(let $t=0;$t<p;$t++){let Mt=w[C++];h[tt+$t]+=Mt*it,h[ot+$t]+=Mt*ht,h[rt+$t]+=Mt*It,h[pt+$t]+=Mt*Nt}}}}return e.makeTensorInfo([l,c,u,p],"float32",h)}var V$={kernelName:Hu,backendName:"cpu",kernelFunc:Lj};function zj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;q(n,"resizeNearestNeighbor");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(p*u*c*h),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=x[0]/b[0],C=x[1]/b[1],S=0;for(let k=0;k<p;k++){let E=k*l[0];for(let A=0;A<u;A++){let D=i?w*(A+.5):w*A,O=Math.min(m-1,s?Math.round(D):Math.floor(D));i&&(O=Math.max(0,O));let M=E+O*l[1];for(let B=0;B<c;B++){let V=i?C*(B+.5):C*B,U=Math.min(f-1,s?Math.round(V):Math.floor(V));i&&(U=Math.max(0,U));let G=M+U*l[2];for(let W=0;W<h;W++){let j=d[G+W];g[S++]=j}}}}return e.makeTensorInfo([p,u,c,h],n.dtype,g)}var G$={kernelName:Ns,backendName:"cpu",kernelFunc:zj};function Mj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;q([s,n],"resizeNearestNeighborGrad");let a=y.computeStrides(n.shape),l=y.computeStrides(s.shape),[u,c,p,m]=n.shape,[,f,h]=s.shape,d=new Float32Array(u*c*p*m),g=e.data.get(s.dataId).values,x=[i&&f>1?c-1:c,i&&h>1?p-1:p],b=[i&&f>1?f-1:f,i&&h>1?h-1:h],w=x[0]/b[0],C=x[1]/b[1],S=1/w,k=1/C,E=Math.ceil(S)*2+2,A=Math.ceil(k)*2+2;for(let D=0;D<u;D++){let O=D*a[0];for(let M=0;M<c;M++){let B=O+M*a[1],V=Math.floor(M*S),U=Math.floor(V-E/2);for(let G=0;G<p;G++){let W=B+G*a[2],j=Math.floor(G*k),H=Math.floor(j-A/2);for(let Z=0;Z<m;Z++){let J=0;for(let tt=0;tt<E;tt++){let ot=tt+U;if(ot<0||ot>=f)continue;let rt=O+ot*l[1],pt=ot*w,it=Math.min(c-1,i?Math.round(pt):Math.floor(pt));if(M===it)for(let ht=0;ht<A;ht++){let It=ht+H;if(It<0||It>=h)continue;let Nt=rt+It*l[2],$t=It*C,Mt=Math.min(p-1,i?Math.round($t):Math.floor($t));G===Mt&&(J+=g[Nt+Z])}}d[W+Z]=J}}}}return e.makeTensorInfo(n.shape,n.dtype,d)}var U$={kernelName:Wu,backendName:"cpu",kernelFunc:Mj};function Bj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o;q(n,"reverse");let i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return cr({inputs:{x:n},backend:e});let l=new jt(n.shape,n.dtype),u=e.bufferSync(n);for(let c=0;c<l.size;c++){let p=l.indexToLoc(c),m=p.slice();a.forEach(f=>m[f]=n.shape[f]-1-m[f]),l.set(u.get(...m),...p)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}var W$={kernelName:va,backendName:"cpu",kernelFunc:Bj};var H$={kernelName:Aa,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,c,p,m]=o.shape,[f,h]=I.getImageCenter(i,c,p),d=255,g=Math.sin(n),x=Math.cos(n),b=a.data.get(o.dataId).values;for(let C=0;C<u;C++){let S=C*p*c*m;for(let k=0;k<c;k++){let E=k*(p*m);for(let A=0;A<p;A++){let D=A*m;for(let O=0;O<m;O++){let M=[u,k,A,O],B=M[2],V=M[1],U=(B-f)*x-(V-h)*g,G=(B-f)*g+(V-h)*x;U=Math.round(U+f),G=Math.round(G+h);let W=s;if(typeof s!="number"&&(O===3?W=d:W=s[O]),U>=0&&U<p&&G>=0&&G<c){let H=G*(p*m),Z=U*m,J=S+H+Z+O;W=b[J]}let j=S+E+D+O;l[j]=W}}}}return{dataId:a.write(l,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var Vj=vt(bi,r=>{let t=Math.floor(r);return r-t<.5?Math.floor(r):r-t>.5?Math.ceil(r):t%2===0?t:t+1}),K$={kernelName:bi,backendName:"cpu",kernelFunc:Vj};function Gj(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=!0,f=e.bufferSync(n),h=e.bufferSync(s),d=qi(f,h,i,p,u,l,a,c,0,m);return e.makeTensorInfo(i,d.dtype,d.values)}var q$={kernelName:Ku,backendName:"cpu",kernelFunc:Gj};function Uj(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<t?e=n+1:o=n;return o}function Wj(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<=t?e=n+1:o=n;return o}function j$(r,t,e,o,n,s){let i=y.getArrayFromDType("int32",e*n);for(let a=0;a<e;++a){let l=r.slice(a*o,(a+1)*o),u=a*n;for(let c=0;c<n;++c)i[u+c]=s==="left"?Uj(l,t[c+u]):Wj(l,t[c+u])}return i}function Hj(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=j$(a,l,n.shape[0],n.shape[1],s.shape[1],i);return e.makeTensorInfo(s.shape,"int32",u)}var X$={kernelName:Vh,backendName:"cpu",kernelFunc:Hj};function Kj(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t;q([o,n,s],"select");let i=o.shape.length,a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Qt(n.dtype,s.dtype),p=y.makeZerosTypedArray(y.sizeFromShape(n.shape),c),m=0,f=i===0||i>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let h=0;h<a.length;h++)for(let d=0;d<f;d++)a[h]===1?p[m++]=l[h]:p[m++]=u[h];return e.makeTensorInfo(n.shape,c,p)}var Y$={kernelName:$s,backendName:"cpu",kernelFunc:Kj};var qj=I.SELU_SCALEALPHA,jj=I.SELU_SCALE,Xj=vt(wi,r=>r>=0?jj*r:qj*(Math.exp(r)-1)),Z$={kernelName:wi,backendName:"cpu",kernelFunc:Xj};var Yj=vt(Ci,r=>r<0?-1:r>0?1:0),Q$={kernelName:Ci,backendName:"cpu",kernelFunc:Yj};var Zj=vt(_n,r=>Math.sin(r)),J$={kernelName:_n,backendName:"cpu",kernelFunc:Zj};var Qj=vt(On,r=>Math.sinh(r)),tA={kernelName:On,backendName:"cpu",kernelFunc:Qj};var Jj=11920928955078125e-23,eA=Math.log(Jj)+2,t6=vt(Ii,r=>{let t=r>-eA,e=r<eA,o=Math.exp(r),n;return e?n=o:t?n=r:n=Math.log(1+o),n}),rA={kernelName:Ii,backendName:"cpu",kernelFunc:t6};function e6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;q([n],"spaceToBatchND");let a=y.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let k=1+s.length;k<n.shape.length;++k)l.push([0,0]);let u=sx.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),c=I.getReshaped(u.shape,s,a,!1),p=I.getPermuted(c.length,s.length,!1),m=I.getReshapedPermuted(u.shape,s,a,!1),d=Pt({inputs:{x:u},backend:e,attrs:{shape:c}}),b=Ce({inputs:{x:d},backend:e,attrs:{perm:p}}),S=Pt({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(b),S}var oA={kernelName:Ds,backendName:"cpu",kernelFunc:e6};function r6(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=e.data.get(i.dataId).values[0],[p,m,f,h,d]=qg(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var nA={kernelName:Gh,backendName:"cpu",kernelFunc:r6};function o6(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.data.get(n.dataId).values),a=e.data.get(o.dataId).values,l=Array.from(e.data.get(s.dataId).values),[u,c,p]=jg(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var sA={kernelName:Uh,backendName:"cpu",kernelFunc:o6};function n6(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=up(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var iA={kernelName:Wh,backendName:"cpu",kernelFunc:n6};function s6(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=up(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var aA={kernelName:Hh,backendName:"cpu",kernelFunc:s6};function i6(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1,h=e.bufferSync(n),d;switch(s.dtype){case"bool":{let g=e.bufferSync(s),x=Boolean(e.data.get(i.dataId).values[0]);d=qi(h,g,a,m,c,u,l,p,x,f);break}case"float32":{let g=e.bufferSync(s),x=e.data.get(i.dataId).values[0];d=qi(h,g,a,m,c,u,l,p,x,f);break}case"int32":{let g=e.bufferSync(s),x=e.data.get(i.dataId).values[0];d=qi(h,g,a,m,c,u,l,p,x,f);break}case"string":{let g=e.bufferSync(s),x=y.decodeString(e.data.get(i.dataId).values[0]);d=qi(h,g,a,m,c,u,l,p,x,f);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return e.makeTensorInfo(a,d.dtype,d.values)}var lA={kernelName:qu,backendName:"cpu",kernelFunc:i6};function a6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return l.map(p=>{let m=[...c];m[a]=p;let f=rn({inputs:{x:n},backend:e,attrs:{begin:u,size:m}});return u[a]+=p,f})}var uA={kernelName:Rs,backendName:"cpu",kernelFunc:a6};var cA={kernelName:ka,backendName:"cpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t;q(e,"square");let n=o.data.get(e.dataId).values,s=new Float32Array(n.length);for(let a=0;a<n.length;++a){let l=n[a];s[a]=l*l}return{dataId:o.write(s,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}};var l6=vt(vi,(r,t)=>{let e=t;return isNaN(r)?NaN:r>0?1:e.alpha}),pA={kernelName:vi,backendName:"cpu",kernelFunc:l6};function u6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o;q(n,"stridedSlice");let{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=me.sliceInfo(n.shape,s,i,a,l,u,c,p,m),S;if(d)S=Pt({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let k=me.computeOutShape(b,w,C),E=rn({inputs:{x:n},backend:e,attrs:{begin:b,size:k}});S=Pt({inputs:{x:E},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(E)}else{let k=e.bufferSync(n),E=Xg(f,k,C,b);S=e.makeTensorInfo(h,E.dtype,E.values)}return S}var mA={kernelName:Ta,backendName:"cpu",kernelFunc:u6};function c6(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.data.get(c.dataId).values,f=e.data.get(p.dataId).values,[h,d]=Yg(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var fA={kernelName:ju,backendName:"cpu",kernelFunc:c6};function p6(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values[0],[u,c,p]=Zg(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var hA={kernelName:Kh,backendName:"cpu",kernelFunc:p6};function m6(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.data.get(s.dataId).values,a=Qg(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var dA={kernelName:qh,backendName:"cpu",kernelFunc:m6};var f6=vt(Si,r=>Math.tan(r)),gA={kernelName:Si,backendName:"cpu",kernelFunc:f6};var h6=vt(Pn,r=>Math.tanh(r)),xA={kernelName:Pn,backendName:"cpu",kernelFunc:h6};function d6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;q(n,"tile");let i=Jg(e.bufferSync(n),s);return e.makeTensorInfo(i.shape,i.dtype,i.values)}var yA={kernelName:Ro,backendName:"cpu",kernelFunc:d6};function g6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o;q(n,"topk");let a=e.data.get(n.dataId).values,[l,u]=tx(a,n.shape,n.dtype,s,i);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}var bA={kernelName:Na,backendName:"cpu",kernelFunc:g6};function x6(r){let{inputs:t,attrs:e,backend:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=e,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=y.computeStrides(n.shape),b=x[0],w=x[1],C=x[2],S=y.computeStrides(g),k=S[0],E=S[1],A=S[2],D=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(g));D.fill(l);let O=o.data.get(n.dataId).values,M=o.data.get(s.dataId).values;for(let V=0;V<c;++V){let U=s.shape[0]===1?M:M.subarray(V*8,V*8+8);for(let G=0;G<h;++G)for(let W=0;W<d;++W)for(let j=0;j<f;++j){let H,Z=U[6]*W+U[7]*G+1;if(Z===0)continue;let J=(U[0]*W+U[1]*G+U[2])/Z,tt=(U[3]*W+U[4]*G+U[5])/Z,ot=wA(J,m,a),rt=wA(tt,p,a);switch(i){case"nearest":H=I6(O,p,m,b,w,C,V,rt,ot,j,l);break;case"bilinear":H=S6(O,p,m,b,w,C,V,rt,ot,j,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let pt=V*k+G*E+W*A+j;D[pt]=H}return o.makeTensorInfo(g,n.dtype,D)}return{dataId:o.write(D,g,n.dtype),shape:n.shape,dtype:n.dtype}}var CA={kernelName:Ea,backendName:"cpu",kernelFunc:x6};function wA(r,t,e){switch(e){case"reflect":return y6(r,t);case"wrap":return b6(r,t);case"nearest":return C6(r,t);case"constant":default:return w6(r,t)}}function y6(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=2*t;e<o&&(e=o*Math.trunc(-e/o)+e),e=e<-t?e+o:-e-1}else if(e>t-1)if(t<=1)e=0;else{let o=2*t;e-=o*Math.trunc(e/o),e>=t&&(e=o-e-1)}return y.clamp(0,e,t-1)}function b6(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=t-1;e+=t*(Math.trunc(-e/o)+1)}else if(e>t-1)if(t<=1)e=0;else{let o=t-1;e-=t*Math.trunc(e/o)}return y.clamp(0,e,t-1)}function w6(r,t){return r}function C6(r,t){return y.clamp(0,r,t-1)}function ah(r,t,e,o,n,s,i,a,l,u,c){let p=i*o+a*n+l*s+u;return 0<=a&&a<t&&0<=l&&l<e?r[p]:c}function I6(r,t,e,o,n,s,i,a,l,u,c){let p=Math.round(a),m=Math.round(l);return ah(r,t,e,o,n,s,i,p,m,u,c)}function S6(r,t,e,o,n,s,i,a,l,u,c){let p=Math.floor(a),m=Math.floor(l),f=p+1,h=m+1,d=(h-l)*ah(r,t,e,o,n,s,i,p,m,u,c)+(l-m)*ah(r,t,e,o,n,s,i,p,h,u,c),g=(h-l)*ah(r,t,e,o,n,s,i,f,m,u,c)+(l-m)*ah(r,t,e,o,n,s,i,f,h,u,c);return(f-a)*d+(a-p)*g}function v6(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;q(s,"unique");let i=o.data.get(s.dataId).values,{outputValues:a,outputShape:l,indices:u}=ex(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var IA={kernelName:Xu,backendName:"cpu",kernelFunc:v6};function k6(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n.shape.length,a=n.shape[s],l=new Array(i-1),u=0;for(let f=0;f<i;f++)f!==s&&(l[u++]=n.shape[f]);let c=new Array(i).fill(0),p=n.shape.slice();p[s]=1;let m=new Array(a);for(let f=0;f<m.length;f++){c[s]=f;let h=rn({inputs:{x:n},backend:e,attrs:{begin:c,size:p}});m[f]=Pt({inputs:{x:h},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(h)}return m}var SA={kernelName:_s,backendName:"cpu",kernelFunc:k6};function T6(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o;q(n,"unsortedSegmentSum");let a=n.shape.length,l=s.shape.length,u=[],c=[],p=a-l,m=s;for(let h=0;h<p;++h){let d=pp({inputs:{input:m},backend:e,attrs:{dim:h+1}});m=d,c.push(d)}for(let h=0;h<i;++h){let d=y.createScalarValue(h,"int32"),g=e.makeTensorInfo([],"int32",d),x=S0({inputs:{a:g,b:m},backend:e}),b=Jo({inputs:{x},backend:e,attrs:{dtype:"float32"}}),w=Zl({inputs:{a:b,b:n},backend:e}),C=ji({inputs:{x:w},backend:e,attrs:{axis:0,keepDims:!1}});u.push(C),c.push(g),c.push(x),c.push(b),c.push(w),c.push(C)}let f=rI({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var vA={kernelName:$a,backendName:"cpu",kernelFunc:T6};var N6=[Q2,p2,J2,tE,g2,eE,rE,oE,nE,sE,iE,aE,lE,uE,cE,mE,fE,hE,dE,Z2,gE,xE,yE,bE,d2,x2,wE,m2,CE,SE,vE,kE,TE,NE,EE,$E,AE,DE,RE,FE,_E,OE,PE,LE,zE,ME,BE,VE,GE,UE,HE,H2,KE,y2,qE,b2,jE,w2,XE,YE,ZE,C2,QE,JE,t$,e$,r$,I2,S2,f2,o$,IE,n$,s$,i$,K2,v2,k2,a$,T2,l$,u$,c$,p$,m$,f$,h$,N2,d$,g$,x$,y$,w$,C$,I$,E2,S$,v$,N$,$2,A2,E$,$$,A$,D2,D$,_$,O$,sx,P$,q2,F2,L$,z$,h2,nh,M$,j2,X2,Y2,B$,V$,G$,U$,W$,H$,K$,P2,q$,X$,Y$,Z$,z2,Q$,J$,tA,M2,k$,rA,oA,nA,sA,iA,aA,lA,uA,V2,cA,G2,pA,mA,fA,hA,dA,U2,WE,gA,xA,yA,bA,CA,R2,IA,SA,vA,R$];for(let r of N6)Yu(r);var Jl={},ix={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function kA(r,t){Jl[r]=t}function Zr(r,t){if(!(r in Jl)||t!=null){let o=$6(r,t);if(o!==null)Jl[r]=o;else return console.log("Could not get context for WebGL version",r),null}let e=Jl[r];return e==null||e.isContextLost()?(delete Jl[r],Zr(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Jl[r])}function E6(r){if(typeof OffscreenCanvas<"u"&&r===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function $6(r,t){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let e=t??E6(r);return e.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete Jl[r]},!1),P().getBool("SOFTWARE_WEBGL_ENABLED")&&(ix.failIfMajorPerformanceCaveat=!1),r===1?e.getContext("webgl",ix)||e.getContext("experimental-webgl",ix):e.getContext("webgl2",ix)}var Xa;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Xa||(Xa={}));var pr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(pr||(pr={}));var nr;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(nr||(nr={}));function tu(r,t){return[t,r]}function TA(r,t){return r*t}function lh(r){let t=y.sizeFromShape(r),e=Math.ceil(t/4);return y.sizeToSquarishShape(e)}function Zs(r,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(r/2))]}function NA(r,t){let[e,o]=Zs(r,t);return e*o*4}function uh(r,t){let e=r,o,n,s,i,a,l,u,c,p,m;return P().getNumber("WEBGL_VERSION")===2?(o=e.R32F,n=e.R16F,s=e.RGBA16F,i=e.RGBA32F,a=e.RED,u=4,c=1,p=e.HALF_FLOAT,m=e.FLOAT,l=e.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=e.RGBA,a=r.RGBA,u=4,c=4,p=t!=null?t.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function gt(r,t){let e=t();return P().getBool("DEBUG")&&A6(r),e}function A6(r){let t=r.getError();if(t!==r.NO_ERROR)throw new Error("WebGL Error: "+F6(r,t))}var D6=596e-10,R6=65504;function EA(r){return!!(P().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||D6<Math.abs(r)&&Math.abs(r)<R6)}function F6(r,t){switch(t){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function ch(r,t){return Xi(r,()=>r.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function $A(r,t){let e=Xi(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(gt(r,()=>r.shaderSource(e,t)),gt(r,()=>r.compileShader(e)),r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function AA(r,t){let e=Xi(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(gt(r,()=>r.shaderSource(e,t)),gt(r,()=>r.compileShader(e)),P().get("ENGINE_COMPILE_ONLY"))return e;if(r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw aI(t,r.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}var _6=/ERROR: [0-9]+:([0-9]+):/g;function aI(r,t){let e=_6.exec(t);if(e==null){console.log(`Couldn't parse line number in error: ${t}`),console.log(r);return}let o=+e[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>y.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(t.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function DA(r){return Xi(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function RA(r,t){if(gt(r,()=>r.linkProgram(t)),!P().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(t,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function lx(r,t){if(gt(r,()=>r.validateProgram(t)),r.getProgramParameter(t,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function FA(r,t){let e=Xi(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return gt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),gt(r,()=>r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function _A(r,t){let e=Xi(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return gt(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)),gt(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function OA(r){return Xi(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function PA(r,t){let e=P().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||t<=0){let o=`[${r}x${t}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>e||t>e){let o=`[${r}x${t}]`,n=`[${e}x${e}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function LA(r){return Xi(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function lI(r,t,e,o,n,s,i){let a=r.getAttribLocation(t,e);return a===-1?!1:(gt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),gt(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),gt(r,()=>r.enableVertexAttribArray(a)),!0)}function O6(r,t,e){L6(r,e),gt(r,()=>r.activeTexture(r.TEXTURE0+e)),gt(r,()=>r.bindTexture(r.TEXTURE_2D,t))}function zA(r,t,e){return Xi(r,()=>r.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function MA(r,t,e){return r.getUniformLocation(t,e)}function BA(r,t,e,o){gt(r,()=>O6(r,t,o)),gt(r,()=>r.uniform1i(e,o))}function ux(r,t,e){gt(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),gt(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0))}function uI(r,t){gt(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),gt(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function ph(r){let t=r.checkFramebufferStatus(r.FRAMEBUFFER);if(t!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+P6(r,t))}function P6(r,t){switch(t){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function Xi(r,t,e){let o=gt(r,()=>t());if(o==null)throw new Error(e);return o}function L6(r,t){let e=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=t+r.TEXTURE0;if(o<r.TEXTURE0||o>e){let n=`[gl.TEXTURE0, gl.TEXTURE${e}]`;throw new Error(`textureUnit must be in ${n}.`)}}function Ya(r,t=2){return y.sizeFromShape(r.slice(0,r.length-t))}function Za(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function cx(r){let t=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(t=[Ya(r),...Za(r)]),t}function VA(r,t=!1){let e=P().getNumber("WEBGL_MAX_TEXTURE_SIZE");t&&(e=e*2,r=r.map((n,s)=>s>=r.length-2?y.nearestLargerEven(r[s]):r[s]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let o=y.sizeFromShape(r);if(r.length<=1&&o<=e)return[1,o];if(r.length===2&&r[0]<=e&&r[1]<=e)return r;if(r.length===3&&r[0]*r[1]<=e&&r[2]<=e)return[r[0]*r[1],r[2]];if(r.length===3&&r[0]<=e&&r[1]*r[2]<=e)return[r[0],r[1]*r[2]];if(r.length===4&&r[0]*r[1]*r[2]<=e&&r[3]<=e)return[r[0]*r[1]*r[2],r[3]];if(r.length===4&&r[0]<=e&&r[1]*r[2]*r[3]<=e)return[r[0],r[1]*r[2]*r[3]];if(t){let n=Ya(r),s=2,i=2;return r.length&&([s,i]=Za(r)),o=n*(s/2)*(i/2),y.sizeToSquarishShape(o).map(a=>a*2)}return y.sizeToSquarishShape(o)}function ax(r){return r%2===0}function eu(r,t){if(r=r.slice(-2),t=t.slice(-2),y.arraysEqual(r,t)||!r.length||!t.length||r[0]===0||r[1]===0||t[0]===0||t[1]===0)return!0;if(r.length!==t.length){let e=r.slice(-1)[0],o=t.slice(-1)[0];if(e===o||ax(e)&&ax(o)&&(r[0]===1||t[0]===1))return!0}return r[1]===t[1]&&ax(r[0])&&ax(t[0])}var nI,sI;function GA(r){if(nI==null){let t=Zr(r);nI=t.getParameter(t.MAX_TEXTURE_SIZE)}return nI}function UA(r){if(sI==null){let t=Zr(r);sI=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sI)}function WA(r){if(r===0)return 0;let t,e=Zr(r);return Eo(e,"EXT_disjoint_timer_query_webgl2")&&r===2?t=2:Eo(e,"EXT_disjoint_timer_query")?t=1:t=0,t}function Eo(r,t){return r.getExtension(t)!=null}function cI(r){try{if(Zr(r)!=null)return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function HA(r){if(r===0)return!1;let t=Zr(r);if(r===1){if(!Eo(t,"OES_texture_float"))return!1}else if(!Eo(t,"EXT_color_buffer_float"))return!1;return iI(t)}function KA(r){if(r===0)return!1;let t=Zr(r);if(r===1){if(!Eo(t,"OES_texture_float")||!Eo(t,"WEBGL_color_buffer_float"))return!1}else{if(Eo(t,"EXT_color_buffer_float"))return iI(t);let o="EXT_color_buffer_half_float";if(Eo(t,o)){let n=t.getExtension(o);return z6(t,n)}return!1}return iI(t)}function iI(r){let t=uh(r),e=r.createTexture();r.bindTexture(r.TEXTURE_2D,e);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatFloat,o,n,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(e),r.deleteFramebuffer(s),i}function z6(r,t){let e=uh(r,t),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatHalfFloat,n,s,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function qA(r){return r!==2?!1:Zr(r).fenceSync!=null}function Qs(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}var kt=P();kt.registerFlag("HAS_WEBGL",()=>kt.getNumber("WEBGL_VERSION")>0);kt.registerFlag("WEBGL_VERSION",()=>cI(2)?2:cI(1)?1:0);kt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);kt.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>kt.get("WEBGL_VERSION")===2);kt.registerFlag("WEBGL_CPU_FORWARD",()=>!0);kt.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);kt.registerFlag("WEBGL_PACK",()=>kt.getBool("HAS_WEBGL"));kt.registerFlag("WEBGL_PACK_NORMALIZATION",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_CLIP",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_PACK_REDUCE",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_LAZILY_UNPACK",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_CONV_IM2COL",()=>kt.getBool("WEBGL_PACK"));kt.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>GA(kt.getNumber("WEBGL_VERSION")));kt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>UA(kt.getNumber("WEBGL_VERSION")));kt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=kt.getNumber("WEBGL_VERSION");return r===0?0:WA(r)});kt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>kt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Fa.isMobile());kt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>HA(kt.getNumber("WEBGL_VERSION")));kt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>kt.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:kt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));kt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>KA(kt.getNumber("WEBGL_VERSION")));kt.registerFlag("WEBGL_FENCE_API_ENABLED",()=>qA(kt.getNumber("WEBGL_VERSION")));kt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>kt.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);kt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});kt.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Fa.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});kt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);kt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);kt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);kt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);kt.registerFlag("WEBGL_EXP_CONV",()=>!1);kt.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>kt.getBool("IS_TEST"));function Ie(){let r,t,e,o,n,s,i,a,l,u;return P().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",t="in",e="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",t="attribute",e="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:t,varyingVs:e,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function Xn(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function ru(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function M6(r,t){let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function jA(r,t,e="index"){let o=r.map((s,i)=>i),n=M6(o,t);return n.map((s,i)=>{let a=`int ${r[i]} = ${e} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${e} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function mp(r){let t=y.computeStrides(r).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function fp(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var mx=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:XA}=I;function YA(r,t,e){let o=[];if(r.forEach(f=>{let h=y.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${h>1?`[${h}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),e.enableShapeUniforms){let{uniformShape:d}=fx(e.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(d.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>B6(f,t,e.packedInputs,e.enableShapeUniforms)).join(`
`),i=t.texShape,a=Ie(),l=U6(a),u,c,p=K6(a);return t.isPacked?(u=V6(t.logicalShape,i,e.enableShapeUniforms),c=H6(a)):(u=G6(t.logicalShape,i,e.enableShapeUniforms),c=W6(a)),e.packedInputs&&(p+=Y6),[p,l,c,n,u,s,e.userCode].join(`
`)}function dp(r,t=!1){let e=r.shapeInfo.logicalShape;switch(e.length){case 0:return lX(r,t);case 1:return cX(r,t);case 2:return mX(r,t);case 3:return hX(r,t);case 4:return gX(r,t);case 5:return xX(r);case 6:return yX(r);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function ZA(r,t){switch(r.shapeInfo.logicalShape.length){case 0:return aX(r);case 1:return uX(r,t);case 2:return pX(r,t);case 3:return fX(r,t);default:return dX(r,t)}}function B6(r,t,e=!1,o){let n="";e?n+=ZA(r,o):n+=dp(r,o);let s=r.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(e?n+=bX(r,t):n+=wX(r,t)),n}function V6(r,t,e){switch(r.length){case 0:return QA();case 1:return Z6(r,t,e);case 2:return sX(r,t,e);case 3:return J6(r,t,e);default:return eX(r,t,e)}}function G6(r,t,e){switch(r.length){case 0:return QA();case 1:return Q6(r,t,e);case 2:return iX(r,t,e);case 3:return tX(r,t,e);case 4:return rX(r,t,e);case 5:return oX(r,t);case 6:return nX(r,t);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function U6(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function W6(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function H6(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function K6(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${q6}
    ${j6}
    ${X6}
  `}var q6=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,j6=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,X6=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Y6=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function QA(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function Z6(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return o[0]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function Q6(r,t,e){return t[0]===1?e?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:t[1]===1?e?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `}function J6(r,t,e){if(e)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function tX(r,t,e){if(e)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${ru(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=Xn(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function eX(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function rX(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${ru(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=Xn(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function oX(r,t){let e=Xn(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function nX(r,t){let e=Xn(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function sX(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(y.arraysEqual(r,t))return e?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return e?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function iX(r,t,e){return y.arraysEqual(r,t)?e?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:r[1]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:e?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function ou(r){return`offset${r}`}function aX(r){let t=r.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),o=Ie();return`
    vec4 ${e}() {
      return ${o.texture2D}(${t}, halfCR);
    }
  `}function lX(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${e};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;let i=ou(e);if(t)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `}function uX(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=r.shapeInfo.texShape,s=Ie();if(t)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `}function cX(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${gp(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;let a=ou(e);return i===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    `:s===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `:t?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `}function pX(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=Ie();if(s!=null&&y.arraysEqual(e,s))return t?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(t)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function mX(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(e,s)){if(t)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=y.squeezeShape(e),l=i;if(l.length<e.length){let m=xp(r,l),f=["row","col"];return`
      ${dp(m,t)}
      float ${n}(int row, int col) {
        return ${n}(${yp(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${gp(r)}
      }
    `;let u=s[0],c=s[1],p=ou(o);return c===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:t?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function fX(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(e[0]===1){let m=e.slice(1),f=[1,2],h=xp(r,m),d=["b","row","col"];return`
        ${ZA(h,t)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${yp(d,f)});
        }
      `}let a=Ie();if(t)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(e[2]/2),p=c*Math.ceil(e[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function hX(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[1]*e[2],i=e[2],{newShape:a,keptDims:l}=y.squeezeShape(e),u=a;if(u.length<e.length){let d=xp(r,u),g=["row","col","depth"];return`
        ${dp(d,t)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${yp(g,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${gp(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let h=ou(o);return t?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * ${s} + col * ${i} + depth + ${h};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${h};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function dX(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=Ie();if(t)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",h=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let d=2;d<i-1;d++)f=`int b${d}, `+f,m*=s[i-d-1],h=`b${d} * ${m} + `+h;return`
    vec4 ${o}(${f}) {
      int index = ${h};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `}function gX(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[3],i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(e);if(l.length<e.length){let b=xp(r,l),w=["row","col","depth","depth2"];return`
      ${dp(b,t)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${yp(w,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${gp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],h=`int stride2 = ${o}Shape[3];`,d=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${h}
        ${d}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1]*e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=ou(o);return t?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${h}
      ${d}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function xX(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=t[4],s=t[3]*n,i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(t);if(l.length<t.length){let d=xp(r,l),g=["row","col","depth","depth2","depth3"];return`
      ${dp(d)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${yp(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${gp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]},
               ${t[2]*t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;let h=ou(e);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${h};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `}function yX(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(t);if(n.length<t.length){let g=xp(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${dp(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${yp(x,s)});
      }
    `}let i=t[5],a=t[4]*i,l=t[3]*a,u=t[2]*l,c=t[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${gp(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],h=m[1];if(h===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(h===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]*t[4]},
               ${t[2]*t[3]*t[4]},
               ${t[3]*t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;let d=ou(e);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${d};
      vec2 uv = uvFromFlat(${f}, ${h}, index);
      return sampleTexture(${e}, uv);
    }
  `}function gp(r){let t=r.name,e=y.sizeFromShape(r.shapeInfo.logicalShape);return e<2?`return ${t};`:`
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function bX(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=XA(r.shapeInfo.logicalShape,t.logicalShape),l=Dt(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,w)=>`coords.${p[w+u]}`).join(", ");let f="return outputValue;",d=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(t.logicalShape)===1;if(s===1&&!d&&!x)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(d&&!x)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,w=s-1;a.indexOf(b)>-1&&a.indexOf(w)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(w)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function wX(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=t.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&y.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;let u=Dt(l),c=XA(r.shapeInfo.logicalShape,t.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(d=>`coords.${f[d+p]} = 0;`).join(`
`);let h="";return l<2&&a>0?h="coords":h=r.shapeInfo.logicalShape.map((d,g)=>`coords.${f[g+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${h});
    }
  `}function Dt(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function fx(r,t,e){let{newShape:o,keptDims:n}=y.squeezeShape(t),s=t.length,i=r&&s===3&&t[0]===1,a=i?t.slice(1):o,l=!r&&s>1&&!y.arraysEqual(t,e)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:t,keptDims:n}}function xp(r,t){let e=JSON.parse(JSON.stringify(r));return e.shapeInfo.logicalShape=t,e}function yp(r,t){return t.map(e=>r[e]).join(", ")}function tD(r,t,e,o){let n=e.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=YA(n,i,t),l=AA(r.gl,a),u=r.createProgram(l);return P().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},pI(r,t,u))}function pI(r,t,e){let o={},n={},s={},i=[],a,l,u,c=null,p=null;p=r.getUniformLocation(e,"NAN",!1),P().getNumber("WEBGL_VERSION")===1&&(c=r.getUniformLocation(e,"INFINITY",!1));let m=!1;for(let f=0;f<t.variableNames.length;f++){let h=t.variableNames[f];o[h]=r.getUniformLocation(e,h,m),o[`offset${h}`]=r.getUniformLocation(e,`offset${h}`,m),t.enableShapeUniforms&&(n[`${h}Shape`]=r.getUniformLocation(e,`${h}Shape`,m),s[`${h}TexShape`]=r.getUniformLocation(e,`${h}TexShape`,m))}return t.enableShapeUniforms&&(a=r.getUniformLocation(e,"outShape",m),u=r.getUniformLocation(e,"outShapeStrides",m),l=r.getUniformLocation(e,"outTexShape",m)),t.customUniforms&&t.customUniforms.forEach((f,h)=>{i[h]=r.getUniformLocation(e,f.name,m)}),{uniformLocations:o,customUniformLocations:i,infLoc:c,nanLoc:p,inShapesLocations:n,inTexShapesLocations:s,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}}function JA(r,t){if(r.length!==t.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t.length} inputs`);r.forEach((e,o)=>{let n=e.logicalShape,s=t[o],i=s.shape;if(!y.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&s.isUniform)return;let a=e.texShape,l=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function eD(r,t,e,o,n){t.program.enableShapeUniforms||(JA(t.inShapeInfos,e),JA([t.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(t.webGLProgram),P().getNumber("WEBGL_VERSION")===1&&t.infLoc!==null&&r.gl.uniform1f(t.infLoc,1/0),t.nanLoc!==null&&r.gl.uniform1f(t.nanLoc,NaN),e.forEach((l,u)=>{let c=t.program.variableNames[u],p=t.uniformLocations[c],m=t.uniformLocations[`offset${c}`],f=t.inShapesLocations[`${c}Shape`],h=t.inTexShapesLocations[`${c}TexShape`];if(f){let{uniformShape:d}=fx(t.program.packedInputs,l.shape,l.texData.texShape);switch(d.length){case 1:r.gl.uniform1iv(f,new Int32Array(d));break;case 2:r.gl.uniform2iv(f,new Int32Array(d));break;case 3:r.gl.uniform3iv(f,new Int32Array(d));break;case 4:r.gl.uniform4iv(f,new Int32Array(d));break;default:break}}if(h&&r.gl.uniform2i(h,l.texData.texShape[0],l.texData.texShape[1]),p!=null){if(l.isUniform){if(y.sizeFromShape(l.shape)<2)r.gl.uniform1f(p,l.uniformValues[0]);else{let d=l.uniformValues;d instanceof Float32Array||(d=new Float32Array(d)),r.gl.uniform1fv(p,d)}return}l.texData.slice!=null&&m!=null&&r.gl.uniform1i(m,l.texData.slice.flatOffset),r.setInputMatrixTexture(l.texData.texture.texture,p,u)}});let a=t.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(t.outShapeStridesLocation){let l=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l));break;default:break}}t.outTexShapeLocation&&r.gl.uniform2i(t.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),t.program.customUniforms&&n&&t.program.customUniforms.forEach((l,u)=>{let c=t.customUniformLocations[u],p=n[u];if(l.type==="float")r.gl.uniform1fv(c,p);else if(l.type==="vec2")r.gl.uniform2fv(c,p);else if(l.type==="vec3")r.gl.uniform3fv(c,p);else if(l.type==="vec4")r.gl.uniform4fv(c,p);else if(l.type==="int")r.gl.uniform1iv(c,p);else if(l.type==="ivec2")r.gl.uniform2iv(c,p);else if(l.type==="ivec3")r.gl.uniform3iv(c,p);else if(l.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${l.type} is not supported yet.`)}),r.executeProgram()}function rD(r,t,e){let o="";t.concat(e).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=fx(r.packedInputs,i.shape,l),m="",f="",h="";if(c.length===1&&r.packedInputs){let S=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${S[0]>1}_${S[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let S=y.computeStrides(c);h=`${S[0]===l[1]}_${S[S.length-1]===l[1]}`}let d=i.shape.length,g=c.length===2&&y.arraysEqual(i.shape,l),x=y.sizeFromShape(i.shape)===1,b=I.getBroadcastDims(i.shape,e.shape),w=!r.packedInputs&&d===e.shape.length&&y.arraysEqual(l,e.texData.texShape),C=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${d}_${w}_${u?p:""}_${c.length}_${x}_${b}_${g}_${m}_${f}_${h}_${C}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${P().getNumber("WEBGL_VERSION")}`,s}function ne(r){return P().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var hx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Xa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=Ie();this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?ru(["r","c","d"],t):Xn(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `}};var dx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Xa.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=Ie();this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?ru(["r","c","d"],t):Xn(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `}};var gx=class{constructor(t){this.variableNames=["A"],this.outTexUsage=pr.DOWNLOAD;let e=Ie();this.outputShape=t,this.userCode=`
      ${mx}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `}};var xx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=pr.DOWNLOAD;let e=Ie();this.outputShape=t,this.userCode=`
      ${mx}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `}};var yx=class{constructor(t,e=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=Ie();this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length);let n="result";e&&(n="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?fp():mp(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${o.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${o.output} = vec4(${n}, 0., 0., 0.);
      }
    `}};var bx=class{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=Ie();this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length);let n="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?fp():mp(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function oD(r){let t=Ie(),e=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return $A(r,e)}function nD(r){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return FA(r,t)}function sD(r){let t=new Uint16Array([0,1,2,2,1,3]);return _A(r,t)}function mh(r,t,e,o,n,s){PA(t,e);let i=OA(r),a=r.TEXTURE_2D;return gt(r,()=>r.bindTexture(a,i)),gt(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),gt(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),gt(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),gt(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),P().getNumber("WEBGL_VERSION")===1?gt(r,()=>r.texImage2D(a,0,o,t,e,0,n,s,null)):gt(r,()=>r.texStorage2D(a,1,o,t,e)),gt(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function mI(r){return r.internalFormatFloat}function iD(r,t,e,o){let[n,s]=tu(t,e);return mh(r,n,s,mI(o),o.textureFormatFloat,r.FLOAT)}function fI(r){return r.internalFormatHalfFloat}function aD(r,t,e,o){let[n,s]=tu(t,e);return mh(r,n,s,fI(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function hI(r){return r.downloadTextureFormat}function lD(r,t,e,o){let[n,s]=tu(t,e);return mh(r,n,s,hI(o),r.RGBA,r.UNSIGNED_BYTE)}function dI(r){return r.internalFormatPackedFloat}function uD(r,t,e,o){let[n,s]=Zs(t,e);return mh(r,n,s,dI(o),r.RGBA,r.FLOAT)}function gI(r){return r.internalFormatPackedHalfFloat}function cD(r,t,e,o){let[n,s]=Zs(t,e);return mh(r,n,s,gI(o),r.RGBA,o.textureTypeHalfFloat)}function pD(r,t,e){return gt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),lI(r,t,"clipSpacePos",e,3,20,0)&&lI(r,t,"uv",e,2,20,12)}function mD(r,t,e,o,n,s){gt(r,()=>r.bindTexture(r.TEXTURE_2D,t));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(e*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(e*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),P().getNumber("WEBGL_VERSION")===2?gt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e,o,r.RGBA,a,i)):gt(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,e,o,0,r.RGBA,a,i)),gt(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function fD(r,t,e){gt(r,()=>r.bindTexture(r.TEXTURE_2D,t)),e.data instanceof Uint8Array?P().getNumber("WEBGL_VERSION")===2?gt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,e.data)):gt(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width,e.height,0,r.RGBA,r.UNSIGNED_BYTE,e.data)):P().getNumber("WEBGL_VERSION")===2?gt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,e)):gt(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)),gt(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function hD(r,t,e,o){let n=r.createBuffer();gt(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*t*e;return gt(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),gt(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,0)),gt(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function dD(r,t,e){let o=r,n=new Float32Array(e);return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function gD(r,t,e,o){let[n,s]=tu(t,e),i=4,a=new Uint8Array(TA(t*e,i));return gt(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function xD(r,t,e,o,n,s,i,a){let l=r,u=new Float32Array(NA(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function yD(r,t,e){let o=new Float32Array(t*e*4);return gt(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,o)),o}var bp=class{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let e=P().getNumber("WEBGL_VERSION");t!=null?(this.gl=t,kA(e,t)):this.gl=Zr(e);let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),P().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=ch(this.gl,s),Eo(this.gl,i))this.textureHalfFloatExtension=ch(this.gl,i);else if(P().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),Eo(this.gl,n))this.colorBufferHalfFloatExtension=ch(this.gl,n);else if(P().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",Eo(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(Eo(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=nD(this.gl),this.indexBuffer=sD(this.gl),this.framebuffer=LA(this.gl),this.textureConfig=uh(this.gl,this.textureHalfFloatExtension)}get debug(){return P().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let t=this.gl;gt(t,()=>t.finish()),gt(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),gt(t,()=>t.deleteFramebuffer(this.framebuffer)),gt(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),gt(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),gt(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),iD(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),aD(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),lD(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),fD(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,o,n){this.throwIfDisposed(),mD(this.gl,t,e,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),cD(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),uD(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(uI(this.gl,this.framebuffer),this.outputTexture=null),gt(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,o){return this.downloadMatrixDriver(t,()=>gD(this.gl,e,o,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,o,n,s,i){return xD(this.gl,t,e,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return dD(this.gl,t,e)}createBufferFromTexture(t,e,o){this.bindTextureToFrameBuffer(t);let n=hD(this.gl,e,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,o;if(P().getBool("WEBGL_FENCE_API_ENABLED")){let n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},e=s}else P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(e,P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:e,isFencePassed:o}}downloadMatrixFromPackedTexture(t,e,o){return this.downloadMatrixDriver(t,()=>yD(this.gl,e,o))}createProgram(t){this.throwIfDisposed();let e=this.gl;this.vertexShader==null&&(this.vertexShader=oD(e));let o=DA(e);return gt(e,()=>e.attachShader(o,this.vertexShader)),gt(e,()=>e.attachShader(o,t)),RA(e,o),this.debug&&lx(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=pD(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),t!=null&&gt(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,this.program!=null&&this.debug&&lx(this.gl,this.program),gt(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,o=!0){return this.throwIfDisposed(),o?zA(this.gl,t,e):MA(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),gt(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,o){this.throwIfDisposed(),this.throwIfNoProgram(),BA(this.gl,t,e,o)}setOutputMatrixTexture(t,e,o){this.setOutputMatrixTextureDriver(t,o,e)}setOutputPackedMatrixTexture(t,e,o){this.throwIfDisposed();let[n,s]=Zs(e,o);this.setOutputMatrixTextureDriver(t,n,s)}setOutputMatrixWriteRegion(t,e,o,n){this.setOutputMatrixWriteRegionDriver(o,t,n,e)}setOutputPackedMatrixWriteRegion(t,e,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&lx(this.gl,this.program),ph(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let t=this.gl;this.debug&&this.debugValidate(),gt(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),gt(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=ch(this.gl,P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let e=this.gl,o=this.getQueryTimerExtensionWebGL2();e.endQuery(o.TIME_ELAPSED_EXT);return}let t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(e===0)return null;if(e===2){let o=this.gl;return o.getQueryParameter(t,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(t,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(e===0)return!0;if(e===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(t,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(t,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){let t=vX(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){let{resolveFn:o}=this.itemsToPoll[e];o()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),!(this.itemsToPoll.length>1)&&y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),ux(this.gl,t,this.framebuffer),this.debug&&ph(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(ux(this.gl,this.outputTexture,this.framebuffer),this.debug&&ph(this.gl)):uI(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);let o=e();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(t,e,o){this.throwIfDisposed();let n=this.gl;ux(n,t,this.framebuffer),this.debug&&ph(n),this.outputTexture=t,gt(n,()=>n.viewport(0,0,e,o)),gt(n,()=>n.scissor(0,0,e,o))}setOutputMatrixWriteRegionDriver(t,e,o,n){this.throwIfDisposed(),gt(this.gl,()=>this.gl.scissor(t,e,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function vX(r){let t=0;for(;t<r.length&&r[t]();++t);return t-1}var{addImpl:bD,bincountImpl:wx,bincountReduceImpl:wD,castImpl:CD,ceilImpl:ID,concatImpl:SD,equalImpl:vD,expImpl:kD,expm1Impl:TD,floorImpl:ND,gatherNdImpl:ED,gatherV2Impl:$D,greaterImpl:AD,greaterEqualImpl:DD,lessImpl:RD,lessEqualImpl:FD,linSpaceImpl:_D,logImpl:OD,maxImpl:PD,maximumImpl:LD,minimumImpl:zD,multiplyImpl:MD,negImpl:BD,notEqualImpl:VD,prodImpl:GD,raggedTensorToTensorImpl:UD,rangeImpl:WD,rsqrtImpl:HD,scatterImpl:KD,sigmoidImpl:qD,simpleAbsImpl:Cx,sliceImpl:jD,sparseFillEmptyRowsImpl:XD,sparseReshapeImpl:YD,sparseSegmentReductionImpl:Ix,sqrtImpl:ZD,stridedSliceImpl:QD,stringNGramsImpl:JD,stringSplitImpl:tR,stringToHashBucketFastImpl:eR,subImpl:rR,tileImpl:oR,topKImpl:nR,transposeImpl:nu,uniqueImpl:sR}=W0;function xI(r,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${r}.${e}`)}function De(r,t){return t===1?[r]:xI(r,t)}function iR(r,t){if(r===1)return"rc";let e="";for(let o=0;o<r;o++)e+=t[o],o<r-1&&(e+=",");return e}var Sx=class{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=ne(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=De("rc",this.rank),o=Dt(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),i=this.getOutput(e);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(t){let e=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${t[t.length-1-i]},`+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let o=this.rank-2;o<this.rank;o++)e+=`${t[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(e+="||");return e}getSetup(t){if(this.rank===1)return"";let e=t.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(t){let e=this.getSourceCoordsArr(t);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`}};var wp=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${kX(e,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?fp():mp(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};

        ${o}

        setOutput(result);
      }
    `}};function kX(r,t){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t?jA(["r","c","d"],"inputShape"):Xn(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var vx=class{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,o){let n=lR(e,o),s=uR(t,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=aR(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].shift();return this.usedTextures[s].push(l),l}let a;return n===nr.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):n===nr.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):n===nr.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):n===nr.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):n===nr.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,o,n){if(this.freeTextures==null)return;let s=lR(o,n),i=uR(e,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=aR(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=P().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;let t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);let e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function TX(r,t){let e=r;if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===r.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}function aR(r,t,e,o,n){let s=NX(t,o),i;if(n){let[l,u]=Zs(r[0],r[1]);i=l*u}else{let[l,u]=tu(r[0],r[1]);i=l*u}let a=TX(e,s);return i*a}function NX(r,t){switch(r){case nr.PACKED_2X2_FLOAT32:return dI(t);case nr.PACKED_2X2_FLOAT16:return gI(t);case nr.UNPACKED_FLOAT32:return mI(t);case nr.UNPACKED_FLOAT16:return fI(t);case nr.PACKED_4X1_UNSIGNED_BYTE:return hI(t);default:throw new Error(`Unknown physical texture type ${r}`)}}function EX(r){return P().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?nr.PACKED_2X2_FLOAT32:nr.UNPACKED_FLOAT32:r?nr.PACKED_2X2_FLOAT16:nr.UNPACKED_FLOAT16}function lR(r,t){if(r===pr.UPLOAD)return nr.PACKED_2X2_FLOAT32;if(r===pr.RENDER||r==null)return EX(t);if(r===pr.DOWNLOAD||r===pr.PIXELS)return nr.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function uR(r,t,e){return`${r[0]}_${r[1]}_${t}_${e}`}var yr=class{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},We="if (isnan(x)) return x;",cR="return x;",yI="return abs(x);";var pR="return (x >= 0.0) ? x : (exp(x) - 1.0);",mR=We+`
  return (x < 0.0) ? 0.0 : x;
`,fR=We+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,su="return x;",hR="return 1.0 / (1.0 + exp(-1.0 * x));";var gR="return x;",xR=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,yR=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,bR=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,wR="return 1.0 / (1.0 + exp(-1.0 * x));",$o=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var kx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length);let e=t.length,o=De("rc",e),n=Dt(e),s=iR(e,o),i=o.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var AX=Ue.whereImpl,DX=1e-7,RX=1e-4,Tx={};function FX(r){return r in Tx||(Tx[r]={}),Tx[r]}var _X=P().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),OX=600;function PX(){return P().global.screen==null?1024:P().global.screen.height*P().global.screen.width*window.devicePixelRatio*OX/1024/1024}var iu=class extends mn{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!P().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(t!=null){if(t instanceof bp)e=t;else{let o=Zr(P().getNumber("WEBGL_VERSION"),t);e=new bp(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=Zr(P().getNumber("WEBGL_VERSION"));e=new bp(o),this.binaryCache=FX(P().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new vx(this.gpgpu),this.numMBBeforeWarning=PX(),this.texData=new ri(this,Fr())}nextDataId(){return iu.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(t,e,o){if((P().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||P().getBool("DEBUG"))&&this.checkNumericalProblems(t),o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:e,dtype:o,values:t,usage:pr.UPLOAD,refCount:1}),n}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){let e=this.texData.get(t);e.refCount++}decRef(t){if(this.texData.has(t)){let e=this.texData.get(t);e.refCount--}}move(t,e,o,n,s){if(P().getBool("DEBUG")&&this.checkNumericalProblems(e),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:o,dtype:n,values:e,usage:pr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){let e=this.texData.get(t),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=e;if(i!=null){let m;l?m=new $o(a,su):m=new yr(a,su);let f=this.runWebGLProgram(m,[{dataId:t,shape:a,dtype:n}],n),h=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),h}if(o!=null)return this.convertAndCacheOnCPU(t);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=I.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(t,p)}async read(t){if(this.pendingRead.has(t)){let h=this.pendingRead.get(t);return new Promise(d=>h.push(d))}let e=this.texData.get(t),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=e;if(s!=null){let h;l?h=new $o(n,su):h=new yr(n,su);let d=this.runWebGLProgram(h,[{dataId:t,shape:n,dtype:i}],i),g=this.read(d.dataId);return this.disposeIntermediateTensorInfo(d),g}if(o!=null)return this.convertAndCacheOnCPU(t);if(P().getBool("DEBUG")&&!P().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&P().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&P().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);let h=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(h.texture.texture,...lh(n))}this.pendingRead.set(t,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let h=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),d=h[0],g=h[1];p=I.mergeRealAndImagArrays(d,g)}else if(u==null)p=this.getValuesFromTexture(t);else{let h=y.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,h)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let h=this.gpgpu.gl;gt(h,()=>h.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(t,p),f=this.pendingRead.get(t);return this.pendingRead.delete(t),f.forEach(h=>h(m)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&Fr().removeDataId(t,this),this.pendingDeletes--),m}readToGPU(t,e={}){let o=this.texData.get(t),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new $o(s,su):f=new yr(s,su);let h=this.runWebGLProgram(f,[{dataId:t,shape:s,dtype:a}],a),d=this.readToGPU(h,e);return this.disposeIntermediateTensorInfo(h),d}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(t,e.customTexShape),p=Fr().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return et(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return et(t.shape,t.dtype,e)}checkNumericalProblems(t){if(t!=null)for(let e=0;e<t.length;e++){let o=t[e];if(!EA(o))throw P().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(t){let{shape:e,dtype:o,isPacked:n}=this.texData.get(t),s=y.sizeFromShape(e);if(P().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(t),f=this.texData.get(m.dataId),h=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...lh(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),h}let i=P().getBool("WEBGL_PACK")&&n===!0,a=i?cx(e):e,l=i?new xx(a):new gx(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:t}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=y.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(t){return P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=y.now(),t)}async getQueryTime(t){if(P().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);let e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);let{complexTensorInfos:o}=this.texData.get(t);return o!=null&&(this.disposeData(o.real.dataId,e),this.disposeData(o.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){let{texture:e,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(t),l=a&&a.origDataId||t,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),e!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(e,n,s,i)));let c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=_X){return P().getBool("WEBGL_CPU_FORWARD")&&t.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){I.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let e=t.dataSync();return AX(t.shape,e)}packedUnaryOp(t,e,o){let n=new $o(t.shape,e),s=this.compileAndRun(n,[t],o);return Fr().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&t.dtype!=="complex64"){let n=Cx(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,n)}if(P().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,yI,t.dtype);let e=new yr(t.shape,yI),o=this.compileAndRun(e,[t]);return Fr().makeTensorFromTensorInfo(o)}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e,o){return Fr().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,o),this)}unpackTensor(t){let e=new kx(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){let e=new Sx(t.shape),o=!0;return this.runWebGLProgram(e,[t],t.dtype,null,o)}packedReshape(t,e){let o=[Ya(t.shape),...Za(t.shape)],n={dtype:t.dtype,shape:o,dataId:t.dataId},s=[Ya(e),...Za(e)],i=new wp(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],t.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}decode(t,e){let o=this.texData.get(t),{isPacked:n,shape:s,dtype:i}=o;if(e!=null){let m=y.sizeFromShape(s),f=e[0]*e[1]*4;y.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=cx(s),l;n?l=new dx(a):l=new hx(a);let u=!0,c=[e??lh(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:t}],i,c,u,e);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(t,e,o,n,s=!1,i){let a=this.makeTensorInfo(t.outputShape,o),l=this.texData.get(a.dataId);if(t.packedOutput&&(l.isPacked=!0),t.outPackingScheme===Xa.DENSE){let x=i??lh(t.outputShape);l.texShape=x.map(b=>b*2)}if(t.outTexUsage!=null&&(l.usage=t.outTexUsage),y.sizeFromShape(a.shape)===0)return l.values=y.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=e.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!t.packedInputs&&y.sizeFromShape(x.shape)<=P().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};t.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!t.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!eu(b.shape,x.shape)){let w=x,C=x.shape;x.shape=b.shape,x=this.packedReshape(x,C),u.push(x),b=this.texData.get(x.dataId),w.shape=C}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=rD(t,c,p),f=this.getAndSaveBinary(m,()=>tD(this.gpgpu,t,c,p)),h=this.activeTimers!=null,d;h&&(d=this.startTimer()),P().get("ENGINE_COMPILE_ONLY")||eD(this.gpgpu,f,c,p,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),h&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)}));let g=P().get("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!P().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let x=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),x}return a}compileAndRun(t,e,o,n,s=!1){return o=o||e[0].dtype,this.runWebGLProgram(t,e,o,n,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(P().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=z(()=>{if(!P().get("WEBGL_RENDER_FLOAT32_ENABLED")){let t=P().getBool("DEBUG");P().set("DEBUG",!1);let e=this.abs(Ct(1e-8)).dataSync()[0];if(P().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?DX:RX}uploadToGPU(t){let e=this.texData.get(t),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=e;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let p=e.texShape;if(p==null&&(p=VA(o,l),e.texShape=p),s!=null){let m=cx(o),f,h=p[1],d=p[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!g)&&([h,d]=Zs(p[0],p[1])),l?f=new bx(m,g):f=new yx(m,g);let x=g?[d,h]:p,b=this.makeTensorInfo(x,n),w=this.texData.get(b.dataId);g?w.usage=pr.PIXELS:w.usage=pr.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),h,d,s);let C=[[d,h]],S=!0,k=this.runWebGLProgram(f,[b],n,C,S),E=this.texData.get(k.dataId);e.texShape=E.texShape,e.isPacked=E.isPacked,e.usage=E.usage,P().get("ENGINE_COMPILE_ONLY")?this.disposeData(k.dataId):(e.texture=E.texture,e.values=null,this.texData.delete(k.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(p,a,n,l);e.texture=m}}convertAndCacheOnCPU(t,e){let o=this.texData.get(t),{dtype:n}=o;return this.releaseGPUData(t),e!=null&&(o.values=LX(e,n)),o.values}acquireTexture(t,e,o,n){if(this.numBytesInGPU+=this.computeBytes(t,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,n)}computeBytes(t,e){return t[0]*t[1]*y.bytesPerElement(e)}checkCompileCompletion(){for(let[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){let t=[];if(this.gpgpu.parallelCompilationExtension){for(let[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}else{for(let[,e]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(e),n(!0)}catch(s){throw s}});t.push(o)}return Promise.all(t)}}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await Em(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(aI(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let[,t]of Object.entries(this.binaryCache)){let{uniformLocations:e,customUniformLocations:o,infLoc:n,nanLoc:s,inShapesLocations:i,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=pI(this.gpgpu,t.program,t.webGLProgram);t.uniformLocations=e,t.customUniformLocations=o,t.infLoc=n,t.nanLoc=s,t.inShapesLocations=i,t.inTexShapesLocations=a,t.outShapeLocation=l,t.outShapeStridesLocation=u,t.outTexShapeLocation=c}}};iu.nextDataId=0;function LX(r,t){if(t==="float32"||t==="complex64")return r;if(t==="int32"||t==="bool"){let e=t==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<e.length;++o)e[o]=Math.round(r[o]);return e}else throw new Error(`Unknown dtype ${t}`)}Fa.isBrowser()&&lc("webgl",()=>new iu,2);var Nx=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var Ao=class{constructor(t,e,o){this.variableNames=["A","B"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.enableShapeUniforms=ne(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var Qa=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;var on=class{constructor(t,e,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=I.assertAndGetBroadcastShape(e,o);let s=this.outputShape.length;this.enableShapeUniforms=ne(s);let i="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${Dt(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=De("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function Re(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var CR={kernelName:lo,backendName:"webgl",kernelFunc:Re};function Mr(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.texData.get(s.dataId),a=Re({inputs:{x:o},backend:e}),l=Re({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var IR={kernelName:ci,backendName:"webgl",kernelFunc:Mr};var bI="return (a < 0.) ? b * a : a;",wI=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function zX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=e.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),a=P().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new on(wI,n.shape,i.shape):new Ao(bI,n.shape,i.shape),l=e.runWebGLProgram(a,[n,i],"float32");return e.disposeIntermediateTensorInfo(i),l}var SR={kernelName:gs,backendName:"webgl",kernelFunc:zX};var CI="return (a < 0.) ? b * a : a;",II=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function MX(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=P().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new on(II,o.shape,n.shape):new Ao(CI,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],"float32")}var vR={kernelName:ks,backendName:"webgl",kernelFunc:MX};var nn="if (isnan(x)) return x;",kR=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,TR=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;function dt({opSnippet:r,packedOpSnippet:t,cpuKernelImpl:e,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&e!=null){let p=a.texData.get(i.dataId),m=e(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=P().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&t!=null,c;return u?c=new $o(i.shape,t):c=new yr(i.shape,r),a.runWebGLProgram(c,[i],l)}}function qt({opSnippet:r,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let h=c.texData.get(l.dataId),d=c.texData.get(u.dataId),[g,x]=[[h.complexTensorInfos.real,d.complexTensorInfos.real],[h.complexTensorInfos.imag,d.complexTensorInfos.imag]].map(w=>{let[C,S]=w,k={dataId:C.dataId,dtype:C.dtype,shape:l.shape},E={dataId:S.dataId,dtype:S.dtype,shape:u.shape},A=new Ao(r,l.shape,u.shape);return c.runWebGLProgram(A,[k,E],Qt(C.dtype,S.dtype))}),b=Mr({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),b}let p=s||Qt(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let h=c.texData.get(l.dataId).values,d=c.texData.get(u.dataId).values,g=l.dtype==="string"?I.fromUint8ToStringArray(h):h,x=l.dtype==="string"?I.fromUint8ToStringArray(d):d,[b,w]=n(l.shape,u.shape,g,x,p),C=c.makeTensorInfo(w,p),S=c.texData.get(C.dataId);return S.values=b,C}let m=P().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&t!=null,f;return m?f=new on(t,l.shape,u.shape,e):f=new Ao(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function Yi(r,t=!1){if(r==="linear")return t?gR:cR;if(r==="relu")return t?yR:mR;if(r==="elu")return t?xR:pR;if(r==="relu6")return t?bR:fR;if(r==="prelu")return t?II:CI;if(r==="leakyrelu")return t?wI:bI;if(r==="sigmoid")return t?wR:hR;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Cp=class{constructor(t,e,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=ne(this.outputShape.length);let c=n?t[1]:t[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";a&&(l?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:g=`vec4 activation(vec4 x) {
          ${a}
        }`,x="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let w="rc.x",C="rc.x";t[0]<e[0]?w=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(C=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${w};
          int batchB = ${C};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${d[0]});
          result += (${h[1]} * ${d[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var SI={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},fh=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var NR="return a * b;";function hh(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=I.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),u=new fh(SI.REAL,o.shape,n.shape),c=new fh(SI.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Mr({inputs:{real:m,imag:f},backend:e});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}if(e.shouldExecuteOnCPU([o,n])){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),[u,c]=MD(o.shape,n.shape,a.values,l.values,s),p=e.makeTensorInfo(c,s),m=e.texData.get(p.dataId);return m.values=u,p}let i;return P().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new on(NR,o.shape,n.shape):i=new Ao(NR,o.shape,n.shape),e.runWebGLProgram(i,[o,n],s)}var ER={kernelName:mo,backendName:"webgl",kernelFunc:hh};function $R(r,t,e){let o=[Ya(r.shape),...Za(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[Ya(t),...Za(t)],i=new wp(s,o),a=!0,l=[o],u=e.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=e,a=y.sizeFromShape(n.shape),l=y.inferFromImplicitShape(s,a),u=y.sizeFromShape(l);y.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!eu(n.shape,l)&&!(c.texture!==null&&eu(c.shape,l))?$R(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var AR={kernelName:Ts,backendName:"webgl",kernelFunc:Q};var dh=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(e!=null){let p=1/e;u=`sumValue += dot(values * ${y.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var Ex=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a="0.0",l="";e==="prod"?a="1.0":e==="min"?(a="1.0 / 1e-20",l="min"):e==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="sum"?u="sumValue":e==="prod"?u="prodValue":e==="all"?u="allValue":e==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${e==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${e==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e==="min"} || ${e==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";e==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):e==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function VX(r){let t=[];for(;t.length===0||t[t.length-1].outSize!==1;){let e=t.length?t[t.length-1].outSize:r[1],o=I.computeOptimalWindowSize(e);t.push({inSize:e,windowSize:o,outSize:Math.ceil(e/o)})}return t}function Qr(r,t,e,o){let n=VX(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;e==="mean"?c=i===0?new dh({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new dh({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new Ex({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},e),p=s,s=o.runWebGLProgram(c,[s],t),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var $x=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[e[i]];this.outputShape=o,this.rank=o.length;let n=Dt(this.rank),s=GX(e);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function GX(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(t);for(let n=0;n<r.length;n++)o[r[n]]=e[n];return o.join()}var Ax=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(t.length);for(let c=0;c<o.length;c++)o[c]=t[e[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=Dt(this.rank),s=xI("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function Ja(r,t,e){let o=P().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ax(r.shape,t):new $x(r.shape,t);return e.runWebGLProgram(o,[r],r.dtype)}function DR(r,t,e,o){let n=t,s=r.shape.length,i=y.parseAxisParam(n,r.shape),a=i,l=I.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=Ja(r,l,o),a=I.getInnerMostAxes(a.length,s)),I.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=I.computeOutAndReduceShapes(c.shape,a),f=p;e&&(f=I.expandShapeToKeepDim(p,i));let h=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/h,x=Q({inputs:{x:c},attrs:{shape:[g,h]},backend:o}),b=$i(r.dtype),w=Qr(x,b,"sum",o),C=Q({inputs:{x:w},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),u&&o.disposeIntermediateTensorInfo(c),C}function au(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return DR(n,s,i,e)}var RR={kernelName:As,backendName:"webgl",kernelFunc:au};function ge(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=nu(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=Ja(n,s,i);return u}var FR={kernelName:Fo,backendName:"webgl",kernelFunc:ge};var vI=1e3;function lu({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],d=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(d),b=y.sizeFromShape(g),C=wr.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let S=e?[x,p,f]:[x,f,p],k=o?[b,h,m]:[b,m,h],E=Q({inputs:{x:r},backend:n,attrs:{shape:S}}),A=Q({inputs:{x:t},backend:n,attrs:{shape:k}}),D=[E,A],O=Math.max(x,b),M=e?E.shape[1]:E.shape[2],B=s!=null,V=i!=null,U=l==="leakyrelu",G=l!=null?Yi(l,!0):null,W=B||V||U||G!=null,j;if((f===1||h===1)&&M>vI&&W===!1){let Z=E,J=A;e&&(Z=ge({inputs:{x:E},backend:n,attrs:{perm:[0,2,1]}}),D.push(Z)),o&&(J=ge({inputs:{x:A},backend:n,attrs:{perm:[0,2,1]}}),D.push(J));let tt=h!==1,ot=h===1,rt=Z;tt&&(rt=Q({inputs:{x:Z},backend:n,attrs:{shape:[O,M,1]}}),D.push(rt));let pt=h===1?2:1,it=J;ot&&(it=Q({inputs:{x:J},backend:n,attrs:{shape:[O,1,M]}}),D.push(it));let ht=hh({inputs:{a:rt,b:it},backend:n});j=au({inputs:{x:ht},backend:n,attrs:{axis:pt,keepDims:!0}}),D.push(ht)}else{let Z=Qt(r.dtype,t.dtype),J=new Cp(S,k,[O,f,h],e,o,B,G,V,U),tt=[E,A];if(s!=null&&tt.push(s),V&&tt.push(i),U){let ot=n.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));tt.push(ot),D.push(ot)}j=n.runWebGLProgram(J,tt,Z)}let H=Q({inputs:{x:j},backend:n,attrs:{shape:C}});D.push(j);for(let Z of D)n.disposeIntermediateTensorInfo(Z);return H}function UX(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return lu({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var _R={kernelName:ki,backendName:"webgl",kernelFunc:UX};var OR="return abs(x);";function WX(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=e.texData.get(o.dataId),i=Cx(s.values);return e.makeTensorInfo(o.shape,o.dtype,i)}let n;return P().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new $o(o.shape,OR):n=new yr(o.shape,OR),e.runWebGLProgram(n,[o],o.dtype)}var PR={kernelName:fn,backendName:"webgl",kernelFunc:WX};var HX=We+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,KX=dt({opSnippet:HX}),LR={kernelName:ni,backendName:"webgl",kernelFunc:KX};var qX=We+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,jX=dt({opSnippet:qX}),zR={kernelName:si,backendName:"webgl",kernelFunc:jX};var MR="return a + b;",XX=qt({opSnippet:MR,packedOpSnippet:MR,supportsComplex:!0,cpuKernelImpl:bD}),BR={kernelName:Rr,backendName:"webgl",kernelFunc:XX};var Dx=class{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var Rx=class{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function Fx(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return Re({inputs:{x:o[0]},backend:e});if(o.length>P().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=Fx({inputs:o.slice(0,l),backend:e}),c=Fx({inputs:o.slice(l),backend:e});return Fx({inputs:[u,c],backend:e})}let n=o.map(l=>l.dtype).reduce((l,u)=>Qt(l,u)),s=o.map(l=>l.shape),a=P().getBool("WEBGL_PACK")?new Rx(o[0].shape,s):new Dx(o[0].shape,s);return e.runWebGLProgram(a,o,n)}var VR={kernelName:aa,backendName:"webgl",kernelFunc:Fx};function YX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=ge({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,a)),I.assertAxesAreInnerMostDims("all",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Qr(d,d.dtype,"all",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var GR={kernelName:ku,backendName:"webgl",kernelFunc:YX};function ZX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=ge({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,a)),I.assertAxesAreInnerMostDims("any",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Qr(d,d.dtype,"any",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var UR={kernelName:Tu,backendName:"webgl",kernelFunc:ZX};var _x=class{constructor(t,e,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=t;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=e==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var Ox=class{constructor(t,e,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(t.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=Dt(l),c=De("coords",l),p,m;if(i===1){m=l+1;let A=Dt(m);p=`
        ${A} sourceLocR = ${A}(${c.join()}, 0);
        ++${c[l-1]};
        ${A} sourceLocG = ${A}(${c.join()}, 0);
        ++${c[l-2]};
        ${A} sourceLocA = ${A}(${c.join()}, 0);
        --${c[l-1]};
        ${A} sourceLocB = ${A}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),h="."+f[m-1],d=f.map(A=>"int "+A),g=De("sourceLocR",m-1).concat("inIdx.r"),x=De("sourceLocG",m-1).concat("inIdx.g"),b=De("sourceLocB",m-1).concat("inIdx.b"),w=De("sourceLocA",m-1).concat("inIdx.a"),C=o==="max"?"greaterThan":"lessThan",S=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`,k=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,E=n?"":`
      float getBestIndicesAChannel(${d.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${d.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${E}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${k};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${S}
          vec4 candidate = ${k};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${C}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function WR(r,t,e,o=null){let n=t.shape[0],s=t.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=I.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new _x(a,e,o==null),u=[t];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=WR(r,t,e,c);return r.disposeIntermediateTensorInfo(c),p}function HR(r,t,e,o=null){let n=o!=null?o.shape:t.shape,s=n[n.length-1],i=I.computeOptimalWindowSize(s),a=new Ox(n,i,e,o==null),l=o==null?[t]:[t,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===t.shape.length){let c=HR(r,t,e,u);return r.disposeIntermediateTensorInfo(u),c}return u}function Px(r,t,e,o){let n=[e];if(I.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,t.shape.length),!P().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let s=[],i=r.texData.get(t.dataId),a=i!==null&&i.isPacked,l=t;a&&(l=r.unpackTensor(t),s.push(l));let[u,c]=I.computeOutAndReduceShapes(l.shape,n),p=y.sizeFromShape(c),m=Q({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=WR(r,m,o);s.push(f);let h=Q({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(d=>r.disposeIntermediateTensorInfo(d)),h}return HR(r,t,o)}function QX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=ge({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=Px(e,l,i[0],"max");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var KR={kernelName:os,backendName:"webgl",kernelFunc:QX};function JX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=ge({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=Px(e,l,i[0],"min");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var qR={kernelName:ns,backendName:"webgl",kernelFunc:JX};var t5=We+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,e5=dt({opSnippet:t5}),jR={kernelName:ii,backendName:"webgl",kernelFunc:e5};var r5=We+"return log(x + sqrt(x * x + 1.0));",o5=dt({opSnippet:r5}),XR={kernelName:ai,backendName:"webgl",kernelFunc:o5};var n5=We+`
  return atan(x);
`,s5=dt({opSnippet:n5}),YR={kernelName:li,backendName:"webgl",kernelFunc:s5};var i5=kR+`
  return atan(a, b);
`,a5=`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+TR+`
  return result;
`,l5=qt({opSnippet:i5,packedOpSnippet:a5}),ZR={kernelName:hn,backendName:"webgl",kernelFunc:l5};var u5=We+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,c5=dt({opSnippet:u5}),QR={kernelName:ui,backendName:"webgl",kernelFunc:c5};var Yn=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterHeight,m=t.effectiveFilterWidth,f=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;let d=e==="avg",g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,x=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`,b="0.0";if(d||(b="-1.0 / 1e-20"),o){let A=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${A} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let w="max",C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(C="avgValue / count");let S=Math.floor(i/4)*4,k=i%4,E=`
      if (${d}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${S}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${E}
          }

          int xC = xCCorner + ${S};
          if (${k===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${k===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${k===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${E}
          }
        }
        setOutput(${C});
      }
    `}},tl=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,p=t.dilationHeight,m=t.dilationWidth,f=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,g=t.padInfo.front,x=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;let w=e==="avg",C="0.0";if(w||(C="-1.0 / 1e-20"),o){let O=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${d};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${O} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${h} * ${d} +
                      wR * ${d} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let S="max",k=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(k="avgValue / count");let E=Math.floor(i/4)*4,A=i%4,D=`
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${S}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${C};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${C});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${E}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${D}
            }

            int xC = xCCorner + ${E};
            if (${A===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${A===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${A===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${D}
            }
          }
          setOutput(${k});
        }
      }
    `}};function p5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Qs(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Re({inputs:{x:n},backend:e});let p=new Yn(c,"avg",!1);return e.runWebGLProgram(p,[n],"float32")}var JR={kernelName:ss,backendName:"webgl",kernelFunc:p5};function m5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=I.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new tl(p,"avg",!1);return e.runWebGLProgram(m,[n],"float32")}var tF={kernelName:la,backendName:"webgl",kernelFunc:m5};var Lx=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=l-1-t.padInfo.top,p=u-1-t.padInfo.left,m=1/(e*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},zx=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterDepth,m=t.effectiveFilterHeight,f=t.effectiveFilterWidth,h=p-1-t.padInfo.front,d=m-1-t.padInfo.top,g=f-1-t.padInfo.left,x=1/(e*o*n);this.userCode=`
      const ivec3 pads = ivec3(${h}, ${d}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function f5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=I.computePool3DInfo(i.shape,a,l,p,u,c),f=new zx(m);return e.runWebGLProgram(f,[n],i.dtype)}var eF={kernelName:Eu,backendName:"webgl",kernelFunc:f5};function h5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Qs([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=I.computePool2DInfo(i.shape,a,l,1,u),p=new Lx(c);return e.runWebGLProgram(p,[n],i.dtype)}var rF={kernelName:Nu,backendName:"webgl",kernelFunc:h5};function d5(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return lu({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var oF={kernelName:is,backendName:"webgl",kernelFunc:d5};var Mx=class{constructor(t,e,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o);let a="0.0";n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var Bx=class{constructor(t,e,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o);let a="vec4(0.0)";n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var g5=({inputs:r,backend:t,attrs:e})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=P().getBool("WEBGL_PACK_NORMALIZATION")?new Bx(o.shape,n.shape,s.shape,c,p,l):new Mx(o.shape,n.shape,s.shape,c,p,l);return t.runWebGLProgram(m,u,u[0].dtype)},nF={kernelName:hs,backendName:"webgl",kernelFunc:g5};var Vx=class{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;let e=Dt(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=x5(this.rank),n,s=t.map((i,a)=>`sourceLoc.${kI[a]} = start[${a}] + coords.${kI[a]};`);n=`
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},kI=["x","y","z","w","u","v"];function x5(r){if(r===1)return"sourceLoc";if(r<=6)return kI.slice(0,r).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var Gx=class{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let e=Dt(this.rank),o=De("coords",this.rank),n=De("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${t[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${e}(${t.map((c,p)=>`start[${p}]`).join()});`:t.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function y5(r,t,e,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(e,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=e,i.dtype=r.dtype;let a=me.computeFlatOffset(t,y.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function Zn(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=me.parseSliceParams(n,s,i);if(me.assertParamsValid(n,a,l),y.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);if(e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.texData.get(n.dataId),m=jD(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=e.texData.get(n.dataId),c=me.isSliceContinous(n.shape,a,l);if(u||!c){let p=P().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Gx(l):new Vx(l),m=[a];return e.runWebGLProgram(p,[n],n.dtype,m)}return e.uploadToGPU(n.dataId),y5(n,a,l,e)}var sF={kernelName:Fn,backendName:"webgl",kernelFunc:Zn};var b5=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,w)=>b*w),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=[],h=Q({inputs:{x:n},backend:e,attrs:{shape:l}}),d=ge({inputs:{x:h},backend:e,attrs:{perm:u}}),g=Q({inputs:{x:d},backend:e,attrs:{shape:c}}),x=Zn({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(d),f.push(g),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),x},iF={kernelName:as,backendName:"webgl",kernelFunc:b5};function w5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.readSync(n.dataId),l=e.readSync(s.dataId),u=wx(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var aF={kernelName:$u,backendName:"webgl",kernelFunc:w5};function C5(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.readSync(o.dataId),i=e.readSync(n.dataId),a=I.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var lF={kernelName:_h,backendName:"webgl",kernelFunc:C5};var I5="return float(a != b);",TI=qt({opSnippet:I5,cpuKernelImpl:VD,dtype:"bool"}),uF={kernelName:Nn,backendName:"webgl",kernelFunc:TI};function Zi(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return Re({inputs:{x:n.complexTensorInfos.real},backend:e})}var cF={kernelName:yi,backendName:"webgl",kernelFunc:Zi};var S5="return float(int(x));";function pF(r,t){let e=new yr(r.shape,S5),o=t.runWebGLProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function NI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Re({inputs:{x:n},backend:e});let i=te(n.shape),a=NI({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=Mr({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=Zi({inputs:{input:n},backend:e}),a=NI({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(i),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=Re({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let i=e.texData.get(n.dataId).values,[a,l,u]=CD(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}if(s==="int32")return pF(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=TI({inputs:{a:n,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var mF={kernelName:ro,backendName:"webgl",kernelFunc:NI};var fF="return ceil(x);",v5=dt({opSnippet:fF,packedOpSnippet:fF,cpuKernelImpl:ID}),hF={kernelName:oo,backendName:"webgl",kernelFunc:v5};var Ux=class{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var Wx=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function k5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a;P().getBool("WEBGL_PACK_CLIP")?a=new Wx(n.shape):a=new Ux(n.shape);let l=[[s],[i]];return e.runWebGLProgram(a,[n],n.dtype,l)}var dF={kernelName:dn,backendName:"webgl",kernelFunc:k5};var Hx=class{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function gF(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function T5(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.texData.get(o.dataId),s=new Hx(o.shape),i=[gF(o,n.complexTensorInfos.real),gF(o,n.complexTensorInfos.imag)];return e.runWebGLProgram(s,i,i[0].dtype)}var xF={kernelName:ua,backendName:"webgl",kernelFunc:T5};var Kx=class{constructor(t){this.outputShape=[],this.outputShape=I.computeOutShape(t,1),this.variableNames=t.map((i,a)=>`T${a}`);let e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];let o=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){let a=e[i-1];o.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=e.length,s=e[e.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var jx=class{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=I.computeOutShape(t,e);let o=this.outputShape,n=o.length,s=Dt(n),i=De("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((d,g)=>`T${g}`);let l=new Array(t.length-1);l[0]=t[0][e];for(let d=1;d<l.length;d++)l[d]=l[d-1]+t[d][e];let u=a[e],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let d=1;d<l.length;d++){let g=l[d-1];m+=`
        if (${u} < ${l[d]}  && ${u} >= ${l[d-1]}) {
          return getChannel(
            getT${d}(${qx(a,u,g)}),
            vec2(${qx(c,u,g)}));
        }`}let f=l.length,h=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${qx(a,u,h)}),
          vec2(${qx(c,u,h)}));`,this.userCode=`
      float getValue(${a.map(d=>"int "+d)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function qx(r,t,e){let o=r.indexOf(t);return r.map((s,i)=>i===o?`${s} - ${e}`:s).join()}function uu(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return Re({inputs:{x:n.complexTensorInfos.imag},backend:e})}var yF={kernelName:xa,backendName:"webgl",kernelFunc:uu};function Ip(r,t,e){let o=r[0].dtype;if(o==="complex64"){let p=r.map(g=>Zi({inputs:{input:g},backend:e})),m=r.map(g=>uu({inputs:{input:g},backend:e})),f=Ip(p,t,e),h=Ip(m,t,e),d=Mr({inputs:{real:f,imag:h},backend:e});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),m.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let p=r.map(b=>{let w=y.sizeFromShape(b.shape.slice(t));return Q({inputs:{x:b},backend:e,attrs:{shape:[-1,w]}})}),m=p.map(b=>({vals:e.readSync(b.dataId),shape:b.shape})),f=I.computeOutShape(p.map(b=>b.shape),1),h=p[0].shape[0]===1,d=SD(m,f,o,h),g=I.computeOutShape(r.map(b=>b.shape),t),x=e.makeTensorInfo(g,o,d);return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}let s=P().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>s){let p=[];for(let f=0;f<r.length;f+=s){let h=r.slice(f,f+s);p.push(Ip(h,t,e))}let m=Ip(p,t,e);for(let f of p)e.disposeIntermediateTensorInfo(f);return m}if(P().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){let p=new jx(r.map(m=>m.shape),t);return e.runWebGLProgram(p,r,o)}let{tensors2D:i,outShape:a}=N5(r,t,e),l=new Kx(i.map(p=>p.shape)),u=e.runWebGLProgram(l,i,o);i.forEach(p=>e.disposeIntermediateTensorInfo(p));let c=Q({inputs:{x:u},attrs:{shape:a},backend:e});return e.disposeIntermediateTensorInfo(u),c}function N5(r,t,e){let o=I.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>Q({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(t))]},backend:e})),outShape:o}}function EI(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=I.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return Re({inputs:{x:a[0]},backend:e});let l=a.map(u=>u.shape);return I.assertParamsConsistent(l,s),Ip(a,s,e)}var bF={kernelName:ls,backendName:"webgl",kernelFunc:EI};var Sp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;let i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,p=t.dilationWidth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4,g=t.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,w=g?3:1,C="",S="";o&&(n?C=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?C=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:C=`
          float activation(float x) {
            ${o}
          }
        `,S="result = activation(result);");let k=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${C}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${d===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${d===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${d===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${k}
        ${S}
        setOutput(result);
      }
    `}},Xx=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let e=t.padInfo.front,o=t.padInfo.top,n=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.filterDepth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${d===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${d===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${d===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var vp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=ne(this.outputShape.length);let i=t.padInfo.left,a=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,p=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<c;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;for(let g=0;g<c;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(p+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*l};
           `,a===1){if(x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,l===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=i%2===0?y.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,l>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let f="",h="";o&&(n?f=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?f=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:f=`vec4 activation(vec4 x) {
           ${o}
         }`,h="result = activation(result);");let d=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${f}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${d}
         ${h}
         setOutput(result);
       }
     `}};var Yx=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=ne(this.outputShape.length);let{dataFormat:o}=e,n=Ie(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function Zx(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function Qx({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=e.inChannels,p=l[0]*l[1]*l[2],m=e.outChannels,f=e.dataFormat==="channelsLast",h=!1,d=!1,g,x=[];if(s!=null){let C=Zx(s.shape,f);C!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:C}}),x.push(s))}if(n!=null){let C=Zx(n.shape,f);C!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:C}}),x.push(n))}if(!((p===1||m===1)&&c>vI)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),l.slice(-3))){let C=l[0]*l[1]*(l[2]+1),S={dataId:r.dataId,shape:[1,C,e.inChannels],dtype:r.dtype},k=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(eu(u.shape,S.shape),()=>`packed reshape ${u.shape} to ${S.shape} isn't free`);let E=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});x.push(E);let A=lu({a:S,b:E,backend:o,transposeA:h,transposeB:d,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),D=o.texData.get(A.dataId);y.assert(D.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=k,D.shape=e.outShape,g=Re({inputs:{x:A},backend:o}),g.shape=e.outShape,x.push(A)}else{let C=e.outHeight*e.outWidth,S=Q({inputs:{x:r},backend:o,attrs:{shape:f?[e.batchSize,C,e.inChannels]:[e.batchSize,e.inChannels,C]}}),k=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}}),E=lu({a:f?S:k,b:f?k:S,transposeA:!f,transposeB:d,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});g=Q({inputs:{x:E},backend:o,attrs:{shape:e.outShape}}),x.push(S),x.push(k),x.push(E)}for(let C of x)o.disposeIntermediateTensorInfo(C);return g}function Jx({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=e,h=f==="channelsLast",d=l*u*c,g=m*p,x=[e.batchSize,d,g],b=!0,w=!1,C=[];if(s!=null){let H=Zx(s.shape,h);H!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:H}}),C.push(s))}if(n!=null){let H=Zx(n.shape,h);H!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:H}}),C.push(n))}let S=Q({inputs:{x:t},backend:o,attrs:{shape:[1,d,y.sizeFromShape(t.shape)/d]}});C.push(S);let k=new Yx(x,e),E=[r.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]],A=o.runWebGLProgram(k,[r],"float32",E),D=Q({inputs:{x:A},backend:o,attrs:{shape:x}});C.push(A),C.push(D);let O=n!=null,M=s!=null,B=a==="leakyrelu",V=a?Yi(a,!0):null,U=new Cp(h?D.shape:S.shape,h?S.shape:D.shape,h?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],b,w,O,V,M,B),G=h?[D,S]:[S,D];if(n&&G.push(n),M&&G.push(s),B){let H=o.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));G.push(H),C.push(H)}let W=o.runWebGLProgram(U,G,"float32"),j=Q({inputs:{x:W},backend:o,attrs:{shape:e.outShape}});C.push(W);for(let H of C)o.disposeIntermediateTensorInfo(H);return j}function E5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=Qx({x:n,filter:s,convInfo:m,backend:e});else if(m.strideWidth<=2&&p==="channelsLast"&&P().getBool("WEBGL_EXP_CONV")){let d=new vp(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];f=e.runWebGLProgram(d,[n,s],"float32",g)}else if(P().getBool("WEBGL_CONV_IM2COL"))f=Jx({x:n,filter:s,convInfo:m,backend:e});else{let d=new Sp(m);f=e.runWebGLProgram(d,[n,s],"float32")}let h=Q({inputs:{x:f},backend:e,attrs:{shape:m.outShape}});return e.disposeIntermediateTensorInfo(f),h}var wF={kernelName:us,backendName:"webgl",kernelFunc:E5};var ty=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},ey=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dataFormat==="channelsLast",a=e-1-t.padInfo.top,l=o-1-t.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},ry=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},oy=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=e-1-t.padInfo.front,u=o-1-t.padInfo.top,c=n-1-t.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function $5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new ty(m);return e.runWebGLProgram(f,[n,s],"float32")}var CF={kernelName:Au,backendName:"webgl",kernelFunc:$5};function A5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(u),m=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=new ey(m);return e.runWebGLProgram(f,[n,s],"float32")}var IF={kernelName:cs,backendName:"webgl",kernelFunc:A5};function D5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=I.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new Xx(u);return e.runWebGLProgram(c,[n,s],"float32")}var SF={kernelName:ca,backendName:"webgl",kernelFunc:D5};function R5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o,u=I.computeConv3DInfo(n.shape,l,i,1,a),c=new ry(u);return e.runWebGLProgram(c,[n,s],"float32")}var vF={kernelName:Du,backendName:"webgl",kernelFunc:R5};function F5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o,u=I.computeConv3DInfo(l,s.shape,a,1,i),c=new oy(u);return e.runWebGLProgram(c,[n,s],"float32")}var kF={kernelName:Ru,backendName:"webgl",kernelFunc:F5};var _5=nn+`
  return cos(x);
`,O5=dt({opSnippet:_5}),TF={kernelName:gn,backendName:"webgl",kernelFunc:O5};var P5=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,L5=dt({opSnippet:P5}),NF={kernelName:xn,backendName:"webgl",kernelFunc:L5};var ny=class{constructor(t,e,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=t,[c]=e,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[h,d]=[`${a-1}.0`,`${l-1}.0`],[g,x,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[w,C,S]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${d} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${d}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${C};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${S};
        if( in_x < 0.0 || in_x > ${d} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var z5=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new ny(n.shape,s.shape,a,l,u);return e.runWebGLProgram(c,[n,s,i],"float32")},EF={kernelName:ma,backendName:"webgl",kernelFunc:z5};var cu;(function(r){r.Prod="*",r.Sum="+"})(cu||(cu={}));var gh=class{constructor(t,e,o,n){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===cu.Prod?"1.0":"0.0",a=o?i:`getX(${$F(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Dt(s)} coords = getOutputCoords();
        int end = ${AF(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${AF(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${$F(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function $F(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function AF(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function sy(r,t,e,o,n,s){let i=t.shape.length,a=I.getAxesPermutation([o],i),l=t;a!=null&&(l=ge({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=I.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=Re({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new gh(r,l.shape,!1,s),h=[[m]],d=p;p=e.runWebGLProgram(f,[p],p.dtype,h),e.disposeIntermediateTensorInfo(d)}if(n){let m=new gh(r,l.shape,n,s),f=p;p=e.runWebGLProgram(m,[p],p.dtype),e.disposeIntermediateTensorInfo(f)}if(a!=null){let m=I.getUndoAxesPermutation(a),f=ge({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(l),f}return p}function M5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return sy(cu.Prod,n,e,s,i,a)}var DF={kernelName:pa,backendName:"webgl",kernelFunc:M5};function B5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return sy(cu.Sum,n,e,s,i,a)}var RF={kernelName:ps,backendName:"webgl",kernelFunc:B5};function V5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=wx(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=wD(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var FF={kernelName:Oh,backendName:"webgl",kernelFunc:V5};var iy=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function G5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],d=new iy(h,s,i);return e.runWebGLProgram(d,[n],n.dtype)}var _F={kernelName:fa,backendName:"webgl",kernelFunc:G5};var kp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=ne(this.outputShape.length);let i=t.filterHeight,a=t.filterWidth,l=t.outChannels/t.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var Tp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=ne(this.outputShape.length);let i=t.outChannels/t.inChannels,a=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,p=t.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<p;x++)f+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<p;x++)f+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let w=a%2===0?y.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:f+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):w===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let h="",d="";o&&(n?h=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?h=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:h=`vec4 activation(vec4 x) {
          ${o}
        }`,d="result = activation(result);");let g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${d}
        setOutput(result);
      }
    `}};function U5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=I.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;P().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new Tp(p):m=new kp(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return e.runWebGLProgram(m,[n,s],"float32",f)}var OF={kernelName:ms,backendName:"webgl",kernelFunc:U5};var ay=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},ly=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,a=o-1-t.padInfo.left,l=t.outChannels/t.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function W5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=I.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new ay(p);return e.runWebGLProgram(m,[n,s],"float32")}var PF={kernelName:Fu,backendName:"webgl",kernelFunc:W5};function H5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=I.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new ly(p);return e.runWebGLProgram(m,[n,s],"float32")}var LF={kernelName:_u,backendName:"webgl",kernelFunc:H5};var uy=class{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function K5(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),i=Q({inputs:{x:o},backend:e,attrs:{shape:[s]}}),a=new uy(s),l=e.runWebGLProgram(a,[i],i.dtype),u=Q({inputs:{x:l},backend:e,attrs:{shape:n}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}var zF={kernelName:Ph,backendName:"webgl",kernelFunc:K5};var cy=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let{inHeight:e,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function q5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=I.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new cy(u);c=e.runWebGLProgram(p,[n,s],"float32");let m=Q({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),m}var MF={kernelName:ha,backendName:"webgl",kernelFunc:q5};function j5(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[g]),w;I.isIdentityPermutation(x)?w=s[g]:(w=ge({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let S=0;S<b.length;++S)C.splice(b[S],0,1);y.arraysEqual(w.shape,C)||(w=Q({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=hh({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=au({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var BF={kernelName:Ou,backendName:"webgl",kernelFunc:j5};var X5="return (x >= 0.0) ? x : (exp(x) - 1.0);",Y5=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,Z5=dt({opSnippet:X5,packedOpSnippet:Y5}),VF={kernelName:bn,backendName:"webgl",kernelFunc:Z5};var Q5="return (b >= 1.0) ? a : a * (b + 1.0);",J5=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,tY=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=P().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new on(J5,o.shape,n.shape):new Ao(Q5,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],o.dtype)},GF={kernelName:Pu,backendName:"webgl",kernelFunc:tY};var eY=`
  return vec4(equal(a, b));
`,rY="return float(a == b);",oY=qt({opSnippet:rY,packedOpSnippet:eY,dtype:"bool",cpuKernelImpl:vD}),UF={kernelName:wn,backendName:"webgl",kernelFunc:oY};var nY=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${I.ERF_P};
  float a1 = ${I.ERF_A1};
  float a2 = ${I.ERF_A2};
  float a3 = ${I.ERF_A3};
  float a4 = ${I.ERF_A4};
  float a5 = ${I.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,sY=dt({opSnippet:nY}),WF={kernelName:pi,backendName:"webgl",kernelFunc:sY};var iY=nn+`
  return exp(x);
`,aY=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,$I=dt({opSnippet:iY,packedOpSnippet:aY,cpuKernelImpl:kD,dtype:"float32"}),HF={kernelName:no,backendName:"webgl",kernelFunc:$I};function py(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),Q({inputs:{x:s},backend:o,attrs:{shape:a}})}var KF={kernelName:fs,backendName:"webgl",kernelFunc:py};var qF="return exp(x) - 1.0;",lY=dt({opSnippet:qF,packedOpSnippet:qF,cpuKernelImpl:TD}),jF={kernelName:so,backendName:"webgl",kernelFunc:lY};var xh=class{constructor(t,e,o){this.variableNames=["real","imag"];let n=e[1];this.outputShape=e;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(t==="real")a="return real * expR - imag * expI;";else if(t==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function my(r,t,e){let o=e.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=Q({inputs:{x:r},backend:e,attrs:{shape:[i,s]}}),l=a.shape,u=new xh("real",l,t),c=new xh("imag",l,t),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Mr({inputs:{real:m,imag:f},backend:e});e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f);let d=Q({inputs:{x:h},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(h),d}function uY(r){let{inputs:t,backend:e}=r,{input:o}=t;return my(o,!1,e)}var XF={kernelName:Lu,backendName:"webgl",kernelFunc:uY};var fy=class{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Qi(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new fy(o,n),a=[[n]];return t.runWebGLProgram(i,[],s,a)}}var YF={kernelName:da,backendName:"webgl",kernelFunc:Qi};var hy=class{constructor(t){this.variableNames=["Image"],this.outputShape=[];let e=t[2];this.outputShape=t,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var ZF={kernelName:ga,backendName:"webgl",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new hy(e.shape);return o.runWebGLProgram(n,[e],e.dtype)}};var QF="return floor(x);",cY=dt({opSnippet:QF,packedOpSnippet:QF,cpuKernelImpl:ND}),JF={kernelName:io,backendName:"webgl",kernelFunc:cY};var pY=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,mY=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,fY=qt({opSnippet:pY,packedOpSnippet:mY,dtype:"int32"}),t_={kernelName:Cn,backendName:"webgl",kernelFunc:fY};var dy=class{constructor(t){this.variableNames=["A"];let e=Ie(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var gy=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let e=Ie(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `}};var e_={kernelName:cl,backendName:"webgl",kernelFunc:hY},Np,AI=P().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function hY(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o,i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];if(a||i){let d=P().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(Np==null||d!==AI)&&(AI=d,Np=document.createElement("canvas").getContext("2d",{willReadFrequently:AI})),Np.canvas.width=l,Np.canvas.height=u,Np.drawImage(n,0,0,l,u),n=Np.canvas}let m=e.makeTensorInfo(c,"int32");e.texData.get(m.dataId).usage=pr.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId),n);let f=P().getBool("WEBGL_PACK")?new gy(p):new dy(p),h=e.runWebGLProgram(f,[m],"int32");return e.disposeData(m.dataId),h}function dY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=I.convertConv2DDataFormat(c),g=I.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,d),x,b=[],w=i!=null,C=a!=null,S=f==="leakyrelu",k=()=>{let A=[n,s],D=(O,M)=>{if(M==="NCHW"&&O.shape.length===1&&O.shape[0]!==1){let B=Q({inputs:{x:O},backend:e,attrs:{shape:[O.shape[0],1,1]}});return b.push(B),B}return O};if(w&&A.push(D(i,c)),C&&A.push(D(a,c)),S){let O=e.makeTensorInfo([],"float32",y.createScalarValue(h,"float32"));A.push(O),b.push(O)}return A};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=Qx({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else if(g.strideWidth<=2&&d==="channelsLast"&&P().getBool("WEBGL_EXP_CONV")){let A=f?Yi(f,!0):null,D=new vp(g,w,A,C,S),O=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],M=k();x=e.runWebGLProgram(D,M,"float32",O)}else if(P().getBool("WEBGL_CONV_IM2COL"))x=Jx({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else{let A=f?Yi(f,!1):null,D=new Sp(g,w,A,C,S),O=k();x=e.runWebGLProgram(D,O,"float32")}let E=Q({inputs:{x},backend:e,attrs:{shape:g.outShape}});return b.push(x),b.forEach(A=>e.disposeIntermediateTensorInfo(A)),E}var r_={kernelName:Ti,backendName:"webgl",kernelFunc:dY};function gY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=[],d=c;d==null&&(d=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(l,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${d}'`);let g=I.computeConv2DInfo(n.shape,s.shape,l,d,u,p,!0),x=P().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Yi(m,x):null,w=[n,s],C=i!=null,S=a!=null,k=m==="leakyrelu";if(C&&w.push(i),S&&w.push(a),k){let O=e.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));w.push(O),h.push(O)}let E;x?E=new Tp(g,C,b,S,k):E=new kp(g,C,b,S,k);let A=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],D=e.runWebGLProgram(E,w,"float32",A);return h.forEach(O=>e.disposeIntermediateTensorInfo(O)),D}var o_={kernelName:Ni,backendName:"webgl",kernelFunc:gY};var xy=class{constructor(t,e,o,n){this.sliceDim=t,this.strides=e,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=Dt(e.length),i=Dt(o.length),a=this.sliceDim>1?"strides[j]":"strides",l=Dt(n.length),u=n.length>1?"paramsShape[j]":"paramsShape";this.userCode=`
        ${s} strides = ${s}(${this.strides});
        ${l} paramsShape = ${l}(${this.paramsShape});
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            out_of_bounds = out_of_bounds || index < 0;
            out_of_bounds = out_of_bounds || index >= ${u};
            flattenIndex += index * ${a};
          }
          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function xY(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=I.prepareAndValidate(o,n),m=Q({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=Q({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=e.readSync(n.dataId),b=e.bufferSync(o),w=ED(x,b,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,w.values)}let h=new xy(i,p,[u,c],o.shape),d=e.runWebGLProgram(h,[f,m],f.dtype),g=Q({inputs:{x:d},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(d),g}var n_={kernelName:zu,backendName:"webgl",kernelFunc:xY};var yy=class{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;let o=Dt(this.rank),n=yY(t,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function yY(r,t){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${e[n]}`);return o.join()}function DI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0];if(P().get("DEBUG")){let b=e.readSync(s.dataId),w=n.shape[l];for(let C=0;C<b.length;++C){let S=b[C];y.assert(S<=w-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${w-1}]`)}}let u=I.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=Q({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=Q({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=e.bufferSync(f),w=e.bufferSync(m),C=$D(w,b,h);return p.forEach(S=>e.disposeIntermediateTensorInfo(S)),e.makeTensorInfo(u.outputShape,C.dtype,C.values)}let d=new yy(m.shape,h),g=e.runWebGLProgram(d,[m,f],m.dtype);p.push(g);let x=Q({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}var s_={kernelName:ds,backendName:"webgl",kernelFunc:DI};var bY="return float(a > b);",wY=`
  return vec4(greaterThan(a, b));
`,CY=qt({opSnippet:bY,packedOpSnippet:wY,cpuKernelImpl:AD,dtype:"bool"}),i_={kernelName:In,backendName:"webgl",kernelFunc:CY};var IY="return float(a >= b);",SY=`
  return vec4(greaterThanEqual(a, b));
`,vY=qt({opSnippet:IY,packedOpSnippet:SY,dtype:"bool",cpuKernelImpl:DD}),a_={kernelName:ao,backendName:"webgl",kernelFunc:vY};function kY(r){let{inputs:t,backend:e}=r,{input:o}=t;return my(o,!0,e)}var l_={kernelName:Mu,backendName:"webgl",kernelFunc:kY};var TY="return float(!isnan(x) && !isinf(x));",NY=dt({opSnippet:TY,dtype:"bool"}),u_={kernelName:mi,backendName:"webgl",kernelFunc:NY};var EY="return float(isinf(x));",$Y=dt({opSnippet:EY,dtype:"bool"}),c_={kernelName:fi,backendName:"webgl",kernelFunc:$Y};var AY="return float(isnan(x));",DY=dt({opSnippet:AY,dtype:"bool"}),p_={kernelName:Sn,backendName:"webgl",kernelFunc:DY};var RY="return float(a < b);",FY=`
  return vec4(lessThan(a, b));
`,_Y=qt({opSnippet:RY,packedOpSnippet:FY,cpuKernelImpl:RD,dtype:"bool"}),m_={kernelName:vn,backendName:"webgl",kernelFunc:_Y};var OY="return float(a <= b);",PY=`
  return vec4(lessThanEqual(a, b));
`,LY=qt({opSnippet:OY,packedOpSnippet:PY,cpuKernelImpl:FD,dtype:"bool"}),f_={kernelName:kn,backendName:"webgl",kernelFunc:LY};function zY(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=_D(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var h_={kernelName:Lh,backendName:"webgl",kernelFunc:zY};var MY=nn+`
  return x < 0.0 ? 0./0. : log(x);
`,BY=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,VY=dt({opSnippet:MY,packedOpSnippet:BY,cpuKernelImpl:OD}),d_={kernelName:uo,backendName:"webgl",kernelFunc:VY};var GY=nn+`
  return log(1.0 + x);
`,UY=dt({opSnippet:GY}),g_={kernelName:hi,backendName:"webgl",kernelFunc:UY};var WY="return float(a >= 1.0 && b >= 1.0);",HY=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,KY=qt({opSnippet:WY,packedOpSnippet:HY,dtype:"bool"}),x_={kernelName:di,backendName:"webgl",kernelFunc:KY};var qY="return float(!(x >= 1.0));",jY=dt({opSnippet:qY}),y_={kernelName:gi,backendName:"webgl",kernelFunc:jY};var XY="return float(a >= 1.0 || b >= 1.0);",YY=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,ZY=qt({opSnippet:XY,packedOpSnippet:YY,dtype:"bool"}),b_={kernelName:ul,backendName:"webgl",kernelFunc:ZY};var by=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var wy=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var QY=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=P().getBool("WEBGL_PACK_NORMALIZATION")?new wy(n.shape,s,i,a,l):new by(n.shape,s,i,a,l);return e.runWebGLProgram(u,[n],n.dtype)},w_={kernelName:ya,backendName:"webgl",kernelFunc:QY};var Cy=class{constructor(t,e,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var JY=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new Cy(n.shape,a,l,u,c);return e.runWebGLProgram(p,[n,s,i],n.dtype)},C_={kernelName:Bu,backendName:"webgl",kernelFunc:JY};function I_(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=Qr(a,r.dtype,"max",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function RI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=c!=null,m=e.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let w=e.texData.get(f.dataId).values,C=new Array(a);for(let E=0;E<C.length;E++)C[E]=n.shape[c[E]];let S=nu(w,n.shape,n.dtype,c,C);f=e.makeTensorInfo(C,n.dtype);let k=e.texData.get(f.dataId);k.values=S}else f=Ja(n,c,e);u=I.getInnerMostAxes(u.length,a)}I.assertAxesAreInnerMostDims("max",u,a);let[h,d]=I.computeOutAndReduceShapes(f.shape,u),g=h;i&&(g=I.expandShapeToKeepDim(h,l));let x;if(m){let w=e.texData.get(f.dataId).values,C=PD(w,y.sizeFromShape(d),g,n.dtype);x=e.makeTensorInfo(g,n.dtype);let S=e.texData.get(x.dataId);S.values=C}else x=I_(f,d,g,e);return p&&e.disposeIntermediateTensorInfo(f),x}var S_={kernelName:xs,backendName:"webgl",kernelFunc:RI};var t8=Nx+`
  return max(a, b);
`,e8=`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+Qa+`
  return result;
`,r8=qt({opSnippet:t8,packedOpSnippet:e8,cpuKernelImpl:LD}),v_={kernelName:co,backendName:"webgl",kernelFunc:r8};function o8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Qs(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Re({inputs:{x:n},backend:e});let p=new Yn(c,"max",!1);return e.runWebGLProgram(p,[n],n.dtype)}var k_={kernelName:ys,backendName:"webgl",kernelFunc:o8};function n8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=I.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new tl(p,"max",!1);return e.runWebGLProgram(m,[n],n.dtype)}var T_={kernelName:ba,backendName:"webgl",kernelFunc:n8};var Iy=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideHeight,o=t.strideWidth,n=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=s-1-t.padInfo.top,l=i-1-t.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},Sy=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,p=l-1-t.padInfo.front,m=u-1-t.padInfo.top,f=c-1-t.padInfo.left,h=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function s8(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=I.computePool3DInfo(i.shape,a,l,p,u,c),f=new tl(m,"max",!0),h=e.runWebGLProgram(f,[i],i.dtype),d=new Sy(m),g=e.runWebGLProgram(d,[n,h],i.dtype);return e.disposeIntermediateTensorInfo(h),g}var N_={kernelName:Gu,backendName:"webgl",kernelFunc:s8};function i8(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Qs([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=I.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,h=new Yn(m,"max",f),d=e.runWebGLProgram(h,[a],a.dtype),g=new Iy(m),x=e.runWebGLProgram(g,[n,d],a.dtype);return e.disposeIntermediateTensorInfo(d),x}var E_={kernelName:Vu,backendName:"webgl",kernelFunc:i8};function $_(r,t,e,o){let n=new Yn(e,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new Yn(e,"max",!0,!0,t);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var A_={kernelName:zh,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(I.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=I.computePool2DInfo(o.shape,n,s,u,i),[p,m]=$_(o,a,c,l);return[p,m]}};function D_(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=Qr(a,"float32","mean",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var R_={kernelName:bs,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{keepDims:n,axis:s}=t,i=e,a=o.shape.length,l=y.parseAxisParam(s,o.shape),u=l,c=I.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],h=o;if(p){if(m){let C=i.texData.get(h.dataId).values,S=new Array(a);for(let A=0;A<S.length;A++)S[A]=o.shape[c[A]];let k=nu(C,o.shape,o.dtype,c,S);h=i.makeTensorInfo(S,o.dtype);let E=i.texData.get(h.dataId);E.values=k}else h=Ja(o,c,i);f.push(h),u=I.getInnerMostAxes(u.length,a)}I.assertAxesAreInnerMostDims("sum",u,a);let[d,g]=I.computeOutAndReduceShapes(h.shape,u),x=d;n&&(x=I.expandShapeToKeepDim(d,l));let b=D_(h,g,x,i);for(let w of f)i.disposeIntermediateTensorInfo(w);return b}};function a8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=ge({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,n.shape.length)),I.assertAxesAreInnerMostDims("min",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Qr(d,d.dtype,"min",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=Q({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var F_={kernelName:ws,backendName:"webgl",kernelFunc:a8};var l8=Nx+`
  return min(a, b);
`,u8=`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+Qa+`
  return result;
`,c8=qt({opSnippet:l8,packedOpSnippet:u8,cpuKernelImpl:zD}),__={kernelName:po,backendName:"webgl",kernelFunc:c8};var vy=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=e.map((c,p)=>c[0]+t[p]+c[1]);let n=t.length,s=Dt(n),i=e.map(c=>c[0]).join(","),a=e.map((c,p)=>c[0]+t[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var ky=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((h,d)=>h[0]+t[d]+h[1]);let n=t.length,s=Dt(n),i=e.map(h=>h[0]).join(","),a=e.map((h,d)=>h[0]+t[d]).join(","),l=De("rc",n),u=De("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let h=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let h=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${h}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${h}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var p8=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{paddings:n,mode:s}=e,i=P().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ky(o.shape,n,s):new vy(o.shape,n,s);return t.runWebGLProgram(i,[o],o.dtype)},O_={kernelName:Cs,backendName:"webgl",kernelFunc:p8};var m8=`if (b == 0.0) return NAN;
  return mod(a, b);`,f8=`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  `+Qa+`
  return result;
`,h8=qt({opSnippet:m8,packedOpSnippet:f8}),P_={kernelName:xi,backendName:"webgl",kernelFunc:h8};var Ty=class{constructor(t,e,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e-1}));
      }
    `}};var d8=`
if (a == b) {
  return 1.0;
};
return a / b;`,g8=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,FI=qt({opSnippet:d8,packedOpSnippet:g8,checkOutOfBounds:!0}),L_={kernelName:yn,backendName:"webgl",kernelFunc:FI};var z_="return a - b;",_I=qt({opSnippet:z_,packedOpSnippet:z_,supportsComplex:!0,cpuKernelImpl:rR}),M_={kernelName:yo,backendName:"webgl",kernelFunc:_I};function OI(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=RI({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=I.expandShapeToKeepDim(a.shape,i),u=Q({inputs:{x:a},backend:e,attrs:{shape:l}}),c=_I({inputs:{a:n,b:u},backend:e}),p=$I({inputs:{x:c},backend:e}),m=au({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=Q({inputs:{x:m},backend:e,attrs:{shape:l}}),h=FI({inputs:{a:p,b:f},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}var B_={kernelName:Fs,backendName:"webgl",kernelFunc:OI};function x8(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o,l=a?n:OI({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new Ty(u,c,s),m=[[i]],f=e.runWebGLProgram(p,[l],"int32",m);return a||e.disposeIntermediateTensorInfo(l),f}var V_={kernelName:Mh,backendName:"webgl",kernelFunc:x8};var y8=We+`
  return -x;
`,b8=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function w8(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.texData.get(o.dataId),[i,a]=BD(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n;return P().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new $o(o.shape,b8):n=new yr(o.shape,y8),e.runWebGLProgram(n,[o],o.dtype)}var G_={kernelName:Tn,backendName:"webgl",kernelFunc:w8};var C8=Ue.nonMaxSuppressionV3Impl;function I8(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=C8(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var U_={kernelName:wa,backendName:"webgl",kernelFunc:I8};var S8=Ue.nonMaxSuppressionV4Impl;function v8(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=S8(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var W_={kernelName:Uu,backendName:"webgl",kernelFunc:v8};var k8=Ue.nonMaxSuppressionV5Impl;function T8(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=k8(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var H_={kernelName:Ca,backendName:"webgl",kernelFunc:T8};var Ny=class{constructor(t,e,o,n){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var N8=r=>{let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o,u=y.sizeFromShape(n.shape),c=new Ny(u,i,a,l),p=Q({inputs:{x:n},backend:e,attrs:{shape:[u]}}),m=e.runWebGLProgram(c,[p],s);e.disposeIntermediateTensorInfo(p);let f=[...n.shape,i],h=Q({inputs:{x:m},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(m),h},K_={kernelName:Ia,backendName:"webgl",kernelFunc:N8};function yh(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=Zi({inputs:{input:o},backend:e}),s=yh({inputs:{x:n},backend:e}),i=uu({inputs:{input:o},backend:e}),a=yh({inputs:{x:i},backend:e}),l=Mr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Qi({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var q_={kernelName:Os,backendName:"webgl",kernelFunc:yh};function j_(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Zi({inputs:{input:o},backend:e}),s=j_({inputs:{x:n},backend:e}),i=uu({inputs:{input:o},backend:e}),a=yh({inputs:{x:i},backend:e}),l=Mr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Qi({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var X_={kernelName:Is,backendName:"webgl",kernelFunc:j_};function E8(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return py({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=py({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=EI({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var Y_={kernelName:Ss,backendName:"webgl",kernelFunc:E8};var Ey=class{constructor(t,e,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);let n=t.length,s=Dt(n),i=e.map(u=>u[0]).join(","),a=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var $y=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((d,g)=>d[0]+t[g]+d[1]);let n=t.length,s=Dt(n),i=e.map(d=>d[0]).join(","),a=e.map((d,g)=>d[0]+t[g]).join(","),l=De("rc",n),u=De("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",h="";for(let d=0,g=n===1?2:4;d<g;d++)h+=`
        ${m[d]}
        if (${f}) {
          result[${d}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${d}] = getChannel(getX(${u.join()}), ${p});
        }
      `;h+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `}};var PI=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Qi({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=P().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $y(n.shape,s,i):new Ey(n.shape,s,i),l=[[i]];return e.runWebGLProgram(a,[n],n.dtype,l)},Z_={kernelName:vs,backendName:"webgl",kernelFunc:PI};var $8=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,A8=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  `+Qa+`
  return result;
`,D8=qt({opSnippet:$8,packedOpSnippet:A8}),Q_={kernelName:En,backendName:"webgl",kernelFunc:D8};function R8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=y.parseAxisParam(s,n.shape),c=u,p=I.getAxesPermutation(c,a),m=n;p!=null&&(m=ge({inputs:{x:n},backend:e,attrs:{perm:p}}),c=I.getInnerMostAxes(c.length,a),l.push(m)),I.assertAxesAreInnerMostDims("prod",c,a);let f;if(e.shouldExecuteOnCPU([m])){let h=e.texData.get(m.dataId).values,{outVals:d,outShape:g,outDtype:x}=GD(m.shape,m.dtype,h,c);f=e.makeTensorInfo(g,x,d)}else{let[h,d]=I.computeOutAndReduceShapes(m.shape,c),g=y.sizeFromShape(d),x=Q({inputs:{x:m},backend:e,attrs:{shape:[-1,g]}}),b=$i(n.dtype),w=Qr(x,b,"prod",e);f=Q({inputs:{x:w},backend:e,attrs:{shape:h}}),l.push(x),l.push(w)}if(i){l.push(f);let h=I.expandShapeToKeepDim(f.shape,u);f=Q({inputs:{x:f},backend:e,attrs:{shape:h}})}return l.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var J_={kernelName:$n,backendName:"webgl",kernelFunc:R8};function F8(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),p=e.readSync(i.dataId),m=a.map(g=>e.readSync(g.dataId)),f=a.map(g=>g.shape),[h,d]=UD(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,d)}var tO={kernelName:Bh,backendName:"webgl",kernelFunc:F8};var LI=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=WD(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},eO={kernelName:Sa,backendName:"webgl",kernelFunc:LI};var _8="return 1.0 / x;",O8=dt({opSnippet:_8}),rO={kernelName:An,backendName:"webgl",kernelFunc:O8};var P8=We+`
  return (x < 0.0) ? 0.0 : x;
`,L8=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,z8=dt({opSnippet:P8,packedOpSnippet:L8}),oO={kernelName:Dn,backendName:"webgl",kernelFunc:z8};var M8=We+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,B8=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,V8=dt({opSnippet:M8,packedOpSnippet:B8}),nO={kernelName:Rn,backendName:"webgl",kernelFunc:V8};var Ay=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var Dy=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function G8(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=P().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Dy(n.shape,l,u,s,i):new Ay(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],"float32")}var sO={kernelName:Es,backendName:"webgl",kernelFunc:G8};var Ry=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function U8(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new Ry(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var iO={kernelName:Hu,backendName:"webgl",kernelFunc:U8};var Fy=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var _y=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function W8(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=P().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new _y(n.shape,l,u,s,i):new Fy(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],n.dtype)}var aO={kernelName:Ns,backendName:"webgl",kernelFunc:W8};var Oy=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function H8(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new Oy(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var lO={kernelName:Wu,backendName:"webgl",kernelFunc:H8};var Py=class{constructor(t,e){this.variableNames=["x"];let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=t,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;return}let n=a=>e.indexOf(a)!==-1&&t[a]!==1?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`,s=t.map((a,l)=>n(l)).join(","),i=Dt(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var Ly=class{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=t;let n=De("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=Dt(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(h){return m(h)}function u(h){return h[o-1]="("+h[o-1]+" + 1)",m(h)}function c(h){return h[o-2]="("+h[o-2]+" + 1)",m(h)}function p(h){return h[o-1]="("+h[o-1]+" + 1)",h[o-2]="("+h[o-2]+" + 1)",m(h)}function m(h){let d=t.map((b,w)=>f(w,h)),g=d.join(","),x=d.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function f(h,d){return e.indexOf(h)!==-1&&t[h]!==1?`${t[h]} - ${d[h]} - 1`:`${d[h]}`}}};function K8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Re({inputs:{x:n},backend:e});let l=P().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ly(n.shape,a):new Py(n.shape,a);return e.runWebGLProgram(l,[n],n.dtype)}var uO={kernelName:va,backendName:"webgl",kernelFunc:K8};var zy=class{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=t[1],n=t[2];this.outputShape=t;let s="";typeof e=="number"?s=`float outputValue = ${e.toFixed(2)};`:s=`
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var cO={kernelName:Aa,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new zy(o.shape,s),[u,c]=I.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var q8=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,j8=dt({opSnippet:q8}),pO={kernelName:bi,backendName:"webgl",kernelFunc:j8};var X8="return inversesqrt(x);",Y8=dt({opSnippet:X8,cpuKernelImpl:HD}),mO={kernelName:fo,backendName:"webgl",kernelFunc:Y8};var Ep=class{constructor(t,e,o,n,s,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=Dt(s.length),u=Dt(i.length),c="";o===1?c="i":o===2&&(c="i, j");let p=`getIndices(${c})`,m="";n===1?m="i":n===2&&(m="i, coords[1]");let f=`getUpdates(${m})`,h=e>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${h};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}};function Z8(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=Q({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=Q({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),d=e.makeTensorInfo([],"float32",new Float32Array([0])),g=new Ep(l,a,f.shape.length,h.shape.length,c,m),x=e.runWebGLProgram(g,[h,f,d],h.dtype),b=Q({inputs:{x},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(d),b}var fO={kernelName:Ku,backendName:"webgl",kernelFunc:Z8};var My=class{constructor(t,e,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=P().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function Q8(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=new My(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return e.runWebGLProgram(a,[n,s],"int32",l)}var hO={kernelName:Vh,backendName:"webgl",kernelFunc:Q8};var By=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.outputShape=e;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${a[c]}`),c<t&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=Dt(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function J8(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new By(o.shape.length,n.shape,n.shape.length);return e.runWebGLProgram(i,[o,n,s],Qt(n.dtype,s.dtype))}var dO={kernelName:$s,backendName:"webgl",kernelFunc:J8};var tZ=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${I.SELU_SCALEALPHA};
  float scale = ${I.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,eZ=dt({opSnippet:tZ}),gO={kernelName:wi,backendName:"webgl",kernelFunc:eZ};var rZ=nn+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,oZ=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,nZ=dt({opSnippet:rZ,packedOpSnippet:oZ,cpuKernelImpl:qD}),xO={kernelName:ho,backendName:"webgl",kernelFunc:nZ};var sZ=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,iZ=dt({opSnippet:sZ}),yO={kernelName:Ci,backendName:"webgl",kernelFunc:iZ};var aZ=nn+`
  return sin(x);
`,lZ=dt({opSnippet:aZ}),bO={kernelName:_n,backendName:"webgl",kernelFunc:lZ};var uZ=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,cZ=dt({opSnippet:uZ}),wO={kernelName:On,backendName:"webgl",kernelFunc:cZ};var pZ=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,mZ=dt({opSnippet:pZ}),CO={kernelName:Ii,backendName:"webgl",kernelFunc:mZ};var fZ=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=PI({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=I.getReshaped(c.shape,s,a,!1),m=I.getPermuted(p.length,s.length,!1),f=I.getReshapedPermuted(c.shape,s,a,!1),h=Q({inputs:{x:c},backend:e,attrs:{shape:p}}),d=ge({inputs:{x:h},backend:e,attrs:{perm:m}}),g=Q({inputs:{x:d},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(d),u.forEach(x=>e.disposeIntermediateTensorInfo(x)),g},IO={kernelName:Ds,backendName:"webgl",kernelFunc:fZ};function hZ(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.readSync(o.dataId),l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=e.readSync(i.dataId)[0],[p,m,f,h,d]=XD(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var SO={kernelName:Gh,backendName:"webgl",kernelFunc:hZ};function dZ(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.readSync(n.dataId)),a=e.readSync(o.dataId),l=Array.from(e.readSync(s.dataId)),[u,c,p]=YD(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var vO={kernelName:Uh,backendName:"webgl",kernelFunc:dZ};function gZ(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=Ix(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var kO={kernelName:Wh,backendName:"webgl",kernelFunc:gZ};function xZ(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=Ix(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var TO={kernelName:Hh,backendName:"webgl",kernelFunc:xZ};function yZ(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let x=e.bufferSync(n),b=e.bufferSync(s),w=y.decodeString(e.readSync(i.dataId)[0]),C=KD(x,b,a,m,c,u,l,p,w,f);return e.makeTensorInfo(a,C.dtype,C.values)}let h=new Ep(u,l,n.shape.length,s.shape.length,p,[m,1],f),d=e.runWebGLProgram(h,[s,n,i],s.dtype),g=Q({inputs:{x:d},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(d),g}var NO={kernelName:qu,backendName:"webgl",kernelFunc:yZ};function bZ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=Zn({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var EO={kernelName:Rs,backendName:"webgl",kernelFunc:bZ};var $O="return sqrt(x);",wZ=dt({opSnippet:$O,packedOpSnippet:$O,cpuKernelImpl:ZD}),AO={kernelName:go,backendName:"webgl",kernelFunc:wZ};var CZ="return x * x;",IZ=dt({opSnippet:CZ}),DO={kernelName:ka,backendName:"webgl",kernelFunc:IZ};var RO="return (a - b) * (a - b);",SZ=qt({opSnippet:RO,packedOpSnippet:RO}),FO={kernelName:xo,backendName:"webgl",kernelFunc:SZ};function vZ({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=We+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new yr(o.shape,n);return e.runWebGLProgram(s,[o],o.dtype)}var _O={kernelName:vi,backendName:"webgl",kernelFunc:vZ};var Vy=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=Dt(o.length),i=Dt(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${t});
      ${s} strides = ${s}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function kZ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=me.sliceInfo(n.shape,s,i,a,l,u,c,p,m),S;if(d)S=Q({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let E=me.computeOutShape(b,w,C),A=Zn({inputs:{x:n},backend:e,attrs:{begin:b,size:E}});S=Q({inputs:{x:A},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(A)}else if(e.shouldExecuteOnCPU([n])){let A=e.readSync(n.dataId),D=et(n.shape,n.dtype,A),O=QD(f,D,C,b);S=e.makeTensorInfo(h,n.dtype,O.values)}else{let A=new Vy(b,C,f);S=e.runWebGLProgram(A,[n],n.dtype)}let k=Q({inputs:{x:S},backend:e,attrs:{shape:h}});return e.disposeIntermediateTensorInfo(S),k}var OO={kernelName:Ta,backendName:"webgl",kernelFunc:kZ};function TZ(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,d]=JD(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var PO={kernelName:ju,backendName:"webgl",kernelFunc:TZ};function NZ(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.readSync(s.dataId),l=e.readSync(i.dataId)[0],[u,c,p]=tR(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var LO={kernelName:Kh,backendName:"webgl",kernelFunc:NZ};function EZ(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.readSync(s.dataId),a=eR(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var zO={kernelName:qh,backendName:"webgl",kernelFunc:EZ};var $Z="return tan(x);",AZ=dt({opSnippet:$Z}),MO={kernelName:Si,backendName:"webgl",kernelFunc:AZ};var DZ=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,RZ=dt({opSnippet:DZ}),BO={kernelName:Pn,backendName:"webgl",kernelFunc:RZ};var Gy=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[i]*e[i];this.outputShape=o,this.rank=o.length;let n=Dt(this.rank),s=FZ(t);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function FZ(r){let t=r.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(t===1)return`imod(resRC, ${r[0]})`;let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${e[n]}, ${r[n]})`);return o.join()}function zI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=et(n.shape,n.dtype,u),p=oR(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new Gy(n.shape,s);return e.runWebGLProgram(i,[n],n.dtype)}var VO={kernelName:Ro,backendName:"webgl",kernelFunc:zI};var Uy=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},Wy=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function pu(r,t){t!==null&&r.disposeIntermediateTensorInfo(t)}function GO(r){let t=1;for(;t<r;)t*=2;return t}function _Z(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=P().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=P().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([n])||c<a||s>l){let O=e.readSync(n.dataId),[M,B]=nR(O,u,n.dtype,s,i);return[e.makeTensorInfo(M.shape,M.dtype,M.values),e.makeTensorInfo(B.shape,B.dtype,B.values)]}if(s===0)return u[u.length-1]=0,[e.makeTensorInfo(u,n.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(c===1)return[n,Qi({attrs:{shape:u,dtype:"int32",value:0},backend:e})];let p=e.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?e.unpackTensor(n):n,d=y.sizeFromShape(u)/c,g=Q({inputs:{x:f},attrs:{shape:[d,c]},backend:e});m&&pu(e,f);let x=GO(s),b=GO(c),w=null,C=()=>w===null?[g,g]:[g,w],S=(O,M,B)=>{let V=C(),U=new Uy(B),W=[[c],[w===null?1:0],[Number.NEGATIVE_INFINITY],[O],[M]],j=w;w=e.runWebGLProgram(U,V,"int32",W),pu(e,j)};for(let O=1;O<x;O*=2){let M=O*2;for(let B=O;B>=1;B/=2)S(M,B,[d,b])}for(let O=b;O>x;O/=2){let M=C(),B=new Wy([d,O/2]),U=[[c],[w===null?1:0],[x]],G=w;w=e.runWebGLProgram(B,M,"int32",U),pu(e,G);let W=x/2,j=W*2;for(let H=W;H>=1;H/=2)S(j,H,w.shape)}let k=w;w=Zn({inputs:{x:w},backend:e,attrs:{begin:0,size:[d,s]}}),pu(e,k);let E=DI({inputs:{x:g,indices:w},backend:e,attrs:{axis:1,batchDims:1}});pu(e,g);let A=u.slice(0,-1);A.push(s),k=w,w=Q({inputs:{x:w},attrs:{shape:A},backend:e}),pu(e,k);let D=E;return E=Q({inputs:{x:E},attrs:{shape:A},backend:e}),pu(e,D),[E,w]}var UO={kernelName:Na,backendName:"webgl",kernelFunc:_Z};var Hy=class{constructor(t,e,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function OZ(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=new Hy(p,m,i,a,l,g);return e.runWebGLProgram(x,[n,s],"float32")}var WO={kernelName:Ea,backendName:"webgl",kernelFunc:OZ};function PZ(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Qs(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=sR(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var HO={kernelName:Xu,backendName:"webgl",kernelFunc:PZ};function LZ(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let d=0;d<a;d++)d!==s&&(u[c++]=i.shape[d]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let d=0;d<h.length;d++){m[s]=d;let g=Zn({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),x=Q({inputs:{x:g},backend:e,attrs:{shape:u}});h[d]=x,p.push(g)}return p.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var KO={kernelName:_s,backendName:"webgl",kernelFunc:LZ};var Ky=class{constructor(t,e){this.variableNames=["x","segmentIds"];let o=t.windowSize,n=t.batchSize,s=t.inSize,i=t.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function zZ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=I.getAxesPermutation([u],a),p=n;c!=null&&(p=ge({inputs:{x:n},backend:e,attrs:{perm:c}}),l.push(p),u=I.getInnerMostAxes(1,a)[0]);let m=I.segment_util.computeOutShape(p.shape,u,i),f=y.sizeFromShape([p.shape[u]]),h=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,f]}});l.push(h);let d=$i(n.dtype),g=(C,S,k,E,A)=>{let D=C.shape[0],O=C.shape[1],M=I.segment_util.segOpComputeOptimalWindowSize(O,A),B={windowSize:M,inSize:O,batchSize:D,numSegments:A},V=new Ky(B,S),U=e.compileAndRun(V,[C,k],E);if(l.push(U),U.shape[1]===A)return U;let G=LI({backend:e,attrs:{start:0,stop:A,step:1,dtype:"float32"}}),W=zI({inputs:{x:G},backend:e,attrs:{reps:[O/M]}});return l.push(G),l.push(W),g(U,S,W,E,A)},x=g(h,"unsortedSegmentSum",s,d,i),b=Q({inputs:{x},backend:e,attrs:{shape:m}}),w=b;if(c!=null){l.push(b);let C=I.getUndoAxesPermutation(c);w=ge({inputs:{x:w},backend:e,attrs:{perm:C}})}return l.forEach(C=>e.disposeIntermediateTensorInfo(C)),w}var qO={kernelName:$a,backendName:"webgl",kernelFunc:zZ};var MZ=[_R,PR,LR,zR,BR,VR,GR,UR,KR,qR,jR,XR,YR,ZR,QR,JR,tF,eF,rF,oF,nF,iF,aF,lF,mF,hF,dF,IR,xF,bF,wF,CF,IF,SF,vF,kF,TF,NF,EF,DF,RF,FF,_F,OF,PF,LF,zF,MF,BF,VF,GF,UF,WF,HF,KF,jF,XF,YF,ZF,JF,t_,e_,r_,o_,n_,s_,i_,a_,CR,l_,yF,u_,c_,p_,SR,m_,f_,h_,d_,g_,x_,y_,b_,w_,C_,S_,v_,k_,T_,N_,E_,A_,R_,F_,__,O_,P_,V_,ER,G_,U_,W_,H_,uF,K_,X_,Y_,Z_,Q_,vR,J_,tO,eO,cF,L_,rO,oO,nO,AR,sO,iO,aO,lO,uO,cO,pO,mO,fO,hO,dO,gO,xO,yO,bO,wO,sF,B_,CO,IO,SO,vO,kO,TO,NO,EO,AO,DO,FO,_O,OO,PO,LO,zO,M_,RR,MO,BO,VO,UO,WO,FR,HO,KO,qO,q_];for(let r of MZ)Yu(r);var el=P();el.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15);el.registerFlag("WEBGPU_CPU_FORWARD",()=>!0);el.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1);el.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!1);el.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1);el.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3);el.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1);el.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0);var qy=class{constructor(t){this.device=t,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireUploadBuffer(t,e){return this.acquireBuffer(t,e,!0)}acquireBuffer(t,e,o=!1){let n=jO(t,e);if(this.freeBuffers.has(n)||this.freeBuffers.set(n,[]),this.usedBuffers.has(n)||this.usedBuffers.set(n,[]),this.numBytesUsed+=t,this.numUsedBuffers++,this.freeBuffers.get(n).length>0){this.numFreeBuffers--;let i=this.freeBuffers.get(n).shift();return this.usedBuffers.get(n).push(i),i}this.numBytesAllocated+=t;let s=this.device.createBuffer({size:t,usage:e,mappedAtCreation:o});return this.usedBuffers.get(n).push(s),s}releaseBuffer(t,e,o){if(this.freeBuffers.size===0)return;let n=jO(e,o);this.freeBuffers.has(n)||this.freeBuffers.set(n,[]),this.freeBuffers.get(n).push(t),this.numFreeBuffers++,this.numUsedBuffers--;let s=this.usedBuffers.get(n),i=s.indexOf(t);if(i<0)throw new Error("Cannot release a buffer that was never provided by this buffer manager");s.splice(i,1),this.numBytesUsed-=e}releaseUploadBuffer(t,e,o){t.mapAsync(GPUMapMode.WRITE).then(()=>{this.releaseBuffer(t,e,o)},n=>{})}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.usedBuffers.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function jO(r,t){return`${r}_${t}`}var jy=class{constructor(t){this.device=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(t,e,o,n){let s=YO(o),i=t*e*s,a=XO(t,e,o,n);if(this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.usedTextures.has(a)||this.usedTextures.set(a,[]),this.numBytesUsed+=i,this.numUsedTextures++,this.freeTextures.get(a).length>0){this.numFreeTextures--;let u=this.freeTextures.get(a).shift();return this.usedTextures.get(a).push(u),u}this.numBytesAllocated+=i;let l=this.device.createTexture({size:[t,e],format:o,usage:n});return this.usedTextures.get(a).push(l),l}releaseTexture(t,e,o,n,s){if(this.freeTextures.size===0)return;let i=XO(e,o,n,s);this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.freeTextures.get(i).push(t),this.numFreeTextures++,this.numUsedTextures--;let a=this.usedTextures.get(i),l=a.indexOf(t);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(l,1);let u=YO(n),c=e*o*u;this.numBytesUsed-=c}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.usedTextures.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function XO(r,t,e,o){return`${r}_${t}_${e}_${o}`}function YO(r){if(r==="rgba8unorm")return 16;throw new Error(`${r} is not supported!`)}function ZO(r,t){if(Math.max(...r)>3)throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}var tP=(r,t,e,o)=>{let n={dtype:o.dtype,shape:o.shape},s=VZ(e,n,t),i=r.createShaderModule({code:s,label:t.constructor.name});return r.createComputePipeline({compute:{module:i,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})};function Fe(r){if(r<=1)return"i32";if(r===2)return"vec2<i32>";if(r===3)return"vec3<i32>";if(r===4)return"vec4<i32>";if(r===5)return"vec5";if(r===6)return"vec6";throw Error(`GPU for rank ${r} is not yet supported`)}function sn(r){if(r===0)return"x";if(r===1)return"y";if(r===2)return"z";if(r===3)return"w";if(r===4)return"u";if(r===5)return"v";throw Error(`Index ${r} is not yet supported`)}function ut(...r){let t;switch(r.length){case 0:t=`
        ${rl()}
        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                  @builtin(global_invocation_id) GlobalId : vec3<u32>,
                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
          localId = LocalId;
          globalId = GlobalId;
          numWorkgroups = NumWorkgroups;
          main();
        }

        fn main()
      `;break;case 1:t=`
        ${rl()}
        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                  @builtin(global_invocation_id) GlobalId : vec3<u32>,
                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
          localId = LocalId;
          globalId = GlobalId;
          numWorkgroups = NumWorkgroups;
          main(getGlobalIndex());
        }

        fn main(${r[0]} : i32)
      `;break;default:throw Error("Unreachable")}return t}function rl(){return`
  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
`}function VZ(r,t,e){let o=[];if(o.push(`
      const workGroupSizeX = ${e.workGroupSize[0]}u;
      const workGroupSizeY = ${e.workGroupSize[1]}u;
      const workGroupSizeZ = ${e.workGroupSize[2]}u;

      var<private> localId: vec3<u32>;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${rP(e)?"  return i32(globalId.x);":`  let localInvocationIndex = localId.z * workGroupSizeX * workGroupSizeY +
                   localId.y * workGroupSizeX + localId.x;
               let workGroupID = (globalId - localId)/vec3<u32>(
                   workGroupSizeX, workGroupSizeY, workGroupSizeZ);

               return i32((workGroupID.z * numWorkgroups.x * numWorkgroups.y +
                   workGroupID.y * numWorkgroups.x + workGroupID.x) *
                   (workGroupSizeX * workGroupSizeY * workGroupSizeZ) +
                   localInvocationIndex);
        `}
      }
    `),e.isFromPixels)return o.push(`
        struct Uniform {
          size            : i32,
          numChannels     : i32,
          outShapeStrides : vec2<i32>,
        };

        @group(0) @binding(0) var<storage, read_write> result: array<${$p(t.dtype,e.isVec4)}>;
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `),[QO,o.join(`
`),JO(t.shape),e.getUserCode()].join(`
`);let n="struct Uniforms { NAN : f32, ";e.variableNames.forEach((m,f)=>{let h=Fe(r[f].shape.length);n+=`${m.charAt(0).toLowerCase()+m.slice(1)}Shape : ${h}, `}),n+=`outShape : ${Fe(t.shape.length)}, `;let i=t.shape.length-1;n+=`
         outShapeStrides: ${Fe(i)}, `,e.size&&(n+="size : i32, "),e.uniforms&&(n+=e.uniforms),n+="};",n=jZ(n),o.push(n),e.atomic?o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${$p(t.dtype,e.isVec4)}>;
    `),e.variableNames.forEach((m,f)=>{o.push(`
      @group(0) @binding(${1+f}) var<storage, read> ${m}: array<${e.variableTypes?e.variableTypes[f]:$p(r[f].dtype,e.isVec4)}>;
        `)}),n!==""&&o.push(`
      @group(0) @binding(${1+e.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let l=HZ(t.shape,e.dispatchLayout),u=[QO,o.join(`
`),JO(t.shape),l,KZ(t.shape.length)];e.atomic||u.push(qZ(t.shape,t.dtype,e.isVec4));let c=r.map((m,f)=>WZ(m,t.shape,e.variableTypes?e.variableTypes[f]==="vec4<f32>":e.isVec4,e.dispatchLayout.x.length===t.shape.length)).join(`
`);return u.push(c),u.push(e.getUserCode()),u.join(`
`)}function eP(r,t,e,o){let n=r.shaderKey;if(r.isFromPixels)return n;let s=e.map(c=>c.dtype).concat(o.dtype),i=e.map(c=>I.getBroadcastDims(c.shape,o.shape)),a=e.map(c=>y.arraysEqual(c.shape,o.shape)).join("_"),l=i.map(c=>c.join("_")).join(";"),u=rP(r)?"flatDispatch":"";return n+="_"+(r.workGroupSize?r.workGroupSize.join(","):"")+t.map(c=>c.length).join(",")+s.join(",")+r.variableNames.join(",")+l+a+u,n}var QO=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  fn idiv(a: i32, b: i32, sign: f32) -> i32 {
    var res: i32 = a / b;
    let modulo: i32 = a % b;
    if (sign < 0. && modulo != 0) {
      res = res - 1;
    }
    return res;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    return vec4<bool>(isnan(val[0]), isnan(val[1]), isnan(val[2]), isnan(val[3]));
  }
`;function JO(r){let t=r.length;if(t<=1)return"fn getCoordsFromIndex(index : i32) -> i32 { return index; }";let e=y.computeStrides(r),o=Fe(t),n=[];for(let i=0;i<t;i++)n.push(`d${i}`);if(e.length===1)return`    fn getCoordsFromIndex(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;
      return vec2<i32>(d0, d1);
    }`;let s;return s="var index2 = index;"+e.map((i,a)=>{let l=`let ${n[a]} = index2 / uniforms.outShapeStrides.${sn(a)}`,u=a===e.length-1?`let ${n[a+1]} = index2 - ${n[a]} * uniforms.outShapeStrides.${sn(a)}`:`index2 = index2 - ${n[a]} * uniforms.outShapeStrides.${sn(a)}`;return`${l}; ${u};`}).join(""),`
    fn getCoordsFromIndex(index : i32) -> ${o} {
      ${s}
      return ${o}(${n.join(",")});
    }
  `}function GZ(r,t){let e=r.name,o=r.shape.length,n=Fe(o),s="get"+e.charAt(0).toUpperCase()+e.slice(1),i=["d0","d1","d2","d3","d4","d5"].slice(0,o),a=i.map(c=>`${c} : i32`).join(", ");if(o<1)return t?`
        fn ${s}() -> vec4<f32> {
          return vec4<f32>(${e}[0]);
        }
      `:`
      fn ${s}() ->f32 {
        return f32(${e}[0]);
      }
    `;let l=`uniforms.${e.charAt(0).toLowerCase()+e.slice(1)}Shape`,u=`${o}D`;return o===0&&(u="1D"),t?`
      fn ${s}(${a}) -> vec4<f32> {
        return vec4<f32>(${e}[getIndexFromCoords${u}(${n}(${i.join(",")}),
          ${l}) / 4]);
      }
      `:`
    fn ${s}(${a}) -> f32 {
      return f32(${e}[getIndexFromCoords${u}(${n}(${i.join(",")}),
        ${l})]);
    }
   `}function UZ(r,t,e,o){let n=r.name,s=n.charAt(0).toUpperCase()+n.slice(1),i="get"+s+"ByOutput",a=r.shape.length,l=t.length,u=Fe(l);if(y.arraysEqual(r.shape,t)&&o)return e?`
      fn ${i}Index(globalIndex : i32) -> vec4<f32> {
        return vec4<f32>(${n}[globalIndex]);
      }

      fn ${i}Coords(coords : ${u}) -> vec4<f32> {
        return vec4<f32>(${n}[${l>1?"getOutputIndexFromCoords(coords)":"coords"} / 4]);
      }
      `:`
    fn ${i}Index(globalIndex : i32) -> f32 {
      return f32(${n}[globalIndex]);
    }

    fn ${i}Coords(coords : ${u}) -> f32 {
      return f32(${n}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}]);
    }
    `;let c=I.getBroadcastDims(r.shape,t),p=l-a,m="";if(a===0)return e?`
    fn ${i}Index(globalIndex : i32) -> vec4<f32> {
      return get${s}();
    }

    fn ${i}Coords(coords : ${u}) -> vec4<f32> {
      return get${s}();
    }
  `:`
    fn ${i}Index(globalIndex : i32) -> f32{
      return get${s}();
    }

    fn ${i}Coords(coords : ${u}) -> f32{
      return get${s}();
    }
  `;l<2&&c.length>=1?m="coords = 0;":m=c.map(g=>`coords.${sn(g+p)} = 0;`).join(`
`);let f="";if(l<2&&a>0)f="coords";else if(l>1){let g=Fe(a),x=r.shape.map((b,w)=>`coords.${sn(w+p)}`).join(", ");f=`${g}(${x})`}else f="coords";let h=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`,d=`${a}D`;return e?`
    fn ${i}Index(globalIndex : i32) -> vec4<f32> {
      var coords = getCoordsFromIndex(globalIndex);
      ${m}
      return ${n}[getIndexFromCoords${d}(${f}, ${h}) / 4];
    }

    fn ${i}Coords(coordsIn : ${u}) -> vec4<f32> {
      var coords = coordsIn;
      ${m}
      return ${n}[getIndexFromCoords${d}(${f}, ${h}) / 4];
    }
  `:`
  fn ${i}Index(globalIndex : i32) -> f32 {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return f32(${n}[getIndexFromCoords${d}(${f}, ${h})]);
  }

  fn ${i}Coords(coordsIn : ${u}) -> f32 {
    var coords = coordsIn;
    ${m}
    return f32(${n}[getIndexFromCoords${d}(${f}, ${h})]);
  }
`}function WZ(r,t,e,o){let n=GZ(r,e);return r.shape.length<=t.length&&(n+=UZ(r,t,e,o)),n}function HZ(r,t){let{x:e,y:o=[],z:n=[]}=t,s=r.length;if(e.length===s)return`fn getOutputCoords() -> ${Fe(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;let i="",a=[e,o,n],l=0;for(let m=0;m<a.length;m++){let f=a[m];if(f.length!==0)if(l+=f.length,f.length===1)i+=`let d${f[0]} = i32(globalId[${m}]);`;else{let h=ZO(f,"uniforms.outShape");i+=`var index${m} = i32(globalId[${m}]);`;for(let d=0;d<h.length;d++)i+=`let d${f[d]} = index${m} / ${h[d]};`,d===h.length-1?i+=`let d${f[d+1]} = index${m} - d${f[d]} * ${h[d]};`:i+=`index${m} = index${m} - d${f[d]} * ${h[d]};`}}let u=[];for(let m=0;m<l;m++)u.push(`d${m}`);let c=Fe(l),p=`fn getOutputCoords() -> ${c} {
  ${i}
`;return u.length===0?p+=`return ${c}(0); }`:p+=`return ${c}(${u.join(",")}); }`,p}function KZ(r){let t="";switch(r){case 0:case 1:t+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:t+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:t+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:t+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:t+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:t+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:y.assert(!1,()=>`Unsupported ${r}D shape`);break}return t}function rP(r){return r.dispatch[1]===1&&r.dispatch[2]===1}function $p(r,t){return r==="float32"?t?"vec4<f32>":"f32":r==="int32"||r==="bool"?t?"vec4<i32>":"i32":r}function qZ(r,t,e){let o=r.length,n=$p(t,e),s;if(e?s=`fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {
      result[flatIndex] = ${n}(value);
    }`:s=`fn setOutputAtIndex(flatIndex : i32, value : f32) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {
      result[flatIndex] = ${n}(value);
    }`,o>=2){let i=["d0","d1","d2","d3","d4","d5"].slice(0,o),a=Fe(o);e?s+=`
      fn setOutputAtCoords(${i.map(l=>`${l} : i32`).join(", ")}, value : vec4<f32>) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndex(flatIndex / 4, value);
      }
      fn setOutputAtCoordsI32(${i.map(l=>`${l} : i32`).join(", ")}, value : vec4<i32>) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex / 4, value);
      }
    `:s+=`
      fn setOutputAtCoords(${i.map(l=>`${l} : i32`).join(", ")}, value : f32) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndex(flatIndex, value);
      }
      fn setOutputAtCoordsI32(${i.map(l=>`${l} : i32`).join(", ")}, value : i32) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex, value);
      }
    `}return s}function jZ(r){let t=/(\w+)\s*:\s*vec(5|6)/g;r=r.replace(t,o=>"@align(16) "+o);let e=/vec(5|6)\s*,\s*(\w+)/g;return r=r.replace(e,(o,n,s)=>`vec${n}, @align(16) ${s}`),r}var mu=r=>{let t=1;for(let e=0;e<r.length;e++)t*=r[e];return t};function st(r,t,e=[1,1,1],o=[1,1,1]){let[n,s,i]=[Math.ceil(mu(r.x.map(a=>t[a]))/(e[0]*o[0])),r.y?Math.ceil(mu(r.y.map(a=>t[a]))/(e[1]*o[1])):1,r.z?Math.ceil(mu(r.z.map(a=>t[a]))/(e[2]*o[2])):1];return[n,s,i]}function oP(r,t,e,o=!1){let n=[8,8,1],s=[4,4,1];return o||(r<=8&&(s[1]=1),t<=16&&e<=16&&(n[0]=4)),{workGroupSize:n,elementsPerThread:s}}function Xy(r,t,e=!1){if(e)return[8,8,1];let o=mu(r.x.map(s=>t[s])),n=mu(r.y.map(s=>t[s]));return o<=4?[4,16,1]:n<=4?[16,4,1]:[16,16,1]}function Yy(r,t,e=!1){if(e)return[4,4,1];let o=mu(r.x.map(s=>t[s])),n=mu(r.y.map(s=>t[s]));return o<=4?[1,2,1]:n<=4?[2,1,1]:[2,2,1]}function ft(r){return{x:r.map((t,e)=>e)}}function nP(r){if(r==="float32"||r==="int32"||r==="bool"||r==="string")return 4;if(r==="complex64")return 8;throw new Error(`Unknown dtype ${r}`)}function sP(r,t){if(t==="float32")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"||t==="string")return Uint8Array.from(new Int32Array(r));throw new Error(`Unknown dtype ${t}`)}function Zy(){return(typeof window<"u"||typeof WorkerGlobalScope<"u")&&!!navigator.gpu}var Qn;(function(r){r[r.MatMulReduceProgram=0]="MatMulReduceProgram",r[r.MatMulSplitKProgram=1]="MatMulSplitKProgram",r[r.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",r[r.MatMulPackedProgram=3]="MatMulPackedProgram",r[r.MatMulMax=4]="MatMulMax"})(Qn||(Qn={}));var YZ=P().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),ZZ=(r,t)=>{let e=r.limits.maxComputeWorkgroupsPerDimension,o=t.dispatchLayout,n=t.dispatch;if(n.every(i=>i<=e))return n;y.assert(n[0]>e&&o.y===void 0&&o.z===void 0,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let s=Math.ceil(Math.sqrt(n[0]));return s>e?(s=Math.ceil(Math.cbrt(n[0])),y.assert(s<=e,()=>"Total dispatch size exceeds WebGPU maximum."),[s,s,s]):[s,s,1]},ol=class extends mn{constructor(t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchNumberInEncoder=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,!Zy())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=t,this.queue=t.queue,this.currentCommandEncoder=null,this.currentComputePass=null,this.supportTimeQuery=t.features.has("timestamp-query"),this.bufferManager=new qy(this.device),this.textureManager=new jy(this.device),this.tensorMap=new ri(this,Fr()),this.supportTimeQuery&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2})),P().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:t,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}nextDataId(){return ol.nextDataId++}floatPrecision(){return 32}defaultGpuBufferUsage(){return GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}disposeData(t,e=!1){if(this.tensorDataPendingDisposal.indexOf(t)>=0)return!1;if(!this.tensorMap.has(t))return!0;let o=this.tensorMap.get(t);if(this.decRef(t),!e&&o.refCount>0)return!1;if(this.commandQueueOwnedIds.has(t))return this.tensorDataPendingDisposal.push(t),!1;let{complexTensorInfos:n}=this.tensorMap.get(t);return n!=null&&(this.disposeData(n.real.dataId,e),this.disposeData(n.imag.dataId,e)),this.releaseResource(t),this.tensorMap.delete(t),!0}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(t){let e=this.tensorMap.get(t);if(!(!e||!e.resourceInfo)){if("texture"in e.resourceInfo){let o=e.resourceInfo;o.texture instanceof GPUTexture&&this.textureManager.releaseTexture(o.texture,o.width,o.height,o.format,o.usage),o.texture=null}else{let o=e.resourceInfo;this.bufferManager.releaseBuffer(o.buffer,o.size,o.usage),o.buffer=null}e.resourceInfo=null}}refCount(t){return this.tensorMap.has(t)?this.tensorMap.get(t).refCount:0}incRef(t){let e=this.tensorMap.get(t);e.refCount++}decRef(t){if(this.tensorMap.has(t)){let e=this.tensorMap.get(t);e.refCount--}}write(t,e,o){if(o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:o,shape:e,values:t,refCount:1}),n}move(t,e,o,n,s){if(n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(t,{dtype:n,shape:o,values:e,refCount:s})}submitQueue(){this.ensureComputePassEnded(),this.queue.submit([this.currentCommandEncoder.finish()]),this.currentCommandEncoder=null,this.dispatchNumberInEncoder=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(t=>{this.releaseResource(t),this.tensorMap.delete(t)}),this.uniformPendingDisposal.forEach(t=>this.bufferManager.releaseBuffer(t.buffer,t.size,t.usage)),this.stagingPendingDisposal.forEach(t=>this.bufferManager.releaseUploadBuffer(t.buffer,t.size,t.usage)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.currentCommandEncoder||(this.currentCommandEncoder=this.device.createCommandEncoder())}ensureComputePassEnded(){this.currentComputePass&&(this.currentComputePass.end(),this.currentComputePass=null)}getComputePass(){return this.currentComputePass||(this.currentComputePass=this.currentCommandEncoder.beginComputePass()),this.currentComputePass}async getBufferData(t,e){let o=this.bufferManager.acquireBuffer(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(t,0,o,0,e),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=o.getMappedRange().slice(0);return o.unmap(),o!=null&&this.bufferManager.releaseBuffer(o,e,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ),P().getBool("WEBGPU_USE_PROFILE_TOOL")&&(y.assert(this.dummyContext!==void 0,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(t,e){let o=this.tensorMap.get(t);return this.releaseResource(t),o.values=e,o.values}readSync(t){let e=this.tensorMap.get(t),{values:o}=e;if(o==null)throw new Error("WebGPU readSync is only available for CPU-resident tensors.");return o}async read(t){if(!this.tensorMap.has(t))throw new Error(`Tensor ${t} was not registered!`);let e=this.tensorMap.get(t),{values:o}=e;if(o!=null)return this.convertAndCacheOnCPU(t,o);let n;if(e.dtype==="complex64"){let s=await Promise.all([this.read(e.complexTensorInfos.real.dataId),this.read(e.complexTensorInfos.imag.dataId)]),i=s[0],a=s[1];n=I.mergeRealAndImagArrays(i,a)}else{let s=e.resourceInfo,i=await this.getBufferData(s.buffer,s.size);n=sP(i,e.dtype)}return this.convertAndCacheOnCPU(t,n),n}readToGPU(t){let e=this.tensorMap.get(t),{values:o,dtype:n,shape:s,resourceInfo:i}=e;if(n==="complex64")throw new Error("Does not support reading buffer for complex64 dtype.");if(i==null)throw o!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let a=i.size,l=this.bufferManager.acquireBuffer(a,i.usage);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(i.buffer,0,l,0,a),this.submitQueue();let u=this.makeTensorInfo(s,n),c=Fr().makeTensorFromTensorInfo(u),p=this.tensorMap.get(u.dataId);return p.resourceInfo={size:a,usage:this.defaultGpuBufferUsage(),buffer:l},{tensorRef:c,buffer:l,bufSize:a}}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return et(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return et(t.shape,t.dtype,e)}async time(t){this.supportTimeQuery||console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled. Using performance.now is not workable for webgpu since it doesn't support synchronous data read from GPU.");let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(u=>u.query)).filter(u=>u!=null),i=y.flatten(this.activeTimers.map(u=>u.name)).filter(u=>u!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},l=await Promise.all(s);return a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,a}makeTensorInfo(t,e,o){return e==="string"&&o!=null&&o.length>0&&y.isString(o[0])&&(o=o.map(s=>y.encodeString(s))),{dataId:this.write(o,t,e),shape:t,dtype:e}}tensorToBinding(t){if(!t)return null;let e=this.tensorMap.get(t.dataId);if("texture"in e.resourceInfo){let n=e.resourceInfo;return n.texture instanceof GPUExternalTexture?n.texture:n.texture.createView()}let o=e.resourceInfo;return{offset:0,size:o.size,buffer:o.buffer}}async getQueryTime(t){return this.supportTimeQuery?this.getTimeFromQuerySet(t):0}uploadToGPU(t){let e=this.tensorMap.get(t);if(e.resourceInfo)return;let o=nP(e.dtype)*y.sizeFromShape(e.shape),n=this.bufferManager.acquireBuffer(o,this.defaultGpuBufferUsage());if(e.resourceInfo={size:o,usage:this.defaultGpuBufferUsage(),buffer:n},e.values){let s=this.bufferManager.acquireUploadBuffer(o,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC),i=s.getMappedRange();e.dtype==="int32"||e.dtype==="bool"?new Int32Array(i).set(e.values):new Float32Array(i).set(e.values),s.unmap(),this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(s,0,n,0,o);let a={size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,buffer:s};this.stagingPendingDisposal.push(a)}}makeUniforms(t){let e=0,o=0,n=[];t.forEach(l=>{l.data.length===0&&(l.data=[1]);let u;switch(l.data.length){case 1:u=4;break;case 2:u=8;break;case 3:u=16;break;case 4:u=16;break;case 5:u=16;break;case 6:u=16;break;default:y.assert(!1,()=>`Unsupported ${l.data.length}D shape`)}(o===5||o===6)&&(u=16),e=Math.ceil(e/u)*u,o=l.data.length,n.push(e),e+=l.data.length*4});let s=new ArrayBuffer(e);t.forEach((l,u)=>{let c=n[u];l.type==="int32"?new Int32Array(s,c,l.data.length).set(l.data):l.type==="uint32"?new Uint32Array(s,c,l.data.length).set(l.data):new Float32Array(s,c,l.data.length).set(l.data)});let i=this.bufferManager.acquireBuffer(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.queue.writeBuffer(i,0,s,0,e);let a={size:e,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,buffer:i};return this.uniformPendingDisposal.push(a),{offset:0,size:e,buffer:i}}runWebGPUProgram(t,e,o,n,s){if(s||(s=this.makeTensorInfo(t.outputShape,o)),y.sizeFromShape(s.shape)===0)return this.tensorMap.get(s.dataId).values=y.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),t.dispatch=ZZ(this.device,t);let i=[],a=[];if(!t.isFromPixels){i.push({type:"float32",data:[NaN]}),a=e.concat(s).map(x=>x.shape);let d="int32";a.map(x=>{i.push({type:d,data:x})});let g=y.computeStrides(s.shape);if(i.push({type:d,data:g}),t.size){let x=y.sizeFromShape(t.outputShape);i.push({type:d,data:[t.isVec4?x/4:x]})}}let l=e.map((d,g)=>{if(d.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(d.dataId),{dtype:this.tensorMap.get(d.dataId).dtype,shape:d.shape,name:t.variableNames[g]}}),u=eP(t,a,l,s),c;u in this.pipelineCache?c=this.pipelineCache[u]:(c=tP(this.device,t,l,s),this.pipelineCache[u]=c),n&&(i=[...i,...n]);let p=[this.tensorToBinding(s),...e.map(d=>this.tensorToBinding(d)),this.makeUniforms(i)],m=this.device.createBindGroup({layout:c.getBindGroupLayout(0),entries:p.map((d,g)=>({binding:g,resource:d}))});this.ensureCommandEncoderReady();let f=this.getComputePass(),h=this.activeTimers!=null;return h&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,0),f.setPipeline(c),f.setBindGroup(0,m),f.dispatchWorkgroups(t.dispatch[0],t.dispatch[1],t.dispatch[2]),h&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,1),this.dispatchNumberInEncoder++,e.forEach(d=>{this.commandQueueOwnedIds.add(d.dataId)}),this.commandQueueOwnedIds.add(s.dataId),P().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchNumberInEncoder&&this.submitQueue(),h&&this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(this.querySet)}),s}async getTimeFromQuerySet(t){let e=this.bufferManager.acquireBuffer(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),o=this.bufferManager.acquireBuffer(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.resolveQuerySet(t,0,2,e,0),this.currentCommandEncoder.copyBufferToBuffer(e,0,o,0,16),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=new BigUint64Array(o.getMappedRange()),s=Number(n[1]-n[0]);return o.unmap(),this.bufferManager.releaseBuffer(o,16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST),this.bufferManager.releaseBuffer(e,16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),s/1e6}shouldExecuteOnCPU(t,e=YZ){return P().getBool("WEBGPU_CPU_FORWARD")&&t.every(o=>this.tensorMap.get(o.dataId).resourceInfo==null&&y.sizeFromShape(o.shape)<e)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}};ol.nextDataId=0;Zy()&&lc("webgpu",async()=>{P().set("CHECK_COMPUTATION_FOR_ERRORS",!1);let r={powerPreference:P().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(r),e=t.limits,o={},n=t.features.has("timestamp-query");o.requiredLimits={maxComputeWorkgroupStorageSize:e.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:e.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:e.maxStorageBufferBindingSize},n&&(o.requiredFeatures=["timestamp-query"]);let s=await t.requestDevice(o);return new ol(s)},3);var wt;(function(r){r[r.MUL=0]="MUL",r[r.ADD=1]="ADD",r[r.ATAN2=2]="ATAN2",r[r.SUB=3]="SUB",r[r.DIV=4]="DIV",r[r.EQUAL=5]="EQUAL",r[r.GREATER=6]="GREATER",r[r.GREATER_EQUAL=7]="GREATER_EQUAL",r[r.LESS=8]="LESS",r[r.LESS_EQUAL=9]="LESS_EQUAL",r[r.LOGICAL_AND=10]="LOGICAL_AND",r[r.NOT_EQUAL=11]="NOT_EQUAL",r[r.SQUARED_DIFFERENCE=12]="SQUARED_DIFFERENCE",r[r.INT_DIV=13]="INT_DIV",r[r.POW=14]="POW",r[r.PRELU=15]="PRELU",r[r.MAX=16]="MAX",r[r.MIN=17]="MIN",r[r.COMPLEX_MULTIPLY_REAL=18]="COMPLEX_MULTIPLY_REAL",r[r.COMPLEX_MULTIPLY_IMAG=19]="COMPLEX_MULTIPLY_IMAG"})(wt||(wt={}));var QZ=`
  if (isnan(a)) { return a; }
  if (isnan(b)) { return b; }
  `,aP=`
  if (isNaN.r) {
    resultTemp.r = valueForNaN;
  }
  if (isNaN.g) {
    resultTemp.g = valueForNaN;
  }
  if (isNaN.b) {
    resultTemp.b = valueForNaN;
  }
  if (isNaN.a) {
    resultTemp.a = valueForNaN;
  }
  `,lP=`
  let isNaN = isnanVec4(a) | isnanVec4(b);
  ${aP}
  `,JZ="return a + b;",tQ="return areal * breal - aimag * bimag;",eQ="return areal * bimag + aimag * breal;",rQ="return a / b;",oQ="return a * b;",nQ="return (a - b) * (a - b);",sQ="return a - b;",iQ="return f32(a == b);",aQ="return vec4<f32>(a == b);",lQ="return f32(a > b);",uQ="return vec4<f32>(a > b);",cQ="return f32(a >= b);",pQ="return vec4<f32>(a >= b);",mQ="return f32(a < b);",fQ="return vec4<f32>(a < b);",hQ="return f32(a <= b);",dQ="return vec4<f32>(a <= b);",gQ="return f32(f32(a) >= 1.0 && f32(b) >= 1.0);",xQ=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,yQ=`
  let s = sign(a) * sign(b);
  let ia = i32(round(a));
  let ib = i32(round(b));
  return f32(idiv(ia, ib, s));
  `,bQ=`
  let ia = vec4<i32>(round(a));
  let ib = vec4<i32>(round(b));
  let cond = ib != vec4<i32>(0);
  var resultTemp = vec4<i32>(0);
  let s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    resultTemp[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    resultTemp[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    resultTemp[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    resultTemp[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4<f32>(resultTemp);
  `,wQ=`
  if (isnan(a) || isnan(b)) {
    return 1.0;
  }
  return f32(a != b);
`,CQ=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
  ${lP}

  return resultTemp;
`,IQ=`
  if(a < 0.0 && floor(b) < b) {
    return uniforms.NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  if (round(abs(b) % 2.0) != 1.0) {
    return pow(abs(a), b);
  }
  return sign(a) * pow(abs(a), b);
  `,SQ=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = a < vec4<f32>(0.0) & floor(b) < b;
  let valueForNaN = uniforms.NAN;
  ${aP}
  return resultTemp;
  `,vQ="if (a < 0.0) { return b * a; }  return a;",kQ=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
  `;function MI(r,t,e="uniforms.NAN"){let o=t?lP:QZ;return t?`
    let valueForNaN = ${e};
    var resultTemp = vec4<f32>(${r}(a, b));
    `+o+`
    return resultTemp;
  `:o+`
    return ${r}(a, b);
  `}function fu(r,t){switch(r){case wt.MUL:return oQ;case wt.ADD:return JZ;case wt.ATAN2:return MI("atan2",t);case wt.SUB:return sQ;case wt.DIV:return rQ;case wt.EQUAL:return t?aQ:iQ;case wt.GREATER:return t?uQ:lQ;case wt.GREATER_EQUAL:return t?pQ:cQ;case wt.LESS:return t?fQ:mQ;case wt.LESS_EQUAL:return t?dQ:hQ;case wt.LOGICAL_AND:return t?xQ:gQ;case wt.NOT_EQUAL:return t?CQ:wQ;case wt.SQUARED_DIFFERENCE:return nQ;case wt.INT_DIV:return t?bQ:yQ;case wt.PRELU:return t?kQ:vQ;case wt.MAX:return MI("max",t);case wt.MIN:return MI("min",t);case wt.POW:return t?SQ:IQ;case wt.COMPLEX_MULTIPLY_REAL:return tQ;case wt.COMPLEX_MULTIPLY_IMAG:return eQ;default:throw new Error(`BinaryType ${r} is not implemented!`)}}var lt;(function(r){r[r.ABS=0]="ABS",r[r.CEIL=1]="CEIL",r[r.COS=2]="COS",r[r.COSH=3]="COSH",r[r.ELU=4]="ELU",r[r.EXP=5]="EXP",r[r.EXPM1=6]="EXPM1",r[r.FLOOR=7]="FLOOR",r[r.IS_NAN=8]="IS_NAN",r[r.LINEAR=9]="LINEAR",r[r.LOG=10]="LOG",r[r.LOGICAL_NOT=11]="LOGICAL_NOT",r[r.NEG=12]="NEG",r[r.RELU=13]="RELU",r[r.RELU6=14]="RELU6",r[r.LEAKYRELU=15]="LEAKYRELU",r[r.RECIPROCAL=16]="RECIPROCAL",r[r.RSQRT=17]="RSQRT",r[r.SIN=18]="SIN",r[r.SINH=19]="SINH",r[r.SIGMOID=20]="SIGMOID",r[r.SQRT=21]="SQRT",r[r.SQUARE=22]="SQUARE",r[r.TANH=23]="TANH",r[r.TO_INT=24]="TO_INT"})(lt||(lt={}));var TQ="return abs(a);",NQ="return ceil(a);",EQ="return cos(a);",$Q=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,AQ="return exp(a) - 1.0;",DQ="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",RQ=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,FQ="return exp(a);",_Q="return floor(a);",OQ="return f32(isnan(a));",PQ="return a;",LQ=`if (a < 0.0) { return 1.0/0.0; }
  return log(a);`,zQ="return f32(!(a >= 1.0));",MQ="return -a;",BQ="if (a < 0.0) { return uniforms.alpha * a; } return a;",VQ=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,GQ="return 1.0 / a;",UQ="return select(a, 0.0, a < 0.0);",WQ="return clamp(a, 0.0, 6.0);",HQ="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",KQ=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,qQ="return 1.0/sqrt(a);",jQ="return 1.0 / (1.0 + exp(-1.0 * a));",XQ="return sin(a);",YQ=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,ZQ="return sqrt(a);",QQ="return a * a;",JQ=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`,t7="return f32(i32((a)));";function Ji(r,t){switch(r){case lt.ABS:return TQ;case lt.COS:return EQ;case lt.COSH:return $Q;case lt.CEIL:return NQ;case lt.ELU:return t?RQ:DQ;case lt.EXP:return FQ;case lt.EXPM1:return AQ;case lt.FLOOR:return _Q;case lt.IS_NAN:return OQ;case lt.LINEAR:return PQ;case lt.LOG:return LQ;case lt.LOGICAL_NOT:return zQ;case lt.NEG:return MQ;case lt.LEAKYRELU:return t?VQ:BQ;case lt.RECIPROCAL:return GQ;case lt.RELU:return t?KQ:UQ;case lt.RELU6:return t?HQ:WQ;case lt.RSQRT:return qQ;case lt.SIGMOID:return jQ;case lt.SIN:return XQ;case lt.SINH:return YQ;case lt.SQRT:return ZQ;case lt.SQUARE:return QQ;case lt.TANH:return JQ;case lt.TO_INT:return t7;default:throw new Error(`BinaryType ${r} is not implemented!`)}}var Ne=r=>{switch(r){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(`${r}-component is not supported.`)}};function $r(r,t=!1,e=!1,o=3){if(r===null)return"";let n="";if(r==="linear")n=Ji(lt.LINEAR);else if(r==="relu")n=Ji(lt.RELU,e);else if(r==="elu")n=Ji(lt.ELU,e);else if(r==="relu6")n=Ji(lt.RELU6,e);else if(r==="prelu")n=fu(wt.PRELU,e);else if(r==="sigmoid")n=Ji(lt.SIGMOID,e);else if(r==="leakyrelu")n=Ji(lt.LEAKYRELU,e);else throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);let i=Ne(e?4:1),a="";return t?a=`
      fn activation(a : ${i}, coords : vec${o}<i32>) -> ${i} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }`:a=`
      fn activation(a : ${i}, coords : vec${o}<i32>) -> ${i} {
        ${n}
      }`,a}function an(r,t){return`
      ${r?"value = value + getBiasByOutputCoords(coords);":""}
      ${t?"value = activation(value, coords);":""}
      `}function BI(r,t,e,o,n=!1,s=!1,i=!1,a=1){y.assert(e&&a===1||!e,()=>`transposeA ${e} is not compatible with component size ${a}`);let l=`
      let batch = ${r?"0":"batchIn"};
      let batchASize = uniforms.aShape[1] * uniforms.aShape[2];
      ${e?`value = A[(batch * batchASize + col * uniforms.aShape[2] + row) / ${a}];`:`value = A[(batch * batchASize + row * uniforms.aShape[2] + col) / ${a}];`}

    `,u;return o===!1?u=`value = B[(batch * batchBSize + row * uniforms.bShape[2] + col) / ${a}];`:u=`value = B[(batch * batchBSize + col * uniforms.bShape[2] + row) / ${a}];`,`
  fn mm_readA(batchIn: i32, row: i32, colIn: i32) -> ${Ne(a)} {
    var value = ${Ne(a)}(0.0);
    let col = colIn * ${a};
    ${n&&i?l:`
    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${l}
    }
    `}
    return value;
  }

  fn mm_readB(batchIn: i32, row: i32, colIn: i32) -> ${Ne(a)} {
    let col = colIn * ${a};
    let batch = ${t?"0":"batchIn"};
    let batchBSize = uniforms.bShape[1] * uniforms.bShape[2];
    var value = ${Ne(a)}(0.0);
    ${u}
    return value;
  }
  `}function bh(r,t,e,o,n,s,i=!1,a=!1,l=!1,u=1){return`
  ${BI(e,o,n,s,i,a,l,u)}
  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ne(u)}) {
    let col = colIn * ${u};
    ${i&&a?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${an(r,t)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}var e7=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / InnerElementSize + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / InnerElementSize + inputCol);
        `,r7=(r,t)=>r?`
        let ACached0 = mm_Asub[k * InnerElementSize][localRow];
        let ACached1 = mm_Asub[k * InnerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * InnerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * InnerElementSize + 3][localRow];"}
        for (var i = 0; i < RowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < RowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`;function hu(r,t,e=!1,o=32,n=!1,s=32,i=!1){let a=t[1]*r[1],l=t[0]*r[0],u=e?a:o,c=e?o:a,p=u/t[0],m=o/t[1];return y.assert((e&&p===4&&r[1]===4||!e&&(p===3||p===4))&&u%t[0]===0&&o%t[1]===0&&r[0]===4,()=>`If transposeA ${e} is true, innerElementSize ${p} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${p} must be 3 or 4.
      tileAWidth ${u} must be divisible by workGroupSize[0]${t[0]}. tileInner ${o} must be divisible by workGroupSize[1] ${t[1]}. ColPerThread ${r[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${u/p}>, ${c}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${l/r[0]}>, ${o}>;

  const RowPerThread = ${r[1]};
  const ColPerThread = ${r[0]};
  const InnerElementSize = ${p};
  const TileInner = ${o};

  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
  fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
            @builtin(global_invocation_id) GlobalId : vec3<u32>,
            @builtin(num_workgroups) NumWorkgroups: vec3<u32>,
            @builtin(workgroup_id) workgroupId: vec3<u32>) {
    localId = LocalId;
    globalId = GlobalId;
    numWorkgroups = NumWorkgroups;

    let localRow = i32(localId.y);
    let tileRow = ${i?"0":"localRow * RowPerThread"};
    let tileCol = i32(localId.x);

    let globalRow = ${i?"0":"i32(globalId.y) * RowPerThread"};
    let globalCol = i32(globalId.x);
    let batch = ${n?"0":"i32(globalId.z)"};
    let globalRowStart = i32(workgroupId.y) * ${a};

    let numTiles = ${n?`${Math.ceil(s/o)}`:"(uniforms.dimInner - 1) / TileInner + 1"};
    var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

    var acc: array<vec4<f32>, RowPerThread>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${e7(e)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);
        }
        kStart = kStart + TileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileInner / InnerElementSize; k = k + 1) {
            let BCached0 = mm_Bsub[k * InnerElementSize][tileCol];
            let BCached1 = mm_Bsub[k * InnerElementSize + 1][tileCol];
            let BCached2 = mm_Bsub[k * InnerElementSize + 2][tileCol];
            ${p===3?"":"let BCached3 = mm_Bsub[k * InnerElementSize + 3][tileCol];"}

            ${r7(e,p)}
        }

        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}var o7=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,n7=r=>r?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function du(r,t,e=!1,o=32,n=!1,s=32){let i=r[1]*t[1],a=r[0]*t[0],l=e?i:o,u=e?o:i;y.assert(u%t[1]===0&&l%t[0]===0&&o%t[1]===0,()=>`tileAHight ${u} must be divisible by workGroupSize[1]${t[1]}, tileAWidth ${l} must be divisible by workGroupSize[0]${t[0]}, tileInner ${o} must be divisible by workGroupSize[1]${t[1]}`);let c=u/t[1],p=l/t[0],m=o/t[1];return`
    var<workgroup> mm_Asub : array<array<f32, ${l}>, ${u}>;
    var<workgroup> mm_Bsub : array<array<f32, ${a}>, ${o}>;
    const RowPerThread = ${r[1]};
    const ColPerThread = ${r[0]};
    const TileInner = ${o};

    @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
    fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
              @builtin(global_invocation_id) GlobalId : vec3<u32>,
              @builtin(num_workgroups) NumWorkgroups: vec3<u32>,
              @builtin(workgroup_id) workgroupId: vec3<u32>) {
      localId = LocalId;
      globalId = GlobalId;
      numWorkgroups = NumWorkgroups;

      let tileRow = i32(localId.y) * RowPerThread;
      let tileCol = i32(localId.x) * ColPerThread;

      let globalRow = i32(globalId.y) * RowPerThread;
      let globalCol = i32(globalId.x) * ColPerThread;
      let batch = ${n?"0":"i32(globalId.z)"};
      let globalRowStart = i32(workgroupId.y) * ${i};

      let numTiles = ${n?`${Math.ceil(s/o)}`:"(uniforms.dimInner - 1) / TileInner + 1"};
      var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

      var acc : array<array<f32, ColPerThread>, RowPerThread>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
          acc[innerRow][innerCol] = 0.0;
        }
      }

      let tileRowA = i32(localId.y) * ${c};
      let tileColA = i32(localId.x) * ${p};
      let tileRowB = i32(localId.y) * ${m};
      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${c}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ${p}; innerCol = innerCol + 1) {
            let inputRow = tileRowA + innerRow;
            let inputCol = tileColA + innerCol;
            ${o7(e)}
          }
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol + innerCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch,
              kStart + inputRow,
              globalCol + innerCol);
          }
        }
        kStart = kStart + TileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ColPerThread>;
        for (var k = 0; k < TileInner; k = k + 1) {
          for (var inner = 0; inner < ColPerThread; inner = inner + 1) {
            BCached[inner] = mm_Bsub[k][tileCol + inner];
          }

          for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            ${n7(e)}
            for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
              acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
            }
          }
        }

        workgroupBarrier();
      }

      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
          mm_write(batch, globalRow + innerRow, globalCol + innerCol,
              acc[innerRow][innerCol]);
        }
      }
    }
  `}var s7=r=>r?`
      mm_readA(batch, colA, globalRow),
      mm_readA(batch, colA + 1, globalRow),
      mm_readA(batch, colA + 2, globalRow),
      mm_readA(batch, colA + 3, globalRow)
  `:`
      mm_readA(batch, globalRow, colA),
      mm_readA(batch, globalRow, colA + 1),
      mm_readA(batch, globalRow, colA + 2),
      mm_readA(batch, globalRow, colA + 3)
  `;function i7(r,t=!1){return y.assert(r[1]===1&&r[2]===1,()=>`A linear work group size is required. But got ${r}.`),`
    const TileSize = ${r[0]*4};
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${ut()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / TileSize + 1;
      let batch = i32(globalId.z);
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        let colA = t * TileSize + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${s7(t)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileSize / 4; k = k + 1) {
          let rowB = t * TileSize + k * 4;
          let BCached = vec4<f32>(mm_readB(batch, rowB, globalCol),
                              mm_readB(batch, rowB + 1, globalCol),
                              mm_readB(batch, rowB + 2, globalCol),
                              mm_readB(batch, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}var Qy=class{constructor(t,e,o,n,s=!1,i=!1,a=null,l=null,u=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0]};let c=s?t[1]:t[2];if(this.isVec4=(c%4===0&&!s||e[1]%4===0&&s)&&e[2]%4===0&&!i,this.isVectorA=e[1]===1&&!s,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workGroupSize=[32,1,1];else{let f=oP(e[1],c,e[2],s);this.workGroupSize=f.workGroupSize,this.elementsPerThread=f.elementsPerThread}this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread);let p=a!=null,m=u!=null;p&&this.variableNames.push("bias"),m&&this.variableNames.push("preluActivationWeights"),this.transposeA=s,this.transposeB=i,this.addBias=p,this.activation=l,this.hasPreluActivationWeights=m,this.batchAEqualOne=o,this.batchBEqualOne=n,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(e[1],e[2],c),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${s}_${i}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getShapeFit(t,e,o){let n=this.workGroupSize[1]*this.elementsPerThread[1],s=this.workGroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=this.workGroupSize[0]*4:this.tileInner=s;let i=t%n===0,a=e%s===0,l=o%this.tileInner===0;return[i,a,l]}getUserCode(){return`
      ${$r(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${bh(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?hu(this.elementsPerThread,this.workGroupSize,this.transposeA,this.tileInner,!1,null,this.isVectorA):this.isVectorA?i7(this.workGroupSize,this.transposeA):du(this.elementsPerThread,this.workGroupSize,this.transposeA,this.tileInner)}
    `}};function a7(){return`
    var<workgroup> sumValues : array<f32, workGroupSizeX>;
    ${ut()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + i32(workGroupSizeX)) {
        let dataA = mm_readA(batch, row, k);
        let dataB = mm_readB(batch, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = workGroupSizeX / 2u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}var Jy=class{constructor(t,e,o,n=!1,s=!1,i=null,a=null,l=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize);let u=i!=null,c=l!=null;u&&this.variableNames.push("bias"),c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=c,this.batchAEqualOne=e,this.batchBEqualOne=o,this.shaderKey=`matMulReduce_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getUserCode(){return`
      ${$r(this.activation,this.hasPreluActivationWeights)}
      ${bh(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,this.transposeA,this.transposeB)}
      ${a7()}
    `}};function l7(r){let t=r[1],e=r[0],o=t>e?t:e;return`
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${t}>;
  var<workgroup> mm_Bsub : array<array<f32, ${e}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${ut()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batch, globalRow, globalColA);
    var regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batch, globalRow, globalColA);
      regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}var tb=class{constructor(t,e,o,n=!1,s=!1,i=null,a=null,l=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[16,8,1],this.outputShape=o,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(o[2]/this.workGroupSize[0]),Math.ceil(o[1]/this.workGroupSize[1]),o[0]];let u=i!=null;u&&this.variableNames.push("bias");let c=l!=null;c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=c,this.batchAEqualOne=t[0]===1,this.batchBEqualOne=e[0]===1,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getUserCode(){return`
      ${$r(this.activation,this.hasPreluActivationWeights)}
      ${bh(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,this.transposeA,this.transposeB)}
      ${l7(this.workGroupSize)}
    `}};var eb=class{constructor(t,e,o,n,s=!1,i=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[8,8,1],this.atomic=!0,this.isVec4=!1,this.splitedDimInner=128,y.assert(t[0]===1,()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0,3]},this.isVec4=(s&&this.outputShape[1]%4===0||!s&&e%4===0)&&this.outputShape[2]%4===0,this.elementsPerThread=[4,4,this.splitedDimInner],this.isVec4||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=st(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],e],this.workGroupSize,this.elementsPerThread),this.transposeA=s,this.transposeB=i,this.batchAEqualOne=o,this.batchBEqualOne=n,this.shaderKey=`matMulSplitK_${s}_${i}_${o}_${n}_${this.elementsPerThread}_${this.isVec4}`}getUserCode(){let t=n=>`
      for (var i = 0; i < ${n}; i = i + 1)
      {
        var oldValue = atomicLoad(&(result[flatIndex + i]));
        var exchanged = false;
        for (; !exchanged;) {
          let newValueF32 = bitcast<f32>(oldValue) + ${n>1?"value[i]":"value"};
          let newValue = bitcast<i32>(newValueF32);
          let res = atomicCompareExchangeWeak(&(result[flatIndex + i]), oldValue, newValue);
          oldValue = res.old_value;
          exchanged = res.exchanged;
        }
      }
      `,e=this.isVec4?4:1;return`
      ${BI(this.batchAEqualOne,this.batchBEqualOne,!1,this.transposeB,!1,!1,!1,e)}
      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${Ne(e)}) {
        let col = colIn * ${e};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          ${t(e)}
        }
      }
      ${this.isVec4?hu(this.elementsPerThread,this.workGroupSize,this.transposeA,32,!0,this.splitedDimInner):du(this.elementsPerThread,this.workGroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}},rb=class{constructor(t,e=null,o=null,n=null){this.uniforms="",this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.addBias=e!=null,this.hasPreluActivationWeights=n!=null,this.activation=o,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${o}`}getUserCode(){return`
    ${$r(this.activation,this.hasPreluActivationWeights)}
    ${ut("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${an(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}};var ob=class{constructor(t){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${ut("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}};function Do(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new ob(o),a=[{type:"float32",data:[n]}];return t.runWebGPUProgram(i,[],s,a)}}var uP={kernelName:da,backendName:"webgpu",kernelFunc:Do};function bt(r){let{inputs:t,attrs:e}=r,{x:o}=t,{shape:n}=e,s=y.sizeFromShape(o.shape),i=y.inferFromImplicitShape(n,s),a=y.sizeFromShape(i);return y.assert(s===a,()=>`The new shape (${i}) has ${a} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:i,dtype:o.dtype}}var cP={kernelName:Ts,backendName:"webgpu",kernelFunc:bt};function Ap({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],d=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(d),b=y.sizeFromShape(g),C=wr.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let S=e?[x,p,f]:[x,f,p],k=o?[b,h,m]:[b,m,h],E=bt({inputs:{x:r},backend:n,attrs:{shape:S}}),A=bt({inputs:{x:t},backend:n,attrs:{shape:k}}),D=[E,A],O=Math.max(x,b),M=x===1,B=b===1,V=[E,A],U=[{type:"int32",data:[f]},{type:"int32",data:[h]},{type:"int32",data:[p]}],G,W,j=[O,f,h],H=P().get("WEBGPU_MATMUL_PROGRAM_TYPE");switch(H<0&&(f*h<=128?H=Qn.MatMulReduceProgram:O===1&&f<=128&&h<=48&&m>=2e3?H=Qn.MatMulSplitKProgram:f<=16&&(h<=512||m>=2*h)||h<=16&&(f<=512||p>=2*f)?H=Qn.MatMulSmallOutputSizeProgram:H=Qn.MatMulPackedProgram),H){case Qn.MatMulReduceProgram:G=new Jy(j,M,B,e,o,s,l,i);break;case Qn.MatMulSplitKProgram:{if(W=Do({backend:n,attrs:{shape:j,value:0,dtype:r.dtype}}),G=new eb(j,m,M,B,e,o),s||l){W=n.runWebGPUProgram(G,V,r.dtype,U,W);let J=new rb(W.shape,s,l,i),tt=null,ot=[W];s&&ot.push(s),i&&ot.push(i),l==="leakyrelu"&&(tt=[{type:"float32",data:[a]}],J.uniforms+=" alpha : f32,");let rt=n.runWebGPUProgram(J,ot,W.dtype,tt);D.push(W);let pt=bt({inputs:{x:rt},backend:n,attrs:{shape:C}});D.push(rt);for(let it of D)n.disposeData(it.dataId);return pt}break}case Qn.MatMulSmallOutputSizeProgram:G=new tb(S,k,j,e,o,s,l,i);break;case Qn.MatMulPackedProgram:G=new Qy(S,j,M,B,e,o,s,l,i);break;default:throw new Error(`Unsupported MatMulProgramType ${H}.`)}s&&V.push(s),i&&V.push(i),l==="leakyrelu"&&(U.push({type:"float32",data:[a]}),G.uniforms+=" alpha : f32,"),W=n.runWebGPUProgram(G,V,r.dtype,U,W);let Z=bt({inputs:{x:W},backend:n,attrs:{shape:C}});D.push(W);for(let J of D)n.disposeData(J.dataId);return Z}function u7(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return Ap({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var pP={kernelName:ki,backendName:"webgpu",kernelFunc:u7};var wh=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.workGroupSize=[128,1,1],this.size=!0,this.outputShape=I.assertAndGetBroadcastShape(e,o),this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`binaryOpComplex_${t}`,this.op=t}getUserCode(){return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${fu(this.op,!1)}
      }

      ${ut("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}};var gu=class{constructor(t,e,o){this.size=!0,this.variableNames=["A","B"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.dispatchLayout=ft(this.outputShape),this.op=t,this.useSharedMemoryWithA=e.length===1&&o.length>1&&e[0]<1024,this.useSharedMemoryWithB=o.length===1&&e.length>1&&o[0]<1024,this.useSharedMemoryWithA||this.useSharedMemoryWithB?(this.isVec4=!1,this.lastDimensionSize=this.useSharedMemoryWithB?o[0]:e[0],this.shaderKey=`binary_${this.type}_${t}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`,this.type="shared",this.workGroupSize=[256,1,1],this.lastDimensionSize<256?this.workPerThread=1:this.lastDimensionSize<512?this.workPerThread=2:this.workPerThread=4):(y.arraysEqual(e,o)&&y.sizeFromShape(e)%4===0?(this.isVec4=!0,this.type="vec4",this.workPerThread=4):(this.isVec4=!1,this.type="plain",this.workPerThread=1),this.shaderKey=`binary_${this.type}_${t}`,this.workGroupSize=[128,1,1]),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1])}getUserCode(){let t;if(this.type==="shared"){let e=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",o=this.useSharedMemoryWithB?`let a = getAByOutputCoords(coords);
          let b = sharedBuf[${e}];`:`let a = sharedBuf[${e}];
          let b = getBByOutputCoords(coords);`;t=`
        fn binaryOperation(a : f32, b : f32) -> f32 {
          ${fu(this.op,this.isVec4)}
        }
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${ut("index")} {
          // Fill in the shared memory buffer. Here we need a loop to make sure
          // that all data in A|B are uploaded when |sharedMemorySize| is larger
          // than work group size.
          for(var localIndex = i32(localId.x); localIndex < ${this.lastDimensionSize}; localIndex = localIndex + ${this.workGroupSize[0]}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
            let flatIndex = index * ${this.workPerThread} + i;
            if(flatIndex < uniforms.size) {
              let coords = getCoordsFromIndex(flatIndex);

              ${o}
              setOutputAtIndex(flatIndex, binaryOperation(a, b));
            }
          }
        }
        `}else{let e=this.type==="vec4"?"vec4<f32>":"f32",o=fu(this.op,this.isVec4);t=`
       fn binaryOperation(a : ${e}, b : ${e}) -> ${e} {
         ${o}
       }
       ${ut("index")} {
         if (index < uniforms.size) {
           let a = getAByOutputIndex(index);
           let b = getBByOutputIndex(index);
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `}return t}};function Be(r){let{inputs:t}=r,{x:e}=t;return r.backend.incRef(e.dataId),{dataId:e.dataId,shape:e.shape,dtype:e.dtype}}var mP={kernelName:lo,backendName:"webgpu",kernelFunc:Be};function Jn(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.tensorMap.get(s.dataId),a=Be({inputs:{x:o},backend:e}),l=Be({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var fP={kernelName:ci,backendName:"webgpu",kernelFunc:Jn};var ln=class{constructor(t,e){this.variableNames=["A"],this.size=!0;let o=128;this.workGroupSize=[o,1,1],this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.op=e,this.shaderKey=`unary_${e}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${Ji(this.op,!1)}
      }
      ${ut("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}};function Vt({opType:r,cpuKernelImpl:t,dtype:e}){return({inputs:o,backend:n})=>{let{x:s}=o,i=n,a=e||s.dtype;if(i.shouldExecuteOnCPU([s])&&t!=null){let u=i.tensorMap.get(s.dataId),c=t(u.values,a);return i.makeTensorInfo(s.shape,a,c)}let l=new ln(s.shape,r);return i.runWebGPUProgram(l,[s],a)}}function Yt({opType:r,cpuKernelImpl:t,supportsComplex:e=!1,dtype:o}){return({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(e&&i.dtype==="complex64"){let p=l.tensorMap.get(i.dataId),m=l.tensorMap.get(a.dataId),f,h;if(r!==wt.MUL)[f,h]=[[p.complexTensorInfos.real,m.complexTensorInfos.real],[p.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(g=>{let[x,b]=g,w={dataId:x.dataId,dtype:x.dtype,shape:i.shape},C={dataId:b.dataId,dtype:b.dtype,shape:a.shape},S=new gu(r,i.shape,a.shape);return l.runWebGPUProgram(S,[w,C],Qt(x.dtype,b.dtype))});else{let g=new wh(wt.COMPLEX_MULTIPLY_REAL,i.shape,a.shape),x=new wh(wt.COMPLEX_MULTIPLY_IMAG,i.shape,a.shape),b=[{dataId:p.complexTensorInfos.real.dataId,dtype:p.complexTensorInfos.real.dtype,shape:i.shape},{dataId:p.complexTensorInfos.imag.dataId,dtype:p.complexTensorInfos.imag.dtype,shape:i.shape},{dataId:m.complexTensorInfos.real.dataId,dtype:m.complexTensorInfos.real.dtype,shape:a.shape},{dataId:m.complexTensorInfos.imag.dataId,dtype:m.complexTensorInfos.imag.dtype,shape:a.shape}];f=l.runWebGPUProgram(g,b,"float32"),h=l.runWebGPUProgram(x,b,"float32")}let d=Jn({inputs:{real:f,imag:h},backend:l});return l.disposeData(f.dataId),l.disposeData(h.dataId),d}let u=o||Qt(i.dtype,a.dtype);if((i.dtype==="string"||a.dtype==="string"||l.shouldExecuteOnCPU([i,a]))&&t!=null){let p=l.tensorMap.get(i.dataId).values,m=l.tensorMap.get(a.dataId).values,f=i.dtype==="string"?I.fromUint8ToStringArray(p):p,h=i.dtype==="string"?I.fromUint8ToStringArray(m):m,[d,g]=t(i.shape,a.shape,f,h,u);return l.makeTensorInfo(g,u,d)}let c=new gu(r,i.shape,a.shape);return l.runWebGPUProgram(c,[i,a],u)}}var aS={};Br(aS,{addImpl:()=>UI,bincountImpl:()=>gP,bincountReduceImpl:()=>xP,castImpl:()=>GI,ceilImpl:()=>WI,concatImpl:()=>yP,equalImpl:()=>HI,expImpl:()=>KI,expm1Impl:()=>qI,floorImpl:()=>jI,gatherNdImpl:()=>bP,gatherV2Impl:()=>wP,greaterEqualImpl:()=>YI,greaterImpl:()=>XI,lessEqualImpl:()=>QI,lessImpl:()=>ZI,linSpaceImpl:()=>CP,logImpl:()=>JI,maxImpl:()=>IP,maximumImpl:()=>tS,minimumImpl:()=>eS,multiplyImpl:()=>Sh,negImpl:()=>SP,notEqualImpl:()=>rS,prodImpl:()=>kP,raggedTensorToTensorImpl:()=>EP,rangeImpl:()=>$P,rsqrtImpl:()=>oS,scatterImpl:()=>AP,sigmoidImpl:()=>DP,simpleAbsImpl:()=>hP,sliceImpl:()=>RP,sparseFillEmptyRowsImpl:()=>FP,sparseReshapeImpl:()=>_P,sparseSegmentReductionImpl:()=>OP,sqrtImpl:()=>PP,squaredDifferenceImpl:()=>nS,stridedSliceImpl:()=>LP,stringNGramsImpl:()=>zP,stringSplitImpl:()=>MP,stringToHashBucketFastImpl:()=>BP,subImpl:()=>iS,tileImpl:()=>VP,topKImpl:()=>UP,transposeImpl:()=>vP,uniqueImpl:()=>WP});function Ch(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}function hP(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}function Ee(r){return(t,e,o,n,s)=>{let i=I.assertAndGetBroadcastShape(t,e),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=y.computeStrides(t),h=y.computeStrides(e),d=I.getBroadcastDims(t,i),g=I.getBroadcastDims(e,i);if(d.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),w=b.slice(-p);d.forEach(E=>w[E]=0);let C=y.locToIndex(w,p,f),S=b.slice(-m);g.forEach(E=>S[E]=0);let k=y.locToIndex(S,m,h);c[x]=r(o[C],n[k])}return[c,i]}}function Dp(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}function nb(r,t,e="float32"){if(e==="complex64"){let n=nb(r,t,"float32"),s=nb(r,t,"float32");return Dp({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function VI(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function dP(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}function GI(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,i]=Ee((a,l)=>a!==l?1:0)(t,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function Ih(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return VI({inputs:{x:n},backend:e});let c=nb(e,n.shape,n.dtype),p=Ih({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=Dp({inputs:{real:p,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=dP({inputs:{input:n},backend:e}),p=Ih({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=VI({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=e.data.get(n.dataId).values,[a,l,u]=GI(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}function Oe(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Ch([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?I.fromUint8ToStringArray(u):u,m=i.dtype==="string"?I.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,d]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(d,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=Ih({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,d=Ih({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(d.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=l.data.get(x.dataId).values,C=l.data.get(b.dataId).values,[S,k,E]=e(i.shape,a.shape,f,h,w,C),A=l.makeTensorInfo(E,"float32",S),D=l.makeTensorInfo(E,"float32",k),O=Dp({inputs:{real:A,imag:D},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(A),l.disposeIntermediateTensorInfo(D),O}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function Rp(r){return(t,e,o,n,s,i)=>{let a=I.assertAndGetBroadcastShape(t,e),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=I.getBroadcastDims(t,a),h=I.getBroadcastDims(e,a),d=I.mergeRealAndImagArrays(o,n),g=I.mergeRealAndImagArrays(s,i),x=t.length,b=y.computeStrides(t),w=e.length,C=y.computeStrides(e);if(f.length+h.length===0)for(let S=0;S<p.length;S++){let k=S%d.length,E=S%g.length,A=r(d[k*2],d[k*2+1],g[E*2],g[E*2+1]);p[S]=A.real,m[S]=A.imag}else for(let S=0;S<p.length;S++){let k=y.indexToLoc(S,u,c),E=k.slice(-x);f.forEach(B=>E[B]=0);let A=y.locToIndex(E,x,b),D=k.slice(-w);h.forEach(B=>D[B]=0);let O=y.locToIndex(D,w,C),M=r(d[A*2],d[A*2+1],g[O*2],g[O*2+1]);p[S]=M.real,m[S]=M.imag}return[p,m,a]}}var UI=Ee((r,t)=>r+t),c7=Rp((r,t,e,o)=>({real:r+e,imag:t+o})),d$e=Oe(Rr,UI,c7);function gP(r,t,e,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function xP(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=et([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function Ar(r){return(t,e,o)=>{let n=y.getTypedArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function sb(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Ch(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=e||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=t(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function un(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Ch(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=e||i.dtype,c=t(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var WI=Ar(r=>Math.ceil(r)),N$e=un(oo,WI);function yP(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?I.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var HI=Ee((r,t)=>r===t?1:0),_$e=Oe(wn,HI,null,"bool");var KI=Ar(r=>Math.exp(r)),M$e=un(no,KI,"float32");var qI=Ar(r=>Math.expm1(r)),W$e=un(so,qI);var jI=Ar(r=>Math.floor(r)),X$e=un(io,jI);function bP(r,t,e,o,n,s,i,a,l){let u=et([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function wP(r,t,e){let o=et(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var XI=Ee((r,t)=>r>t?1:0),nAe=Oe(In,XI,null,"bool");var YI=Ee((r,t)=>r>=t?1:0),uAe=Oe(ao,YI,null,"bool");var ZI=Ee((r,t)=>r<t?1:0),hAe=Oe(vn,ZI,null,"bool");var QI=Ee((r,t)=>r<=t?1:0),bAe=Oe(kn,QI,null,"bool");function CP(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var JI=Ar(r=>Math.log(r)),TAe=un(uo,JI);function IP(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var tS=Ee((r,t)=>Math.max(r,t)),FAe=Oe(co,tS);var eS=Ee((r,t)=>Math.min(r,t)),zAe=Oe(po,eS);var Sh=Ee((r,t)=>r*t),p7=Rp((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),UAe=Oe(mo,Sh,p7);function SP(r,t,e){let o=y.createScalarValue(-1,e);return Sh([],t,o,r,e)}var rS=Ee((r,t)=>r!==t?1:0),ZAe=Oe(Nn,rS,null,"bool");function vP(r,t,e,o,n){let s=t.length,i=y.sizeFromShape(t),a=y.computeStrides(t),l=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function kP(r,t,e,o){let[n,s]=I.computeOutAndReduceShapes(r,o),i=Qt(t,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}var cn=I.RowPartitionType,Fp=class{constructor(t,e,o,n,s,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=I.getRowPartitionTypesHelper(c),this.raggedRank=I.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===cn.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===cn.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case cn.VALUE_ROWIDS:return Fp.getMaxWidthValueRowID(e);case cn.ROW_SPLITS:return Fp.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${cn[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let i=1;i<e;++i){let a=t[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return NP(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;I.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=I.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],i=0;for(let a=0;a<n;++a,i+=e)s.push(i);for(let a=n;a<t;++a)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,i=[];for(let a=0;a<s-1;++a){let l=t[a+1]-t[a],u=Math.min(n,l),c=e[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==t[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,i=[];if(s===0)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<s;++c){let p=t[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=e.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${e.length}`);u=e[p]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case cn.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case cn.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${cn[i]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case cn.FIRST_DIM_SIZE:return t[0];case cn.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case cn.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${cn[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=NP(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(t+1);let l=y.sizeFromShape(a),u=e.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let h=this.defaultValueShape;z(()=>{let d=F(c,h);c=Mn(d,a).dataSync()})}let p=0,m=0,f=0;for(let h=0;h<=u;++h){let d=h<u?e[h]:-1;if(d===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;TP(x,g,b)}if(h>=u){let g=o.length;d=Math.floor(g/l)}if(d>f)if(this.defaultValue.length===1)i.subarray(f*l,d*l).fill(this.defaultValue[0]),f=d;else for(;d>f;){let g=i.slice(f*l);TP(g,c,l),++f}d<0?(p=h+1,m=f):(p=h,m=f,f=m+1)}}};function TP(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function NP(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function EP(r,t,e,o,n,s,i,a,l,u){return new Fp(r,t,e,o,n,s,i,a,l,u).compute()}function $P(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=y.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var oS=Ar(r=>1/Math.sqrt(r)),cDe=un(fo,oS);function AP(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return et(e,t.dtype);let f=et(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let d=[],g=0;for(let x=0;x<i;x++){let b=p[h*i+x];d.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${d} does not index into ${e}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[h*n+x]:f.values[g*n+x]=t.rank===0?m[0]:m[h*n+x]}return f}var DP=Ar(r=>1/(1+Math.exp(-r))),xDe=sb(ho,r=>1/(1+Math.exp(-r)));function RP(r,t,e,o,n){let s=me.isSliceContinous(o,t,e),i=y.sizeFromShape(e),a=y.computeStrides(o);if(s){let p=me.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?I.fromUint8ToStringArray(r):r,u=et(o,n,l),c=et(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,d)=>h+t[d]);c.set(u.get(...f),...m)}return n==="string"?I.fromStringArrayToUint8(c.values):c.values}function FP(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(I.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(I.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(I.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++h[x],m=m&&x>=f,f=x}let d=!0;for(let g=0;g<l;++g){let x=h[g]===0;u[g]=x,d=d&&!x,h[g]=Math.max(h[g],1),g>0&&(h[g]+=h[g-1])}if(d&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=h[l-1],x=y.getArrayFromDType(e,g*p),b=y.getArrayFromDType(n,g),w=new Array(l).fill(0);for(let C=0;C<a;++C){let S=r[C*p],k=w[S],E=(S===0?0:h[S-1])+k;w[S]++;for(let A=0;A<p;++A)x[E*p+A]=r[C*p+A];b[E]=o[C],c[C]=E}for(let C=0;C<l;++C)if(w[C]===0){let k=C===0?0:h[C-1];x[k*p+0]=C;for(let E=1;E<p;++E)x[k*p+E]=0;b[k]=i}return[x,[g,p],b,u,c]}}function _P(r,t,e,o,n){let s=y.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(I.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(I.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(I.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(I.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(I.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let h=[];if(a>0){h[a-1]=1;for(let g=a-2;g>=0;--g)h[g]=h[g+1]*l[g+1]}let d=y.getArrayFromDType(e,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)d[g*a+b]=Math.trunc(x/h[b]),x%=h[b]}return[d,[i,a],l]}function OP(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((w,C)=>w*C,1),h=y.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=0,g=1,x=0,b=n[d];for(;;){let w=0;if(g<a){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(I.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(I.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&h.fill(i,x*u,b*u);for(let C=d;C<g;++C){let S=o[C];if(S<0||S>=l[0])throw new Error(I.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C,o[C],l[0]));for(let k=0;k<u;k++)h[b*u+k]+=r[S*u+k]}if(s)for(let C=0;C<u;C++)h[b*u+C]/=g-d;if(d=g,++g,x=b+1,b=w,g>a)break}return x<p&&h.fill(i,x*u,p*u),[h,m]}var PP=Ar(r=>Math.sqrt(r)),ADe=sb(go,r=>Math.sqrt(r));var nS=Ee((r,t)=>{let e=r-t;return e*e}),ODe=Oe(xo,nS);function LP(r,t,e,o){let n=et(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var sS=class{constructor(t,e,o,n,s,i){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let d=o[n+a],g=0,x=b=>b.forEach(w=>d[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(t[m+b]),x(this.separator);if(p>0){x(t[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function zP(r,t,e,o,n,s,i,a){return new sS(e,o,n,s,i,a).compute(r,t)}function m7(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function MP(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;m7(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function BP(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var iS=Ee((r,t)=>r-t),f7=Rp((r,t,e,o)=>({real:r-e,imag:t-o})),jDe=Oe(yo,iS,f7);function VP(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=et(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var vh=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function GP(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));GP(r,t,m,f)}let n=r[t],s=e,i=o;for(y.swap(r,e,t),vh(r[o],n)>0&&y.swap(r,e,o);s<i;){for(y.swap(r,s,i),s++,i--;vh(r[s],n)<0;)s=s+1;for(;vh(r[i],n)>0;)i=i-1}vh(r[e],n)===0?y.swap(r,e,i):(i=i+1,y.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function UP(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(e,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,w)=>h[w]={value:b,index:w}),o<h.length&&(GP(h,o),h=h.slice(0,o)),n&&h.sort(vh);let d=p*o,g=l.subarray(d,d+o),x=u.subarray(d,d+o);for(let b=0;b<o;b++)g[b]=h[b].value,x[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[et(c,e,l),et(c,"int32",u)]}function WP(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i={},a=new Int32Array(e[n]),l=new jt(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let d;if(c)d=r[h].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,h,b));d=g.join(",")}if(i[d]!==void 0)a[h]=i[d];else{let g=Object.keys(i).length;i[d]=g,a[h]=g,u.push(h)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new jt(p,o);u.forEach((h,d)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,h,x),g,d,x)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}var{addImpl:HP,castImpl:KP,ceilImpl:qP,concatImpl:jP,equalImpl:XP,expImpl:YP,expm1Impl:ZP,floorImpl:QP,gatherNdImpl:JP,gatherV2Impl:t3,greaterEqualImpl:e3,greaterImpl:r3,lessEqualImpl:o3,lessImpl:n3,logImpl:s3,maxImpl:i3,maximumImpl:a3,minimumImpl:l3,multiplyImpl:u3,negImpl:c3,notEqualImpl:p3,prodImpl:m3,rangeImpl:f3,rsqrtImpl:h3,scatterImpl:d3,simpleAbsImpl:g3,sliceImpl:x3,stridedSliceImpl:y3,stringNGramsImpl:b3,subImpl:w3,tileImpl:C3,topKImpl:I3,transposeImpl:S3,uniqueImpl:qRe}=aS;var h7=Vt({opType:lt.ABS,cpuKernelImpl:g3}),v3={kernelName:fn,backendName:"webgpu",kernelFunc:h7};var d7=Yt({opType:wt.ADD,cpuKernelImpl:HP,supportsComplex:!0}),k3={kernelName:Rr,backendName:"webgpu",kernelFunc:d7};var ib=class{constructor(t){this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t[0],this.variableNames=t.map((e,o)=>`T${o}`),this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let t=[];this.variableNames.forEach(n=>{t.push(`let v${n} = get${n}ByOutputCoords(coords);`)});let e=this.variableNames.map(n=>`v${n}`).join(" + ");return`
      ${ut("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${t.join(`
        `)}
            setOutputAtIndex(flatIndex, ${e});
          }
        }
      }
    `}};function g7(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return Be({inputs:{x:o[0]},backend:e});let n=o.map(a=>a.dtype).reduce((a,l)=>Qt(a,l)),s=o.map(a=>a.shape),i=new ib(s);return e.runWebGPUProgram(i,o,n)}var T3={kernelName:aa,backendName:"webgpu",kernelFunc:g7};var _p=class{constructor(t,e,o){this.workGroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;let n=[e];this.op=o==="min"?"<":">";let[s,i]=I.computeOutAndReduceShapes(t,n);this.outputShape=s.length===0?[1]:s,this.dispatchLayout=ft(this.outputShape),y.sizeFromShape(i)<32||y.sizeFromShape(s)>1e3?(this.type="plain",this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize)):(this.type="shared",this.dispatch=st(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=t,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let t=()=>this.inputShape.length===1?"uniforms.xShape":`uniforms.xShape.${sn(this.inputShape.length-1)}`,e=()=>{let o="";if(this.outputShape.length===1)this.inputShape.length!==1&&(o+="outputCoords,");else for(let n=0;n<this.outputShape.length;n++)o+=`outputCoords.${sn(n)},`;return o};return this.type==="shared"?`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${this.workGroupSize[0]}>;
      var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
    `}

      ${ut("index")} {
        let outputIndex = index / i32(workGroupSizeX);
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + i32(workGroupSizeX)) {
          let candidate = getX(${e()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), workGroupSizeX);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `:`
      ${ut("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${e()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${e()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `}};var ab=class{constructor(t,e){this.variableNames=["A"],this.workGroupSize=[16,16,1];let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[e[n]];this.outputShape=o,this.dispatchLayout={x:[0],y:[1]},this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){return`
      const TILE_DIM = ${this.workGroupSize[0]};
      var<workgroup> tile : array<array<f32, ${this.workGroupSize[0]+1}>, ${this.workGroupSize[0]}>;
      ${rl()}
      fn _start(@builtin(local_invocation_id) localId : vec3<u32>,
                @builtin(workgroup_id) workgroupId : vec3<u32>) {
        var x = i32(workgroupId.x) * TILE_DIM + i32(localId.x);
        var y = i32(workgroupId.y) * TILE_DIM + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = A[y * width + x];
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * TILE_DIM + i32(localId.x);
        y = i32(workgroupId.x) * TILE_DIM + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}};var lb=class{constructor(t,e){this.variableNames=["A"],this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0;let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[e[n]];this.outputShape=o,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.newDim=e,this.shaderKey=`transpose_${e}`}getUserCode(){let t=Fe(this.outputShape.length),e=x7(this.newDim);return`
      ${ut("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let resRC = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${t}(${e}), uniforms.aShape)]);
          }
        }
      }
    `}};function x7(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=new Array(t);for(let o=0;o<r.length;o++)e[r[o]]=`resRC.${sn(o)}`;return e.join()}function Dr(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];if(e.shouldExecuteOnCPU([n])){let p=i.tensorMap.get(n.dataId).values,m=S3(p,n.shape,n.dtype,s,l);return e.makeTensorInfo(l,n.dtype,m)}if(n.shape.length===2&&y.arraysEqual(s,[1,0])){let c=new ab(n.shape,s);return i.runWebGPUProgram(c,[n],n.dtype)}let u=new lb(n.shape,s);return i.runWebGPUProgram(u,[n],n.dtype)}var N3={kernelName:Fo,backendName:"webgpu",kernelFunc:Dr};function y7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Dr({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=new _p(l.shape,i[0],"max"),p=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],m=e.runWebGPUProgram(c,[l],"int32",p);return u.forEach(f=>e.disposeData(f.dataId)),m}var E3={kernelName:os,backendName:"webgpu",kernelFunc:y7};function b7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Dr({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=new _p(l.shape,i[0],"min"),p=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],m=e.runWebGPUProgram(c,[l],"int32",p);return u.forEach(f=>e.disposeData(f.dataId)),m}var $3={kernelName:ns,backendName:"webgpu",kernelFunc:b7};var w7=Yt({opType:wt.ATAN2}),A3={kernelName:hn,backendName:"webgpu",kernelFunc:w7};var kh=class{constructor(t,e){this.variableNames=["x"],this.uniforms="stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workGroupSize=[128,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`pool2D_${e}`,this.poolType=e}getUserCode(){let t="resultValue = max(value, resultValue);";this.poolType==="avg"&&(t="resultValue = resultValue + value; count = count + 1.0;");let e="resultValue";return this.poolType==="avg"&&(e="resultValue / count"),`
      ${ut("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};
          var count = 0.0;

          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, coords[3]);
              ${t}
            }
          }

          setOutputAtIndex(index, ${e});
        }
      }
    `}};var ub=class{constructor(t){this.variableNames=["x"],this.uniforms="stride : vec2<i32>,",this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.stride;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}};var cb=class{constructor(t,e){this.workGroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[t.batchSize,t.inSize];let[o]=I.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=o.length===0?[1]:o,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=e,this.shaderKey=`reduce_${e}`}getUserCode(){let t="",e="0.0";this.reduceType==="min"||this.reduceType==="max"?(t=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType==="min"?"<":">"} bestValue)
           {  bestValue = candidate; }`,e="f32(x[offset])"):this.reduceType==="sum"||this.reduceType==="mean"?t=" bestValue = bestValue + candidate; ":this.reduceType==="prod"&&(t=" bestValue = bestValue * candidate; ",e="1.0");let o=this.reduceType==="mean"?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length===1?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${ut("index")} {
         let outputIndex = index / i32(workGroupSizeX);
         let offset = getOffset(outputIndex);
         var bestValue = ${e};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), workGroupSizeX);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + i32(workGroupSizeX)) {
           let candidate = f32(x[offset + k]);
           ${t}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), workGroupSizeX);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${t}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${o}
        }
       }
     `}};function Js(r,t,e,o,n){let s=r.shape.length,i=[],a=y.parseAxisParam(t,r.shape),l=a,u=I.getAxesPermutation(l,s),c=r;u!=null&&(c=Dr({inputs:{x:r},attrs:{perm:u},backend:n}),l=I.getInnerMostAxes(l.length,s),i.push(c)),I.assertAxesAreInnerMostDims(o,l,s);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=p;e&&(f=I.expandShapeToKeepDim(p,a));let h;if((o==="max"||o==="prod")&&n.shouldExecuteOnCPU([c])){let d=n.tensorMap.get(c.dataId).values;switch(o){case"max":let g=i3(d,y.sizeFromShape(m),f,r.dtype);h=n.makeTensorInfo(f,r.dtype,g);break;case"prod":let{outVals:x,outShape:b,outDtype:w}=m3(c.shape,c.dtype,d,l);h=n.makeTensorInfo(b,w,x);break;default:throw new Error(`${o} CPU implementation is not yet supported.`)}}else{let d=y.sizeFromShape(m),x=y.sizeFromShape(c.shape)/d,b={windowSize:d,inSize:d,batchSize:x,outSize:1},w=o==="mean"?"float32":$i(r.dtype),C=[{type:"int32",data:[d]}],S=new cb(b,o),k=n.runWebGPUProgram(S,[c],w,C);i.push(k),h=bt({inputs:{x:k},attrs:{shape:f},backend:n})}return i.forEach(d=>n.disposeData(d.dataId)),h}function Th(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o;return Js(n,s,i,"max",e)}var D3={kernelName:xs,backendName:"webgpu",kernelFunc:Th};function lS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{keepDims:s,axis:i}=o;return Js(n,i,s,"mean",e)}var R3={kernelName:bs,backendName:"webgpu",kernelFunc:lS};function pb(r,t,e,o){if(t.filterWidth===1&&t.filterHeight===1&&y.arraysEqual(t.inShape,t.outShape))return Be({inputs:{x:r},backend:o});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&t.batchSize===1&&t.padInfo.type==="VALID"){let i=r.shape.length,a=bt({inputs:{x:r},backend:o,attrs:{shape:[r.shape[i-3]*r.shape[i-2],r.shape[i-1]]}}),l;e==="avg"?l=lS({inputs:{x:a},backend:o,attrs:{axis:0,keepDims:!1}}):(y.assert(e==="max",()=>`Invalid pool type ${e}`),l=Th({inputs:{x:a},backend:o,attrs:{reductionIndices:0,keepDims:!1}}));let u=bt({inputs:{x:l},backend:o,attrs:{shape:t.outShape}});return o.disposeData(a.dataId),o.disposeData(l.dataId),u}let n,s=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return t.filterHeight===1&&t.filterWidth===1?n=new ub(t):(e==="avg"?n=new kh(t,"avg"):(y.assert(e==="max",()=>`Invalid pool type ${e}`),n=new kh(t,"max")),s.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),o.runWebGPUProgram(n,[r],r.dtype,s)}function C7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1,c=I.computePool2DInfo(n.shape,s,i,u,a,l);return pb(n,c,"avg",e)}var F3={kernelName:ss,backendName:"webgpu",kernelFunc:C7};function I7(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return Ap({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var _3={kernelName:is,backendName:"webgpu",kernelFunc:I7};var mb=class{constructor(t,e){this.variableNames=["source"],this.workPerThread=1,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.rank=e.length,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.start=t,this.uniforms=`start : ${Fe(t.length)}, `,this.shaderKey="slice"}getUserCode(){let t=Fe(this.rank),e=S7(this.rank),o;return this.start.length===1?o=this.outputShape.map((s,i)=>"sourceLoc = uniforms.start + coords;"):o=this.outputShape.map((s,i)=>`sourceLoc.${uS[i]} = uniforms.start.${sn(i)} + coords.${uS[i]};`),`
      ${ut("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${t};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${e}));
        }
      }
    `}},uS=["x","y","z","w","u","v"];function S7(r){if(r===1)return"sourceLoc";if(r<=6)return uS.slice(0,r).map(t=>`sourceLoc.${t}`).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}function ts(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=me.parseSliceParams(n,s,i);if(me.assertParamsValid(n,a,l),e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.tensorMap.get(n.dataId),m=x3(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}if(y.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);let u=new mb(a,l),c=[{type:"int32",data:a}];return e.runWebGPUProgram(u,[n],n.dtype,c)}var O3={kernelName:Fn,backendName:"webgpu",kernelFunc:ts};var v7=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let a=s.reduce((b,w)=>b*w),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=[],h=bt({inputs:{x:n},backend:e,attrs:{shape:l}}),d=Dr({inputs:{x:h},backend:e,attrs:{perm:u}}),g=bt({inputs:{x:d},backend:e,attrs:{shape:c}}),x=ts({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(d),f.push(g),f.forEach(b=>e.disposeData(b.dataId)),x},P3={kernelName:as,backendName:"webgpu",kernelFunc:v7};var cS=Yt({opType:wt.NOT_EQUAL,dtype:"bool",cpuKernelImpl:p3}),L3={kernelName:Nn,backendName:"webgpu",kernelFunc:cS};function ta(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.tensorMap.get(o.dataId);return Be({inputs:{x:n.complexTensorInfos.real},backend:e})}var z3={kernelName:yi,backendName:"webgpu",kernelFunc:ta};function M3(r,t){let e=new ln(r.shape,lt.TO_INT),o=t.runWebGPUProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function pS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Be({inputs:{x:n},backend:e});let i=te(n.shape),a=pS({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=Jn({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeData(a.dataId),l}if(n.dtype==="complex64"){let i=ta({inputs:{input:n},backend:e}),a=pS({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeData(i.dataId),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=Be({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let i=e.tensorMap.get(n.dataId).values,[a,l,u]=KP(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}if(s==="int32")return M3(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=cS({inputs:{a:n,b:i},backend:e});return e.disposeData(i.dataId),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var B3={kernelName:ro,backendName:"webgpu",kernelFunc:pS};var k7=Vt({opType:lt.CEIL,cpuKernelImpl:qP}),V3={kernelName:oo,backendName:"webgpu",kernelFunc:k7};var fb=class{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workGroupSize=[64,1,1],this.isVec4=!0,this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${ut("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue : vec4<f32>;
          for (var i = 0; i < 4; i = i + 1) {
            if (isnan(value[i])) {
              clampedValue[i] = value[i];
            } else {
              clampedValue[i] = clamp(value[i], uniforms.minVal, uniforms.maxVal);
            }
          }

          setOutputAtIndex(index, clampedValue);
        }
      }
    `}};var hb=class{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${ut("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}};function T7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a,l=[{type:"float32",data:[s]},{type:"float32",data:[i]}];return y.sizeFromShape(n.shape)%4===0?a=new fb(n.shape):a=new hb(n.shape),e.runWebGPUProgram(a,[n],n.dtype,l)}var G3={kernelName:dn,backendName:"webgpu",kernelFunc:T7};var db=class{constructor(t){this.uniforms="",this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=I.computeOutShape(t,1),this.variableNames=t.map((e,o)=>`T${o}`),this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.offsetLength=t.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){let t=[];if(this.offsetLength>0){t.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let s=1;s<this.offsetLength;s++)t.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s-1})); }`);let o=this.offsetLength,n=this.offsetLength-1;t.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`)}else t.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${ut("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${t.join(`
        `)}
          }
        }
      }
    `}};function xu(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.tensorMap.get(o.dataId);return Be({inputs:{x:n.complexTensorInfos.imag},backend:e})}var U3={kernelName:xa,backendName:"webgpu",kernelFunc:xu};function Op(r,t,e){let o=r[0].dtype;if(o==="complex64"){let h=r.map(w=>ta({inputs:{input:w},backend:e})),d=r.map(w=>xu({inputs:{input:w},backend:e})),g=Op(h,t,e),x=Op(d,t,e),b=Jn({inputs:{real:g,imag:x},backend:e});return h.forEach(w=>e.disposeData(w.dataId)),d.forEach(w=>e.disposeData(w.dataId)),e.disposeData(g.dataId),e.disposeData(x.dataId),b}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let h=r.map(S=>{let k=y.sizeFromShape(S.shape.slice(t));return bt({inputs:{x:S},backend:e,attrs:{shape:[-1,k]}})}),d=h.map(S=>({vals:e.readSync(S.dataId),shape:S.shape})),g=I.computeOutShape(h.map(S=>S.shape),1),x=h[0].shape[0]===1,b=jP(d,g,o,x),w=I.computeOutShape(r.map(S=>S.shape),t),C=e.makeTensorInfo(w,o,b);return h.forEach(S=>e.disposeData(S.dataId)),C}let s=e.device.limits.maxStorageBuffersPerShaderStage-1;if(r.length>s){let h=[];for(let g=0;g<r.length;g+=s){let x=r.slice(g,g+s);h.push(Op(x,t,e))}let d=Op(h,t,e);for(let g of h)e.disposeData(g.dataId);return d}let{tensors2D:i,outShape:a}=N7(r,t,e),l=i.map(h=>h.shape),u=new db(l),c=[],p=new Array(l.length-1);if(p.length>0){p[0]=l[0][1],c.push({type:"int32",data:[p[0]]});for(let h=1;h<p.length;h++)p[h]=p[h-1]+l[h][1],c.push({type:"int32",data:[p[h]]})}let m=e.runWebGPUProgram(u,i,i[0].dtype,c);i.forEach(h=>e.disposeData(h.dataId));let f=bt({inputs:{x:m},backend:e,attrs:{shape:a}});return e.disposeData(m.dataId),f}function N7(r,t,e){let o=I.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>bt({inputs:{x:s},backend:e,attrs:{shape:[y.sizeFromShape(s.shape.slice(0,t)),y.sizeFromShape(s.shape.slice(t))]}})),outShape:o}}function mS(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=I.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return Be({inputs:{x:a[0]},backend:e});let l=a.map(u=>u.shape);return I.assertParamsConsistent(l,s),Op(a,s,e)}var W3={kernelName:ls,backendName:"webgpu",kernelFunc:mS};function E7(r,t,e,o,n=!1,s=null,i=!1,a=4,l=4,u=4){let c=D=>{switch(D){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},p=D=>{switch(D){case 1:return"return W[row * uniforms.wShape[3] + colIn];";case 4:return"return W[row * uniforms.wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},m=r?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,f=r?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,h=r?"uniforms.xShape[1]":"uniforms.xShape[2]",d=r?"uniforms.xShape[2]":"uniforms.xShape[3]",g=r?"row":"col",x=r?"col":"row",b=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
      let xCh = ${x} % inChannels;
      var resData = ${Ne(a)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${h} && xCol >= 0 && xCol < ${d}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${c(a)}
      }
      return resData;`,w=r?t&&o?`
      let col = colIn * ${a};
      ${b}`:`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${Ne(a)}(0.0);`:o&&e?`
      let col = colIn * ${a};
      ${b}`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${Ne(a)}(0.0);`,C=`${p(l)}`,S=Ne(u),k=r?Ne(a):Ne(l),E=r?Ne(l):Ne(a);return`
      ${$r(s,i,u===4,4)}
      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${k} {
        ${r?w:C}
      }

      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${E} {
        ${r?C:w}
      }

      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${S}) {
        let col = colIn * ${u};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${f}
        ${an(n,s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}var gb=class{constructor(t,e,o,n,s=!1,i=null,a=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.outShape,this.isChannelsLast=t.dataFormat==="channelsLast",this.isVec4=((t.inChannels%4===0||t.inChannels%3===0)&&this.isChannelsLast||t.outWidth%4===0&&!this.isChannelsLast)&&t.outChannels%4===0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workGroupSize=Xy(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=Yy(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread),this.isVec4?(this.isChannelsLast&&t.inChannels%4!==0?(this.innerElementSize=3,this.variableTypes=["f32","vec4<f32>"]):(this.innerElementSize=4,this.variableTypes=["vec4<f32>","vec4<f32>"]),s&&(this.variableNames.push("bias"),this.variableTypes.push("vec4<f32>")),a&&(this.variableNames.push("preluActivationWeights"),this.variableTypes.push("vec4<f32>"))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights")),this.addBias=s,this.activation=i,this.hasPreluActivationWeights=a,this.tileAOuter=this.workGroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workGroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workGroupSize[0]*this.innerElementSize,this.workGroupSize[1]),this.fitAOuter=e%this.tileAOuter===0,this.fitBOuter=o%this.tileBOuter===0,this.fitInner=n%this.tileInner===0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}`}getUserCode(){let t=this.isVec4?hu(this.elementsPerThread,this.workGroupSize,!this.isChannelsLast,this.tileInner):du(this.elementsPerThread,this.workGroupSize,!this.isChannelsLast,this.tileInner),e=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${E7(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,e[0],e[1],e[2])}
    ${t}
  `}};function H3(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function $7({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=e.dataFormat==="channelsLast",u=!l,c=!1,p=l&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&e.padInfo.type==="VALID",m=[],f,h;if(p){let x=e.inHeight*e.inWidth*e.inChannels;f=bt({inputs:{x:r},backend:o,attrs:{shape:[1,e.batchSize,x]}}),h=bt({inputs:{x:t},backend:o,attrs:{shape:[1,x,e.outChannels]}})}else f=bt({inputs:{x:r},backend:o,attrs:{shape:l?[e.batchSize,e.inHeight*e.inWidth,e.inChannels]:[e.batchSize,e.inChannels,e.inHeight*e.inWidth]}}),h=bt({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});if(m.push(f),m.push(h),s!=null){let x=H3(s.shape,l);x!=null&&(s=bt({inputs:{x:s},backend:o,attrs:{shape:x}}),m.push(s))}if(n!=null){let x=H3(n.shape,l);x!=null&&(n=bt({inputs:{x:n},backend:o,attrs:{shape:x}}),m.push(n))}let d=Ap({a:l?f:h,b:l?h:f,transposeA:u,transposeB:c,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),g=bt({inputs:{x:d},backend:o,attrs:{shape:e.outShape}});m.push(d);for(let x of m)o.disposeData(x.dataId);return g}function xb({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=n!=null,u=s!=null,c=e.dataFormat==="channelsLast";if(c&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&e.padInfo.type==="VALID"||e.filterHeight===1&&e.filterWidth===1&&e.dilationHeight===1&&e.dilationWidth===1&&e.strideHeight===1&&e.strideWidth===1&&(e.padInfo.type==="SAME"||e.padInfo.type==="VALID"))return $7({x:r,filter:t,convInfo:e,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});let m=c?e.outHeight*e.outWidth:e.outChannels,f=c?e.outChannels:e.outHeight*e.outWidth,h=e.filterHeight*e.filterWidth*e.inChannels,d=[e.padInfo.top,e.padInfo.left],g=[{type:"int32",data:[e.filterHeight,e.filterWidth]},{type:"int32",data:[...d]},{type:"int32",data:[e.strideHeight,e.strideWidth]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]},{type:"int32",data:[m]},{type:"int32",data:[f]},{type:"int32",data:[h]}],x=new gb(e,m,f,h,l,a,u),b=[],w=[r,t];l&&(!c&&n.shape.length===1&&(n=bt({inputs:{x:n},backend:o,attrs:{shape:[n.shape[0],1,1]}}),b.push(n)),w.push(n)),u&&(!c&&s.shape.length===1&&(s=bt({inputs:{x:s},backend:o,attrs:{shape:[s.shape[0],1,1]}}),b.push(s)),w.push(s)),a==="leakyrelu"&&(g.push({type:"float32",data:[i]}),x.uniforms+=" alpha : f32,");let C=o.runWebGPUProgram(x,w,r.dtype,g);for(let S of b)o.disposeData(S.dataId);return C}function A7(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=e,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p);return xb({x:n,filter:s,convInfo:m,backend:o})}var K3={kernelName:us,backendName:"webgpu",kernelFunc:A7};function D7(r=4){let t=s=>{switch(s){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${s} is not supported.`)}},o=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${Ne(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${Ne(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${Ne(r)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Ne(r)} {
    let col = colIn * ${r};
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Ne(r)} {
    let col = colIn * ${r};
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${t(r)}
    }
    return ${Ne(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${Ne(r)}) {
    let col = colIn * ${r};
    if (row < uniforms.dimAOuter && (col + ${r-1}) < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`}var yb=class{constructor(t){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.inShape,y.assert(t.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),this.isVec4=t.inChannels%4===0&&t.outChannels%4===0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workGroupSize=Xy(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=Yy(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread),this.isVec4&&(this.variableTypes=["vec4<f32>","f32"]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let t=this.isVec4?hu(this.elementsPerThread,this.workGroupSize):du(this.elementsPerThread,this.workGroupSize);return`
    ${D7(this.isVec4?4:1)}
    ${t}
    `}};var bb=class{constructor(t){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.isChannelsLast=t.dataFormat==="channelsLast",this.shaderKey=`conv2DDerInput_${this.isChannelsLast}`}getUserCode(){let t=this.isChannelsLast?1:2,e=this.isChannelsLast?2:3,o=this.isChannelsLast?3:1;return`
    ${ut("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${t}]), coords[${e}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = dyR;

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = dyC;

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              if (${this.isChannelsLast}) {
                let xValue = getDy(batch, idyR, idyC, d2);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              } else {
                let xValue = getDy(batch, d2, idyR, idyC);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              }

            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}};function R7(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(u),m=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=[{type:"int32",data:[m.filterHeight,m.filterWidth]},{type:"int32",data:[m.filterHeight-1-m.padInfo.top,m.filterWidth-1-m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize,m.outHeight,m.outWidth,m.outChannels]}],h;if(P().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE"))h=new bb(m);else{h=new yb(m);let d=m.inShape[1]*m.inShape[2],g=m.inShape[3],x=m.filterHeight*m.filterWidth*m.outChannels;f.push({type:"uint32",data:[d]},{type:"uint32",data:[g]},{type:"uint32",data:[x]})}return e.runWebGPUProgram(h,[n,s],"float32",f)}var q3={kernelName:cs,backendName:"webgpu",kernelFunc:R7};var F7=Vt({opType:lt.COS}),j3={kernelName:gn,backendName:"webgpu",kernelFunc:F7};var _7=Vt({opType:lt.COSH}),X3={kernelName:xn,backendName:"webgpu",kernelFunc:_7};var wb=class{constructor(t,e,o,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workGroupSize=[64,1,1],this.size=!0;let[s]=e;this.outputShape=[s,o[0],o[1],t],this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.methodId=n==="bilinear"?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[t,e]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[o,n,s]=this.cropHeightBiggerThan1?[`(${t} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${t} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${t}`],[i,a,l]=this.cropWidthBiggerThan1?[`(${e} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${e} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${e}`];return`
    ${ut("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${i});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${a};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${l};
        if( in_x < 0.0 || in_x > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}};var O7=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new wb(n.shape[3],s.shape,a,l),p=[{type:"float32",data:[u]}];return e.runWebGPUProgram(c,[n,s,i],"float32",p)},Y3={kernelName:ma,backendName:"webgpu",kernelFunc:O7};var yu;(function(r){r.Prod="*",r.Sum="+"})(yu||(yu={}));var Nh=class{constructor(t,e,o,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0;let s=128;this.workGroupSize=[s,1,1],this.outputShape=e,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.exclusive=o,this.reverse=n,this.op=t,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let t=this.outputShape.length,e=this.op===yu.Prod?"1.0":"0.0",o=this.exclusive?e:`getX(${Z3(t,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],s="",i="";return this.exclusive?(s=this.reverse?`end != ${n-1}`:"end != 0",i=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${n}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`
      ${ut("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${Q3(t,"coords",this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${i};
           ${Q3(t,"coords",this.op)} = idx;
           val ${this.op}= getX(${Z3(t,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}};function Z3(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function Q3(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function Cb(r,t,e,o,n,s){let i=t.shape.length,a=I.getAxesPermutation([o],i),l=t;a!=null&&(l=Dr({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=I.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=Be({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new Nh(r,l.shape,!1,s),h=p,d=[{type:"float32",data:[m]}];p=e.runWebGPUProgram(f,[p],p.dtype,d),e.disposeData(h.dataId)}if(n){let m=new Nh(r,l.shape,n,s),f=p,h=[{type:"float32",data:[0]}];p=e.runWebGPUProgram(m,[p],p.dtype,h),e.disposeData(f.dataId)}if(a!=null){let m=I.getUndoAxesPermutation(a),f=Dr({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeData(p.dataId),e.disposeData(l.dataId),f}return p}function P7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return Cb(yu.Prod,n,e,s,i,a)}var J3={kernelName:pa,backendName:"webgpu",kernelFunc:P7};function L7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return Cb(yu.Sum,n,e,s,i,a)}var tL={kernelName:ps,backendName:"webgpu",kernelFunc:L7};var Ib=class{constructor(t,e){this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`depthToSpace_${e}`,this.dataFormat=e}getUserCode(){return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function z7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],d=[{type:"int32",data:[s]}],g=new Ib(h,i);return e.runWebGPUProgram(g,[n],n.dtype,d)}var eL={kernelName:fa,backendName:"webgpu",kernelFunc:z7};var Sb=class{constructor(t,e,o,n=!1,s=null,i=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workGroupSize=[16,16,1],this.outputShape=t,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),n&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=s,this.hasPreluActivation=i,this.filterHeight=e,this.filterWidth=o,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let t=this.filterWidth*this.filterHeight,e=this.workGroupSize[0]*this.workGroupSize[1]*this.workGroupSize[2],o=this.workGroupSize[1]+this.filterHeight-1,n=this.workGroupSize[0]+this.filterWidth-1;return`
      ${$r(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${rl()}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(num_workgroups) NumWorkgroups: vec3<u32>) {
        localId = LocalId;
        globalId = GlobalId;
        let localIndex = i32(LocalIndex);
        numWorkgroups = NumWorkgroups;
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workGroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workGroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = localIndex;
        ${t<e?`if (wIndex < ${t})`:`for(; wIndex < ${t}; wIndex = wIndex + ${e})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${an(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};var Pp=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workGroupSize=[4,4,4],this.isVec4=!0,this.outputShape=t.outShape,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[4,4,1]),y.assert(t.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}`}getUserCode(){let t=4+this.convInfo.filterWidth-1;return`
      ${$r(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, row, col, channel);
        }
        return value;
      }
      ${rl()}
      fn _start(@builtin(global_invocation_id) globalId: vec3<u32>) {
        let batch = i32(globalId.z) / uniforms.outShape[1];
        let r = i32(globalId.z) % uniforms.outShape[1];
        let c = i32(globalId.y) * 4;
        let d1 = i32(globalId.x) * 4;
        let xRCCorner = vec2<i32>(r, c) - uniforms.pad;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${t}>;
        var dotProd : array<vec4<f32>, 4>;
        dotProd[0] = vec4<f32>(0.0);
        dotProd[1] = vec4<f32>(0.0);
        dotProd[2] = vec4<f32>(0.0);
        dotProd[3] = vec4<f32>(0.0);

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          for (var i = 0; i < ${t}; i++)
          {
            xVals[i] = readX(batch, xR, xCCorner + i, d1);
          }
          for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
            let wValue = getW(wR, wC, d1, 0);
            dotProd[0] = dotProd[0] + xVals[0 + wC] * wValue;
            dotProd[1] = dotProd[1] + xVals[1 + wC] * wValue;
            dotProd[2] = dotProd[2] + xVals[2 + wC] * wValue;
            dotProd[3] = dotProd[3] + xVals[3 + wC] * wValue;
          }
        }

        for (var i = 0; i < 4; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${an(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}};var Lp=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,`,this.workGroupSize=[256,1,1],this.outputShape=t.outShape,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.isChannelsLast=t.dataFormat==="channelsLast",e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let t=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${$r(this.activation,this.hasPreluActivation,!1,4)}

      ${ut()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.stride - uniforms.pad;
        let d2 = coords[${this.isChannelsLast?3:1}];
        let channelMul = uniforms.wShape[3];
        let d1 = d2 / channelMul;
        let q = d2 % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;
        let inputRowEnd = inputRowStart + uniforms.filterHeight *
            uniforms.dilation[0];
        let inputColEnd = inputColStart + uniforms.filterWidth *
            uniforms.dilation[1];

        // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
        // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
        // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
        // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
        var value = 0.0;

        // Extract if checking out of for loop for performance.
        if (inputRowStart >= 0 && inputColStart >= 0 &&
          inputRowEnd < uniforms.inDims[0] &&
              inputColEnd < uniforms.inDims[1]) {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                let xVal = ${t};
                let wVal = getW(wR, wC, d1, q);
                value = value + xVal * wVal;
              }
            }
          } else {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              if (xR < 0 || xR >= uniforms.inDims[0]) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                if (xC < 0 || xC >= uniforms.inDims[1]) {
                  continue;
                }

                let xVal = ${t};
                let wVal = getW(wR, wC, d1, q);
                value = value + xVal * wVal;
              }
            }
          }
          ${an(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};function M7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(l),m=u;m==null&&(m=[1,1]);let f=I.computeConv2DInfo(n.shape,s.shape,i,m,a,c,!0,p),h=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],d=f.dataFormat==="channelsLast",g;return!d&&f.inHeight>16&&f.inWidth>16&&f.strideHeight===1&&f.strideWidth===1&&f.dilationWidth===1&&f.dilationHeight===1&&f.inChannels===f.outChannels?g=new Sb(f.outShape,f.filterHeight,f.filterWidth):d&&f.inHeight>4&&f.inWidth>4&&f.strideHeight===1&&f.strideWidth===1&&f.inChannels===f.outChannels&&f.dilationHeight===1&&f.dilationWidth===1&&f.inChannels%4===0?g=new Pp(f):(g=new Lp(f),h.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),e.runWebGPUProgram(g,[n,s],n.dtype,h)}var rL={kernelName:ms,backendName:"webgpu",kernelFunc:M7};var fS=Yt({opType:wt.MUL,cpuKernelImpl:u3,supportsComplex:!0}),oL={kernelName:mo,backendName:"webgpu",kernelFunc:fS};function Eh(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return Js(n,s,i,"sum",e)}var nL={kernelName:As,backendName:"webgpu",kernelFunc:Eh};function B7(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[g]),w;I.isIdentityPermutation(x)?w=s[g]:(w=Dr({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let S=0;S<b.length;++S)C.splice(b[S],0,1);y.arraysEqual(w.shape,C)||(w=bt({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=fS({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=Eh({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeData(d.dataId);return m}var sL={kernelName:Ou,backendName:"webgpu",kernelFunc:B7};var V7=Vt({opType:lt.ELU}),iL={kernelName:bn,backendName:"webgpu",kernelFunc:V7};var G7=Yt({opType:wt.EQUAL,dtype:"bool",cpuKernelImpl:XP}),aL={kernelName:wn,backendName:"webgpu",kernelFunc:G7};var hS=Vt({opType:lt.EXP,cpuKernelImpl:YP,dtype:"float32"}),lL={kernelName:no,backendName:"webgpu",kernelFunc:hS};function vb(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),bt({inputs:{x:s},backend:o,attrs:{shape:a}})}var uL={kernelName:fs,backendName:"webgpu",kernelFunc:vb};var U7=Vt({opType:lt.EXPM1,cpuKernelImpl:ZP}),cL={kernelName:so,backendName:"webgpu",kernelFunc:U7};var kb=class{constructor(t){this.outputShape=[],this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}};var pL={kernelName:ga,backendName:"webgpu",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new kb(e.shape);return o.runWebGPUProgram(n,[e],e.dtype)}};var W7=Vt({opType:lt.FLOOR,cpuKernelImpl:QP}),mL={kernelName:io,backendName:"webgpu",kernelFunc:W7};var H7=Yt({opType:wt.INT_DIV,dtype:"int32"}),fL={kernelName:Cn,backendName:"webgpu",kernelFunc:H7};var Tb=class{constructor(t,e,o=!1){this.isFromPixels=!0,this.outputShape=[0],this.variableNames=[],this.workGroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[e,1,1]),this.importVideo=o,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let t=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`
      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};
      ${ut("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${t};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}};var hL={kernelName:cl,backendName:"webgpu",kernelFunc:K7},zp,dS=P().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"),Nb=new Map;function K7(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o;if(n==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,l=typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&n instanceof OffscreenCanvas,u=typeof ImageBitmap<"u"&&n instanceof ImageBitmap,[c,p]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],m=[p,c,s],f=P().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&i,h=i||a;if(u||l||h){let b;if(f){let O=n;if(!Nb.has(O)||Nb.get(O).expired){let M={source:O};Nb.set(O,e.device.importExternalTexture(M))}b={width:c,height:p,format:null,usage:null,texture:Nb.get(O)}}else{if(h){let V=P().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(zp==null||V!==dS)&&(dS=V,zp=document.createElement("canvas").getContext("2d",{willReadFrequently:dS})),zp.canvas.width=c,zp.canvas.height=p,zp.drawImage(n,0,0,c,p),n=zp.canvas}let O=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,M="rgba8unorm",B=e.textureManager.acquireTexture(m[1],m[0],M,O);e.queue.copyExternalImageToTexture({source:n},{texture:B},[m[1],m[0]]),b={width:c,height:p,format:M,usage:O,texture:B}}let w=y.sizeFromShape(m),C=y.computeStrides(m),S=new Tb(m,s,f),k=[{type:"uint32",data:[w]},{type:"uint32",data:[s]},{type:"uint32",data:[...C]}],E=e.makeTensorInfo([p,c],"int32"),A=e.tensorMap.get(E.dataId);A.resourceInfo=b;let D=e.runWebGPUProgram(S,[E],"int32",k);return e.disposeData(E.dataId),D}let d=n.data,g=d;if(s!=null&&s!==4){g=new Uint8Array(n.width*n.height*s);let b=d.length,w=0;for(let C=0;C<b;C++)C%4<s&&(g[w++]=d[C])}let x=e.makeTensorInfo(m,"int32",new Int32Array(g));return e.uploadToGPU(x.dataId),x}var Eb=class{constructor(t,e,o,n,s){this.uniforms="varianceEpsilon : f32,",this.workGroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o),this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset")),s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let t="0.0";this.offsetShape!=null&&(t="getOffsetByOutputIndex(index)");let e="1.0";return this.scaleShape!=null&&(e="getScaleByOutputIndex(index)"),`
      ${ut("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${t};
          let scaleValue = ${e};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}};var dL={kernelName:hs,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o,scale:n,offset:s,mean:i,variance:a}=r,{varianceEpsilon:l}=t,u=e,c=[o,i,a],p=null;s!=null&&(p=s.shape,c.push(s));let m=null;n!=null&&(m=n.shape,c.push(n));let f=new Eb(o.shape,i.shape,a.shape,p,m),h=[{type:"float32",data:[l]}];return u.runWebGPUProgram(f,c,o.dtype,h)}};function q7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=I.convertConv2DDataFormat(c),g=I.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,d);return xb({x:n,filter:s,convInfo:g,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:h,activation:f})}var gL={kernelName:Ti,backendName:"webgpu",kernelFunc:q7};function j7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=c;h==null&&(h=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(l,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${h}'`);let d=I.computeConv2DInfo(n.shape,s.shape,l,h,u,p,!0),g=[n,s],x=i!=null,b=a!=null;x&&g.push(i),b&&g.push(a);let w=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inHeight,d.inWidth]}],C;return d.inHeight>4&&d.inWidth>4&&d.strideHeight===1&&d.strideWidth===1&&d.inChannels===d.outChannels&&d.dilationHeight===1&&d.dilationWidth===1&&d.inChannels%4===0?C=new Pp(d,x,m,b):(C=new Lp(d,x,m,b),w.push({type:"int32",data:[d.filterHeight]},{type:"int32",data:[d.filterWidth]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]})),m==="leakyrelu"&&(w.push({type:"float32",data:[f]}),C.uniforms+=" alpha : f32,"),e.runWebGPUProgram(C,g,"float32",w)}var xL={kernelName:Ni,backendName:"webgpu",kernelFunc:j7};var $b=class{constructor(t,e){this.variableNames=["A","indices"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`gathernd_${t}`,this.sliceDim=t,this.uniforms=`sliceDim : i32, strides : ${Fe(t)},`}getUserCode(){let t;return this.sliceDim>1?t="uniforms.strides[j]":t="uniforms.strides",`
      ${ut("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${t};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}};function X7(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=I.prepareAndValidate(o,n),m=bt({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=bt({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let b=e.readSync(n.dataId),w=e.bufferSync(o),C=JP(b,w,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,C.values)}let h=new $b(i,[u,c]),d=[{type:"int32",data:[i]},{type:"int32",data:p}],g=e.runWebGPUProgram(h,[f,m],f.dtype,d),x=bt({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeData(m.dataId),e.disposeData(f.dataId),e.disposeData(g.dataId),x}var yL={kernelName:zu,backendName:"webgpu",kernelFunc:X7};var Ab=class{constructor(t,e){this.variableNames=["A","indices"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t.slice(),this.aShape=t,this.outputShape=e,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="gather"}getUserCode(){let t=Y7(this.aShape);return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${t}));
        }
      }
    `}};function Y7(r){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],e=[];for(let o=0;o<r.length;o++)o===2?e.push("indexZ"):e.push(`${t[o]}`);return e.join()}function gS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0],u=I.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=bt({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=bt({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])){let w=e.tensorMap.get(f.dataId).values,C=et(f.shape,f.dtype,w),k=e.tensorMap.get(m.dataId).values,E=et(m.shape,m.dtype,k),A=t3(E,C,h);return p.forEach(D=>e.disposeData(D.dataId)),e.makeTensorInfo(u.outputShape,A.dtype,A.values)}let d=new Ab(m.shape,h),g=e.runWebGPUProgram(d,[m,f],m.dtype);p.push(g);let x=bt({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeData(b.dataId)),x}var bL={kernelName:ds,backendName:"webgpu",kernelFunc:gS};var Z7=Yt({opType:wt.GREATER,cpuKernelImpl:r3,dtype:"bool"}),wL={kernelName:In,backendName:"webgpu",kernelFunc:Z7};var Q7=Yt({opType:wt.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:e3}),CL={kernelName:ao,backendName:"webgpu",kernelFunc:Q7};var J7=Vt({opType:lt.IS_NAN,dtype:"bool"}),IL={kernelName:Sn,backendName:"webgpu",kernelFunc:J7};function tJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=[{type:"float32",data:[s]}],a=new ln(n.shape,lt.LEAKYRELU);return a.uniforms="alpha : f32,",e.runWebGPUProgram(a,[n],"float32",i)}var SL={kernelName:gs,backendName:"webgpu",kernelFunc:tJ};var eJ=Yt({opType:wt.LESS,dtype:"bool",cpuKernelImpl:n3}),vL={kernelName:vn,backendName:"webgpu",kernelFunc:eJ};var rJ=Yt({opType:wt.LESS_EQUAL,dtype:"bool",cpuKernelImpl:o3}),kL={kernelName:kn,backendName:"webgpu",kernelFunc:rJ};var oJ=Vt({opType:lt.LOG,cpuKernelImpl:s3}),TL={kernelName:uo,backendName:"webgpu",kernelFunc:oJ};var nJ=Yt({opType:wt.LOGICAL_AND,dtype:"bool"}),NL={kernelName:di,backendName:"webgpu",kernelFunc:nJ};var sJ=Vt({opType:lt.LOGICAL_NOT}),EL={kernelName:gi,backendName:"webgpu",kernelFunc:sJ};var iJ=Yt({opType:wt.MAX,cpuKernelImpl:a3}),$L={kernelName:co,backendName:"webgpu",kernelFunc:iJ};function aJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1,c=I.computePool2DInfo(n.shape,s,i,u,a,l);return pb(n,c,"max",e)}var AL={kernelName:ys,backendName:"webgpu",kernelFunc:aJ};function lJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return Js(n,s,i,"min",e)}var DL={kernelName:ws,backendName:"webgpu",kernelFunc:lJ};var uJ=Yt({opType:wt.MIN,cpuKernelImpl:l3}),RL={kernelName:po,backendName:"webgpu",kernelFunc:uJ};var Db=class{constructor(t,e,o){this.uniforms="",this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((n,s)=>n[0]+t[s]+n[1]),this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.xShape=t,e.map((n,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.offset=o==="reflect"?0:1,this.shaderKey=`mirrorPad_${o}`}getUserCode(){let t=this.xShape.length,e=this.xShape.map((u,c)=>`uniforms.pad${c}[0]`).join(","),o=this.xShape.map((u,c)=>`uniforms.pad${c}[0] + uniforms.xShape${t>1?`[${c}]`:""}`).join(","),n=t===1?"start":"start[i]",s=t===1?"end":"end[i]",i=t===1?"outC":"outC[i]",a=Fe(t),l=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let start = ${a}(${e});
          let end = ${a}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${t}; i = i + 1) {
            if (${i} < ${n}) {
              ${i} = ${n} * 2 - ${i} - ${this.offset};
            } else if(${i} >= ${s}) {
              ${i} = (${s} - 1) * 2 - ${i} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${l}));
        }
      }
    `}};var FL={kernelName:Cs,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{paddings:n,mode:s}=t,i=e,a=n.map(c=>({type:"int32",data:[c[0],c[1]]})),l=new Db(o.shape,n,s);return i.runWebGPUProgram(l,[o],o.dtype,a)}};function cJ(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.tensorMap.get(o.dataId),[i,a]=c3(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n=new ln(o.shape,lt.NEG);return e.runWebGPUProgram(n,[o],o.dtype)}var _L={kernelName:Tn,backendName:"webgpu",kernelFunc:cJ};function pJ(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=Ue.nonMaxSuppressionV3Impl(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var OL={kernelName:wa,backendName:"webgpu",kernelFunc:pJ};function mJ(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=Ue.nonMaxSuppressionV5Impl(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var PL={kernelName:Ca,backendName:"webgpu",kernelFunc:mJ};function $h(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=ta({inputs:{input:o},backend:e}),s=$h({inputs:{x:n},backend:e}),i=xu({inputs:{input:o},backend:e}),a=$h({inputs:{x:i},backend:e}),l=Jn({inputs:{real:s,imag:a},backend:e});return e.disposeData(n.dataId),e.disposeData(s.dataId),e.disposeData(i.dataId),e.disposeData(a.dataId),l}else return Do({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var LL={kernelName:Os,backendName:"webgpu",kernelFunc:$h};function zL(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=ta({inputs:{input:o},backend:e}),s=zL({inputs:{x:n},backend:e}),i=xu({inputs:{input:o},backend:e}),a=$h({inputs:{x:i},backend:e}),l=Jn({inputs:{real:s,imag:a},backend:e});return e.disposeData(n.dataId),e.disposeData(s.dataId),e.disposeData(i.dataId),e.disposeData(a.dataId),l}else return Do({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var ML={kernelName:Is,backendName:"webgpu",kernelFunc:zL};function fJ(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return vb({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=vb({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=mS({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeData(c.dataId)),u}var BL={kernelName:Ss,backendName:"webgpu",kernelFunc:fJ};var Rb=class{constructor(t,e){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((o,n)=>o[0]+t[n]+o[1]),this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),e.map((o,n)=>{this.uniforms+=` pad${n} : vec2<i32>,`}),this.xShape=t,this.shaderKey="pad"}getUserCode(){let t=this.xShape.length,e=Fe(t),o=this.xShape.map((p,m)=>`uniforms.pad${m}[0]`).join(","),n=this.xShape.map((p,m)=>`uniforms.pad${m}[0] + uniforms.xShape${t>1?`[${m}]`:""}`).join(","),s=t>1?`${e}(${o})`:`${o}`,i=t>1?`${e}(${n})`:`${n}`,a=t>1?"any(outC < start)":"outC < start",l=t>1?"any(outC >= end)":"outC >= end",u=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let start = ${s};
          let end = ${i};
          let outC = getCoordsFromIndex(index);

          if (${a} || ${l}) {
            setOutputAtIndex(index, uniforms.constantValue);
          } else {
            let coords = outC - start;
            setOutputAtIndex(index, getX(${u}));
          }
        }
      }
    `}};var xS=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(s.every(u=>y.arraysEqual(u,[0,0])))return Be({inputs:{x:n},backend:e});if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Do({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=[{type:"float32",data:[i]}];s.map(u=>a.push({type:"int32",data:[u[0],u[1]]}));let l=new Rb(n.shape,s);return e.runWebGPUProgram(l,[n],n.dtype,a)},VL={kernelName:vs,backendName:"webgpu",kernelFunc:xS};var hJ=Yt({opType:wt.POW}),GL={kernelName:En,backendName:"webgpu",kernelFunc:hJ};function dJ(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=new gu(wt.PRELU,o.shape,n.shape);return e.runWebGPUProgram(s,[o,n],"float32")}var UL={kernelName:ks,backendName:"webgpu",kernelFunc:dJ};function gJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return Js(n,s,i,"prod",e)}var WL={kernelName:$n,backendName:"webgpu",kernelFunc:gJ};var xJ=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=f3(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},HL={kernelName:Sa,backendName:"webgpu",kernelFunc:xJ};var yS=Yt({opType:wt.DIV}),KL={kernelName:yn,backendName:"webgpu",kernelFunc:yS};var yJ=Vt({opType:lt.RECIPROCAL}),qL={kernelName:An,backendName:"webgpu",kernelFunc:yJ};var bJ=Vt({opType:lt.RELU}),jL={kernelName:Dn,backendName:"webgpu",kernelFunc:bJ};var wJ=Vt({opType:lt.RELU6}),XL={kernelName:Rn,backendName:"webgpu",kernelFunc:wJ};var Fb=class{constructor(t,e,o){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,o,t[3]],this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${ut("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function CJ(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,size:i,halfPixelCenters:a}=o,[l,u]=i,c=s&&l>1?1:0,p=s&&u>1?1:0,f=[{type:"float32",data:[c,p]},{type:"float32",data:[a?.5:0]}],h=new Fb(n.shape,l,u);return e.runWebGPUProgram(h,[n],"float32",f)}var YL={kernelName:Es,backendName:"webgpu",kernelFunc:CJ};var _b=class{constructor(t,e,o,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,o,t[3]],this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let t;return this.halfPixelCenters?t="max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":t="vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${ut("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${t};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function IJ(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=s&&l>1?1:0,p=s&&u>1?1:0,f=[{type:"float32",data:[c,p]},{type:"float32",data:[s?.5:0]}],h=new _b(n.shape,l,u,i);return e.runWebGPUProgram(h,[n],n.dtype,f)}var ZL={kernelName:Ns,backendName:"webgpu",kernelFunc:IJ};var Ob=class{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=t,typeof e=="number"?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${ut("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}};var QL={kernelName:Aa,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new Ob(o.shape,s),[u,c]=I.getImageCenter(i,o.shape[1],o.shape[2]),p=[{type:"float32",data:[u]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(n)]},{type:"float32",data:[Math.cos(n)]}];return typeof s=="number"?p.push({type:"float32",data:[Number.parseFloat(s.toFixed(2))]}):p.push({type:"float32",data:s}),a.runWebGPUProgram(l,[o],o.dtype,p)}};var SJ=Vt({opType:lt.RSQRT,cpuKernelImpl:h3}),JL={kernelName:fo,backendName:"webgpu",kernelFunc:SJ};var nl=class{constructor(t,e,o,n,s,i,a,l=!0){this.variableNames=["updates","indices"],this.workGroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=a,this.sumDupeIndices=l,this.dispatchLayout=ft(t),this.dispatch=st(this.dispatchLayout,t,this.workGroupSize),this.sliceDimGreaterThanOne=e>1,this.shaderKey=`scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${a}_${l}`;let u=Fe(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, size: i32,`,this.updatesRank=n,this.indicesRank=o}getUserCode(){let t="";this.indicesRank===1?t="coords[0]":this.indicesRank===2&&(t="coords[0], j");let e=`getIndices(${t})`,o=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",s="";this.dispatchLayout.x.length===1?(n="flattenedIndex",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):this.dispatchLayout.x.length===2&&(n="vec2<i32>(flattenedIndex, coords[1])",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let a=`getUpdates(${Array.from({length:this.updatesRank},(c,p)=>`coords[${p}]`).join(", ")})`,l=(c,p)=>{let m=`atomicAdd(${c}, bitcast<i32>(${p}))`;this.type==="float32"&&(m=`
          {
            var oldBits = 0;
            var newBits = bitcast<i32>(${p});
            loop {
              let info = atomicCompareExchangeWeak(${c}, oldBits, newBits);
              if (info.exchanged) {
                break;
              }
              oldBits = info.old_value;
              let oldValue = bitcast<f32>(oldBits);
              let newValue = oldValue + (${p});
              newBits = bitcast<i32>(newValue);
            }
          }
        `);let f=`atomicStore(${c}, bitcast<i32>(${p}));`;return this.sumDupeIndices?m:f};return`
    ${s}

      ${ut("index")} {
        if (index < uniforms.size) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${e}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${$p(this.type,!1)}(${a});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${l("&result[flatIndex]","updateValue")};
        }
      }`}};function vJ(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=bt({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=bt({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),d=h.dtype,g=Do({backend:e,attrs:{shape:m,value:0,dtype:d}}),x=y.sizeFromShape(h.shape),b=[{type:"int32",data:[a]},{type:"int32",data:c},{type:"int32",data:[x]}],w=new nl(h.shape,a,f.shape.length,h.shape.length,c,m,d),C=e.runWebGPUProgram(w,[h,f],d,b,g),S=bt({inputs:{x:C},backend:e,attrs:{shape:i}});return e.disposeData(f.dataId),e.disposeData(h.dataId),e.disposeData(C.dataId),S}var tz={kernelName:Ku,backendName:"webgpu",kernelFunc:vJ};var Pb=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.cRank=t,this.rank=o,this.shaderKey="select"}getUserCode(){let t,e;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(this.rank===1)e="resRC",t="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let a=0;a<this.outputShape.length;a++)i.push(`${n[a]}`),a<this.cRank&&s.push(`${n[a]}`);t=s.join(),e=i.join()}return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${t});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${e}));
          } else {
            setOutputAtIndex(index, getB(${e}));
          }
        }
      }
    `}};function kJ(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new Pb(o.shape.length,n.shape,n.shape.length);return e.runWebGPUProgram(i,[o,n,s],Qt(n.dtype,s.dtype))}var ez={kernelName:$s,backendName:"webgpu",kernelFunc:kJ};var TJ=Vt({opType:lt.SIGMOID}),rz={kernelName:ho,backendName:"webgpu",kernelFunc:TJ};var NJ=Vt({opType:lt.SIN}),oz={kernelName:_n,backendName:"webgpu",kernelFunc:NJ};var EJ=Vt({opType:lt.SINH}),nz={kernelName:On,backendName:"webgpu",kernelFunc:EJ};var bS=Yt({opType:wt.SUB,cpuKernelImpl:w3,supportsComplex:!0}),sz={kernelName:yo,backendName:"webgpu",kernelFunc:bS};function $J(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=Th({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=I.expandShapeToKeepDim(a.shape,i),u=bt({inputs:{x:a},backend:e,attrs:{shape:l}}),c=bS({inputs:{a:n,b:u},backend:e}),p=hS({inputs:{x:c},backend:e}),m=Eh({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=bt({inputs:{x:m},backend:e,attrs:{shape:l}}),h=yS({inputs:{a:p,b:f},backend:e});return e.disposeData(a.dataId),e.disposeData(u.dataId),e.disposeData(c.dataId),e.disposeData(p.dataId),e.disposeData(m.dataId),e.disposeData(f.dataId),h}var iz={kernelName:Fs,backendName:"webgpu",kernelFunc:$J};var AJ=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=xS({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=I.getReshaped(c.shape,s,a,!1),m=I.getPermuted(p.length,s.length,!1),f=I.getReshapedPermuted(c.shape,s,a,!1),h=bt({inputs:{x:c},backend:e,attrs:{shape:p}}),d=Dr({inputs:{x:h},backend:e,attrs:{perm:m}}),g=bt({inputs:{x:d},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(d),u.forEach(x=>e.disposeData(x.dataId)),g},az={kernelName:Ds,backendName:"webgpu",kernelFunc:AJ};var Lb=class{constructor(t,e){this.variableNames=["A"],this.workGroupSize=[64,1,1],this.size=!0;let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[n]*e[n];this.outputShape=o,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let t=DJ(this.rank,"uniforms.");return`
      ${ut("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${t}));
        }
      }
    `}};function DJ(r,t=""){if(r>=5)throw Error(`Tile for rank ${r} is not yet supported`);if(r===1)return`(resRC % ${t}aShape)`;let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r;n++)o.push(`(${e[n]} % ${t}aShape[${n}])`);return o.join()}function wS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(e.shouldExecuteOnCPU([n])||n.dtype==="string"||n.shape.length>=5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=et(n.shape,n.dtype,u),p=C3(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new Lb(n.shape,s);return e.runWebGPUProgram(i,[n],n.dtype)}var lz={kernelName:Ro,backendName:"webgpu",kernelFunc:wS};function RJ(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let A=e.bufferSync(n),D=e.bufferSync(s),O=y.decodeString(e.readSync(i.dataId)[0]),M=d3(A,D,a,m,c,u,l,p,O,f);return e.makeTensorInfo(a,M.dtype,M.values)}let h=[m/c,c],d=bt({inputs:{x:n},backend:e,attrs:{shape:[u,l]}}),g=s.shape.length?bt({inputs:{x:s},backend:e,attrs:{shape:[u,c]}}):Be({inputs:{x:s},backend:e}),x=g.dtype,b=e.makeTensorInfo([],x,y.makeZerosTypedArray(1,x)),w=bt({inputs:{x:i},backend:e,attrs:{shape:Array(h.length).fill(1)}}),C=wS({inputs:{x:w},backend:e,attrs:{reps:h}}),S=y.sizeFromShape([u,c]),k=[{type:"int32",data:[l]},{type:"int32",data:p},{type:"int32",data:[S]}];switch(u){case 0:break;case 1:{let A=new nl([u,c],l,d.shape.length,g.shape.length,p,h,x,f);e.runWebGPUProgram(A,[g,d],x,k,C)}break;default:{let A=new nl([u,c],l,d.shape.length,b.shape.length,p,h,x,f);e.runWebGPUProgram(A,[b,d],x,k,C)}{let A=new nl([u,c],l,d.shape.length,g.shape.length,p,h,x);e.runWebGPUProgram(A,[g,d],x,k,C)}}let E=bt({inputs:{x:C},backend:e,attrs:{shape:a}});return e.disposeData(d.dataId),e.disposeData(g.dataId),e.disposeData(w.dataId),e.disposeData(b.dataId),e.disposeData(C.dataId),E}var uz={kernelName:qu,backendName:"webgpu",kernelFunc:RJ};function FJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=ts({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var cz={kernelName:Rs,backendName:"webgpu",kernelFunc:FJ};var _J=Vt({opType:lt.SQRT}),pz={kernelName:go,backendName:"webgpu",kernelFunc:_J};var mz={kernelName:ka,backendName:"webgpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t,n=new ln(e.shape,lt.SQUARE);return o.runWebGPUProgram(n,[e],e.dtype)}};var OJ=Yt({opType:wt.SQUARED_DIFFERENCE}),fz={kernelName:xo,backendName:"webgpu",kernelFunc:OJ};var zb=class{constructor(t){this.variableNames=["x"],this.workPerThread=1,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]);let e=Fe(this.outputShape.length);this.uniforms=`begin : ${e},  strides : ${e}, `,this.shaderKey="stridedSlice"}getUserCode(){let t=this.outputShape.length,e="";if(t===1)e="coords * uniforms.strides + uniforms.begin";else{let n=0;e=this.outputShape.map((s,i)=>(n++,this.outputShape.length===1?`coords * uniforms.strides[${i}] + uniforms.begin[${i}]`:`coords[${n-1}] * uniforms.strides[${i}] + uniforms.begin[${i}]`)).join(",")}return`
       ${ut("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${e}));
         }
       }
     `}};function PJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=me.sliceInfo(n.shape,s,i,a,l,u,c,p,m),S;if(d)S=bt({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let k=me.computeOutShape(b,w,C),E=ts({inputs:{x:n},backend:e,attrs:{begin:b,size:k}});S=bt({inputs:{x:E},backend:e,attrs:{shape:h}}),e.disposeData(E.dataId)}else if(e.shouldExecuteOnCPU([n])){let E=e.readSync(n.dataId),A=et(n.shape,n.dtype,E),D=y3(f,A,C,b);S=e.makeTensorInfo(h,n.dtype,D.values)}else{let E=new zb(f),A=[{type:"int32",data:b},{type:"int32",data:C}],D=e.runWebGPUProgram(E,[n],n.dtype,A);S=bt({inputs:{x:D},backend:e,attrs:{shape:h}}),e.disposeData(D.dataId)}return S}var hz={kernelName:Ta,backendName:"webgpu",kernelFunc:PJ};function LJ(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,d]=b3(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var dz={kernelName:ju,backendName:"webgpu",kernelFunc:LJ};var zJ=Vt({opType:lt.TANH}),gz={kernelName:Pn,backendName:"webgpu",kernelFunc:zJ};var Mb=class{constructor(t){this.variableNames=["x","indices"],this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${ut("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}},Bb=class{constructor(t){this.variableNames=["x","indices"],this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${ut("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}};function Mp(r,t){t!==null&&r.disposeData(t.dataId)}function xz(r){let t=1;for(;t<r;)t*=2;return t}function MJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=n.shape,l=a[a.length-1];if(e.shouldExecuteOnCPU([n])){let S=e.readSync(n.dataId),[k,E]=I3(S,a,n.dtype,s,i);return[e.makeTensorInfo(k.shape,k.dtype,k.values),e.makeTensorInfo(E.shape,E.dtype,E.values)]}if(s===0)return a[a.length-1]=0,[e.makeTensorInfo(a,n.dtype,[]),e.makeTensorInfo(a,"int32",[])];if(l===1)return[n,Do({attrs:{shape:a,dtype:"int32",value:0},backend:e})];let c=y.sizeFromShape(a)/l,p=bt({inputs:{x:n},attrs:{shape:[c,l]},backend:e}),m=xz(s),f=xz(l),h=null,d=()=>h===null?[p,p]:[p,h],g=(S,k,E)=>{let A=d(),D=new Mb(E),M=[{type:"int32",data:[l]},{type:"int32",data:[h===null?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[S]},{type:"int32",data:[k]}],B=h;h=e.runWebGPUProgram(D,A,"int32",M),Mp(e,B)};for(let S=1;S<m;S*=2){let k=S*2;for(let E=S;E>=1;E/=2)g(k,E,[c,f])}for(let S=f;S>m;S/=2){let k=d(),E=new Bb([c,S/2]),D=[{type:"int32",data:[l]},{type:"int32",data:[h===null?1:0]},{type:"int32",data:[m]}],O=h;h=e.runWebGPUProgram(E,k,"int32",D),Mp(e,O);let M=m/2,B=M*2;for(let V=M;V>=1;V/=2)g(B,V,h.shape)}let x=h;h=ts({inputs:{x:h},backend:e,attrs:{begin:0,size:[c,s]}}),Mp(e,x);let b=gS({inputs:{x:p,indices:h},backend:e,attrs:{axis:1,batchDims:1}});Mp(e,p);let w=a.slice(0,-1);w.push(s),x=h,h=bt({inputs:{x:h},attrs:{shape:w},backend:e}),Mp(e,x);let C=b;return b=bt({inputs:{x:b},attrs:{shape:w},backend:e}),Mp(e,C),[b,h]}var yz={kernelName:Na,backendName:"webgpu",kernelFunc:MJ};var Vb=class{constructor(t){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=ft(this.outputShape),this.dispatch=st(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${ut("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}};function BJ(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=new Vb(g),b=i==="nearest"?1:2,w;switch(a){case"constant":w=1;break;case"reflect":w=2;break;case"wrap":w=3;break;case"nearest":w=4;break;default:w=1;break}let C=[{type:"int32",data:[b]},{type:"int32",data:[w]},{type:"float32",data:[l]}];return e.runWebGPUProgram(x,[n,s],"float32",C)}var bz={kernelName:Ea,backendName:"webgpu",kernelFunc:BJ};function VJ(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let d=0;d<a;d++)d!==s&&(u[c++]=i.shape[d]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let d=0;d<h.length;d++){m[s]=d;let g=ts({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),x=bt({inputs:{x:g},backend:e,attrs:{shape:u}});h[d]=x,p.push(g)}return p.forEach(d=>e.disposeData(d.dataId)),h}var wz={kernelName:_s,backendName:"webgpu",kernelFunc:VJ};var GJ=[pP,v3,k3,T3,E3,$3,A3,F3,_3,P3,B3,V3,G3,fP,W3,K3,q3,j3,X3,Y3,J3,tL,eL,rL,sL,iL,aL,lL,uL,cL,uP,pL,hL,mL,fL,dL,gL,xL,yL,bL,wL,CL,mP,U3,IL,SL,vL,kL,TL,NL,EL,D3,$L,AL,R3,DL,RL,FL,oL,_L,OL,PL,L3,ML,BL,VL,GL,UL,WL,HL,z3,KL,qL,jL,XL,cP,YL,ZL,QL,JL,tz,ez,rz,oz,nz,O3,hz,dz,iz,az,uz,cz,pz,mz,fz,sz,nL,gz,lz,yz,bz,N3,wz,LL];for(let r of GJ)Yu(r);var es=document.getElementById("video"),Bp=document.getElementById("canvas"),UJ=Bp.getContext("2d"),Cz=!1;async function Iz(r,t){Bp.width!==es.videoWidth&&(Bp.width=es.videoWidth),Bp.height!==es.videoHeight&&(Bp.height=es.videoHeight),UJ.drawImage(es,0,0);let e=await cc.fromPixelsAsync(es),o=await cc.fromPixelsAsync(Bp),n=await e.data(),s=await o.data(),i=0;for(let a=0;a<n.length;a++)(n[a]<0||n[a]>255||!Number.isSafeInteger(n[a]))&&i++;i>0&&console.log({mediaTime:t.mediaTime,errors:i,videoData:n,canvasData:s}),St([e,o]),es.requestVideoFrameCallback(Iz),Cz||(es.currentTime+=1/60)}async function WJ(){await Dw("webgpu"),await Fv(),console.log({tf:cd,backend:_v(),available:Fr().registryFactory,flags:P().getFlags()}),es.src="..//samples/f1.webm",es.onclick=()=>Cz=!0,es.requestVideoFrameCallback(Iz)}window.onload=WJ;
//# sourceMappingURL=verify.js.map
