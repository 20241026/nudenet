/*
  NudeNet
  author: <https://github.com/vladmandic>'
*/

var bV=Object.create;var PC=Object.defineProperty;var wV=Object.getOwnPropertyDescriptor;var CV=Object.getOwnPropertyNames;var IV=Object.getPrototypeOf,SV=Object.prototype.hasOwnProperty;var vo=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),Jt=(r,t)=>{for(var e in t)PC(r,e,{get:t[e],enumerable:!0})},vV=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of CV(t))!SV.call(r,n)&&n!==e&&PC(r,n,{get:()=>t[n],enumerable:!(o=wV(t,n))||o.enumerable});return r};var Xm=(r,t,e)=>(e=r!=null?bV(IV(r)):{},vV(t||!r||!r.__esModule?PC(e,"default",{value:r,enumerable:!0}):e,r));var F1=vo((dot,R1)=>{R1.exports=$e;var rn=null;try{rn=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function $e(r,t,e){this.low=r|0,this.high=t|0,this.unsigned=!!e}$e.prototype.__isLong__;Object.defineProperty($e.prototype,"__isLong__",{value:!0});function fo(r){return(r&&r.__isLong__)===!0}$e.isLong=fo;var S1={},v1={};function ru(r,t){var e,o,n;return t?(r>>>=0,(n=0<=r&&r<256)&&(o=v1[r],o)?o:(e=Ae(r,(r|0)<0?-1:0,!0),n&&(v1[r]=e),e)):(r|=0,(n=-128<=r&&r<128)&&(o=S1[r],o)?o:(e=Ae(r,r<0?-1:0,!1),n&&(S1[r]=e),e))}$e.fromInt=ru;function on(r,t){if(isNaN(r))return t?eu:nn;if(t){if(r<0)return eu;if(r>=E1)return D1}else{if(r<=-T1)return mo;if(r+1>=T1)return A1}return r<0?on(-r,t).neg():Ae(r%Yc|0,r/Yc|0,t)}$e.fromNumber=on;function Ae(r,t,e){return new $e(r,t,e)}$e.fromBits=Ae;var $d=Math.pow;function YC(r,t,e){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return nn;if(typeof t=="number"?(e=t,t=!1):t=!!t,e=e||10,e<2||36<e)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return YC(r.substring(1),t,e).neg();for(var n=on($d(e,8)),s=nn,i=0;i<r.length;i+=8){var a=Math.min(8,r.length-i),l=parseInt(r.substring(i,i+a),e);if(a<8){var u=on($d(e,a));s=s.mul(u).add(on(l))}else s=s.mul(n),s=s.add(on(l))}return s.unsigned=t,s}$e.fromString=YC;function ss(r,t){return typeof r=="number"?on(r,t):typeof r=="string"?YC(r,t):Ae(r.low,r.high,typeof t=="boolean"?t:r.unsigned)}$e.fromValue=ss;var k1=1<<16,qV=1<<24,Yc=k1*k1,E1=Yc*Yc,T1=E1/2,N1=ru(qV),nn=ru(0);$e.ZERO=nn;var eu=ru(0,!0);$e.UZERO=eu;var Xc=ru(1);$e.ONE=Xc;var $1=ru(1,!0);$e.UONE=$1;var XC=ru(-1);$e.NEG_ONE=XC;var A1=Ae(-1,2147483647,!1);$e.MAX_VALUE=A1;var D1=Ae(-1,-1,!0);$e.MAX_UNSIGNED_VALUE=D1;var mo=Ae(0,-2147483648,!1);$e.MIN_VALUE=mo;var ft=$e.prototype;ft.toInt=function(){return this.unsigned?this.low>>>0:this.low};ft.toNumber=function(){return this.unsigned?(this.high>>>0)*Yc+(this.low>>>0):this.high*Yc+(this.low>>>0)};ft.toString=function(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(mo)){var e=on(t),o=this.div(e),n=o.mul(e).sub(this);return o.toString(t)+n.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var s=on($d(t,6),this.unsigned),i=this,a="";;){var l=i.div(s),u=i.sub(l.mul(s)).toInt()>>>0,c=u.toString(t);if(i=l,i.isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}};ft.getHighBits=function(){return this.high};ft.getHighBitsUnsigned=function(){return this.high>>>0};ft.getLowBits=function(){return this.low};ft.getLowBitsUnsigned=function(){return this.low>>>0};ft.getNumBitsAbs=function(){if(this.isNegative())return this.eq(mo)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,e=31;e>0&&(t&1<<e)==0;e--);return this.high!=0?e+33:e+1};ft.isZero=function(){return this.high===0&&this.low===0};ft.eqz=ft.isZero;ft.isNegative=function(){return!this.unsigned&&this.high<0};ft.isPositive=function(){return this.unsigned||this.high>=0};ft.isOdd=function(){return(this.low&1)===1};ft.isEven=function(){return(this.low&1)===0};ft.equals=function(t){return fo(t)||(t=ss(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};ft.eq=ft.equals;ft.notEquals=function(t){return!this.eq(t)};ft.neq=ft.notEquals;ft.ne=ft.notEquals;ft.lessThan=function(t){return this.comp(t)<0};ft.lt=ft.lessThan;ft.lessThanOrEqual=function(t){return this.comp(t)<=0};ft.lte=ft.lessThanOrEqual;ft.le=ft.lessThanOrEqual;ft.greaterThan=function(t){return this.comp(t)>0};ft.gt=ft.greaterThan;ft.greaterThanOrEqual=function(t){return this.comp(t)>=0};ft.gte=ft.greaterThanOrEqual;ft.ge=ft.greaterThanOrEqual;ft.compare=function(t){if(fo(t)||(t=ss(t)),this.eq(t))return 0;var e=this.isNegative(),o=t.isNegative();return e&&!o?-1:!e&&o?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};ft.comp=ft.compare;ft.negate=function(){return!this.unsigned&&this.eq(mo)?mo:this.not().add(Xc)};ft.neg=ft.negate;ft.add=function(t){fo(t)||(t=ss(t));var e=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,i=t.high>>>16,a=t.high&65535,l=t.low>>>16,u=t.low&65535,c=0,p=0,m=0,f=0;return f+=s+u,m+=f>>>16,f&=65535,m+=n+l,p+=m>>>16,m&=65535,p+=o+a,c+=p>>>16,p&=65535,c+=e+i,c&=65535,Ae(m<<16|f,c<<16|p,this.unsigned)};ft.subtract=function(t){return fo(t)||(t=ss(t)),this.add(t.neg())};ft.sub=ft.subtract;ft.multiply=function(t){if(this.isZero())return nn;if(fo(t)||(t=ss(t)),rn){var e=rn.mul(this.low,this.high,t.low,t.high);return Ae(e,rn.get_high(),this.unsigned)}if(t.isZero())return nn;if(this.eq(mo))return t.isOdd()?mo:nn;if(t.eq(mo))return this.isOdd()?mo:nn;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(N1)&&t.lt(N1))return on(this.toNumber()*t.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,i=this.low&65535,a=t.high>>>16,l=t.high&65535,u=t.low>>>16,c=t.low&65535,p=0,m=0,f=0,h=0;return h+=i*c,f+=h>>>16,h&=65535,f+=s*c,m+=f>>>16,f&=65535,f+=i*u,m+=f>>>16,f&=65535,m+=n*c,p+=m>>>16,m&=65535,m+=s*u,p+=m>>>16,m&=65535,m+=i*l,p+=m>>>16,m&=65535,p+=o*c+n*u+s*l+i*a,p&=65535,Ae(f<<16|h,p<<16|m,this.unsigned)};ft.mul=ft.multiply;ft.divide=function(t){if(fo(t)||(t=ss(t)),t.isZero())throw Error("division by zero");if(rn){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var e=(this.unsigned?rn.div_u:rn.div_s)(this.low,this.high,t.low,t.high);return Ae(e,rn.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?eu:nn;var o,n,s;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return eu;if(t.gt(this.shru(1)))return $1;s=eu}else{if(this.eq(mo)){if(t.eq(Xc)||t.eq(XC))return mo;if(t.eq(mo))return Xc;var i=this.shr(1);return o=i.div(t).shl(1),o.eq(nn)?t.isNegative()?Xc:XC:(n=this.sub(t.mul(o)),s=o.add(n.div(t)),s)}else if(t.eq(mo))return this.unsigned?eu:nn;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();s=nn}for(n=this;n.gte(t);){o=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(o)/Math.LN2),l=a<=48?1:$d(2,a-48),u=on(o),c=u.mul(t);c.isNegative()||c.gt(n);)o-=l,u=on(o,this.unsigned),c=u.mul(t);u.isZero()&&(u=Xc),s=s.add(u),n=n.sub(c)}return s};ft.div=ft.divide;ft.modulo=function(t){if(fo(t)||(t=ss(t)),rn){var e=(this.unsigned?rn.rem_u:rn.rem_s)(this.low,this.high,t.low,t.high);return Ae(e,rn.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};ft.mod=ft.modulo;ft.rem=ft.modulo;ft.not=function(){return Ae(~this.low,~this.high,this.unsigned)};ft.and=function(t){return fo(t)||(t=ss(t)),Ae(this.low&t.low,this.high&t.high,this.unsigned)};ft.or=function(t){return fo(t)||(t=ss(t)),Ae(this.low|t.low,this.high|t.high,this.unsigned)};ft.xor=function(t){return fo(t)||(t=ss(t)),Ae(this.low^t.low,this.high^t.high,this.unsigned)};ft.shiftLeft=function(t){return fo(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?Ae(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):Ae(0,this.low<<t-32,this.unsigned)};ft.shl=ft.shiftLeft;ft.shiftRight=function(t){return fo(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?Ae(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):Ae(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};ft.shr=ft.shiftRight;ft.shiftRightUnsigned=function(t){if(fo(t)&&(t=t.toInt()),t&=63,t===0)return this;var e=this.high;if(t<32){var o=this.low;return Ae(o>>>t|e<<32-t,e>>>t,this.unsigned)}else return t===32?Ae(e,0,this.unsigned):Ae(e>>>t-32,0,this.unsigned)};ft.shru=ft.shiftRightUnsigned;ft.shr_u=ft.shiftRightUnsigned;ft.toSigned=function(){return this.unsigned?Ae(this.low,this.high,!1):this};ft.toUnsigned=function(){return this.unsigned?this:Ae(this.low,this.high,!0)};ft.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()};ft.toBytesLE=function(){var t=this.high,e=this.low;return[e&255,e>>>8&255,e>>>16&255,e>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};ft.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,e>>>24,e>>>16&255,e>>>8&255,e&255]};$e.fromBytes=function(t,e,o){return o?$e.fromBytesLE(t,e):$e.fromBytesBE(t,e)};$e.fromBytesLE=function(t,e){return new $e(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)};$e.fromBytesBE=function(t,e){return new $e(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}});var fk=vo(()=>{});var hk=vo(()=>{});var uT=vo((lT,L0)=>{(function(r,t,e){function o(a){var l=this,u=i();l.next=function(){var c=2091639*l.s0+l.c*23283064365386963e-26;return l.s0=l.s1,l.s1=l.s2,l.s2=c-(l.c=c|0)},l.c=1,l.s0=u(" "),l.s1=u(" "),l.s2=u(" "),l.s0-=u(a),l.s0<0&&(l.s0+=1),l.s1-=u(a),l.s1<0&&(l.s1+=1),l.s2-=u(a),l.s2<0&&(l.s2+=1),u=null}function n(a,l){return l.c=a.c,l.s0=a.s0,l.s1=a.s1,l.s2=a.s2,l}function s(a,l){var u=new o(a),c=l&&l.state,p=u.next;return p.int32=function(){return u.next()*4294967296|0},p.double=function(){return p()+(p()*2097152|0)*11102230246251565e-32},p.quick=p,c&&(typeof c=="object"&&n(c,u),p.state=function(){return n(u,{})}),p}function i(){var a=4022871197,l=function(u){u=String(u);for(var c=0;c<u.length;c++){a+=u.charCodeAt(c);var p=.02519603282416938*a;a=p>>>0,p-=a,p*=a,a=p>>>0,p-=a,a+=p*4294967296}return(a>>>0)*23283064365386963e-26};return l}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.alea=s})(lT,typeof L0=="object"&&L0,typeof define=="function"&&define)});var pT=vo((cT,z0)=>{(function(r,t,e){function o(i){var a=this,l="";a.x=0,a.y=0,a.z=0,a.w=0,a.next=function(){var c=a.x^a.x<<11;return a.x=a.y,a.y=a.z,a.z=a.w,a.w^=a.w>>>19^c^c>>>8},i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor128=s})(cT,typeof z0=="object"&&z0,typeof define=="function"&&define)});var fT=vo((mT,M0)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.x^a.x>>>2;return a.x=a.y,a.y=a.z,a.z=a.w,a.w=a.v,(a.d=a.d+362437|0)+(a.v=a.v^a.v<<4^(c^c<<1))|0},a.x=0,a.y=0,a.z=0,a.w=0,a.v=0,i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,u==l.length&&(a.d=a.x<<10^a.x>>>4),a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a.v=i.v,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorwow=s})(mT,typeof M0=="object"&&M0,typeof define=="function"&&define)});var dT=vo((hT,B0)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.x,c=a.i,p,m,f;return p=u[c],p^=p>>>7,m=p^p<<24,p=u[c+1&7],m^=p^p>>>10,p=u[c+3&7],m^=p^p>>>3,p=u[c+4&7],m^=p^p<<7,p=u[c+7&7],p=p^p<<13,m^=p^p<<9,u[c]=m,a.i=c+1&7,m};function l(u,c){var p,m,f=[];if(c===(c|0))m=f[0]=c;else for(c=""+c,p=0;p<c.length;++p)f[p&7]=f[p&7]<<15^c.charCodeAt(p)+f[p+1&7]<<13;for(;f.length<8;)f.push(0);for(p=0;p<8&&f[p]===0;++p);for(p==8?m=f[7]=-1:m=f[p],u.x=f,u.i=0,p=256;p>0;--p)u.next()}l(a,i)}function n(i,a){return a.x=i.x.slice(),a.i=i.i,a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.x&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorshift7=s})(hT,typeof B0=="object"&&B0,typeof define=="function"&&define)});var xT=vo((gT,V0)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.w,c=a.X,p=a.i,m,f;return a.w=u=u+1640531527|0,f=c[p+34&127],m=c[p=p+1&127],f^=f<<13,m^=m<<17,f^=f>>>15,m^=m>>>12,f=c[p]=f^m,a.i=p,f+(u^u>>>16)|0};function l(u,c){var p,m,f,h,d,g=[],x=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,x=Math.max(x,c.length)),f=0,h=-32;h<x;++h)c&&(m^=c.charCodeAt((h+32)%c.length)),h===0&&(d=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,h>=0&&(d=d+1640531527|0,p=g[h&127]^=m+d,f=p==0?f+1:0);for(f>=128&&(g[(c&&c.length||0)&127]=-1),f=127,h=4*128;h>0;--h)m=g[f+34&127],p=g[f=f+1&127],m^=m<<13,p^=p<<17,m^=m>>>15,p^=p>>>12,g[f]=m^p;u.w=d,u.X=g,u.i=f}l(a,i)}function n(i,a){return a.i=i.i,a.w=i.w,a.X=i.X.slice(),a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.X&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor4096=s})(gT,typeof V0=="object"&&V0,typeof define=="function"&&define)});var bT=vo((yT,G0)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.b,p=a.c,m=a.d,f=a.a;return c=c<<25^c>>>7^p,p=p-m|0,m=m<<24^m>>>8^f,f=f-c|0,a.b=c=c<<20^c>>>12^p,a.c=p=p-m|0,a.d=m<<16^p>>>16^f,a.a=f-c|0},a.a=0,a.b=0,a.c=-1640531527,a.d=1367130551,i===Math.floor(i)?(a.a=i/4294967296|0,a.b=i|0):l+=i;for(var u=0;u<l.length+20;u++)a.b^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.a=i.a,a.b=i.b,a.c=i.c,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.tychei=s})(yT,typeof G0=="object"&&G0,typeof define=="function"&&define)});var wT=vo(()=>{});var IT=vo((CT,_g)=>{(function(r,t,e){var o=256,n=6,s=52,i="random",a=e.pow(o,n),l=e.pow(2,s),u=l*2,c=o-1,p;function m(w,C,k){var E=[];C=C==!0?{entropy:!0}:C||{};var A=g(d(C.entropy?[w,b(t)]:w??x(),3),E),D=new f(E),_=function(){for(var P=D.g(n),B=a,V=0;P<l;)P=(P+V)*o,B*=o,V=D.g(1);for(;P>=u;)P/=2,B/=2,V>>>=1;return(P+V)/B};return _.int32=function(){return D.g(4)|0},_.quick=function(){return D.g(4)/4294967296},_.double=_,g(b(D.S),t),(C.pass||k||function(P,B,V,G){return G&&(G.S&&h(G,D),P.state=function(){return h(D,{})}),V?(e[i]=P,B):P})(_,A,"global"in C?C.global:this==e,C.state)}function f(w){var C,k=w.length,E=this,A=0,D=E.i=E.j=0,_=E.S=[];for(k||(w=[k++]);A<o;)_[A]=A++;for(A=0;A<o;A++)_[A]=_[D=c&D+w[A%k]+(C=_[A])],_[D]=C;(E.g=function(P){for(var B,V=0,G=E.i,W=E.j,U=E.S;P--;)B=U[G=c&G+1],V=V*o+U[c&(U[G]=U[W=c&W+B])+(U[W]=B)];return E.i=G,E.j=W,V})(o)}function h(w,C){return C.i=w.i,C.j=w.j,C.S=w.S.slice(),C}function d(w,C){var k=[],E=typeof w,A;if(C&&E=="object")for(A in w)try{k.push(d(w[A],C-1))}catch{}return k.length?k:E=="string"?w:w+"\0"}function g(w,C){for(var k=w+"",E,A=0;A<k.length;)C[c&A]=c&(E^=C[c&A]*19)+k.charCodeAt(A++);return b(C)}function x(){try{var w;return p&&(w=p.randomBytes)?w=w(o):(w=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(w)),b(w)}catch{var C=r.navigator,k=C&&C.plugins;return[+new Date,r,k,r.screen,b(t)]}}function b(w){return String.fromCharCode.apply(0,w)}if(g(e.random(),t),typeof _g=="object"&&_g.exports){_g.exports=m;try{p=wT()}catch{}}else typeof define=="function"&&define.amd?define(function(){return m}):e["seed"+i]=m})(typeof self<"u"?self:CT,[],Math)});var xf=vo((wwt,ST)=>{var L4=uT(),z4=pT(),M4=fT(),B4=dT(),V4=xT(),G4=bT(),xu=IT();xu.alea=L4;xu.xor128=z4;xu.xorwow=M4;xu.xorshift7=B4;xu.xor4096=V4;xu.tychei=G4;ST.exports=xu});var q$=vo(()=>{});var _i=class{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}},_n=class{refCount(t){return ko("refCount")}incRef(t){return ko("incRef")}timerAvailable(){return!0}time(t){return ko("time")}read(t){return ko("read")}readSync(t){return ko("readSync")}readToGPU(t,e){return ko("readToGPU")}numDataIds(){return ko("numDataIds")}disposeData(t,e){return ko("disposeData")}write(t,e,o){return ko("write")}move(t,e,o,n,s){return ko("move")}memory(){return ko("memory")}floatPrecision(){return ko("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return ko("dispose")}};function ko(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function m1(r){let t=r.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,Td(r,t,e)}function kV(r,t){if(r.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t.length}`);let e=r.length,o=0;for(;e>0;)o=Math.random()*e|0,e--,Td(r,e,o),Td(t,e,o)}function lc(r,t,e){return Math.max(r,Math.min(t,e))}function TV(r){return r%2===0?r:r+1}function Td(r,t,e){let o=r[t];r[t]=r[e],r[e]=o}function NV(r){let t=0;for(let e=0;e<r.length;e++)t+=r[e];return t}function EV(r,t){let e=Math.random();return t*e+(1-e)*r}function $V(r,t){let e=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(t[o]);e+=n*n}return e}function $(r,t){if(!r)throw new Error(typeof t=="string"?t:t())}function Pe(r,t,e=""){$(Jo(r,t),()=>e+` Shapes ${r} and ${t} must match`)}function To(r){$(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function Oa(r,t=[],e=!1){if(t==null&&(t=[]),Array.isArray(r)||po(r)&&!e)for(let o=0;o<r.length;++o)Oa(r[o],t,e);else t.push(r);return t}function Vt(r){if(r.length===0)return 1;let t=r[0];for(let e=1;e<r.length;e++)t*=r[e];return t}function AV(r){return r.length===0}function Jo(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function Oi(r){return r%1===0}function DV(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let t=Math.exp(2*r);return(t-1)/(t+1)}}function RV(r){let t=Math.ceil(Math.sqrt(r));return[t,Math.ceil(r/t)]}function FV(r){let t=new Uint32Array(r);for(let e=0;e<r;++e)t[e]=e;return m1(t),t}function Ql(r,t){return t<=r.length?r:r+" ".repeat(t-r.length)}function _V(r,t=o=>0,e){return new Promise((o,n)=>{let s=0,i=()=>{if(r()){o();return}s++;let a=t(s);if(e!=null&&s>=e){n();return}setTimeout(i,a)};i()})}function OV(r,t){let e=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)e*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${r}`);return r}if(e===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(t%e!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);let n=r.slice();return n[o]=t/e,n}function Ye(r,t){let e=t.length;return r=r==null?t.map((o,n)=>n):[].concat(r),$(r.every(o=>o>=-e&&o<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`),$(r.every(o=>Oi(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?e+o:o)}function LC(r,t){let e=[],o=[],n=t!=null&&Array.isArray(t)&&t.length===0,s=t==null||n?null:Ye(t,r).sort(),i=0;for(let a=0;a<r.length;++a){if(s!=null){if(s[i]===a&&r[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${r[a]}' is not 1`);(s[i]==null||s[i]>a)&&r[a]===1&&(e.push(r[a]),o.push(a)),s[i]<=a&&i++}r[a]!==1&&(e.push(r[a]),o.push(a))}return{newShape:e,keptDims:o}}function zC(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else throw new Error(`Unknown data type ${r}`);return e}function MC(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else if(r==="string")e=new Array(t);else throw new Error(`Unknown data type ${r}`);return e}function BC(r,t){for(let e=0;e<r.length;e++){let o=r[e];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${t} being uploaded contains ${o}.`)}}function VC(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function PV(r,t){return!(t==="complex64"||t==="float32"&&r!=="complex64"||t==="int32"&&r!=="float32"&&r!=="complex64"||t==="bool"&&r==="bool")}function po(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}function Nd(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function GC(r){if(r==null)return 0;let t=0;return r.forEach(e=>t+=e.length),t}function uc(r){return typeof r=="string"||r instanceof String}function f1(r){return typeof r=="boolean"}function h1(r){return typeof r=="number"}function cc(r){return Array.isArray(r)?cc(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":h1(r)?"float32":uc(r)?"string":f1(r)?"bool":"float32"}function pc(r){return!!(r&&r.constructor&&r.call&&r.apply)}function mc(r,t){for(let e=t;e<r;++e)if(r%e===0)return e;return r}function vs(r){let t=r.length;if(t<2)return[];let e=new Array(t-1);e[t-2]=r[t-1];for(let o=t-3;o>=0;--o)e[o]=e[o+1]*r[o+1];return e}function d1(r,t,e,o=!1){let n=new Array;if(t.length===1){let s=t[0]*(o?2:1);for(let i=0;i<s;i++)n[i]=e[r+i]}else{let s=t[0],i=t.slice(1),a=i.reduce((l,u)=>l*u)*(o?2:1);for(let l=0;l<s;l++)n[l]=d1(r+l*a,i,e,o)}return n}function Zl(r,t,e=!1){if(r.length===0)return t[0];let o=r.reduce((n,s)=>n*s)*(e?2:1);if(o===0)return[];if(o!==t.length)throw new Error(`[${r}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return d1(0,r,t,e)}function Ym(r,t){let e=fc(r,t);for(let o=0;o<e.length;o++)e[o]=1;return e}function fc(r,t){if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${t}`)}function LV(r,t){let e=r.reduce((o,n)=>o*n,1);if(t==null||t==="float32")return Zl(r,new Float32Array(e));if(t==="int32")return Zl(r,new Int32Array(e));if(t==="bool")return Zl(r,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Zm(r){r.forEach(t=>{$(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function zV(r,t,e){if(t===0)return 0;if(t===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=e[n]*r[n];return o}function MV(r,t,e){if(t===0)return[];if(t===1)return[r];let o=new Array(t);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/e[n]),r-=o[n]*e[n];return o[o.length-1]=r,o}function Qm(r){return r&&r.then&&typeof r.then=="function"}var g1="tfjsflags",Jm=class{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=VV,this.populateURLFlags()}setPlatform(t,e){this.platform!=null&&(L().getBool("IS_TEST")||L().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,o){if(this.flagRegistry[t]={evaluationFn:e,setHook:o},this.urlFlags[t]!=null){let n=this.urlFlags[t];L().getBool("IS_TEST")||L().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${n}.`),this.set(t,n)}}async getAsync(t){return t in this.flags?this.flags[t]:(this.flags[t]=await this.evaluateFlag(t),this.flags[t])}get(t){if(t in this.flags)return this.flags[t];let e=this.evaluateFlag(t);if(Qm(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(this.flagRegistry[t]==null)throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,this.flagRegistry[t].setHook!=null&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(this.flagRegistry[t]==null)throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;let t=this.getQueryParams(this.global.location.search);g1 in t&&t[g1].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=UV(n,s)})}};function VV(r){let t={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...o)=>(GV(t,o[0],o[1]),o.join("="))),t}function GV(r,t,e){r[decodeURIComponent(t)]=decodeURIComponent(e||"")}function UV(r,t){if(t=t.toLowerCase(),t==="true"||t==="false")return t==="true";if(`${+t}`===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${r}.`)}function L(){return UC}var UC=null;function x1(r){UC=r}var WC;function HC(){if(WC==null){let r;if(typeof window<"u")r=window;else if(typeof global<"u")r=global;else if(typeof process<"u")r=process;else if(typeof self<"u")r=self;else throw new Error("Could not find a global object");WC=r}return WC}function WV(){let r=HC();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function tf(r,t){let e=WV();if(e.has(r))return e.get(r);{let o=t();return e.set(r,o),e.get(r)}}var On="Abs",Pi="Acos",Li="Acosh",Jr="Add",ks="AddN",hc="All",dc="Any",Ts="ArgMax",Ns="ArgMin",zi="Asin",Mi="Asinh",Bi="Atan",Vi="Atanh",Pn="Atan2",Es="AvgPool",gc="AvgPoolGrad",Pa="AvgPool3D",xc="AvgPool3DGrad",$s="BatchMatMul",As="BatchToSpaceND",yc="Bincount",y1="BroadcastTo",bc="BroadcastArgs",No="Cast",Eo="Ceil",Ln="ClipByValue",Gi="Complex",La="ComplexAbs",Ds="Concat",Rs="Conv2D",wc="Conv2DBackpropFilter",Fs="Conv2DBackpropInput",za="Conv3D",Cc="Conv3DBackpropFilterV2",Ic="Conv3DBackpropInputV2",zn="Cos",Mn="Cosh",Ma="Cumprod",_s="Cumsum",Ba="CropAndResize",Sc="DenseBincount",Va="DepthToSpace",Os="DepthwiseConv2dNative",vc="DepthwiseConv2dNativeBackpropFilter",kc="DepthwiseConv2dNativeBackpropInput",Tc="Diag",Ga="Dilation2D",ef="Dilation2DBackpropInput",rf="Dilation2DBackpropFilter",Bn="RealDiv",Ua="Einsum",Vn="Elu",Nc="EluGrad",Ui="Erf",Gn="Equal",$o="Exp",Ps="ExpandDims",Ao="Expm1",Ec="FFT",Wa="Fill",Ha="FlipLeftRight",Do="Floor",Un="FloorDiv",Ls="FusedBatchNorm",zs="GatherV2",qa="GatherNd",Wn="Greater",Ro="GreaterEqual",Fo="Identity",$c="IFFT",Ka="Imag",Wi="IsFinite",Hi="IsInf",Hn="IsNan",Ms="LeakyRelu",qn="Less",Kn="LessEqual",Ac="LinSpace",_o="Log",qi="Log1p",Ki="LogicalAnd",ji="LogicalNot",Jl="LogicalOr";var b1="LogSoftmax";var ja="LRN",Dc="LRNGrad",Bs="Max",Oo="Maximum",Vs="MaxPool",Rc="MaxPoolGrad",Xa="MaxPool3D",Fc="MaxPool3DGrad",_c="MaxPoolWithArgmax",Gs="Mean",Us="Min",Po="Minimum",Ws="MirrorPad",Xi="Mod",Oc="Multinomial",Lo="Multiply",jn="Neg",Xn="NotEqual",Ya="NonMaxSuppressionV3",Pc="NonMaxSuppressionV4",Za="NonMaxSuppressionV5",Hs="OnesLike",Qa="OneHot",qs="Pack",Ks="PadV2";var Yn="Pow",js="Prelu",Zn="Prod",Lc="RaggedTensorToTensor",Ja="Range",Yi="Real",Qn="Reciprocal",Jn="Relu",Xs="Reshape",Ys="ResizeNearestNeighbor",zc="ResizeNearestNeighborGrad",Zs="ResizeBilinear",Mc="ResizeBilinearGrad",ts="Relu6",tl="Reverse",Zi="Round",zo="Rsqrt",el="ScatterNd",Bc="SearchSorted",Qs="Select",Qi="Selu",es="Slice",rs="Sin",os="Sinh",Ji="Sign",Mo="Sigmoid",ta="Softplus",Bo="Sqrt",Js="Sum",ti="SpaceToBatchND",ei="SplitV",ri="Softmax",Vc="SparseFillEmptyRows",Gc="SparseReshape",Uc="SparseSegmentMean",Wc="SparseSegmentSum",rl="SparseToDense",Vo="SquaredDifference",ol="Square",nl="StridedSlice",sl="StringNGrams",Hc="StringSplit",qc="StringToHashBucketFast",Go="Sub",ea="Tan",ns="Tanh",tn="Tile",il="TopK",al="Transform",en="Transpose",Kc="Unique",oi="Unpack",ll="UnsortedSegmentSum";var ni="ZerosLike",ra="Step",tu="FromPixels",ul="RotateWithOffset",oa="_FusedMatMul",na="FusedConv2D",sa="FusedDepthwiseConv2D";function si(...r){L().getBool("IS_TEST")||L().getBool("PROD")||console.warn(...r)}function HV(...r){L().getBool("IS_TEST")||L().getBool("PROD")||console.log(...r)}var Ed=tf("kernelRegistry",()=>new Map),qC=tf("gradRegistry",()=>new Map);function of(r,t){let e=I1(r,t);return Ed.get(e)}function KC(r){return qC.get(r)}function jC(r){let t=Ed.entries(),e=[];for(;;){let{done:o,value:n}=t.next();if(o)break;let[s,i]=n,[a]=s.split("_");a===r&&e.push(i)}return e}function jc(r){let{kernelName:t,backendName:e}=r,o=I1(t,e);Ed.has(o)&&si(`The kernel '${t}' for backend '${e}' is already registered`),Ed.set(o,r)}function C1(r){let{kernelName:t}=r;qC.has(t)&&L().getBool("DEBUG")&&si(`Overriding the gradient for '${t}'`),qC.set(t,r)}function I1(r,t){return`${t}_${r}`}var y={};Jt(y,{arraysEqual:()=>Jo,assert:()=>$,assertNonNegativeIntegerDimensions:()=>Zm,assertNonNull:()=>To,assertShapesMatch:()=>Pe,bytesFromStringArray:()=>GC,bytesPerElement:()=>Nd,checkConversionForErrors:()=>BC,clamp:()=>lc,computeStrides:()=>vs,createScalarValue:()=>QV,createShuffledIndices:()=>FV,decodeString:()=>Jc,distSquared:()=>$V,encodeString:()=>Qc,fetch:()=>tG,fingerPrint64:()=>ZV,flatten:()=>Oa,getArrayFromDType:()=>MC,getTypedArrayFromDType:()=>zC,hasEncodingLoss:()=>PV,hexToLong:()=>nf,indexToLoc:()=>MV,inferDtype:()=>cc,inferFromImplicitShape:()=>OV,isBoolean:()=>f1,isFunction:()=>pc,isInt:()=>Oi,isNumber:()=>h1,isPromise:()=>Qm,isScalarShape:()=>AV,isString:()=>uc,isTypedArray:()=>po,isValidDtype:()=>VC,locToIndex:()=>zV,makeOnesTypedArray:()=>Ym,makeZerosNestedTypedArray:()=>LV,makeZerosTypedArray:()=>fc,nearestDivisor:()=>mc,nearestLargerEven:()=>TV,now:()=>su,parseAxisParam:()=>Ye,randUniform:()=>EV,repeatedTry:()=>_V,rightPad:()=>Ql,shuffle:()=>m1,shuffleCombo:()=>kV,sizeFromShape:()=>Vt,sizeToSquarishShape:()=>RV,squeezeShape:()=>LC,sum:()=>NV,swap:()=>Td,tanh:()=>DV,toNestedArray:()=>Zl,toTypedArray:()=>Zc});var QC=Xm(F1());var nu=QC.default||QC;function nf(r){return nu.fromString(r,!0,16)}var O1=nf("c3a5c85c97cb3127"),ou=nf("b492b66fbe98f273"),Or=nf("9ae16a3b2f90404f");function ZC(r){return r.xor(r.shru(47))}function P1(r,t,e){let o=r.slice(t,t+e);return nu.fromBytes(Array.from(o),!0,!0)}function Se(r,t){return P1(r,t,8)}function _1(r,t){return P1(r,t,4)}function pr(r,t){return t===0?r:r.shru(t).or(r.shl(64-t))}function cl(r,t,e=nf("9ddfea08eb382d69")){let o=r.xor(t).mul(e);o=o.xor(o.shru(47));let n=t.xor(o).mul(e);return n=n.xor(n.shru(47)),n=n.mul(e),n}function KV(r,t,e,o,n,s){n=n.add(r),s=pr(s.add(n).add(o),21);let i=n;return n=n.add(t),n=n.add(e),s=s.add(pr(n,44)),[n.add(o),s.add(i)]}function Ad(r,t,e,o){return KV(Se(r,t),Se(r,t+8),Se(r,t+16),Se(r,t+24),e,o)}function jV(r,t=r.length){if(t>=8){let e=Or.add(t*2),o=Se(r,0).add(Or),n=Se(r,t-8),s=pr(n,37).mul(e).add(o),i=pr(o,25).add(n).mul(e);return cl(s,i,e)}if(t>=4){let e=Or.add(t*2),o=_1(r,0);return cl(o.shl(3).add(t),_1(r,t-4),e)}if(t>0){let e=r[0],o=r[t>>1],n=r[t-1],s=e+(o<<8),i=t+(n<<2);return ZC(Or.mul(s).xor(O1.mul(i))).mul(Or)}return Or}function XV(r,t=r.length){let e=Or.add(t*2),o=Se(r,0).mul(ou),n=Se(r,8),s=Se(r,t-8).mul(e),i=Se(r,t-16).mul(Or);return cl(pr(o.add(n),43).add(pr(s,30)).add(i),o.add(pr(n.add(Or),18)).add(s),e)}function YV(r,t=r.length){let e=Or.add(t*2),o=Se(r,0).mul(Or),n=Se(r,8),s=Se(r,t-8).mul(e),i=Se(r,t-16).mul(Or),a=pr(o.add(n),43).add(pr(s,30)).add(i),l=cl(a,o.add(pr(n.add(Or),18)).add(s),e),u=Se(r,16).mul(e),c=Se(r,24),p=a.add(Se(r,t-32)).mul(e),m=l.add(Se(r,t-24)).mul(e);return cl(pr(u.add(c),43).add(pr(p,30)).add(m),u.add(pr(c.add(o),18)).add(p),e)}function ZV(r,t=r.length){let e=nu.fromNumber(81,!0);if(t<=32)return t<=16?jV(r,t):XV(r,t);if(t<=64)return YV(r,t);let o=e,n=e.mul(ou).add(113),s=ZC(n.mul(Or).add(113)).mul(Or),i=[nu.UZERO,nu.UZERO],a=[nu.UZERO,nu.UZERO];o=o.mul(Or).add(Se(r,0));let l=0,u=(t-1>>6)*64,c=u+(t-1&63)-63;do o=pr(o.add(n).add(i[0]).add(Se(r,l+8)),37).mul(ou),n=pr(n.add(i[1]).add(Se(r,l+48)),42).mul(ou),o=o.xor(a[1]),n=n.add(i[0]).add(Se(r,l+40)),s=pr(s.add(a[0]),33).mul(ou),i=Ad(r,l,i[1].mul(ou),o.add(a[0])),a=Ad(r,l+32,s.add(a[1]),n.add(Se(r,l+16))),[s,o]=[o,s],l+=64;while(l!==u);let p=ou.add(s.and(255).shl(1));return l=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),o=pr(o.add(n).add(i[0]).add(Se(r,l+8)),37).mul(p),n=pr(n.add(i[1]).add(Se(r,l+48)),42).mul(p),o=o.xor(a[1].mul(9)),n=n.add(i[0].mul(9).add(Se(r,l+40))),s=pr(s.add(a[0]),33).mul(p),i=Ad(r,l,i[1].mul(p),o.add(a[0])),a=Ad(r,l+32,s.add(a[1]),n.add(Se(r,l+16))),[s,o]=[o,s],cl(cl(i[0],a[0],p).add(ZC(n).mul(O1)).add(s),cl(i[1],a[1],p).add(o),p)}function QV(r,t){return t==="string"?Qc(r):Zc([r],t)}function JV(r,t){return r instanceof Float32Array&&t==="float32"||r instanceof Int32Array&&t==="int32"||r instanceof Uint8Array&&t==="bool"}function Zc(r,t){if(t==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=Oa(r)),L().getBool("DEBUG")&&BC(r,t),JV(r,t))return r;if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"){let e=new Uint8Array(r.length);for(let o=0;o<e.length;++o)Math.round(r[o])!==0&&(e[o]=1);return e}else throw new Error(`Unknown data type ${t}`)}function su(){return L().platform.now()}function tG(r,t){return L().platform.fetch(r,t)}function Qc(r,t="utf-8"){return t=t||"utf-8",L().platform.encode(r,t)}function Jc(r,t="utf-8"){return t=t||"utf-8",L().platform.decode(r,t)}var Dd=class{constructor(t,e){this.backendTimer=t,this.logger=e,e==null&&(this.logger=new JC)}profileKernel(t,e,o){let n,s=()=>{n=o()},i,a=su();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();i=Promise.resolve({kernelMs:su()-a})}if(L().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(p=>{eG(p,c.dtype,t)})}return{kernelName:t,outputs:n,inputs:e,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(t){let{kernelName:e,outputs:o,timeMs:n,inputs:s,extraInfo:i}=t;o.forEach(a=>{Promise.all([a.data(),n,i]).then(l=>{this.logger.logKernelProfile(e,a,l[0],l[1],s,l[2])})})}};function eG(r,t,e){if(t!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${e}'`),!0}return!1}var JC=class{logKernelProfile(t,e,o,n,s,i){let a=typeof n=="number"?Ql(`${n}ms`,9):n.error,l=Ql(t,25),u=e.rank,c=e.size,p=Ql(e.shape.toString(),14),m="";for(let f in s){let h=s[f];if(h!=null){let d=h.shape||e.shape,g=d.length;m+=`${f}: ${g}D ${g>0?d:""} `}}console.log(`%c${l}	%c${a}	%c${u}D ${p}	%c${c}	%c${m}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function L1(r,t,e){let o={},n={};for(let l=0;l<t.length;l++)o[t[l].id]=!0;for(let l=0;l<r.length;l++){let u=r[l],c=u.inputs;for(let p in c){let m=c[p],f=!1;for(let h=0;h<t.length;h++)if(o[m.id]){u.outputs.forEach(d=>o[d.id]=!0),f=!0,n[u.id]=!0;break}if(f)break}}let s={};s[e.id]=!0;let i={};for(let l=r.length-1;l>=0;l--){let u=r[l],c=u.inputs;for(let p=0;p<u.outputs.length;p++)if(s[u.outputs[p].id]){for(let m in c)s[c[m].id]=!0,i[u.id]=!0;break}}let a=[];for(let l=0;l<r.length;l++){let u=r[l];if(n[u.id]&&i[u.id]){let c={};for(let m in u.inputs){let f=u.inputs[m];o[f.id]&&(c[m]=f)}let p=Object.assign({},u);p.inputs=c,p.outputs=u.outputs,a.push(p)}}return a}function z1(r,t,e,o){for(let n=t.length-1;n>=0;n--){let s=t[n],i=[];if(s.outputs.forEach(l=>{let u=r[l.id];u!=null?i.push(u):i.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let a=s.gradient(i);for(let l in s.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);let u=e(()=>a[l]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[l];if(!Jo(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let p=r[c.id];r[c.id]=o(p,u),p.dispose()}}}}var M1=20,sf=3,t0=7;function B1(r,t,e,o){let n=vs(t),s=rG(r,t,e,n),i=t.length,a=Rd(r,t,e,n,s),l=["Tensor"];return o&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join(`
`)),l.join(`
`)}function rG(r,t,e,o){let n=Vt(t),s=o[o.length-1],i=new Array(s).fill(0),a=t.length,l=e==="complex64"?lf(r):r;if(a>1)for(let u=0;u<n/s;u++){let c=u*s;for(let p=0;p<s;p++)i[p]=Math.max(i[p],af(l[c+p],0,e).length)}return i}function af(r,t,e){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(t0))} + ${parseFloat(r[1].toFixed(t0))}j`:uc(r)?o=`'${r}'`:e==="bool"?o=V1(r):o=parseFloat(r.toFixed(t0)).toString(),Ql(o,t)}function V1(r){return r===0?"false":"true"}function Rd(r,t,e,o,n,s=!0){let i=e==="complex64"?2:1,a=t[0],l=t.length;if(l===0){if(e==="complex64"){let d=lf(r);return[af(d[0],0,e)]}return e==="bool"?[V1(r[0])]:[r[0].toString()]}if(l===1){if(a>M1){let g=sf*i,x=Array.from(r.slice(0,g)),b=Array.from(r.slice((a-sf)*i,a*i));return e==="complex64"&&(x=lf(x),b=lf(b)),["["+x.map((w,C)=>af(w,n[C],e)).join(", ")+", ..., "+b.map((w,C)=>af(w,n[a-sf+C],e)).join(", ")+"]"]}let d=e==="complex64"?lf(r):Array.from(r);return["["+d.map((g,x)=>af(g,n[x],e)).join(", ")+"]"]}let u=t.slice(1),c=o.slice(1),p=o[0]*i,m=[];if(a>M1){for(let d=0;d<sf;d++){let g=d*p,x=g+p;m.push(...Rd(r.slice(g,x),u,e,c,n,!1))}m.push("...");for(let d=a-sf;d<a;d++){let g=d*p,x=g+p;m.push(...Rd(r.slice(g,x),u,e,c,n,d===a-1))}}else for(let d=0;d<a;d++){let g=d*p,x=g+p;m.push(...Rd(r.slice(g,x),u,e,c,n,d===a-1))}let f=l===2?",":"";m[0]="["+m[0]+f;for(let d=1;d<m.length-1;d++)m[d]=" "+m[d]+f;let h=`,
`;for(let d=2;d<l;d++)h+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":h),m}function lf(r){let t=[];for(let e=0;e<r.length;e+=2)t.push([r[e],r[e+1]]);return t}var Kt=class{constructor(t,e,o){if(this.dtype=e,this.shape=t.slice(),this.size=Vt(t),o!=null){let n=o.length;$(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(e==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||MC(e,this.size),this.strides=vs(t)}set(t,...e){e.length===0&&(e=[0]),$(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);let o=this.locToIndex(e);this.values[o]=t}get(...t){t.length===0&&(t=[0]);let e=0;for(let n of t){if(n<0||n>=this.shape[e]){let s=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(s)}e++}let o=t[t.length-1];for(let n=0;n<t.length-1;++n)o+=this.strides[n]*t[n];return this.values[o]}locToIndex(t){if(this.rank===0)return 0;if(this.rank===1)return t[0];let e=t[t.length-1];for(let o=0;o<t.length-1;++o)e+=this.strides[o]*t[o];return e}indexToLoc(t){if(this.rank===0)return[];if(this.rank===1)return[t];let e=new Array(this.shape.length);for(let o=0;o<e.length-1;++o)e[o]=Math.floor(t/this.strides[o]),t-=e[o]*this.strides[o];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return is().makeTensor(this.values,this.shape,this.dtype)}},is=null,tp=null,oG=null;function G1(r){is=r}function U1(r){tp=r}function W1(r){oG=r}var Pt=class{constructor(t,e,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Vt(t),this.strides=vs(t),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let t=await this.data();return tp.buffer(this.shape,this.dtype,t)}bufferSync(){return tp.buffer(this.shape,this.dtype,this.dataSync())}async array(){let t=await this.data();return Zl(this.shape,t,this.dtype==="complex64")}arraySync(){return Zl(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let t=is().read(this.dataId);if(this.dtype==="string"){let e=await t;try{return e.map(o=>Jc(o))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),is().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();let t=is().readSync(this.dataId);if(this.dtype==="string")try{return t.map(e=>Jc(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();let t=await is().read(this.dataId);return this.dtype==="string"?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(is().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return tp.print(this,t)}clone(){return this.throwIfDisposed(),tp.clone(this)}toString(t=!1){let e=this.dataSync();return B1(e,this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),tp.cast(this,t)}variable(t=!0,e,o){return this.throwIfDisposed(),is().makeVariable(this,t,e,o)}};Object.defineProperty(Pt,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function O(){return tf("Tensor",()=>Pt)}O();var ia=class extends Pt{constructor(t,e,o,n){super(t.shape,t.dtype,t.dataId,n),this.trainable=e,this.name=o}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Jo(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);is().disposeTensor(this),this.dataId=t.dataId,is().incRef(this,null)}dispose(){is().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(ia,Symbol.hasInstance,{value:r=>r instanceof Pt&&r.assign!=null&&r.assign instanceof Function});var sn={};Jt(sn,{assertTypesMatch:()=>i0,getTensorsInContainer:()=>uf,isTensorInList:()=>sG,makeTypesMatch:()=>zt});var e0;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(e0||(e0={}));var r0;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(r0||(r0={}));var o0;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(o0||(o0={}));var n0;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(n0||(n0={}));var s0;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(s0||(s0={}));var nG={float32:n0,int32:r0,bool:o0,complex64:s0};function oe(r,t){if(r==="string"||t==="string"){if(r==="string"&&t==="string")return"string";throw new Error(`Can not upcast ${r} with ${t}`)}return nG[r][t]}function aa(r){return oe(r,"int32")}function zt(r,t){if(r.dtype===t.dtype)return[r,t];let e=oe(r.dtype,t.dtype);return[r.cast(e),t.cast(e)]}function i0(r,t){$(r.dtype===t.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${t.dtype}) input must match`)}function sG(r,t){return t.some(e=>e.id===r.id)}function uf(r){let t=[];return H1(r,t,new Set),t}function H1(r,t,e){if(r==null)return;if(r instanceof Pt){t.push(r);return}if(!iG(r))return;let o=r;for(let n in o){let s=o[n];e.has(s)||(e.add(s),H1(s,t,e))}}function iG(r){return Array.isArray(r)||typeof r=="object"}function a0(r){return r.kernelName!=null}var Fd=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(let t in this.registeredVariables)this.registeredVariables[t].dispose()}},pl=class{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Fd}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry))if(t in this.registryFactory){let{asyncInit:e}=this.initializeBackend(t);if(e)return null}else return null;return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,o=1){return t in this.registryFactory?(si(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:o},!0)}async setBackend(t){if(this.registryFactory[t]==null)throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,this.registry[t]==null){this.backendInstance=null;let{success:e,asyncInit:o}=this.initializeBackend(t);if(!(o?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Dd(this.backendInstance),!0}setupRegisteredKernels(){jC(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){jC(t).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[t])})}initializeBackend(t){let e=this.registryFactory[t];if(e==null)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{let o=e.factory();if(o&&!(o instanceof _n)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(i=>n<this.pendingBackendInitId?!1:(this.registry[t]=i,this.pendingBackendInit=null,!0)).catch(i=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,si(`Initialization of backend ${t} failed`),si(i.stack||i.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[t]=o,{success:!0,asyncInit:!1}}catch(o){return si(`Initialization of backend ${t} failed`),si(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){let o=this.state.tensorInfo.get(e),n=o.backend,s=this.readSync(e),i=n.refCount(e);n.disposeData(e,!0),o.backend=t,t.move(e,s,o.shape,o.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let o=null;if(e==null){if(typeof t!="function")throw new Error("Please provide a function to tidy()");e=t}else{if(typeof t!="string"&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof e!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,o){t();try{let n=o();return e(),n}catch(n){throw e(),n}}nextTensorId(){return pl.nextTensorId++}nextVariableId(){return pl.nextVariableId++}clone(t){let e=N.runKernel(Fo,{x:t}),o={x:t},n=i=>({x:()=>{let a="float32",l={x:i},u={dtype:a};return N.runKernel(No,l,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[e],n,s,{}),e}runKernel(t,e,o){if(this.backendName==null&&this.backend,!(of(t,this.backendName)!=null))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,o){let n=this.backend.numDataIds(),s=0;o.forEach(l=>{s+=l.dtype==="complex64"?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=n-e-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t){let e,o=[],n=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l,u=a0(t)?t.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(a0(t)){let{kernelName:h,inputs:d,attrs:g}=t;this.backendName==null&&this.backend;let x=of(h,this.backendName);$(x!=null,()=>`Cannot find registered kernel '${h}' for backend '${this.backendName}'`),a=()=>{let b=this.backend.numDataIds();l=x.kernelFunc({inputs:d,attrs:g,backend:this.backend});let w=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,b,w);let C=w.map(k=>k.rank!=null?k:this.makeTensorFromTensorInfo(k));if(n){let k=this.getTensorsForGradient(h,d,C);o=this.saveTensorsForBackwardMode(k)}return C}}else{let{forwardFunc:h}=t,d=g=>{!n||(o=g.map(x=>this.keep(this.clone(x))))};a=()=>{let g=this.backend.numDataIds();l=this.tidy(()=>h(this.backend,d));let x=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,x),x}}let{inputs:c,attrs:p}=t,m=a0(t)?null:t.backwardsFunc,f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?e=a():(f=this.profiler.profileKernel(u,c,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),e=f.outputs)}),n&&this.addTapeNode(u,c,e,m,o,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(h=>c[h]!=null?c[h].shape:null),outputShapes:e.map(h=>h.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?e:e[0]}saveTensorsForBackwardMode(t){return t.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(t,e,o){let n=KC(t);if(n!=null){let s=n.inputsToSave||[],i=n.outputsToSave||[],a;n.saveAllInputs?($(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(u=>e[u])):a=s.map(u=>e[u]);let l=o.filter((u,c)=>i[c]);return a.concat(l)}return[]}makeTensor(t,e,o,n){if(t==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=t;o==="string"&&uc(t[0])&&(s=t.map(l=>Qc(l)));let i=n.write(s,e,o),a=new Pt(e,o,i,this.nextTensorId());if(this.trackTensor(a,n),o==="string"){let l=this.state.tensorInfo.get(i),u=GC(s);this.state.numBytes+=u-l.bytes,l.bytes=u}return a}makeTensorFromDataId(t,e,o,n){o=o||"float32";let s={dataId:t,shape:e,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(t,e){let{dataId:o,shape:n,dtype:s}=t,i=new Pt(n,s,o,this.nextTensorId());return this.trackTensor(i,e),i}makeVariable(t,e=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==t.dtype&&(t=t.cast(n));let s=new ia(t,e,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,t.dtype==="string"&&this.state.numStringTensors++;let o=0;t.dtype!=="complex64"&&t.dtype!=="string"&&(o=t.size*Nd(t.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:o})),t instanceof ia||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;let e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,t.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),t.dtype!=="complex64"&&t.dtype!=="string"){let o=t.size*Nd(t.dtype);this.state.numBytes-=o}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(let t in this.state.registeredVariables){let e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),this.state.registeredVariables[t.name]!=null&&delete this.state.registeredVariables[t.name]}memory(){let t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,t.reasons==null&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;let e=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(t,e,o,n,s,i){let a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:o,saved:s},l=KC(t);l!=null&&(n=l.gradFunc),n!=null&&(a.gradient=u=>(u=u.map((c,p)=>{if(c==null){let m=o[p],f=fc(m.size,m.dtype);return this.makeTensor(f,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){let e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){let e=uf(t),o=new Set(e.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let i=this.state.activeScope.track[s];!i.kept&&!o.has(i.id)&&i.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(t,e,o,n=!1){if($(e.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));$(s instanceof Pt,()=>"The result y returned by f() must be a tensor.");let i=L1(this.state.activeTape,e,s);if(!n&&i.length===0&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let a={};a[s.id]=o??aG(s.shape),z1(a,i,u=>this.tidy(u),lG);let l=e.map(u=>a[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:l}})}customGrad(t){return $(pc(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{$(e.every(a=>a instanceof Pt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};e.forEach((a,l)=>{n[l]=a});let s=(a,l)=>(o=t(...e,l),$(o.value instanceof Pt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),$(pc(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),i=(a,l)=>{let u=o.gradFunc(a,l),c=Array.isArray(u)?u:[u];$(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),$(c.every(m=>m instanceof Pt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let p={};return c.forEach((m,f)=>{p[f]=()=>m}),p};return this.runKernelFunc({forwardFunc:s,backwardsFunc:i,inputs:n})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){let e=su(),o=await this.backend.time(t);return o.wallMs=su()-e,o}track(t){return this.state.activeScope!=null&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Fd;for(let t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};pl.nextTensorId=0;pl.nextVariableId=0;function aG(r){let t=Ym(Vt(r),"float32");return N.makeTensor(t,r,"float32")}function l0(){let r=HC();if(r._tfengine==null){let t=new Jm(r);r._tfengine=new pl(t)}return x1(r._tfengine.ENV),G1(()=>r._tfengine),r._tfengine}var N=l0();function lG(r,t){let e={a:r,b:t};return N.runKernel(Jr,e)}var ml={};Jt(ml,{isBrowser:()=>c0,isMobile:()=>pG,mockIsMobile:()=>cG});function uG(){return typeof navigator<"u"&&navigator!=null}var u0;function cG(r){u0=r}function pG(r){if(u0!==void 0)return u0;if(r||uG()){if(r||(r=navigator),r.product==="ReactNative")return!0;let t=r.userAgent||r.vendor||(typeof window<"u"?window.opera:"");if(!t){let e=r;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function c0(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}var Uo=L();Uo.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});Uo.registerFlag("IS_BROWSER",()=>c0());Uo.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u");Uo.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));Uo.registerFlag("PROD",()=>!1);Uo.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Uo.getBool("DEBUG"));Uo.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);Uo.registerFlag("IS_TEST",()=>!1);Uo.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);Uo.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);Uo.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);Uo.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);function to(r,t){let e=r;if(po(r))return t==="string"?[]:[r.length];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(e)||po(e)&&t!=="string";)o.push(e.length),e=e[0];return Array.isArray(r)&&L().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&K1(r,o,[]),o}function K1(r,t,e){if(e=e||[],!Array.isArray(r)&&!po(r)){$(t.length===0,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);return}$(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`),$(r.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${r.length} elements`);let o=t.slice(1);for(let n=0;n<r.length;++n)K1(r[n],o,e.concat(n))}function q1(r,t,e,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==t||r==="numeric"&&t==="string")throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t} tensor`)}}function v(r,t,e,o="numeric"){if(r instanceof Pt)return q1(o,r.dtype,t,e),r;let n=cc(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),q1(o,n,t,e),r==null||!po(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let l=r==null?"null":r.constructor.name;throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`)}let s=to(r,n);!po(r)&&!Array.isArray(r)&&(r=[r]);let a=n!=="string"?Zc(r,n):Oa(r,[],!0);return N.makeTensor(a,s,n)}function iu(r,t,e,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,i)=>v(s,`${t}[${i}]`,e,o))}var p0="__op";function T(r){let t=Object.keys(r);if(t.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0],o=r[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e=e+p0;let n=(...s)=>{N.startScope(e);try{let i=o(...s);return Qm(i)&&console.error("Cannot return a Promise inside of tidy."),N.endScope(i),i}catch(i){throw N.endScope(null),i}};return Object.defineProperty(n,"name",{value:e,configurable:!0}),n}function mG(r,t){let e=v(r,"real","complex"),o=v(t,"imag","complex");Pe(e.shape,o.shape,`real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:e,imag:o};return N.runKernel(Gi,n)}var eo=T({complex_:mG});function Pr(r,t,e,o){if(o==null&&(o=cc(r)),o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!po(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(t!=null){Zm(t);let n=Vt(t),s=Vt(e);$(n===s,()=>`Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`);for(let i=0;i<e.length;++i){let a=e[i],l=i===e.length-1?a!==Vt(t.slice(i)):!0;$(e[i]===t[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!po(r)&&!Array.isArray(r)&&(r=[r]),t=t||e,r=o!=="string"?Zc(r,o):Oa(r,[],!0),N.makeTensor(r,t,o)}function mr(r,t,e){let o=to(r,e);return Pr(r,t,o,e)}var cf={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var _d=4;async function X1(r,t){let e=[],o=[],n=Array.isArray(r)?r.map(i=>i.name):Object.keys(r);for(let i=0;i<n.length;++i){let a=n[i],l=Array.isArray(r)?r[i].tensor:r[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);let u={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){let c=new Promise(async p=>{let m=await l.bytes(),f=m.reduce((g,x)=>g+x.length,0)+_d*m.length,h=new Uint8Array(f),d=0;for(let g=0;g<m.length;g++){let x=m[g],b=new Uint8Array(new Uint32Array([x.length]).buffer);h.set(b,d),d+=_d,h.set(x,d),d+=x.length}p(h)});o.push(c)}else o.push(l.data());t!=null&&(u.group=t),e.push(u)}let s=await Promise.all(o);return{data:fG(s),specs:e}}function Od(r,t){let e={},o,n=0;for(let s of t){let i=s.name,a=s.dtype,l=s.shape,u=Vt(l),c;if("quantization"in s){let p=s.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(a!=="float32")throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${a}.`)}else throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let m=cf[p.dtype],f=r.slice(n,n+u*m),h=p.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(a==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){c=new Float32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=g*p.scale+p.min}}else if(p.dtype==="float16")o===void 0&&(o=xG()),c=o(h);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(a==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);c=new Int32Array(h.length);for(let d=0;d<h.length;d++){let g=h[d];c[d]=Math.round(g*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*m}else if(a==="string"){let p=Vt(s.shape);c=[];for(let m=0;m<p;m++){let f=new Uint32Array(r.slice(n,n+_d))[0];n+=_d;let h=new Uint8Array(r.slice(n,n+f));c.push(h),n+=f}}else{let p=cf[a],m=r.slice(n,n+u*p);if(a==="float32")c=new Float32Array(m);else if(a==="int32")c=new Int32Array(m);else if(a==="bool")c=new Uint8Array(m);else if(a==="complex64"){c=new Float32Array(m);let f=new Float32Array(c.length/2),h=new Float32Array(c.length/2);for(let x=0;x<f.length;x++)f[x]=c[x*2],h[x]=c[x*2+1];let d=mr(f,l,"float32"),g=mr(h,l,"float32");e[i]=eo(d,g),d.dispose(),g.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*p}a!=="complex64"&&(e[i]=mr(c,l,a))}return e}function fG(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let t=0,e=[];r.forEach(s=>{if(t+=s.byteLength,e.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(t),n=0;return e.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var m0=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function j1(r){return m0?Buffer.byteLength(r):new Blob([r]).size}function Y1(r){if(m0)return Buffer.from(r).toString("base64");let t=new Uint8Array(r),e="";for(let o=0,n=t.length;o<n;o++)e+=String.fromCharCode(t[o]);return btoa(e)}function Z1(r){if(m0){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let t=atob(r),e=new Uint8Array(t.length);for(let o=0;o<t.length;++o)e.set([t.charCodeAt(o)],o);return e.buffer}function ep(r){if(r.length===1)return r[0];let t=0;r.forEach(n=>{t+=n.byteLength});let e=new Uint8Array(t),o=0;return r.forEach(n=>{e.set(new Uint8Array(n),o),o+=n.byteLength}),e.buffer}function f0(r){let t="/";for(r=r.trim();r.endsWith(t);)r=r.slice(0,r.length-1);let e=r.split(t);return e[e.length-1]}function Pd(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:t};return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),e}async function rp(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),r.weightsManifest!=null){let[o,n]=await t(r.weightsManifest);e.weightSpecs=o,e.weightData=n}return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),e}function ii(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:j1(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:j1(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function hG(){let r=e=>{let o=e<<13,n=0;for(;(o&8388608)===0;)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=r(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}function dG(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let t=1;t<31;t++)r[t]=t<<23;for(let t=33;t<63;t++)r[t]=2147483648+(t-32<<23);return r}function gG(){let r=new Uint32Array(64);for(let t=0;t<64;t++)r[t]=1024;return r[0]=r[32]=0,r}function xG(){let r=hG(),t=dG(),e=gG();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let i=0;i<o.length;i++){let a=o[i],l=r[e[a>>10]+(a&1023)]+t[a>>10];s[i]=l}return new Float32Array(n)}}var ue=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return ue.instance==null&&(ue.instance=new ue),ue.instance}static registerSaveRouter(t){ue.getInstance().saveRouters.push(t)}static registerLoadRouter(t){ue.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return ue.getHandlers(t,"save")}static getLoadHandlers(t,e){return ue.getHandlers(t,"load",e)}static getHandlers(t,e,o){let n=[];return(e==="load"?ue.getInstance().loadRouters:ue.getInstance().saveRouters).forEach(i=>{let a=i(t,o);a!==null&&n.push(a)}),n}},Q1=r=>ue.registerSaveRouter(r),J1=r=>ue.registerLoadRouter(r),tk=r=>ue.getSaveHandlers(r),ek=(r,t)=>ue.getLoadHandlers(r,t);var h0="tensorflowjs",d0=1,au="models_store",fl="model_info_store";function rk(){if(!L().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window>"u"?self:window,t=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(t==null)throw new Error("The current browser does not appear to support IndexedDB.");return t}function g0(r){let t=r.result;t.createObjectStore(au,{keyPath:"modelPath"}),t.createObjectStore(fl,{keyPath:"modelPath"})}var ai=class{constructor(t){if(this.indexedDB=rk(),t==null||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((o,n)=>{let s=this.indexedDB.open(h0,d0);s.onupgradeneeded=()=>g0(s),s.onsuccess=()=>{let i=s.result;if(e==null){let a=i.transaction(au,"readonly"),u=a.objectStore(au).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return i.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(i.close(),n(u.error)),a.oncomplete=()=>i.close()}else{let a=ii(e),l=i.transaction(fl,"readwrite"),u=l.objectStore(fl),c=u.put({modelPath:this.modelPath,modelArtifactsInfo:a}),p;c.onsuccess=()=>{p=i.transaction(au,"readwrite");let f=p.objectStore(au).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:a});f.onsuccess=()=>o({modelArtifactsInfo:a}),f.onerror=h=>{u=l.objectStore(fl);let d=u.delete(this.modelPath);d.onsuccess=()=>(i.close(),n(f.error)),d.onerror=g=>(i.close(),n(f.error))}},c.onerror=m=>(i.close(),n(c.error)),l.oncomplete=()=>{p==null?i.close():p.oncomplete=()=>i.close()}}},s.onerror=i=>n(s.error)})}};ai.URL_SCHEME="indexeddb://";var ok=r=>L().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(ai.URL_SCHEME)?yG(r.slice(ai.URL_SCHEME.length)):null;ue.registerSaveRouter(ok);ue.registerLoadRouter(ok);function yG(r){return new ai(r)}function bG(r){return r.startsWith(ai.URL_SCHEME)?r.slice(ai.URL_SCHEME.length):r}var Ld=class{constructor(){this.indexedDB=rk()}async listModels(){return new Promise((t,e)=>{let o=this.indexedDB.open(h0,d0);o.onupgradeneeded=()=>g0(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(fl,"readonly"),a=s.objectStore(fl).getAll();a.onsuccess=()=>{let l={};for(let u of a.result)l[u.modelPath]=u.modelArtifactsInfo;t(l)},a.onerror=l=>(n.close(),e(a.error)),s.oncomplete=()=>n.close()},o.onerror=n=>e(o.error)})}async removeModel(t){return t=bG(t),new Promise((e,o)=>{let n=this.indexedDB.open(h0,d0);n.onupgradeneeded=()=>g0(n),n.onsuccess=()=>{let s=n.result,i=s.transaction(fl,"readwrite"),a=i.objectStore(fl),l=a.get(t),u;l.onsuccess=()=>{if(l.result==null)return s.close(),o(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{let c=a.delete(t),p=()=>{u=s.transaction(au,"readwrite");let f=u.objectStore(au).delete(t);f.onsuccess=()=>e(l.result.modelArtifactsInfo),f.onerror=h=>o(l.error)};c.onsuccess=p,c.onerror=m=>(p(),s.close(),o(l.error))}},l.onerror=c=>(s.close(),o(l.error)),i.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var la="/",op="tensorflowjs_models",nk="info",wG="model_topology",CG="weight_specs",IG="weight_data",SG="model_metadata";function sk(r){return{info:[op,r,nk].join(la),topology:[op,r,wG].join(la),weightSpecs:[op,r,CG].join(la),weightData:[op,r,IG].join(la),modelMetadata:[op,r,SG].join(la)}}function ik(r){for(let t of Object.values(r))window.localStorage.removeItem(t)}function vG(r){let t=r.split(la);if(t.length<3)throw new Error(`Invalid key format: ${r}`);return t.slice(1,t.length-1).join(la)}function kG(r){return r.startsWith(li.URL_SCHEME)?r.slice(li.URL_SCHEME.length):r}var li=class{constructor(t){if(!L().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,t==null||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=sk(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let e=JSON.stringify(t.modelTopology),o=JSON.stringify(t.weightSpecs),n=ii(t);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,Y1(t.weightData));let s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:t.signature!=null?t.signature:void 0,userDefinedMetadata:t.userDefinedMetadata!=null?t.userDefinedMetadata:void 0,modelInitializer:t.modelInitializer!=null?t.modelInitializer:void 0,trainingConfig:t.trainingConfig!=null?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:n}}catch{throw ik(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let t=JSON.parse(this.LS.getItem(this.keys.info));if(t==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(t.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let e={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let a=JSON.parse(s);e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy,a.signature!=null&&(e.signature=a.signature),a.userDefinedMetadata!=null&&(e.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(e.modelInitializer=a.modelInitializer),a.trainingConfig!=null&&(e.trainingConfig=a.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=Z1(i),e}};li.URL_SCHEME="localstorage://";var ak=r=>L().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(li.URL_SCHEME)?TG(r.slice(li.URL_SCHEME.length)):null;ue.registerSaveRouter(ak);ue.registerLoadRouter(ak);function TG(r){return new li(r)}var zd=class{constructor(){$(L().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),$(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let t={},e=op+la,o=la+nk;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(e)&&s.endsWith(o)){let i=vG(s);t[i]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){t=kG(t);let e=sk(t);if(this.LS.getItem(e.info)==null)throw new Error(`Cannot find model at path '${t}'`);let o=JSON.parse(this.LS.getItem(e.info));return ik(e),o}};var np="://",fr=class{constructor(){this.managers={}}static getInstance(){return fr.instance==null&&(fr.instance=new fr),fr.instance}static registerManager(t,e){$(t!=null,()=>"scheme must not be undefined or null."),t.endsWith(np)&&(t=t.slice(0,t.indexOf(np))),$(t.length>0,()=>"scheme must not be an empty string.");let o=fr.getInstance();$(o.managers[t]==null,()=>`A model store manager is already registered for scheme '${t}'.`),o.managers[t]=e}static getManager(t){let e=fr.getInstance().managers[t];if(e==null)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(fr.getInstance().managers)}};function Md(r){if(r.indexOf(np)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${fr.getSchemes().join(",")}`);return{scheme:r.split(np)[0],path:r.split(np)[1]}}async function lk(r,t,e=!1){$(r!==t,()=>`Old path and new path are the same: '${r}'`);let o=ue.getLoadHandlers(r);$(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),$(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=ue.getSaveHandlers(t);$(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),$(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${t}.`);let i=s[0],a=Md(r).scheme,l=Md(r).path,u=a===Md(r).scheme,c=await n.load();e&&u&&await fr.getManager(a).removeModel(l);let p=await i.save(c);return e&&!u&&await fr.getManager(a).removeModel(l),p.modelArtifactsInfo}async function uk(){let r=fr.getSchemes(),t={};for(let e of r){let o=await fr.getManager(e).listModels();for(let n in o){let s=e+np+n;t[s]=o[n]}}return t}async function ck(r){let t=Md(r);return fr.getManager(t.scheme).removeModel(t.path)}async function pk(r,t){return lk(r,t,!1)}async function mk(r,t){return lk(r,t,!0)}var x0=class{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}};if(L().get("IS_BROWSER")){L().setPlatform("browser",new x0);try{fr.registerManager(li.URL_SCHEME,new zd)}catch{}try{fr.registerManager(ai.URL_SCHEME,new Ld)}catch{}}var NG={importFetch:()=>fk()},y0;var b0=class{constructor(){this.util=hk(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return L().global.fetch!=null?L().global.fetch(t,e):(y0==null&&(y0=NG.importFetch()),y0(t,e))}now(){let t=process.hrtime();return t[0]*1e3+t[1]/1e6}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return t.length===0?"":new this.util.TextDecoder(e).decode(t)}};L().get("IS_NODE")&&!L().get("IS_BROWSER")&&L().setPlatform("node",new b0);function ot(r,t="float32",e){return t=t||"float32",Zm(r),new Kt(r,t,e)}function EG(r,t){let e=v(r,"x","cast");if(!VC(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if(t==="string"&&e.dtype!=="string"||t!=="string"&&e.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:e},n={dtype:t};return N.runKernel(No,o,n)}var j=T({cast_:EG});function $G(r){let e={x:v(r,"x","clone","string_or_numeric")};return N.runKernel(Fo,e)}var Lr=T({clone_:$G});function Bd(r,t=!1){console.log(r.toString(t))}l0();var AG={buffer:ot,cast:j,clone:Lr,print:Bd};U1(AG);var as={};Jt(as,{browserFiles:()=>gk,browserHTTPRequest:()=>bk,concatenateArrayBuffers:()=>ep,copyModel:()=>pk,decodeWeights:()=>Od,encodeWeights:()=>X1,fromMemory:()=>wk,fromMemorySync:()=>k0,getLoadHandlers:()=>ek,getModelArtifactsForJSON:()=>rp,getModelArtifactsInfoForJSON:()=>ii,getSaveHandlers:()=>tk,http:()=>Gd,isHTTPScheme:()=>Vd,listModels:()=>uk,loadWeights:()=>xk,moveModel:()=>mk,registerLoadRouter:()=>J1,registerSaveRouter:()=>Q1,removeModel:()=>ck,weightsLoaderFactory:()=>S0,withSaveHandler:()=>Ck,withSaveHandlerSync:()=>Ik});var DG="model",RG=".json",FG=".weights.bin";function dk(r){return new Promise(t=>setTimeout(t)).then(r)}var ua=class{constructor(t){if(!L().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(ua.URL_SCHEME)&&(t=t.slice(ua.URL_SCHEME.length)),(t==null||t.length===0)&&(t=DG),this.modelJsonFileName=t+RG,this.weightDataFileName=t+FG}async save(t){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let o=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],n=Pd(t,o),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=s,await dk(()=>i.dispatchEvent(new MouseEvent("click"))),t.weightData!=null){let a=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;a.download=this.weightDataFileName,a.href=e,await dk(()=>a.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:ii(t)}}}};ua.URL_SCHEME="downloads://";var w0=class{constructor(t){if(t==null||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),i=s.modelTopology;if(i==null){e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){t({modelTopology:i});return}let l=rp(s,u=>this.loadWeights(u));t(l)},o.onerror=n=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(t){let e=[],o=[];for(let i of t)e.push(...i.weights),o.push(...i.paths);let n=this.checkManifestAndWeightFiles(t),s=o.map(i=>this.loadWeightsFile(i,n[i]));return Promise.all(s).then(i=>[e,ep(i)])}loadWeightsFile(t,e){return new Promise((o,n)=>{let s=new FileReader;s.onload=i=>{let a=i.target.result;o(a)},s.onerror=i=>n(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){let e=[],o=this.weightsFiles.map(s=>f0(s.name)),n={};for(let s of t)s.paths.forEach(i=>{let a=f0(i);if(e.indexOf(a)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),o.indexOf(a)===-1)throw new Error(`Weight file with basename '${a}' is not provided.`);n[i]=this.weightsFiles[o.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},_G=r=>L().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(ua.URL_SCHEME)?OG(r.slice(ua.URL_SCHEME.length)):null;ue.registerSaveRouter(_G);function OG(r="model"){return new ua(r)}function gk(r){return new w0(r)}function C0(r,t,e,o){i(r),e=e??0,o=o??1,a(e,o);let n=0,s=l=>(l.then(u=>{let c=e+ ++n/r.length*(o-e);return t(c),u}),l);function i(l){$(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")}function a(l,u){$(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),$(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),$(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}return Promise.all(r.map(s))}async function I0(r,t){t==null&&(t={});let e=t.fetchFunc==null?L().platform.fetch:t.fetchFunc,o=r.map(p=>e(p,t.requestInit,{isBinary:!0})),n=0,s=.5,a=(t.onProgress==null?await Promise.all(o):await C0(o,t.onProgress,n,s)).map(p=>p.arrayBuffer()),l=.5,u=1;return t.onProgress==null?await Promise.all(a):await C0(a,t.onProgress,l,u)}async function xk(r,t="",e,o){return S0(i=>I0(i,{requestInit:o}))(r,t,e)}function S0(r){return async(t,e="",o)=>{let n=t.map(()=>!1),s={},i=o!=null?o.map(()=>!1):[],a=[];if(t.forEach((f,h)=>{let d=0;f.weights.forEach(g=>{let x="quantization"in g?g.quantization.dtype:g.dtype,b=cf[x]*Vt(g.shape),w=()=>{n[h]=!0,s[h]==null&&(s[h]=[]),s[h].push({manifestEntry:g,groupOffset:d,sizeBytes:b})};o!=null?o.forEach((C,k)=>{C===g.name&&(w(),i[k]=!0)}):w(),a.push(g.name),d+=b})}),!i.every(f=>f)){let f=o.filter((h,d)=>!i[d]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`)}let l=n.reduce((f,h,d)=>(h&&f.push(d),f),[]),u=[];l.forEach(f=>{t[f].paths.forEach(h=>{let d=e+(e.endsWith("/")?"":"/")+h;u.push(d)})});let c=await r(u),p={},m=0;return l.forEach(f=>{let h=t[f].paths.length,d=0;for(let C=0;C<h;C++)d+=c[m+C].byteLength;let g=new ArrayBuffer(d),x=new Uint8Array(g),b=0;for(let C=0;C<h;C++){let k=new Uint8Array(c[m+C]);x.set(k,b),b+=k.byteLength}s[f].forEach(C=>{let k=g.slice(C.groupOffset,C.groupOffset+C.sizeBytes),E=Od(k,[C.manifestEntry]);for(let A in E)p[A]=E[A]}),m+=h}),p}}var PG="application/octet-stream",LG="application/json",pf=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?($(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=L().platform.fetch,$(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&$(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],n=Pd(t,o);e.body.append("model.json",new Blob([JSON.stringify(n)],{type:LG}),"model.json"),t.weightData!=null&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:PG}),"model.weights.bin");let s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:ii(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=e.modelTopology,n=e.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return rp(e,s=>this.loadWeights(s))}async loadWeights(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=zG(e),s=this.weightPathPrefix||o,i=[];for(let c of t)i.push(...c.weights);let a=[],l=[];for(let c of t)for(let p of c.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(p)):a.push(s+p+n);this.weightUrlConverter&&a.push(...await Promise.all(l));let u=await I0(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,ep(u)]}};pf.URL_SCHEME_REGEX=/^https?:\/\//;function zG(r){let t=r.lastIndexOf("/"),e=r.lastIndexOf("?"),o=r.substring(0,t),n=e>t?r.substring(e):"";return[o+"/",n]}function Vd(r){return r.match(pf.URL_SCHEME_REGEX)!=null}var yk=(r,t)=>{if(typeof fetch>"u"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(r)?e=r.every(o=>Vd(o)):e=Vd(r),e)return Gd(r,t)}return null};ue.registerSaveRouter(yk);ue.registerLoadRouter(yk);function Gd(r,t){return new pf(r,t)}function bk(r,t){return Gd(r,t)}var mf=class{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}},Ud=class{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}},v0=class{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}};function wk(r,t,e,o){let n=arguments;return new v0(k0(...n))}function k0(r,t,e,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new mf(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mf({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mf({modelTopology:r,weightSpecs:t,weightData:e,trainingConfig:o}))}function Ck(r){return new Ud(r)}function Ik(r){return new Ud(r)}function MG(r,t,e=!1,o=!1){let n=v(r,"a","matMul"),s=v(t,"b","matMul");[n,s]=zt(n,s);let i={a:n,b:s},a={transposeA:e,transposeB:o};return N.runKernel($s,i,a)}var Lt=T({matMul_:MG});function BG(r,t,e=1,o=0,n="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i={indices:v(r,"indices","oneHot","int32")},a={dtype:n,depth:t,onValue:e,offValue:o};return N.runKernel(Qa,i,a)}var lu=T({oneHot_:BG});function VG(r){L().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}W1(VG);function zr(){return N}function ff(){return N.memory()}function M(r,t){return N.tidy(r,t)}function St(r){uf(r).forEach(e=>e.dispose())}function be(r){return N.keep(r)}function Wd(r){return N.setBackend(r)}function Sk(){return N.ready()}function vk(){return N.backendName}function sp(r,t,e=1){return N.registerBackend(r,t,e)}function kk(){return N.backend}function GG(r){let e={input:v(r,"input","imag")};return N.runKernel(Ka,e)}var hl=T({imag_:GG});function UG(r){let e={x:v(r,"x","neg")};return N.runKernel(jn,e)}var Mt=T({neg_:UG});function WG(r){let e={input:v(r,"input","real")};return N.runKernel(Yi,e)}var ca=T({real_:WG});function HG(r,t,e){let o=v(r,"x","transpose");if(t==null&&(t=o.shape.map((i,a)=>a).reverse()),$(o.rank===t.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${t}.`),t.forEach(i=>{$(i>=0&&i<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${t}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:t};return o.dtype==="complex64"?M(()=>{let i=ca(o),a=hl(o);return i=N.runKernel(en,{x:i},s),a=N.runKernel(en,{x:a},s),e&&(a=Mt(a)),eo(i,a)}):N.runKernel(en,n,s)}var Rt=T({transpose_:HG});var Mr={};Jt(Mr,{assertAndGetBroadcastShape:()=>At,getBroadcastDims:()=>Tk,getReductionAxes:()=>ne});function Tk(r,t){let e=r.length,o=[];for(let n=0;n<e;n++){let s=e-1-n,i=r[s]||1;(t[t.length-1-n]||1)>1&&i===1&&o.unshift(s)}return o}function ne(r,t){let e=[];for(let o=0;o<t.length;o++){let n=r[r.length-o-1],s=t.length-o-1,i=t[s];(n==null||n===1&&i>1)&&e.unshift(s)}return e}function At(r,t){let e=[],o=Math.max(r.length,t.length);for(let n=0;n<o;n++){let s=r[r.length-n-1];s==null&&(s=1);let i=t[t.length-n-1];if(i==null&&(i=1),s===1)e.unshift(i);else if(i===1)e.unshift(s);else if(s!==i){let a=`Operands could not be broadcast together with shapes ${r} and ${t}.`;throw Error(a)}else e.unshift(s)}return e}var ip={};Jt(ip,{fromPixels:()=>QG,fromPixelsAsync:()=>YG,toPixels:()=>ZG});function Hd(r,t,e){if(To(r),t!=null&&t.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=to(r,e);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Pr(r,t,o,e)}var uu;function Nk(r,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,o=!1,n=!1,s=!1,i=!1,a=!1;if(r.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)i=!0;else if(typeof ImageBitmap<"u"&&r instanceof ImageBitmap)a=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(of(tu,N.backendName)!=null){let h={pixels:r},d={numChannels:t};return N.runKernel(tu,h,d)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],p;if(i)p=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||e)p=r.data;else if(s||n||a){if(uu==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")uu=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else uu=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});uu.canvas.width=u,uu.canvas.height=c,uu.drawImage(r,0,0,u,c),p=uu.getImageData(0,0,u,c).data}let m;if(t===4)m=new Int32Array(p);else{let h=u*c;m=new Int32Array(h*t);for(let d=0;d<h;d++)for(let g=0;g<t;++g)m[d*t+g]=p[d*4+g]}return Hd(m,[c,u,t],"int32")}function qG(r){return r!=null&&r.data instanceof Uint8Array}function KG(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}function jG(r){return r!=null&&r.width!==0&&r.height!==0}function XG(r){return KG()&&!(r instanceof ImageBitmap)&&jG(r)&&!qG(r)}async function YG(r,t=3){let e=null;if(L().getBool("WRAP_TO_IMAGEBITMAP")&&XG(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch{o=null}o!=null&&o.width===r.width&&o.height===r.height?e=o:e=r}else e=r;return Nk(e,t)}async function ZG(r,t){let e=v(r,"img","toPixels");if(!(r instanceof Pt)){let u=e;e=j(u,"int32"),u.dispose()}if(e.rank!==2&&e.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let[o,n]=e.shape.slice(0,2),s=e.rank===2?1:e.shape[2];if(s>4||s===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if(e.dtype!=="float32"&&e.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);let i=await e.data(),a=e.dtype==="float32"?255:1,l=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let f=i[u*s+m];if(e.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(e.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);s===1?(c[0]=f*a,c[1]=f*a,c[2]=f*a):c[m]=f*a}let p=u*4;l[p+0]=Math.round(c[0]),l[p+1]=Math.round(c[1]),l[p+2]=Math.round(c[2]),l[p+3]=Math.round(c[3])}if(t!=null){t.width=n,t.height=o;let u=t.getContext("2d"),c=new ImageData(l,n,o);u.putImageData(c,0,0)}return e!==r&&e.dispose(),l}var QG=T({fromPixels_:Nk});function JG(r,t){let e=r.shape.length,o=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(t.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[o-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[o-1]} vs. ${e}`);if(Vt(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=t.shape,s=n[n.length-1],i=1;for(let p=0;p<n.length-1;++p)i*=n[p];let a=r.shape,l=n.slice();l.pop();let u=1;for(let p=s;p<e;++p)u*=a[p],l.push(a[p]);let c=[...vs(r.shape).map(p=>p/u),1].slice(0,s);return[l,i,u,c]}function Ek(r,t,e){let o=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(e.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(e.rank-n))throw new Error(s+` Output shape length < ${o+(e.rank-n)}`);if(e.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let i=0;i<n;++i)if(e.shape[i]!==t.shape[i])throw new Error(s+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-n;++i)if(e.shape[i+n]!==r[i+o])throw new Error(s+` updates.shape[${i+n}] (${e.shape[i+n]}) != shape[${i+n}] (${r[i+n]})`)}function T0(r,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(t.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(e.length===0){if(t.size===0)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}Ek(e,t,r)}function tU(r,t,e){let o=t.shape.length,n=o>1?t.shape[o-1]:1,s=e.length,i=1;for(let p=n;p<s;++p)i*=e[p];let a=n<1?1:n,l=Vt(t.shape)/a,u=[...vs(e.slice(0,n)),1],c=Vt(e);return{sliceRank:n,numUpdates:l,sliceSize:i,strides:u,outputSize:c}}var xe={};Jt(xe,{assertParamsValid:()=>oU,computeFlatOffset:()=>lU,computeOutShape:()=>sU,getNormalizedAxes:()=>iU,isSliceContinous:()=>aU,maskToAxes:()=>nU,parseSliceParams:()=>E0,sliceInfo:()=>uU,startForAxis:()=>Pk,startIndicesWithElidedDims:()=>Fk,stopForAxis:()=>Lk,stopIndicesWithElidedDims:()=>_k,stridesForAxis:()=>Ok,stridesWithElidedDims:()=>Ak});var N0=-2,rU=-1;function oU(r,t,e){let o=r.shape.length;$(o===t.length,()=>`Error in slice${o}D: Length of begin ${t} must match the rank of the array (${o}).`),$(o===e.length,()=>`Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)$(t[n]+e[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${t[n]+e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function nU(r){let t=[],e=0;for(;r>0;)r&1&&t.push(e),r/=2,e++;return t}function sU(r,t,e){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((t[n]-r[n])/e[n]);return o}function Ak(r,t,e,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<e;s++)s===0?n[t]=1:(n.splice(t,0,1),n.pop());return n}function Dk(r,t,e){return e<=r?e:e-(t-1)}function Rk(r,t){let e=[];for(let o=0;o<r;o++)e.push(t+o);return e}function iU(r,t,e,o,n,s,i,a,l){let u=r.length,c=new Array(u),p=new Array(u),m=new Array(u);if(t.length&&e>0){let f=t[0],h=e+1;c=Fk(i,f,h,o,r),p=_k(a,f,h,n,r),m=Ak(s,f,h,r)}else for(let f=0;f<u;f++)c[f]=Pk(i,o,s,r,f,l),p[f]=Lk(a,n,s,r,f,l),m[f]=Ok(s,f,l);return{begin:c,end:p,strides:m}}function Fk(r,t,e,o,n){let s=[...n],i=Rk(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{let l=Dk(t,e,a),u=o[l];r&1<<l&&(u=0),s[a]=u}return s}function _k(r,t,e,o,n){let s=[...n],i=Rk(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{let l=Dk(t,e,a),u=o[l];r&1<<l&&(u=Number.MAX_SAFE_INTEGER),s[a]=u}for(let a=0;a<s.length;a++){let l=n[a];s[a]<0&&(s[a]+=l),s[a]=lc(0,s[a],n[a])}return s}function Ok(r,t,e){let o=r[t];return(e&1<<t||o==null)&&(o=1),o}function Pk(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),i=lc(0,i,l-1),i}function Lk(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),a>0?i=lc(0,i,l):i=lc(-1,i,l-1),i}function aU(r,t,e){let o=e.length;for(let n=0;n<e.length;n++)if(e[n]>1){o=n;break}for(let n=o+1;n<e.length;n++)if(t[n]>0||e[n]!==r[n])return!1;return!0}function lU(r,t){let e=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)e+=r[o]*t[o];return e}function E0(r,t,e){let o,n=r.shape.length;typeof t=="number"?o=[t,...new Array(n-1).fill(0)]:t.length<n?o=t.concat(new Array(n-t.length).fill(0)):o=t.slice(),o.forEach(i=>{$(i!==-1,()=>"slice() does not support negative begin indexing.")});let s;return e==null?s=new Array(n).fill(-1):typeof e=="number"?s=[e,...new Array(n-1).fill(-1)]:e.length<n?s=e.concat(new Array(n-e.length).fill(-1)):s=e,s=s.map((i,a)=>i>=0?i:($(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),r.shape[a]-o[a])),[o,s]}function uU(r,t,e,o,n,s,i,a,l){let u;if(o==null?(u=new Array(t.length),u.fill(1)):u=o,i!=null&&(i&i-1)!==0)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let w=0;w<p.dims;w++)c&&(1<<w&a)!==0&&p.numAddAxisAfterEllipsis++,1<<w&i&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};cU(p,m);let f=!0,h=!0,d=!0,g=[],x=[];for(let w=0;w<r.length;++w){if(m.strides[w]===0)throw Error(`strides[${w}] must be non-zero`);let C=!!(m.shrinkAxisMask&1<<w),k=r[w];if(k===-1){g.push(C?1:-1);continue}let E=[m.beginMask&1<<w,m.endMask&1<<w],A=[m.strides[w]>0?0:-1,m.strides[w]>0?k:k-1];if(C&&m.strides[w]<=0)throw Error("only stride 1 allowed on non-range indexing.");d=d&&m.strides[w]===1;let D=!!(m.beginMask&1<<w&&m.endMask&1<<w);if(m.beginValid&&m.endValid){if(C){let V=m.begin[w]<0?k+m.begin[w]:m.begin[w];if(m.begin[w]=V,m.end[w]=m.begin[w]+1,V<0||V>=k)throw Error(`slice index ${m.begin[w]} of dimension ${w} out of bounds.`)}else m.begin[w]=$k(m.begin[w],0,m.strides[w],k,E,A),m.end[w]=$k(m.end[w],1,m.strides[w],k,E,A);let B=m.strides[w]===1&&m.begin[w]===0&&m.end[w]===k;f=f&&B,h=h&&(w===0&&m.strides[w]===1||B)}else f=f&&m.strides[w]===1&&D,h=h&&(w===0&&m.strides[w]===1||D);let _,P=!1;if(m.beginValid&&m.endValid?(_=m.end[w]-m.begin[w],P=!0):C?(_=1,P=!0):D&&k>=0&&(m.strides[w]<0?_=-k:_=k,P=!0),P){let B;_===0||_<0!=m.strides[w]<0?B=0:B=Math.trunc(_/m.strides[w])+(_%m.strides[w]!==0?1:0),g.push(B)}else g.push(-1)}for(let w=0;w<m.finalShapeGatherIndices.length;++w){let C=m.finalShapeGatherIndices[w];C>=0?x.push(g[C]):C===N0&&x.push(1)}return{finalShapeSparse:x.filter((w,C)=>m.finalShapeGatherIndices[C]!==N0),finalShape:x,isIdentity:f,sliceDim0:h,isSimpleSlice:d,begin:m.begin,end:m.end,strides:m.strides}}function cU(r,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=r.begin!=null,t.endValid=r.end!=null,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(t.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,t.dims);for(;e<n;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=o}else if(1<<o&r.newAxisMask)t.finalShapeGatherIndices.push(N0),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);r.begin!=null&&(t.begin[e]=r.begin[o]),r.end!=null&&(t.end[e]=r.end[o]),t.strides[e]=r.strides[o],r.beginMask&1<<o&&(t.beginMask|=1<<e),r.endMask&1<<o&&(t.endMask|=1<<e),r.shrinkAxisMask&1<<o?(t.finalShapeGatherIndices.push(rU),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(o)),t.inputShapeGatherIndicesSparse[e]=o,e++}}function $k(r,t,e,o,n,s){if(n[t])return e>0?s[t]:s[t+1&1];{let i=r<0?o+r:r;return i<s[0]?s[0]:i>s[1]?s[1]:i}}var X={};Jt(X,{Serializable:()=>hf,SerializationMap:()=>ui,registerClass:()=>ro});var hf=class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}},ui=class{constructor(){this.classNameMap={}}static getMap(){return ui.instance==null&&(ui.instance=new ui),ui.instance}static register(t){ui.getMap().classNameMap[t.className]=[t,t.fromConfig]}};function ro(r){$(r.className!=null,()=>"Class being registered does not have the static className property defined."),$(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),$(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),ui.register(r)}var qd="3.20.0";function pU(r,t){let e=v(r,"a","add"),o=v(t,"b","add");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Jr,n)}var K=T({add_:pU});function mU(r,t){let e=v(r,"a","floorDiv"),o=v(t,"b","floorDiv");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Un,n)}var ap=T({floorDiv_:mU});function fU(r,t){let e=v(r,"a","div"),o=v(t,"b","div");if([e,o]=zt(e,o),e.dtype==="int32"&&o.dtype==="int32")return ap(e,o);let n={a:e,b:o},s={};return N.runKernel(Bn,n,s)}var nt=T({div_:fU});function hU(r,t){let e=v(r,"a","mul"),o=v(t,"b","mul");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Lo,n)}var F=T({mul_:hU});function dU(r){let t=v(r,"x","abs");if(t.dtype==="complex64"){let e={x:t};return N.runKernel(La,e)}else{let e={x:t};return N.runKernel(On,e)}}var de=T({abs_:dU});function gU(r){let e={x:v(r,"x","acos")};return N.runKernel(Pi,e)}var Kd=T({acos_:gU});function xU(r){let e={x:v(r,"x","acosh")};return N.runKernel(Li,e)}var jd=T({acosh_:xU});function yU(r){$(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),$(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let t=r.map((n,s)=>v(n,`tensors${s}`,"addN")),e=t[0];t.forEach(n=>{if(n.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(n=>{if(!Jo(n.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=t;return N.runKernel(ks,o)}var zk=T({addN_:yU});function bU(r,t=null,e=!1){let n={x:v(r,"x","all","bool")},s={axis:t,keepDims:e};return N.runKernel(hc,n,s)}var lp=T({all_:bU});function wU(r,t=null,e=!1){let n={x:v(r,"x","any","bool")},s={axis:t,keepDims:e};return N.runKernel(dc,n,s)}var cu=T({any_:wU});function CU(r,t=0){let o={x:v(r,"x","argMax")},n={axis:t};return N.runKernel(Ts,o,n)}var ci=T({argMax_:CU});function IU(r,t=0){let o={x:v(r,"x","argMin")},n={axis:t};return N.runKernel(Ns,o,n)}var Xd=T({argMin_:IU});function SU(r){let e={x:v(r,"x","asin")};return N.runKernel(zi,e)}var Yd=T({asin_:SU});function vU(r){let e={x:v(r,"x","asinh")};return N.runKernel(Mi,e)}var Zd=T({asinh_:vU});function kU(r){let e={x:v(r,"x","atan")};return N.runKernel(Bi,e)}var Qd=T({atan_:kU});function TU(r,t){let e=v(r,"a","atan2"),o=v(t,"b","atan2");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Pn,n)}var Jd=T({atan2_:TU});function NU(r){let e={x:v(r,"x","atanh")};return N.runKernel(Vi,e)}var tg=T({atanh_:NU});function EU(r,t,e,o,n="NHWC",s){let i=r[3],a=[...t,i],l=Bk(n);return mu(r,a,e,s,o,null,null,l)}function A0(r,t,e,o,n,s,i="channelsLast"){let[a,l]=eg(t),u;if(i==="channelsLast")u=[a,l,r[3],r[3]];else if(i==="channelsFirst")u=[a,l,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return mu(r,u,e,o,n,s,!1,i)}function $U(r,t,e,o,n,s,i="NDHWC"){let[a,l,u]=$0(t),c,p;if(i==="NDHWC")p="channelsLast",c=[a,l,u,r[4],r[4]];else if(i==="NCDHW")p="channelsFirst",c=[a,l,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return Mk(r,c,e,o,n,!1,p,s)}function mu(r,t,e,o,n,s,i=!1,a="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if(a==="channelsLast")[l,u,c,p]=r;else if(a==="channelsFirst")[l,p,u,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[m,f,,h]=t,[d,g]=eg(e),[x,b]=eg(o),w=up(m,x),C=up(f,b),{padInfo:k,outHeight:E,outWidth:A}=RU(n,u,c,d,g,w,C,s,a),D=i?h*p:h,_;return a==="channelsFirst"?_=[l,D,E,A]:a==="channelsLast"&&(_=[l,E,A,D]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:p,outHeight:E,outWidth:A,outChannels:D,padInfo:k,strideHeight:d,strideWidth:g,filterHeight:m,filterWidth:f,effectiveFilterHeight:w,effectiveFilterWidth:C,dilationHeight:x,dilationWidth:b,inShape:r,outShape:_,filterShape:t}}function Mk(r,t,e,o,n,s=!1,i="channelsLast",a){let[l,u,c,p,m]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[l,u,c,p,m]=r;else if(i==="channelsFirst")[l,m,u,c,p]=r;else throw new Error(`Unknown dataFormat ${i}`);let[f,h,d,,g]=t,[x,b,w]=$0(e),[C,k,E]=$0(o),A=up(f,C),D=up(h,k),_=up(d,E),{padInfo:P,outDepth:B,outHeight:V,outWidth:G}=FU(n,u,c,p,x,b,w,A,D,_,a),W=s?g*m:g,U;return i==="channelsFirst"?U=[l,W,B,V,G]:i==="channelsLast"&&(U=[l,B,V,G,W]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:p,inChannels:m,outDepth:B,outHeight:V,outWidth:G,outChannels:W,padInfo:P,strideDepth:x,strideHeight:b,strideWidth:w,filterDepth:f,filterHeight:h,filterWidth:d,effectiveFilterDepth:A,effectiveFilterHeight:D,effectiveFilterWidth:_,dilationDepth:C,dilationHeight:k,dilationWidth:E,inShape:r,outShape:U,filterShape:t}}function AU(r,t,e,o,n){o==null&&(o=D0(r,t,e));let s=r[0],i=r[1],a=pu((s-t+2*o)/e+1,n),l=pu((i-t+2*o)/e+1,n);return[a,l]}function DU(r,t,e,o,n,s){n==null&&(n=D0(r,t,o));let i=r[0],a=r[1],l=r[2],u=pu((i-t+2*n)/o+1,s),c=pu((a-t+2*n)/o+1,s),p=pu((l-t+2*n)/o+1,s);return[u,c,p,e]}function D0(r,t,e,o=1){let n=up(t,o);return Math.floor((r[0]*(e-1)-e+n)/2)}function eg(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function $0(r){return typeof r=="number"?[r,r,r]:r}function up(r,t){return t<=1?r:r+(r-1)*(t-1)}function RU(r,t,e,o,n,s,i,a,l){let u,c,p;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let f=AU([t,e],s,o,r,a);c=f[0],p=f[1]}else if(r==="same"){c=Math.ceil(t/o),p=Math.ceil(e/n);let m=Math.max(0,(c-1)*o+s-t),f=Math.max(0,(p-1)*n+i-e),h=Math.floor(m/2),d=m-h,g=Math.floor(f/2),x=f-g;u={top:h,bottom:d,left:g,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/o),p=Math.ceil((e-i+1)/n);else if(typeof r=="object"){let m=l==="channelsLast"?r[1][0]:r[2][0],f=l==="channelsLast"?r[1][1]:r[2][1],h=l==="channelsLast"?r[2][0]:r[3][0],d=l==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:f,left:h,right:d,type:m===0&&f===0&&h===0&&d===0?"VALID":"EXPLICIT"},c=pu((t-s+m+f)/o+1,a),p=pu((e-i+h+d)/n+1,a)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:p}}function FU(r,t,e,o,n,s,i,a,l,u,c){let p,m,f,h;if(typeof r=="number"){p={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=DU([t,e,o,1],a,1,n,r,c);m=g[0],f=g[1],h=g[2]}else if(r==="same"){m=Math.ceil(t/n),f=Math.ceil(e/s),h=Math.ceil(o/i);let d=(m-1)*n+a-t,g=(f-1)*s+l-e,x=(h-1)*i+u-o,b=Math.floor(d/2),w=d-b,C=Math.floor(g/2),k=g-C,E=Math.floor(x/2),A=x-E;p={top:C,bottom:k,left:E,right:A,front:b,back:w,type:"SAME"}}else if(r==="valid")p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},m=Math.ceil((t-a+1)/n),f=Math.ceil((e-l+1)/s),h=Math.ceil((o-u+1)/i);else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:p,outDepth:m,outHeight:f,outWidth:h}}function pu(r,t){if(!t)return Math.trunc(r);switch(t){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${t}`)}}function Wo(r){let[t,e,o]=eg(r);return t===1&&e===1&&o===1}function hr(r,t){return Wo(r)||Wo(t)}function Bk(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function ce(r,t,e){if(e!=null){if(typeof t=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if(typeof t=="number")$(Oi(t),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else if(typeof t=="object")t.forEach(o=>{o.forEach(n=>{$(Oi(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${t}`)}}function _U(r,t){let o={x:v(r,"x","reshape","string_or_numeric")},n={shape:t};return N.runKernel(Xs,o,n)}var R=T({reshape_:_U});function OU(r,t,e,o,n){let s=v(r,"x","avgPool","float32"),i=1;$(hr(e,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);let a=s,l=!1;s.rank===3&&(l=!0,a=R(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),ce("avgPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=N.runKernel(Es,u,c);return p=j(p,s.dtype),l?R(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var dl=T({avgPool_:OU});function PU(r,t,e,o,n,s="NDHWC"){let i=v(r,"x","avgPool3d","float32"),a=i,l=!1;i.rank===4&&(l=!0,a=R(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),$(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),$(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),ce("avgPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=N.runKernel(Pa,u,c);return p=j(p,a.dtype),l?R(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var rg=T({avgPool3d_:PU});function LU(r,t=0){$(r.length>=1,()=>"Pass at least one tensor to concat");let e=iu(r,"tensors","concat","string_or_numeric");if(e[0].dtype==="complex64"&&e.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),e.length===1)return Lr(e[0]);let o=e,n={axis:t};return N.runKernel(Ds,o,n)}var jt=T({concat_:LU});function zU(r){let e={x:v(r,"x","sigmoid","float32")};return N.runKernel(Mo,e)}var Er=T({sigmoid_:zU});function MU(r,t,e){let o=v(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:t,size:e};return N.runKernel(es,n,s)}var Nt=T({slice_:MU});function BU(r){let e={x:v(r,"x","tanh","float32")};return N.runKernel(ns,e)}var pi=T({tanh_:BU});function VU(r,t,e,o,n,s){let i=v(r,"forgetBias","basicLSTMCell"),a=v(t,"lstmKernel","basicLSTMCell"),l=v(e,"lstmBias","basicLSTMCell"),u=v(o,"data","basicLSTMCell"),c=v(n,"c","basicLSTMCell"),p=v(s,"h","basicLSTMCell"),m=jt([u,p],1),f=Lt(m,a),h=K(f,l),d=h.shape[0],g=h.shape[1]/4,x=[d,g],b=Nt(h,[0,0],x),w=Nt(h,[0,g],x),C=Nt(h,[0,g*2],x),k=Nt(h,[0,g*3],x),E=K(F(Er(b),pi(w)),F(c,Er(K(i,C)))),A=F(pi(E),Er(k));return[E,A]}var Vk=T({basicLSTMCell_:VU});function GU(r,t,e){let o=v(r,"x","batchToSpaceND"),n=t.reduce((a,l)=>a*l);$(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),$(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),$(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${n}`);let s={x:o},i={blockShape:t,crops:e};return N.runKernel(As,s,i)}var gl=T({batchToSpaceND_:GU});function Gk(r){let t;return r.rank===0||r.rank===1?t=R(r,[1,1,1,r.size]):r.rank===2?t=R(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?t=R(r,[1,r.shape[0],r.shape[1],r.shape[2]]):t=r,t}function UU(r,t,e,o,n,s){s==null&&(s=.001);let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;o!=null&&(c=v(o,"offset","batchNorm")),$(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),$(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),$(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:Gk(i),scale:u,offset:c,mean:a,variance:l},f={varianceEpsilon:s},h=N.runKernel(Ls,m,f);return R(h,i.shape)}var mi=T({batchNorm_:UU});function WU(r,t,e,o,n,s){let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),$(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),$(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),u!=null&&$(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),mi(i,a,l,c,u,s)}var og=T({batchNorm2d_:WU});function HU(r,t,e,o,n,s){let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),$(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),$(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),u!=null&&$(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),mi(i,a,l,c,u,s)}var ng=T({batchNorm3d_:HU});function qU(r,t,e,o,n,s){let i=v(r,"x","batchNorm"),a=v(t,"mean","batchNorm"),l=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),$(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),$(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),u!=null&&$(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),mi(i,a,l,c,u,s)}var sg=T({batchNorm4d_:qU});function KU(r,t,e){let o=v(r,"x","bincount"),n=v(t,"weights","bincount");$(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),$(e>=0,()=>`size must be non-negative, but got ${e}.`),$(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},i={size:e};return N.runKernel(yc,s,i)}var ig=T({bincount_:KU});function jU(r,t){let e=v(r,"s0","broadcastArgs","int32"),o=v(t,"s1","broadcastArgs","int32");if(e.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:e,s1:o};return N.runKernel(bc,n)}var Uk=T({broadcastArgs_:jU});function XU(r,t){let e=v(r,"broadcastTo","x"),o=e.shape;if(t.some(u=>!(u>0)||u%1!==0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){let u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=R(e,u)}let n=e.shape,s=Array.from(t);for(let u=t.length-1;u>=0;u--)if(n[u]===t[u])s[u]=1;else if(e.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return Lr(e);let a={x:e},l={reps:s};return N.runKernel(tn,a,l)}var an=T({broadcastTo_:XU});function YU(r){let e={x:v(r,"x","ceil","float32")};return N.runKernel(Eo,e)}var ag=T({ceil_:YU});function ZU(r,t,e){let o=v(r,"x","clipByValue");$(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`);let n={x:o},s={clipValueMin:t,clipValueMax:e};return N.runKernel(Ln,n,s)}var ir=T({clipByValue_:ZU});function QU(r){return jt(r,0)}var lg=T({concat1d_:QU});function JU(r,t){return jt(r,t)}var ug=T({concat2d_:JU});function tW(r,t){return jt(r,t)}var cg=T({concat3d_:tW});function eW(r,t){return jt(r,t)}var pg=T({concat4d_:eW});function rW(r,t,e,o,n="NHWC",s=[1,1],i){let a=v(r,"x","conv2d","float32"),l=v(t,"filter","conv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=R(a,[1,a.shape[0],a.shape[1],a.shape[2]])),$(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),$(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),ce("conv2d",o,i);let p=n==="NHWC"?u.shape[3]:u.shape[1];$(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),$(hr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=N.runKernel(Rs,m,f);return c?R(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var oo=T({conv2d_:rW});function oW(r,t,e,o,n="NWC",s=1,i){let a=v(r,"x","conv1d"),l=v(t,"filter","conv1d"),u=a,c=!1;a.rank===2&&(c=!0,u=R(a,[1,a.shape[0],a.shape[1]])),$(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),$(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),ce("conv1d",o,i),$(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),$(hr(e,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`),$(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let p=R(l,[1,l.shape[0],l.shape[1],l.shape[2]]),m=R(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=oo(m,p,[1,e],o,"NHWC",[1,s],i);return c?R(g,[g.shape[2],g.shape[3]]):R(g,[g.shape[0],g.shape[2],g.shape[3]])}var cp=T({conv1d_:oW});function nW(r,t,e,o,n,s="NHWC",i){$(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let a=r,l=t,u=!1;t.rank===3&&(u=!0,l=R(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,r[0],r[1],r[2]]),$(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),$(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),$(e.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);let c=s==="NHWC"?a[3]:a[1],p=s==="NHWC"?l.shape[3]:l.shape[1];$(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),$(p===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${e.shape[3]}.`),ce("conv2dDerInput",n,i);let m={dy:l,filter:e},f={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,inputShape:a},h=N.runKernel(Fs,m,f);return u?R(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var pp=T({conv2DBackpropInput_:nW});function sW(r,t,e,o,n,s){let i=v(r,"x","conv2dTranspose"),a=v(t,"filter","conv2dTranspose");return pp(e,i,a,o,n,"NHWC",s)}var mp=T({conv2dTranspose_:sW});function iW(r,t,e,o,n="NDHWC",s=[1,1,1]){let i=v(r,"x","conv3d"),a=v(t,"filter","conv3d"),l=i,u=!1;i.rank===4&&(u=!0,l=R(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),$(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),$(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),$(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),$(hr(e,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),$(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`);let c={x:l,filter:a},p={strides:e,pad:o,dataFormat:n,dilations:s},m=N.runKernel(za,c,p);return u?R(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var mg=T({conv3d_:iW});function aW(r,t,e,o,n){$(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let s=r,i=t,a=!1;t.rank===4&&(a=!0,i=R(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let l=s[4],u=i.shape[4];$(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),$(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),$(e.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),$(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),$(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);let c={dy:i,filter:e},p={pad:n,strides:o,inputShape:s},m=N.runKernel(Ic,c,p);return a?R(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var fg=T({conv3DBackpropInput_:aW});function lW(r,t,e,o,n){let s=v(r,"x","conv3dTranspose"),i=v(t,"filter","conv3dTranspose");return fg(e,s,i,o,n)}var hg=T({conv3dTranspose_:lW});function uW(r){let e={x:v(r,"x","cos","float32")};return N.runKernel(zn,e)}var xl=T({cos_:uW});function cW(r){let e={x:v(r,"x","cosh","float32")};return N.runKernel(Mn,e)}var fp=T({cosh_:cW});function pW(r,t=0,e=!1,o=!1){let s={x:v(r,"x","cumprod")},i={axis:t,exclusive:e,reverse:o};return N.runKernel(Ma,s,i)}var fu=T({cumprod_:pW});function mW(r,t=0,e=!1,o=!1){let s={x:v(r,"x","cumsum")},i={axis:t,exclusive:e,reverse:o};return N.runKernel(_s,s,i)}var hp=T({cumsum_:mW});function fW(r,t,e,o=!1){let n=v(r,"x","denseBincount"),s=v(t,"weights","denseBincount");$(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),$(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),$(e>=0,()=>`size must be non-negative, but got ${e}.`),$(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let i={x:n,weights:s},a={size:e,binaryOutput:o};return N.runKernel(Sc,i,a)}var Wk=T({denseBincount_:fW});function hW(r,t,e="NHWC"){let o=v(r,"x","depthToSpace","float32"),n=e==="NHWC"?o.shape[1]:o.shape[2],s=e==="NHWC"?o.shape[2]:o.shape[3],i=e==="NHWC"?o.shape[3]:o.shape[1];$(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),$(n*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${o.shape}`),$(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${o.shape}`),$(i%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${o.shape}`);let a={x:o},l={blockSize:t,dataFormat:e};return N.runKernel(Va,a,l)}var dg=T({depthToSpace_:hW});function dW(r,t,e,o,n="NHWC",s=[1,1],i){let a=v(r,"x","depthwiseConv2d","float32"),l=v(t,"filter","depthwiseConv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=R(a,[1,a.shape[0],a.shape[1],a.shape[2]])),$(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),$(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p=n==="NHWC"?u.shape[3]:u.shape[1];$(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),ce("depthwiseConv2d",o,i);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=N.runKernel(Os,m,f);return c?R(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var fi=T({depthwiseConv2d_:dW});function gW(r){let e={x:v(r,"x","diag")};return N.runKernel(Tc,e)}var Hk=T({diag_:gW});function xW(r,t,e,o,n=[1,1],s="NHWC"){let i=v(r,"x","dilation2d"),a=v(t,"filter","dilation2d");$(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),$(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),$(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;i.rank===3&&(l=R(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let c={x:l,filter:a},p={strides:e,pad:o,dilations:n},m=N.runKernel(Ga,c,p);return u?R(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var gg=T({dilation2d_:xW});function yW(r,t){let e=v(r,"a","equal","string_or_numeric"),o=v(t,"b","equal","string_or_numeric");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Gn,n)}var $r=T({equal_:yW});function bW(r,t,e){let o=v(t,"a","where"),n=v(e,"b","where"),s=v(r,"condition","where","bool"),i=At(At(s.shape,o.shape),n.shape),a=an(s,i),l=an(o,i),u=an(n,i),c={condition:a,t:l,e:u};return N.runKernel(Qs,c)}var ye=T({where_:bW});function wW(r){let e={x:v(r,"x","zerosLike")};return N.runKernel(ni,e)}var bt=T({zerosLike_:wW});function CW(r,t){let e=v(r,"a","div"),o=v(t,"b","div");[e,o]=zt(e,o);let n=nt(e,o),s=bt(n),i=$r(o,s);return ye(i,s,n)}var xg=T({divNoNan_:CW});function IW(r,t){let e=v(r,"t1","dot"),o=v(t,"t2","dot");$((e.rank===1||e.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);let n=e.rank===1?e.size:e.shape[1],s=o.rank===1?o.size:o.shape[0];if($(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),e.rank===1&&o.rank===1){let i=R(e,[1,-1]),a=R(o,[-1,1]),l=Lt(i,a);return R(l,[])}else if(e.rank===1&&o.rank===2){let i=R(e,[1,-1]),a=R(o,[o.shape[0],o.shape[1]]),l=Lt(i,a);return R(l,[l.size])}else if(e.rank===2&&o.rank===1){let i=R(o,[-1,1]),a=Lt(e,i);return R(a,[a.size])}else{let i=R(o,[o.shape[0],o.shape[1]]);return Lt(e,i)}}var yg=T({dot_:IW});function SW(r,...t){let e=t.map((n,s)=>v(n,`tensors${s}`,"einsum")),o={equation:r};return N.runKernel(Ua,e,o)}var qk=T({einsum_:SW});function vW(r){let e={x:v(r,"x","elu","float32")};return N.runKernel(Vn,e)}var hi=T({elu_:vW});function kW(r){let t=v(r,"x","erf");$(t.dtype==="int32"||t.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),t.dtype==="int32"&&(t=j(t,"float32"));let e={x:t};return N.runKernel(Ui,e)}var bg=T({erf_:kW});function R0(r,t){for(let e=0;e<r.length;++e)if(r[r.length-e-1]!==t-1-e)return!1;return!0}function Kk(r,t,e){let o=r.length+t.length,n=[],s=0,i=0;for(let a=0;a<o;a++)e.indexOf(a)===-1?n.push(r[s++]):n.push(t[i++]);return n}function F0(r,t){let e=[],o=r.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&e.push(r[s]);let n=t.map(s=>r[s]);return[e,n]}function ln(r,t){let e=t.map(o=>1);return Kk(r,e,t)}function TW(r,t,e){$(R0(t,e),()=>`${r} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function _0(r,t){if(R0(r,t))return null;let e=[];for(let o=0;o<t;++o)r.indexOf(o)===-1&&e.push(o);return r.forEach(o=>e.push(o)),e}function df(r){return r.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function NW(r,t){let e=[];for(let o=t-r;o<t;++o)e.push(o);return e}function EW(r,t=null,e=!1){let n={x:v(r,"x","max")},s={reductionIndices:t,keepDims:e};return N.runKernel(Bs,n,s)}var Cr=T({max_:EW});function $W(r,t=null,e=!1){let n={x:v(r,"x","min")},s={axis:t,keepDims:e};return N.runKernel(Us,n,s)}var hu=T({min_:$W});function AW(r,t){let e=v(r,"base","pow"),o=v(t,"exp","pow");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Yn,n)}var Br=T({pow_:AW});function st(r,t){if((po(r)&&t!=="string"||Array.isArray(r))&&t!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(t==="string"&&po(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Pr(r,[],[],t)}function DW(r){let e={x:v(r,"x","sqrt","float32")};return N.runKernel(Bo,e)}var pe=T({sqrt_:DW});function RW(r){let t=v(r,"x","square"),e={};return N.runKernel("Square",{x:t},e)}var Ot=T({square_:RW});function FW(r,t=null,e=!1){let o=v(r,"x","sum");o.dtype==="bool"&&(o=j(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return N.runKernel(Js,n,s)}var it=T({sum_:FW});function _W(r,t="euclidean",e=null,o=!1){r=v(r,"x","norm");let n=jk(r,t,e),s=n.shape;if(o){let i=Ye(e,r.shape);s=ln(n.shape,i)}return R(n,s)}function jk(r,t,e=null){if(r.rank===0)return de(r);if(r.rank!==1&&e===null)return jk(R(r,[-1]),t,e);if(r.rank===1||typeof e=="number"||Array.isArray(e)&&e.length===1){if(t===1)return it(de(r),e);if(t===1/0)return Cr(de(r),e);if(t===-1/0)return hu(de(r),e);if(t==="euclidean"||t===2)return pe(it(Br(de(r),st(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&e.length===2){if(t===1)return Cr(it(de(r),e[0]),e[1]-1);if(t===1/0)return Cr(it(de(r),e[1]),e[0]);if(t===-1/0)return hu(it(de(r),e[1]),e[0]);if(t==="fro"||t==="euclidean")return pe(it(Ot(r),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}var pa=T({norm_:_W});function OW(r,t=null,e=!1){return pa(r,"euclidean",t,e)}var wg=T({euclideanNorm_:OW});function PW(r){let e={x:v(r,"x","exp")};return N.runKernel($o,e)}var Ge=T({exp_:PW});function LW(r,t=0){let e=v(r,"x","expandDims","string_or_numeric");$(t<=e.rank,()=>"Axis must be <= rank of the tensor");let o={input:e},n={dim:t};return N.runKernel(Ps,o,n)}var Ze=T({expandDims_:LW});function zW(r){let e={x:v(r,"x","expm1")};return N.runKernel(Ao,e)}var Cg=T({expm1_:zW});function MW(r,t){let e=v(r,"x","tile","string_or_numeric");$(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);let o={x:e},n={reps:t};return N.runKernel(tn,o,n)}var dr=T({tile_:MW});function BW(r,t,e,o="float32"){t==null&&(t=r);let n=ot([r,t],o),s=r<=t?r:t;for(let a=0;a<s;++a)n.set(1,a,a);let i=R(n.toTensor(),[r,t]);if(e==null)return i;if(e.length===1)return dr(Ze(i,0),[e[0],1,1]);if(e.length===2)return dr(Ze(Ze(i,0),0),[e[0],e[1],1,1]);if(e.length===3)return dr(Ze(Ze(Ze(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}var du=T({eye_:BW});function di(r,t,e){let o={shape:r,value:t,dtype:e};return N.runKernel(Wa,{},o)}function VW(r){let e={x:v(r,"x","floor","float32")};return N.runKernel(Do,e)}var gi=T({floor_:VW});function GW(r,t,e=0,o=0){let n=v(r,"x","gather"),s=v(t,"indices","gather","int32"),i={x:n,indices:s},a={axis:e,batchDims:o};return N.runKernel(zs,i,a)}var xi=T({gather_:GW});function UW(r,t){let e=v(r,"a","greater","string_or_numeric"),o=v(t,"b","greater","string_or_numeric");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Wn,n)}var Le=T({greater_:UW});function WW(r,t){let e=v(r,"a","greaterEqual","string_or_numeric"),o=v(t,"b","greaterEqual","string_or_numeric");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Ro,n)}var ho=T({greaterEqual_:WW});function HW(r){let e={x:v(r,"x","isFinite")};return N.runKernel(Wi,e)}var Ig=T({isFinite_:HW});function qW(r){let e={x:v(r,"x","isInf")};return N.runKernel(Hi,e)}var Sg=T({isInf_:qW});function KW(r){let e={x:v(r,"x","isNaN")};return N.runKernel(Hn,e)}var vg=T({isNaN_:KW});function jW(r,t=.2){let o={x:v(r,"x","leakyRelu")},n={alpha:t};return N.runKernel(Ms,o,n)}var yl=T({leakyRelu_:jW});function XW(r,t){let e=v(r,"a","less","string_or_numeric"),o=v(t,"b","less","string_or_numeric");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(qn,n)}var dp=T({less_:XW});function YW(r,t){let e=v(r,"a","lessEqual","string_or_numeric"),o=v(t,"b","lessEqual","string_or_numeric");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Kn,n)}var go=T({lessEqual_:YW});function Xk(r,t,e){if(e<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:t,num:e};return N.runKernel(Ac,{},o)}function ZW(r,t=5,e=1,o=1,n=.5){let s=v(r,"x","localResponseNormalization");$(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),$(Oi(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,a=!1;s.rank===3&&(a=!0,i=R(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u={depthRadius:t,bias:e,alpha:o,beta:n},c=N.runKernel(ja,l,u);return a?R(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var kg=T({localResponseNormalization_:ZW});function QW(r){let e={x:v(r,"x","log","float32")};return N.runKernel(_o,e)}var ar=T({log_:QW});function JW(r){let e={x:v(r,"x","log1p")};return N.runKernel(qi,e)}var bl=T({log1p_:JW});function P0(r,t){$(pc(r),()=>"The f passed in variableGrads(f) must be a function"),$(t==null||Array.isArray(t)&&t.every(u=>u instanceof ia),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let e=t!=null;if(!e){t=[];for(let u in N.registeredVariables)t.push(N.registeredVariables[u])}let o=e?t.filter(u=>!u.trainable):null,n=t.length;t=t.filter(u=>u.trainable),$(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:i,grads:a}=N.gradients(r,t,null,s);$(a.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),$(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let l={};return t.forEach((u,c)=>{a[c]!=null&&(l[u.name]=a[c])}),o?.forEach(u=>l[u.name]=null),{value:i,grads:l}}function no(r){return N.customGrad(r)}function t4(r){let e={x:v(r,"x","softplus")};return N.runKernel(ta,e)}var ls=T({softplus_:t4});function e4(r){let t=v(r,"x","logSigmoid");return no(o=>({value:Mt(ls(Mt(o))),gradFunc:i=>F(i,Er(Mt(o)))}))(t)}var Tg=T({logSigmoid_:e4});function r4(r,t){let e=v(r,"a","sub"),o=v(t,"b","sub");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Go,n)}var et=T({sub_:r4});function o4(r,t=-1){let e=v(r,"logits","logSoftmax");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return no((n,s)=>{let a=Cr(n,t,!0),l=et(n,a),u=et(j(l,"float32"),ar(it(Ge(l),t,!0)));return s([u]),{value:u,gradFunc:(p,m)=>{let[f]=m,h=!0,d=Ge(f);return et(p,F(it(p,t,h),d))}}})(e)}var gp=T({logSoftmax_:o4});function n4(r,t=null,e=!1){let o=v(r,"x","logSumExp"),n=Ye(t,o.shape),s=Cr(o,n,!0),i=et(o,s),a=Ge(i),l=it(a,n),u=ar(l),c=K(R(s,u.shape),u);if(e){let p=ln(c.shape,n);return R(c,p)}return c}var xp=T({logSumExp_:n4});function s4(r,t){let e=v(r,"a","logicalAnd","bool"),o=v(t,"b","logicalAnd","bool");At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Ki,n)}var Ir=T({logicalAnd_:s4});function i4(r){let e={x:v(r,"x","logicalNot","bool")};return N.runKernel(ji,e)}var wl=T({logicalNot_:i4});function a4(r,t){let e=v(r,"a","logicalOr","bool"),o=v(t,"b","logicalOr","bool");At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Jl,n)}var yp=T({logicalOr_:a4});function l4(r,t){let e=v(r,"a","logicalXor","bool"),o=v(t,"b","logicalXor","bool");return At(e.shape,o.shape),Ir(yp(r,t),wl(Ir(r,t)))}var Ng=T({logicalXor_:l4});var Eg=2147483648;function u4(r,t,e="left"){let o=v(r,"sortedSequence","searchSorted"),n=v(t,"values","searchSorted"),s=o.shape[o.shape.length-1],i=n.shape[n.shape.length-1],a=R(o,[-1,s]),l=R(n,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Vt(l.shape)>=Eg)throw new Error(`values tensor size must less than ${Eg}`);if(a.shape[1]>=Eg)throw new Error(`trailing dim_size must less than ${Eg} for int32 output type, was ${a.shape[1]}`);let u={sortedSequence:a,values:l},c={side:e};return N.runKernel(Bc,u,c)}var gf=T({searchSorted_:u4});function Yk(r,t){return gf(r,t,"left")}function c4(r,t,e,o,n){let s=v(r,"x","maxPool"),i=1,a=s,l=!1;s.rank===3&&(l=!0,a=R(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),$(hr(e,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`),ce("maxPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=N.runKernel(Vs,u,c);return l?R(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Cl=T({maxPool_:c4});function p4(r,t=[1,1,1],e,o,n,s="NDHWC"){let i=v(r,"x","maxPool3d"),a=i,l=!1;i.rank===4&&(l=!0,a=R(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),$(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),$(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),ce("maxPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=N.runKernel(Xa,u,c);return l?R(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var $g=T({maxPool3d_:p4});function m4(r,t,e,o,n=!1){let i={x:v(r,"x","maxPoolWithArgmax")},a={filterSize:t,strides:e,pad:o,includeBatchInIndex:n},l=N.runKernel(_c,i,a);return{result:l[0],indexes:l[1]}}var Zk=T({maxPoolWithArgmax_:m4});function f4(r,t){let e=v(r,"a","maximum"),o=v(t,"b","maximum");[e,o]=zt(e,o),e.dtype==="bool"&&(e=j(e,"int32"),o=j(o,"int32")),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Oo,n)}var so=T({maximum_:f4});function h4(r,t=null,e=!1){let n={x:v(r,"x","mean")},s={axis:t,keepDims:e};return N.runKernel(Gs,n,s)}var me=T({mean_:h4});function ee(r,t="float32"){if(t==="complex64"){let o=ee(r,"float32"),n=ee(r,"float32");return eo(o,n)}let e=fc(Vt(r),t);return N.makeTensor(e,r,t)}function Qe(r,t="float32"){if(t==="complex64"){let o=Qe(r,"float32"),n=ee(r,"float32");return eo(o,n)}let e=Ym(Vt(r),t);return N.makeTensor(e,r,t)}function Qk(r,t,{indexing:e="xy"}={}){if(e!=="xy"&&e!=="ij")throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=v(r,"x","meshgrid",r instanceof Pt?r.dtype:"float32");if(t===void 0)return[o];let n=v(t,"y","meshgrid",t instanceof Pt?t.dtype:"float32"),s=Vt(o.shape),i=Vt(n.shape);return e==="xy"?(o=R(o,[1,-1]),n=R(n,[-1,1]),[Lt(Qe([i,1],o.dtype),o),Lt(n,Qe([1,s],n.dtype))]):(o=R(o,[-1,1]),n=R(n,[1,-1]),[Lt(o,Qe([1,i],o.dtype)),Lt(Qe([s,1],n.dtype),n)])}function d4(r,t){let e=v(r,"a","minimum"),o=v(t,"b","minimum");[e,o]=zt(e,o),e.dtype==="bool"&&(e=j(e,"int32"),o=j(o,"int32")),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Po,n)}var yi=T({minimum_:d4});function g4(r,t,e){$(e==="reflect"||e==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);let o=v(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");$(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);let n=e==="reflect"?1:0;for(let a=0;a<o.rank;a++)$(t[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),$(t[a][0]>=0&&t[a][0]<=o.shape[a]-n&&t[a][1]>=0&&t[a][1]<=o.shape[a]-n,()=>`Padding in dimension ${a} cannot be greater than or equal to ${o.shape[a]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:t,mode:e},i={x:o};return N.runKernel(Ws,i,s)}var Ag=T({mirrorPad_:g4});function x4(r,t){let e=v(r,"a","mod"),o=v(t,"b","mod");[e,o]=zt(e,o);let n={a:e,b:o};return N.runKernel(Xi,n)}var Dg=T({mod_:x4});function y4(r,t=null,e=!1){r=v(r,"x","moments");let o=Ye(t,r.shape),n=me(r,o,e),s=n.shape;e||(s=ln(n.shape,o));let i=Ot(et(j(r,"float32"),R(n,s))),a=me(i,o,e);return{mean:n,variance:a}}var gu=T({moments_:y4});function b4(r,t,e,o){let n=v(t,"data","multiRNNCell"),s=iu(e,"c","multiRNNCell"),i=iu(o,"h","multiRNNCell"),a=n,l=[];for(let p=0;p<r.length;p++){let m=r[p](a,s[p],i[p]);l.push(m[0]),l.push(m[1]),a=m[1]}let u=[],c=[];for(let p=0;p<l.length;p+=2)u.push(l[p]),c.push(l[p+1]);return[u,c]}var Jk=T({multiRNNCell_:b4});function w4(r,t,e,o=!1){let n=v(r,"logits","multinomial"),s=n.size,i=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);e=e||Math.random();let l={logits:i===1?R(n,[1,-1]):n},u={numSamples:t,seed:e,normalized:o},c=N.runKernel(Oc,l,u);return i===1?R(c,[c.size]):c}var tT=T({multinomial_:w4});function C4(r,t){let e=v(r,"a","notEqual","string_or_numeric"),o=v(t,"b","notEqual","string_or_numeric");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o};return N.runKernel(Xn,n)}var us=T({notEqual_:C4});function I4(r){let e={x:v(r,"x","onesLike")};return N.runKernel(Hs,e)}var or=T({onesLike_:I4});function S4(r,t){let e=v(r,"v1","outerProduct"),o=v(t,"v2","outerProduct");$(e.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${o.rank}.`);let n=R(e,[-1,1]),s=R(o,[1,-1]);return Lt(n,s)}var eT=T({outerProduct_:S4});function v4(r,t,e=0){let o=v(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:t,constantValue:e},s={x:o};return N.runKernel(Ks,s,n)}var Vr=T({pad_:v4});function k4(r,t,e=0){return $(t.length===2,()=>"Invalid number of paddings. Must be length of 2."),Vr(r,[t],e)}var rT=T({pad1d_:k4});function T4(r,t,e=0){return $(t.length===2&&t[0].length===2&&t[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Vr(r,t,e)}var oT=T({pad2d_:T4});function N4(r,t,e=0){return $(t.length===3&&t[0].length===2&&t[1].length===2&&t[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Vr(r,t,e)}var nT=T({pad3d_:N4});function E4(r,t,e=0){return $(t.length===4&&t[0].length===2&&t[1].length===2&&t[2].length===2&&t[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Vr(r,t,e)}var sT=T({pad4d_:E4});function $4(r,t,e){let o=v(r,"x","spaceToBatchND");$(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),$(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),$(o.shape.reduce((i,a,l)=>l>0&&l<=t.length?i&&(a+e[l-1][0]+e[l-1][1])%t[l-1]===0:i,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);let n={x:o},s={blockShape:t,paddings:e};return N.runKernel(ti,n,s)}var Il=T({spaceToBatchND_:$4});function A4(r,t,e,o,n,s,i){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let a=v(r,"x","maxPool"),l=a,u=!1;a.rank===3&&(u=!0,l=R(a,[1,a.shape[0],a.shape[1],a.shape[2]])),$(hr(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=A0(l.shape,t,s,n,o),p=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=R4([c.filterHeight,c.filterWidth],p):m=[[0,0],[0,0]];let f=p[0]===1&&p[1]===1,[h,d]=D4([c.inHeight,c.inWidth],p,m),g=f?o:"valid",x=f?l:Il(l,p,h),w=(e==="avg"?()=>dl(x,t,s,g,i):()=>Cl(x,t,s,g,i))(),C=f?w:gl(w,p,d);return u?R(C,[C.shape[1],C.shape[2],C.shape[3]]):C}function D4(r,t,e){let o=e.map(c=>c[0]),n=e.map(c=>c[1]),s=r.concat(o,n),i=t.map((c,p)=>(c-s[p]%c)%c),a=n.map((c,p)=>c+i[p]),l=t.map((c,p)=>[o[p],a[p]]),u=t.map((c,p)=>[0,i[p]]);return[l,u]}function R4(r,t){let o=r.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),n=o.map(i=>Math.floor(i/2)),s=o.map((i,a)=>i-n[a]);return o.map((i,a)=>[n[a],s[a]])}var Rg=T({pool_:A4});function F4(r,t){let e=v(r,"x","prelu"),o=v(t,"alpha","prelu"),n={x:e,alpha:o};return N.runKernel(js,n)}var Sl=T({prelu_:F4});function _4(r,t=null,e=!1){let o=v(r,"x","prod");o.dtype==="bool"&&(o=j(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return N.runKernel(Zn,n,s)}var Fg=T({prod_:_4});function O4(r,t,e,o,n){let s=v(r,"shape","raggedTensorToTensor","int32"),i=v(t,"values","raggedTensorToTensor"),a=v(e,"defaultValue","raggedTensorToTensor",i.dtype),l=o.map((p,m)=>v(p,`tensors${m}`,"raggedTensorToTensor","int32")),u={shape:s,values:i,defaultValue:a,rowPartitionTensors:l},c={rowPartitionTypes:n};return N.runKernel(Lc,u,c)}var iT=T({raggedTensorToTensor_:O4});function P4(r,t,e){let o=Vt(r),n=null;if(e==null||e==="float32")n=new Float32Array(o);else if(e==="int32")n=new Int32Array(o);else if(e==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${e}`);for(let s=0;s<o;s++)n[s]=t();return N.makeTensor(n,r,e)}var aT=T({rand_:P4});var Lg=Xm(xf());var yu=class{constructor(t,e,o,n,s){this.mean=t,this.stdDev=e,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let i=s||Math.random();this.random=Lg.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let t,e,o=!1;for(;!o;){let n,s,i;do n=2*this.random()-1,s=2*this.random()-1,i=n*n+s*s;while(i>=1||i===0);let a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*n*a,e=this.mean+this.stdDev*s*a,(!this.truncated||this.isValidTruncated(t))&&(o=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return this.dtype==null||this.dtype==="float32"?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}},Og=class{constructor(t,e,o,n){this.alpha=t,this.beta=1/e,this.dtype=o;let s=n||Math.random();this.randu=Lg.alea(s.toString()),this.randn=new yu(0,1,o,!1,this.randu()),t<1?this.d=t+2/3:this.d=t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,o,n,s,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0);if(i*=i*i,t=n*n,e=1-.331*t*t,o=.5*t+this.d*(1-i+Math.log(i)),s=this.randu(),s<e||Math.log(s)<o)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return this.dtype==="float32"?t:Math.round(t)}},Pg=class{constructor(t=0,e=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=t,this.range=e-t,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Lg.alea(n)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function U4(r,t,e=1,o="float32",n){if(e==null&&(e=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new Og(t,e,o,n),i=ot(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var vT=T({randomGamma_:U4});function W4(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new yu(t,e,o,!1,n),i=ot(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var bu=T({randomNormal_:W4});function H4(r,t,e){if(t!=null&&t==="bool")throw new Error(`Unsupported data type ${t}`);return bu(r,0,1,t,e)}var kT=T({randomStandardNormal_:H4});function q4(r,t=0,e=1,o="float32",n){let s=ot(r,o),i=new Pg(t,e,null,n);for(let a=0;a<s.values.length;a++)s.values[a]=i.nextValue();return s.toTensor()}var bi=T({randomUniform_:q4});function vl(r,t,e=1,o="float32"){if(e===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:t,step:e,dtype:o};return N.runKernel(Ja,{},n)}function K4(r){let e={x:v(r,"x","reciprocal")};return N.runKernel(Qn,e)}var zg=T({reciprocal_:K4});function j4(r){let e={x:v(r,"x","relu")};return N.runKernel(Jn,e)}var gr=T({relu_:j4});function X4(r){let e={x:v(r,"x","relu6")};return N.runKernel(ts,e)}var bp=T({relu6_:X4});function Y4(r,t){let o={x:v(r,"x","reverse")},n={dims:t};return N.runKernel(tl,o,n)}var Je=T({reverse_:Y4});function Z4(r){let t=v(r,"x","reverse");return $(t.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Je(t,0)}var TT=T({reverse1d_:Z4});function Q4(r,t){let e=v(r,"x","reverse");return $(e.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),Je(e,t)}var NT=T({reverse2d_:Q4});function J4(r,t){let e=v(r,"x","reverse");return $(e.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),Je(e,t)}var ET=T({reverse3d_:J4});function tH(r,t){let e=v(r,"x","reverse");return $(e.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),Je(e,t)}var $T=T({reverse4d_:tH});function eH(r){let e={x:v(r,"x","round")};return N.runKernel(Zi,e)}var wp=T({round_:eH});function rH(r){let e={x:v(r,"x","rsqrt","float32")};return N.runKernel(zo,e)}var Cp=T({rsqrt_:rH});function oH(r){let e={x:v(r,"x","selu")};return N.runKernel(Qi,e)}var Ip=T({selu_:oH});function nH(r,t,e,o,n,s=[1,1],i="NHWC"){let a=v(r,"x","separableConv2d"),l=v(t,"depthwiseFilter","separableConv2d"),u=v(e,"pointwiseFilter","separableConv2d"),c=a,p=!1;if(a.rank===3&&(p=!0,c=R(a,[1,a.shape[0],a.shape[1],a.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");$(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),$(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),$(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),$(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),$(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=l.shape[2],f=l.shape[3];$(u.shape[2]===m*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*f}, but got ${u.shape[2]}.`);let h=fi(c,l,o,n,i,s),g=oo(h,u,1,"valid",i);return p?R(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var Sp=T({separableConv2d_:nH});async function sH(r,t){let e=v(r,"x","setdiff1d"),o=v(t,"y","setdiff1d");$(e.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${o.dtype}).`),$(e.rank===1,()=>`x should be 1D tensor, but got x (${e.shape}).`),$(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await e.data(),s=await o.data(),i=new Set(s),a=0;for(let c=0;c<n.length;c++)i.has(n[c])||a++;let l=new Kt([a],e.dtype),u=new Kt([a],"int32");for(let c=0,p=0;c<n.length;c++)i.has(n[c])||(l.values[p]=n[c],u.values[p]=c,p++);return[l.toTensor(),u.toTensor()]}var AT=sH;function iH(r){let e={x:v(r,"x","sign")};return N.runKernel(Ji,e)}var Mg=T({sign_:iH});function aH(r){let e={x:v(r,"x","sin","float32")};return N.runKernel(rs,e)}var vp=T({sin_:aH});function lH(r){let e={x:v(r,"x","sinh")};return N.runKernel(os,e)}var kp=T({sinh_:lH});function uH(r,t,e){let o=v(r,"x","slice1d");return $(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Nt(o,[t],[e])}var Tp=T({slice1d_:uH});function cH(r,t,e){let o=v(r,"x","slice2d");return $(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Nt(o,t,e)}var yf=T({slice2d_:cH});function pH(r,t,e){let o=v(r,"x","slice3d");return $(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Nt(o,t,e)}var Np=T({slice3d_:pH});function mH(r,t,e){let o=v(r,"x","slice4d");return $(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Nt(o,t,e)}var wu=T({slice4d_:mH});function fH(r,t=-1){let e=v(r,"logits","softmax","float32");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);let o={logits:e},n={dim:t};return N.runKernel(ri,o,n)}var kl=T({softmax_:fH});function hH(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let t={input:r};return N.runKernel(Ec,t)}var Tl=T({fft_:hH});function dH(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let t={input:r};return N.runKernel($c,t)}var ma=T({ifft_:dH});function gH(r){let t=r.shape[r.shape.length-1],e=r.size/t,o;if(t<=2){let n=R(r,[e,t]);o=ma(n)}else{let n=[e,2*(t-1)],s=R(ca(r),[e,t]),i=R(hl(r),[e,t]),a=Je(Nt(s,[0,1],[e,t-2]),1),l=F(Je(Nt(i,[0,1],[e,t-2]),1),st(-1)),u=jt([s,a],1),c=jt([i,l],1),p=R(eo(u,c),[n[0],n[1]]);o=ma(p)}if(o=ca(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=R(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var Ep=T({irfft_:gH});function xH(r,t,e=0){let n={x:v(r,"x","split")},s={numOrSizeSplits:t,axis:e};return N.runKernel(ei,n,s)}var tr=T({split_:xH});function yH(r,t){$(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let e=r.shape[r.shape.length-1],o=r.size/e,n;if(t!=null&&t<e){let h=r.shape.map(g=>0),d=r.shape.map(g=>g);d[r.shape.length-1]=t,n=Nt(r,h,d),e=t}else if(t!=null&&t>e){let h=r.shape.map(d=>d);h[r.shape.length-1]=t-e,n=jt([r,ee(h)],r.shape.length-1),e=t}else n=r;let s=bt(n),i=R(eo(n,s),[o,e]),a=Tl(i),l=Math.floor(e/2)+1,u=ca(a),c=hl(a),p=tr(u,[l,e-l],u.shape.length-1),m=tr(c,[l,e-l],c.shape.length-1),f=n.shape.slice();return f[n.shape.length-1]=l,R(eo(p[0],m[0]),f)}var Nl=T({rfft_:yH});function bH(r,t){let e=v(r,"a","squaredDifference"),o=v(t,"b","squaredDifference");[e,o]=zt(e,o),At(e.shape,o.shape);let n={a:e,b:o},s={};return N.runKernel(Vo,n,s)}var $p=T({squaredDifference_:bH});function wH(r,t){let e=v(r,"x","squeeze","string_or_numeric");return R(e,LC(e.shape,t).newShape)}var xo=T({squeeze_:wH});function CH(r,t=0){let e=iu(r,"tensors","stack","string_or_numeric");$(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&$(t<=e[0].rank,()=>"Axis must be <= rank of the tensor");let o=e,n={axis:t};return N.runKernel(qs,o,n)}var Ue=T({stack_:CH});function IH(r,t=0){let o={x:v(r,"x","step")},n={alpha:t};return N.runKernel(ra,o,n)}var un=T({step_:IH});function SH(r,t,e,o,n=0,s=0,i=0,a=0,l=0){let c={x:v(r,"x","stridedSlice","string_or_numeric")},p={begin:t,end:e,strides:o,beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};return N.runKernel(nl,c,p)}var Bg=T({stridedSlice_:SH});function vH(r){let e={x:v(r,"x","tan","float32")};return N.runKernel(ea,e)}var Vg=T({tan_:vH});function De(r,t){To(r);let e=to(r,t);if(e.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Pr(r,null,e,t)}function fa(r,t,e){if(To(r),t!=null&&t.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=to(r,e);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Pr(r,t,o,e)}function DT(r,t,e){if(To(r),t!=null&&t.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=to(r,e);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Pr(r,t,o,e)}function RT(r,t,e){if(To(r),t!=null&&t.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=to(r,e);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Pr(r,t,o,e)}function FT(r,t,e){if(To(r),t!=null&&t.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=to(r,e);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||o,Pr(r,t,o,e)}function kH(r,t=1,e=!0){let o=v(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);let s={x:o},i={k:t,sorted:e},[a,l]=N.runKernel(il,s,i);return{values:a,indices:l}}var Gg=T({topk_:kH});function TH(r,t=0,e=1,o,n){if(o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new yu(t,e,o,!0,n),i=ot(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Ap=T({truncatedNormal_:TH});function NH(r,t=0){let e=v(r,"x","unique","string_or_numeric");$(e.rank>0,()=>"The input tensor must be at least 1D");let o={x:e},n={axis:t},[s,i]=N.runKernel(Kc,o,n);return{values:s,indices:i}}var Ug=T({unique_:NH});function EH(r,t,e){let o=v(r,"x","unsortedSegmentSum"),n=v(t,"segmentIds","unsortedSegmentSum","int32");$(Oi(e),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},i={numSegments:e};return N.runKernel(ll,s,i)}var Dp=T({unsortedSegmentSum_:EH});function $H(r,t=0){let e=v(r,"x","unstack","string_or_numeric");$(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);let o={value:e},n={axis:t};return N.runKernel(oi,o,n)}var lr=T({unstack_:$H});function _T(r,t){return gf(r,t,"right")}function Wg(r,t=!0,e,o){return N.makeVariable(r,t,e,o)}function Hg(r,t){let e=[];for(let s=0;s<t.length;s++)t[s]&&e.push(s);let o=ot(r,"int32"),n=ot([e.length,r.length],"int32");for(let s=0;s<e.length;s++){let i=o.indexToLoc(e[s]),a=s*r.length;n.values.set(i,a)}return n.toTensor()}async function AH(r){let t=v(r,"condition","whereAsync","bool"),e=await t.data(),o=Hg(t.shape,e);return r!==t&&t.dispose(),o}var qg=AH;async function DH(r,t,e){let o=v(r,"tensor","boolMask"),n=v(t,"mask","boolMask","bool"),s=e??0,i=n.rank,a=o.shape;$(i>0,()=>"mask cannot be scalar"),Pe(a.slice(s,s+i),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let d=s;d<s+i;d++)l*=a[d];let u=a.slice(0,s).concat([l],a.slice(s+i)),c=R(o,u),p=R(n,[-1]),m=await qg(p),f=xo(m,[1]),h=xi(c,f,s);return r!==o&&o.dispose(),t!==n&&n.dispose(),f.dispose(),c.dispose(),p.dispose(),m.dispose(),h}var RH=DH;function FH(r,t,e,o,n=!0){let s=v(r,"v","movingAverage"),i=v(t,"x","movingAverage"),a=v(e,"decay","movingAverage");i0(s,i),$(Jo(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=st(1),u=et(l,a),c=F(et(i,s),u);if(n){$(o!=null,()=>"When using zeroDebias: true, step is required.");let p=v(o,"step","movingAverage");c=nt(c,et(l,Br(a,p)))}return K(s,c)}var _H=T({movingAverage_:FH});function OH(r,t,e){let o=v(r,"indices","scatterND","int32"),n=v(t,"updates","scatterND");T0(n,o,e);let s={indices:o,updates:n},i={shape:e};return N.runKernel(el,s,i)}var PH=T({scatterND_:OH});function OT(r,t,e,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(e.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${s}.`);let i=t.size;if(!(t.rank===0||t.rank===1&&i===n))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);if(t.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function zH(r,t,e,o=0){let n=v(r,"sparseIndices","sparseToDense","int32"),s=v(t,"sparseValues","sparseToDense","string_or_numeric"),i=v(o,"defaultValue","sparseToDense",s.dtype);OT(n,s,e,i);let a={sparseIndices:n,sparseValues:s,defaultValue:i},l={outputShape:e};return N.runKernel(rl,a,l)}var MH=T({sparseToDense_:zH});function BH(r,t){let e=v(t,"indices","gatherND","int32"),n={params:v(r,"x","gatherND","string_or_numeric"),indices:e};return N.runKernel(qa,n)}var VH=T({gatherND_:BH});function PT(r,t){if(t==null)return r.shape.slice();if(Jo(r.shape,t))return t;if(r.shape.length===t.length){let e=[];for(let o=0;o<r.shape.length;o++)t[o]==null&&r.shape[o]!=null?e.push(r.shape[o]):e.push(t[o]);return e}return t}function GH(r,t,e,o){let n=v(r,"x","dropout");if($(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),$(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),t===0)return r instanceof Pt?n.clone():n;let s=PT(n,e),i=1-t,a=nt(gi(K(bi(s,0,1,"float32",o),i)),i);return F(n,a)}var U0=T({dropout_:GH});function W0(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function bf(r,t,e){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let i=2*Math.PI*s/(r+o-1);n[s]=t-e*Math.cos(i)}return De(n,"float32")}async function UH(r,t,e=1){let o=v(r,"predictions","inTopK"),n=v(t,"targets","inTopK");$(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),$(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),Pe(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];$(e>0&&e<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${e}`);let i=await o.data(),a=await n.data(),[l,u]=[i.length/s,s],c=zC("bool",l);for(let p=0;p<l;p++){let m=p*u,f=i.subarray(m,m+u),h=[];for(let d=0;d<f.length;d++)h.push({value:f[d],index:d});h.sort((d,g)=>g.value-d.value),c[p]=0;for(let d=0;d<e;d++)if(h[d].index===a[p]){c[p]=1;break}}return r!==o&&o.dispose(),t!==n&&n.dispose(),mr(c,n.shape,"bool")}var WH=UH;var El={};Jt(El,{conv2d:()=>LT,depthwiseConv2d:()=>zT,matMul:()=>MT});function HH(r,t,e,o,n,s="NHWC",i){let a=r;r.rank===3&&(a=R(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=R(t,[1,t.shape[0],t.shape[1],t.shape[2]])),$(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),$(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),$(e.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);let u=s==="NHWC"?a.shape[3]:a.shape[1],c=s==="NHWC"?l.shape[3]:l.shape[1];$(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),$(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),ce("conv2dDerFilter",n,i);let p={x:a,dy:l},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,filterShape:e};return N.runKernel(wc,p,m)}var Rp=T({conv2DBackpropFilter_:HH});function Cu(r,t,e){if(e==null||e==="linear")return r;if(e==="relu")return F(r,un(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function Iu(r,t){let e=t,o=ne(r.shape,t.shape);return o.length>0&&(e=it(e,o)),R(e,r.shape)}function Su(r,t,e,o){if(t==="linear")return r;if(t==="relu")return gr(r);if(t==="elu")return hi(r);if(t==="relu6")return bp(r);if(t==="prelu")return Sl(r,e);if(t==="leakyrelu")return yl(r,o);if(t==="sigmoid")return Er(r);throw new Error(`Unknown fused activation ${t}.`)}var vu=(r,t)=>!(r>0)||t==="linear";function qH({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",vu(N.state.gradientDepth,l)===!1){$(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let E=oo(r,t,e,o,n,s,i);return a!=null&&(E=K(E,a)),Su(E,l,u,c)}let p=v(r,"x","conv2d","float32"),m=v(t,"filter","conv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=R(p,[1,p.shape[0],p.shape[1],p.shape[2]])),$(f.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),$(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),ce("fused conv2d",o,i);let d=n==="NHWC"?f.shape[3]:f.shape[1];$(m.shape[2]===d,()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${m.shape[2]}.`),$(hr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let g=mu(f.shape,m.shape,e,s,o,i),x;a!=null&&(x=v(a,"bias","fused conv2d"),[x]=zt(x,p),n==="NHWC"?At(g.outShape,x.shape):($(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),$(x.shape.length===0||x.shape[0]===g.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let E=u.shape;if($(E.length<=1||E.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${E.length}.`),E.length===1)$(E[0]===1||E[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${E}) is not compatible with the number of output channels (${g.outChannels}).`);else if(E.length===3)try{At(E,g.outShape)}catch{let D=`Error in fused conv2d: PReLU activation weights (${E}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(D)}b=v(u,"prelu weights","fused conv2d")}let w=(E,A)=>{$(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[D,_,P,B]=A,V=Cu(E,P,l);$(Wo(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let G=pp(_.shape,V,D,e,o),W=Rp(_,V,D.shape,e,o),U=[G,W];if(B!=null){let H=Iu(B,V);U.push(H)}return U},C={x:f,filter:m,bias:x,preluActivationWeights:b},k={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?no((A,D,_)=>{let P=N.runKernel(na,C,k);return _([D,A,P]),h&&(P=R(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:w}})(f,m):no((A,D,_,P)=>{let B=N.runKernel(na,C,k);return P([D,A,B,_]),h&&(B=R(B,[B.shape[1],B.shape[2],B.shape[3]])),{value:B,gradFunc:w}})(f,m,x)}var LT=T({fusedConv2d_:qH});function KH(r,t,e,o,n,s=[1,1],i){let a=r;r.rank===3&&(a=R(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=R(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:a,dy:l},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,filterShape:e};return N.runKernel(vc,u,c)}var Kg=T({depthwiseConv2dNativeBackpropFilter_:KH});function jH(r,t,e,o,n,s=[1,1],i){let a=t,l=!1;t.rank===3&&(l=!0,a=R(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:a,filter:e},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,inputShape:r},p=N.runKernel(kc,u,c);return l?R(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var jg=T({depthwiseConv2dNativeBackpropInput_:jH});function XH({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(vu(N.state.gradientDepth,l)===!1){let k=fi(r,t,e,o,n,s,i);return a!=null&&(k=K(k,a)),Su(k,l,u,c)}let p=v(r,"x","depthwiseConv2d","float32"),m=v(t,"filter","depthwiseConv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=R(p,[1,p.shape[0],p.shape[1],p.shape[2]])),$(f.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),$(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),$(f.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),$(hr(e,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),ce("fused depthwiseConv2d",o,i);let d=mu(f.shape,m.shape,e,s,o,i,!0),g;a!=null&&(g=v(a,"bias","fused conv2d"),[g]=zt(g,p),At(d.outShape,g.shape));let x;u!=null&&(x=v(u,"prelu weights","fused depthwiseConv2d"));let b=(k,E)=>{$(Wo(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[A,D,_,P]=E,B=Cu(k,_,l),V=jg(D.shape,B,A,e,o,s,i),G=Kg(D,B,A.shape,e,o,s,i);if(P!=null){let W=Iu(g,B);return[V,G,W]}return[V,G]},w={x:f,filter:m,bias:g,preluActivationWeights:x},C={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?no((E,A,D)=>{let _=N.runKernel(sa,w,C);return D([A,E,_]),h&&(_=R(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:b}})(f,m):no((E,A,D,_)=>{let P=N.runKernel(sa,w,C);return _([A,E,P,D]),h&&(P=R(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:b}})(f,m,g)}var zT=T({fusedDepthwiseConv2d_:XH});function YH({a:r,b:t,transposeA:e=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(vu(N.state.gradientDepth,s)===!1){let B=Lt(r,t,e,o);return n!=null&&(B=K(B,n)),Su(B,s,i,a)}let l=v(r,"a","fused matMul"),u=v(t,"b","fused matMul");[l,u]=zt(l,u);let c=e?l.shape[l.rank-2]:l.shape[l.rank-1],p=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=e?l.shape[l.rank-1]:l.shape[l.rank-2],f=o?u.shape[u.rank-2]:u.shape[u.rank-1],h=l.shape.slice(0,-2),d=u.shape.slice(0,-2),g=Vt(h),x=Vt(d);$(c===p,()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);let w=At(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,f]),C=e?R(l,[g,c,m]):R(l,[g,m,c]),k=o?R(u,[x,f,p]):R(u,[x,p,f]),E;n!=null&&(E=v(n,"bias","fused matMul"),[E]=zt(E,l),At(w,E.shape));let A;i!=null&&(A=v(i,"prelu weights","fused matMul"));let D=(B,V)=>{let[G,W,U,H]=V,Z=Cu(R(B,U.shape),U,s),q,Q;if(!e&&!o?(q=Lt(Z,W,!1,!0),Q=Lt(G,Z,!0,!1)):!e&&o?(q=Lt(Z,W,!1,!1),Q=Lt(Z,G,!0,!1)):e&&!o?(q=Lt(W,Z,!1,!0),Q=Lt(G,Z,!1,!1)):(q=Lt(W,Z,!0,!0),Q=Lt(Z,G,!0,!0)),n!=null){let tt=Iu(H,Z);return[q,Q,tt]}else return[q,Q]},_={a:C,b:k,bias:E,preluActivationWeights:A},P={transposeA:e,transposeB:o,activation:s,leakyreluAlpha:a};return n==null?no((V,G,W)=>{let U=N.runKernel(oa,_,P);return W([V,G,U]),{value:R(U,w),gradFunc:D}})(C,k):no((V,G,W,U)=>{let H=N.runKernel(oa,_,P);return U([V,G,H,W]),{value:R(H,w),gradFunc:D}})(C,k,E)}var MT=T({fusedMatMul_:YH});function ZH(r){return bf(r,.54,.46)}var BT=T({hammingWindow_:ZH});function QH(r){return bf(r,.5,.5)}var Xg=T({hannWindow_:QH});function JH(r,t,e,o=!1,n=0){let s=0,i=[];for(;s+t<=r.size;)i.push(Nt(r,s,t)),s+=e;if(o)for(;s<r.size;){let a=s+t-r.size,l=jt([Nt(r,s,t-a),di([a],n)]);i.push(l),s+=e}return i.length===0?fa([],[0,t]):R(jt(i),[i.length,t])}var Yg=T({frame_:JH});function tq(r,t,e,o,n=Xg){o==null&&(o=W0(t));let s=Yg(r,t,e),i=F(s,n(t));return Nl(i,o)}var VT=T({stft_:tq});function eq(r,t,e,o,n="bilinear",s=0){let i=v(r,"image","cropAndResize"),a=v(t,"boxes","cropAndResize","float32"),l=v(e,"boxInd","cropAndResize","int32"),u=a.shape[0];$(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),$(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),$(l.rank===1&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),$(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),$(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),$(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:i,boxes:a,boxInd:l},p={method:n,extrapolationValue:s,cropSize:o};return N.runKernel(Ba,c,p)}var GT=T({cropAndResize_:eq});function rq(r){let t=v(r,"image","flipLeftRight","float32");$(t.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let e={image:t};return N.runKernel(Ha,e,{})}var UT=T({flipLeftRight_:rq});function oq(r){let t=v(r,"image","grayscaleToRGB"),e=t.rank-1,o=t.shape[e];$(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),$(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(t.rank);return n.fill(1,0,e),n[e]=3,dr(t,n)}var WT=T({grayscaleToRGB_:oq});function nq(r,t,e=0,o=.5){let n=v(r,"image","rotateWithOffset","float32");$(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},i={radians:t,fillValue:e,center:o};return N.runKernel(ul,s,i)}var HT=T({rotateWithOffset_:nq});function cn(r,t,e,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let i=r.shape[0];return e=Math.min(e,i),$(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),$(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),$(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),$(t.rank===1,()=>"scores must be a 1D tensor"),$(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),$(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function sq(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppression","float32"),i=v(t,"scores","nonMaxSuppression","float32"),a=cn(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l={maxOutputSize:e,iouThreshold:o,scoreThreshold:n};return N.runKernel(Ya,{boxes:s,scores:i},l)}var qT=T({nonMaxSuppression_:sq});function KT(r,t,e){let o=iq(r,t,e),n=o<0?-(o+1):o;r.splice(n,0,t)}function iq(r,t,e){return lq(r,t,e||aq)}function aq(r,t){return r>t?1:r<t?-1:0}function lq(r,t,e){let o=0,n=r.length,s=0,i=!1;for(;o<n;){s=o+(n-o>>>1);let a=e(t,r[s]);a>0?o=s+1:(n=s,i=!a)}return i?o:-o-1}function Zg(r,t,e,o,n){return H0(r,t,e,o,n,0)}function Qg(r,t,e,o,n,s){return H0(r,t,e,o,n,0,!1,s,!0)}function Jg(r,t,e,o,n,s){return H0(r,t,e,o,n,s,!0)}function H0(r,t,e,o,n,s,i=!1,a=!1,l=!1){let u=[];for(let g=0;g<t.length;g++)t[g]>n&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(jT);let c=s>0?-.5/s:0,p=[],m=[];for(;p.length<e&&u.length>0;){let g=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:w}=g;if(x<n)break;let C=!1;for(let k=p.length-1;k>=w;--k){let E=uq(r,b,p[k]);if(E>=o){C=!0;break}if(g.score=g.score*cq(o,c,E),g.score<=n)break}g.suppressBeginIndex=p.length,C||(g.score===x?(p.push(b),m.push(g.score)):g.score>n&&KT(u,g,jT))}let f=p.length,h=e-f;a&&h>0&&(p.push(...new Array(h).fill(0)),m.push(...new Array(h).fill(0)));let d={selectedIndices:p};return i&&(d.selectedScores=m),l&&(d.validOutputs=f),d}function uq(r,t,e){let o=r.subarray(t*4,t*4+4),n=r.subarray(e*4,e*4+4),s=Math.min(o[0],o[2]),i=Math.min(o[1],o[3]),a=Math.max(o[0],o[2]),l=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),p=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),f=(a-s)*(l-i),h=(p-u)*(m-c);if(f<=0||h<=0)return 0;let d=Math.max(s,u),g=Math.max(i,c),x=Math.min(a,p),b=Math.min(l,m),w=Math.max(x-d,0)*Math.max(b-g,0);return w/(f+h-w)}function cq(r,t,e){let o=Math.exp(t*e*e);return e<=r?o:0}function jT(r,t){return r.score-t.score||r.score===t.score&&t.boxIndex-r.boxIndex}async function pq(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppressionAsync"),i=v(t,"scores","nonMaxSuppressionAsync"),a=cn(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:p}=Zg(u,c,e,o,n);return s!==r&&s.dispose(),i!==t&&i.dispose(),De(p,"int32")}var XT=pq;function mq(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=v(r,"boxes","nonMaxSuppression"),a=v(t,"scores","nonMaxSuppression"),l=cn(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u={boxes:i,scores:a},c={maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},p=N.runKernel(Za,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}var YT=T({nonMaxSuppressionWithScore_:mq});async function fq(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=v(r,"boxes","nonMaxSuppressionAsync"),a=v(t,"scores","nonMaxSuppressionAsync"),l=cn(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),a.data()]),c=u[0],p=u[1],{selectedIndices:m,selectedScores:f}=Jg(c,p,e,o,n,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:De(m,"int32"),selectedScores:De(f)}}var ZT=fq;function hq(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=v(r,"boxes","nonMaxSuppression"),a=v(t,"scores","nonMaxSuppression"),l=cn(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,m={boxes:i,scores:a},f={maxOutputSize:u,iouThreshold:c,scoreThreshold:p,padToMaxOutputSize:s},h=N.runKernel(Pc,m,f);return{selectedIndices:h[0],validOutputs:h[1]}}var QT=T({nonMaxSuppressionPadded_:hq});async function dq(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=v(r,"boxes","nonMaxSuppressionAsync"),a=v(t,"scores","nonMaxSuppressionAsync"),l=cn(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[m,f]=await Promise.all([i.data(),a.data()]),{selectedIndices:h,validOutputs:d}=Qg(m,f,u,c,p,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:De(h,"int32"),validOutputs:st(d,"int32")}}var JT=dq;function gq(r,t,e=!1,o=!1){let n=v(r,"images","resizeBilinear");$(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),$(t.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),$(o===!1||e===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=R(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=N.runKernel(Zs,a,l);return i?R(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var tx=T({resizeBilinear_:gq});function xq(r,t,e=!1,o=!1){let n=v(r,"images","resizeNearestNeighbor");$(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),$(t.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),$(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),$(o===!1||e===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=R(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=N.runKernel(Ys,a,l);return i?R(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var ex=T({resizeNearestNeighbor_:xq});function yq(r,t="binary",e=!1,o=.5){let n=v(r,"image","threshold"),s=.2989,i=.587,a=.114,l=n.shape[0]*n.shape[1],u=F(De([o]),255),c,p,m,f;if($(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),$(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),$(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),$(t==="otsu"||t==="binary",()=>`Method must be binary or otsu, but was ${t}`),n.shape[2]===3){[c,p,m]=tr(n,[1,1,1],-1);let g=F(c,s),x=F(p,i),b=F(m,a);f=K(K(g,x),b)}else f=r;if(t==="otsu"){let g=ig(j(wp(f),"int32"),mr([]),256);u=bq(g,l)}let h=e?go(f,u):Le(f,u);return j(F(h,255),"int32")}function bq(r,t){let e=De([-1]),o=De([0]),n=De([0]),s,i,a,l,u,c;for(let p=0;p<r.size-1;p++){s=Nt(r,0,p+1),i=Nt(r,p+1),u=nt(it(s),t),c=nt(it(i),t);let m=it(F(s,vl(0,s.size)));a=nt(m,it(s));let f=di(i.shape,s.size),h=K(vl(0,i.size),f),d=F(i,h);l=nt(it(d),it(i));let g=et(a,l),x=et(a,l),b=F(u,c);n=F(F(b,g),x);let w=Le(n,o);o=ye(w,n,o),e=ye(w,De([p]),e)}return e}var tN=T({threshold_:yq});function wq(r,t,e="nearest",o="constant",n=0,s){let i=v(r,"image","transform","float32"),a=v(t,"transforms","transform","float32");$(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),$(a.rank===2&&(a.shape[0]===i.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),$(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let l={image:i,transforms:a},u={interpolation:e,fillMode:o,fillValue:n,outputShape:s};return N.runKernel(al,l,u)}var eN=T({transform_:wq});function Cq(r,t,e){$(t%1===0,()=>`bandPart(): numLower must be an integer, got ${t}.`),$(e%1===0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);let o=v(r,"a","bandPart");$(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,i]=o.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(e<=i))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),e<0&&(e=i);let a=R(vl(0,s,1,"int32"),[-1,1]),l=vl(0,i,1,"int32"),u=et(a,l),c=Ir(go(u,st(+t,"int32")),ho(u,st(-e,"int32"))),p=ee([s,i],o.dtype);return R(Ue(lr(R(o,[-1,s,i])).map(m=>ye(c,m,p))),n)}var rN=T({bandPart_:Cq});function Iq(r){let t;if(Array.isArray(r)){t=!1,$(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)$(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else t=!0,r=tr(r,r.shape[0],0).map(n=>xo(n,[0]));$(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let e=[],o=r;for(let n=0;n<r.length;++n)e.push(N.tidy(()=>{let s=o[n];if(n>0)for(let i=0;i<n;++i){let a=F(it(F(e[i],s)),e[i]);s=et(s,a)}return nt(s,pa(s,"euclidean"))}));return t?Ue(e,0):e}var oN=T({gramSchmidt_:Iq});function Sq(r,t=!1){if($(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return nN(r,t);{let e=r.shape.slice(0,r.shape.length-2).reduce((l,u)=>l*u),o=lr(R(r,[e,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(l=>{let[u,c]=nN(l,t);n.push(u),s.push(c)});let i=R(Ue(n,0),r.shape),a=R(Ue(s,0),r.shape);return[i,a]}}function nN(r,t=!1){return N.tidy(()=>{$(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let e=r.shape[0],o=r.shape[1],n=du(e),s=Lr(r),i=fa([[1]],[1,1]),a=Lr(i),l=e>=o?o:e;for(let u=0;u<l;++u){let c=s,p=a,m=n;[a,s,n]=N.tidy(()=>{let f=Nt(s,[u,u],[e-u,1]),h=pa(f),d=Nt(s,[u,u],[1,1]),g=ye(Le(d,0),fa([[-1]]),fa([[1]])),x=et(d,F(g,h)),b=nt(f,x);b.shape[0]===1?a=Lr(i):a=jt([i,Nt(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let w=Mt(nt(Lt(g,x),h)),C=Nt(s,[u,0],[e-u,o]),k=F(w,a),E=Rt(a);if(u===0)s=et(C,Lt(k,Lt(E,C)));else{let _=et(C,Lt(k,Lt(E,C)));s=jt([Nt(s,[0,0],[u,o]),_],0)}let A=Rt(k),D=Nt(n,[0,u],[e,n.shape[1]-u]);if(u===0)n=et(D,Lt(Lt(D,a),A));else{let _=et(D,Lt(Lt(D,a),A));n=jt([Nt(n,[0,0],[e,u]),_],1)}return[a,s,n]}),St([c,p,m])}return!t&&e>o&&(n=Nt(n,[0,0],[e,o]),s=Nt(s,[0,0],[o,o])),[n,s]})}var sN=T({qr_:Sq});var We;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(We||(We={}));function vq(r,t,e=We.SUM_BY_NONZERO_WEIGHTS){let o=v(r,"losses","computeWeightedLoss"),n=null;t!=null&&(n=v(t,"weights","computeWeightedLoss"));let s=n==null?o:F(o,n);if(e===We.NONE)return s;if(e===We.SUM)return it(s);if(e===We.MEAN){if(n==null)return me(s);{let i=o.size/n.size,a=nt(it(s),it(n));return i>1?nt(a,st(i)):a}}if(e===We.SUM_BY_NONZERO_WEIGHTS){if(n==null)return nt(it(s),st(o.size));{let i=F(n,Qe(o.shape)),a=j(it(us(i,st(0))),"float32");return nt(it(s),a)}}throw Error(`Unknown reduction: ${e}`)}var Sr=T({computeWeightedLoss_:vq});function kq(r,t,e,o=We.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","absoluteDifference"),s=v(t,"predictions","absoluteDifference"),i=null;e!=null&&(i=v(e,"weights","absoluteDifference")),Pe(n.shape,s.shape,"Error in absoluteDifference: ");let a=de(et(n,s));return Sr(a,i,o)}var iN=T({absoluteDifference_:kq});function Tq(r,t,e,o,n=We.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","cosineDistance"),i=v(t,"predictions","cosineDistance"),a=null;o!=null&&(a=v(o,"weights","cosineDistance")),Pe(s.shape,i.shape,"Error in cosineDistance: ");let l=st(1),u=et(l,it(F(s,i),e,!0));return Sr(u,a,n)}var aN=T({cosineDistance_:Tq});function Nq(r,t,e,o=We.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","hingeLoss"),s=v(t,"predictions","hingeLoss"),i=null;e!=null&&(i=v(e,"weights","hingeLoss")),Pe(n.shape,s.shape,"Error in hingeLoss: ");let a=st(1);n=et(F(st(2),n),a);let l=gr(et(a,F(n,s)));return Sr(l,i,o)}var lN=T({hingeLoss_:Nq});function Eq(r,t,e,o=1,n=We.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","huberLoss"),i=v(t,"predictions","huberLoss"),a=null;e!=null&&(a=v(e,"weights","huberLoss")),Pe(s.shape,i.shape,"Error in huberLoss: ");let l=st(o),u=de(et(i,s)),c=yi(u,l),p=et(u,c),m=K(F(st(.5),Ot(c)),F(l,p));return Sr(m,a,n)}var uN=T({huberLoss_:Eq});function $q(r,t,e,o=1e-7,n=We.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","logLoss"),i=v(t,"predictions","logLoss"),a=null;e!=null&&(a=v(e,"weights","logLoss")),Pe(s.shape,i.shape,"Error in logLoss: ");let l=st(1),u=st(o),c=Mt(F(s,ar(K(i,u)))),p=F(et(l,s),ar(K(et(l,i),u))),m=et(c,p);return Sr(m,a,n)}var cN=T({logLoss_:$q});function Aq(r,t,e,o=We.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","meanSquaredError"),s=v(t,"predictions","meanSquaredError"),i=null;e!=null&&(i=v(e,"weights","meanSquaredError")),Pe(n.shape,s.shape,"Error in meanSquaredError: ");let a=$p(n,s);return Sr(a,i,o)}var pN=T({meanSquaredError_:Aq});function Dq(r,t){let e=v(r,"labels","sigmoidCrossEntropyWithLogits"),o=v(t,"logits","sigmoidCrossEntropyWithLogits");Pe(e.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=gr(o),s=F(o,e),i=bl(Ge(Mt(de(o))));return K(et(n,s),i)}function Rq(r,t,e,o=0,n=We.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"multiClassLabels","sigmoidCrossEntropy"),i=v(t,"logits","sigmoidCrossEntropy"),a=null;if(e!=null&&(a=v(e,"weights","sigmoidCrossEntropy")),Pe(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=st(o),c=st(1),p=st(.5);s=K(F(s,et(c,u)),F(p,u))}let l=Dq(s,i);return Sr(l,a,n)}var mN=T({sigmoidCrossEntropy_:Rq});function Fq(r,t,e=-1){if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return no((n,s,i)=>{let l=xp(s,[e],!0),u=et(j(s,"float32"),l);i([n,u]);let c=Mt(F(u,n));return{value:it(c,[e]),gradFunc:(f,h)=>{let[d,g]=h,x=ln(f.shape,[e]);return[F(R(f,x),et(j(d,"float32"),Ge(g))),F(R(f,x),et(Ge(g),j(d,"float32")))]}}})(r,t)}function _q(r,t,e,o=0,n=We.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"onehotLabels","softmaxCrossEntropy"),i=v(t,"logits","softmaxCrossEntropy"),a=null;if(e!=null&&(a=v(e,"weights","softmaxCrossEntropy")),Pe(s.shape,i.shape,"Error in softmaxCrossEntropy: "),o>0){let u=st(o),c=st(1),p=st(s.shape[1]);s=K(F(s,et(c,u)),nt(u,p))}let l=Fq(s,i);return Sr(l,a,n)}var fN=T({softmaxCrossEntropy_:_q});function Oq(r,t,e,o){let n=v(r,"indices","sparseFillEmptyRows","int32"),s=v(t,"values","sparseFillEmptyRows"),i=v(e,"denseShape","sparseFillEmptyRows","int32"),a=v(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(i.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(a.rank!==0)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);let l={indices:n,values:s,denseShape:i,defaultValue:a},u=N.runKernel(Vc,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var hN=T({sparseFillEmptyRows_:Oq});function Pq(r,t,e){let o=v(r,"inputIndices","sparseReshape","int32"),n=v(t,"inputShape","sparseReshape","int32"),s=v(e,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i={inputIndices:o,inputShape:n,newShape:s},a=N.runKernel(Gc,i);return{outputIndices:a[0],outputShape:a[1]}}var dN=T({sparseReshape_:Pq});function Lq(r,t,e){let o=v(r,"data","sparseSegmentMean"),n=v(t,"indices","sparseSegmentMean","int32"),s=v(e,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return N.runKernel(Uc,i)}var gN=T({sparseSegmentMean_:Lq});function zq(r,t,e){let o=v(r,"data","sparseSegmentSum"),n=v(t,"indices","sparseSegmentSum","int32"),s=v(e,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return N.runKernel(Wc,i)}var xN=T({sparseSegmentSum_:zq});function Mq(r,t,e,o,n,s,i,a){let l=v(r,"data","stringNGrams","string");if(l.dtype!=="string")throw new Error("Data must be of datatype string");if(l.shape.length!==1)throw new Error(`Data must be a vector, saw: ${l.shape}`);let u=v(t,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let c={separator:e,nGramWidths:o,leftPad:n,rightPad:s,padWidth:i,preserveShortSequences:a},p={data:l,dataSplits:u},m=N.runKernel(sl,p,c);return{nGrams:m[0],nGramsSplits:m[1]}}var yN=T({stringNGrams_:Mq});function Bq(r,t,e=!0){let o=v(r,"input","stringSplit","string"),n=v(t,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:e},i={input:o,delimiter:n},a=N.runKernel(Hc,i,s);return{indices:a[0],values:a[1],shape:a[2]}}var bN=T({stringSplit_:Bq});function Vq(r,t){let e=v(r,"input","stringToHashBucketFast","string"),o={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");let n={input:e};return N.runKernel(qc,n,o)}var wN=T({stringToHashBucketFast_:Vq});var Gq={fft:Tl,ifft:ma,rfft:Nl,irfft:Ep},Uq={hammingWindow:BT,hannWindow:Xg,frame:Yg,stft:VT},wi={flipLeftRight:UT,grayscaleToRGB:WT,resizeNearestNeighbor:ex,resizeBilinear:tx,rotateWithOffset:HT,cropAndResize:GT,nonMaxSuppression:qT,nonMaxSuppressionAsync:XT,nonMaxSuppressionWithScore:YT,nonMaxSuppressionWithScoreAsync:ZT,nonMaxSuppressionPadded:QT,nonMaxSuppressionPaddedAsync:JT,threshold:tN,transform:eN},q0={bandPart:rN,gramSchmidt:oN,qr:sN},Wq={absoluteDifference:iN,computeWeightedLoss:Sr,cosineDistance:aN,hingeLoss:lN,huberLoss:uN,logLoss:cN,meanSquaredError:pN,sigmoidCrossEntropy:mN,softmaxCrossEntropy:fN},Hq={sparseFillEmptyRows:hN,sparseReshape:dN,sparseSegmentMean:gN,sparseSegmentSum:xN},qq={stringNGrams:yN,stringSplit:bN,stringToHashBucketFast:wN};var vr=class extends hf{minimize(t,e=!1,o){let{value:n,grads:s}=this.computeGradients(t,o);if(o!=null){let i=o.map(a=>({name:a.name,tensor:s[a.name]}));this.applyGradients(i)}else this.applyGradients(s);return St(s),e?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return P0(t,e)}dispose(){this.iterations_!=null&&St(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:st(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}};Object.defineProperty(vr,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var Fp=class extends vr{constructor(t,e,o=null){super(),this.learningRate=t,this.rho=e,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=N.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=N.registeredVariables[o],i=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:M(()=>bt(s).variable(i))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:M(()=>bt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;M(()=>{let c=K(F(l,this.rho),F(Ot(a),1-this.rho)),p=F(nt(pe(K(u,this.epsilon)),pe(K(l,this.epsilon))),a),m=K(F(u,this.rho),F(Ot(p),1-this.rho));l.assign(c),u.assign(m);let f=K(F(p,-this.learningRate),s);s.assign(f)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(St(this.accumulatedGrads.map(t=>t.variable)),St(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){let t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=t.length/2,o=!1;this.accumulatedGrads=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}};Fp.className="Adadelta";ro(Fp);var _p=class extends vr{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=N.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:M(()=>di(s.shape,this.initialAccumulatorValue).variable(!1))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let a=this.accumulatedGrads[n].variable;M(()=>{let l=K(a,Ot(i));a.assign(l);let u=K(F(nt(i,pe(K(l,N.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&St(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulatedGrads=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}};_p.className="Adagrad";ro(_p);var Op=class extends vr{constructor(t,e,o,n=null){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],M(()=>{this.accBeta1=st(e).variable(),this.accBeta2=st(o).variable()}),n==null&&(this.epsilon=N.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);M(()=>{let o=et(1,this.accBeta1),n=et(1,this.accBeta2);e.forEach((s,i)=>{let a=N.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:M(()=>bt(a).variable(l))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${s}/v`,variable:M(()=>bt(a).variable(l))});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedSecondMoment[i].variable,m=K(F(c,this.beta1),F(u,1-this.beta1)),f=K(F(p,this.beta2),F(Ot(u),1-this.beta2)),h=nt(m,o),d=nt(f,n);c.assign(m),p.assign(f);let g=K(F(nt(h,K(pe(d),this.epsilon)),-this.learningRate),a);a.assign(g)}),this.accBeta1.assign(F(this.accBeta1,this.beta1)),this.accBeta2.assign(F(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&St(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedSecondMoment!=null&&St(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t),M(()=>{this.accBeta1.assign(Br(this.beta1,this.iterations_+1)),this.accBeta2.assign(Br(this.beta2,this.iterations_+1))});let e=t.length/2,o=!1;this.accumulatedFirstMoment=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}};Op.className="Adam";ro(Op);var Pp=class extends vr{constructor(t,e,o,n=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],M(()=>{this.iteration=st(0).variable(),this.accBeta1=st(e).variable()}),n==null&&(this.epsilon=N.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);M(()=>{let o=et(1,this.accBeta1),n=nt(-this.learningRate,K(F(this.iteration,this.decay),1));e.forEach((s,i)=>{let a=N.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:bt(a).variable(l)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${s}/v`,variable:bt(a).variable(l)});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedWeightedInfNorm[i].variable,m=K(F(c,this.beta1),F(u,1-this.beta1)),f=F(p,this.beta2),h=de(u),d=so(f,h);c.assign(m),p.assign(d);let g=K(F(nt(n,o),nt(m,K(d,this.epsilon))),a);a.assign(g)}),this.iteration.assign(K(this.iteration,1)),this.accBeta1.assign(F(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&St(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedWeightedInfNorm!=null&&St(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}};Pp.className="Adamax";ro(Pp);var $l=class extends vr{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=Array.isArray(t)?t[n].tensor:t[o];if(s==null)return;let i=N.registeredVariables[o];M(()=>{let a=K(F(this.c,s),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,this.c!=null&&this.c.dispose(),this.c=be(st(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(t=await this.extractIterations(t),t.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}};$l.className="SGD";ro($l);var Lp=class extends $l{constructor(t,e,o=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=o,this.accumulations=[],this.m=st(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=N.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:M(()=>bt(s).variable(!1))});let i=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[o];a!=null&&M(()=>{let l,u=K(F(this.m,i),a);this.useNesterov?l=K(F(this.c,K(a,F(u,this.m))),s):l=K(F(this.c,u),s),i.assign(u),s.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&St(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulations=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}};Lp.className="Momentum";ro(Lp);var zp=class extends vr{constructor(t,e=.9,o=0,n=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=N.backend.epsilon()),t==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=N.registeredVariables[o],i=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:M(()=>bt(s).variable(i))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:M(()=>bt(s).variable(i))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:M(()=>bt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;M(()=>{let c=K(F(l,this.decay),F(Ot(a),1-this.decay));if(this.centered){let p=this.accumulatedMeanGrads[n].variable,m=K(F(p,this.decay),F(a,1-this.decay)),f=nt(F(a,this.learningRate),pe(et(c,K(Ot(m),this.epsilon)))),h=K(F(u,this.momentum),f);l.assign(c),p.assign(m),u.assign(h);let d=et(s,h);s.assign(d)}else{let p=K(F(l,this.decay),F(Ot(a),1-this.decay)),m=K(F(u,this.momentum),nt(F(a,this.learningRate),pe(K(p,this.epsilon))));l.assign(p),u.assign(m);let f=et(s,m);s.assign(f)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&St(this.accumulatedMeanSquares.map(t=>t.variable)),this.accumulatedMeanGrads!=null&&this.centered&&St(this.accumulatedMeanGrads.map(t=>t.variable)),this.accumulatedMoments!=null&&St(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=this.centered?t.length/3:t.length/2,o=!1;this.accumulatedMeanSquares=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=t.slice(e*2,e*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}};zp.className="RMSProp";ro(zp);var Ci=class{static sgd(t){return new $l(t)}static momentum(t,e,o=!1){return new Lp(t,e,o)}static rmsprop(t,e=.9,o=0,n=null,s=!1){return new zp(t,e,o,n,s)}static adam(t=.001,e=.9,o=.999,n=null){return new Op(t,e,o,n)}static adadelta(t=.001,e=.95,o=null){return new Fp(t,e,o)}static adamax(t=.002,e=.9,o=.999,n=null,s=0){return new Pp(t,e,o,n,s)}static adagrad(t,e=.1){return new _p(t,e)}};var ku={sgd:Ci.sgd,momentum:Ci.momentum,adadelta:Ci.adadelta,adagrad:Ci.adagrad,rmsprop:Ci.rmsprop,adamax:Ci.adamax,adam:Ci.adam};var Kq=(()=>typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:r=>r())();function wf(){return new Promise(r=>Kq(()=>r()))}var I={};Jt(I,{ERF_A1:()=>lK,ERF_A2:()=>uK,ERF_A3:()=>cK,ERF_A4:()=>pK,ERF_A5:()=>mK,ERF_P:()=>aK,PARALLELIZE_THRESHOLD:()=>rx,RowPartitionType:()=>Ii,SELU_SCALE:()=>j0,SELU_SCALEALPHA:()=>K0,applyActivation:()=>Su,assertAndGetBroadcastShape:()=>At,assertAxesAreInnerMostDims:()=>TW,assertParamsConsistent:()=>jq,assignToTypedArray:()=>yK,axesAreInnerMostDims:()=>R0,calculateShapes:()=>tU,checkEinsumDimSizes:()=>vK,checkPadOnDimRoundingMode:()=>ce,combineLocations:()=>Kk,combineRaggedTensorToTensorShapes:()=>Yq,complexWithEvenIndex:()=>dK,complexWithOddIndex:()=>gK,computeConv2DInfo:()=>mu,computeConv3DInfo:()=>Mk,computeDefaultPad:()=>D0,computeDilation2DInfo:()=>EU,computeOptimalWindowSize:()=>tK,computeOutAndReduceShapes:()=>F0,computeOutShape:()=>Xq,computePool2DInfo:()=>A0,computePool3DInfo:()=>$U,convertConv2DDataFormat:()=>Bk,decodeEinsumEquation:()=>IK,eitherStridesOrDilationsAreOne:()=>hr,expandShapeToKeepDim:()=>ln,exponent:()=>wK,exponents:()=>bK,fromStringArrayToUint8:()=>HK,fromUint8ToStringArray:()=>WK,getAxesPermutation:()=>_0,getBroadcastDims:()=>Tk,getComplexWithIndex:()=>xK,getEinsumComputePath:()=>kK,getEinsumPermutation:()=>SK,getFusedBiasGradient:()=>Iu,getFusedDyActivation:()=>Cu,getImageCenter:()=>eK,getInnerMostAxes:()=>NW,getPermuted:()=>oK,getRaggedRank:()=>Qq,getReductionAxes:()=>ne,getReshaped:()=>rK,getReshapedPermuted:()=>nK,getRowPartitionTypesHelper:()=>Zq,getSliceBeginCoords:()=>sK,getSliceSize:()=>iK,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>$K,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>AK,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>DK,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>_K,getSparseReshapeInputOutputMismatchErrorMessage:()=>PK,getSparseReshapeInputOutputMultipleErrorMessage:()=>OK,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>RK,getSparseReshapeNegativeOutputDimErrorMessage:()=>FK,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>BK,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>LK,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>zK,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>MK,getUndoAxesPermutation:()=>df,isIdentityPermutation:()=>TK,log:()=>HV,mergeRealAndImagArrays:()=>fK,prepareAndValidate:()=>JG,prepareSplitSize:()=>EK,segment_util:()=>Y0,shouldFuse:()=>vu,slice_util:()=>xe,splitRealAndImagArrays:()=>hK,tupleValuesAreOne:()=>Wo,upcastType:()=>oe,validateDefaultValueShape:()=>Jq,validateInput:()=>T0,validateUpdateShape:()=>Ek,warn:()=>si});function jq(r,t){let e=r[0].length;r.forEach((n,s)=>{$(n.length===e,()=>`Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`)}),$(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);let o=r[0];r.forEach((n,s)=>{for(let i=0;i<e;i++)$(i===t||n[i]===o[i],()=>`Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function Xq(r,t){let e=r[0].slice();for(let o=1;o<r.length;o++)e[t]+=r[o][t];return e}var Ii;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(Ii||(Ii={}));function Yq(r,t,e){let o=new Array;if(e==null&&t==null)return o;if(t==null)for(;o.length<r+e.length;)o.push(-1);else o=t.slice();if(e==null)return o;if(r+e.length!==o.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${r+e.length}, but shape.rank = ${o.length}`);for(let n=1;n<e.length;++n){let s=e[n],i=o[o.length-e.length+n],a=o[i];if(s>=0)if(a>=0){if(a!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${a}`)}else o[i]=s}return o}function Zq(r){let t={FIRST_DIM_SIZE:Ii.FIRST_DIM_SIZE,VALUE_ROWIDS:Ii.VALUE_ROWIDS,ROW_LENGTHS:Ii.ROW_LENGTHS,ROW_SPLITS:Ii.ROW_SPLITS,ROW_LIMITS:Ii.ROW_LIMITS,ROW_STARTS:Ii.ROW_STARTS},e=[];for(let o of r)if(o in t)e.push(t[o]);else break;return e}function Qq(r){return r.length===0?0:r[0]===Ii.FIRST_DIM_SIZE?r.length-1:r.length}function Jq(r,t){if(r==null||t==null)return;let e=r.length,o=t.length;if(e>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(e,o-1);++n){let s=r[n],i=t[n+1];if(s>=0&&i>=0&&s!==1&&s!==i)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${i}`)}}var rx=30;function tK(r){return r<=rx?r:mc(r,Math.floor(Math.sqrt(r)))}function eK(r,t,e){let o=e*(typeof r=="number"?r:r[0]),n=t*(typeof r=="number"?r:r[1]);return[o,n]}function rK(r,t,e,o=!0){let n=[];if(o)n=n.concat(t.slice(0)),n.push(r[0]/e),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=t.length;for(let i=0;i<s;++i)n=n.concat([r[i+1]/t[i],t[i]]);n=n.concat(r.slice(s+1))}return n}function oK(r,t,e=!0){let o=[];if(e){o.push(t);for(let n=t+1;n<r;++n)n<=2*t?(o.push(n),o.push(n-(t+1))):o.push(n)}else{let n=[],s=[];for(let i=1;i<r;++i)i>=t*2+1||i%2===1?s.push(i):n.push(i);o.push(...n),o.push(0),o.push(...s)}return o}function nK(r,t,e,o=!0){let n=[];o?n.push(r[0]/e):n.push(r[0]*e);for(let s=1;s<r.length;++s)s<=t.length?o?n.push(t[s-1]*r[s]):n.push(r[s]/t[s-1]):n.push(r[s]);return n}function sK(r,t){let e=[0];for(let o=0;o<t;++o)e.push(r[o][0]);return e}function iK(r,t,e){let o=r.slice(0,1);for(let n=0;n<e;++n)o.push(r[n+1]-t[n][0]-t[n][1]);return o}var K0=1.7580993408473768,j0=1.0507009873554805;var aK=.3275911,lK=.254829592,uK=-.284496736,cK=1.421413741,pK=-1.453152027,mK=1.061405429;function fK(r,t){if(r.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t.length}.`);let e=new Float32Array(r.length*2);for(let o=0;o<e.length;o+=2)e[o]=r[o/2],e[o+1]=t[o/2];return e}function hK(r){let t=new Float32Array(r.length/2),e=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)t[o/2]=r[o],e[o/2]=r[o+1];return{real:t,imag:e}}function dK(r){let t=Math.ceil(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=0;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function gK(r){let t=Math.floor(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=2;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function xK(r,t){let e=r[t*2],o=r[t*2+1];return{real:e,imag:o}}function yK(r,t,e,o){r[o*2]=t,r[o*2+1]=e}function bK(r,t){let e=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(t?2:-2)*Math.PI*(n/r);e[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:e,imag:o}}function wK(r,t,e){let o=(e?2:-2)*Math.PI*(r/t),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var X0="->",CK=/->/g,CN=",",IN="...";function IK(r,t){r=r.replace(/\s/g,"");let e=(r.length-r.replace(CK,"").length)/X0.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${X0}").`);let[o,n]=r.split(X0);$(o.indexOf(IN)===-1,()=>`The ellipsis notation ("${IN}") is not supported yet.`);let s=o.split(CN),i=s.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let a=[];for(let m=0;m<n.length;++m){let f=n[m];if(!s.some(h=>h.indexOf(f)!==-1))throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);a.indexOf(f)===-1&&a.push(f)}for(let m=0;m<o.length;++m){let f=o[m];a.indexOf(f)===-1&&f!==CN&&a.push(f)}let l=new Array(s.length);for(let m=0;m<i;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);l[m]=[];for(let f=0;f<s[m].length;++f)l[m].push(a.indexOf(s[m][f]))}let u=a.length,c=n.length,p=[];for(let m=c;m<u;++m)p.push(m);return{allDims:a,summedDims:p,idDims:l}}function SK(r,t){let e=new Array(r);e.fill(-1);for(let n=0;n<t.length;++n)e[t[n]]=n;let o=[];for(let n=0;n<r;++n)e[n]===-1&&o.push(n);return e=e.filter(n=>n!==-1),{permutationIndices:e,expandDims:o}}function vK(r,t,e){let o=new Array(r);for(let n=0;n<e.length;++n){let s=e[n].shape;for(let i=0;i<t[n].length;++i)o[t[n][i]]===void 0?o[t[n][i]]=s[i]:$(o[t[n][i]]===s[i],()=>`Expected dimension ${o[t[n][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`)}}function kK(r,t){let e=r,o=[],n=0;r.length===0&&e.push(-1),n=r.length+1;for(let i=0;i<n;++i)o.push([]);let s=[];for(let i=0;i<e.length;++i){let a=e[i],l=NK(t,a);for(let u of l)s.indexOf(u)===-1&&(o[i].push(u),s.push(u))}return{path:e,steps:o}}function TK(r){return r.every((t,e)=>t===e)}function NK(r,t){let e=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(t)!==-1||t===-1)&&e.push(o);return e}function EK(r,t,e=0){let o=[];if(typeof t=="number")$(r.shape[e]%t===0,()=>"Number of splits must evenly divide the axis."),o=new Array(t).fill(r.shape[e]/t);else{let n=t.reduce((i,a)=>(a===-1&&(i+=1),i),0);$(n<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(s!==-1){let i=t.reduce((a,l)=>l>0?a+l:a);t[s]=r.shape[e]-i}$(r.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),o=t}return o}function $K(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function AK(r,t){return`indices(${r}, 0) is invalid: ${t} < 0`}function DK(r,t,e){return`indices(${r}, 0) is invalid: ${t} >= ${e}`}function RK(r,t){return`only one output dimension may be -1, not both ${r} and ${t}`}function FK(r,t){return`size ${r} must be non-negative, not ${t}`}function _K(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function OK(r,t){let e=Vt(r),o=Vt(t);return`Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t}`}function PK(r,t){let e=Vt(r),o=Vt(t);return`Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t}`}function LK(){return"segment ids must be >= 0"}function zK(){return"segment ids are not increasing"}function MK(r,t){return`Segment id ${r} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function BK(r,t,e){return`Bad: indices[${r}] == ${t} out of range [0, ${e})`}var Y0={};Jt(Y0,{collectGatherOpShapeInfo:()=>UK,computeOutShape:()=>GK,segOpComputeOptimalWindowSize:()=>VK});function VK(r,t){let e=!1,o;for(r<=rx?(o=r,e=!0):o=mc(r,Math.floor(Math.sqrt(r)));!e;)o>t||o===r?e=!0:o=mc(r,o+1);return o}function GK(r,t,e){let o=[],n=r.length;for(let s=0;s<n;s++)s!==t?o.push(r[s]):o.push(e);return o}function UK(r,t,e,o){let n=t.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(e<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);for(let p=0;p<o;++p)if(r.shape[p]!==t.shape[p])throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${t.shape[p]}.`);let i=r.shape[e],a=[],l=1,u=1,c=1;for(let p=0;p<o;++p)a.push(r.shape[p]),l*=r.shape[p];for(let p=o;p<e;p++)a.push(r.shape[p]),u*=r.shape[p];for(let p=o;p<n;p++)a.push(t.shape[p]);for(let p=e+1;p<s;p++)a.push(r.shape[p]),c*=r.shape[p];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function WK(r){try{return r.map(t=>Jc(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function HK(r){return r.map(t=>Qc(t))}var er={};Jt(er,{nonMaxSuppressionV3Impl:()=>Zg,nonMaxSuppressionV4Impl:()=>Qg,nonMaxSuppressionV5Impl:()=>Jg,whereImpl:()=>Hg});var ox={kernelName:On,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,un(j(e,"float32"),-1))}}};var SN={kernelName:Pi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=Ot(j(e,"float32")),n=pe(et(st(1),o));return Mt(nt(r,n))}}}};var vN={kernelName:Li,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=pe(et(Ot(j(e,"float32")),1));return nt(r,o)}}}};var kN={kernelName:Jr,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=r,l=ne(e.shape,n);return l.length>0&&(a=it(a,l)),R(a,e.shape)},b:()=>{let a=r,l=ne(o.shape,n);return l.length>0&&(a=it(a,l)),R(a,o.shape)}}}};var TN={kernelName:ks,saveAllInputs:!0,gradFunc:(r,t)=>{let e={};return t.forEach((o,n)=>{e[n]=()=>r.clone()}),e}};var NN={kernelName:Ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>bt(e)}}};var EN={kernelName:Ns,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>bt(e)}}};var $N={kernelName:zi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,pe(et(st(1),Ot(j(e,"float32")))))}}};var AN={kernelName:Mi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=pe(K(st(1),Ot(j(e,"float32"))));return nt(r,o)}}}};var DN={kernelName:Pn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=K(Ot(e),Ot(o)),l=F(r,nt(o,a)),u=ne(e.shape,n);return u.length>0&&(l=it(l,u)),R(l,e.shape)},b:()=>{let a=K(Ot(e),Ot(o)),l=Mt(F(r,nt(e,a))),u=ne(o.shape,n);return u.length>0&&(l=it(l,u)),R(l,o.shape)}}}};var RN={kernelName:Bi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,K(Ot(j(e,"float32")),1))}}};var FN={kernelName:Vi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,et(st(1),Ot(j(e,"float32"))))}}};function qK(r,t,e,o,n,s){let i=v(r,"dy","avgPool3dGrad"),a=v(t,"input","avgPool3dGrad"),l=i,u=a,c=!1;a.rank===4&&(c=!0,l=R(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=R(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),$(u.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),ce("avgPool3dGrad",n,s);let p={dy:l,input:u},m={filterSize:e,strides:o,pad:n,dimRoundingMode:s},f=N.runKernel(xc,p,m);return c?R(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}var _N=T({avgPool3dGrad_:qK});var ON={kernelName:Pa,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i,dimRoundingMode:a}=e;return{x:()=>_N(r,o,n,s,i,a)}}};function KK(r,t,e,o,n){let s=v(r,"dy","avgPoolGrad"),i=v(t,"input","avgPoolGrad");$(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let a=i,l=s,u=!1;i.rank===3&&(u=!0,a=R(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=R(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),$(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);let c={dy:l,input:a},p={filterSize:e,strides:o,pad:n},m=N.runKernel(gc,c,p);return u?R(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var PN=T({avgPoolGrad_:KK});var LN={kernelName:Es,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i}=e;return{x:()=>PN(r,o,n,s,i)}}};var zN={kernelName:$s,inputsToSave:["a","b"],gradFunc:(r,t,e)=>{let[o,n]=t,{transposeA:s,transposeB:i}=e;return!s&&!i?{a:()=>Lt(r,n,!1,!0),b:()=>Lt(o,r,!0,!1)}:!s&&i?{a:()=>Lt(r,n,!1,!1),b:()=>Lt(r,o,!0,!1)}:s&&!i?{a:()=>Lt(n,r,!1,!0),b:()=>Lt(o,r,!1,!1)}:{a:()=>Lt(n,r,!0,!0),b:()=>Lt(r,o,!0,!0)}}};var MN={kernelName:As,gradFunc:(r,t,e)=>{let{blockShape:o,crops:n}=e;return{x:()=>Il(r,o,n)}}};var BN={kernelName:y1,gradFunc:(r,t,e)=>{let o=e,n=o.inputShape,s=o.shape,i=Array.from(s);for(let l=n.length-1;l>=0;l--)if(n[l]===s[l])i[l]=1;else if(n[l]!==1)throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${s}].`);let a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>it(r,a,!0)}}};var VN={kernelName:No,gradFunc:r=>({x:()=>r.clone()})};var GN={kernelName:Eo,gradFunc:r=>({x:()=>bt(r)})};var UN={kernelName:Ln,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{clipValueMin:n,clipValueMax:s}=e;return{x:()=>ye(Ir(ho(o,n),go(o,s)),r,bt(r))}}};var WN={kernelName:La,inputsToSave:["x"],gradFunc:ox.gradFunc};var HN={kernelName:Ds,saveAllInputs:!0,gradFunc:(r,t,e)=>{let o=t.map(l=>l.shape),{axis:n}=e,s=Ye(n,t[0].shape)[0],i=o.map(l=>l[s]);return tr(r,i,s).map(l=>()=>l)}};var qN={kernelName:Rs,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{dilations:s,strides:i,pad:a,dataFormat:l}=e;return $(Wo(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>pp(o.shape,r,n,i,a,l),filter:()=>Rp(o,r,n.shape,i,a,l)}}};var KN={kernelName:Fs,inputsToSave:["dy","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{strides:s,pad:i,dataFormat:a,dimRoundingMode:l}=e;return{dy:()=>oo(r,n,s,i,a,1,l),filter:()=>Rp(r,o,n.shape,s,i,a,l)}}};function jK(r,t,e,o,n){let s=r;r.rank===4&&(s=R(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let i=t;i.rank===4&&(i=R(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),$(s.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),$(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),$(e.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),$(s.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${e[3]}.`),$(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);let a={x:s,dy:i},l={strides:o,pad:n,filterShape:e};return N.runKernel(Cc,a,l)}var jN=T({conv3DBackpropFilter_:jK});var XN={kernelName:za,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s}=e;$(Wo(o),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);let[i,a]=t;return{x:()=>fg(i.shape,r,a,n,s),filter:()=>jN(i,r,a.shape,n,s)}}};var YN={kernelName:zn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(Mt(vp(j(e,"float32"))),r)}}};var ZN={kernelName:Mn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(kp(j(e,"float32")),r)}}};var QN={kernelName:_s,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n,exclusive:s,reverse:i}=e;return{x:()=>{let a=_0([n],o.rank),l=hp(r,n,s,!i);return a!=null&&(l=Rt(l,a)),l}}}};var JN={kernelName:Os,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s,dimRoundingMode:i}=e,a=o??[1,1];$(Wo(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);let[l,u]=t;return $(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),$(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),$(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),$(hr(n,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${a}'.`),ce("depthwiseConv2d",s,i),{x:()=>jg(l.shape,r,u,n,s,a,i),filter:()=>Kg(l,r,u.shape,n,s,a,i)}}};var t2={kernelName:Ga,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,s={x:o,filter:n,dy:r},i={x:o,filter:n,dy:r};return{x:()=>N.runKernel(ef,s,e),filter:()=>N.runKernel(rf,i,e)}}};var e2={kernelName:Vn,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t,o={dy:r,y:e};return{x:()=>N.runKernel(Nc,o)}}};var r2={kernelName:Ui,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=F(Ge(Mt(Ot(e))),2/Math.sqrt(Math.PI));return{x:()=>F(r,o)}}};var o2={kernelName:$o,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,e)}}};var n2={kernelName:Ps,inputsToSave:["input"],gradFunc:(r,t)=>{let[e]=t;return{input:()=>R(r,e.shape)}}};var s2={kernelName:Ao,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,Ge(e))}}};var i2={kernelName:Do,gradFunc:r=>({x:()=>bt(r)})};var a2={kernelName:Un,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=nt(r,j(o,"float32")),l=ne(e.shape,n);return l.length>0?R(it(a,l),e.shape):a},b:()=>{let a=F(r,j(e,"float32")),l=ne(o.shape,n);l.length>0&&(a=R(it(a,l),o.shape));let u=Ot(o);return Mt(nt(a,j(u,"float32")))}}}};var l2={kernelName:Ls,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,t,e)=>{let{varianceEpsilon:o}=e,[n,s,i,a]=t,l=a??st(1),u=ne(s.shape,n.shape),c=[];if(s.rank===1){for(let C=0;C<n.shape.length-1;++C)c.push(n.shape[C]);c.push(1)}let p=et(n,s),m=F(r,l),f=Cp(K(i,st(o))),h=F(F(F(f,f),f),st(-.5));return{x:()=>s.rank===1?R(F(F(r,dr(R(f,[1,1,1,s.shape[0]]),c)),l),n.shape):R(F(F(r,f),l),n.shape),mean:()=>{let C=F(F(f,st(-1)),m);return s.rank===1&&(C=it(C,u)),R(C,s.shape)},variance:()=>{let C=F(F(h,p),m);return s.rank===1&&(C=it(C,u)),R(C,s.shape)},scale:()=>{let C=F(p,f),k=F(r,C);return s.rank===1&&(k=it(k,u)),R(k,s.shape)},offset:()=>{let C=r;return s.rank===1&&(C=it(C,u)),R(C,s.shape)}}}};var p2={kernelName:zs,inputsToSave:["x","indices"],gradFunc:(r,t,e)=>{let[o,n]=t,{axis:s}=e,i=Ye(s,o.shape)[0];return{x:()=>{let l=o.shape,u=n.size,c=l.slice(0,i),p=c.length,m=l.slice(s,l.length).slice(1),f=m.length,h=u2(0,p),d=u2(p+1,p+1+f),g=c2([c,[u],m]),x=R(r,g),b=R(n,[u]),w=c2([[p],h,d]),C=Rt(x,w),k=Dp(C,b,o.shape[i]),E=df(w);return k=Rt(k,E),k},indices:()=>n}}};function u2(r,t){let e=[];for(let o=r;o<t;++o)e.push(o);return e}function c2(r){let t=[];for(let e=0;e<r.length;++e)for(let o=0;o<r[e].length;++o)t.push(r[e][o]);return t}var m2={kernelName:Ro,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>bt(e),b:()=>bt(o)}}};var f2={kernelName:Fo,gradFunc:r=>({x:()=>j(r,"float32")})};var h2={kernelName:Wi,gradFunc:r=>({x:()=>bt(r)})};var d2={kernelName:Hi,gradFunc:r=>({x:()=>bt(r)})};var g2={kernelName:Hn,gradFunc:r=>({x:()=>bt(r)})};var x2={kernelName:Ms,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{alpha:n}=e,s=Le(o,0);return{x:()=>ye(s,r,F(r,n))}}};var y2={kernelName:qi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,K(e,1))}}};var b2={kernelName:_o,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,j(e,"float32"))}}};var w2={kernelName:b1,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e;return{logits:()=>{let i=Ge(o);return et(r,F(it(r,n,!0),i))}}}};function XK(r,t,e,o=5,n=1,s=1,i=.5){let a={x:r,y:t,dy:e},l={depthRadius:o,bias:n,alpha:s,beta:i};return N.runKernel(Dc,a,l)}var C2=T({localResponseNormalizationBackprop_:XK});var I2={kernelName:ja,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{depthRadius:s,bias:i,alpha:a,beta:l}=e;return{x:()=>C2(o,n,r,s,i,a,l)}}};function nx(r,t,e,o){return t.rank<e.rank&&(t=R(t,ln(t.shape,o))),r.rank<e.rank&&(r=R(r,ln(r.shape,o))),{x:()=>F(r,j($r(e,t),r.dtype))}}var Z0={kernelName:Bs,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{reductionIndices:n}=o,s=t[0],i=t[1],a=Ye(n,s.shape),l=nx(r,i,s,a);return{x:()=>l.x()}}};var S2={kernelName:Oo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>F(r,j(ho(e,o),"float32")),b:()=>F(r,j(dp(e,o),"float32"))}}};function YK(r,t,e,o,n,s,i){let a=v(r,"dy","maxPool3dGrad"),l=v(t,"input","maxPool3dGrad"),u=v(e,"output","maxPool3dGrad"),c=a,p=l,m=u,f=!1;l.rank===4&&(f=!0,c=R(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),p=R(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=R(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),$(c.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),$(p.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),$(m.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`),ce("maxPool3dGrad",s,i);let h={dy:c,input:p,output:m},d={filterSize:o,strides:n,pad:s,dimRoundingMode:i},g=N.runKernel(Fc,h,d);return f?R(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}var v2=T({maxPool3dGrad_:YK});var k2={kernelName:Xa,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=e;return{x:()=>v2(r,o,n,s,i,a,l)}}};function ZK(r,t,e,o,n,s,i){let a=v(r,"dy","maxPoolGrad"),l=v(t,"input","maxPoolGrad"),u=v(e,"output","maxPoolGrad");$(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),$(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),$(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),ce("maxPoolGrad",s,i);let c={dy:a,input:l,output:u},p={filterSize:o,strides:n,pad:s,dimRoundingMode:i};return N.runKernel(Rc,c,p)}var T2=T({maxPoolGrad_:ZK});var N2={kernelName:Vs,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a}=e;return{x:()=>T2(r,o,n,s,i,a)}}};var E2={kernelName:Gs,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=Ye(n,o.shape),a=F0(o.shape,s)[1],l=Vt(a);return{x:()=>{let c=o.shape.slice();s.forEach(f=>{c[f]=1});let p=R(r,c);return nt(F(p,Qe(o.shape,"float32")),l)}}}};var $2={kernelName:Us,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{axis:n}=o,[s,i]=t,a=Ye(n,s.shape),l=nx(r,i,s,a);return{x:()=>l.x()}}};var A2={kernelName:Po,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>F(r,j(go(e,o),"float32")),b:()=>F(r,j(Le(e,o),"float32"))}}};var D2={kernelName:Ws,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Nt(r,s,o.shape)}}};var R2={kernelName:Xi,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=ne(e.shape,n);return a.length>0?R(it(r,a),e.shape):r},b:()=>{let a=F(r,Mt(gi(nt(e,o)))),l=ne(o.shape,n);return l.length>0?R(it(a,l),o.shape):a}}}};var F2={kernelName:Lo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=F(r,j(o,"float32")),l=ne(e.shape,n);return l.length>0?R(it(a,l),e.shape):a},b:()=>{let a=F(r,j(e,"float32")),l=ne(o.shape,n);return l.length>0?R(it(a,l),o.shape):a}}}};var _2={kernelName:jn,gradFunc:r=>({x:()=>Mt(r)})};var O2={kernelName:Qa,inputsToSave:["indices"],gradFunc:(r,t)=>{let e=t[0];return{indices:()=>ee(e.shape,"float32")}}};var P2={kernelName:Hs,gradFunc:r=>({x:()=>bt(r)})};var L2={kernelName:qs,saveAllInputs:!0,gradFunc:(r,t,e)=>{let{axis:o}=e;return lr(r,o).map(s=>()=>s)}};var Q0={kernelName:Ks,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Nt(r,s,o.shape)}}};var z2={kernelName:Yn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,t)=>{let[e,o,n]=t,s=e,i=o,a=At(s.shape,i.shape);return{a:()=>{let c=j(i,"float32"),p=F(r,F(c,Br(s,et(c,st(1))))),m=ne(s.shape,a);return m.length>0&&(p=it(p,m)),R(p,s.shape)},b:()=>{let c=Le(s,0),p=ye(c,ar(s),bt(s)),m=F(r,F(n,p)),f=ne(i.shape,a);return f.length>0&&(m=it(m,f)),R(m,i.shape)}}}};var M2={kernelName:js,inputsToSave:["x","alpha"],gradFunc:(r,t)=>{let[e,o]=t,n=Le(e,0);return{x:()=>ye(n,r,F(r,o)),alpha:()=>{let s=ye(n,bt(r),F(r,e)),i=ne(o.shape,r.shape);return i.length>0&&(s=it(s,i)),R(s,o.shape)}}}};function QK(r,t,e){let o=r.shape.slice();o[e]=1;let n=R(t,o),s=fu(r,e,!0,!1),i=fu(r,e,!0,!0),a=F(s,i);return F(n,a)}function JK(r,t,e){let o=r.shape.length,n=o-e.length,s=I.getAxesPermutation(e,o),i=r;s!=null&&(i=Rt(r,s));let a=i.shape.slice(),u=a.splice(o-e.length,e.length).reduce((m,f)=>m*f,1);a.push(u);let c=i.reshape(a),p=QK(c,t,n);if(p=p.reshape(i.shape),s!=null){let m=I.getUndoAxesPermutation(s);p=Rt(p,m)}return p}var B2={kernelName:Zn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=[];return n==null?s=o.shape.map((i,a)=>a):typeof n=="number"?s=[n]:s=n,{x:()=>JK(o,r,s)}}};var V2={kernelName:Bn,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=nt(r,j(o,"float32")),l=ne(e.shape,n);return l.length>0?R(it(a,l),e.shape):a},b:()=>{let a=F(r,j(e,"float32")),l=ne(o.shape,n);l.length>0&&(a=R(it(a,l),o.shape));let u=Ot(o);return Mt(nt(a,j(u,"float32")))}}}};var G2={kernelName:Qn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,Mt(Ot(e)))}}};var U2={kernelName:ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=F(go(e,6),un(e));return{x:()=>F(r,j(o,"float32"))}}};var W2={kernelName:Jn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,j(un(e),"float32"))}}};var H2={kernelName:Xs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>R(r,e.shape)}}};var q2={kernelName:Zs,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>N.runKernel(Mc,n,e)}}};var K2={kernelName:Ys,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>N.runKernel(zc,n,e)}}};var j2={kernelName:tl,gradFunc:(r,t,e)=>{let{dims:o}=e,n=Ye(o,r.shape);return{x:()=>Je(r,n)}}};var X2={kernelName:Zi,gradFunc:r=>({x:()=>bt(r)})};var Y2={kernelName:zo,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>Mt(nt(r,F(Br(e,1.5),2)))}}};var Z2={kernelName:Qs,inputsToSave:["condition"],gradFunc:(r,t)=>{let[e]=t;return{condition:()=>j(bt(e),"float32"),t:()=>F(r,j(e,r.dtype)),e:()=>F(r,j(wl(e),r.dtype))}}};var Q2={kernelName:Qi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=Le(e,st(0)),n=st(K0),s=st(j0),i=F(r,s),a=F(F(r,n),Ge(j(e,"float32")));return ye(o,i,a)}}}};var J2={kernelName:Mo,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,F(e,et(st(1),e)))}}};var tE={kernelName:Ji,gradFunc:r=>({x:()=>bt(r)})};var eE={kernelName:rs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(xl(j(e,"float32")),r)}}};var rE={kernelName:os,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(fp(j(e,"float32")),r)}}};var oE={kernelName:es,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{begin:n,size:s}=e,i=o.shape,[a,l]=E0(o,n,s),u=[];for(let c=0;c<r.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>Vr(r,u)}}};var nE={kernelName:ri,outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{dim:n}=e,s=!0,i=F(r,o);return{logits:()=>et(i,F(it(i,[n],s),o))}}};var sE={kernelName:ta,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,Er(e))}}};var J0={kernelName:ti,gradFunc:(r,t,e)=>{let{blockShape:o,paddings:n}=e;return{x:()=>gl(r,o,n)}}};var tI={kernelName:ei,gradFunc:(r,t,e)=>{let{axis:o}=e;return{x:()=>jt(r,o)}}};var iE={kernelName:Bo,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,F(pe(j(e,"float32")),2))}}};var aE={kernelName:ol,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(r,F(j(e,"float32"),2))}}};var lE={kernelName:Vo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=st(2);return{a:()=>F(r,F(n,et(e,o))),b:()=>F(r,F(n,et(o,e)))}}};var uE={kernelName:ra,gradFunc:r=>({x:()=>bt(r)})};var cE={kernelName:Go,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=At(e.shape,o.shape);return{a:()=>{let a=r,l=ne(e.shape,n);return l.length>0&&(a=it(a,l)),R(a,e.shape)},b:()=>{let a=r,l=ne(o.shape,n);return l.length>0&&(a=it(a,l)),R(Mt(a),o.shape)}}}};var pE={kernelName:Js,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,n=o.shape.slice(),{axis:s}=e;Ye(s,o.shape).forEach(u=>{n[u]=1});let a=R(r,n),l=F(a,Qe(o.shape,"float32"));return{x:()=>l}}};var mE={kernelName:ea,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>nt(r,Ot(xl(e)))}}};var fE={kernelName:ns,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>F(et(st(1),Ot(e)),r)}}};var hE={kernelName:tn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{reps:n}=e;return{x:()=>{let i=bt(o);if(o.rank===1)for(let a=0;a<n[0];++a)i=K(i,Nt(r,[a*o.shape[0]],[o.shape[0]]));else if(o.rank===2)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)i=K(i,Nt(r,[a*o.shape[0],l*o.shape[1]],[o.shape[0],o.shape[1]]));else if(o.rank===3)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)i=K(i,Nt(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2]],[o.shape[0],o.shape[1],o.shape[2]]));else if(o.rank===4)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)for(let c=0;c<n[3];++c)i=K(i,Nt(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2],c*o.shape[3]],[o.shape[0],o.shape[1],o.shape[2],o.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${o.rank} tensors yet.`);return i}}}};var dE={kernelName:en,gradFunc:(r,t,e)=>{let o=e,{perm:n}=o,s=df(n);return{x:()=>Rt(r,s)}}};var gE={kernelName:oi,gradFunc:(r,t,e)=>{let o=e,{axis:n}=o;return{value:()=>Ue(r,n)}}};var xE={kernelName:ll,inputsToSave:["segmentIds"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>tj(r,e)}}};function tj(r,t){let e=so(t,bt(t)),o=xi(r,e),n=ho(t,st(0,"int32")),s=o.rank-n.rank;for(let a=0;a<s;++a)n=Ze(n,a+1);n=Ir(n,Qe(o.shape,"bool"));let i=bt(o);return ye(n,o,i)}var yE={kernelName:ni,gradFunc:r=>({x:()=>bt(r)})};var ej=[ox,SN,vN,kN,TN,NN,EN,$N,AN,DN,RN,FN,ON,LN,zN,MN,BN,VN,GN,UN,WN,HN,KN,qN,XN,YN,ZN,QN,JN,t2,V2,e2,r2,o2,n2,s2,a2,i2,l2,p2,m2,f2,h2,d2,g2,x2,y2,b2,w2,I2,Z0,Z0,S2,k2,N2,E2,$2,A2,D2,R2,F2,_2,O2,P2,L2,Q0,Q0,z2,M2,B2,G2,U2,W2,H2,q2,K2,j2,X2,Y2,Z2,Q2,J2,tE,eE,rE,oE,nE,sE,J0,J0,tI,tI,iE,lE,aE,uE,cE,pE,mE,fE,hE,dE,gE,xE,yE];for(let r of ej)C1(r);O().prototype.abs=function(){return this.throwIfDisposed(),de(this)};O().prototype.acos=function(){return this.throwIfDisposed(),Kd(this)};O().prototype.acosh=function(){return this.throwIfDisposed(),jd(this)};O().prototype.add=function(r){return this.throwIfDisposed(),K(this,r)};O().prototype.all=function(r,t){return this.throwIfDisposed(),lp(this,r,t)};O().prototype.any=function(r,t){return this.throwIfDisposed(),cu(this,r,t)};O().prototype.argMax=function(r){return this.throwIfDisposed(),ci(this,r)};O().prototype.argMin=function(r){return this.throwIfDisposed(),Xd(this,r)};O().prototype.asScalar=function(){return this.throwIfDisposed(),$(this.size===1,()=>"The array must have only 1 element."),R(this,[])};O().prototype.asType=function(r){return this.throwIfDisposed(),j(this,r)};O().prototype.as1D=function(){return this.throwIfDisposed(),R(this,[this.size])};O().prototype.as2D=function(r,t){return this.throwIfDisposed(),R(this,[r,t])};O().prototype.as3D=function(r,t,e){return this.throwIfDisposed(),R(this,[r,t,e])};O().prototype.as4D=function(r,t,e,o){return this.throwIfDisposed(),R(this,[r,t,e,o])};O().prototype.as5D=function(r,t,e,o,n){return this.throwIfDisposed(),R(this,[r,t,e,o,n])};O().prototype.asin=function(){return this.throwIfDisposed(),Yd(this)};O().prototype.asinh=function(){return this.throwIfDisposed(),Zd(this)};O().prototype.atan=function(){return this.throwIfDisposed(),Qd(this)};O().prototype.atan2=function(r){return this.throwIfDisposed(),Jd(this,r)};O().prototype.atanh=function(){return this.throwIfDisposed(),tg(this)};O().prototype.avgPool=function(r,t,e,o){return this.throwIfDisposed(),dl(this,r,t,e,o)};O().prototype.batchToSpaceND=function(r,t){return this.throwIfDisposed(),gl(this,r,t)};O().prototype.batchNorm=function(r,t,e,o,n){return this.throwIfDisposed(),mi(this,r,t,e,o,n)};O().prototype.broadcastTo=function(r){return this.throwIfDisposed(),an(this,r)};O().prototype.cast=function(r){return this.throwIfDisposed(),j(this,r)};O().prototype.ceil=function(){return this.throwIfDisposed(),ag(this)};O().prototype.clipByValue=function(r,t){return this.throwIfDisposed(),ir(this,r,t)};O().prototype.concat=function(r,t){return this.throwIfDisposed(),r instanceof Pt&&(r=[r]),jt([this,...r],t)};O().prototype.conv1d=function(r,t,e,o,n,s){return this.throwIfDisposed(),cp(this,r,t,e,o,n,s)};O().prototype.conv2dTranspose=function(r,t,e,o,n){return this.throwIfDisposed(),mp(this,r,t,e,o,n)};O().prototype.conv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),oo(this,r,t,e,o,n,s)};O().prototype.cos=function(){return this.throwIfDisposed(),xl(this)};O().prototype.cosh=function(){return this.throwIfDisposed(),fp(this)};O().prototype.cumprod=function(r,t,e){return this.throwIfDisposed(),fu(this,r,t,e)};O().prototype.cumsum=function(r,t,e){return this.throwIfDisposed(),hp(this,r,t,e)};O().prototype.depthToSpace=function(r,t){return this.throwIfDisposed(),dg(this,r,t)};O().prototype.depthwiseConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),fi(this,r,t,e,o,n,s)};O().prototype.dilation2d=function(r,t,e,o,n){return this.throwIfDisposed(),gg(this,r,t,e,o,n)};O().prototype.divNoNan=function(r){return this.throwIfDisposed(),xg(this,r)};O().prototype.div=function(r){return this.throwIfDisposed(),nt(this,r)};O().prototype.dot=function(r){return this.throwIfDisposed(),yg(this,r)};O().prototype.elu=function(){return this.throwIfDisposed(),hi(this)};O().prototype.equal=function(r){return this.throwIfDisposed(),$r(this,r)};O().prototype.erf=function(){return this.throwIfDisposed(),bg(this)};O().prototype.euclideanNorm=function(r,t){return this.throwIfDisposed(),wg(this,r,t)};O().prototype.exp=function(){return this.throwIfDisposed(),Ge(this)};O().prototype.expandDims=function(r){return this.throwIfDisposed(),Ze(this,r)};O().prototype.expm1=function(){return this.throwIfDisposed(),Cg(this)};O().prototype.fft=function(){return this.throwIfDisposed(),Tl(this)};O().prototype.flatten=function(){return this.throwIfDisposed(),R(this,[this.size])};O().prototype.floor=function(){return this.throwIfDisposed(),gi(this)};O().prototype.floorDiv=function(r){return this.throwIfDisposed(),ap(this,r)};O().prototype.gather=function(r,t){return this.throwIfDisposed(),xi(this,r,t)};O().prototype.greaterEqual=function(r){return this.throwIfDisposed(),ho(this,r)};O().prototype.greater=function(r){return this.throwIfDisposed(),Le(this,r)};O().prototype.ifft=function(){return this.throwIfDisposed(),ma(this)};O().prototype.irfft=function(){return this.throwIfDisposed(),Ep(this)};O().prototype.isFinite=function(){return this.throwIfDisposed(),Ig(this)};O().prototype.isInf=function(){return this.throwIfDisposed(),Sg(this)};O().prototype.isNaN=function(){return this.throwIfDisposed(),vg(this)};O().prototype.leakyRelu=function(r){return this.throwIfDisposed(),yl(this,r)};O().prototype.lessEqual=function(r){return this.throwIfDisposed(),go(this,r)};O().prototype.less=function(r){return this.throwIfDisposed(),dp(this,r)};O().prototype.localResponseNormalization=function(r,t,e,o){return this.throwIfDisposed(),kg(this,r,t,e,o)};O().prototype.logSigmoid=function(){return this.throwIfDisposed(),Tg(this)};O().prototype.logSoftmax=function(r){return this.throwIfDisposed(),gp(this,r)};O().prototype.logSumExp=function(r,t){return this.throwIfDisposed(),xp(this,r,t)};O().prototype.log=function(){return this.throwIfDisposed(),ar(this)};O().prototype.log1p=function(){return this.throwIfDisposed(),bl(this)};O().prototype.logicalAnd=function(r){return this.throwIfDisposed(),Ir(this,r)};O().prototype.logicalNot=function(){return this.throwIfDisposed(),wl(this)};O().prototype.logicalOr=function(r){return this.throwIfDisposed(),yp(this,r)};O().prototype.logicalXor=function(r){return this.throwIfDisposed(),Ng(this,r)};O().prototype.matMul=function(r,t,e){return this.throwIfDisposed(),Lt(this,r,t,e)};O().prototype.maxPool=function(r,t,e,o){return this.throwIfDisposed(),Cl(this,r,t,e,o)};O().prototype.max=function(r,t){return this.throwIfDisposed(),Cr(this,r,t)};O().prototype.maximum=function(r){return this.throwIfDisposed(),so(this,r)};O().prototype.mean=function(r,t){return this.throwIfDisposed(),me(this,r,t)};O().prototype.min=function(r,t){return this.throwIfDisposed(),hu(this,r,t)};O().prototype.minimum=function(r){return this.throwIfDisposed(),yi(this,r)};O().prototype.mirrorPad=function(r,t){return this.throwIfDisposed(),Ag(this,r,t)};O().prototype.mod=function(r){return this.throwIfDisposed(),Dg(this,r)};O().prototype.mul=function(r){return this.throwIfDisposed(),F(this,r)};O().prototype.neg=function(){return this.throwIfDisposed(),Mt(this)};O().prototype.norm=function(r,t,e){return this.throwIfDisposed(),pa(this,r,t,e)};O().prototype.notEqual=function(r){return this.throwIfDisposed(),us(this,r)};O().prototype.oneHot=function(r,t=1,e=0){return this.throwIfDisposed(),lu(this,r,t,e)};O().prototype.onesLike=function(){return this.throwIfDisposed(),or(this)};O().prototype.pad=function(r,t){return this.throwIfDisposed(),Vr(this,r,t)};O().prototype.pool=function(r,t,e,o,n,s){return this.throwIfDisposed(),Rg(this,r,t,e,o,n,s)};O().prototype.pow=function(r){return this.throwIfDisposed(),Br(this,r)};O().prototype.prelu=function(r){return this.throwIfDisposed(),Sl(this,r)};O().prototype.prod=function(r,t){return this.throwIfDisposed(),Fg(this,r,t)};O().prototype.reciprocal=function(){return this.throwIfDisposed(),zg(this)};O().prototype.relu=function(){return this.throwIfDisposed(),gr(this)};O().prototype.relu6=function(){return this.throwIfDisposed(),bp(this)};O().prototype.reshapeAs=function(r){return this.throwIfDisposed(),R(this,r.shape)};O().prototype.reshape=function(r){return this.throwIfDisposed(),R(this,r)};O().prototype.resizeBilinear=function(r,t,e){return this.throwIfDisposed(),tx(this,r,t,e)};O().prototype.resizeNearestNeighbor=function(r,t,e){return this.throwIfDisposed(),ex(this,r,t,e)};O().prototype.reverse=function(r){return this.throwIfDisposed(),Je(this,r)};O().prototype.rfft=function(){return this.throwIfDisposed(),Nl(this)};O().prototype.round=function(){return this.throwIfDisposed(),wp(this)};O().prototype.rsqrt=function(){return this.throwIfDisposed(),Cp(this)};O().prototype.selu=function(){return this.throwIfDisposed(),Ip(this)};O().prototype.separableConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Sp(this,r,t,e,o,n,s)};O().prototype.sigmoid=function(){return this.throwIfDisposed(),Er(this)};O().prototype.sign=function(){return this.throwIfDisposed(),Mg(this)};O().prototype.sin=function(){return this.throwIfDisposed(),vp(this)};O().prototype.sinh=function(){return this.throwIfDisposed(),kp(this)};O().prototype.slice=function(r,t){return this.throwIfDisposed(),Nt(this,r,t)};O().prototype.softmax=function(r){return this.throwIfDisposed(),kl(this,r)};O().prototype.softplus=function(){return this.throwIfDisposed(),ls(this)};O().prototype.spaceToBatchND=function(r,t){return this.throwIfDisposed(),Il(this,r,t)};O().prototype.split=function(r,t){return this.throwIfDisposed(),tr(this,r,t)};O().prototype.sqrt=function(){return this.throwIfDisposed(),pe(this)};O().prototype.square=function(){return this.throwIfDisposed(),Ot(this)};O().prototype.squaredDifference=function(r){return this.throwIfDisposed(),$p(this,r)};O().prototype.squeeze=function(r){return this.throwIfDisposed(),xo(this,r)};O().prototype.stack=function(r,t){this.throwIfDisposed();let e=r instanceof Pt?[this,r]:[this,...r];return Ue(e,t)};O().prototype.step=function(r){return this.throwIfDisposed(),un(this,r)};O().prototype.stridedSlice=function(r,t,e,o,n,s,i,a){return this.throwIfDisposed(),Bg(this,r,t,e,o,n,s,i,a)};O().prototype.sub=function(r){return this.throwIfDisposed(),et(this,r)};O().prototype.sum=function(r,t){return this.throwIfDisposed(),it(this,r,t)};O().prototype.tan=function(){return this.throwIfDisposed(),Vg(this)};O().prototype.tanh=function(){return this.throwIfDisposed(),pi(this)};O().prototype.tile=function(r){return this.throwIfDisposed(),dr(this,r)};O().prototype.toBool=function(){return this.throwIfDisposed(),j(this,"bool")};O().prototype.toFloat=function(){return this.throwIfDisposed(),j(this,"float32")};O().prototype.toInt=function(){return this.throwIfDisposed(),j(this,"int32")};O().prototype.topk=function(r,t){return this.throwIfDisposed(),Gg(this,r,t)};O().prototype.transpose=function(r){return this.throwIfDisposed(),Rt(this,r)};O().prototype.unique=function(r){return this.throwIfDisposed(),Ug(this,r)};O().prototype.unsortedSegmentSum=function(r,t){return this.throwIfDisposed(),Dp(this,r,t)};O().prototype.unstack=function(r){return this.throwIfDisposed(),lr(this,r)};O().prototype.where=function(r,t){return this.throwIfDisposed(),ye(r,this,t)};O().prototype.zerosLike=function(){return this.throwIfDisposed(),bt(this)};var io=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,io.prototype)}},kr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,kr.prototype)}},z=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,z.prototype)}},wt=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,wt.prototype)}},Mp=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Mp.prototype)}};var Cf=class{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){let o=this.cache.keys().next().value;this.cache.delete(o)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){let o=this.cache.keys().next().value;this.cache.delete(o)}this.maxEntries=t}};function mn(r,t){if(Array.isArray(r)){let e=[];for(let o=0;o<t;o++)e=e.concat(r);return e}else{let e=new Array(t);return e.fill(r),e}}function qo(r,t){if(!r)throw new Mp(t)}function rI(r,t){let e=0;for(let o of r)o===t&&e++;return e}function ur(r){return r.length===1?r[0]:r}function se(r){return Array.isArray(r)?r:[r]}function fn(r){let e=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return e[0]!=="_"?e:"private"+e}function ha(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}var pn={};function Bp(r){if(r==null)return null;let t={};return t.className=r.getClassName(),t.config=r.getConfig(),t}function eI(r){if(!(r==null||typeof r!="object"))if(Array.isArray(r))r.forEach(t=>eI(t));else{let t=Object.keys(r);for(let e of t){let o=r[e];o!=null&&typeof o=="object"&&(!Array.isArray(o)&&o.type==="ndarray"&&typeof o.value=="number"?r[e]=o.value:eI(o))}}}function Si(r,t={},e={},o="object",n=!1){if(typeof r=="string"){let s=r,i;if(s in e)i=e[s];else if(s in pn)i=pn[s];else if(i=t[s],i==null)throw new z(`Unknown ${o}: ${r}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{let s=r;if(s.className==null||s.config==null)throw new z(`${o}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);let i=s.className,a,l;if(i in e?[a,l]=e[i]:i in pn?[a,l]=pn.className:i in t&&([a,l]=t[i]),a==null)throw new z(`Unknown ${o}: ${i}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){let u={};for(let f of Object.keys(pn))u[f]=pn[f];for(let f of Object.keys(e))u[f]=e[f];let c=s.config;c.customObjects=u;let p=Object.assign({},pn);for(let f of Object.keys(e))pn[f]=e[f];eI(s.config);let m=l(a,s.config,e,n);return pn=Object.assign({},p),m}else{let u=Object.assign({},pn);for(let p of Object.keys(e))pn[p]=e[p];let c=new a(s.config);return pn=Object.assign({},u),c}}}function rj(r,t){return r<t?-1:r>t?1:0}function If(r,t){return-1*rj(r,t)}function hn(r){if(r==null)return r;let t=[];for(let e of r)t.indexOf(e)===-1&&t.push(e);return t}function bE(r){if(r==null)throw new z(`Invalid value in obj: ${JSON.stringify(r)}`);for(let t in r)if(r.hasOwnProperty(t))return!1;return!0}function vi(r,t,e){if(e!=null&&r.indexOf(e)<0)throw new z(`${e} is not a valid ${t}.  Valid values are ${r} or null/undefined.`)}function sx(r,t,e=0,o=1/0){return qo(e>=0),qo(o>=e),Array.isArray(r)&&r.length>=e&&r.length<=o&&r.every(n=>typeof n===t)}function ze(r,t){Array.isArray(r)?(y.assert(r.length>0,()=>`${t} is unexpectedly an empty array.`),r.forEach((e,o)=>ze(e,`element ${o+1} of ${t}`))):y.assert(Number.isInteger(r)&&r>0,()=>`Expected ${t} to be a positive integer, but got ${wE(r)}.`)}function wE(r){return r===null?"null":Array.isArray(r)?"["+r.map(t=>wE(t)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function CE(r,t,e){let o=e!=null?e():y.now(),n;return(...i)=>{let a=e!=null?e():y.now();return a-o<t||(o=a,n=r(...i)),n}}function ix(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}var oj=0;function lx(){return oj++}var ax={};function Al(r=""){return r in ax||(ax[r]=0),ax[r]+=1,r+ax[r].toString()}var IE=["channelsFirst","channelsLast"],SE=["nearest","bilinear"],vE=["valid","same","causal"],kE=["max","avg"],TE=["sum","mul","concat","ave"];var Vp=new Map;function we(r){vi(IE,"DataFormat",r)}function EE(r){vi(SE,"InterpolationFormat",r)}function Gr(r){vi(vE,"PaddingMode",r)}function oI(r){vi(kE,"PoolMode",r)}var Sf=[],NE="/";function ps(r,t){Sf.push(r);try{let e=t();return Sf.pop(),e}catch(e){throw Sf.pop(),e}}function nj(){return Sf.length===0?"":Sf.join(NE)+NE}function ux(r){if(!$E(r))throw new Error("Not a valid tensor name: '"+r+"'");return nj()+r}function cx(r){if(!$E(r))throw new Error("Not a valid tensor name: '"+r+"'");Vp.has(r)||Vp.set(r,0);let t=Vp.get(r);if(Vp.set(r,Vp.get(r)+1),t>0){let e=`${r}_${t}`;return Vp.set(e,1),e}else return r}var sj=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function $E(r){return!!r.match(sj)}function AE(r){return r===parseInt(r.toString(),10)}function dn(r,t,e){t==null&&(t=0),e==null&&(e=r.length);let o=1;for(let n=t;n<e;++n)o*=r[n];return o}function Tu(r){if(r.length===0)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o<t&&(t=o)}return t}function ms(r){if(r.length===0)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o>t&&(t=o)}return t}function Ar(r,t){if(t<r)throw new z(`end (${t}) < begin (${r}) is forbidden.`);let e=[];for(let o=r;o<t;++o)e.push(o);return e}var nI;function Ke(){return nI==null&&(nI=kk().epsilon()),nI}function Ur(){return"channelsLast"}function Nu(r,t){return j(r,t)}function ga(r,t=-1){let e=r.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),R(r,e)}function DE(r,t){return M(()=>{if(r.shape.length!==2)throw new z(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);let e=ga(r,1);return mx(e,[1,t,1])})}function RE(r){let t=[dn(r.shape)];return R(r,t)}function FE(r){if(r.rank<=1)throw new z(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let t=[r.shape[0],dn(r.shape,1)];return R(r,t)}function da(r,t,e){return M(()=>{switch(r.rank){case 1:return Tp(r,t,e);case 2:return yf(r,[t,0],[e,r.shape[1]]);case 3:return Np(r,[t,0,0],[e,r.shape[1],r.shape[2]]);case 4:return wu(r,[t,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Nt(r,[t,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Nt(r,[t,0,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new z(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function sI(r,t,e){return M(()=>{switch(r.rank){case 1:return Tp(r,t,e);case 2:return yf(r,[0,t],[r.shape[0],e]);case 3:return Np(r,[0,0,t],[r.shape[0],r.shape[1],e]);case 4:return wu(r,[0,0,0,t],[r.shape[0],r.shape[1],r.shape[2],e]);default:throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function vf(r,t,e,o){return M(()=>{switch(r.rank){case 1:return Tp(r,t,e);case 2:switch(o){case 1:return da(r,t,e);case 2:return sI(r,t,e);default:throw new z(`The axis is not within the rank of the tensor ${o}`)}case 3:switch(o){case 1:return da(r,t,e);case 2:return Np(r,[0,t,0],[r.shape[0],e,r.shape[2]]);case 3:return sI(r,t,e);default:throw new z(`The axis is not within the rank of the tensor ${o}`)}case 4:switch(o){case 1:return da(r,t,e);case 2:return wu(r,[0,t,0,0],[r.shape[0],e,r.shape[2],r.shape[3]]);case 3:return wu(r,[0,0,t,0],[r.shape[0],r.shape[1],e,r.shape[3]]);case 4:return sI(r,t,e);default:throw new z(`The axis is not within the rank of the tensor ${o}`)}default:throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Gp(r,t=-1){let e;return t<0&&(e=r[0].rank,e!==0?t=e:t=0),t===r[0].rank&&(t=-1),jt(r,t)}function aI(r,t){switch(r.rank){case 1:return lg([r,t]);case 2:return ug([r,t],0);case 3:return cg([r,t],0);case 4:return pg([r,t],0);default:throw new z(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function mx(r,t){if(Array.isArray(t)||(t=[t]),r.rank!==t.length)throw new z(`The length of input n (${t.length}) does not match the number of dimensions in input x (${r.rank})`);return dr(r,t)}function Up(r,t=0,e=1,o,n){return bu(r,t,e,o,n)}function gn(r,t,e,o){if(r.rank<2||t.rank<2)throw new wt(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${t.shape}`);if(t.rank>=3){let n=r.shape.slice(-1)[0],s=t.shape.slice(-2)[0];if(n!==s)throw new wt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${t.shape}`)}if(r.rank===2&&t.rank===2)return El.matMul({a:r,b:t,transposeA:!1,transposeB:!1,bias:o?iI(r.rank,o,Ur()):null,activation:e});{let n=r.shape.slice(),s=n.pop();r=R(r,[-1,s]);let i=t.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:t.rank},(h,d)=>d===0?t.rank-2:d<=t.rank-2?d-1:d);t=R(Rt(t,c),[l,-1]);let p=[...n,...u],m=!1,f=!1;return R(El.matMul({a:r,b:t,transposeA:m,transposeB:f,bias:o?iI(r.rank,o,Ur()):null,activation:e}),p)}}function fx(r,t,e){return M(()=>(Array.isArray(t)?t=De(t,"int32"):t=j(t,"int32"),xi(r,t,e)))}function Eu(r){return F(r,r)}function iI(r,t,e){let o=t.shape;if(t.rank!==1&&t.rank!==r)throw new z(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${r}`);if(r===5){if(e==="channelsFirst")return o.length===1?R(t,[1,o[0],1,1,1]):R(t,[1,o[3],o[0],o[1],o[2]]);if(e==="channelsLast")return o.length===1?R(t,[1,1,1,1,o[0]]):R(t,[1].concat(o))}else if(r===4){if(e==="channelsFirst")return o.length===1?R(t,[1,o[0],1,1]):R(t,[1,o[2],o[0],o[1]]);if(e==="channelsLast")return o.length===1?R(t,[1,1,1,o[0]]):R(t,[1].concat(o))}else if(r===3){if(e==="channelsFirst")return o.length===1?R(t,[1,o[0],1]):R(t,[1,o[1],o[0]]);if(e==="channelsLast")return o.length===1?R(t,[1,1,o[0]]):R(t,[1].concat(o))}else if(r<3)return t;throw new z(`Unsupported input rank by biasAdd: ${t.rank}`)}function Wr(r,t,e){return M(()=>(e==null&&(e=Ur()),we(e),K(r,iI(r.rank,t,e))))}function _E(r,t=1){if(t!==1)throw new wt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return hi(r)}function OE(r){return M(()=>nt(r,K(de(r),1)))}function hx(r,t,e,o){return M(()=>U0(r,t,e,o))}function PE(r){return M(()=>{let t=K(.5,F(.2,r));return ir(t,0,1)})}function Dl(r,t,e=!1){return e?r():t()}var LE=["fanIn","fanOut","fanAvg"],zE=["normal","uniform","truncatedNormal"];function ij(r){vi(LE,"FanMode",r)}function aj(r){vi(zE,"Distribution",r)}var qr=class extends X.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}},kf=class extends qr{apply(t,e){return ee(t,e)}};kf.className="Zeros";X.registerClass(kf);var $u=class extends qr{apply(t,e){return Qe(t,e)}};$u.className="Ones";X.registerClass($u);var Tf=class extends qr{constructor(t){if(super(),typeof t!="object")throw new z(`Expected argument of type ConstantConfig but got ${t}`);if(t.value===void 0)throw new z(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return M(()=>F(st(this.value),Qe(t,e)))}getConfig(){return{value:this.value}}};Tf.className="Constant";X.registerClass(Tf);var Nf=class extends qr{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return bi(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}};Nf.className="RandomUniform";X.registerClass(Nf);var Ef=class extends qr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new wt(`randomNormal does not support dType ${e}.`);return Up(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Ef.className="RandomNormal";X.registerClass(Ef);var $f=class extends qr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new wt(`truncatedNormal does not support dType ${e}.`);return Ap(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};$f.className="TruncatedNormal";X.registerClass($f);var Af=class extends qr{constructor(t){super(),this.gain=t.gain!=null?t.gain:1}apply(t,e){return M(()=>{if(t.length!==2||t[0]!==t[1])throw new z("Identity matrix initializer can only be used for 2D square matrices.");return F(this.gain,du(t[0]))})}getConfig(){return{gain:this.gain}}};Af.className="Identity";X.registerClass(Af);function lj(r,t="channelsLast"){let e,o;if(we(t),r.length===2)e=r[0],o=r[1];else if([3,4,5].indexOf(r.length)!==-1){if(t==="channelsFirst"){let n=dn(r,2);e=r[1]*n,o=r[0]*n}else if(t==="channelsLast"){let n=dn(r,0,r.length-2);e=r[r.length-2]*n,o=r[r.length-1]*n}}else{let n=dn(r);e=Math.sqrt(n),o=Math.sqrt(n)}return[e,o]}var Dr=class extends qr{constructor(t){if(super(),t.scale<0)throw new z(`scale must be a positive float. Got: ${t.scale}`);this.scale=t.scale==null?1:t.scale,this.mode=t.mode==null?"fanIn":t.mode,ij(this.mode),this.distribution=t.distribution==null?"normal":t.distribution,aj(this.distribution),this.seed=t.seed}apply(t,e){let o=lj(t),n=o[0],s=o[1],i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,n):this.mode==="fanOut"?i/=Math.max(1,s):i/=Math.max(1,(n+s)/2),this.distribution==="normal"){let a=Math.sqrt(i);if(e=e||"float32",e!=="float32"&&e!=="int32")throw new wt(`${this.getClassName()} does not support dType ${e}.`);return Ap(t,0,a,e,this.seed)}else{let a=Math.sqrt(3*i);return bi(t,-a,a,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}};Dr.className="VarianceScaling";X.registerClass(Dr);var Wp=class extends Dr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return Dr.className}};Wp.className="GlorotUniform";X.registerClass(Wp);var Hp=class extends Dr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return Dr.className}};Hp.className="GlorotNormal";X.registerClass(Hp);var qp=class extends Dr{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return Dr.className}};qp.className="HeNormal";X.registerClass(qp);var Kp=class extends Dr{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return Dr.className}};Kp.className="HeUniform";X.registerClass(Kp);var jp=class extends Dr{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return Dr.className}};jp.className="LeCunNormal";X.registerClass(jp);var Xp=class extends Dr{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return Dr.className}};Xp.className="LeCunNormal";X.registerClass(Xp);var Df=class extends qr{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=t.gain==null?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,this.seed!=null)throw new wt("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return M(()=>{if(t.length<2)throw new wt("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);let o=t[0]>t[1]?[t[1],t[0]]:t,n=Up(o,0,1,"float32"),s=q0.gramSchmidt(n);return t[0]>t[1]&&(s=Rt(s)),F(this.gain,s)})}getConfig(){return{gain:this.gain,seed:this.seed}}};Df.className="Orthogonal";X.registerClass(Df);var ME={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function BE(r,t={}){return Si(r,X.SerializationMap.getMap().classNameMap,t,"initializer")}function fe(r){return Bp(r)}function re(r){if(typeof r=="string"){let t=r in ME?ME[r]:r;if(t==="GlorotNormal")return new Hp;if(t==="GlorotUniform")return new Wp;if(t==="HeNormal")return new qp;if(t==="HeUniform")return new Kp;if(t==="LeCunNormal")return new jp;if(t==="LeCunUniform")return new Xp;{let e={};return e.className=t,e.config={},BE(e)}}else return r instanceof qr?r:BE(r)}function dx(r){return Array.isArray(r)&&Array.isArray(r[0])}function Yp(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function Et(r){let t;if(Array.isArray(r)){if(r.length!==1)throw new z(`Expected Tensor length to be 1; got ${r.length}`);t=r[0]}else t=r;return t}function Gt(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return r=r,r[0];throw new z(`Expected exactly 1 Shape; got ${r.length}`)}else return r}function Zp(r){let t=0;for(let e of r)e.shape.length===0?t+=1:t+=e.shape.reduce((o,n)=>o*n);return t}var GE="Variable",Rf=class{constructor(t,e="float32",o=GE,n=!0,s=null){this.dtype=e??"float32",this.shape=t.shape,this.id=lx(),o=o??GE,this.originalName=ux(o),this.name=cx(this.originalName),this.trainable_=n,this.constraint=s,this.val=Wg(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),cj(this.val,t),this.val.id!==t.id&&(this.val.assign(t),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}};function cj(r,t){if(r.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(r.shape)+" vs. "+JSON.stringify(t.shape))}function Ff(r){return r.map(t=>t.read())}function Qp(r){r.forEach(t=>{t[0].write(t[1])})}var ie=class{constructor(t){this.dtype=t.dtype,this.shape=t.shape,t.shape!=null?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}},Rr=class{constructor(t,e,o,n,s,i,a){this.dtype=t,this.shape=e,this.sourceLayer=o,this.inputs=n,this.callArgs=s,this.outputTensorIndex=a,this.id=lx(),i!=null&&(this.originalName=ux(i),this.name=cx(this.originalName)),this.rank=e.length}},pj=0,xa=class{constructor(t,e){this.callArgs=e,this.id=pj++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(let o of t.inboundLayers)o?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){let t=[];for(let e of this.inboundLayers)e!=null?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},mj=0,Ft=class extends X.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=mj++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){let o=this.getClassName();e=fn(o)+"_"+Al(o)}if(this.name=e,this.trainable_=t.trainable==null?!0:t.trainable,t.inputShape!=null||t.batchInputShape!=null){let o;if(t.batchInputShape!=null)o=t.batchInputShape;else if(t.inputShape!=null){let s=null;t.batchSize!=null&&(s=t.batchSize),o=[s].concat(t.inputShape)}this.batchInputShape=o;let n=t.dtype;n==null&&(n=t.inputDType),n==null&&(n="float32"),this.dtype=n}t.weights!=null?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(this.inboundNodes.length===0)throw new kr(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new z(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return ur(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return ur(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new io(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new io(`Layer ${this.name} is not connected, no input to return.`);return ur(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new io(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new io(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return ur(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=se(t),this.inputSpec==null||this.inputSpec.length===0)return;let e=se(this.inputSpec);if(t.length!==e.length)throw new z(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let o=0;o<t.length;o++){let n=t[o],s=e[o];if(s==null)continue;let i=n.rank;if(s.ndim!=null&&i!==s.ndim)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(s.maxNDim!=null&&i>s.maxNDim)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(s.minNDim!=null&&i<s.minNDim)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(s.dtype!=null&&n.dtype!==s.dtype)throw new z(`Input ${o} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${n.dtype}.`);if(s.axes){let a=n.shape;for(let l in s.axes){let u=Number(l),c=s.axes[l],p=u>=0?a[u]:a[a.length+u];if(c!=null&&[c,null].indexOf(p)===-1)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(s.shape!=null)for(let a=0;a<s.shape.length;++a){let l=s.shape[a],u=n.shape[a];if(l!=null&&u!=null&&l!==u)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${n.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){this._callHook!=null&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();let o=se(t),n=!0;for(let i of o)if(!(i instanceof Rr)){n=!1;break}let s=!0;for(let i of o)if(i instanceof Rr){s=!1;break}if(n===s)throw new z("Arguments to apply() must be all SymbolicTensors or all Tensors");return ps(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);let i=[];for(let a of se(t))i.push(a.shape);this.build(ur(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let i=this.call(t,e),a=se(i),l=[];for(let u of a)o.indexOf(u)!==-1&&(u=u.clone()),l.push(u);if(i=ur(l),this.activityRegularizer!=null)throw new wt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{let i=fj(t),a=this.computeOutputShape(i),l,u=hj(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?i[0]:i),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((c,p)=>new Rr(u,c,this,se(t),e,this.name,p)):l=new Rr(u,a,this,se(t),e,this.name),this.addInboundNode(t,l,null,null,i,a,e),this._refCount++,this.activityRegularizer!=null)throw new wt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(this.batchInputShape!=null)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((o,n)=>{o!=null&&t[n]!=null&&t[n]!==o&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new io(`The layer ${this.name} has never been called and thus has no defined output shape.`);let t=[];for(let e of this.inboundNodes){let o=JSON.stringify(e.outputShapes);t.indexOf(o)===-1&&t.push(o)}if(t.length===1){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&e.length===1?e[0]:e}else throw new io(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new kr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Zp(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Ff(t?this.trainableWeights:this.weights)}setWeights(t){M(()=>{let e=this.weights;if(e.length!==t.length)throw new z(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(e.length===0)return;let o=[],n=Ff(e);for(let s=0;s<n.length;++s){let i=n[s],a=e[s],l=t[s];if(!y.arraysEqual(i.shape,l.shape))throw new z(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);o.push([a,l])}Qp(o)})}addWeight(t,e,o,n,s,i,a,l){if(this._addedWeightNames.indexOf(t)!==-1)throw new z(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),o==null&&(o="float32"),this.fastWeightInitDuringBuild&&(n=l!=null?l():re("zeros"));let u=n.apply(e,o),c=new Rf(u,o,t,i,a);return u.dispose(),s!=null&&this.addLoss(()=>s.apply(c.read())),i==null&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){t==null||Array.isArray(t)&&t.length===0||(t=se(t),this._losses!==void 0&&this._losses!==null&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(e!=null)if(Array.isArray(e))e.forEach(o=>{if(o!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return e}addInboundNode(t,e,o,n,s,i,a=null){let l=se(t);e=se(e),o=se(o),n=se(n),s=Yp(s),i=Yp(i);let u=[],c=[],p=[];for(let m of l)u.push(m.sourceLayer),c.push(m.nodeIndex),p.push(m.tensorIndex);new xa({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:p,inputTensors:l,outputTensors:e,inputMasks:o,outputMasks:n,inputShapes:s,outputShapes:i},a);for(let m=0;m<e.length;m++)e[m].sourceLayer=this,e[m].nodeIndex=this.inboundNodes.length-1,e[m].tensorIndex=m}getConfig(){let t={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(t.batchInputShape=this.batchInputShape),this.dtype!=null&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return--this._refCount===0&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}};function fj(r){r=se(r);let t=[];for(let e of r)t.push(e.shape);return ur(t)}function hj(r){return"float32"}function lI(r,t,e){if((t==null||e!=null&&e>0)&&(t=r.sourceLayer,e=r.nodeIndex),t.inboundNodes.length===0)return[r];{let o=t.inboundNodes[e];if(o.inboundLayers.length===0)return o.inputTensors;{let n=[];for(let s=0;s<o.inboundLayers.length;s++){let i=o.inputTensors[s],a=o.inboundLayers[s],l=o.nodeIndices[s],u=lI(i,a,l);for(let c of u)n.indexOf(c)===-1&&n.push(c)}return n}}}var ki=class extends Ft{constructor(t){if(super({dtype:t.dtype,name:t.name!=null?t.name:Al("input").toString()}),t.batchSize==null&&(t.batchSize=null),t.sparse==null&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,t.inputShape!=null&&t.batchInputShape!=null)throw new z("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(e==null){if(t.inputShape==null)throw new z("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(t.batchSize!=null)throw new z("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let o=t.dtype||"float32";this.batchInputShape=e,this.dtype=o,this.inputSpec=[{shape:e}];let n=new Rr(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new xa({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new z(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}};ki.className="InputLayer";X.registerClass(ki);function uI(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new z("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=r.batchShape;r.shape!=null&&t==null&&(t=[null].concat(r.shape));let e=r.dtype;return e==null&&(e="float32"),new ki({batchInputShape:t,name:r.name,dtype:e,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}function dj(r,t){if(r.dtype==null||r.dtype===t.dtype)return t;try{return j(t,r.dtype)}catch{throw new z(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`)}}var xn=class{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof xn)for(let e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(t==null)return;for(let e of t)this.add(e.key,e.value)}}add(t,e,o){if(this.id2Value[t.id]==null)this.id2Value[t.id]=dj(t,e),this.name2Id[t.name]=t.id,o!=null&&(this.id2Mask[t.id]=o);else throw new z(`Duplicate key: name=${t.name}, id=${t.id}`);return this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return this.id2Value[t.id]!=null}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Rr){if(this.id2Value[t.id]==null)throw new z(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}else{let e=this.name2Id[t];if(e==null)throw new z(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Rr){if(this.id2Value[t.id]==null)throw new z(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}else{let e=this.name2Id[t];if(e==null)throw new z(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){this.id2Mask!=null&&St(this.id2Mask)}},gx=new Cf,xx=new Cf;function WE(r){gx?.setMaxEntries(r),xx?.setMaxEntries(r)}function Au(r,t,e,o){let n=e==null?!1:e.training,s=Array.isArray(r),i=s?r:[r],a=i.map(h=>h.name),l=[],u=t.names();for(let h of a)u.indexOf(h)!==-1?l.push(t.getValue(h)):l.push(null);o!=null&&(o.maxNumTensors=-1/0,o.minNumTensors=1/0);let c=a.join(",")+"|"+t.names().sort().join(","),p=gx.get(c),m;if(p==null){let h=gj(i,t);p=h.sorted,m=h.recipientCounts,gx.put(c,p),xx.put(c,m)}m={},n||Object.assign(m,xx.get(c));let f=new xn(t);for(let h=0;h<p.length;++h){if(o!=null){let _=ff().numTensors;_>o.maxNumTensors&&(o.maxNumTensors=_),_<o.minNumTensors&&(o.minNumTensors=_)}let d=p[h],g=d.sourceLayer;if(g instanceof ki)continue;let x=[],b=[],w=[],C=!1;for(let _ of d.inputs){let P=f.getValue(_),B=f.getMask(_);x.push(P),b.push(B),B!=null&&(C=!0),n||(m[_.name]--,m[_.name]===0&&!t.hasKey(_)&&a.indexOf(_.name)===-1&&!P.isDisposed&&_.sourceLayer.stateful!==!0&&w.push(P))}C&&(e=e||{},e.mask=b[0]);let k=se(g.apply(x,e)),E=null;g.supportsMasking&&(E=g.computeMask(x,b));let A=yj(d),D=Array.isArray(A)?A:[A];for(let _=0;_<D.length;++_){f.hasKey(D[_])||f.add(D[_],k[_],Array.isArray(E)?E[0]:E);let P=a.indexOf(D[_].name);P!==-1&&(l[P]=k[_])}n||St(w)}return f.disposeMasks(),s?l:l[0]}function gj(r,t){y.assert(r!=null&&r.length>0,()=>"Expected at least one fetch, got none");let e=[],o={};if(r.length===1){let n=UE(r[0],t);e=n.sorted,o=n.recipientMap}else{let n=new Set;for(let s of r){let{sorted:i,recipientMap:a}=UE(s,t);for(let l of i)n.has(l.name)||(e.push(l),n.add(l.name));for(let l in a)o[l]==null&&(o[l]=new Set),a[l].forEach(u=>o[l].add(u))}}return{sorted:e,recipientCounts:xj(o)}}function xj(r){let t={};for(let e in r)t[e]=r[e].size;return t}function UE(r,t){let e=new Set,o=[],n={};for(let a of t.names())e.add(a);let s=[],i=[];for(s.push(r);s.length>0;){let a=s[s.length-1];if(e.has(a.name)){s.pop();continue}let l=i[i.length-1]===s.length-1;if(a.inputs.length===0||l)s.pop(),o.push(a),e.add(a.name),l&&i.pop();else{i.push(s.length-1);for(let u of a.inputs)n[u.name]==null&&(n[u.name]=new Set),n[u.name].add(a.name),!e.has(u.name)&&s.push(u)}}return{sorted:o,recipientMap:n}}function yj(r){let t;if(r.sourceLayer.inboundNodes.length===1)t=r.sourceLayer.output;else{let e=null;for(let o=0;o<r.sourceLayer.inboundNodes.length;++o)for(let n of r.sourceLayer.inboundNodes[o].outputTensors)if(n.id===r.id){e=o;break}t=r.sourceLayer.getOutputAt(e)}return t}var bj=L();bj.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,WE);function cI(r,t){return M(()=>pe(it(F(r,r),t,!0)))}var Du=class extends X.Serializable{getConfig(){return{}}},_f=class extends Du{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>{let e=cI(t,this.axis),o=ir(e,0,this.maxValue);return F(t,nt(o,K(Ke(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}};_f.className="MaxNorm";X.registerClass(_f);var Of=class extends Du{constructor(t){super(),this.defaultAxis=0,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>nt(t,K(Ke(),cI(t,this.axis))))}getConfig(){return{axis:this.axis}}};Of.className="UnitNorm";X.registerClass(Of);var Pf=class extends Du{apply(t){return gr(t)}};Pf.className="NonNeg";X.registerClass(Pf);var Lf=class extends Du{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=t.minValue!=null?t.minValue:this.defaultMinValue,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.rate=t.rate!=null?t.rate:this.defaultRate,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>{let e=cI(t,this.axis),o=K(F(this.rate,ir(e,this.minValue,this.maxValue)),F(1-this.rate,e));return F(t,nt(o,K(Ke(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}};Lf.className="MinMaxNorm";X.registerClass(Lf);var HE={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function ve(r){return Bp(r)}function qE(r,t={}){return Si(r,X.SerializationMap.getMap().classNameMap,t,"constraint")}function ke(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in HE?HE[r]:r,config:{}};return qE(e)}else return r instanceof Du?r:qE(r)}async function ya(r){if(r==null)return;let t=[],e=[],o=[];for(let n in r){let s=r[n];if(typeof s!="number"){let i=s;t.push(i.data()),e.push(n),o.push(i)}}if(t.length>0){let n=await Promise.all(t);for(let s=0;s<n.length;++s)r[e[s]]=n[s][0];St(o)}}function yx(r){if(r!=null)for(let t in r){let e=r[t];typeof e!="number"&&e.dispose()}}var KE;(function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"})(KE||(KE={}));var Ij=125,Rl=class{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}},bx=class{constructor(t,e=10){t==null&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(let e of this.callbacks)e.setParams(t)}setModel(t){for(let e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochBegin(t,e)}async onEpochEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochEnd(t,e)}async onBatchBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchBegin(t,e)}async onBatchEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchEnd(t,e)}async onTrainBegin(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainEnd(t)}},pI=class extends Rl{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){e==null&&(e={});let o=e.size==null?0:e.size;this.seen+=o;for(let n in e){let s=e[n];if(typeof s=="number")this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+s*o;else{let i;n in this.totals?i=this.totals[n]:this.totals[n]=0;let a=M(()=>K(this.totals[n],F(s,o)));this.totals[n]=a,i?.dispose()}}}async onEpochEnd(t,e){if(e!=null)for(let o of this.params.metrics)this.totals[o]!=null&&(typeof this.totals[o]=="number"?e[o]=this.totals[o]/this.seen:M(()=>{let n=F(nt(1,this.seen),this.totals[o]);e[o]=n,this.totals[o].dispose(),be(e[o])}))}},wx=class extends Rl{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){e==null&&(e={}),this.epoch.push(t);for(let o in e)this.history[o]==null&&(this.history[o]=[]),this.history[o].push(e[o])}async syncData(){let t=[],e=[],o=[];for(let s in this.history){let i=this.history[s];for(let a=0;a<i.length;++a)if(typeof i[a]!="number"){let l=i[a];t.push(l.data()),e.push(s),o.push(a)}}let n=await Promise.all(t);for(let s=0;s<n.length;++s)this.history[e[s]][o[s]].dispose(),this.history[e[s]][o[s]]=n[s][0]}},Cx=class extends Rl{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||wf,this.yieldEvery=e||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=Ij),this.yieldEvery==="never"&&t.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");y.isNumber(this.yieldEvery)&&(this.maybeWait=CE(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,o){let n=[];this.yield!=null&&(await ya(o),n.push(this.yield(t,e,o))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(t,e){this.currentEpoch=t,this.epochBegin!=null&&(await ya(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){let o=[];this.epochEnd!=null&&(await ya(e),o.push(this.epochEnd(t,e))),this.yieldEvery==="epoch"&&o.push(this.nextFrameFunc()),await Promise.all(o)}async onBatchBegin(t,e){this.batchBegin!=null&&(await ya(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){let o=[];this.batchEnd!=null&&(await ya(e),o.push(this.batchEnd(t,e))),this.yieldEvery==="batch"?o.push(this.nextFrameFunc()):y.isNumber(this.yieldEvery)&&o.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(o)}async onTrainBegin(t){this.trainBegin!=null&&(await ya(t),await this.trainBegin(t))}async onTrainEnd(t){this.trainEnd!=null&&(await ya(t),await this.trainEnd(t))}};function Ix(r,t){return r==null&&(r={}),r instanceof Rl?[r]:Array.isArray(r)&&r[0]instanceof Rl?r:se(r).map(o=>new Cx(o,t))}var ao=class{constructor(){}static registerCallbackConstructor(t,e){y.assert(t>=0&&Number.isInteger(t),()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`),ao.checkForDuplicate(e),ao.constructors[t]==null&&(ao.constructors[t]=[]),ao.constructors[t].push(e)}static checkForDuplicate(t){for(let e in ao.constructors)ao.constructors[+e].forEach(n=>{if(n===t)throw new z("Duplicate callback constructor.")})}static clear(){ao.constructors={}}static createCallbacks(t){let e=[];for(let o in ao.constructors){let n=+o;t>=n&&e.push(...ao.constructors[n])}return e.map(o=>new o)}};ao.constructors={};function Sx(r,t,e,o,n,s,i,a,l){let u=new wx,c=[new pI,...ao.createCallbacks(t)];r!=null&&c.push(...r),c.push(u);let p=new bx(c);return p.setParams({epochs:e,initialEpoch:o,samples:n,steps:s,batchSize:i,verbose:t,doValidation:a,metrics:l}),{callbackList:p,history:u}}function yo(r,t={},e=!1){return Si(r,X.SerializationMap.getMap().classNameMap,t,"layer",e)}function zf(r,t){return M(()=>{r.dtype!=="float32"&&(r=j(r,"float32"));let e=it(Eu(r),t,!0),o=di(e.shape,Ke()),n=pe(so(e,o));return nt(r,n)})}function Ru(r,t){return M(()=>me(Eu(et(t,r)),-1))}function Bf(r,t){return M(()=>me(de(et(t,r)),-1))}function Vf(r,t){return M(()=>{let e=et(r,t),o=ir(de(r),Ke(),Number.MAX_VALUE),n=de(nt(e,o));return F(100,me(n,-1))})}function Sj(r,t){return M(()=>{let e=ir(t,Ke(),Number.MAX_VALUE),o=ar(K(1,e)),n=ir(r,Ke(),Number.MAX_VALUE),s=ar(K(1,n));return me(Eu(et(o,s)),-1)})}function vj(r,t){return M(()=>{let e=so(0,et(1,F(r,t)));return me(Eu(e),-1)})}function kj(r,t){return M(()=>{let e=so(0,et(1,F(r,t)));return me(e,-1)})}function Tj(r,t){return M(()=>{let e=it(F(r,t),-1),o=Cr(F(et(1,r),t),-1);return so(0,K(1,et(o,e)))})}function Nj(r,t){return M(()=>{let e=Math.log(2),o=et(t,r),n=et(K(o,ls(F(-2,o))),e);return me(n,-1)})}function Fu(r,t,e=!1){return M(()=>{if(e)t=kl(t);else{let o=it(t,t.shape.length-1,!0);t=nt(t,o)}return t=ir(t,Ke(),1-Ke()),Mt(it(F(j(r,"float32"),ar(t)),t.shape.length-1))})}function Jp(r,t,e=!1){return M(()=>{let o=j(gi(RE(r)),"int32");t=ir(t,Ke(),1-Ke());let n=t.shape,s=R(lu(o,n[n.length-1]),n);return Fu(s,t,e)})}function Ej(r,t){if(!y.arraysEqual(r.shape,t.shape))throw new z(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(t.shape)}`);return M(()=>{let e=gr(t),o=Mt(de(t));return K(et(e,F(t,r)),bl(Ge(o)))})}function tm(r,t){return M(()=>{let e;return e=ir(t,Ke(),1-Ke()),e=ar(nt(e,et(1,e))),me(Ej(r,e),-1)})}function $j(r,t){return M(()=>{let e=ir(r,Ke(),1),o=ir(t,Ke(),1);return it(F(r,ar(nt(e,o))),-1)})}function Aj(r,t){return M(()=>{let e=ar(K(Ke(),t));return me(et(t,F(r,e)),-1)})}function vx(r,t){return M(()=>{let e=zf(r,-1),o=zf(t,-1),n=F(e,o);return Mt(it(n,-1))})}var Mf={meanSquaredError:Ru,meanAbsoluteError:Bf,meanAbsolutePercentageError:Vf,meanSquaredLogarithmicError:Sj,squaredHinge:vj,hinge:kj,categoricalHinge:Tj,logcosh:Nj,categoricalCrossentropy:Fu,sparseCategoricalCrossentropy:Jp,binaryCrossentropy:tm,kullbackLeiblerDivergence:$j,poisson:Aj,cosineProximity:vx};function kx(r){if(typeof r=="string"){if(r in Mf)return Mf[r];let t=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new z(t)}else return r}function Nx(r,t){return M(()=>{let e=F(.5,or(t)),o=Nu(Le(t,e),r.dtype);return me($r(r,o),-1)})}function Ex(r,t){return M(()=>Nu($r(ci(r,-1),ci(t,-1)),"float32"))}function Dj(r,t){return M(()=>j(it(Ir($r(r,1),$r(t,1))),"float32"))}function Rj(r,t){return M(()=>j(it(Ir($r(r,0),$r(t,1))),"float32"))}function XE(r,t){return M(()=>{let e=Dj(r,t),o=Rj(r,t),n=K(e,o);return j(ye(Le(n,0),nt(e,n),0),"float32")})}function mI(r,t){return tm(r,t)}function fI(r,t){return r.rank===t.rank&&(r=xo(r,[r.rank-1])),t=ci(t,-1),t.dtype!==r.dtype&&(t=j(t,r.dtype)),j($r(r,t),"float32")}var Fj=Ru,_j=Ru,Oj=Bf,Pj=Bf,Lj=Vf,zj=Vf,$x=Fu,Mj=vx,hI=Jp,Tx={binaryAccuracy:Nx,categoricalAccuracy:Ex,precision:XE,categoricalCrossentropy:$x,sparseCategoricalCrossentropy:hI,mse:Fj,MSE:_j,mae:Oj,MAE:Pj,mape:Lj,MAPE:zj,cosine:Mj};function YE(r){if(typeof r=="string"&&r in Tx)return Tx[r];if(typeof r!="string"&&r!=null)return r;throw new z(`Unknown metric ${r}`)}function Gf(r){if(qo(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let t;for(let e of Object.keys(Mf))if(Mf[e]===r){t=e;break}if(t!==void 0)return t;for(let e of Object.keys(Tx))if(Tx[e]===r){t=e;break}return t!==void 0?t:r.name}}function QE(r){let t={Adagrad:()=>ku.adagrad(.01),Adadelta:()=>ku.adadelta(1,.95,Ke()),Adam:()=>ku.adam(.001,.9,.999,Ke()),Adamax:()=>ku.adamax(.002,.9,.999,Ke(),0),RMSProp:()=>ku.rmsprop(.001,.9,0,Ke()),SGD:()=>ku.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,r in t)return t[r]();throw new z(`Unknown Optimizer ${r}`)}function gI(r,t,e=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!dI(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){let o=JSON.stringify(r);o.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${o.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${1048576}.`)}}function dI(r){if(r===null)return!0;if(typeof r=="object")if(Object.getPrototypeOf(r)===Object.prototype){let t=Object.keys(r);for(let e of t)if(typeof e!="string"||!dI(r[e]))return!1;return!0}else if(Array.isArray(r)){for(let t of r)if(!dI(t))return!1;return!0}else return!1;else{let t=typeof r;return t==="string"||t==="number"||t==="boolean"}}function JE(r,t,e,o=console.log){let n=Gj(r),s=["Layer (type)","Input Shape","Output shape","Param #"];n?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c)));let i;if(!n){s.push("Receives inputs"),i=[];for(let c in r.nodesByDepth)i.push(...r.nodesByDepth[c])}o("_".repeat(t)),Ax(s,e,o),o("=".repeat(t));let a=r.layers;for(let c=0;c<a.length;++c)n?Uj(a[c],e,o):Wj(a[c],e,i,o),o((c===a.length-1?"=":"_").repeat(t));r.checkTrainableWeightsConsistency();let l=Vj(r),u=Zp(r.nonTrainableWeights);o(`Total params: ${l+u}`),o(`Trainable params: ${l}`),o(`Non-trainable params: ${u}`),o("_".repeat(t))}function Vj(r){let t;return r.collectedTrainableWeights!=null?t=Zp(r.collectedTrainableWeights):t=Zp(r.trainableWeights),t}function Gj(r){let t=!0,e=[],o=[];for(let n in r.nodesByDepth)e.push(r.nodesByDepth[n]);for(let n of e){if(n.length>1||n.length===1&&n[0].inboundLayers.length>1){t=!1;break}o.push(...n)}if(t)for(let n of r.layers){let s=!1;for(let i of n.inboundNodes)if(o.indexOf(i)!==-1)if(s){t=!1;break}else s=!0;if(!t)break}return t}function Ax(r,t,e=console.log){let o="";for(let n=0;n<r.length;++n)n>0&&(o=o.slice(0,o.length-1)+" "),o+=r[n],o=o.slice(0,t[n]),o+=" ".repeat(t[n]-o.length);e(o)}function Uj(r,t,e){let o,n;try{n=r.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{n="multiple"}try{o=JSON.stringify(r.outputShape)}catch{o="multiple"}let s=r.name,i=r.getClassName(),a=[`${s} (${i})`,n,o,r.countParams().toString()];Ax(a,t,e)}function Wj(r,t,e,o){let n,s;try{s=r.inboundNodes.map(p=>JSON.stringify(p.inputShapes)).join(",")}catch{s="multiple"}try{n=JSON.stringify(r.outputShape)}catch{n="multiple"}let i=[];for(let p of r.inboundNodes)if(!(e!=null&&e.length>0&&e.indexOf(p)===-1))for(let m=0;m<p.inboundLayers.length;++m){let f=p.inboundLayers[m].name,h=p.nodeIndices[m],d=p.tensorIndices[m];i.push(`${f}[${h}][${d}]`)}let a=r.name,l=r.getClassName(),u=i.length===0?"":i[0],c=[`${a} (${l})`,s,n,r.countParams().toString(),u];Ax(c,t,o);for(let p=1;p<i.length;++p)Ax(["","","","",i[p]],t,o)}function t$(r,t,e){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&t===0&&typeof e=="string"}function Uf(r,t){if(r===null)return null;if(typeof r=="string")return ha(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];t$(t,n,s)?e.push(s):e.push(Uf(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o];if(o==="name"&&typeof n=="string")e[o]=n;else{let s=ha(o);e[s]=Uf(n,s)}}return e}}function Dx(r,t){if(r==null)return null;if(typeof r=="string")return fn(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];t$(t,n,s)?e.push(s):e.push(Dx(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o],s=fn(o);(o==="name"||o==="className")&&typeof n=="string"?e[s]=n:e[s]=Dx(n,o)}return e}}var em="3.20.0";var bo=class extends Ft{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,this.name==null){let b=this.getClassName().toLowerCase();this.name=Al(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],hn(this.inputs).length!==this.inputs.length)throw new z(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);hn(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(let b of this.outputs){let w=b.sourceLayer,C=b.nodeIndex,k=b.tensorIndex;this.outputLayers.push(w),this.outputLayersNodeIndices.push(C),this.outputLayersTensorIndices.push(k)}for(let b of this.inputs){let w=b.sourceLayer,C=b.nodeIndex,k=b.tensorIndex;qo(C===0,"input layer has >1 nodes"),qo(k===0,"input layer has >1 tensors"),this.inputLayers.push(w),this.inputLayersNodeIndices.push(C),this.inputLayersTensorIndices.push(k)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){let w=this.inputLayers[b];if(!(w instanceof ki))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);this.inputNames.push(w.name),this.feedInputShapes.push(w.batchInputShape),this.feedInputNames.push(w.name)}for(let b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);let e={},o={},n={},s={},i={},a=[],l=(b,w,C,k,E,A)=>{(k==null||E==null||A==null)&&(k=b.sourceLayer,E=b.nodeIndex,A=b.tensorIndex);let D=k.inboundNodes[E];if(C.indexOf(D)!==-1)throw new kr(`The tensor ${b.name} at layer "${k.name}" is part of a cycle.`);if(w.indexOf(D)!==-1)return;this.containerNodes.add(bo.nodeKey(k,E)),k.id in i||(i[k.id]=Object.keys(i).length),C.indexOf(D)===-1&&C.push(D);let _=D.inboundLayers.length;for(let P=0;P<_;P++){let B=D.inputTensors[P],V=D.inboundLayers[P],G=D.nodeIndices[P],W=D.tensorIndices[P];l(B,w,C,V,G,W)}for(w.push(D);C.indexOf(D)>=0;)C.splice(C.indexOf(D),1);a.push(D)},u=[],c=[];for(let b of this.outputs)l(b,u,c);let p=a.slice().reverse();for(let b of p){o[b.id]=b,b.id in e||(e[b.id]=0);let w=e[b.id],C=n[b.outboundLayer.id]==null?0:n[b.outboundLayer.id];w=Math.max(w,C),n[b.outboundLayer.id]=w,s[b.outboundLayer.id]=b.outboundLayer,e[b.id]=w;for(let k=0;k<b.inboundLayers.length;k++){let E=b.inboundLayers[k],A=b.nodeIndices[k],D=E.inboundNodes[A],_=e[D.id]==null?0:e[D.id];e[D.id]=Math.max(w+1,_),o[D.id]=D}}let m={};for(let b in e){let w=e[b];w in m||(m[w]=[]),m[w].push(o[b])}let f={};for(let b in n){let w=n[b];w in f||(f[w]=[]),f[w].push(s[b])}let h=Object.keys(f).map(b=>parseInt(b,10)).sort(If);this.layers=[];for(let b of h){let w=f[b];w.sort((C,k)=>{let E=i[C.id],A=i[k.id];return E<A?-1:E>A?1:0});for(let C of w)C instanceof bo&&this.internalContainerRefs.push(C),this.layers.push(C)}this.layersByDepth=f,h=Object.keys(m).map(b=>parseInt(b,10)).sort(If);let d=this.inputs.slice(),g=[];for(let b of h)for(let w of m[b]){let C=w.outboundLayer;if(C!=null){for(let k of w.inputTensors)if(d.indexOf(k)===-1)throw new kr(`Graph disconnected: cannot obtain value for tensor ${k} at layer "${C.name}". The following previous layers were accessed without issue: ${g}`);for(let k of w.outputTensors)d.push(k);g.push(C.name)}}this.nodesByDepth=m;let x=this.layers.map(b=>b.name);for(let b of x){let w=x.filter(C=>C===b).length;if(w!==1)throw new kr(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(x))}this.outboundNodes=[],this.inboundNodes=[],new xa({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let t={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(let e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(let e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(o=>o.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new z("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(let e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.layers)e.push(...o.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){let o={},n=0;for(let i of this.layers)for(let a of i.weights){if(o[a.originalName]!=null)throw new z(`Duplicate weight name: ${a.originalName}`);o[a.originalName]=a,n++}let s=[];for(let i in t){let a=i;if(o[i]==null){let l=i.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(o[a]!=null)s.push([o[a],t[i]]);else if(e)throw new z(`Provided weight data has no target variable: ${i}`);delete o[a]}if(e){let i=[];for(let a in o)i.push(a);if(i.length>0)throw new z(`${i.length} of ${n} weights are not set: ${i}`)}Qp(s)}updatedConfig(){let t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${em}`,e.backend="TensorFlow.js",e}toJSON(t,e=!0){let o=Dx(this.updatedConfig());return e?JSON.stringify(o):o}call(t,e){return M(()=>{t=se(t);let o=new xn;for(let n=0;n<this.inputs.length;++n)o.add(this.inputs[n],t[n]);return Au(this.outputs,o,e)})}computeMask(t,e){return M(()=>{t=se(t);let o;return e==null?o=mn(null,t.length):o=se(e),this.runInternalGraph(t,o)[1]})}computeOutputShape(t){let e=Yp(t);if(e.length!==this.inputLayers.length)throw new z(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);let o={};for(let a=0;a<e.length;a++){let l=this.inputLayers[a],u=e[a],c=l.name+"_0_0";o[c]=u}let n=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(If);if(n.length>1)for(let a of n){let l=this.nodesByDepth[a];for(let u of l){let c=u.outboundLayer;if(this.inputLayers.map(d=>d.id).indexOf(c.id)!==-1)continue;let p=[];for(let d=0;d<u.inboundLayers.length;d++){let g=u.inboundLayers[d],x=u.nodeIndices[d],b=u.tensorIndices[d],w=`${g.name}_${x}_${b}`,C=o[w];p.push(C)}let m=c.computeOutputShape(ur(p)),f=Yp(m),h=c.inboundNodes.indexOf(u);for(let d=0;d<f.length;d++){let g=`${c.name}_${h}_${d}`;o[g]=f[d]}}}let s=[],i=[];for(let a=0;a<this.outputLayers.length;a++){let l=this.outputLayers[a],u=this.outputLayersNodeIndices[a],c=this.outputLayersTensorIndices[a],p=`${l.name}_${u}_${c}`;i.push(p)}for(let a=0;a<i.length;a++){let l=i[a];qo(l in o),s.push(o[l])}return ur(s)}runInternalGraph(t,e){e==null&&(e=mn(null,t.length));let o={};for(let l=0;l<this.inputs.length;++l){let u=this.inputs[l],c=t[l],p=e[l];o[u.id]=[c,p]}let n=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(If);for(let l of n){let u=this.nodesByDepth[l];for(let c of u){let p=c.outboundLayer,m=c.inputTensors,f=c.outputTensors,h=new Array;for(let d of m)d.id in o&&h.push(o[d.id]);if(h.length===m.length){let d={},g,x,b,w;if(c.callArgs!=null&&(d=c.callArgs),h.length===1){let[C,k]=h[0];d.mask==null&&(d.mask=k),b=se(p.call(C,d)),w=se(p.computeMask(C,k)),g=[C],x=[k]}else g=h.map(C=>C[0]),x=h.map(C=>C[1]),d.mask==null&&(d.mask=x),b=se(p.call(g,d)),w=se(p.computeMask(g,x));if(p.activityRegularizer)throw new wt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let C=0;C<f.length;++C){let k=f[C],E=b[C],A=w[C];o[k.id]=[E,A]}}}}let s=[],i=[],a=[];for(let l of this.outputs){qo(l.id in o,`Could not compute output ${l.name} : ${l.id}`);let[u,c]=o[l.id];a.push(u.shape),s.push(u),i.push(c)}return[s,i,a]}buildNodeConversionMap(t){let e={},o;for(let n of this.layers){o=n instanceof bo?1:0;for(let s=0;s<n.inboundNodes.length;s++){let i=bo.nodeKey(n,s);this.containerNodes.has(i)&&(e[i]=o,o+=1)}}return e}getLayer(t,e){if(e!=null){if(this.layers.length<=e)throw new z(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}else if(t==null)throw new z("Provide either a layer name or layer index");for(let o of this.layers)if(o.name===t)return o;throw new z(`No such layer: ${t}`)}calculateLosses(){return M(()=>{let t=[];for(let e of this.layers)for(let o=0;o<e.inboundNodes.length;++o){let n=bo.nodeKey(e,o);this.containerNodes.has(n)&&t.push(...e.calculateLosses())}return t})}getConfig(){let t={name:this.name},e=this.buildNodeConversionMap(this.layers),o=[];for(let i of this.layers){let a=i.getClassName(),l=i.getConfig(),u=[];for(let p=0;p<i.inboundNodes.length;p++){let m=i.inboundNodes[p],f=bo.nodeKey(i,p),h={};if(this.containerNodes.has(f)){if(m.callArgs)try{JSON.stringify(m.callArgs),h=m.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),h={}}if(m.inboundLayers.length>0){let d=[];for(let g=0;g<m.inboundLayers.length;g++){let x=m.inboundLayers[g],b=m.nodeIndices[g],w=m.tensorIndices[g],C=bo.nodeKey(x,b),k=e[C];k==null&&(k=0),d.push([x.name,k,w,h])}u.push(d)}}}let c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,o.push(c)}t.layers=o;let n=[];for(let i=0;i<this.inputLayers.length;i++){let a=this.inputLayers[i],l=this.inputLayersNodeIndices[i],u=bo.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.inputLayersTensorIndices[i];n.push([a.name,c,p])}t.inputLayers=n;let s=[];for(let i=0;i<this.outputLayers.length;i++){let a=this.outputLayers[i],l=this.outputLayersNodeIndices[i],u=bo.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.outputLayersTensorIndices[i];s.push([a.name,c,p])}return t.outputLayers=s,t}static fromConfig(t,e,o={},n=!1){let s={},i={};function a(g,x){g.name in i?i[g.name].push(x):i[g.name]=[x]}function l(g,x){let b=[],w;for(let C of x){let k=C[0],E=C[1],A=C[2];if(w=C[3]==null?{}:C[3],!(k in s)){a(g,x);return}let D=s[k];if(D.inboundNodes.length<=E){a(g,x);return}let _=D.inboundNodes[E];b.push(_.outputTensors[A])}b.length>0&&g.apply(ur(b),w)}function u(g){let x=g.name,b=yo(g,e.customObjects!=null?e.customObjects:{});b.setFastWeightInitDuringBuild(n),s[x]=b,g.inboundNodes.forEach(C=>{if(!(C instanceof Array))throw new z(`Corrupted configuration, expected array for nodeData: ${C}`);a(b,C)})}let c=e.name,p=e.layers;for(let g of p)u(g);for(;!bE(i);)for(let g of p){let x=s[g.name];if(x.name in i){let b=i[x.name];delete i[x.name];for(let w of b)l(x,w)}}let m=[],f=[],h=e.inputLayers;for(let g of h){let x=g[0],b=g[1],w=g[2];qo(x in s);let k=s[x].inboundNodes[b].outputTensors;m.push(k[w])}let d=e.outputLayers;for(let g of d){let x=g[0],b=g[1],w=g[2];qo(x in s);let k=s[x].inboundNodes[b].outputTensors;f.push(k[w])}return new t({inputs:m,outputs:f,name:c})}get stateful(){if(this._stateful)throw new z("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let t of this.layers)if(t.stateful)return!0;return!1}resetStates(){M(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}};function Hj(r,t,e){let o=t.length;if(r==null||Array.isArray(r)&&r.length===0)return t.map(n=>null);if(o===1)return Array.isArray(r)&&r.length===1?r:typeof r=="object"&&t[0]in r?[r[t[0]]]:[r];if(Array.isArray(r)){if(r.length!==o)throw new Error(`Provided ${e} is an array of ${r.length} element(s), but the model has ${o} outputs. Make sure a set of weights is provided for each model output.`);return r}else if(typeof r=="object"&&Object.keys(r).length>0&&typeof r[Object.keys(r)[0]]=="object"){let n=[];return t.forEach(s=>{s in r?n.push(r[s]):n.push(null)}),n}else throw new Error(`The model has multiple (${o}) outputs, so ${e} must be either an array with ${o} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(r)}`)}function Rx(r,t){return Hj(r,t,"classWeight")}async function Fx(r,t,e,o){if(t!=null||o!=null)throw new Error("Support sampleWeight is not implemented yet");if(e!=null){let n=M(()=>{if(r.shape.length===1)return Lr(r);if(r.shape.length===2){if(r.shape[1]>1)return ci(r,1);if(r.shape[1]===1)return R(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await n.data());St(n);let i=[];return s.forEach(a=>{if(e[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(e[a])}),De(i,"float32")}else return null}function e$(r,t){return F(r,t)}var qj=32;function n$(r,t){let e,o,n=t;e=n.xs,o=n.ys,y.assert(e!=null&&o!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let s=r$("input",r.inputNames,e),i=r$("output",r.outputNames,o),a=s[0].shape[0];y.assert(s.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),y.assert(i.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let l=0;l<s.length;l++)y.assert(s[l].shape[0]===a,()=>`Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);for(let l=0;l<i.length;l++)y.assert(i[l].shape[0]===a,()=>`Batch size mismatch: output ${r.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);return{xs:s,ys:i}}function r$(r,t,e){if(e instanceof Pt)return[e];if(Array.isArray(e))return y.assert(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${r} keys ${t}.`),e;{let o=[];for(let n of t){if(e[n]==null)throw new z(`The feature data generated by the dataset lacks the required ${r} key '${n}'.`);o.push(e[n])}return o}}function Kj(r){if(r.length===3)throw new wt("Validation with sample weights is not implemented yet.");return{xs:r[0],ys:r[1]}}async function s$(r,t,e){let o=e.batchesPerEpoch!=null;if(y.assert(r.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),y.assert(e!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),y.assert(e.epochs!=null&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),y.assert(!o||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),y.assert(e.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;try{let n=e.validationData!=null,s,i;if(n)if(o$(e.validationData))y.assert(e.validationBatches==null||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{let g=Kj(e.validationData);s=g.xs,i=g.ys}let a=r.makeTrainFunction(),l=r.getDedupedMetricsNames(),u;n?u=l.slice().concat(l.map(g=>"val_"+g)):u=l.slice();let c=Ix(e.callbacks,e.yieldEvery),p=e.verbose==null?1:e.verbose,{callbackList:m,history:f}=Sx(c,p,e.epochs,null,null,jj(t,e),null,n,u);m.setModel(r),r.history=f,await m.onTrainBegin(),r.stopTraining_=!1;let h=e.initialEpoch==null?0:e.initialEpoch,d=await t.iterator();for(;h<e.epochs;){let g={};await m.onEpochBegin(h);let x=0,b=0;for(o||(d=await t.iterator());!o||x<e.batchesPerEpoch;){let w=await d.next();if(o&&w.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${x} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(w.value!=null){let{xs:C,ys:k}=n$(r,w.value),E={};E.batch=b,E.size=C[0].shape[0],await m.onBatchBegin(b,E);let A=[];if(e.classWeight!=null){let P=Rx(e.classWeight,r.outputNames);for(let B=0;B<P.length;++B)A.push(await Fx(k[B],null,P[B]))}let D=C.concat(k).concat(A),_=a(D);St(D);for(let P=0;P<l.length;++P){let B=l[P],V=_[P];E[B]=V,be(V)}await m.onBatchEnd(b,E),yx(E),b++,x++}if(o?x>=e.batchesPerEpoch:w.done){if(n){let C;o$(e.validationData)?C=se(await r.evaluateDataset(e.validationData,{batches:e.validationBatches})):C=se(r.evaluate(s,i,{batchSize:e.validationBatchSize==null?qj:e.validationBatchSize,verbose:0}));for(let k=0;k<r.metricsNames.length;++k)g[`val_${r.metricsNames[k]}`]=C[k]}break}if(r.stopTraining_)break}if(await m.onEpochEnd(h,g),h++,r.stopTraining_)break}return await m.onTrainEnd(),await r.history.syncData(),r.history}finally{r.isTraining=!1}}function jj(r,t){let e=null;return t.batchesPerEpoch!=null?e=t.batchesPerEpoch:Number.isFinite(r.size)&&(e=r.size),e}function o$(r){return typeof r.iterator=="function"}function Xj(r){return typeof r.next=="function"}async function i$(r,t,e){e=e||{};let o=e.batches!=null,n=r.testFunction,s=[];if(e.verbose>0)throw new wt("Verbose mode is not implemented yet.");y.assert(!o||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);let i=Xj(t)?t:await t.iterator(),a=0,l=0;for(;!o||l<e.batches;){let u=await i.next();if(s=M(()=>{if(u.value){let{xs:c,ys:p}=n$(r,u.value),m=c.concat(p),f=M(()=>n(m));if(St(m),l===0)for(let d=0;d<f.length;++d)s.push(st(0));let h=m[0].shape[0];for(let d=0;d<f.length;++d){let g=f[d],x=s[d];s[d]=M(()=>K(s[d],F(h,g))),l>0&&St(x)}St(f),a+=h,++l}return s}),u.done){o&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<s.length;++u){let c=s[u];s[u]=nt(s[u],a),St(c)}return ur(s)}function _x(r){y.assert(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function rm(r,t,e){return r==null?[null]:Array.isArray(r)?r.map(o=>da(o,t,e-t)):da(r,t,e-t)}function Ox(r,t){return M(()=>r==null?null:Array.isArray(r)?r.map(e=>Ox(e,t)):fx(r,t.dtype==="int32"?t:j(t,"int32")))}function Px(r,t){let e=[],o=0,n=null;for(;o<r;)n=o+t,n>=r&&(n=r),e.push([o,n]),o=n;return e}async function Yj(r,t,e,o,n,s,i,a,l,u,c,p,m,f,h){n==null&&(n=32),s==null&&(s=1),c==null&&(c=!0),m==null&&(m=0);let d=!1;if(l!=null&&u!=null&&(d=!0),h!=null&&(d=!0,f==null))throw new z("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let g=r.checkNumSamples(e,n,f,"steps_per_epoch"),x;g!=null&&(x=Ar(0,g)),i==null&&(i=1);let{callbackList:b,history:w}=Sx(a,i,s,m,g,f,n,d,p);b.setModel(r),r.history=w,await b.onTrainBegin(),r.stopTraining_=!1;for(let C=m;C<s;++C){await b.onEpochBegin(C);let k={};if(f!=null)throw new wt("stepsPerEpoch mode is not implemented yet.");{if(c==="batch")throw new wt("batch shuffling is not implemneted yet");c&&y.shuffle(x);let E=De(x),A=Px(g,n);for(let D=0;D<A.length;++D){let _={};if(await b.onBatchBegin(D,_),M(()=>{let P=A[D][0],B=A[D][1],V=da(E,P,B-P);_.batch=D,_.size=B-P;let G=Ox(e,V),W=t(G);for(let U=0;U<o.length;++U){let H=o[U],Z=W[U];_[H]=Z,be(Z)}if(D===A.length-1&&d){let U=r.testLoop(l,u,n);for(let H=0;H<o.length;++H){let Z=o[H],q=U[H];be(q),k["val_"+Z]=q}}}),await b.onBatchEnd(D,_),yx(_),r.stopTraining_)break}E.dispose()}if(await b.onEpochEnd(C,k),r.stopTraining_)break}return await b.onTrainEnd(),await r.history.syncData(),r.history}async function a$(r,t,e,o={}){if(r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;let n,s,i,a,l,u,c,p,m;try{let f=o.batchSize==null?32:o.batchSize;_x(f);let h=!1,d=await r.standardizeUserData(t,e,o.sampleWeight,o.classWeight,h,f);n=d[0],s=d[1],m=d[2];let g=!1,x;if(o.validationData!=null&&o.validationData.length>0){if(g=!0,o.validationData.length===2)l=o.validationData[0],u=o.validationData[1];else throw o.validationData.length===3?new wt("validationData including sample weights is not supported yet."):new z(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${o.validationData} is invalid.`);let _=!0,P=await r.standardizeUserData(l,u,null,null,_,f);c=P[0],p=P[1],x=c.concat(p)}else if(o.validationSplit!=null&&o.validationSplit>0&&o.validationSplit<1){g=!0;let _=Math.floor(n[0].shape[0]*(1-o.validationSplit)),P=n[0].shape[0];c=rm(n,_,P),i=n,n=rm(n,0,_),p=rm(s,_,P),a=s,s=rm(s,0,_),x=c.concat(p)}else o.validationSteps!=null&&(g=!0);let b=n.concat(s).concat(m);r.checkTrainableWeightsConsistency();let w=r.makeTrainFunction(),C=r.getDedupedMetricsNames(),k,E;g?(r.makeTestFunction(),k=r.testFunction,E=C.slice().concat(C.map(_=>"val_"+_))):(k=null,x=[],E=C.slice());let A=Ix(o.callbacks,o.yieldEvery);return await Yj(r,w,b,C,f,o.epochs,o.verbose,A,k,x,o.shuffle,E,o.initialEpoch,null,null)}finally{r.isTraining=!1,yn(n,t),yn(s,e),yn(i,t),yn(a,e),yn(c,l),yn(p,u),m!=null&&St(m)}}function xI(r){let t=[];r instanceof Pt&&(r=[r]);for(let e=0;e<r.length;++e){let o=r[e];if(o.rank===1)t.push(ga(o,1));else{if(o.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(o)}}return t}function yn(r,t){if(r==null)return;let e=[];if(t instanceof Pt)e.push(t.id);else if(Array.isArray(t))t.forEach(n=>e.push(n.id));else if(t!=null)for(let n in t){let s=t[n];e.push(s.id)}let o=[];if(r instanceof Pt)e.indexOf(r.id)===-1&&o.push(r);else if(Array.isArray(r))r.forEach(n=>{e.indexOf(n.id)===-1&&o.push(n)});else if(r!=null)for(let n in r){let s=r[n];e.indexOf(s.id)===-1&&o.push(s)}o.forEach(n=>{n.isDisposed||n.dispose()})}function Zj(r){return r instanceof Pt}function yI(r){return Array.isArray(r)}function l$(r){return!Zj(r)&&!yI(r)}function u$(r,t,e,o=!0,n=""){if(t==null||t.length===0){if(r!=null){let i=!1;if(yI(r)&&r.length>0)i=!0;else if(l$(r)){for(let a in r)if(r.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new z(`Error when checking model ${n} expected no data, but got ${r}`)}return[]}if(r==null)return t.map(i=>null);let s;if(l$(r)){r=r,s=[];for(let i of t){if(r[i]==null)throw new z(`No data provided for "${i}". Need data for each key in: ${t}`);s.push(r[i])}}else if(yI(r)){if(r=r,r.length!==t.length)throw new z(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);s=r}else{if(r=r,t.length>1)throw new z(`The model ${n} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);s=[r]}if(s=xI(s),e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new z(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c>=0&&u!==c)throw new z(`${n} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${n} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return s}function Qj(r,t,e){let o=hn(r.map(s=>s.shape[0]));o.sort();let n=hn(t.map(s=>s.shape[0]));if(n.sort(),o.length>1)throw new z(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map(s=>s.shape))}`);if(n.length>1)throw new z(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(s=>s.shape))}`);if(o.length>0&&n.length>0&&!y.arraysEqual(o,n))throw new z(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${n[0]} target sample(s).`)}function Jj(r,t,e){let o=[Ru,tm,Fu];for(let n=0;n<r.length;++n){let s=r[n],i=t[n],a=e[n];if(i!=null){if(i===Fu&&s.shape[s.shape.length-1]===1)throw new z(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(o.indexOf(i)!==-1){let l=s.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){let p=l[c],m=u[c];if(m!=null&&p!==m)throw new z(`A target Tensor with shape ${s.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function c$(r,t,e,o=!0,n=""){let s;if(Array.isArray(r)){if(r.length!==t.length)throw new z(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${r.length} Tensors(s).`);s=r}else{if(t.length>1)throw new z(`The model expects ${t.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);s=[r]}if(e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new z(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c!==u)throw new z(`Error when checking ${n}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function t6(r,t){if(r==null||Array.isArray(r)&&r.length===0)return t.map(o=>[]);let e;if(typeof r=="string"||typeof r=="function")e=[r];else if(Array.isArray(r)||typeof r=="object")e=r;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);if(Array.isArray(e))return t.map(o=>e);{let o=[];for(let n of t){let s=e.hasOwnProperty(n)?e[n]:[];Array.isArray(s)||(s=[s]),o.push(s)}return o}}var e6="layers-model",bn=class extends bo{constructor(t){super(t),this.isTraining=!1}summary(t,e,o=console.log){if(!this.built)throw new z("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");JE(this,t,e,o)}compile(t){if(t.loss==null&&(t.loss=[]),this.loss=t.loss,typeof t.optimizer=="string")this.optimizer_=QE(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof vr))throw new z("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(!Array.isArray(t.loss)&&typeof t.loss!="string"&&typeof t.loss!="function"){t.loss=t.loss;for(let i in t.loss)if(this.outputNames.indexOf(i)===-1)throw new z(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(let i of this.outputNames)t.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),e.push(kx(t.loss[i]))}else if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new z(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);e=t.loss.map(a=>kx(a))}else{let i=kx(t.loss);this.outputs.forEach(a=>{e.push(i)})}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){let a=this.internalOutputShapes[i],l=this.outputNames[i];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[i])}let o=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],ps("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([a,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});let n=t6(t.metrics,this.outputNames),s=(i,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[i]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,i])};ps("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=n[i];(u=>{let c="",p,m,f;for(let h of u){if(typeof h=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(h)!==-1){let g=this.internalOutputShapes[i];g[g.length-1]===1||this.lossFunctions[i]===tm?["accuracy","acc"].indexOf(h)!==-1?m=Nx:["crossentropy","ce"].indexOf(h)!==-1&&(m=mI):this.lossFunctions[i]===Jp?["accuracy","acc"].indexOf(h)!==-1?m=fI:["crossentropy","ce"].indexOf(h)!==-1&&(m=hI):["accuracy","acc"].indexOf(h)!==-1?m=Ex:["crossentropy","ce"].indexOf(h)!==-1&&(m=$x);let x;["accuracy","acc"].indexOf(h)!==-1?x="acc":["crossentropy","ce"].indexOf(h)!==-1&&(x="ce"),f=m,p=c+x}else f=YE(h),p=c+Gf(h);let d;ps(p,()=>{d=f}),s(i,p,d)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,o={}){let n=o.batchSize==null?32:o.batchSize;_x(n);let s=!0,i=this.standardizeUserDataXY(t,e,s,n);try{let a=i[0].concat(i[1]);this.makeTestFunction();let l=this.testFunction,u=this.testLoop(l,a,n,o.verbose,o.steps);return ur(u)}finally{yn(i[0],t),yn(i[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),i$(this,t,e)}checkNumSamples(t,e,o,n="steps"){let s;if(o!=null){if(s=null,e!=null)throw new z(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else if(t!=null)Array.isArray(t)?s=t[0].shape[0]:s=t.shape[0];else throw new z(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return s}execute(t,e){if(Array.isArray(e)&&e.length===0)throw new z("`outputs` is an empty Array, which is not allowed.");let o=Array.isArray(e),n=o?e:[e],s=this.retrieveSymbolicTensors(n),i=new xn;if(t instanceof Pt&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new z(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)i.add(this.inputs[l],t[l])}else for(let l of this.inputs){let u=t[l.name];if(u==null)throw new z(`No value is provided for the model's input ${l.name}`);i.add(l,u)}let a=Au(s,i);return o?a:a[0]}retrieveSymbolicTensors(t){let e=mn(null,t.length),o=t.length;for(let n of this.layers){let s=Array.isArray(n.output)?n.output:[n.output],i=s.map(a=>a.name);for(let a=0;a<t.length;++a){let l=i.indexOf(t[a]);if(l!==-1&&(e[a]=s[l],o--),o===0)break}if(o===0)break}if(o>0){let n=[];throw e.forEach((s,i)=>{s==null&&n.push(t[i])}),new z(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,o=!1){return M(()=>{let n=this.checkNumSamples(t);if(o)throw new wt("Verbose predictLoop() is not implemented yet.");let s=Px(n,e),i=this.outputs.map(a=>[]);for(let a=0;a<s.length;++a)M(()=>{let u=s[a][0],c=s[a][1],p=rm(t,u,c),m=[];if(Array.isArray(p))for(let h=0;h<p.length;++h)m.push({key:this.inputs[h],value:p[h]});else m.push({key:this.inputs[0],value:p});let f=new xn(m);return Au(this.outputs,f)}).forEach((u,c)=>i[c].push(u));return ur(i.map(a=>jt(a,0)))})}predict(t,e={}){let o=xI(t);c$(o,this.inputNames,this.feedInputShapes,!1);try{let n=e.batchSize==null?32:e.batchSize;return _x(n),this.predictLoop(o,n)}finally{yn(o,t)}}predictOnBatch(t){c$(t,this.inputNames,this.feedInputShapes,!0);let e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,o=!0,n){if(this.optimizer_==null)throw new kr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let s=[];for(let i=0;i<this.feedOutputShapes.length;++i){let a=this.feedOutputShapes[i];this.feedLossFns[i]===Jp?s.push(a.slice(0,a.length-1).concat([1])):s.push(a)}if(t=u$(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=u$(e,this.feedOutputNames,s,!1,"target"),Qj(t,e,null),Jj(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&n!=null&&n>0&&t[0].shape[0]%n!==0)throw new z(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,o,n,s=!0,i){let[a,l]=this.standardizeUserDataXY(t,e,s,i);if(o!=null)throw new Error("sample weight is not supported yet.");let u=null;if(n!=null){let c=Rx(n,this.outputNames);u=[];for(let p=0;p<c.length;++p)u.push(await Fx(l[p],null,c[p]))}return[a,l,u]}testLoop(t,e,o,n=0,s){return M(()=>{let i=this.checkNumSamples(e,o,s,"steps"),a=[];if(n>0)throw new wt("Verbose mode is not implemented yet.");if(s!=null)throw new wt("steps mode in testLoop() is not implemented yet");{let l=Px(i,o),u=De(Ar(0,i));for(let c=0;c<l.length;++c){let p=l[c][0],m=l[c][1],f=da(u,p,m-p),h=Ox(e,f),d=t(h);if(c===0)for(let g=0;g<d.length;++g)a.push(st(0));for(let g=0;g<d.length;++g){let x=d[g];a[g]=K(a[g],F(m-p,x))}}for(let c=0;c<a.length;++c)a[c]=nt(a[c],i)}return a})}getDedupedMetricsNames(){let t=this.metricsNames,e=[];for(let o=0;o<t.length;++o){let n=t[o],s=n;rI(t,n)>1&&(s+=`_${rI(t.slice(0,o),n)}`),e.push(s)}return e}makeTrainFunction(){return t=>{let e=[],o=t.slice(0,this.inputs.length),n=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],a=()=>{let p=[];for(let d=0;d<this.inputs.length;++d)p.push({key:this.inputs[d],value:o[d]});let m=new xn(p),f=Au(this.outputs,m,{training:!0}),h;for(let d=0;d<this.lossFunctions.length;++d){let g=this.lossFunctions[d],x=g(n[d],f[d]);s[d]!=null&&(x=e$(x,s[d]));let b=me(x);e.push(b),d===0?h=x:h=K(h,x)}for(let d=0;d<this.metricsTensors.length;++d){let g;if(this.outputs.length>1&&d<this.outputs.length)g=e[d];else{let x=this.metricsTensors[d][0],b=this.metricsTensors[d][1];g=me(x(n[b],f[b]))}be(g),i.push(g)}return h=me(h),this.calculateLosses().forEach(d=>{h=K(h,d)}),h},l=this.collectedTrainableWeights.map(p=>p.read()),u=!0;return[this.optimizer_.minimize(a,u,l)].concat(i)}}makeTestFunction(){this.testFunction=t=>M(()=>{let e=[],o,n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let u=0;u<this.inputs.length;++u)i.push({key:this.inputs[u],value:n[u]});let a=new xn(i),l=Au(this.outputs,a);for(let u=0;u<this.lossFunctions.length;++u){let c=this.lossFunctions[u],p=me(c(s[u],l[u]));u===0?o=p:o=K(o,p),e.push(o)}for(let u=0;u<this.metricsTensors.length;++u){let c=this.metricsTensors[u][0],p=this.metricsTensors[u][1],m=me(c(s[p],l[p]));e.push(m)}return e})}async fit(t,e,o={}){return a$(this,t,e,o)}async fitDataset(t,e){return s$(this,t,e)}async trainOnBatch(t,e){let o=await this.standardizeUserData(t,e),n=o[0],s=o[1],a=this.makeTrainFunction()(n.concat(s)),l=[];for(let u of a){let c=await u.data();l.push(c[0])}return St(a),yn(o[0],t),yn(o[1],e),ur(l)}getNamedWeights(t){let e=[],o=t!=null&&t.trainableOnly,n=o?this.trainableWeights:this.weights,s=this.getWeights(o);for(let i=0;i<n.length;++i)o&&!n[i].trainable||e.push({name:n[i].originalName,tensor:s[i]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){let t=super.dispose();if(t.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){let e=ff().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-ff().numTensors}return t}getLossIdentifiers(){let t;if(typeof this.loss=="string")t=fn(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if(typeof e!="string")throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(e=>fn(e))}else{let e=Object.keys(this.loss);t={};let o=this.loss;for(let n of e)if(typeof o[n]=="string")t[n]=fn(o[n]);else throw new Error("Serialization of non-string loss is not supported.")}return t}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[fn(Gf(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>fn(Gf(t)));{let t={};for(let e in this.metrics)t[e]=fn(Gf(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(t.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(t.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(t.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");let e=Uf(t.optimizer_config),o=yo(e),n;if(typeof t.loss=="string")n=ha(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(i=>ha(i));else if(t.loss!=null){n={};for(let i in t.loss)n[i]=ha(t.loss[i])}let s;if(Array.isArray(t.metrics))s=t.metrics.map(i=>ha(i));else if(t.metrics!=null){s={};for(let i in t.metrics)s[i]=ha(t.metrics[i])}this.compile({loss:n,metrics:s,optimizer:o})}async save(t,e){if(typeof t=="string"){let u=as.getSaveHandlers(t);if(u.length===0)throw new z(`Cannot find any save handlers for URL '${t}'`);if(u.length>1)throw new z(`Found more than one (${u.length}) save handlers for URL '${t}'`);t=u[0]}if(t.save==null)throw new z("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let o=await as.encodeWeights(this.getNamedWeights(e)),n=!1,s=null,a={modelTopology:this.toJSON(s,n),format:e6,generatedBy:`TensorFlow.js tfjs-layers v${em}`,convertedBy:null};if((e==null?!1:e.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();let u="optimizer",{data:c,specs:p}=await as.encodeWeights(await this.optimizer.getWeights(),u);o.specs.push(...p),o.data=as.concatenateArrayBuffers([o.data,c])}return this.userDefinedMetadata!=null&&(gI(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=o.data,a.weightSpecs=o.specs,t.save(a)}setUserDefinedMetadata(t){gI(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}};bn.className="Model";X.registerClass(bn);var Lx=class extends bn{};Lx.className="Functional";X.registerClass(Lx);var ba=class extends bn{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=t.name!=null?t.name:Al("sequential_"),t.layers!=null)for(let e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(o=>o<0))throw new z(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){let e=t instanceof ba||t instanceof bn,o;if(e){if(o=t,o.outputs.length!==1)throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(o.inputs.length!==1)throw new z("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(t.inboundNodes.length===0){if(t.batchInputShape==null)throw new z("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let n=uI({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(n)}if(e)this.outputs=o.outputs,this.inputs=o.inputs;else{if(t.inboundNodes.length!==1)throw new z(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(t.inboundNodes[0].outputTensors.length!==1)throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=lI(this.outputs[0])}this.inboundNodes=[],new xa({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:mn(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(n=>n.shape),outputShapes:this.outputs[0].shape})}else{let n=t.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return this.model==null&&this.build(),this.model.call(t,e)}build(t){if(Gt(t),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new bn({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,o=console.log){this.built||this.build(),super.summary(t,e,o)}setWeights(t){this.model==null&&this.build(),this.model.setWeights(t)}evaluate(t,e,o={}){if(!this.built)throw new kr("The model needs to be compiled before being used.");return this.model.evaluate(t,e,o)}async evaluateDataset(t,e){if(!this.built)throw new kr("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return this.model==null&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return this.model==null&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,o={}){if(!this.built)throw new kr("The model needs to be compiled before being used.");return this.model.fit(t,e,o)}async fitDataset(t,e){if(!this.built)throw new kr("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,o={},n=!1){let s,i={};if(e instanceof Array){if(e[0].className==null||e[0].className==="Merge")throw new z("Legacy serialization format not supported yet.");s=e}else y.assert(e.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,i=e;let a=new t(i);if(!(a instanceof ba))throw new wt(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(let l of s){let c=yo(l,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),a.add(c)}return a}set stopTraining(t){if(this.model==null)throw new z("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(this.model==null)throw new z("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let t=[];for(let e of this.layers){let o={};o.className=e.getClassName(),o.config=e.getConfig(),t.push(o)}return{name:this.name,layers:t}}};ba.className="Sequential";X.registerClass(ba);var Fr=class extends X.Serializable{getConfig(){return{}}},zx=class extends Fr{apply(t,e=1){return _E(t,e)}};zx.className="elu";X.registerClass(zx);var Mx=class extends Fr{apply(t){return Ip(t)}};Mx.className="selu";X.registerClass(Mx);var Bx=class extends Fr{apply(t){return gr(t)}};Bx.className="relu";X.registerClass(Bx);var Vx=class extends Fr{apply(t){return M(()=>yi(6,gr(t)))}};Vx.className="relu6";X.registerClass(Vx);var Gx=class extends Fr{apply(t){return t}};Gx.className="linear";X.registerClass(Gx);var Ux=class extends Fr{apply(t){return Er(t)}};Ux.className="sigmoid";X.registerClass(Ux);var Wx=class extends Fr{apply(t){return PE(t)}};Wx.className="hardSigmoid";X.registerClass(Wx);var Hx=class extends Fr{apply(t){return ls(t)}};Hx.className="softplus";X.registerClass(Hx);var qx=class extends Fr{apply(t){return OE(t)}};qx.className="softsign";X.registerClass(qx);var Kx=class extends Fr{apply(t){return pi(t)}};Kx.className="tanh";X.registerClass(Kx);var om=class extends Fr{apply(t,e=-1){return kl(t,e)}};om.className="softmax";X.registerClass(om);var jx=class extends Fr{apply(t,e=-1){return gp(t,e)}};jx.className="logSoftmax";X.registerClass(jx);var Xx=class extends Fr{apply(t,e=1){return M(()=>F(Er(F(t,e)),t))}};Xx.className="swish";X.registerClass(Xx);var Yx=class extends Fr{apply(t){return M(()=>F(t,pi(ls(t))))}};Yx.className="mish";X.registerClass(Yx);function fs(r){return r.getClassName()}function bI(r,t={}){return Si(r,X.SerializationMap.getMap().classNameMap,t,"activation")}function hs(r){if(r==null){let t={};return t.className="linear",t.config={},bI(t)}if(typeof r=="string"){let t={};return t.className=r,t.config={},bI(t)}else return r instanceof Fr?r:bI(r)}function r6(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}var Zx=class extends X.Serializable{},Wf=class extends Zx{constructor(t){super(),r6(t),this.l1=t==null||t.l1==null?.01:t.l1,this.l2=t==null||t.l2==null?.01:t.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(t){return M(()=>{let e=ee([1]);return this.hasL1&&(e=K(e,it(F(this.l1,de(t))))),this.hasL2&&(e=K(e,it(F(this.l2,Eu(t))))),R(e,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}};Wf.className="L1L2";X.registerClass(Wf);var p$={l1l2:"L1L2"};function Qt(r){return Bp(r)}function m$(r,t={}){return Si(r,X.SerializationMap.getMap().classNameMap,t,"regularizer")}function ae(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in p$?p$[r]:r,config:{}};return m$(e)}else return r instanceof Zx?r:m$(r)}var Hf=class extends Ft{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null&&(this.maxValue=t.maxValue)}call(t,e){t=Et(t);let o=gr(t);return this.maxValue!=null&&(o=ir(o,0,this.maxValue)),o}computeOutputShape(t){return t}getConfig(){let t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}};Hf.className="ReLU";X.registerClass(Hf);var qf=class extends Ft{constructor(t){super(t??{}),this.DEFAULT_ALPHA=.3,t==null&&(t={}),this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=Et(t);return yl(o,this.alpha)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};qf.className="LeakyReLU";X.registerClass(qf);var Kf=class extends Ft{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",t==null&&(t={}),this.supportsMasking=!0,this.alphaInitializer=re(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=ae(t.alphaRegularizer),this.alphaConstraint=ke(t.alphaConstraint),t.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else if(typeof t.sharedAxes=="number")this.sharedAxes=[t.sharedAxes];else throw new z(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`)}build(t){t=Gt(t);let e=t.slice(1);if(this.sharedAxes!=null)for(let n of this.sharedAxes)e[n-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let o={};if(this.sharedAxes!=null)for(let n=1;n<t.length;++n)o[n]=t[n];this.inputSpec=[new ie({ndim:t.length,axes:o})],this.built=!0}call(t,e){return t=Et(t),Sl(t,this.alpha.read())}getConfig(){let t={alphaInitializer:fe(this.alphaInitializer),alphaRegularizer:Qt(this.alphaRegularizer),alphaConstraint:ve(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}};Kf.className="PReLU";X.registerClass(Kf);var jf=class extends Ft{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA=1,t==null&&(t={}),t.alpha!=null&&t.alpha!==this.DEFAULT_ALPHA)throw new wt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=Et(t);return hi(o)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};jf.className="ELU";X.registerClass(jf);var Xf=class extends Ft{constructor(t){super(t??{}),this.DEFAULT_THETA=1,t==null&&(t={}),this.theta=t.theta==null?this.DEFAULT_THETA:t.theta}call(t,e){let o=Et(t);return F(o,j(Le(o,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){let t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}};Xf.className="ThresholdedReLU";X.registerClass(Xf);var Yf=class extends Ft{constructor(t){super(t??{}),this.DEFAULT_AXIS=1,t==null&&(t={}),this.softmax=new om().apply,this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis}call(t,e){let o=Et(t);return this.softmax(o,this.axis)}computeOutputShape(t){return t}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};Yf.className="Softmax";X.registerClass(Yf);function Fl(r,t,e){if(typeof r=="number")return mn(r,t);if(r.length!==t)throw new z(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${r.length} elements.`);for(let o=0;o<t;++o){let n=r[o];if(!AE(n))throw new z(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(r)} including a non-integer number ${n}`)}return r}function lo(r,t,e,o,n=1){if(r==null)return r;let s=t+(t-1)*(n-1),i;return e==="same"?i=r:i=r-s+1,Math.floor((i+o-1)/o)}function ds(r,t,e,o){if(r==null)return null;if(o==="valid")r=r*t+ms([e-t,0]);else if(o==="same")r=r*t;else throw new z(`Unsupport padding mode: ${o}.`);return r}function rh(r,t){return M(()=>(we(t),t==="channelsFirst"?Rt(r,[0,2,3,1]):r))}function wI(r,t){return M(()=>(we(t),t==="channelsFirst"?Rt(r,[0,2,3,4,1]):r))}function n6(r,t,e,o=1,n="valid",s,i=1){return M(()=>{if(s==null&&(s=Ur()),we(s),r.shape.length!==3)throw new z(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);if(t.shape.length!==3)throw new z(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(e!=null&&e.shape.length!==1)throw new z(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if(s==="channelsFirst"&&(r=Rt(r,[0,2,1])),n==="causal")throw new wt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=cp(r,t,o,n==="same"?"same":"valid","NWC",i);return e!=null&&(a=Wr(a,e)),a})}function f$(r,t,e,o=[1,1],n="valid",s,i,a=null){return M(()=>{if(s==null&&(s=Ur()),we(s),r.rank!==3&&r.rank!==4)throw new z(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(t.rank!==3&&t.rank!==4)throw new z(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let l=rh(r,s);if(n==="causal")throw new wt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=El.conv2d({x:l,filter:t,strides:o,pad:n==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:a}),s==="channelsFirst"&&(l=Rt(l,[0,3,1,2])),l})}function s6(r,t,e,o=[1,1,1],n="valid",s,i){return M(()=>{if(s==null&&(s=Ur()),we(s),r.rank!==4&&r.rank!==5)throw new z(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);if(t.rank!==4&&t.rank!==5)throw new z(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);let a=wI(r,s);if(n==="causal")throw new wt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=mg(a,t,o,n==="same"?"same":"valid","NDHWC",i),e!=null&&(a=Wr(a,e)),s==="channelsFirst"&&(a=Rt(a,[0,4,1,2,3])),a})}var _u=class extends Ft{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",_u.verifyArgs(e),this.rank=t,ze(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new wt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Fl(e.kernelSize,t,"kernelSize"),this.strides=Fl(e.strides==null?1:e.strides,t,"strides"),this.padding=e.padding==null?"valid":e.padding,Gr(this.padding),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,we(this.dataFormat),this.activation=hs(e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.biasInitializer=re(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=ke(e.biasConstraint),this.biasRegularizer=ae(e.biasRegularizer),this.activityRegularizer=ae(e.activityRegularizer),this.dilationRate=Fl(e.dilationRate==null?1:e.dilationRate,t,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new z(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new z(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new z(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(t){if(qo("kernelSize"in t,"required key 'kernelSize' not in config"),typeof t.kernelSize!="number"&&!sx(t.kernelSize,"number",1,3))throw new z(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){let t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:fs(this.activation),useBias:this.useBias,biasInitializer:fe(this.biasInitializer),biasRegularizer:Qt(this.biasRegularizer),activityRegularizer:Qt(this.activityRegularizer),biasConstraint:ve(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}},_l=class extends _u{constructor(t,e){super(t,e),this.kernel=null,_l.verifyArgs(e),this.filters=e.filters,ze(this.filters,"filters"),this.kernelInitializer=re(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=ke(e.kernelConstraint),this.kernelRegularizer=ae(e.kernelRegularizer)}build(t){t=Gt(t);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new z(`The channel dimension of the input should be defined. Found ${t[e]}`);let o=t[e],n=this.kernelSize.concat([o,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:o}}],this.built=!0}call(t,e){return M(()=>{t=Et(t);let o,n=this.bias==null?null:this.bias.read(),s=ix(this.activation.getClassName());if(s!=null&&this.rank===2)o=f$(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(this.rank===1)o=n6(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)o=f$(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)o=s6(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new wt("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(o=this.activation.apply(o))}return o})}computeOutputShape(t){t=Gt(t);let e=[],o=this.dataFormat==="channelsLast"?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<o.length;++s){let i=lo(o[s],this.kernelSize[s],this.padding,this.strides[s],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[s]);e.push(i)}let n=[t[0]];return this.dataFormat==="channelsLast"?(n=n.concat(e),n.push(this.filters)):(n.push(this.filters),n=n.concat(e)),n}getConfig(){let t={filters:this.filters,kernelInitializer:fe(this.kernelInitializer),kernelRegularizer:Qt(this.kernelRegularizer),kernelConstraint:ve(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||typeof t.filters!="number"||t.filters<1)throw new z(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}},Ol=class extends _l{constructor(t){super(2,t),Ol.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!sx(t.kernelSize,"number",1,2))throw new z(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}};Ol.className="Conv2D";X.registerClass(Ol);var Pl=class extends _l{constructor(t){super(3,t),Pl.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!(Array.isArray(t.kernelSize)&&(t.kernelSize.length===1||t.kernelSize.length===3)))throw new z(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}};Pl.className="Conv3D";X.registerClass(Pl);var Zf=class extends Ol{constructor(t){if(super(t),this.inputSpec=[new ie({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new z(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Gt(t),t.length!==4)throw new z("Input should have rank 4; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new z("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ie({ndim:4,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{let o=Et(t);if(o.shape.length!==4)throw new z(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a;this.dataFormat==="channelsFirst"?(i=2,a=3):(i=1,a=2);let l=n[i],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],m=this.strides[0],f=this.strides[1],h=ds(l,m,c,this.padding),d=ds(u,f,p,this.padding),g=[s,h,d,this.filters];this.dataFormat!=="channelsLast"&&(o=Rt(o,[0,2,3,1]));let x=mp(o,this.kernel.read(),g,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(x=Rt(x,[0,3,1,2])),this.bias!=null&&(x=Wr(x,this.bias.read(),this.dataFormat)),this.activation!=null&&(x=this.activation.apply(x)),x})}computeOutputShape(t){t=Gt(t);let e=t.slice(),o,n,s;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3):(o=3,n=1,s=2);let i=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],u=this.strides[1];return e[o]=this.filters,e[n]=ds(e[n],l,i,this.padding),e[s]=ds(e[s],u,a,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};Zf.className="Conv2DTranspose";X.registerClass(Zf);var Qf=class extends Pl{constructor(t){if(super(t),this.inputSpec=[new ie({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new z(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Gt(t),t.length!==5)throw new z("Input should have rank 5; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new z("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ie({ndim:5,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{let o=Et(t);if(o.shape.length!==5)throw new z(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a,l;this.dataFormat==="channelsFirst"?(l=2,i=3,a=4):(l=1,i=2,a=3);let u=n[l],c=n[i],p=n[a],m=this.kernelSize[0],f=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],g=this.strides[1],x=this.strides[2],b=ds(u,d,m,this.padding),w=ds(c,g,f,this.padding),C=ds(p,x,h,this.padding),k=[s,b,w,C,this.filters];this.dataFormat!=="channelsLast"&&(o=Rt(o,[0,2,3,4,1]));let E=hg(o,this.kernel.read(),k,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(E=Rt(E,[0,4,1,2,3])),this.bias!==null&&(E=Wr(E,this.bias.read(),this.dataFormat)),this.activation!==null&&(E=this.activation.apply(E)),E})}computeOutputShape(t){t=Gt(t);let e=t.slice(),o,n,s,i;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3,i=4):(o=4,n=1,s=2,i=3);let a=this.kernelSize[0],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[0],p=this.strides[1],m=this.strides[2];return e[o]=this.filters,e[n]=ds(e[n],c,a,this.padding),e[s]=ds(e[s],p,l,this.padding),e[i]=ds(e[i],m,u,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};Qf.className="Conv3DTranspose";X.registerClass(Qf);var Qx=class extends _l{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,e.filters==null)throw new z("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(e.kernelInitializer!=null||e.kernelRegularizer!=null||e.kernelConstraint!=null)throw new z("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(e.padding!=null&&e.padding!=="same"&&e.padding!=="valid")throw new z(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=re(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=ae(e.depthwiseRegularizer),this.depthwiseConstraint=ke(e.depthwiseConstraint),this.pointwiseInitializer=re(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=ae(e.pointwiseRegularizer),this.pointwiseConstraint=ke(e.pointwiseConstraint)}build(t){if(t=Gt(t),t.length<this.rank+2)throw new z(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null||t[e]<0)throw new z(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);let o=t[e],n=this.kernelSize.concat([o,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(o*this.depthMultiplier,this.filters);let i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new ie({ndim:this.rank+2,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{t=Et(t);let o;if(this.rank===1)throw new wt("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(t=Rt(t,[0,2,3,1])),o=Sp(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(o=Wr(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),this.dataFormat==="channelsFirst"&&(o=Rt(o,[0,3,1,2])),o})}getConfig(){let t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=fe(this.depthwiseInitializer),t.pointwiseInitializer=fe(this.pointwiseInitializer),t.depthwiseRegularizer=Qt(this.depthwiseRegularizer),t.pointwiseRegularizer=Qt(this.pointwiseRegularizer),t.depthwiseConstraint=ve(this.depthwiseConstraint),t.pointwiseConstraint=ve(this.pointwiseConstraint),t}};Qx.className="SeparableConv";var Jf=class extends Qx{constructor(t){super(2,t)}};Jf.className="SeparableConv2D";X.registerClass(Jf);var Ou=class extends _l{constructor(t){super(1,t),Ou.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){let t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!sx(t.kernelSize,"number",1,1))throw new z(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}};Ou.className="Conv1D";X.registerClass(Ou);var th=class extends Ft{constructor(t){super(t),typeof t.cropping=="number"?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:typeof t.cropping[0]=="number"?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=t.dataFormat===void 0?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return this.dataFormat==="channelsFirst"?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return M(()=>{if(t=Et(t),this.dataFormat==="channelsLast"){let o=vf(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return vf(o,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{let o=vf(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return vf(o,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};th.className="Cropping2D";X.registerClass(th);var eh=class extends Ft{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=t.size==null?this.DEFAULT_SIZE:t.size,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,we(this.dataFormat),this.interpolation=t.interpolation==null?"nearest":t.interpolation,EE(this.interpolation)}computeOutputShape(t){if(this.dataFormat==="channelsFirst"){let e=t[2]==null?null:this.size[0]*t[2],o=t[3]==null?null:this.size[1]*t[3];return[t[0],t[1],e,o]}else{let e=t[1]==null?null:this.size[0]*t[1],o=t[2]==null?null:this.size[1]*t[2];return[t[0],e,o,t[3]]}}call(t,e){return M(()=>{let o=Et(t),n=o.shape;if(this.dataFormat==="channelsFirst"){o=Rt(o,[0,2,3,1]);let s=this.size[0]*n[2],i=this.size[1]*n[3],a=this.interpolation==="nearest"?wi.resizeNearestNeighbor(o,[s,i]):wi.resizeBilinear(o,[s,i]);return Rt(a,[0,3,1,2])}else{let s=this.size[0]*n[1],i=this.size[1]*n[2];return this.interpolation==="nearest"?wi.resizeNearestNeighbor(o,[s,i]):wi.resizeBilinear(o,[s,i])}})}getConfig(){let t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}};eh.className="UpSampling2D";X.registerClass(eh);function i6(r,t,e=[1,1],o="valid",n,s){return M(()=>{n==null&&(n=Ur()),we(n);let i=rh(r,n);if(r.rank!==4)throw new z(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);if(t.rank!==4)throw new z(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=fi(i,t,e,o==="same"?"same":"valid","NHWC",s),n==="channelsFirst"&&(i=Rt(i,[0,3,1,2])),i})}var oh=class extends _u{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=re(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=ke(t.depthwiseConstraint),this.depthwiseRegularizer=ae(t.depthwiseRegularizer)}build(t){if(t=Gt(t),t.length<4)throw new z(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);let e=this.dataFormat==="channelsFirst"?1:3;if(t[e]==null||t[e]<0)throw new z(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);let o=t[e],n=[this.kernelSize[0],this.kernelSize[1],o,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[o*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{t=Et(t);let o=i6(t,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(o=Wr(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),o})}computeOutputShape(t){t=Gt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=lo(e,this.kernelSize[0],this.padding,this.strides[0]),i=lo(o,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[t[0],n,s,i]:[t[0],s,i,n]}getConfig(){let t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=fe(this.depthwiseInitializer),t.depthwiseRegularizer=Qt(this.depthwiseRegularizer),t.depthwiseConstraint=ve(this.depthwiseRegularizer),t}};oh.className="DepthwiseConv2D";X.registerClass(oh);function CI(r,t,e,o){if(Array.isArray(r)){if(t!=null||e!=null)throw new z("When inputs is an array, neither initialState or constants should be provided");o!=null&&(e=r.slice(r.length-o,r.length),r=r.slice(0,r.length-o)),r.length>1&&(t=r.slice(1,r.length)),r=r[0]}function n(s){return s==null||Array.isArray(s)?s:[s]}return t=n(t),e=n(e),{inputs:r,initialState:t,constants:e}}function II(r,t,e,o=!1,n,s,i=!1,a=!1){return M(()=>{let l=t.shape.length;if(l<3)throw new z(`Input should be at least 3D, but is ${l}D.`);let u=[1,0].concat(Ar(2,l));if(t=Rt(t,u),s!=null)throw new wt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),n!=null&&(n=j(j(n,"bool"),"float32"),n.rank===l-1&&(n=Ze(n,-1)),n=Rt(n,u)),o&&(t=Je(t,0),n!=null&&(n=Je(n,0)));let c=[],p,m=e,f=t.shape[0],h=lr(t),d;n!=null&&(d=lr(n));for(let x=0;x<f;++x){let b=h[x],w=M(()=>r(b,m));if(n==null)p=w[0],m=w[1];else{let C=M(()=>{let k=d[x],E=et(or(k),k),A=K(F(w[0],k),F(m[0],E)),D=m.map((_,P)=>K(F(w[1][P],k),F(_,E)));return{output:A,newStates:D}});p=C.output,m=C.newStates}a&&c.push(p)}let g;return a&&(g=Ue(c,1)),[p,g,m]})}var Ko=class extends Ft{constructor(t){super(t);let e;if(t.cell==null)throw new z("cell property is missing for the constructor of RNN.");if(Array.isArray(t.cell)?e=new im({cells:t.cell}):e=t.cell,e.stateSize==null)throw new z("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=t.returnSequences==null?!1:t.returnSequences,this.returnState=t.returnState==null?!1:t.returnState,this.goBackwards=t.goBackwards==null?!1:t.goBackwards,this._stateful=t.stateful==null?!1:t.stateful,this.unroll=t.unroll==null?!1:t.unroll,this.supportsMasking=!0,this.inputSpec=[new ie({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return Ar(0,t).map(e=>null)}else return this.states_}setStates(t){this.states_=t}computeOutputShape(t){dx(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);let o=e[0],n;if(this.returnSequences?n=[t[0],t[1],o]:n=[t[0],o],this.returnState){let s=[];for(let i of e)s.push([t[0],i]);return[n].concat(s)}else return n}computeMask(t,e){return M(()=>{Array.isArray(e)&&(e=e[0]);let o=this.returnSequences?e:null;if(this.returnState){let n=this.states.map(s=>null);return[o].concat(n)}else return o})}get states(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let o=0;o<t;++o)e.push(null);return e}else return this.states_}set states(t){this.states_=t}build(t){if(this.numConstants!=null)throw new wt("Constants support is not implemented in RNN yet.");dx(t)&&(t=t[0]),t=t;let o=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new ie({shape:[o,null,...n]});let s=[t[0]].concat(t.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!y.arraysEqual(this.stateSpec.map(a=>a.shape[a.shape.length-1]),i))throw new z(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(a=>new ie({shape:[null,a]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){M(()=>{if(!this.stateful)throw new io("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape[0];if(o==null)throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>ee([o,n])):this.states_=[ee([o,this.cell.stateSize])];else if(t==null)St(this.states_),this.keptStates!=null&&(St(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>ee([o,n])):this.states_[0]=ee([o,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e===!0?this.keptStates.push(this.states_.slice()):St(this.states_);for(let n=0;n<this.states_.length;++n){let s=t[n],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,a=[o,i];if(!y.arraysEqual(s.shape,a))throw new z(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map(n=>be(n.clone()))})}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=CI(t,o,n,this.numConstants);t=s.inputs,o=s.initialState,n=s.constants;let i=[],a=[];if(o!=null){e.initialState=o,i=i.concat(o),this.stateSpec=[];for(let u of o)this.stateSpec.push(new ie({shape:u.shape}));a=a.concat(this.stateSpec)}if(n!=null&&(e.constants=n,i=i.concat(n),this.numConstants=n.length),i[0]instanceof Rr){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return M(()=>{let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;t=Et(t),s==null&&(this.stateful?s=this.states_:s=this.getInitialState(t));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new z(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let a={training:n},u=II((h,d)=>{let g=this.cell.call([h].concat(d),a);return[g[0],g.slice(1)]},t,s,this.goBackwards,o,null,this.unroll,this.returnSequences),c=u[0],p=u[1],m=u[2];this.stateful&&this.resetStates(m,n);let f=this.returnSequences?p:c;return this.returnState?[f].concat(m):f})}getInitialState(t){return M(()=>{let e=ee(t.shape);return e=it(e,[1,2]),e=ga(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>o>1?mx(e,[1,o]):e):this.cell.stateSize>1?[mx(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){let t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(e.numConstants=this.numConstants);let o=this.cell.getConfig();return this.getClassName()===Ko.className&&(e.cell={className:this.cell.getClassName(),config:o}),Object.assign({},o,t,e)}static fromConfig(t,e,o={}){let n=e.cell,s=yo(n,o);return new t(Object.assign(e,{cell:s}))}};Ko.className="RNN";X.registerClass(Ko);var Ll=class extends Ft{},nm=class extends Ll{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,ze(this.units,"units"),this.activation=hs(t.activation==null?this.DEFAULT_ACTIVATION:t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=re(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=re(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=re(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ae(t.kernelRegularizer),this.recurrentRegularizer=ae(t.recurrentRegularizer),this.biasRegularizer=ae(t.biasRegularizer),this.kernelConstraint=ke(t.kernelConstraint),this.recurrentConstraint=ke(t.recurrentConstraint),this.biasConstraint=ke(t.biasConstraint),this.dropout=Tu([1,ms([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Tu([1,ms([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Gt(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{if(t=t,t.length!==2)throw new z(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let o=t[1];t=t[0];let n=e.training==null?!1:e.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=wa({ones:()=>or(t),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=wa({ones:()=>or(o),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));let s,i=this.dropoutMask,a=this.recurrentDropoutMask;i!=null?s=gn(F(t,i),this.kernel.read()):s=gn(t,this.kernel.read()),this.bias!=null&&(s=Wr(s,this.bias.read())),a!=null&&(o=F(o,a));let l=K(s,gn(o,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:fs(this.activation),useBias:this.useBias,kernelInitializer:fe(this.kernelInitializer),recurrentInitializer:fe(this.recurrentInitializer),biasInitializer:fe(this.biasInitializer),kernelRegularizer:Qt(this.kernelRegularizer),recurrentRegularizer:Qt(this.recurrentRegularizer),biasRegularizer:Qt(this.biasRegularizer),activityRegularizer:Qt(this.activityRegularizer),kernelConstraint:ve(this.kernelConstraint),recurrentConstraint:ve(this.recurrentConstraint),biasConstraint:ve(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}};nm.className="SimpleRNNCell";X.registerClass(nm);var nh=class extends Ko{constructor(t){t.cell=new nm(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return new t(e)}};nh.className="SimpleRNN";X.registerClass(nh);var sm=class extends Ll{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new z("GRUCell does not support reset_after parameter set to true.");this.units=t.units,ze(this.units,"units"),this.activation=hs(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=hs(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=re(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=re(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=re(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ae(t.kernelRegularizer),this.recurrentRegularizer=ae(t.recurrentRegularizer),this.biasRegularizer=ae(t.biasRegularizer),this.kernelConstraint=ke(t.kernelConstraint),this.recurrentConstraint=ke(t.recurrentConstraint),this.biasConstraint=ke(t.biasConstraint),this.dropout=Tu([1,ms([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Tu([1,ms([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Gt(t);let e=t[t.length-1];this.kernel=this.addWeight("kernel",[e,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{if(t=t,t.length!==2)throw new z(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training==null?!1:e.training,n=t[1];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=wa({ones:()=>or(t),rate:this.dropout,training:o,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=wa({ones:()=>or(n),rate:this.recurrentDropout,training:o,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask,a,l,u;0<this.dropout&&this.dropout<1&&(t=F(t,s[0]));let c=gn(t,this.kernel.read());this.useBias&&(c=Wr(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=F(n,i[0]));let p=this.recurrentKernel.read(),[m,f]=tr(p,[2*this.units,this.units],p.rank-1),h=gn(n,m),[d,g,x]=tr(c,3,c.rank-1),[b,w]=tr(h,2,h.rank-1);a=this.recurrentActivation.apply(K(d,b)),l=this.recurrentActivation.apply(K(g,w));let C=gn(F(l,n),f);u=this.activation.apply(K(x,C));let k=K(F(a,n),F(K(1,Mt(a)),u));return[k,k]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:fs(this.activation),recurrentActivation:fs(this.recurrentActivation),useBias:this.useBias,kernelInitializer:fe(this.kernelInitializer),recurrentInitializer:fe(this.recurrentInitializer),biasInitializer:fe(this.biasInitializer),kernelRegularizer:Qt(this.kernelRegularizer),recurrentRegularizer:Qt(this.recurrentRegularizer),biasRegularizer:Qt(this.biasRegularizer),activityRegularizer:Qt(this.activityRegularizer),kernelConstraint:ve(this.kernelConstraint),recurrentConstraint:ve(this.recurrentConstraint),biasConstraint:ve(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}};sm.className="GRUCell";X.registerClass(sm);var sh=class extends Ko{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new sm(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};sh.className="GRU";X.registerClass(sh);var zl=class extends Ll{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,ze(this.units,"units"),this.activation=hs(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=hs(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=re(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=re(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=re(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=ae(t.kernelRegularizer),this.recurrentRegularizer=ae(t.recurrentRegularizer),this.biasRegularizer=ae(t.biasRegularizer),this.kernelConstraint=ke(t.kernelConstraint),this.recurrentConstraint=ke(t.recurrentConstraint),this.biasConstraint=ke(t.biasConstraint),this.dropout=Tu([1,ms([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=Tu([1,ms([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;t=Gt(t);let o=t[t.length-1];this.kernel=this.addWeight("kernel",[o,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let n;if(this.useBias){if(this.unitForgetBias){let s=this.biasInitializer,i=this.units;n=new(e=class extends qr{apply(l,u){let c=s.apply([i]),p=new $u().apply([i]),m=s.apply([i*2]);return aI(aI(c,p),m)}},e.className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return M(()=>{let o=e.training==null?!1:e.training;if(t=t,t.length!==3)throw new z(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let n=t[1],s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=wa({ones:()=>or(t),rate:this.dropout,training:o,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=wa({ones:()=>or(n),rate:this.recurrentDropout,training:o,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,a=this.recurrentDropoutMask,l,u,c,p;0<this.dropout&&this.dropout<1&&(t=F(t,i[0]));let m=gn(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=F(n,a[0])),m=K(m,gn(n,this.recurrentKernel.read())),this.useBias&&(m=Wr(m,this.bias.read()));let[f,h,d,g]=tr(m,4,m.rank-1);l=this.recurrentActivation.apply(f),u=this.recurrentActivation.apply(h),c=K(F(u,s),F(l,this.activation.apply(d))),p=this.recurrentActivation.apply(g);let x=F(p,this.activation.apply(c));return[x,x,c]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:fs(this.activation),recurrentActivation:fs(this.recurrentActivation),useBias:this.useBias,kernelInitializer:fe(this.kernelInitializer),recurrentInitializer:fe(this.recurrentInitializer),biasInitializer:fe(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Qt(this.kernelRegularizer),recurrentRegularizer:Qt(this.recurrentRegularizer),biasRegularizer:Qt(this.biasRegularizer),activityRegularizer:Qt(this.activityRegularizer),kernelConstraint:ve(this.kernelConstraint),recurrentConstraint:ve(this.recurrentConstraint),biasConstraint:ve(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}};zl.className="LSTMCell";X.registerClass(zl);var ih=class extends Ko{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new zl(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};ih.className="LSTM";X.registerClass(ih);var im=class extends Ll{constructor(t){super(t),this.cells=t.cells}get stateSize(){let t=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return M(()=>{t=t;let o=t.slice(1),n=[];for(let a of this.cells.slice().reverse())Array.isArray(a.stateSize)?n.push(o.splice(0,a.stateSize.length)):n.push(o.splice(0,1));n.reverse();let s=[],i;for(let a=0;a<this.cells.length;++a){let l=this.cells[a];o=n[a],a===0?i=[t[0]].concat(o):i=[i[0]].concat(o),i=l.call(i,e),s.push(i.slice(1))}o=[];for(let a of s.slice().reverse())o.push(...a);return[i[0]].concat(o)})}build(t){dx(t)&&(t=t[0]),t=t;let e;this.cells.forEach((o,n)=>{ps(`RNNCell_${n}`,()=>{o.build(t),Array.isArray(o.stateSize)?e=o.stateSize[0]:e=o.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){let t=super.getConfig(),e=s=>({className:s.getClassName(),config:s.getConfig()}),n={cells:this.cells.map(e)};return Object.assign({},t,n)}static fromConfig(t,e,o={}){let n=[];for(let s of e.cells)n.push(yo(s,o));return new t({cells:n})}get trainableWeights(){if(!this.trainable)return[];let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.cells)e.push(...o.trainableWeights);return e.concat(t)}return t}getWeights(){let t=[];for(let e of this.cells)t.push(...e.weights);return Ff(t)}setWeights(t){let e=[];for(let o of this.cells){let n=o.weights.length,s=t.splice(n);for(let i=0;i<o.weights.length;++i)e.push([o.weights[i],s[i]])}Qp(e)}};im.className="StackedRNNCells";X.registerClass(im);function wa(r){let{ones:t,rate:e,training:o=!1,count:n=1,dropoutFunc:s}=r,i=()=>s!=null?s(t(),e):hx(t(),e),a=()=>Dl(i,t,o);return!n||n<=1?be(a().clone()):Array(n).fill(void 0).map(a).map(u=>be(u.clone()))}var a6=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&t.indexOf(o)<0&&(e[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var n=0,o=Object.getOwnPropertySymbols(r);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(r,o[n])&&(e[o[n]]=r[o[n]]);return e};var Jx=class extends Ko{constructor(t){if(t.unroll)throw new wt("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new wt("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new ie({ndim:5})]}call(t,e){return M(()=>{if(this.cell.dropoutMask!=null&&(St(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(St(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new z("ConvRNN2D cell does not support constants");let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return M(()=>{let{stateSize:e}=this.cell,o=t.shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)],i=ee(s);return Array.isArray(e)?Array(e.length).fill(i):[i]})}resetStates(t,e=!1){M(()=>{if(!this.stateful)throw new io("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)];if(o[0]==null)throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ee(s)):this.states_=[ee(s)];else if(t==null)St(this.states_),this.keptStates!=null&&(St(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ee(s)):this.states_[0]=ee(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):St(this.states_);for(let a=0;a<this.states_.length;++a){let l=t[a],u=s;if(!y.arraysEqual(l.shape,u))throw new z(`State ${a} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>be(a.clone()))})}computeSingleOutputShape(t){let{dataFormat:e,filters:o,kernelSize:n,padding:s,strides:i,dilationRate:a}=this.cell,l=e==="channelsFirst",u=t[l?3:2],c=t[l?4:3],p=lo(u,n[0],s,i[0],a[0]),m=lo(c,n[1],s,i[1],a[1]);return[...t.slice(0,2),...l?[o,p,m]:[p,m,o]]}};Jx.className="ConvRNN2D";var am=class extends zl{constructor(t){let{filters:e,kernelSize:o,strides:n,padding:s,dataFormat:i,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,ze(this.filters,"filters"),this.kernelSize=Fl(o,2,"kernelSize"),this.kernelSize.forEach(l=>ze(l,"kernelSize")),this.strides=Fl(n||1,2,"strides"),this.strides.forEach(l=>ze(l,"strides")),this.padding=s||"valid",Gr(this.padding),this.dataFormat=i||"channelsLast",we(this.dataFormat),this.dilationRate=Fl(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>ze(l,"dilationRate"))}build(t){var e;t=Gt(t);let o=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[o]==null)throw new z(`The channel dimension of the input should be defined. Found ${t[o]}`);let n=t[o],s=4,i=this.kernelSize.concat([n,this.filters*s]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let a=this.kernelSize.concat([this.filters,this.filters*s]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){let u=this.biasInitializer,c=this.filters;l=new(e=class extends qr{apply(m,f){let h=u.apply([c]),d=Qe([c]),g=u.apply([c*2]);return Gp([h,d,g])}},e.className="CustomInit",e)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*s],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return M(()=>{if(t.length!==3)throw new z(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training||!1,n=t[0],s=t[1],i=t[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=wa({ones:()=>or(n),rate:this.dropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=(tt,rt,lt)=>!rt||!rt[lt]?tt:F(rt[lt],tt),c=u(n,l,0),p=u(n,l,1),m=u(n,l,2),f=u(n,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=wa({ones:()=>or(s),rate:this.recurrentDropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let h=this.recurrentDropoutMask,d=u(s,h,0),g=u(s,h,1),x=u(s,h,2),b=u(s,h,3),w=3,[C,k,E,A]=tr(this.kernel.read(),a,w),[D,_,P,B]=this.useBias?tr(this.bias.read(),a):[null,null,null,null];c=this.inputConv(c,C,D,this.padding),p=this.inputConv(p,k,_,this.padding),m=this.inputConv(m,E,P,this.padding),f=this.inputConv(f,A,B,this.padding);let[V,G,W,U]=tr(this.recurrentKernel.read(),a,w);d=this.recurrentConv(d,V),g=this.recurrentConv(g,G),x=this.recurrentConv(x,W),b=this.recurrentConv(b,U);let H=this.recurrentActivation.apply(K(c,d)),Z=this.recurrentActivation.apply(K(p,g)),q=K(F(Z,i),F(H,this.activation.apply(K(m,x)))),Q=F(this.recurrentActivation.apply(K(f,b)),this.activation.apply(q));return[Q,Q,q]})}getConfig(){let t=super.getConfig(),{units:e}=t,o=a6(t,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},o,n)}inputConv(t,e,o,n){let s=oo(t,e,this.strides,n||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return o?Wr(s,o,this.dataFormat):s}recurrentConv(t,e){return oo(t,e,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}};am.className="ConvLSTM2DCell";X.registerClass(am);var ah=class extends Jx{constructor(t){let e=new am(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}};ah.className="ConvLSTM2D";X.registerClass(ah);var lm=class extends Ft{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(this.noiseShape==null)return this.noiseShape;let e=t.shape,o=[];for(let n=0;n<this.noiseShape.length;++n)o.push(this.noiseShape[n]==null?e[n]:this.noiseShape[n]);return o}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t);if(0<this.rate&&this.rate<1){let n=e.training==null?!1:e.training,s=this.getNoiseShape(o);return Dl(()=>hx(o,this.rate,s,this.seed),()=>o,n)}return t})}getConfig(){let t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}};lm.className="Dropout";X.registerClass(lm);var lh=class extends lm{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){let e=t.shape;return[e[0],1,e[2]]}};lh.className="SpatialDropout1D";X.registerClass(lh);var uh=class extends Ft{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.batchInputShape==null&&t.inputShape==null&&t.inputDim!=null){let e=null;t.batchSize!=null&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,ze(this.units,"units"),this.activation=hs(t.activation),t.useBias!=null&&(this.useBias=t.useBias),this.kernelInitializer=re(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=re(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=ke(t.kernelConstraint),this.biasConstraint=ke(t.biasConstraint),this.kernelRegularizer=ae(t.kernelRegularizer),this.biasRegularizer=ae(t.biasRegularizer),this.activityRegularizer=ae(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){t=Gt(t);let e=t[t.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){t=Gt(t);let e=t.slice();return e[e.length-1]=this.units,e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t),n=ix(this.activation.getClassName()),s;return n!=null?s=gn(o,this.kernel.read(),n,this.bias?this.bias.read():null):(s=gn(o,this.kernel.read()),this.bias!=null&&(s=Wr(s,this.bias.read())),this.activation!=null&&(s=this.activation.apply(s))),s})}getConfig(){let t={units:this.units,activation:fs(this.activation),useBias:this.useBias,kernelInitializer:fe(this.kernelInitializer),biasInitializer:fe(this.biasInitializer),kernelRegularizer:Qt(this.kernelRegularizer),biasRegularizer:Qt(this.biasRegularizer),activityRegularizer:Qt(this.activityRegularizer),kernelConstraint:ve(this.kernelConstraint),biasConstraint:ve(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}};uh.className="Dense";X.registerClass(uh);var ch=class extends Ft{constructor(t){t=t||{},super(t),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Gt(t);for(let e of t.slice(1))if(e==null)throw new z(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],dn(t,1)]}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t);if(this.dataFormat==="channelsFirst"&&o.rank>1){let n=[0];for(let s=2;s<o.rank;++s)n.push(s);n.push(1),o=Rt(o,n)}return FE(o)})}getConfig(){let t={};this.dataFormat!=null&&(t.dataFormat=this.dataFormat);let e=super.getConfig();return Object.assign(t,e),t}};ch.className="Flatten";X.registerClass(ch);var ph=class extends Ft{constructor(t){super(t),this.supportsMasking=!0,this.activation=hs(t.activation)}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t);return this.activation.apply(o)})}getConfig(){let t={activation:fs(this.activation)},e=super.getConfig();return Object.assign(t,e),t}};ph.className="Activation";X.registerClass(ph);var mh=class extends Ft{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return M(()=>(t=Et(t),DE(t,this.n)))}getConfig(){let t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}};mh.className="RepeatVector";X.registerClass(mh);var fh=class extends Ft{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||t==null}fixUnknownDimension(t,e){let o="Total size of new array must be unchanged.",n=e.slice(),s=1,i=null;for(let l=0;l<n.length;++l){let u=n[l];if(this.isUnknown(u))if(i===null)i=l;else throw new z("Can only specifiy one unknown dimension.");else s*=u}let a=dn(t);if(i!==null){if(s===0||a%s!==0)throw new z(o);n[i]=a/s}else if(a!==s)throw new z(o);return n}computeOutputShape(t){let e=!1;for(let o=0;o<t.length;++o)if(this.isUnknown(t[o])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t),n=o.shape,s=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return R(o,s)})}getConfig(){let t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}};fh.className="Reshape";X.registerClass(fh);var hh=class extends Ft{constructor(t){if(super(t),t.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);let e=Ar(1,t.dims.length+1);if(!y.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ie({ndim:this.dims.length+1})]}computeOutputShape(t){t=Gt(t);let e=t.slice();return this.dims.forEach((o,n)=>{e[n+1]=t[o]}),e}call(t,e){return Rt(Et(t),this.dimsIncludingBatch)}getConfig(){let t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}};hh.className="Permute";X.registerClass(hh);var dh=class extends Ft{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null?this.maskValue=t.maskValue==null?0:t.maskValue:this.maskValue=0}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){let o=Et(t),n=-1;return cu(us(o,this.maskValue),n)}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t),n=-1,s=!0,i=cu(us(o,this.maskValue),n,s);return F(o,j(i,o.dtype))})}};dh.className="Masking";X.registerClass(dh);var gh=class extends Ft{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",t.batchInputShape==null&&t.inputShape==null){let e=null;t.batchSize!=null&&(e=t.batchSize),t.inputLength==null?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(se(t.inputLength))}this.inputDim=t.inputDim,ze(this.inputDim,"inputDim"),this.outputDim=t.outputDim,ze(this.outputDim,"outputDim"),this.embeddingsInitializer=re(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=ae(t.embeddingsRegularizer),this.activityRegularizer=ae(t.activityRegularizer),this.embeddingsConstraint=ke(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return M(()=>this.maskZero?(t=Et(t),us(t,bt(t))):null)}computeOutputShape(t){if(t=Gt(t),this.inputLength==null)return[...t,this.outputDim];let e=se(this.inputLength);if(e.length!==t.length-1)throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let o=0;for(let n=0;n<e.length;++n){let s=e[n],i=t[n+1];if(s!=null&&i!=null&&s!==i)throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);s==null&&(e[o]=i),o++}}return[t[0],...e,this.outputDim]}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t);o.dtype!=="int32"&&(o=Nu(o,"int32"));let n=fx(this.embeddings.read(),R(o,[o.size]));return R(n,Gt(this.computeOutputShape(o.shape)))})}getConfig(){let t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:fe(this.embeddingsInitializer),embeddingsRegularizer:Qt(this.embeddingsRegularizer),activityRegularizer:Qt(this.activityRegularizer),embeddingsConstraint:ve(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}};gh.className="Embedding";X.registerClass(gh);var Ca=class extends Ft{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new wt}computeElementwiseOpOutputShape(t,e){if(t==null||e==null)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(e.length===0)return t;let o=t.slice(0,t.length-e.length);for(let n=0;n<e.length;++n){let s=t[t.length-e.length+n],i=e[n];if(s==null||i==null||s<0||i<0)o.push(null);else if(s===1)o.push(i);else if(i===1)o.push(s);else{if(s!==i)throw new z("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));o.push(s)}}return o}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Gt(t)]),t=t,t.length<2)throw new z(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(let s of t)s!=null&&s[0]!==null&&e.push(s[0]);if(e=hn(e),e.length>1)throw new z(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let o=t[0]==null?null:t[0].slice(1);for(let s=1;s<t.length;++s){let i=t[s]==null?null:t[s].slice(1);o=this.computeElementwiseOpOutputShape(o,i)}let n=t.map(s=>s.length);t.indexOf(null)===-1&&hn(n).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return M(()=>{if(t=t,this.reshapeRequired){let o=[],n=t.map(s=>s.rank);if(n.indexOf(null)===-1){let s=ms(n);for(let i of t){let a=i.rank;for(let l=0;l<s-a;++l)i=ga(i,1);o.push(i)}return this.mergeFunction(o)}else{let s=!1;for(let l of t){let u=l.rank;if(u==null){let c=l.shape,p=c[0],m=c.slice(1).concat([p]),f=R(l,[p].concat(dn(c.slice(1))));f=Rt(f,[1,0]),f=R(f,m),o.push(f),s=!0}else if(u>1){let c=Ar(1,u).concat([0]);o.push(Rt(l,c)),s=!0}else o.push(l)}let i=this.mergeFunction(o),a=i.rank;if(s){if(a==null){let l=i.shape,u=l.length,c=l[u-1],p=[c].concat(l.slice(0,l.length-1));i=R(Rt(R(i,[-1,c]),[1,0]),p)}else if(a>1){let l=[a-1].concat(Ar(0,a-1));i=Rt(i,l)}}return i}}else return this.mergeFunction(t)})}computeOutputShape(t){t=t;let e;t[0]==null?e=null:e=t[0].slice(1);for(let n=1;n<t.length;++n){let s=t[n]==null?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let o=[];for(let n of t)n!=null&&n[0]!==null&&o.push(n[0]);return o=hn(o),o.length===1?e=o.concat(e):e=[null].concat(e),e}computeMask(t,e){return M(()=>{if(e==null)return null;if(!Array.isArray(e))throw new z("`mask` should be an Array");if(!Array.isArray(t))throw new z("`inputs` should be an Array");if(e.length!==t.length)throw new z(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(n=>n==null))return null;e=e.map(n=>n==null?n:Ze(n,0));let o=e[0];for(let n=1;n<e.length-1;++n)o=Ir(o,e[n]);return o})}},yh=class extends Ca{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=K(e,t[o]);return e})}};yh.className="Add";X.registerClass(yh);var bh=class extends Ca{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=F(e,t[o]);return e})}};bh.className="Multiply";X.registerClass(bh);var wh=class extends Ca{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=K(e,t[o]);return F(1/t.length,e)})}};wh.className="Average";X.registerClass(wh);var Ch=class extends Ca{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=so(e,t[o]);return e})}};Ch.className="Maximum";X.registerClass(Ch);var Ih=class extends Ca{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=yi(e,t[o]);return e})}};Ih.className="Minimum";X.registerClass(Ih);var Sh=class extends Ca{constructor(t){super(t),this.DEFAULT_AXIS=-1,t==null&&(t={}),this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!(Array.isArray(t)&&Array.isArray(t[0]))||t.length===1)throw new z("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(let n of t)if(n!=null){e=!1;break}if(e)return;let o=[];for(let n=0;n<t.length;++n){let s=t[n].slice();s.splice(this.axis,1);let i=!1;for(let a of o)if(y.arraysEqual(a,s)){i=!0;break}i||o.push(s)}if(o.length>1)throw new z("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return M(()=>Gp(t,this.axis))}computeOutputShape(t){if(!(Array.isArray(t)&&Array.isArray(t[0])))throw new z("A `Concatenate` layer should be called on a list of inputs.");let e=t,o=e[0].slice(),n=this.axis<0?o.length+this.axis:this.axis;for(let s of e.slice(1)){if(o[n]==null||s[n]==null){o[n]=null;break}o[n]+=s[n]}return o}computeMask(t,e){if(e==null)return null;if(!Array.isArray(e))throw new z("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new z("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new z(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return M(()=>{let o=!0;if(e.forEach(i=>{if(i!=null){o=!1;return}}),o)return null;let n=[];for(let i=0;i<t.length;++i)e[i]==null?n.push(j(or(t[i]),"bool")):e[i].rank<t[i].rank?n.push(Ze(e[i],-1)):n.push(e[i]);let s=jt(n,this.axis);return lp(s,-1,!1)})}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};Sh.className="Concatenate";X.registerClass(Sh);function xh(r,t){for(;r<0;)r+=t;return r}function l6(r,t,e){if(r.shape.length>3||t.shape.length>3)throw new wt("batchDot is not implemented for tensors of 4D or higher rank yet");if(y.assert(r.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`),y.assert(r.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),typeof e=="number"&&(e=[e,e]),r.dtype==="complex64"||t.dtype==="complex64")throw new wt("batchDot is not implemented for complex64-type Tensors yet.");let o=r.shape.length,n=t.shape.length;e==null&&(e=[o-1,n-2]);let s=e;return M(()=>{let i;if(o>n){i=o-n;let l=[];for(let u=0;u<i;++u)l.push(1);t=R(t,t.shape.concat(l))}else if(n>o){i=n-o;let l=[];for(let u=0;u<i;++u)l.push(1);r=R(r,r.shape.concat(l))}else i=0;let a;if(r.shape.length===2&&t.shape.length===2)s[0]===s[1]?a=it(F(r,t),s[0]):a=it(F(Rt(r,[1,0]),t),s[1]);else{let l=s[0]!==r.shape.length-1,u=s[1]===t.shape.length-1;a=Lt(r,t,l,u)}if(i>0){let l;o>n?l=o+n-3:l=o-1;let u=[];for(let c=l;c<l+i;++c)u.push(c);a=xo(a,u)}return a.shape.length===1&&(a=Ze(a,1)),a})}var vh=class extends Ca{constructor(t){super(t),this.axes=t.axes,this.normalize=t.normalize==null?!1:t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0],o=t[1];if(e.length>3||o.length>3)throw new wt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);if(e[n[0]]!==o[n[1]])throw new z(`Dimension incompatibility: ${e[n[0]]} !== ${o[n[1]]}`)}mergeFunction(t){if(t.length!==2)throw new z(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e=t[0],o=t[1],n;return Array.isArray(this.axes)?n=this.axes.map((s,i)=>xh(s,t[i].shape.length)):n=[xh(this.axes,e.shape.length),xh(this.axes,o.shape.length)],this.normalize&&(e=zf(e,n[0]),o=zf(o,n[1])),l6(e,o,n)}interpretAxes(t,e){let o;return Array.isArray(this.axes)?o=this.axes:o=[xh(this.axes,t.length),xh(this.axes,e.length)],o}computeOutputShape(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0].slice(),o=t[1].slice();if(e.length>3||o.length>3)throw new wt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);e.splice(n[0],1),o.splice(n[1],1),o.splice(0,1);let s=e.concat(o);return s.length===1&&s.push(1),s}computeMask(t,e){return null}getConfig(){let t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}};vh.className="Dot";X.registerClass(vh);var kh=class extends Ft{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t);return Dl(()=>K(Up(o.shape,0,this.stddev),o),()=>o,e.training||!1)})}};kh.className="GaussianNoise";X.registerClass(kh);var Th=class extends Ft{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=Et(t);return this.rate>0&&this.rate<1?Dl(()=>{let s=Math.sqrt(this.rate/(1-this.rate));return F(o,Up(o.shape,1,s))},()=>o,e.training||!1):o})}};Th.className="GaussianDropout";X.registerClass(Th);var Nh=class extends Ft{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Et(t).shape}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return M(()=>{if(this.rate<1&&this.rate>0){let o=this._getNoiseShape(t);return Dl(()=>{let s=Et(t),i=1.6732632423543772,a=1.0507009873554805,l=-i*a,u=ho(bi(o),this.rate);u=Nu(u,"float32");let c=((1-this.rate)*(1+this.rate*l**2))**-.5,p=-c*l*this.rate,m=K(F(s,u),F(K(u,-1),l));return K(F(m,c),p)},()=>Et(t),e.training||!1)}return t})}};Nh.className="AlphaDropout";X.registerClass(Nh);function Eh(r,t,e,o,n,s=.001){let i;if(r.rank===2)i=og(r,t,e,o,n,s);else if(r.rank===3)i=ng(r,t,e,o,n,s);else if(r.rank===4)i=sg(r,t,e,o,n,s);else throw new wt(`batchNormalization is not implemented for array of rank ${r.rank} yet`);return i}function u6(r,t,e,o,n=.001){return M(()=>{let s=gu(r,o),i=s.mean,a=s.variance;return[Eh(r,i,a,e,t,n),i,a]})}function c6(r,t,e,o,n=.001){return M(()=>{let s=gu(r,o),i=s.mean,a=s.variance,l=[];for(let h of Ar(0,r.rank))o.indexOf(h)!==-1?l.push(1):l.push(r.shape[h]);let u=R(i,l),c=R(a,l),p=t==null?null:R(t,l),m=e==null?null:R(e,l);return[Eh(r,u,c,m,p,n),i,a]})}function p6(r,t,e,o,n=.001){return y.arraysEqual(o.slice().sort(),Ar(0,r.rank-1))?u6(r,t,e,o,n):c6(r,t,e,o,n)}var $h=class extends Ft{constructor(t){t==null&&(t={}),super(t),this.supportsMasking=!0,this.axis=t.axis==null?-1:t.axis,this.momentum=t.momentum==null?.99:t.momentum,this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=re(t.betaInitializer||"zeros"),this.gammaInitializer=re(t.gammaInitializer||"ones"),this.movingMeanInitializer=re(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=re(t.movingVarianceInitializer||"ones"),this.betaConstraint=ke(t.betaConstraint),this.gammaConstraint=ke(t.gammaConstraint),this.betaRegularizer=ae(t.betaRegularizer),this.gammaRegularizer=ae(t.gammaRegularizer)}build(t){t=Gt(t);let e=this.axis>=0?this.axis:this.axis+t.length,o=t[e];if(o==null)throw new z(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new ie({ndim:t.length,axes:{[e]:o}})];let n=[o];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return M(()=>{let o=e.training==null?!1:e.training,n=Et(t),s=n.shape,i=s.length,a=Ar(0,i),l=this.axis>=0?this.axis:this.axis+i;a.splice(l,1);let u=mn(1,i);u[l]=s[l];let c=a.slice();c.sort();let p=!y.arraysEqual(c,Ar(0,i).slice(0,i-1)),m=()=>{if(p){let b=R(this.movingMean.read(),u),w=R(this.movingVariance.read(),u),C=this.center?R(this.beta.read(),u):null,k=this.scale?R(this.gamma.read(),u):null;return Eh(n,b,w,C,k,this.epsilon)}else return Eh(n,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!o)return m();let[f,h,d]=p6(n,this.gamma.read(),this.beta.read(),a,this.epsilon),g=(b,w,C)=>{M(()=>{let k=1-C,E=b.read(),A=F(et(E,w),k);b.write(et(E,A))})};return(()=>{g(this.movingMean,h,this.momentum),g(this.movingVariance,d,this.momentum)})(),f})}getConfig(){let t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:fe(this.betaInitializer),gammaInitializer:fe(this.gammaInitializer),movingMeanInitializer:fe(this.movingMeanInitializer),movingVarianceInitializer:fe(this.movingVarianceInitializer),betaRegularizer:Qt(this.betaRegularizer),gammaRegularizer:Qt(this.gammaRegularizer),betaConstraint:ve(this.betaConstraint),gammaConstraint:ve(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}};$h.className="BatchNormalization";X.registerClass($h);var Ah=class extends Ft{constructor(t){if(t==null&&(t={}),super(t),this.axis=t.axis==null?-1:t.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=re(t.betaInitializer||"zeros"),this.gammaInitializer=re(t.gammaInitializer||"ones"),this.betaRegularizer=ae(t.betaRegularizer),this.gammaRegularizer=ae(t.gammaRegularizer),this.supportsMasking=!0}build(t){t=Gt(t);let e=t.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=e);for(let s of this.axis)if(s<0||s>=e)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==hn(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);let o=this.axis.map(s=>t[s]),n=!0;this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,n):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,n):this.beta=null,this.built=!0}call(t,e){let o=Et(t),n=o.shape,s=n.length;return M(()=>{let{mean:a,variance:l}=gu(o,this.axis,!0),u=mn(1,s);for(let d of this.axis)u[d]=n[d];let c=d=>d!=null&&d.shape.length!==s?R(d,u):d,p=this.scale?c(this.gamma.read()):null,m=this.center?c(this.beta.read()):null,f=[],h=[];for(let d=0;d<s;++d)this.axis.indexOf(d)!==-1?(f.push(n[d]),h.push(1)):(f.push(1),h.push(n[d]));return a=dr(a,f),l=dr(l,f),p!=null&&(p=dr(p,h)),m!=null&&(m=dr(m,h)),Eh(o,a,l,m,p,this.epsilon)})}getConfig(){let t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:fe(this.betaInitializer),gammaInitializer:fe(this.gammaInitializer),betaRegularizer:Qt(this.betaRegularizer),gammaRegularizer:Qt(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}};Ah.className="LayerNormalization";X.registerClass(Ah);function m6(r,t,e){return M(()=>{if(r.rank!==4)throw new z(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);if(t==null&&(t=[[1,1],[1,1]]),t.length!==2||t[0].length!==2||t[1].length!==2)throw new z("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(e==null&&(e=Ur()),e!=="channelsLast"&&e!=="channelsFirst")throw new z(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let o;return e==="channelsFirst"?o=[[0,0],[0,0],t[0],t[1]]:o=[[0,0],t[0],t[1],[0,0]],Vr(r,o)})}var Dh=class extends Ft{constructor(t){if(t==null&&(t={}),super(t),this.dataFormat=t.dataFormat==null?Ur():t.dataFormat,t.padding==null)this.padding=[[1,1],[1,1]];else if(typeof t.padding=="number")this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,t.padding.length!==2)throw new z(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,o;if(typeof t.padding[0]=="number")e=[t.padding[0],t.padding[0]],o=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,t.padding[0].length!==2)throw new z(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],t.padding[1].length!==2)throw new z(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);o=t.padding[1]}this.padding=[e,o]}this.inputSpec=[new ie({ndim:4})]}computeOutputShape(t){t=Gt(t);let e,o;return this.dataFormat==="channelsFirst"?(t[2]!=null&&t[2]>=0?e=t[2]+this.padding[0][0]+this.padding[0][1]:e=null,t[3]!=null&&t[3]>=0?o=t[3]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],t[1],e,o]):(t[1]!=null&&t[1]>=0?e=t[1]+this.padding[0][0]+this.padding[0][1]:e=null,t[2]!=null&&t[2]>=0?o=t[2]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],e,o,t[3]])}call(t,e){return M(()=>m6(Et(t),this.padding,this.dataFormat))}getConfig(){let t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};Dh.className="ZeroPadding2D";X.registerClass(Dh);function sy(r,t,e,o,n,s){return M(()=>{we(n),oI(s),Gr(o),e==null&&(e=[1,1]),o==null&&(o="valid"),n==null&&(n=Ur()),s==null&&(s="max"),r=rh(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=Cl(r,t,e,a):i=dl(r,t,e,a),n==="channelsFirst"&&(i=Rt(i,[0,3,1,2])),i})}function h$(r,t,e,o,n,s){return M(()=>{we(n),oI(s),Gr(o),e==null&&(e=[1,1,1]),o==null&&(o="valid"),n==null&&(n=Ur()),s==null&&(s="max"),r=wI(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=$g(r,t,e,a):i=rg(r,t,e,a),n==="channelsFirst"&&(i=Rt(i,[0,4,1,2,3])),i})}var ty=class extends Ft{constructor(t){if(t.poolSize==null&&(t.poolSize=2),super(t),typeof t.poolSize=="number")this.poolSize=[t.poolSize];else if(Array.isArray(t.poolSize)&&t.poolSize.length===1&&typeof t.poolSize[0]=="number")this.poolSize=t.poolSize;else throw new z(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);if(ze(this.poolSize,"poolSize"),t.strides==null)this.strides=this.poolSize;else if(typeof t.strides=="number")this.strides=[t.strides];else if(Array.isArray(t.strides)&&t.strides.length===1&&typeof t.strides[0]=="number")this.strides=t.strides;else throw new z(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);ze(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,Gr(this.padding),this.inputSpec=[new ie({ndim:3})]}computeOutputShape(t){t=Gt(t);let e=lo(t[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return M(()=>{this.invokeCallHook(t,e),t=ga(Et(t),2);let o=this.poolingFunction(Et(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return xo(o,[2])})}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}},Rh=class extends ty{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return we(s),Gr(n),sy(t,e,o,n,s,"max")}};Rh.className="MaxPooling1D";X.registerClass(Rh);var Fh=class extends ty{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return we(s),Gr(n),sy(t,e,o,n,s,"avg")}};Fh.className="AveragePooling1D";X.registerClass(Fh);var ey=class extends Ft{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==2)throw new z(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];ze(this.poolSize,"poolSize"),ze(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,we(this.dataFormat),Gr(this.padding),this.inputSpec=[new ie({ndim:4})]}computeOutputShape(t){t=Gt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2];return e=lo(e,this.poolSize[0],this.padding,this.strides[0]),o=lo(o,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o]:[t[0],e,o,t[3]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(Et(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},_h=class extends ey{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return we(s),Gr(n),sy(t,e,o,n,s,"max")}};_h.className="MaxPooling2D";X.registerClass(_h);var Oh=class extends ey{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return we(s),Gr(n),sy(t,e,o,n,s,"avg")}};Oh.className="AveragePooling2D";X.registerClass(Oh);var ry=class extends Ft{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==3)throw new z(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];ze(this.poolSize,"poolSize"),ze(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,we(this.dataFormat),Gr(this.padding),this.inputSpec=[new ie({ndim:5})]}computeOutputShape(t){t=Gt(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[4]:t[3];return e=lo(e,this.poolSize[0],this.padding,this.strides[0]),o=lo(o,this.poolSize[1],this.padding,this.strides[1]),n=lo(n,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o,n]:[t[0],e,o,n,t[4]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(Et(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Ph=class extends ry{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return we(s),Gr(n),h$(t,e,o,n,s,"max")}};Ph.className="MaxPooling3D";X.registerClass(Ph);var Lh=class extends ry{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return we(s),Gr(n),h$(t,e,o,n,s,"avg")}};Lh.className="AveragePooling3D";X.registerClass(Lh);var oy=class extends Ft{constructor(t){super(t),this.inputSpec=[new ie({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new wt}},zh=class extends oy{constructor(t){super(t||{})}call(t,e){return M(()=>{let o=Et(t);return me(o,1)})}};zh.className="GlobalAveragePooling1D";X.registerClass(zh);var Mh=class extends oy{constructor(t){super(t||{})}call(t,e){return M(()=>{let o=Et(t);return Cr(o,1)})}};Mh.className="GlobalMaxPooling1D";X.registerClass(Mh);var ny=class extends Ft{constructor(t){super(t),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,we(this.dataFormat),this.inputSpec=[new ie({ndim:4})]}computeOutputShape(t){return t=t,this.dataFormat==="channelsLast"?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new wt}getConfig(){let t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Bh=class extends ny{call(t,e){return M(()=>{let o=Et(t);return this.dataFormat==="channelsLast"?me(o,[1,2]):me(o,[2,3])})}};Bh.className="GlobalAveragePooling2D";X.registerClass(Bh);var Vh=class extends ny{call(t,e){return M(()=>{let o=Et(t);return this.dataFormat==="channelsLast"?Cr(o,[1,2]):Cr(o,[2,3])})}};Vh.className="GlobalMaxPooling2D";X.registerClass(Vh);var iy=class extends Ft{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(t){this.layer!=null&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){let t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,o={}){let n=e.layer,s=yo(n,o);delete e.layer;let i={layer:s};return Object.assign(i,e),new t(i)}},Gh=class extends iy{constructor(t){super(t),this.supportsMasking=!0}build(t){if(t=Gt(t),t.length<3)throw new z(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];let e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){t=Gt(t);let e=[t[0]].concat(t.slice(2)),o=this.layer.computeOutputShape(e),n=t[1];return[o[0],n].concat(o.slice(1))}call(t,e){return M(()=>(t=Et(t),II((i,a)=>[Et(this.layer.call(i,e)),[]],t,[],!1,null,null,!1,!0)[1]))}};Gh.className="TimeDistributed";X.registerClass(Gh);function f6(r){vi(TE,"BidirectionalMergeMode",r)}var h6="concat",Uh=class extends iy{constructor(t){super(t);let e=t.layer.getConfig(),o={};o.className=t.layer.getClassName(),o.config=e,this.forwardLayer=yo(o),e.goBackwards=e.goBackwards!==!0;let n={};if(n.className=t.layer.getClassName(),n.config=e,this.backwardLayer=yo(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=t.mergeMode===void 0?h6:t.mergeMode,f6(this.mergeMode),t.weights)throw new wt("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,this.forwardLayer!=null&&(this.forwardLayer.trainable=t),this.backwardLayer!=null&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){let e=t.length,o=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,o)),this.backwardLayer.setWeights(t.slice(o))}computeOutputShape(t){let e=this.forwardLayer.computeOutputShape(t);Array.isArray(e)&&Array.isArray(e[0])||(e=[e]),e=e;let o,n,s;return this.returnState&&(s=e.slice(1)),o=e[0],o=o,this.mergeMode==="concat"?(o[o.length-1]*=2,n=[o]):this.mergeMode==null?n=[o,o.slice()]:n=[o],this.returnState?this.mergeMode==null?n.concat(s).concat(s.slice()):[o].concat(s).concat(s.slice()):ur(n)}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=CI(t,o,n,this.numConstants);if(t=s.inputs,o=s.initialState,n=s.constants,Array.isArray(t)&&(o=t.slice(1),t=t[0]),(o==null||o.length===0)&&n==null)return super.apply(t,e);let i=[],a=[];if(o!=null){let u=o.length;if(u%2>0)throw new z("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=o,i.push(...o);let c=o.map(p=>new ie({shape:p.shape}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),a.push(...c)}if(n!=null)throw new wt("Support for constants in Bidirectional layers is not implemented yet.");let l=i[0]instanceof Rr;for(let u of i)if(u instanceof Rr!==l)throw new z("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return M(()=>{let o=e.initialState,n,s;if(o==null)n=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{let l=o.slice(0,o.length/2),u=o.slice(o.length/2);n=this.forwardLayer.call(t,Object.assign(e,{initialState:l})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:u}))}let i;this.returnState&&(Array.isArray(n)&&(i=n.slice(1).concat(s.slice(1))),n=n[0],s=s[0]),this.returnSequences&&(s=Je(s,1));let a;return this.mergeMode==="concat"?a=Gp([n,s]):this.mergeMode==="sum"?a=K(n,s):this.mergeMode==="ave"?a=F(.5,K(n,s)):this.mergeMode==="mul"?a=F(n,s):this.mergeMode==null&&(a=[n,s]),this.returnState?this.mergeMode==null?a.concat(i):[a].concat(i):a})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){ps(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),ps(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){Array.isArray(e)&&(e=e[0]);let o;if(this.returnSequences?this.mergeMode==null?o=[e,e]:o=e:this.mergeMode==null?o=[null,null]:o=null,this.returnState){let s=this.forwardLayer.states.map(i=>null);return Array.isArray(o)?o.concat(s).concat(s):[o].concat(s).concat(s)}else return o}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(t),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){let t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){let o=yo(e.layer);if(delete e.layer,e.numConstants!=null)throw new wt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");let n=e;return n.layer=o,new t(n)}};Uh.className="Bidirectional";X.registerClass(Uh);var w6=L();w6.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var jo;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(jo||(jo={}));var d$;(function(r){let t;(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(t=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(d$||(d$={}));var I6={};function ay(r){return I6[r]}function S(r,t,e,o,n){let s=t.inputParams[r];if(s&&s.inputIndexStart!==void 0){let a=s.inputIndexStart,l=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?a+1:s.inputIndexEnd;if(s.type==="tensor")return nr(t.inputNames[s.inputIndexStart],e,o,n);if(s.type==="tensors")return t.inputNames.slice(a,l).map(m=>nr(m,e,o,n));let u=nr(t.inputNames.slice(a)[0],e,o,n),c=u.dataSync();return s.type==="number"?c[0]:y.toNestedArray(u.shape,c)}let i=t.attrParams[r];return i&&i.value}function nr(r,t,e,o){let[n,s]=Kr(r);if(o!=null){let a=o.getHashTableHandleByName(n);if(a!=null)return a}let i=e.currentContextIds.find(a=>!!t[ly(n,a)]);return i!==void 0?t[ly(n,i)][s]:void 0}function g$(r,t,e){return t[ly(r,e.currentContextId)]}function wn(r,t){let[e,o,n]=Kr(r);return[ly(e,t&&t.currentContextId),o,n]}function ly(r,t){return t?`${r}-${t}`:r}function Kr(r){let t=r.split(":");if(t.length===1)return[r,0,void 0];let e=t[0],o=t.length===3?t[1]:void 0,n=Number(t[t.length-1]);return[e,n,o]}function Wh(r,t,e){let o=S("pad",r,t,e);if(o==="explicit"){o=S("explicitPaddings",r,t,e);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function gs(r){return r.kept?r:Lr(r)}var SI={};Jt(SI,{json:()=>S6});var S6=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var vI={};Jt(vI,{json:()=>v6});var v6=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var kI={};Jt(kI,{json:()=>k6});var k6=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var TI={};Jt(TI,{json:()=>T6});var T6=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var NI={};Jt(NI,{json:()=>N6});var N6=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var EI={};Jt(EI,{json:()=>E6});var E6=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var $I={};Jt($I,{json:()=>$6});var $6=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var AI={};Jt(AI,{json:()=>A6});var A6=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var DI={};Jt(DI,{json:()=>D6});var D6=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var RI={};Jt(RI,{json:()=>R6});var R6=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var FI={};Jt(FI,{json:()=>F6});var F6=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var _I={};Jt(_I,{json:()=>_6});var _6=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var OI={};Jt(OI,{json:()=>O6});var O6=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var PI={};Jt(PI,{json:()=>P6});var P6=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var LI={};Jt(LI,{json:()=>L6});var L6=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var zI={};Jt(zI,{json:()=>z6});var z6=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var MI={};Jt(MI,{json:()=>M6});var M6=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var BI={};Jt(BI,{json:()=>B6});var B6=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var VI={};Jt(VI,{json:()=>V6});var V6=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Hh=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let t=[SI,vI,kI,TI,NI,EI,$I,AI,DI,RI,FI,_I,OI,PI,LI,zI,MI,BI,VI],e=[].concat(...t.map(o=>o.json));this.opMappers=e.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(t,e={}){let o=t.node,n=[],s=[],i=[],a=o.reduce((d,g)=>(d[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?n.push(d[g.name]):g.op==="Const"?s.push(d[g.name]):(g.input==null||g.input.length===0)&&i.push(d[g.name]),d),{}),l=[],u=[],c={},p={};e!=null&&(c=this.mapSignatureEntries(e.inputs),p=this.mapSignatureEntries(e.outputs));let m=Object.keys(a);m.forEach(d=>{let g=a[d];g.inputNames.forEach((x,b)=>{let[w,,C]=wn(x),k=a[w];if(k.outputs!=null){let E=k.outputs.indexOf(C);if(E!==-1){let A=`${w}:${E}`;g.inputNames[b]=A}}g.inputs.push(k),k.children.push(g)})}),Object.keys(p).length===0?m.forEach(d=>{let g=a[d];g.children.length===0&&u.push(g)}):Object.keys(p).forEach(d=>{let[g]=wn(d),x=a[g];x!=null&&(x.signatureKey=p[d],u.push(x))}),Object.keys(c).length>0?Object.keys(c).forEach(d=>{let[g]=wn(d),x=a[g];x&&(x.signatureKey=c[d],l.push(x))}):l=n;let f={};t.library!=null&&t.library.function!=null&&(f=t.library.function.reduce((d,g)=>(d[g.signature.name]=this.mapFunction(g),d),{}));let h={nodes:a,inputs:l,outputs:u,weights:s,placeholders:n,signature:e,functions:f};return i.length>0&&(h.initNodes=i),h}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,o)=>(e[t[o].name]=o,e),{})}mapNode(t){let e=ay(t.op)||this.opMappers[t.op]||{};t.attr==null&&(t.attr={});let o={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return e.inputs!=null&&(o.inputParams=e.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),e.attrs!=null&&(o.attrParams=e.attrs.reduce((n,s)=>{let i=s.type,a;switch(s.type){case"string":a=uy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=uy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":a=gy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=gy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":a=py(t.attr,s.tfName,s.defaultValue||0),a===void 0&&!!s.tfDeprecatedName&&(a=py(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":a=dy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=dy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":a=cy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=cy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":a=yy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=yy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":a=hy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=hy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":a=xy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=xy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":a=my(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=my(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":a=fy(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=fy(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":a=x$(t.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=x$(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${t.op}`)}return n[s.name]={value:a,type:i},n},{})),o}mapFunction(t){let e=t.nodeDef,o=[],n=[],s={};e!=null&&(s=e.reduce((p,m)=>(p[m.name]=this.mapNode(m),m.op==="Const"&&n.push(p[m.name]),p),{}));let i=[],a=[];t.signature.inputArg.forEach(p=>{let[m]=wn(p.name),f={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:GI(p.type),type:"dtype"}},children:[]};f.signatureKey=p.name,i.push(f),s[m]=f}),Object.keys(s).forEach(p=>{let m=s[p];m.inputNames.forEach((f,h)=>{let[d,,g]=wn(f),x=s[d];if(x.outputs!=null){let b=x.outputs.indexOf(g);if(b!==-1){let w=`${d}:${b}`;m.inputNames[h]=w}}m.inputs.push(x),x.children.push(m)})});let u=t.ret;t.signature.outputArg.forEach(p=>{let[m,f]=wn(u[p.name]),h=s[m];h!=null&&(h.defaultOutput=f,a.push(h))});let c=this.mapArgsToSignature(t);return{nodes:s,inputs:i,outputs:a,weights:n,placeholders:o,signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o),e),{}),outputs:t.signature.outputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o,t.ret),e),{})}}mapArgToTensorInfo(t,e){let o=t.name;return e!=null&&(o=e[o]),{name:o,dtype:t.type}}};function G6(r){let t=L().global;if(typeof t.atob<"u")return t.atob(r);if(typeof Buffer<"u")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function y$(r,t){let e=Array.isArray(r)?String.fromCharCode.apply(null,r):G6(r);return t?e:e.toLowerCase()}function uy(r,t,e,o=!1){let n=r[t];return n!=null?y$(n.s,o):e}function cy(r,t,e){let o=r[t];return o?o.b:e}function py(r,t,e){let o=r[t]||{},n=o.i!=null?o.i:o.f!=null?o.f:e;return typeof n=="number"?n:parseInt(n,10)}function GI(r){switch(typeof r=="string"&&(r=jo[r]),r){case jo.DT_FLOAT:case jo.DT_HALF:return"float32";case jo.DT_INT32:case jo.DT_INT64:case jo.DT_INT8:case jo.DT_UINT8:return"int32";case jo.DT_BOOL:return"bool";case jo.DT_DOUBLE:return"float32";case jo.DT_STRING:return"string";default:return null}}function x$(r,t,e){let o=r[t];return o&&o.func?o.func.name:e}function my(r,t,e){let o=r[t];return o&&o.type?GI(o.type):e}function fy(r,t,e){let o=r[t];return o&&o.list&&o.list.type?o.list.type.map(n=>GI(n)):e}function b$(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(t=>typeof t.size=="number"?t.size:parseInt(t.size,10)):[]}function hy(r,t,e){let o=r[t];return o&&o.shape?b$(o.shape):e}function dy(r,t,e){let o=r[t];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):e}function gy(r,t,e,o=!1){let n=r[t];return n&&n.list&&n.list.s?n.list.s.map(s=>y$(s,o)):e}function xy(r,t,e){let o=r[t];return o&&o.list&&o.list.shape?o.list.shape.map(n=>b$(n)):e}function yy(r,t,e){let o=r[t];return o&&o.list&&o.list.b?o.list.b:e}var by=class{constructor(t,e,o){this.node=t,this.tensorMap=e,this.context=o,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(n=>this.getInput(n)),t.rawAttrs!=null&&(this.attrs=Object.keys(t.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(t){return nr(t,this.tensorMap,this.context)}getAttr(t,e){let o=this.node.rawAttrs[t];if(o.tensor!=null)return nr(t,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return py(this.node.rawAttrs,t,e);if(o.s!=null)return uy(this.node.rawAttrs,t,e);if(o.b!=null)return cy(this.node.rawAttrs,t,e);if(o.shape!=null)return hy(this.node.rawAttrs,t,e);if(o.type!=null)return my(this.node.rawAttrs,t,e);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return dy(this.node.rawAttrs,t,e);if(o.list.s!=null)return gy(this.node.rawAttrs,t,e);if(o.list.shape!=null)return xy(this.node.rawAttrs,t,e);if(o.list.b!=null)return yy(this.node.rawAttrs,t,e);if(o.list.type!=null)return fy(this.node.rawAttrs,t,e)}return e}};var Yt={};Jt(Yt,{OP_SCOPE_SUFFIX:()=>p0,abs:()=>de,acos:()=>Kd,acosh:()=>jd,add:()=>K,addN:()=>zk,all:()=>lp,any:()=>cu,argMax:()=>ci,argMin:()=>Xd,asin:()=>Yd,asinh:()=>Zd,atan:()=>Qd,atan2:()=>Jd,atanh:()=>tg,avgPool:()=>dl,avgPool3d:()=>rg,basicLSTMCell:()=>Vk,batchNorm:()=>mi,batchNorm2d:()=>og,batchNorm3d:()=>ng,batchNorm4d:()=>sg,batchToSpaceND:()=>gl,bincount:()=>ig,booleanMaskAsync:()=>RH,broadcastArgs:()=>Uk,broadcastTo:()=>an,buffer:()=>ot,cast:()=>j,ceil:()=>ag,clipByValue:()=>ir,clone:()=>Lr,complex:()=>eo,concat:()=>jt,concat1d:()=>lg,concat2d:()=>ug,concat3d:()=>cg,concat4d:()=>pg,conv1d:()=>cp,conv2d:()=>oo,conv2dTranspose:()=>mp,conv3d:()=>mg,conv3dTranspose:()=>hg,cos:()=>xl,cosh:()=>fp,cosineWindow:()=>bf,cumprod:()=>fu,cumsum:()=>hp,denseBincount:()=>Wk,depthToSpace:()=>dg,depthwiseConv2d:()=>fi,diag:()=>Hk,dilation2d:()=>gg,div:()=>nt,divNoNan:()=>xg,dot:()=>yg,dropout:()=>U0,einsum:()=>qk,elu:()=>hi,enclosingPowerOfTwo:()=>W0,equal:()=>$r,erf:()=>bg,euclideanNorm:()=>wg,exp:()=>Ge,expandDims:()=>Ze,expm1:()=>Cg,eye:()=>du,fft:()=>Tl,fill:()=>di,floor:()=>gi,floorDiv:()=>ap,fused:()=>El,gather:()=>xi,gatherND:()=>VH,greater:()=>Le,greaterEqual:()=>ho,ifft:()=>ma,imag:()=>hl,image:()=>wi,inTopKAsync:()=>WH,irfft:()=>Ep,isFinite:()=>Ig,isInf:()=>Sg,isNaN:()=>vg,leakyRelu:()=>yl,less:()=>dp,lessEqual:()=>go,linalg:()=>q0,linspace:()=>Xk,localResponseNormalization:()=>kg,log:()=>ar,log1p:()=>bl,logSigmoid:()=>Tg,logSoftmax:()=>gp,logSumExp:()=>xp,logicalAnd:()=>Ir,logicalNot:()=>wl,logicalOr:()=>yp,logicalXor:()=>Ng,losses:()=>Wq,lowerBound:()=>Yk,matMul:()=>Lt,max:()=>Cr,maxPool:()=>Cl,maxPool3d:()=>$g,maxPoolWithArgmax:()=>Zk,maximum:()=>so,mean:()=>me,meshgrid:()=>Qk,min:()=>hu,minimum:()=>yi,mirrorPad:()=>Ag,mod:()=>Dg,moments:()=>gu,movingAverage:()=>_H,mul:()=>F,multiRNNCell:()=>Jk,multinomial:()=>tT,neg:()=>Mt,norm:()=>pa,notEqual:()=>us,oneHot:()=>lu,ones:()=>Qe,onesLike:()=>or,op:()=>T,outerProduct:()=>eT,pad:()=>Vr,pad1d:()=>rT,pad2d:()=>oT,pad3d:()=>nT,pad4d:()=>sT,pool:()=>Rg,pow:()=>Br,prelu:()=>Sl,print:()=>Bd,prod:()=>Fg,raggedTensorToTensor:()=>iT,rand:()=>aT,randomGamma:()=>vT,randomNormal:()=>bu,randomStandardNormal:()=>kT,randomUniform:()=>bi,range:()=>vl,real:()=>ca,reciprocal:()=>zg,relu:()=>gr,relu6:()=>bp,reshape:()=>R,reverse:()=>Je,reverse1d:()=>TT,reverse2d:()=>NT,reverse3d:()=>ET,reverse4d:()=>$T,rfft:()=>Nl,round:()=>wp,rsqrt:()=>Cp,scalar:()=>st,scatterND:()=>PH,searchSorted:()=>gf,selu:()=>Ip,separableConv2d:()=>Sp,setdiff1dAsync:()=>AT,sigmoid:()=>Er,sign:()=>Mg,signal:()=>Uq,sin:()=>vp,sinh:()=>kp,slice:()=>Nt,slice1d:()=>Tp,slice2d:()=>yf,slice3d:()=>Np,slice4d:()=>wu,softmax:()=>kl,softplus:()=>ls,spaceToBatchND:()=>Il,sparse:()=>Hq,sparseToDense:()=>MH,spectral:()=>Gq,split:()=>tr,sqrt:()=>pe,square:()=>Ot,squaredDifference:()=>$p,squeeze:()=>xo,stack:()=>Ue,step:()=>un,stridedSlice:()=>Bg,string:()=>qq,sub:()=>et,sum:()=>it,tan:()=>Vg,tanh:()=>pi,tensor:()=>mr,tensor1d:()=>De,tensor2d:()=>fa,tensor3d:()=>Hd,tensor4d:()=>DT,tensor5d:()=>RT,tensor6d:()=>FT,tile:()=>dr,topk:()=>Gg,transpose:()=>Rt,truncatedNormal:()=>Ap,unique:()=>Ug,unsortedSegmentSum:()=>Dp,unstack:()=>lr,upperBound:()=>_T,variable:()=>Wg,where:()=>ye,whereAsync:()=>qg,zeros:()=>ee,zerosLike:()=>bt});var w$=(r,t,e,o=Yt)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(S("a",r,t,e),S("b",r,t,e))];case"AddN":return[o.addN(S("tensors",r,t,e))];case"FloorMod":case"Mod":return[o.mod(S("a",r,t,e),S("b",r,t,e))];case"Mul":return[o.mul(S("a",r,t,e),S("b",r,t,e))];case"RealDiv":case"Div":return[o.div(S("a",r,t,e),S("b",r,t,e))];case"DivNoNan":return[o.divNoNan(S("a",r,t,e),S("b",r,t,e))];case"FloorDiv":return[o.floorDiv(S("a",r,t,e),S("b",r,t,e))];case"Sub":return[o.sub(S("a",r,t,e),S("b",r,t,e))];case"Minimum":return[o.minimum(S("a",r,t,e),S("b",r,t,e))];case"Maximum":return[o.maximum(S("a",r,t,e),S("b",r,t,e))];case"Pow":return[o.pow(S("a",r,t,e),S("b",r,t,e))];case"SquaredDifference":return[o.squaredDifference(S("a",r,t,e),S("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var C$=(r,t,e,o=Yt)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(S("x",r,t,e))];case"Acos":return[o.acos(S("x",r,t,e))];case"Acosh":return[o.acosh(S("x",r,t,e))];case"Asin":return[o.asin(S("x",r,t,e))];case"Asinh":return[o.asinh(S("x",r,t,e))];case"Atan":return[o.atan(S("x",r,t,e))];case"Atan2":return[o.atan2(S("x",r,t,e),S("y",r,t,e))];case"Atanh":return[o.atanh(S("x",r,t,e))];case"Ceil":return[o.ceil(S("x",r,t,e))];case"Complex":return[o.complex(S("real",r,t,e),S("imag",r,t,e))];case"Cos":return[o.cos(S("x",r,t,e))];case"Cosh":return[o.cosh(S("x",r,t,e))];case"Elu":return[o.elu(S("x",r,t,e))];case"Erf":return[o.erf(S("x",r,t,e))];case"Exp":return[o.exp(S("x",r,t,e))];case"Expm1":return[o.expm1(S("x",r,t,e))];case"Floor":return[o.floor(S("x",r,t,e))];case"Log":return[o.log(S("x",r,t,e))];case"Log1p":return[o.log1p(S("x",r,t,e))];case"Imag":return[o.imag(S("x",r,t,e))];case"Neg":return[o.neg(S("x",r,t,e))];case"Reciprocal":return[o.reciprocal(S("x",r,t,e))];case"Real":return[o.real(S("x",r,t,e))];case"Relu":return[o.relu(S("x",r,t,e))];case"Round":return[o.round(S("x",r,t,e))];case"Selu":return[o.selu(S("x",r,t,e))];case"Sigmoid":return[o.sigmoid(S("x",r,t,e))];case"Sin":return[o.sin(S("x",r,t,e))];case"Sign":return[o.sign(S("x",r,t,e))];case"Sinh":return[o.sinh(S("x",r,t,e))];case"Softplus":return[o.softplus(S("x",r,t,e))];case"Sqrt":return[o.sqrt(S("x",r,t,e))];case"Square":return[o.square(S("x",r,t,e))];case"Tanh":return[o.tanh(S("x",r,t,e))];case"Tan":return[o.tan(S("x",r,t,e))];case"ClipByValue":return[o.clipByValue(S("x",r,t,e),S("clipValueMin",r,t,e),S("clipValueMax",r,t,e))];case"Relu6":return[o.relu6(S("x",r,t,e))];case"Rsqrt":return[o.rsqrt(nr(r.inputNames[0],t,e))];case"Prod":return[o.prod(S("x",r,t,e),S("axes",r,t,e))];case"LeakyRelu":return[o.leakyRelu(S("x",r,t,e),S("alpha",r,t,e))];case"Prelu":return[o.prelu(S("x",r,t,e),S("alpha",r,t,e))];case"IsNan":return[o.isNaN(nr(r.inputNames[0],t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function wo(r,t,e=""){if(!(typeof r=="number"||typeof t=="number")){y.assert(r.length===t.length,()=>e+` Shapes ${r} and ${t} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=t[o];y.assert(n<0||s<0||n===s,()=>e+` Shapes ${r} and ${t} must match`)}}}function I$(r){return!(typeof r=="number"||r.some(t=>t<0))}function um(r,t,e){let o=wy(r,e),n=!I$(o);if(n&&t.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&t.forEach(s=>{o=wy(s.shape,o)}),!I$(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function wy(r,t){if(typeof r=="number")return t;if(typeof t=="number")return r;if(r.length!==t.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${t}`);let e=[];for(let o=0;o<r.length;++o){let n=r[o],s=t[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${t}`);e[o]=n>=0?n:s}return e}var Cy=class{constructor(t,e,o,n,s,i,a){this.name=t,this.dtype=e,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=st(0),be(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);let e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=e.shape),wo(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);o.tensor=e,be(e),o.written=!0,this.tensors[t]=o}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((o,n)=>this.write(o,e[n]))}gather(t,e){if(!!e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let n=0;n<this.size();n++)t.push(n)}if(t.length===0)return mr([],[0].concat(this.elementShape));let o=this.readMany(t);return wo(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),Ue(o,0)}concat(t){if(!!t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(this.size()===0)return mr([],[0].concat(this.elementShape));let e=[];for(let n=0;n<this.size();n++)e.push(n);let o=this.readMany(e);return wo(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),jt(o,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let o=Math.max(...t);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(t,lr(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let o=0,n=t.map(l=>(o+=l,o));if(o!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:e.size/o,i=[];M(()=>{e=R(e,[1,o,s]);for(let l=0;l<t.length;++l){let u=l===0?0:n[l-1],c=[0,u,0],p=[1,t[l],s];i[l]=R(Nt(e,c,p),this.elementShape)}return i});let a=[];for(let l=0;l<t.length;l++)a[l]=l;this.writeMany(a,i)}};var Ia=class{constructor(t,e,o,n=-1){this.tensors=t,this.elementShape=e,this.elementDtype=o,t?.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);wo(e,s.shape,"TensorList shape mismatch: "),be(s)}),this.idTensor=st(0),this.maxNumElements=n,be(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Ia([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,o=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);wo(t,this.elementShape,"TensorList shape mismatch: ");let n=um(this.elementShape,this.tensors,t);return M(()=>{let s=this.tensors.map(i=>R(i,n));return Ue(s,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=um(this.elementShape,this.tensors,t),n=this.tensors.pop();return n.kept=!1,wo(n.shape,t,"TensorList shape mismatch: "),R(n,o)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(wo(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");be(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(this.maxNumElements!==-1&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);let e=new Ia([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let o=0;o<Math.min(this.tensors.length,t);++o)e.tensors[o]=this.tensors[o];return e}getItem(t,e,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(this.tensors[t]==null)throw new Error(`element at index ${t} is null.`);wo(this.tensors[t].shape,e,"TensorList shape mismatch: ");let n=um(this.elementShape,this.tensors,e);return R(this.tensors[t],n)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||this.maxNumElements!==-1&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);wo(this.elementShape,e.shape,"TensorList shape mismatch: "),be(e),this.tensors[t]!=null&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,o){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);wo(this.elementShape,o,"TensorList shape mismatch: "),t=t.slice(0,this.size());let n=um(this.elementShape,this.tensors,o);return t.length===0?mr([],[0].concat(n)):M(()=>{let s=t.map(i=>R(this.tensors[i],n));return Ue(s,0)})}concat(t,e){if(!!t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);wo(this.elementShape,e,"TensorList shape mismatch: ");let o=um(this.elementShape,this.tensors,e);return this.size()===0?mr([],[0].concat(o)):M(()=>{let n=this.tensors.map(s=>R(s,o));return jt(n,0)})}};function S$(r,t,e){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==e)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${e}`);let n=r.shape.slice(1);wo(n,t,"TensorList shape mismatch: ");let s=lr(r);return new Ia(s,t,o)}function v$(r,t,e,o){return new Ia([],r,t,o)}function k$(r,t,e,o){if(t.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${r.shape[0]}`);let n=Math.max(...t);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new Ia([],e,r.dtype,o),i=lr(r,0);return t.forEach((a,l)=>{s.setItem(a,i[l])}),s}function T$(r,t,e){let o=0,n=t.map(c=>(o+=c,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),i=wy(s,e),a=o===0?0:r.size/o,l=M(()=>{let c=[];r=R(r,[1,o,a]);for(let p=0;p<t.length;++p){let m=p===0?0:n[p-1],f=[0,m,0],h=[1,t[p],a];c[p]=R(Nt(r,f,h),i)}return r.dispose(),c}),u=new Ia([],e,r.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}var N$=async(r,t,e)=>{switch(r.op){case"If":case"StatelessIf":{let o=S("thenBranch",r,t,e),n=S("elseBranch",r,t,e),s=S("cond",r,t,e),i=S("args",r,t,e);return(await s.data())[0]?e.functionMap[o].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap):e.functionMap[n].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap)}case"While":case"StatelessWhile":{let o=S("body",r,t,e),n=S("cond",r,t,e),s=S("args",r,t,e),i=await e.functionMap[n].executeFunctionAsync(s,e.tensorArrayMap,e.tensorListMap),a=s.map(c=>c.id),l=await i[0].data();i.forEach(c=>{!c.kept&&a.indexOf(c.id)===-1&&c.dispose()});let u=s;for(;l[0];){let c=u;u=await e.functionMap[o].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);let p=u.map(f=>f.id);c.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()});let m=await e.functionMap[n].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);l=await m[0].data(),m.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()})}return u}case"LoopCond":{let o=S("pred",r,t,e);return[gs(o)]}case"Switch":{let o=S("pred",r,t,e),n=S("data",r,t,e);return n.kept||(n=gs(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>nr(n,t,e)!==void 0);if(o){let n=nr(o,t,e);return[gs(n)]}return}case"Enter":{let o=S("frameName",r,t,e),n=S("tensor",r,t,e);return e.enterFrame(o),[gs(n)]}case"Exit":{let o=S("tensor",r,t,e);return e.exitFrame(),[gs(o)]}case"NextIteration":{let o=S("tensor",r,t,e);return e.nextIteration(),[gs(o)]}case"TensorArrayV3":{let o=S("size",r,t,e),n=S("dtype",r,t,e),s=S("elementShape",r,t,e),i=S("dynamicSize",r,t,e),a=S("clearAfterRead",r,t,e),l=S("identicalElementShapes",r,t,e),u=S("name",r,t,e),c=new Cy(u,n,o,s,l,i,a);return e.addTensorArray(c),[c.idTensor,st(1)]}case"TensorArrayWriteV3":{let o=S("tensorArrayId",r,t,e),n=S("index",r,t,e),s=S("tensor",r,t,e),i=e.getTensorArray(o.id);return i.write(n,s),[i.idTensor]}case"TensorArrayReadV3":{let o=S("tensorArrayId",r,t,e),n=S("index",r,t,e);return[e.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=S("tensorArrayId",r,t,e),n=S("indices",r,t,e),s=S("dtype",r,t,e);return[e.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=S("tensorArrayId",r,t,e),n=S("indices",r,t,e),s=S("tensor",r,t,e),i=e.getTensorArray(o.id);return i.scatter(n,s),[i.idTensor]}case"TensorArrayConcatV3":{let o=S("tensorArrayId",r,t,e),n=e.getTensorArray(o.id),s=S("dtype",r,t,e);return[n.concat(s)]}case"TensorArraySplitV3":{let o=S("tensorArrayId",r,t,e),n=S("tensor",r,t,e),s=S("lengths",r,t,e),i=e.getTensorArray(o.id);return i.split(s,n),[i.idTensor]}case"TensorArraySizeV3":{let o=S("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return[st(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=S("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=S("tensorListId",r,t,e),n=S("index",r,t,e),s=S("tensor",r,t,e),i=e.getTensorList(o.id);return i.setItem(n,s),[i.idTensor]}case"TensorListGetItem":{let o=S("tensorListId",r,t,e),n=S("index",r,t,e),s=S("elementShape",r,t,e),i=S("elementDType",r,t,e);return[e.getTensorList(o.id).getItem(n,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let o=S("indices",r,t,e),n=S("tensor",r,t,e),s=S("elementShape",r,t,e),i=S("numElements",r,t,e),a=k$(n,o,s,i);return e.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=S("elementShape",r,t,e),n=S("elementDType",r,t,e),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let i=S(s,r,t,e),a=r.op==="TensorListReserve"?-1:i,l=v$(o,n,i,a);return e.addTensorList(l),[l.idTensor]}case"TensorListGather":{let o=S("tensorListId",r,t,e),n=S("indices",r,t,e),s=S("elementShape",r,t,e),i=S("elementDType",r,t,e);return[e.getTensorList(o.id).gather(n,i,s)]}case"TensorListStack":{let o=S("tensorListId",r,t,e),n=S("elementShape",r,t,e),s=S("elementDType",r,t,e),i=S("numElements",r,t,e);return[e.getTensorList(o.id).stack(n,s,i)]}case"TensorListFromTensor":{let o=S("tensor",r,t,e),n=S("elementShape",r,t,e),s=S("elementDType",r,t,e),i=S$(o,n,s);return e.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=S("tensorListId",r,t,e),n=e.getTensorList(o.id),s=S("dtype",r,t,e),i=S("elementShape",r,t,e);return[n.concat(s,i)]}case"TensorListPushBack":{let o=S("tensorListId",r,t,e),n=S("tensor",r,t,e),s=e.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=S("tensorListId",r,t,e),n=S("elementShape",r,t,e),s=S("elementDType",r,t,e);return[e.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=S("tensor",r,t,e),n=S("elementShape",r,t,e),s=S("lengths",r,t,e),i=T$(o,s,n);return e.addTensorList(i),[i.idTensor]}case"TensorListLength":{let o=S("tensorListId",r,t,e),n=e.getTensorList(o.id);return[st(n.size(),"int32")]}case"TensorListResize":{let o=S("tensorListId",r,t,e),n=S("size",r,t,e),i=e.getTensorList(o.id).resize(n);return e.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function E$(r,t,e){let[o,n]=S("fusedOps",r,t,e),s=o==="biasadd",i=!s,a=n==="prelu",l=o==="fusedbatchnorm",u=S("numArgs",r,t,e);if(s){if(a&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let c=S("strides",r,t,e),p=Wh(r,t,e),m=S("dataFormat",r,t,e).toUpperCase(),f=S("dilations",r,t,e),[h,d]=S("args",r,t,e);i&&(d=h,h=void 0);let g=S("leakyreluAlpha",r,t,e);return{stride:c,pad:p,dataFormat:m,dilations:f,biasArg:h,preluArg:d,activationFunc:n,leakyreluAlpha:g}}var $$=(r,t,e,o=Yt)=>{switch(r.op){case"Conv1D":{let n=S("stride",r,t,e),s=S("pad",r,t,e),i=S("dataFormat",r,t,e).toUpperCase(),a=S("dilation",r,t,e);return[o.conv1d(S("x",r,t,e),S("filter",r,t,e),n,s,i,a)]}case"Conv2D":{let n=S("strides",r,t,e),s=Wh(r,t,e),i=S("dataFormat",r,t,e).toUpperCase(),a=S("dilations",r,t,e);return[o.conv2d(S("x",r,t,e),S("filter",r,t,e),[n[1],n[2]],s,i,[a[1],a[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=E$(r,t,e);return[o.fused.conv2d({x:S("x",r,t,e),filter:S("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=E$(r,t,e);return[o.fused.depthwiseConv2d({x:S("x",r,t,e),filter:S("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=S("outputShape",r,t,e),s=S("strides",r,t,e),i=Wh(r,t,e);return[o.conv2dTranspose(S("x",r,t,e),S("filter",r,t,e),n,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=S("strides",r,t,e),s=Wh(r,t,e),i=S("dilations",r,t,e),a=S("dataFormat",r,t,e).toUpperCase();return[o.depthwiseConv2d(S("input",r,t,e),S("filter",r,t,e),[n[1],n[2]],s,a,[i[1],i[2]])]}case"Conv3D":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("dataFormat",r,t,e).toUpperCase(),a=S("dilations",r,t,e);return[o.conv3d(S("x",r,t,e),S("filter",r,t,e),[n[1],n[2],n[3]],s,i,[a[1],a[2],a[3]])]}case"AvgPool":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("kernelSize",r,t,e);return[o.avgPool(S("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("kernelSize",r,t,e);return[o.maxPool(S("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("kernelSize",r,t,e),a=S("includeBatchInIndex",r,t,e),{result:l,indexes:u}=o.maxPoolWithArgmax(S("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s,a);return[l,u]}case"AvgPool3D":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("kernelSize",r,t,e);return[o.avgPool3d(S("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("kernelSize",r,t,e);return[o.maxPool3d(S("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=S("strides",r,t,e),s=S("pad",r,t,e),i=S("dilations",r,t,e),a=n[1],l=n[2],u=i[1],c=i[2];return[o.dilation2d(S("x",r,t,e),S("filter",r,t,e),[a,l],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var A$=(r,t,e,o=Yt)=>{switch(r.op){case"Fill":{let n=S("shape",r,t,e),s=S("dtype",r,t,e),i=S("value",r,t,e);return[o.fill(n,i,s)]}case"LinSpace":{let n=S("start",r,t,e),s=S("stop",r,t,e),i=S("num",r,t,e);return[o.linspace(n,s,i)]}case"Multinomial":{let n=S("logits",r,t,e),s=S("numSamples",r,t,e),i=S("seed",r,t,e);return[o.multinomial(n,s,i)]}case"OneHot":{let n=S("indices",r,t,e),s=S("depth",r,t,e),i=S("onValue",r,t,e),a=S("offValue",r,t,e),l=S("dtype",r,t,e);return[o.oneHot(n,s,i,a,l)]}case"Ones":return[o.ones(S("shape",r,t,e),S("dtype",r,t,e))];case"OnesLike":return[o.onesLike(S("x",r,t,e))];case"RandomStandardNormal":return[o.randomStandardNormal(S("shape",r,t,e),S("dtype",r,t,e),S("seed",r,t,e))];case"RandomUniform":return[o.randomUniform(S("shape",r,t,e),S("minval",r,t,e),S("maxval",r,t,e),S("dtype",r,t,e))];case"Range":{let n=S("start",r,t,e),s=S("stop",r,t,e),i=S("step",r,t,e);return[o.range(n,s,i,S("dtype",r,t,e))]}case"TruncatedNormal":{let n=S("shape",r,t,e),s=S("mean",r,t,e),i=S("stdDev",r,t,e),a=S("seed",r,t,e);return[o.truncatedNormal(n,s,i,S("dtype",r,t,e),a)]}case"Zeros":return[o.zeros(S("shape",r,t,e),S("dtype",r,t,e))];case"ZerosLike":return[o.zerosLike(S("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function UI(r,t,e){let o=S("boxes",r,t,e),n=S("scores",r,t,e),s=S("maxOutputSize",r,t,e),i=S("iouThreshold",r,t,e),a=S("scoreThreshold",r,t,e),l=S("softNmsSigma",r,t,e);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:i,scoreThreshold:a,softNmsSigma:l}}var D$=async(r,t,e,o,n=Yt)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=UI(r,t,e),p=await n.image.nonMaxSuppressionWithScoreAsync(s,i,a,l,u,c);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=UI(r,t,e),c=S("padToMaxOutputSize",r,t,e),p=await n.image.nonMaxSuppressionPaddedAsync(s,i,a,l,u,c);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=UI(r,t,e);return[await n.image.nonMaxSuppressionAsync(s,i,a,l,u)]}case"Where":{let s=n.cast(S("condition",r,t,e),"bool"),i=[await n.whereAsync(s)];return s.dispose(),i}case"ListDiff":return n.setdiff1dAsync(S("x",r,t,e),S("y",r,t,e));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var R$=(r,t,e,o=Yt)=>{switch(r.op){case"LowerBound":{let n=S("sortedSequence",r,t,e),s=S("values",r,t,e);return[o.lowerBound(n,s)]}case"TopKV2":{let n=S("x",r,t,e),s=S("k",r,t,e),i=S("sorted",r,t,e),a=o.topk(n,s,i);return[a.values,a.indices]}case"UpperBound":{let n=S("sortedSequence",r,t,e),s=S("values",r,t,e);return[o.upperBound(n,s)]}case"Unique":{let n=S("x",r,t,e),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=S("x",r,t,e),s=S("axis",r,t,e),i=o.unique(n,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var F$=(r,t,e,o=Yt)=>{switch(r.op){case"Const":return t[r.name];case"PlaceholderWithDefault":let n=S("default",r,t,e);return[nr(r.name,t,e)||n];case"Placeholder":return[nr(r.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let c=S("x",r,t,e);return[gs(c)]}case"IdentityN":return S("x",r,t,e).map(c=>gs(c));case"Snapshot":let s=S("x",r,t,e);return[gs(s)];case"Shape":return[o.tensor1d(S("x",r,t,e).shape,"int32")];case"ShapeN":return S("x",r,t,e).map(c=>o.tensor1d(c.shape));case"Size":return[o.scalar(S("x",r,t,e).size,"int32")];case"Rank":return[o.scalar(S("x",r,t,e).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let i=S("x",r,t,e),a=S("data",r,t,e),l=S("message",r,t,e),u=S("summarize",r,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Iy=class{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=st(0),this.tensorMap=new Map,be(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return st(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),M(()=>{let n=lr(e),s=o.length,i=n.length;y.assert(s===i,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${i} elements.`);for(let a=0;a<s;a++){let l=o[a],u=n[a];be(u),this.tensorMap.set(l,u)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return M(()=>{let n=[];for(let s=0;s<o.length;s++){let i=o[s],a=this.findWithDefault(i,e);n.push(a)}return Ue(n)})}findWithDefault(t,e){let o=this.tensorMap.get(t);return o??e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}};var _$=async(r,t,e,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=S("keyDType",r,t,e),s=S("valueDType",r,t,e),i=new Iy(n,s);return o.addHashTable(r.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{let n=S("tableHandle",r,t,e,o),s=S("keys",r,t,e),i=S("values",r,t,e);return[await o.getHashTableById(n.id).import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let n=S("tableHandle",r,t,e,o),s=S("keys",r,t,e),i=S("defaultValue",r,t,e);return[await o.getHashTableById(n.id).find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=S("tableHandle",r,t,e,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var O$=(r,t,e,o=Yt)=>{switch(r.op){case"ResizeBilinear":{let n=S("images",r,t,e),s=S("size",r,t,e),i=S("alignCorners",r,t,e),a=S("halfPixelCenters",r,t,e);return[o.image.resizeBilinear(n,[s[0],s[1]],i,a)]}case"ResizeNearestNeighbor":{let n=S("images",r,t,e),s=S("size",r,t,e),i=S("alignCorners",r,t,e),a=S("halfPixelCenters",r,t,e);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],i,a)]}case"CropAndResize":{let n=S("image",r,t,e),s=S("boxes",r,t,e),i=S("boxInd",r,t,e),a=S("cropSize",r,t,e),l=S("method",r,t,e),u=S("extrapolationValue",r,t,e);return[o.image.cropAndResize(n,s,i,a,l,u)]}case"ImageProjectiveTransformV3":{let n=S("images",r,t,e),s=S("transforms",r,t,e),i=S("outputShape",r,t,e),a=S("fillValue",r,t,e),l=S("interpolation",r,t,e),u=S("fillMode",r,t,e);return[o.image.transform(n,s,l.toLowerCase(),u.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var P$=(r,t,e,o=Yt)=>{switch(r.op){case"Equal":return[o.equal(S("a",r,t,e),S("b",r,t,e))];case"NotEqual":return[o.notEqual(S("a",r,t,e),S("b",r,t,e))];case"Greater":return[o.greater(S("a",r,t,e),S("b",r,t,e))];case"GreaterEqual":return[o.greaterEqual(S("a",r,t,e),S("b",r,t,e))];case"Less":return[o.less(S("a",r,t,e),S("b",r,t,e))];case"LessEqual":return[o.lessEqual(S("a",r,t,e),S("b",r,t,e))];case"LogicalAnd":return[o.logicalAnd(S("a",r,t,e),S("b",r,t,e))];case"LogicalNot":return[o.logicalNot(S("a",r,t,e))];case"LogicalOr":return[o.logicalOr(S("a",r,t,e),S("b",r,t,e))];case"Select":case"SelectV2":return[o.where(S("condition",r,t,e),S("a",r,t,e),S("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var L$=(r,t,e,o=Yt)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(S("a",r,t,e),S("b",r,t,e),S("transposeA",r,t,e),S("transposeB",r,t,e))];case"Einsum":return[o.einsum(S("equation",r,t,e),...S("tensors",r,t,e))];case"Transpose":return[o.transpose(S("x",r,t,e),S("perm",r,t,e))];case"_FusedMatMul":let[n,s]=S("fusedOps",r,t,e),i=n==="biasadd",a=s==="prelu",l=S("numArgs",r,t,e),u=S("leakyreluAlpha",r,t,e);if(i){if(a&&l!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&l!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[c,p]=S("args",r,t,e);return[o.fused.matMul({a:S("a",r,t,e),b:S("b",r,t,e),transposeA:S("transposeA",r,t,e),transposeB:S("transposeB",r,t,e),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var z$=(r,t,e,o=Yt)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(S("x",r,t,e),S("axis",r,t,e),S("keepDims",r,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(S("x",r,t,e),S("mean",r,t,e),S("variance",r,t,e),S("offset",r,t,e),S("scale",r,t,e),S("epsilon",r,t,e))];case"FusedBatchNormV3":return[o.batchNorm(S("x",r,t,e),S("mean",r,t,e),S("variance",r,t,e),S("offset",r,t,e),S("scale",r,t,e),S("epsilon",r,t,e))];case"LRN":return[o.localResponseNormalization(S("x",r,t,e),S("radius",r,t,e),S("bias",r,t,e),S("alpha",r,t,e),S("beta",r,t,e))];case"Softmax":return[o.softmax(S("x",r,t,e))];case"LogSoftmax":return[o.logSoftmax(S("x",r,t,e))];case"SparseToDense":return[o.sparseToDense(S("sparseIndices",r,t,e),S("outputShape",r,t,e),S("sparseValues",r,t,e),S("defaultValue",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var M$=(r,t,e,o=Yt)=>{switch(r.op){case"Max":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.max(S("x",r,t,e),a,l)]}case"Mean":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.mean(S("x",r,t,e),a,l)]}case"Min":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.min(S("x",r,t,e),a,l)]}case"Sum":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.sum(S("x",r,t,e),a,l)]}case"All":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.all(S("x",r,t,e),a,l)]}case"Any":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.any(S("x",r,t,e),a,l)]}case"ArgMax":{let a=S("axis",r,t,e);return[o.argMax(S("x",r,t,e),a)]}case"ArgMin":{let a=S("axis",r,t,e);return[o.argMin(S("x",r,t,e),a)]}case"Prod":{let a=S("axis",r,t,e),l=S("keepDims",r,t,e);return[o.prod(S("x",r,t,e),a,l)]}case"Cumprod":{let a=S("axis",r,t,e),l=S("exclusive",r,t,e),u=S("reverse",r,t,e);return[o.cumprod(S("x",r,t,e),a,l,u)]}case"Cumsum":{let a=S("axis",r,t,e),l=S("exclusive",r,t,e),u=S("reverse",r,t,e);return[o.cumsum(S("x",r,t,e),a,l,u)]}case"Bincount":let n=S("x",r,t,e),s=S("weights",r,t,e),i=S("size",r,t,e);return[o.bincount(n,s,i)];case"DenseBincount":{let a=S("x",r,t,e),l=S("weights",r,t,e),u=S("size",r,t,e),c=S("binaryOutput",r,t,e);return[o.denseBincount(a,l,u,c)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var B$=(r,t,e,o=Yt)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=S("n",r,t,e),s=S("axis",r,t,e),i=S("tensors",r,t,e);return i=i.slice(0,n),[o.concat(i,s)]}case"Gather":{let n=S("x",r,t,e),s=S("indices",r,t,e);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=S("axis",r,t,e),s=S("batchDims",r,t,e),i=S("x",r,t,e),a=S("indices",r,t,e);return[o.gather(i,o.cast(a,"int32"),n,s)]}case"Reverse":{let n=S("dims",r,t,e),s=[];for(let a=0;a<n.length;a++)n[a]&&s.push(a);let i=S("x",r,t,e);return[o.reverse(i,s)]}case"ReverseV2":{let n=S("axis",r,t,e),s=S("x",r,t,e);return[o.reverse(s,n)]}case"Slice":{let n=S("begin",r,t,e),s=S("size",r,t,e);return[o.slice(S("x",r,t,e),n,s)]}case"StridedSlice":{let n=S("begin",r,t,e),s=S("end",r,t,e),i=S("strides",r,t,e),a=S("beginMask",r,t,e),l=S("endMask",r,t,e),u=S("ellipsisMask",r,t,e),c=S("newAxisMask",r,t,e),p=S("shrinkAxisMask",r,t,e),m=S("x",r,t,e);return[o.stridedSlice(m,n,s,i,a,l,u,c,p)]}case"Pack":return M(()=>{let n=S("axis",r,t,e),s=S("tensors",r,t,e),i=s[0].shape,a=o.squeeze(s[0]).shape,l=s.map(u=>{let c=y.arraysEqual(u.shape,i);if(!c&&!y.arraysEqual(o.squeeze(u).shape,a))throw new Error("the input tensors shape does not match");return c?u:o.reshape(u,i)});return[o.stack(l,n)]});case"Unpack":{let n=S("axis",r,t,e),s=S("tensor",r,t,e);return o.unstack(s,n)}case"Tile":{let n=S("reps",r,t,e);return[o.tile(S("x",r,t,e),n)]}case"Split":case"SplitV":{let n=S("axis",r,t,e),s=S("numOrSizeSplits",r,t,e),i=S("x",r,t,e);return o.split(i,s,n)}case"ScatterNd":{let n=S("indices",r,t,e),s=S("values",r,t,e),i=S("shape",r,t,e);return[o.scatterND(n,s,i)]}case"GatherNd":{let n=S("x",r,t,e),s=S("indices",r,t,e);return[o.gatherND(n,s)]}case"SparseToDense":{let n=S("sparseIndices",r,t,e),s=S("outputShape",r,t,e),i=S("sparseValues",r,t,e),a=S("defaultValue",r,t,e);return[o.sparseToDense(n,i,s,i.dtype===a.dtype?a:o.cast(a,i.dtype))]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var V$=(r,t,e,o=Yt)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:i,reverseIndexMap:a}=o.sparse.sparseFillEmptyRows(S("indices",r,t,e),S("values",r,t,e),S("denseShape",r,t,e),S("defaultValue",r,t,e));return[n,s,i,a]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(S("inputIndices",r,t,e),S("inputShape",r,t,e),S("newShape",r,t,e));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(S("data",r,t,e),S("indices",r,t,e),S("segmentIds",r,t,e))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(S("data",r,t,e),S("indices",r,t,e),S("segmentIds",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var G$=(r,t,e,o=Yt)=>{switch(r.op){case"FFT":return[o.fft(S("x",r,t,e))];case"IFFT":return[o.ifft(S("x",r,t,e))];case"RFFT":return[o.rfft(S("x",r,t,e))];case"IRFFT":return[o.irfft(S("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var U$=(r,t,e,o=Yt)=>{switch(r.op){case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(S("data",r,t,e),S("dataSplits",r,t,e),S("separator",r,t,e),S("nGramWidths",r,t,e),S("leftPad",r,t,e),S("rightPad",r,t,e),S("padWidth",r,t,e),S("preserveShortSequences",r,t,e));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:i}=o.string.stringSplit(S("input",r,t,e),S("delimiter",r,t,e),S("skipEmpty",r,t,e));return[n,s,i]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(S("input",r,t,e),S("numBuckets",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var W$=(r,t,e,o=Yt)=>{switch(r.op){case"Cast":return[o.cast(S("x",r,t,e),S("dtype",r,t,e))];case"ExpandDims":{let n=S("axis",r,t,e);return[o.expandDims(S("x",r,t,e),n)]}case"Squeeze":{let n=S("axis",r,t,e);return[o.squeeze(S("x",r,t,e),n)]}case"Reshape":return[o.reshape(S("x",r,t,e),S("shape",r,t,e))];case"MirrorPad":return[o.mirrorPad(S("x",r,t,e),S("padding",r,t,e),S("mode",r,t,e))];case"PadV2":case"Pad":return[o.pad(S("x",r,t,e),S("padding",r,t,e),S("constantValue",r,t,e))];case"SpaceToBatchND":{let n=S("blockShape",r,t,e),s=S("paddings",r,t,e);return[o.spaceToBatchND(S("x",r,t,e),n,s)]}case"BatchToSpaceND":{let n=S("blockShape",r,t,e),s=S("crops",r,t,e);return[o.batchToSpaceND(S("x",r,t,e),n,s)]}case"DepthToSpace":{let n=S("blockSize",r,t,e),s=S("dataFormat",r,t,e).toUpperCase();return[o.depthToSpace(S("x",r,t,e),n,s)]}case"BroadcastTo":return[o.broadcastTo(S("x",r,t,e),S("shape",r,t,e))];case"BroadcastArgs":return[o.broadcastArgs(S("s0",r,t,e),S("s1",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function WI(r,t,e,o,n=M){let s=((i,a,l)=>{switch(i.category){case"arithmetic":return n(()=>w$(i,a,l));case"basic_math":return n(()=>C$(i,a,l));case"control":return N$(i,a,l);case"convolution":return n(()=>$$(i,a,l));case"creation":return n(()=>A$(i,a,l));case"dynamic":return D$(i,a,l);case"evaluation":return n(()=>R$(i,a,l));case"image":return n(()=>O$(i,a,l));case"graph":return n(()=>F$(i,a,l));case"logical":return n(()=>P$(i,a,l));case"matrices":return n(()=>L$(i,a,l));case"normalization":return n(()=>z$(i,a,l));case"reduction":return n(()=>M$(i,a,l));case"slice_join":return n(()=>B$(i,a,l));case"sparse":return n(()=>V$(i,a,l));case"spectral":return n(()=>G$(i,a,l));case"string":return n(()=>U$(i,a,l));case"transformation":return n(()=>W$(i,a,l));case"hash_table":return _$(i,a,l,o);case"custom":let u=ay(i.op);if(u&&u.customExecutor)return u.customExecutor(new by(i,a,l));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,t,e);return y.isPromise(s)?s.then(i=>[].concat(i)):[].concat(s)}var qh=class{constructor(t={},e={},o={},n={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=o,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let t=[];for(let e=0;e<this.contexts.length-1;e++){let o=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(o))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>e.id===0&&e.iterationId===0?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(let e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(let e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}};function HI(r,t,e,o){let n=new Set,s=[],i=null,a=null,l=new Set,u=Object.keys(r).map(m=>Kr(m)[0]),c=[];o!=null&&(c=o.map(m=>Kr(m.name)[0]));let p=[...t];for(;p.length>0;){let m=p.pop();if((qI(m)||pX(m)||mX(m))&&i==null&&(i=m,a=i.children.map(f=>f.name).filter(f=>n.has(f))),n.add(m.name),e[m.name]==null&&u.indexOf(m.name)===-1&&c.indexOf(m.name)===-1){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(f=>{l.has(f.name)||(l.add(f.name),p.push(f))})}}return{inputs:r,outputs:t,usedNodes:n,missingInputs:s,dynamicNode:i,syncInputs:a}}function H$(r,t,e){let{usedNodes:o,inputs:n}=e,s=[],i=Object.keys(n).map(c=>Kr(c)[0]).map(c=>r.nodes[c]),a=r.initNodes;i.forEach(c=>{o.has(c.name)&&s.push(c)}),r.weights.forEach(c=>{o.has(c.name)&&s.push(c)}),a?.forEach(c=>{o.has(c.name)&&s.push(c)});let l=new Set,u=[];for(;s.length>0;){let c=s.pop();l.add(c.name),t[c.name]||u.push(c),c.children.forEach(p=>{!l.has(p.name)&&o.has(p.name)&&p.inputs.every(m=>l.has(m.name))&&s.push(p)})}return u}var lX=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],uX=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],cX=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function qI(r){return lX.indexOf(r.op)>=0}function pX(r){return uX.indexOf(r.op)>=0}function mX(r){return cX.indexOf(r.op)>=0}var Pu=class{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,t.functions!=null&&Object.keys(t.functions).forEach(o=>{this._functionExecutorMap[o]=new Pu(t.functions[o],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){let e=Object.keys(t).map(o=>t[o].map(n=>n.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{let e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){let o=t.map(s=>s.name).sort(),n=e.map(s=>s.name).sort();return o.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)}compile(t,e){let o=HI(t,e,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:i}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let a=e.map(u=>u.name),l=Object.keys(t);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${l}]. Missing the following inputs: [${n}]`)}return H$(this.graph,this.weightMap,o)}execute(t,e){t=this.mapInputs(t);let o=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);let n=o.map(p=>this.graph.nodes[Kr(p)[0]]),s=e.map(p=>Kr(p)[0]),i=s.map(p=>this.graph.nodes[p]);this.resetIntermediateTensors(),i.length===0&&(i=this._outputs);let a=this.getCompilationKey(n,i),l=this.compiledMap.get(a);l==null&&(l=this.compile(t,i),this.compiledMap.set(a,l));let u={},c={};return M(()=>{let p=new qh(this.weightMap,u,c,this.functionExecutorMap),m=Object.assign({},this.weightMap);Object.keys(t).forEach(d=>{let[g,x]=Kr(d),b=[];b[x]=t[d],m[g]=b});let f=this.getFrozenTensorIds(m),h={};for(let d=0;d<l.length;d++){let g=l[d];if(!m[g.name]){let x=WI(g,m,p,this._resourceManager);if(y.isPromise(x))throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);m[g.name]=x,this.checkTensorForDisposal(g.name,g,m,p,f,s,h)}}return this.parent==null&&p.dispose(f),e.map(d=>nr(d,m,p))})}getFrozenTensorIds(t){let e=[].concat.apply([],Object.keys(t).map(o=>t[o]).map(o=>o.map(n=>n.id)));return new Set(e)}checkTensorForDisposal(t,e,o,n,s,i,a){e.category==="control"||i.indexOf(t)!==-1||(o[t].forEach(l=>{l!=null&&(a[l.id]=(a[l.id]||0)+e.children.length)}),e.inputs.forEach(l=>{if(l.category!=="control"){let u=g$(l.name,o,n);u?.forEach(c=>{if(c&&!c.kept&&!s.has(c.id)){let p=a[c.id];if(p===1){if(!this.keepTensorForDebug)c.dispose();else{let[m,f]=wn(e.name,n);this.intermediateTensors[m]?this.intermediateTensors[m][f]=c:(this.intermediateTensors[m]=[],this.intermediateTensors[m][f]=c)}delete a[c.id]}else p!=null&&a[c.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){!this.intermediateTensors||(Object.keys(this.intermediateTensors).forEach(t=>this.intermediateTensors[t].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){!this.tensorsMap||Object.keys(this.tensorsMap).forEach(t=>{this.tensorsMap[t].forEach(o=>{o&&!o.kept&&!o.isDisposed&&!this.keepIds.has(o.id)&&o.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(let t in this.intermediateTensors)this.intermediateTensors[t].forEach(e=>e.dispose()),delete this.intermediateTensors[t]}async _executeAsync(t,e,o=!1,n={},s={}){o||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepTensorForDebug=L().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(c){console.warn(c.message)}this.resetIntermediateTensors();let i=new qh(this.weightMap,n,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(t,i,e,o);let a=e.map(c=>nr(c,this.tensorsMap,i)),l=a.map(c=>c.id),u=Object.keys(t).map(c=>t[c].id);return this.keepIds=new Set([...l,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),this.parent==null&&i.dispose(this.keepIds),a}async executeFunctionAsync(t,e,o){let n=t.reduce((s,i,a)=>(s[this.inputs[a].name]=i,s),{});return this._executeAsync(n,this.outputNodes,!0,e,o)}async executeWithControlFlow(t,e,o,n){let s=Object.keys(t),i=s.map(w=>this.graph.nodes[Kr(w)[0]]),a=o.map(w=>Kr(w)[0]),l=a.map(w=>this.graph.nodes[w]);l.length===0&&(l=this._outputs);let{usedNodes:u,missingInputs:c,dynamicNode:p,syncInputs:m}=HI(t,l,this.weightMap,this._initNodes),f=[...i,...this.graph.weights,...this._initNodes||[]].map(w=>({node:w,contexts:e.currentContext})),h=Object.assign({},this.weightMap);Object.keys(t).forEach(w=>{let[C,k]=Kr(w),E=[];E[k]=t[w],h[C]=E});let d={},g=this.getFrozenTensorIds(h),x={};for(;f.length>0;){let w=this.processStack(i,f,e,h,x,g,a,d,u);await Promise.all(w)}p==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let b=l.filter(w=>!qI(w)&&!nr(w.name,h,e)).map(w=>w.name);if(b.length>0){let w="";throw p!=null&&(w=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${w}`)}return h}processStack(t,e,o,n,s,i,a,l,u){let c=[];for(;e.length>0;){let p=e.pop();o.currentContext=p.contexts;let m="";if(p.node.op==="Enter"&&S("isConstant",p.node,n,o)&&([m]=wn(p.node.name,o)),n[p.node.name]==null){let f=WI(p.node,n,o,this._resourceManager);m||([m]=wn(p.node.name,o));let h=o.currentContext;y.isPromise(f)?c.push(f.then(d=>(n[m]=d,o.currentContext=h,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u),d))):(n[m]=f,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u))}else this.processChildNodes(p.node,e,o,n,s,u)}return c}processChildNodes(t,e,o,n,s,i){t.children.forEach(a=>{let[l]=wn(a.name,o);s[l]||!i.has(a.name)||(a.op==="Merge"?a.inputNames.some(u=>!!nr(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})):a.inputNames.every(u=>!!nr(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{let o=t[e],[n]=Kr(e),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let i=s.attrParams.shape.value,a=i.length===o.shape.length&&o.shape.every((l,u)=>i[u]===-1||i[u]===l);y.assert(a,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&y.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(t){let e={};for(let o in t)if(this._signature!=null&&this._signature.inputs!=null&&this._signature.inputs[o]!=null){let n=this._signature.inputs[o];e[n.name]=t[o]}else e[o]=t[o];return e}checkInputs(t){let e=Object.keys(t).filter(o=>{let[n]=Kr(o);return this.graph.nodes[n]==null});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>this._signature!=null&&this._signature.outputs!=null&&this._signature.outputs[e]!=null?this._signature.outputs[e].name:e,{})}checkOutputs(t){t.forEach(e=>{let[o]=Kr(e);if(!this.graph.nodes[o])throw new Error(`The output '${e}' is not found in the graph`)})}};var Sy=class{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(let t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(let t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}};var fX="?tfjs-format=file",hX="model.json",vy=class{constructor(t,e={},o=as){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=o,e==null&&(this.loadOptions={}),this.resourceManager=new Sy}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){let t=this.modelUrl;if(t.load!=null)this.handler=t;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{let e=this.io.getLoadHandlers(t,this.loadOptions);if(e.length===0)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let t=this.handler.load();return y.isPromise(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;let e=this.artifacts.modelTopology,o=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(o=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}this.signature=o,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;let n=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Pu(Hh.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,t.modelInitializer!=null&&t.modelInitializer.node!=null){let s=Hh.Instance.transformGraph(t.modelInitializer);this.initializer=new Pu(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if(typeof t=="string"){let o=this.io.getSaveHandlers(t);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${t}'`);t=o[0]}if(t.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){let o=this.execute(t,this.outputNodes);if(this.structuredOutputKeys){let n=o instanceof Pt?[o]:o,s={};return n.forEach((i,a)=>s[this.structuredOutputKeys[a]]=i),s}return o}normalizeInputs(t){if(!(t instanceof Pt)&&!Array.isArray(t))return t;if(t=Array.isArray(t)?t:[t],t.length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,o,n)=>(e[o]=t[n],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=this.executor.execute(t,e);return o.length>1?o:o[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=await this.executor.executeAsync(t,e);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,o)=>(e[o]=[t[o]],e),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}};async function KI(r,t={},e=as){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");t==null&&(t={}),t.fromTFHub&&typeof r=="string"&&(r=dX(r));let o=new vy(r,t,e);return await o.load(),o}function dX(r){return r.endsWith("/")||(r=r+"/"),`${r}${hX}${fX}`}var rA=Xm(xf());var J$=Xm(xf());function K$(r,t){return j$(r,t)}function j$(r,t,e=new Map,o=new Set){if(r==null)return null;if(typeof Blob=="function"&&r instanceof Blob)return r.slice();if(o.has(r))throw new Error("Circular references are not supported.");if(e.has(r))return e.get(r);let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(n.recurse)if(cm(r)){let s=Array.isArray(r)?[]:{};o.add(r);for(let i in r){let a=r[i],l=j$(a,t,e,o);s[i]=l}return o.delete(r),r.__proto__&&(s.__proto__=r.__proto__),s}else throw new Error(`Can't recurse into non-iterable type: ${r}`);else return e.set(r,n.value),n.value}function X$(r,t=jI){return Y$(r,t)}function Y$(r,t,e=new Set){let o=r[0];if(e.has(o))throw new Error("Circular references are not supported.");let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(n.recurse)if(cm(o)){let s=Array.isArray(o)?[]:{};e.add(o);for(let i in o){let a=r.map(u=>u[i]),l=Y$(a,t,e);s[i]=l}return e.delete(o),s}else throw new Error(`Can't recurse into non-iterable type: ${o}`);else return n.value}function jI(r){return r===null?null:cm(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}function cm(r){let t=!1;if(L().get("IS_BROWSER"))t=r instanceof TextDecoder;else{let{StringDecoder:e}=q$();t=r instanceof e}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof Pt)&&!(r instanceof Promise)&&!t)}function Z$(r){return r==null||xX(r)||Array.isArray(r)||typeof r=="object"&&r instanceof Pt||y.isTypedArray(r)}function xX(r){return r===null||typeof r!="object"&&typeof r!="function"}function Q$(r){return K$(r,yX)}function yX(r){return r instanceof Pt?{value:r.clone(),recurse:!1}:cm(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}var pm=class{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,t==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(let e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let e=this.wrap(this.begin+t),o=this.get(e);return this.set(e,this.pop()),o}};var Lu=class extends pm{constructor(){super(Lu.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){let t=this.capacity*2,e=new Array(t),o=this.length();for(let n=0;n<o;n++)e[n]=this.get(this.wrap(this.begin+n));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=o}};Lu.INITIAL_CAPACITY=32;function tA(r){return new XI(r)}function aS(r){return new YI(r)}function eA(r,t){return new Ty(r,t)}var xr=class{async toArray(){let t=[],e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){let t=this.prefetch(100),e=[],o=await t.next();for(;!o.done;)e.push(o.value),o=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),o=t(e.value);for(;!e.done&&o;)e=await this.next(),o=t(e.value)}handleErrors(t){return new oS(this,t)}filter(t){return new eS(this,t)}map(t){return new rS(this,t)}mapAsync(t){return new ky(this,t)}serialMapAsync(t){return new ky(this,t).serial()}flatmap(t){return new nS(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(e=>e===!0)}rowMajorBatch(t,e=!0){return new tS(this,t,e)}columnMajorBatch(t,e=!0,o=jI){return this.rowMajorBatch(t,e).map(s=>X$(s,o))}concatenate(t,e){return new Ty(tA([this,t]),e)}take(t){return t<0||t==null?this:new JI(this,t)}skip(t){return t<0||t==null?this:new QI(this,t)}prefetch(t){return new Ny(this,t)}shuffle(t,e){return new iS(this,t,e)}serial(){return new ZI(this)}},XI=class extends xr{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let t=this.items[this.trav];return this.trav++,{value:Q$(t),done:!1}}},YI=class extends xr{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}},ZI=class extends xr{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}},QI=class extends xr{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let t=await this.upstream.next();if(t.done)return t;St(t.value)}return this.upstream.next()}},JI=class extends xr{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}},tS=class extends xr{constructor(t,e,o=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=o,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let t=[];for(;t.length<this.batchSize;){let e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}},eS=class extends xr{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;St(t.value)}}},rS=class extends xr{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=sn.getTensorsInContainer(t.value),o=this.transform(t.value),n=sn.getTensorsInContainer(o);for(let s of e)sn.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},oS=class extends xr{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}},ky=class extends xr{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=sn.getTensorsInContainer(t.value),o=await this.transform(t.value),n=sn.getTensorsInContainer(o);for(let s of e)sn.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},Kh=class extends xr{constructor(){super(),this.outputQueue=new Lu,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}},nS=class extends Kh{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let t=await this.upstream.next();if(t.done)return!1;let e=sn.getTensorsInContainer(t.value),o=this.transform(t.value),n=sn.getTensorsInContainer(o);this.outputQueue.pushAll(o);for(let s of e)sn.isTensorInList(s,n)||s.dispose();return!0}},Ty=class extends xr{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,this.iterator==null){let o=await this.moreIterators.next();if(o.done)return{value:null,done:!0};this.iterator=o.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}},sS;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(sS||(sS={}));var Ny=class extends xr{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new pm(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}},iS=class extends Ny{constructor(t,e,o){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=J$.alea(o||y.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(e.done)this.upstreamExhausted=!0;else return this.refill(),e}return{value:null,done:!0}}};var zu=class{constructor(){this.size=null}batch(t,e=!0){let o=this;y.assert(t>0,()=>`batchSize needs to be positive, but it is
      ${t}`);let n;return this.size===1/0||this.size==null?n=this.size:e?n=Math.ceil(this.size/t):n=Math.floor(this.size/t),xs(async()=>(await o.iterator()).columnMajorBatch(t,e,wX),n)}concatenate(t){let e=this,o;return this.size===1/0||t.size===1/0?o=1/0:this.size!=null&&t.size!=null?o=this.size+t.size:o=null,xs(async()=>(await e.iterator()).concatenate(await t.iterator()),o)}filter(t){let e=this,o;return this.size===1/0?o=1/0:o=null,xs(async()=>(await e.iterator()).filter(n=>M(()=>t(n))),o)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){let e=this;return xs(async()=>(await e.iterator()).map(o=>M(()=>t(o))),this.size)}mapAsync(t){let e=this;return xs(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(t==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let e=this;return xs(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){let e=this,o;return this.size!=null&&t>0?o=this.size*t:t===0?o=0:this.size!=null&&(t===void 0||t<0)?o=1/0:o=null,xs(async()=>{let n=aS(async()=>({value:await e.iterator(),done:!1}));return eA(n.take(t))},o)}skip(t){let e=this,o;return this.size!=null&&t>=0&&this.size>=t?o=this.size-t:this.size!=null&&(this.size<t||t===void 0||t<0)?o=0:o=null,xs(async()=>(await e.iterator()).skip(t),o)}shuffle(t,e,o=!0){if(t==null||t<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,s=rA.alea(e||y.now().toString());return xs(async()=>{let i=s.int32();return o&&(i+=s.int32()),(await n.iterator()).shuffle(t,i.toString())},this.size)}take(t){let e=this,o;return this.size!=null&&this.size>t?o=t:this.size!=null&&this.size<=t?o=this.size:o=null,xs(async()=>(await e.iterator()).take(t),o)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}};zu.MAX_BUFFER_SIZE=1e4;function xs(r,t=null){return new class extends zu{constructor(){super(...arguments),this.size=t}async iterator(){return r()}}}function wX(r){if(r===null)return null;let t=r[0];return Z$(t)?{value:CX(r),recurse:!1}:{value:null,recurse:!0}}function CX(r){if(r.length===0)throw new Error("Can't make a batch of zero elements.");return r[0]instanceof Pt?Ue(r):mr(r)}var Xre=Symbol("out"),Yre=Symbol("field"),Zre=Symbol("quote"),Qre=Symbol("quoteafterquote"),Jre=Symbol("quoteinquote");function Y(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}var DX=er.whereImpl,Mu=class extends _n{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new _i(this,zr())}nextDataId(){return Mu.nextDataId++}write(t,e,o){this.firstUse&&(this.firstUse=!1,L().get("IS_NODE")&&I.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:t,dtype:o,refCount:1}),n}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return{dataId:n,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){let e=this.data.get(t);e.refCount++}decRef(t){if(this.data.has(t)){let e=this.data.get(t);e.refCount--}}move(t,e,o,n,s){this.data.set(t,{values:e,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){let{dtype:e,complexTensorInfos:o}=this.data.get(t);if(e==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return I.mergeRealAndImagArrays(n,s)}return this.data.get(t).values}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return ot(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return ot(t.shape,t.dtype,e)}makeOutput(t,e,o){return zr().makeTensorFromTensorInfo(this.makeTensorInfo(e,o,t),this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(t);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){let e=y.now();return t(),{kernelMs:y.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){Y([t],"where");let e=this.readSync(t.dataId);return DX(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Mu.nextDataId=0;var _S={};Jt(_S,{addImpl:()=>cS,bincountImpl:()=>hm,bincountReduceImpl:()=>Ey,castImpl:()=>uS,ceilImpl:()=>pS,concatImpl:()=>$y,equalImpl:()=>mS,expImpl:()=>hS,expm1Impl:()=>gS,floorImpl:()=>xS,gatherNdImpl:()=>Ay,gatherV2Impl:()=>Dy,greaterEqualImpl:()=>bS,greaterImpl:()=>yS,lessEqualImpl:()=>CS,lessImpl:()=>wS,linSpaceImpl:()=>Ry,logImpl:()=>IS,maxImpl:()=>Fy,maximumImpl:()=>SS,minimumImpl:()=>vS,multiplyImpl:()=>jh,negImpl:()=>kS,notEqualImpl:()=>TS,prodImpl:()=>NS,raggedTensorToTensorImpl:()=>_y,rangeImpl:()=>Oy,rsqrtImpl:()=>ES,scatterImpl:()=>Sa,sigmoidImpl:()=>$A,simpleAbsImpl:()=>lS,sliceImpl:()=>AS,sparseFillEmptyRowsImpl:()=>Py,sparseReshapeImpl:()=>Ly,sparseSegmentReductionImpl:()=>xm,sqrtImpl:()=>RA,squaredDifferenceImpl:()=>DS,stridedSliceImpl:()=>zy,stringNGramsImpl:()=>My,stringSplitImpl:()=>By,stringToHashBucketFastImpl:()=>Vy,subImpl:()=>FS,tileImpl:()=>Gy,topKImpl:()=>Uy,transposeImpl:()=>dm,uniqueImpl:()=>Wy});function lS(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}var RX=r=>{let{x:t}=r.inputs,e=r.backend;Y(t,"abs");let o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId).values;return o=lS(n),e.makeOutput(o,t.shape,t.dtype)},oA={kernelName:On,backendName:"cpu",kernelFunc:RX};function Wt(r){return(t,e,o,n,s)=>{let i=I.assertAndGetBroadcastShape(t,e),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=y.computeStrides(t),h=y.computeStrides(e),d=I.getBroadcastDims(t,i),g=I.getBroadcastDims(e,i);if(d.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),w=b.slice(-p);d.forEach(A=>w[A]=0);let C=y.locToIndex(w,p,f),k=b.slice(-m);g.forEach(A=>k[A]=0);let E=y.locToIndex(k,m,h);c[x]=r(o[C],n[E])}return[c,i]}}function sr(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}var nA={kernelName:Gi,backendName:"cpu",kernelFunc:sr};function mm(r,t,e="float32"){if(e==="complex64"){let n=mm(r,t,"float32"),s=mm(r,t,"float32");return sr({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function Tr(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var sA={kernelName:Fo,backendName:"cpu",kernelFunc:Tr};function Cn(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var iA={kernelName:Yi,backendName:"cpu",kernelFunc:Cn};function uS(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,i]=Wt((a,l)=>a!==l?1:0)(t,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function In(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Tr({inputs:{x:n},backend:e});let c=mm(e,n.shape,n.dtype),p=In({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=sr({inputs:{real:p,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=Cn({inputs:{input:n},backend:e}),p=In({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=Tr({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=e.data.get(n.dataId).values,[a,l,u]=uS(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}var aA={kernelName:No,backendName:"cpu",kernelFunc:In};function Xt(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Y([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?I.fromUint8ToStringArray(u):u,m=i.dtype==="string"?I.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,d]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(d,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=In({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,d=In({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(d.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=l.data.get(x.dataId).values,C=l.data.get(b.dataId).values,[k,E,A]=e(i.shape,a.shape,f,h,w,C),D=l.makeTensorInfo(A,"float32",k),_=l.makeTensorInfo(A,"float32",E),P=sr({inputs:{real:D,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(D),l.disposeIntermediateTensorInfo(_),P}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function fm(r){return(t,e,o,n,s,i)=>{let a=I.assertAndGetBroadcastShape(t,e),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=I.getBroadcastDims(t,a),h=I.getBroadcastDims(e,a),d=I.mergeRealAndImagArrays(o,n),g=I.mergeRealAndImagArrays(s,i),x=t.length,b=y.computeStrides(t),w=e.length,C=y.computeStrides(e);if(f.length+h.length===0)for(let k=0;k<p.length;k++){let E=k%d.length,A=k%g.length,D=r(d[E*2],d[E*2+1],g[A*2],g[A*2+1]);p[k]=D.real,m[k]=D.imag}else for(let k=0;k<p.length;k++){let E=y.indexToLoc(k,u,c),A=E.slice(-x);f.forEach(V=>A[V]=0);let D=y.locToIndex(A,x,b),_=E.slice(-w);h.forEach(V=>_[V]=0);let P=y.locToIndex(_,w,C),B=r(d[D*2],d[D*2+1],g[P*2],g[P*2+1]);p[k]=B.real,m[k]=B.imag}return[p,m,a]}}var cS=Wt((r,t)=>r+t),FX=fm((r,t,e,o)=>({real:r+e,imag:t+o})),Ti=Xt(Jr,cS,FX),lA={kernelName:Jr,backendName:"cpu",kernelFunc:Ti};function hm(r,t,e,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function Ey(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=ot([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function jr(r){return(t,e,o)=>{let n=y.getTypedArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function kt(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Y(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=e||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=t(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function Sn(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Y(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=e||i.dtype,c=t(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var pS=jr(r=>Math.ceil(r)),_X=Sn(Eo,pS),uA={kernelName:Eo,backendName:"cpu",kernelFunc:_X};function $y(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?I.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var mS=Wt((r,t)=>r===t?1:0),fS=Xt(Gn,mS,null,"bool"),cA={kernelName:Gn,backendName:"cpu",kernelFunc:fS};var hS=jr(r=>Math.exp(r)),dS=Sn($o,hS,"float32"),pA={kernelName:$o,backendName:"cpu",kernelFunc:dS};var gS=jr(r=>Math.expm1(r)),OX=Sn(Ao,gS),mA={kernelName:Ao,backendName:"cpu",kernelFunc:OX};var xS=jr(r=>Math.floor(r)),PX=Sn(Do,xS),fA={kernelName:Do,backendName:"cpu",kernelFunc:PX};function Ay(r,t,e,o,n,s,i,a,l){let u=ot([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function Dy(r,t,e){let o=ot(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var yS=Wt((r,t)=>r>t?1:0),LX=Xt(Wn,yS,null,"bool"),hA={kernelName:Wn,backendName:"cpu",kernelFunc:LX};var bS=Wt((r,t)=>r>=t?1:0),zX=Xt(Ro,bS,null,"bool"),dA={kernelName:Ro,backendName:"cpu",kernelFunc:zX};var wS=Wt((r,t)=>r<t?1:0),MX=Xt(qn,wS,null,"bool"),gA={kernelName:qn,backendName:"cpu",kernelFunc:MX};var CS=Wt((r,t)=>r<=t?1:0),BX=Xt(Kn,CS,null,"bool"),xA={kernelName:Kn,backendName:"cpu",kernelFunc:BX};function Ry(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var IS=jr(r=>Math.log(r)),VX=Sn(_o,IS),yA={kernelName:_o,backendName:"cpu",kernelFunc:VX};function Fy(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var SS=Wt((r,t)=>Math.max(r,t)),GX=Xt(Oo,SS),bA={kernelName:Oo,backendName:"cpu",kernelFunc:GX};var vS=Wt((r,t)=>Math.min(r,t)),UX=Xt(Po,vS),wA={kernelName:Po,backendName:"cpu",kernelFunc:UX};var jh=Wt((r,t)=>r*t),WX=fm((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),Bu=Xt(Lo,jh,WX),CA={kernelName:Lo,backendName:"cpu",kernelFunc:Bu};function kS(r,t,e){let o=y.createScalarValue(-1,e);return jh([],t,o,r,e)}function HX(r){let{inputs:t,backend:e}=r,{x:o}=t;Y(o,"neg");let n=e.data.get(o.dataId).values,[s,i]=kS(n,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,s)}var IA={kernelName:jn,backendName:"cpu",kernelFunc:HX};var TS=Wt((r,t)=>r!==t?1:0),qX=Xt(Xn,TS,null,"bool"),SA={kernelName:Xn,backendName:"cpu",kernelFunc:qX};function dm(r,t,e,o,n){let s=t.length,i=y.sizeFromShape(t),a=y.computeStrides(t),l=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function Te(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{perm:s}=e;Y(n,"transpose");let i=n.shape.length,a=new Array(i);for(let p=0;p<a.length;p++)a[p]=n.shape[s[p]];let l=o.data.get(n.dataId).values,u=dm(l,n.shape,n.dtype,s,a);return{dataId:o.write(u,a,n.dtype),shape:a,dtype:n.dtype}}var vA={kernelName:en,backendName:"cpu",kernelFunc:Te};function NS(r,t,e,o){let[n,s]=I.computeOutAndReduceShapes(r,o),i=oe(t,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}function KX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"prod");let a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=I.getAxesPermutation(l,a),c=l,p=n,m=[];u!=null&&(p=Te({inputs:{x:n},backend:e,attrs:{perm:u}}),m.push(p),c=I.getInnerMostAxes(c.length,a));let f=e.data.get(p.dataId).values,{outVals:h,outShape:d,outDtype:g}=NS(p.shape,p.dtype,f,c),x=d;return i&&(x=I.expandShapeToKeepDim(d,l)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(x,g,h)}var kA={kernelName:Zn,backendName:"cpu",kernelFunc:KX};var vn=I.RowPartitionType,gm=class{constructor(t,e,o,n,s,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=I.getRowPartitionTypesHelper(c),this.raggedRank=I.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===vn.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===vn.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case vn.VALUE_ROWIDS:return gm.getMaxWidthValueRowID(e);case vn.ROW_SPLITS:return gm.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${vn[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let i=1;i<e;++i){let a=t[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return NA(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;I.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=I.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],i=0;for(let a=0;a<n;++a,i+=e)s.push(i);for(let a=n;a<t;++a)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,i=[];for(let a=0;a<s-1;++a){let l=t[a+1]-t[a],u=Math.min(n,l),c=e[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==t[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,i=[];if(s===0)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<s;++c){let p=t[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=e.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${e.length}`);u=e[p]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case vn.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case vn.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${vn[i]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case vn.FIRST_DIM_SIZE:return t[0];case vn.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case vn.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${vn[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=NA(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(t+1);let l=y.sizeFromShape(a),u=e.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let h=this.defaultValueShape;M(()=>{let d=R(c,h);c=an(d,a).dataSync()})}let p=0,m=0,f=0;for(let h=0;h<=u;++h){let d=h<u?e[h]:-1;if(d===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;TA(x,g,b)}if(h>=u){let g=o.length;d=Math.floor(g/l)}if(d>f)if(this.defaultValue.length===1)i.subarray(f*l,d*l).fill(this.defaultValue[0]),f=d;else for(;d>f;){let g=i.slice(f*l);TA(g,c,l),++f}d<0?(p=h+1,m=f):(p=h,m=f,f=m+1)}}};function TA(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function NA(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function _y(r,t,e,o,n,s,i,a,l,u){return new gm(r,t,e,o,n,s,i,a,l,u).compute()}function Oy(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=y.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var ES=jr(r=>1/Math.sqrt(r)),jX=Sn(zo,ES),EA={kernelName:zo,backendName:"cpu",kernelFunc:jX};function Sa(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return ot(e,t.dtype);let f=ot(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let d=[],g=0;for(let x=0;x<i;x++){let b=p[h*i+x];d.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${d} does not index into ${e}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[h*n+x]:f.values[g*n+x]=t.rank===0?m[0]:m[h*n+x]}return f}var $A=jr(r=>1/(1+Math.exp(-r))),$S=kt(Mo,r=>1/(1+Math.exp(-r))),AA={kernelName:Mo,backendName:"cpu",kernelFunc:$S};function AS(r,t,e,o,n){let s=xe.isSliceContinous(o,t,e),i=y.sizeFromShape(e),a=y.computeStrides(o);if(s){let p=xe.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?I.fromUint8ToStringArray(r):r,u=ot(o,n,l),c=ot(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,d)=>h+t[d]);c.set(u.get(...f),...m)}return n==="string"?I.fromStringArrayToUint8(c.values):c.values}function kn(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o;Y(n,"slice");let[a,l]=xe.parseSliceParams(n,s,i);xe.assertParamsValid(n,a,l);let u=e.data.get(n.dataId).values,c=AS(u,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,c)}var DA={kernelName:es,backendName:"cpu",kernelFunc:kn};function Py(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(I.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(I.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(I.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++h[x],m=m&&x>=f,f=x}let d=!0;for(let g=0;g<l;++g){let x=h[g]===0;u[g]=x,d=d&&!x,h[g]=Math.max(h[g],1),g>0&&(h[g]+=h[g-1])}if(d&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=h[l-1],x=y.getArrayFromDType(e,g*p),b=y.getArrayFromDType(n,g),w=new Array(l).fill(0);for(let C=0;C<a;++C){let k=r[C*p],E=w[k],A=(k===0?0:h[k-1])+E;w[k]++;for(let D=0;D<p;++D)x[A*p+D]=r[C*p+D];b[A]=o[C],c[C]=A}for(let C=0;C<l;++C)if(w[C]===0){let E=C===0?0:h[C-1];x[E*p+0]=C;for(let A=1;A<p;++A)x[E*p+A]=0;b[E]=i}return[x,[g,p],b,u,c]}}function Ly(r,t,e,o,n){let s=y.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(I.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(I.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(I.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(I.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(I.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let h=[];if(a>0){h[a-1]=1;for(let g=a-2;g>=0;--g)h[g]=h[g+1]*l[g+1]}let d=y.getArrayFromDType(e,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)d[g*a+b]=Math.trunc(x/h[b]),x%=h[b]}return[d,[i,a],l]}function xm(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((w,C)=>w*C,1),h=y.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=0,g=1,x=0,b=n[d];for(;;){let w=0;if(g<a){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(I.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(I.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&h.fill(i,x*u,b*u);for(let C=d;C<g;++C){let k=o[C];if(k<0||k>=l[0])throw new Error(I.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C,o[C],l[0]));for(let E=0;E<u;E++)h[b*u+E]+=r[k*u+E]}if(s)for(let C=0;C<u;C++)h[b*u+C]/=g-d;if(d=g,++g,x=b+1,b=w,g>a)break}return x<p&&h.fill(i,x*u,p*u),[h,m]}var RA=jr(r=>Math.sqrt(r)),XX=kt(Bo,r=>Math.sqrt(r)),FA={kernelName:Bo,backendName:"cpu",kernelFunc:XX};var DS=Wt((r,t)=>{let e=r-t;return e*e}),YX=Xt(Vo,DS),_A={kernelName:Vo,backendName:"cpu",kernelFunc:YX};function zy(r,t,e,o){let n=ot(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var RS=class{constructor(t,e,o,n,s,i){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let d=o[n+a],g=0,x=b=>b.forEach(w=>d[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(t[m+b]),x(this.separator);if(p>0){x(t[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function My(r,t,e,o,n,s,i,a){return new RS(e,o,n,s,i,a).compute(r,t)}function ZX(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function By(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;ZX(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function Vy(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var FS=Wt((r,t)=>r-t),QX=fm((r,t,e,o)=>({real:r-e,imag:t-o})),Xh=Xt(Go,FS,QX),OA={kernelName:Go,backendName:"cpu",kernelFunc:Xh};function Gy(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=ot(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var Yh=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function PA(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));PA(r,t,m,f)}let n=r[t],s=e,i=o;for(y.swap(r,e,t),Yh(r[o],n)>0&&y.swap(r,e,o);s<i;){for(y.swap(r,s,i),s++,i--;Yh(r[s],n)<0;)s=s+1;for(;Yh(r[i],n)>0;)i=i-1}Yh(r[e],n)===0?y.swap(r,e,i):(i=i+1,y.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function Uy(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(e,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,w)=>h[w]={value:b,index:w}),o<h.length&&(PA(h,o),h=h.slice(0,o)),n&&h.sort(Yh);let d=p*o,g=l.subarray(d,d+o),x=u.subarray(d,d+o);for(let b=0;b<o;b++)g[b]=h[b].value,x[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[ot(c,e,l),ot(c,"int32",u)]}function Wy(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i={},a=new Int32Array(e[n]),l=new Kt(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let d;if(c)d=r[h].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,h,b));d=g.join(",")}if(i[d]!==void 0)a[h]=i[d];else{let g=Object.keys(i).length;i[d]=g,a[h]=g,u.push(h)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new Kt(p,o);u.forEach((h,d)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,h,x),g,d,x)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}sp("cpu",()=>new Mu,1);var OS=kt(Vn,r=>r>=0?r:Math.exp(r)-1),LA={kernelName:Vn,backendName:"cpu",kernelFunc:OS};function PS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o;Y([n],"leakyRelu");let i=y.sizeFromShape(n.shape),a=e.data.get(n.dataId).values,l=y.getTypedArrayFromDType("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?s*a[u]:a[u];return e.makeTensorInfo(n.shape,"float32",l)}var zA={kernelName:Ms,backendName:"cpu",kernelFunc:PS};var JX=Wt((r,t)=>r<0?t*r:r);function LS(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t;Y([o,n],"prelu");let s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,[a,l]=JX(o.shape,n.shape,s,i,"float32");return e.makeTensorInfo(l,"float32",a)}var MA={kernelName:js,backendName:"cpu",kernelFunc:LS};var zS=kt(Jn,r=>Math.max(0,r)),BA={kernelName:Jn,backendName:"cpu",kernelFunc:zS};var MS=kt(ts,r=>Math.min(Math.max(0,r),6)),VA={kernelName:ts,backendName:"cpu",kernelFunc:MS};function Vu(r,t,e,o,n){if(e==="linear")return Tr({inputs:{x:t},backend:r});if(e==="relu")return zS({inputs:{x:t},backend:r});if(e==="elu")return OS({inputs:{x:t},backend:r});if(e==="relu6")return MS({inputs:{x:t},backend:r});if(e==="prelu")return LS({inputs:{x:t,alpha:o},backend:r});if(e==="leakyrelu")return PS({inputs:{x:t},backend:r,attrs:{alpha:n}});if(e==="sigmoid")return $S({inputs:{x:t},backend:r});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Bt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=y.sizeFromShape(n.shape),a=y.inferFromImplicitShape(s,i),l=y.sizeFromShape(a);y.assert(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(n.dataId);let u=e.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,p=u.complexTensorInfos.imag;c.shape=a,p.shape=a}return{dataId:n.dataId,shape:a,dtype:n.dtype}}var GA={kernelName:Xs,backendName:"cpu",kernelFunc:Bt};function BS(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;Y([n,s],"matMul");let l=n.shape.length,u=s.shape.length,c=i?n.shape[l-2]:n.shape[l-1],p=a?s.shape[u-1]:s.shape[u-2],m=i?n.shape[l-1]:n.shape[l-2],f=a?s.shape[u-2]:s.shape[u-1],h=n.shape.slice(0,-2),d=s.shape.slice(0,-2),g=y.sizeFromShape(h),x=y.sizeFromShape(d),w=Mr.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,f]);y.assert(c===p,()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${i} and transposeB=${a} must match.`);let C=i?[g,c,m]:[g,m,c],k=a?[x,f,p]:[x,p,f],E=Bt({inputs:{x:n},backend:e,attrs:{shape:C}}),A=Bt({inputs:{x:s},backend:e,attrs:{shape:k}}),D=i?E.shape[1]:E.shape[2],_=i?E.shape[2]:E.shape[1],P=a?A.shape[1]:A.shape[2],B=Math.max(g,x),V=e.data.get(E.dataId).values,G=e.data.get(A.dataId).values,W=y.computeStrides(E.shape),U=y.computeStrides(A.shape),[H,Z,q]=i?[W[0],1,W[1]]:[W[0],W[1],1],[Q,tt,rt]=a?[1,U[1],U[0]]:[U[1],1,U[0]],lt=_*P,at=ot([B,_,P],E.dtype),ht=at.values,ct=e.blockSize;for(let gt=0;gt<B;gt++)for(let vt=0;vt<_;vt+=ct)for(let $t=0;$t<P;$t+=ct)for(let Dt=0;Dt<D;Dt+=ct){let Ut=Math.min(vt+ct,_),qt=Math.min($t+ct,P),he=Math.min(Dt+ct,D);for(let Ie=vt;Ie<Ut;Ie++)for(let Ee=$t;Ee<qt;Ee++){let Oe=0;for(let ge=Dt;ge<he;ge++){let qe=Math.min(gt,g-1)*H,Xe=Math.min(gt,x-1)*rt,Ri=V[qe+Ie*Z+ge*q],wr=G[ge*Q+Ee*tt+Xe];Oe+=Ri*wr}ht[gt*lt+(Ie*P+Ee)]+=Oe}}return e.disposeIntermediateTensorInfo(E),e.disposeIntermediateTensorInfo(A),e.makeTensorInfo(w,at.dtype,at.values)}var UA={kernelName:$s,backendName:"cpu",kernelFunc:BS};function t5(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o,m,f,h,d=[];m=BS({inputs:{a:n,b:s},attrs:{transposeA:l,transposeB:u},backend:e}),i&&(f=Ti({inputs:{a:m,b:i},backend:e}),d.push(m),m=f),c&&(h=Vu(e,m,c,a,p),d.push(m),m=h);for(let x of d)e.disposeIntermediateTensorInfo(x);return m}var WA={kernelName:oa,backendName:"cpu",kernelFunc:t5};var e5=kt(Pi,r=>Math.acos(r)),HA={kernelName:Pi,backendName:"cpu",kernelFunc:e5};var r5=kt(Li,r=>Math.acosh(r)),qA={kernelName:Li,backendName:"cpu",kernelFunc:r5};function o5(r){let{inputs:t,backend:e}=r,o=t;Y(t,"addN");let n=o.map(a=>e.data.get(a.dataId).values),s=ot(o[0].shape,o[0].dtype),i=s.values;for(let a=0;a<o.length;a++){let l=n[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return e.makeTensorInfo(s.shape,s.dtype,s.values)}var KA={kernelName:ks,backendName:"cpu",kernelFunc:o5};function n5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"all");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Te({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("all",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let k=d[b+C];w=w&&k}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Bt({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var jA={kernelName:hc,backendName:"cpu",kernelFunc:n5};function s5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"any");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Te({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("any",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let k=d[b+C];w=w||k}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Bt({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var XA={kernelName:dc,backendName:"cpu",kernelFunc:s5};function i5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMax");let i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Te({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],I.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[c,p]=I.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*h,b=d[x],w=0;for(let C=0;C<h;++C){let k=d[x+C];k>b&&(b=k,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var YA={kernelName:Ts,backendName:"cpu",kernelFunc:i5};function a5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMin");let i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Te({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],I.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[c,p]=I.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),d=e.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*h,b=d[x],w=0;for(let C=0;C<h;++C){let k=d[x+C];k<b&&(b=k,w=C)}f[g]=w}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",f)}var ZA={kernelName:Ns,backendName:"cpu",kernelFunc:a5};var l5=kt(zi,r=>Math.asin(r)),QA={kernelName:zi,backendName:"cpu",kernelFunc:l5};var u5=kt(Mi,r=>Math.asinh(r)),JA={kernelName:Mi,backendName:"cpu",kernelFunc:u5};var c5=kt(Bi,r=>Math.atan(r)),tD={kernelName:Bi,backendName:"cpu",kernelFunc:c5};var p5=Wt((r,t)=>Math.atan2(r,t)),m5=Xt(Pn,p5),eD={kernelName:Pn,backendName:"cpu",kernelFunc:m5};var f5=kt(Vi,r=>Math.atanh(r)),rD={kernelName:Vi,backendName:"cpu",kernelFunc:f5};function ym(r,t,e,o,n,s){let i=n.strideHeight,a=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,p=n.effectiveFilterWidth,m=n.padInfo.top,f=n.padInfo.left,h=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,d=ot(n.outShape,e),g=d.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],w=n.outShape[3];for(let C=0;C<n.batchSize;++C){let k=C*x,E=C*o[0];for(let A=0;A<n.inChannels;++A)for(let D=0;D<n.outHeight;++D){let _=D*i-m,P=Math.max(0,_),B=Math.min(n.inHeight,c+_),V=k+D*b;for(let G=0;G<n.outWidth;++G){let W=G*a-f,U=Math.max(0,W),H=Math.min(n.inWidth,p+W),Z=h,q=0,Q=0;for(let rt=P;rt<B;rt+=l){let lt=E+rt*o[1];for(let at=U;at<H;at+=u){let ht=lt+at*o[2],ct=r[ht+A];s==="max"&&ct>Z?Z=ct:s==="avg"&&(q+=ct,Q++)}if(isNaN(Z))break}let tt=V+G*w+A;g[tt]=s==="avg"?q/Q:Z}}}return d}function Hy(r,t,e,o,n=!1,s=!1){let i=ot(o.outShape,"int32"),a=o.strideHeight,l=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,p=o.effectiveFilterHeight,m=o.effectiveFilterWidth,f=o.padInfo.top,h=o.padInfo.left,d=ot(t,e,r);for(let g=0;g<o.batchSize;++g)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let w=b*a-f,C=w;for(;C<0;)C+=u;let k=Math.min(o.inHeight,p+w);for(let E=0;E<o.outWidth;++E){let A=E*l-h,D=A;for(;D<0;)D+=c;let _=Math.min(o.inWidth,m+A),P=Number.NEGATIVE_INFINITY,B=-1;for(let V=C;V<k;V+=u){let G=V-w;for(let W=D;W<_;W+=c){let U=W-A,H=d.get(g,V,W,x);H>P&&(P=H,n?B=s?((g*o.inHeight+V)*o.inWidth+W)*o.inChannels+x:(V*o.inWidth+W)*o.inChannels+x:B=G*m+U)}}i.set(B,g,b,E,x)}}return i}function qy(r,t,e,o,n,s){let i=n.strideDepth,a=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,p=n.dilationWidth,m=n.effectiveFilterDepth,f=n.effectiveFilterHeight,h=n.effectiveFilterWidth,d=n.padInfo.front,g=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=ot(n.outShape,e),C=w.values,k=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],E=n.outShape[2]*n.outShape[3]*n.outShape[4],A=n.outShape[3]*n.outShape[4],D=n.outShape[4];for(let _=0;_<n.batchSize;++_){let P=_*k,B=_*o[0];for(let V=0;V<n.inChannels;++V)for(let G=0;G<n.outDepth;++G){let W=G*i-d,U=W;for(;U<0;)U+=u;let H=Math.min(n.inDepth,m+W),Z=P+G*E;for(let q=0;q<n.outHeight;++q){let Q=q*a-g,tt=Q;for(;tt<0;)tt+=c;let rt=Math.min(n.inHeight,f+Q),lt=Z+q*A;for(let at=0;at<n.outWidth;++at){let ht=at*l-x,ct=ht;for(;ct<0;)ct+=p;let gt=Math.min(n.inWidth,h+ht),vt=lt+at*D,$t=b,Dt=0,Ut=0;for(let he=U;he<H;he+=u){let Ie=B+he*o[1];for(let Ee=tt;Ee<rt;Ee+=c){let Oe=Ie+Ee*o[2];for(let ge=ct;ge<gt;ge+=p){let qe=Oe+ge*o[3],Xe=r[qe+V];if(s==="max"&&Xe>$t?$t=Xe:s==="avg"&&(Dt+=Xe,Ut++),isNaN($t))break}if(isNaN($t))break}if(isNaN($t))break}let qt=vt+V;C[qt]=s==="avg"?Dt/Ut:$t}}}}return w}function oD(r,t){let e=ot(t.outShape,"int32"),o=t.strideDepth,n=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,m=t.padInfo.front,f=t.padInfo.top,h=t.padInfo.left;for(let d=0;d<t.batchSize;++d)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){let b=x*o-m,w=b;for(;w<0;)w+=i;let C=Math.min(t.inDepth,u+b);for(let k=0;k<t.outHeight;++k){let E=k*n-f,A=E;for(;A<0;)A+=a;let D=Math.min(t.inHeight,c+E);for(let _=0;_<t.outWidth;++_){let P=_*s-h,B=P;for(;B<0;)B+=l;let V=Math.min(t.inWidth,p+P),G=Number.NEGATIVE_INFINITY,W=-1;for(let U=w;U<C;U+=i){let H=U-b;for(let Z=A;Z<D;Z+=a){let q=Z-E;for(let Q=B;Q<V;Q+=l){let tt=Q-P,rt=r.get(d,U,Z,Q,g);rt>=G&&(G=rt,W=H*c*p+q*c+tt)}}}e.set(W,d,x,k,_,g)}}}return e}function h5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=Tr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=ym(m,n.shape,n.dtype,f,c,"avg");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var nD={kernelName:Es,backendName:"cpu",kernelFunc:h5};function d5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"avgPool3d");let c=I.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=qy(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"avg");return e.makeTensorInfo(m.shape,"float32",m.values)}var sD={kernelName:Pa,backendName:"cpu",kernelFunc:d5};function g5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"avgPool3DGrad");let c=I.computePool3DInfo(s.shape,i,a,1,l,u),p=c.strideDepth,m=c.strideHeight,f=c.strideWidth,h=c.filterDepth,d=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,w=c.dilationWidth,C=c.effectiveFilterDepth,k=c.effectiveFilterHeight,E=c.effectiveFilterWidth,A=C-1-c.padInfo.front,D=E-1-c.padInfo.left,_=k-1-c.padInfo.top,P=ot(s.shape,"float32"),B=1/(h*d*g),V=e.bufferSync(n);for(let G=0;G<c.batchSize;++G)for(let W=0;W<c.inChannels;++W)for(let U=0;U<c.inDepth;++U)for(let H=0;H<c.inHeight;++H)for(let Z=0;Z<c.inWidth;++Z){let q=U-A,Q=H-_,tt=Z-D,rt=0;for(let lt=0;lt<C;lt+=x){let at=(q+lt)/p;if(!(at<0||at>=c.outDepth||Math.floor(at)!==at))for(let ht=0;ht<k;ht+=b){let ct=(Q+ht)/m;if(!(ct<0||ct>=c.outHeight||Math.floor(ct)!==ct))for(let gt=0;gt<E;gt+=w){let vt=(tt+gt)/f;if(vt<0||vt>=c.outWidth||Math.floor(vt)!==vt)continue;rt+=V.get(G,at,ct,vt,W)}}}P.set(rt*B,G,U,H,Z,W)}return e.makeTensorInfo(P.shape,P.dtype,P.values)}var iD={kernelName:xc,backendName:"cpu",kernelFunc:g5};function x5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Y([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=I.computePool2DInfo(i.shape,a,l,1,u),p=c.strideHeight,m=c.strideWidth,f=c.filterHeight,h=c.filterWidth,d=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,w=b-1-c.padInfo.left,C=x-1-c.padInfo.top,k=ot(i.shape,"float32"),E=1/(f*h),A=e.data.get(n.dataId).values,D=ot(n.shape,"float32",A);for(let _=0;_<c.batchSize;++_)for(let P=0;P<c.inChannels;++P)for(let B=0;B<c.inHeight;++B)for(let V=0;V<c.inWidth;++V){let G=B-C,W=V-w,U=0;for(let H=0;H<x;H+=d){let Z=(G+H)/p;if(!(Z<0||Z>=c.outHeight||Math.floor(Z)!==Z))for(let q=0;q<b;q+=g){let Q=(W+q)/m;if(Q<0||Q>=c.outWidth||Math.floor(Q)!==Q)continue;U+=D.get(_,Z,Q,P)}}k.set(U*E,_,B,V,P)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}var aD={kernelName:gc,backendName:"cpu",kernelFunc:x5};function y5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,scale:s,offset:i,mean:a,variance:l}=t;y.assert(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Y([n,a,l,s,i],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=e.data.get(n.dataId).values,p=e.data.get(a.dataId).values,m=e.data.get(l.dataId).values,f=s?e.data.get(s.dataId).values:new Float32Array([1]),h=i?e.data.get(i.dataId).values:new Float32Array([0]),d=new Float32Array(c.length),g=h.length,x=f.length,b=m.length,w=p.length,C=0,k=0,E=0,A=0;for(let D=0;D<c.length;++D)d[D]=h[C++]+(c[D]-p[k++])*f[E++]/Math.sqrt(m[A++]+u),C>=g&&(C=0),k>=w&&(k=0),E>=x&&(E=0),A>=b&&(A=0);return e.makeTensorInfo(n.shape,n.dtype,d)}var lD={kernelName:Ls,backendName:"cpu",kernelFunc:y5};function b5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;Y([n],"batchToSpaceND");let a=s.reduce((x,b)=>x*b),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=Bt({inputs:{x:n},backend:e,attrs:{shape:l}}),h=Te({inputs:{x:f},backend:e,attrs:{perm:u}}),d=Bt({inputs:{x:h},backend:e,attrs:{shape:c}}),g=kn({inputs:{x:d},backend:e,attrs:{begin:p,size:m}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var uD={kernelName:As,backendName:"cpu",kernelFunc:b5};function w5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=hm(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var cD={kernelName:yc,backendName:"cpu",kernelFunc:w5};function C5(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=I.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var pD={kernelName:bc,backendName:"cpu",kernelFunc:C5};var I5=kt(Ln,(r,t)=>{let e=t;return r>e.clipValueMax?e.clipValueMax:r<e.clipValueMin?e.clipValueMin:r}),mD={kernelName:Ln,backendName:"cpu",kernelFunc:I5};var S5=r=>{let{x:t}=r.inputs,e=r.backend,o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId),s=n.complexTensorInfos.real,i=n.complexTensorInfos.imag,a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values;for(let u=0;u<a.length;u++){let c=a[u],p=l[u];o[u]=Math.hypot(c,p)}return e.makeOutput(o,t.shape,"float32")},fD={kernelName:La,backendName:"cpu",kernelFunc:S5};function Ni(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.imag,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var hD={kernelName:Ka,backendName:"cpu",kernelFunc:Ni};function Ml(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=I.computeOutShape(t.map(d=>d.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(d=>y.sizeFromShape(d.shape)>0);if(a.length===1)return Tr({inputs:{x:a[0]},backend:e});let l=a.map(d=>d.shape);if(I.assertParamsConsistent(l,s),a[0].dtype==="complex64"){let d=a.map(C=>Cn({inputs:{input:C},backend:e})),g=a.map(C=>Ni({inputs:{input:C},backend:e})),x=Ml({inputs:d,backend:e,attrs:{axis:s}}),b=Ml({inputs:g,backend:e,attrs:{axis:s}}),w=sr({inputs:{real:x,imag:b},backend:e});return d.forEach(C=>e.disposeIntermediateTensorInfo(C)),g.forEach(C=>e.disposeIntermediateTensorInfo(C)),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),w}let u=a.map(d=>{let g=y.sizeFromShape(d.shape.slice(s));return Bt({inputs:{x:d},backend:e,attrs:{shape:[-1,g]}})}),c=u.map(d=>({vals:e.data.get(d.dataId).values,shape:d.shape}));i=I.computeOutShape(u.map(d=>d.shape),1);let p=u[0].shape[0]===1,m=$y(c,i,t[0].dtype,p),f=I.computeOutShape(a.map(d=>d.shape),s),h=e.makeTensorInfo(f,t[0].dtype,m);return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var dD={kernelName:Ds,backendName:"cpu",kernelFunc:Ml};function VS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o;Y([n,s],"conv2d");let p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f=m.filterHeight,h=m.filterWidth,d=m.dilationHeight,g=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,w=m.dataFormat==="channelsLast",C=new Kt(m.outShape,n.dtype),k=y.computeStrides(n.shape),E=y.computeStrides(s.shape),A=k[0],D=w?k[1]:k[2],_=w?k[2]:1,P=w?1:k[1],B=C.strides[0],V=w?C.strides[1]:C.strides[2],G=w?C.strides[2]:1,W=w?1:C.strides[1],U=e.data.get(n.dataId).values,H=e.data.get(s.dataId).values,Z=C.values;for(let q=0;q<m.batchSize;++q){let Q=q*A,tt=q*B;for(let rt=0;rt<m.outHeight;++rt){let lt=tt+rt*V,at=rt*m.strideHeight-b;for(let ht=0;ht<f;++ht){let ct=at+ht*d;if(ct<0||ct>=m.inHeight)continue;let gt=ht*E[0],vt=Q+ct*D;for(let $t=0;$t<m.outWidth;++$t){let Dt=lt+$t*G,Ut=$t*m.strideWidth-x;for(let qt=0;qt<h;++qt){let he=Ut+qt*g;if(he<0||he>=m.inWidth)continue;let Ie=gt+qt*E[1],Ee=vt+he*_,Oe=Ie;for(let ge=0;ge<m.inChannels;++ge){let qe=U[Ee+ge*P];for(let Xe=0;Xe<m.outChannels;++Xe)Z[Dt+Xe*W]+=qe*H[Oe+Xe];Oe+=m.outChannels}}}}}}return e.makeTensorInfo(C.shape,C.dtype,Z)}var gD={kernelName:Rs,backendName:"cpu",kernelFunc:VS};function v5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"conv2dBackpropFilter");let p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),{strideHeight:f,strideWidth:h,filterHeight:d,filterWidth:g}=m,x=m.dataFormat==="channelsLast",b=new Kt(m.filterShape,"float32"),w=m.padInfo.left,C=m.padInfo.top,k=e.data.get(n.dataId).values,E=e.data.get(s.dataId).values,A=new Kt(n.shape,n.dtype,k),D=new Kt(s.shape,s.dtype,E);for(let _=0;_<d;++_){let P=Math.max(0,Math.ceil((C-_)/f)),B=Math.min(m.outHeight,(m.inHeight+C-_)/f);for(let V=0;V<g;++V){let G=Math.max(0,Math.ceil((w-V)/h)),W=Math.min(m.outWidth,(m.inWidth+w-V)/h);for(let U=0;U<m.inChannels;++U)for(let H=0;H<m.outChannels;++H){let Z=0;for(let q=0;q<m.batchSize;++q)for(let Q=P;Q<B;++Q){let tt=_+Q*f-C;for(let rt=G;rt<W;++rt){let lt=V+rt*h-w;x?Z+=A.get(q,tt,lt,U)*D.get(q,Q,rt,H):Z+=A.get(q,U,tt,lt)*D.get(q,H,Q,rt)}}b.set(Z,_,V,U,H)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var xD={kernelName:wc,backendName:"cpu",kernelFunc:v5};function k5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o;Y([n,s],"conv2dBackpropInput");let p=y.computeStrides(s.shape),m=y.computeStrides(n.shape),f=I.convertConv2DDataFormat(u),h=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,f),d=new Kt(h.inShape,"float32"),g=d.values,x=e.data.get(n.dataId).values,b=e.data.get(s.dataId).values,[w,C,k]=p,{batchSize:E,filterHeight:A,filterWidth:D,inChannels:_,inHeight:P,inWidth:B,outChannels:V,outHeight:G,outWidth:W,strideHeight:U,strideWidth:H}=h;f=h.dataFormat;let Z=A-1-h.padInfo.top,q=D-1-h.padInfo.left,Q=f==="channelsLast",tt=d.strides[0],rt=Q?d.strides[1]:d.strides[2],lt=Q?d.strides[2]:1,at=Q?1:d.strides[1],ht=m[0],ct=Q?m[1]:m[2],gt=Q?m[2]:1,vt=Q?1:m[1];for(let $t=0;$t<E;++$t)for(let Dt=0;Dt<_;++Dt)for(let Ut=0;Ut<P;++Ut){let qt=Ut-Z,he=Math.max(0,Math.ceil(qt/U)),Ie=Math.min(G,(A+qt)/U);for(let Ee=0;Ee<B;++Ee){let Oe=Ee-q,ge=Math.max(0,Math.ceil(Oe/H)),qe=Math.min(W,(D+Oe)/H),Xe=0;for(let wr=he;wr<Ie;++wr){let Da=wr*U-qt;for(let So=ge;So<qe;++So){let Yl=So*H-Oe,Fn=ht*$t+ct*wr+gt*So,Fi=w*(A-1-Da)+C*(D-1-Yl)+k*Dt;for(let Ra=0;Ra<V;++Ra){let Fa=x[Fn+vt*Ra],_a=b[Fi+Ra];Xe+=Fa*_a}}}let Ri=tt*$t+rt*Ut+lt*Ee+at*Dt;g[Ri]=Xe}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}var yD={kernelName:Fs,backendName:"cpu",kernelFunc:k5};function T5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o;Y([n,s],"conv3d");let u=I.computeConv3DInfo(n.shape,s.shape,i,l,a),{filterDepth:c,filterHeight:p,filterWidth:m,dilationDepth:f,dilationHeight:h,dilationWidth:d,padInfo:g}=u,x=g.front,b=g.left,w=g.top,C=new Kt(u.outShape,n.dtype),k=e.data.get(n.dataId).values,E=e.data.get(s.dataId).values,A=C.values,D=y.computeStrides(n.shape),_=y.computeStrides(s.shape);for(let P=0;P<u.batchSize;++P){let B=P*D[0],V=P*C.strides[0];for(let G=0;G<u.outDepth;++G){let W=V+G*C.strides[1],U=G*u.strideDepth-x;for(let H=0;H<c;++H){let Z=U+H*f;if(Z<0||Z>=u.inDepth)continue;let q=H*_[0],Q=B+Z*D[1];for(let tt=0;tt<u.outHeight;++tt){let rt=W+tt*C.strides[2],lt=tt*u.strideHeight-w;for(let at=0;at<p;++at){let ht=lt+at*h;if(ht<0||ht>=u.inHeight)continue;let ct=q+at*_[1],gt=Q+ht*D[2];for(let vt=0;vt<u.outWidth;++vt){let $t=rt+vt*u.outChannels,Dt=vt*u.strideWidth-b;for(let Ut=0;Ut<m;++Ut){let qt=Dt+Ut*d;if(qt<0||qt>=u.inWidth)continue;let he=ct+Ut*_[2],Ie=gt+qt*u.inChannels,Ee=he;for(let Oe=0;Oe<u.inChannels;++Oe){let ge=k[Ie+Oe];for(let qe=0;qe<u.outChannels;++qe)A[$t+qe]+=ge*E[Ee+qe];Ee+=u.outChannels}}}}}}}}return e.makeTensorInfo(C.shape,C.dtype,C.values)}var bD={kernelName:za,backendName:"cpu",kernelFunc:T5};function N5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o;Y([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=I.computeConv3DInfo(n.shape,l,i,1,a),m=p.strideDepth,f=p.strideHeight,h=p.strideWidth,d=p.filterDepth,g=p.filterHeight,x=p.filterWidth,b=new Kt(p.filterShape,"float32"),w=b.values,[C,k,E,A]=b.strides,D=e.data.get(s.dataId).values,[_,P,B,V]=c,G=e.data.get(n.dataId).values,[W,U,H,Z]=u,q=p.padInfo.front,Q=p.padInfo.left,tt=p.padInfo.top;for(let rt=0;rt<d;++rt){let lt=Math.max(0,Math.ceil((q-rt)/m)),at=Math.min(p.outDepth,(p.inDepth+q-rt)/m),ht=rt*C;for(let ct=0;ct<g;++ct){let gt=Math.max(0,Math.ceil((tt-ct)/f)),vt=Math.min(p.outHeight,(p.inHeight+tt-ct)/f),$t=ct*k+ht;for(let Dt=0;Dt<x;++Dt){let Ut=Math.max(0,Math.ceil((Q-Dt)/h)),qt=Math.min(p.outWidth,(p.inWidth+Q-Dt)/h),he=Dt*E+$t;for(let Ie=0;Ie<p.inChannels;++Ie){let Ee=Ie*A+he;for(let Oe=0;Oe<p.outChannels;++Oe){let ge=0;for(let qe=0;qe<p.batchSize;++qe){let Xe=qe*W,Ri=qe*_;for(let wr=lt;wr<at;++wr){let So=(rt+wr*m-q)*U+Xe,Yl=wr*P+Ri;for(let Fn=gt;Fn<vt;++Fn){let Ra=(ct+Fn*f-tt)*H+So,Fa=Fn*B+Yl;for(let _a=Ut;_a<qt;++_a){let _C=(Dt+_a*h-Q)*Z+Ra,OC=_a*V+Fa;ge+=G[_C+Ie]*D[OC+Oe]}}}}w[Ee+Oe]=ge}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var wD={kernelName:Cc,backendName:"cpu",kernelFunc:N5};function E5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o;Y([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=I.computeConv3DInfo(l,s.shape,a,1,i),m=new Kt(p.inShape,"float32"),f=m.values,[h,d,g,x]=m.strides,b=e.data.get(n.dataId).values,[w,C,k,E]=u,A=e.data.get(s.dataId).values,[D,_,P,B]=c,{batchSize:V,filterDepth:G,filterHeight:W,filterWidth:U,inChannels:H,inDepth:Z,inHeight:q,inWidth:Q,outChannels:tt,outDepth:rt,outHeight:lt,outWidth:at,strideDepth:ht,strideHeight:ct,strideWidth:gt}=p,vt=G-1-p.padInfo.front,$t=W-1-p.padInfo.top,Dt=U-1-p.padInfo.left;for(let Ut=0;Ut<V;++Ut)for(let qt=0;qt<H;++qt)for(let he=0;he<Z;++he){let Ie=he-vt,Ee=Math.max(0,Math.ceil(Ie/ht)),Oe=Math.min(rt,(G+Ie)/ht);for(let ge=0;ge<q;++ge){let qe=ge-$t,Xe=Math.max(0,Math.ceil(qe/ct)),Ri=Math.min(lt,(W+qe)/ct);for(let wr=0;wr<Q;++wr){let Da=wr-Dt,So=Math.max(0,Math.ceil(Da/gt)),Yl=Math.min(at,(U+Da)/gt),Fn=0;for(let Fi=Ee;Fi<Oe;++Fi){let Ra=Fi*ht-Ie;for(let Fa=Xe;Fa<Ri;++Fa){let _a=Fa*ct-qe;for(let jm=So;jm<Yl;++jm){let _C=jm*gt-Da,OC=w*Ut+C*Fi+k*Fa+E*jm,gV=D*(G-1-Ra)+_*(W-1-_a)+P*(U-1-_C)+B*qt;for(let kd=0;kd<tt;++kd){let xV=b[OC+kd],yV=A[gV+kd];Fn+=xV*yV}}}}f[h*Ut+d*he+g*ge+x*wr+qt]=Fn}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}var CD={kernelName:Ic,backendName:"cpu",kernelFunc:E5};var $5=kt(zn,r=>Math.cos(r)),ID={kernelName:zn,backendName:"cpu",kernelFunc:$5};var A5=kt(Mn,r=>Math.cosh(r)),SD={kernelName:Mn,backendName:"cpu",kernelFunc:A5};function D5(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,[c,p,m,f]=n.shape,h=s.shape[0],[d,g]=a,x=ot([h,d,g,f],"float32"),b=e.data.get(s.dataId).values,w=e.data.get(i.dataId).values,C=e.data.get(n.dataId).values,k=y.computeStrides(n.shape),E=y.computeStrides(x.shape);for(let A=0;A<h;A++){let D=A*4,_=b[D],P=b[D+1],B=b[D+2],V=b[D+3],G=w[A];if(G>=c)continue;let W=d>1?(B-_)*(p-1)/(d-1):0,U=g>1?(V-P)*(m-1)/(g-1):0;for(let H=0;H<d;H++){let Z=d>1?_*(p-1)+H*W:.5*(_+B)*(p-1);if(Z<0||Z>p-1){for(let q=0;q<g;q++)for(let Q=0;Q<f;Q++){let tt=Q+q*E[2]+H*E[1]+A*E[0];x.values[tt]=u}continue}if(l==="bilinear"){let q=Math.floor(Z),Q=Math.ceil(Z),tt=Z-q;for(let rt=0;rt<g;rt++){let lt=g>1?P*(m-1)+rt*U:.5*(P+V)*(m-1);if(lt<0||lt>m-1){for(let gt=0;gt<f;gt++){let vt=gt+rt*E[2]+H*E[1]+A*E[0];x.values[vt]=u}continue}let at=Math.floor(lt),ht=Math.ceil(lt),ct=lt-at;for(let gt=0;gt<f;gt++){let vt=gt+at*k[2]+q*k[1]+G*k[0],$t=C[vt];vt=gt+ht*k[2]+q*k[1]+G*k[0];let Dt=C[vt];vt=gt+at*k[2]+Q*k[1]+G*k[0];let Ut=C[vt];vt=gt+ht*k[2]+Q*k[1]+G*k[0];let qt=C[vt],he=$t+(Dt-$t)*ct,Ie=Ut+(qt-Ut)*ct;vt=gt+rt*E[2]+H*E[1]+A*E[0],x.values[vt]=he+(Ie-he)*tt}}}else for(let q=0;q<g;++q){let Q=g>1?P*(m-1)+q*U:.5*(P+V)*(m-1);if(Q<0||Q>m-1){for(let lt=0;lt<f;lt++){let at=lt+q*E[2]+H*E[1]+A*E[0];x.values[at]=u}continue}let tt=Math.round(Q),rt=Math.round(Z);for(let lt=0;lt<f;lt++){let at=lt+tt*k[2]+rt*k[1]+G*k[0],ht=lt+q*E[2]+H*E[1]+A*E[0];x.values[ht]=C[at]}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}var vD={kernelName:Ba,backendName:"cpu",kernelFunc:D5};function R5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumprod");let l=I.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=Te({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=I.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=oe(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let w=d(x,b);if(b===0)m[w]=i?1:f[w];else{let C=d(x,b-1);m[w]=i?f[C]*m[C]:f[w]*m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=I.getUndoAxesPermutation(l),b=Te({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var kD={kernelName:Ma,backendName:"cpu",kernelFunc:R5};function F5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumsum");let l=I.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=Te({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=I.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=oe(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],d=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let w=d(x,b);if(b===0)m[w]=i?0:f[w];else{let C=d(x,b-1);m[w]=i?f[C]+m[C]:f[w]+m[C]}}let g=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=I.getUndoAxesPermutation(l),b=Te({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var TD={kernelName:_s,backendName:"cpu",kernelFunc:F5};function _5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=hm(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=Ey(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var ND={kernelName:Sc,backendName:"cpu",kernelFunc:_5};function O5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o;y.assert(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let a=n.shape[0],l=n.shape[1],u=n.shape[2],c=n.shape[3],p=l*s,m=u*s,f=c/(s*s),h=e.data.get(n.dataId).values,d=new Float32Array(a*p*m*f),g=0;for(let x=0;x<a;++x)for(let b=0;b<p;++b){let w=Math.floor(b/s),C=b%s;for(let k=0;k<m;++k){let E=Math.floor(k/s),A=k%s,D=(C*s+A)*f;for(let _=0;_<f;++_){let B=_+D+c*(E+u*(w+l*x));d[g++]=h[B]}}}return e.makeTensorInfo([a,p,m,f],n.dtype,d)}var ED={kernelName:Va,backendName:"cpu",kernelFunc:O5};function GS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o;Y([n,s],"depthwiseConv2DNative");let c=y.computeStrides(n.shape),p=y.computeStrides(s.shape),m=l;m==null&&(m=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(i,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${m}'`);let f=I.computeConv2DInfo(n.shape,s.shape,i,m,a,u,!0),{filterHeight:h,filterWidth:d,dilationHeight:g,dilationWidth:x,padInfo:b}=f,w=b.left,C=b.top,k=f.outChannels/f.inChannels,E=new Kt(f.outShape,n.dtype),A=e.data.get(n.dataId).values,D=e.data.get(s.dataId).values,_=E.values;for(let P=0;P<f.batchSize;++P){let B=P*c[0],V=P*E.strides[0];for(let G=0;G<f.outHeight;++G){let W=V+G*E.strides[1],U=G*f.strideHeight-C;for(let H=0;H<h;++H){let Z=U+H*g;if(Z<0||Z>=f.inHeight)continue;let q=H*p[0],Q=B+Z*c[1];for(let tt=0;tt<f.outWidth;++tt){let rt=W+tt*E.strides[2],lt=tt*f.strideWidth-w;for(let at=0;at<d;++at){let ht=lt+at*x;if(ht<0||ht>=f.inWidth)continue;let ct=q+at*p[1],gt=Q+ht*f.inChannels,vt=rt,$t=ct;for(let Dt=0;Dt<f.inChannels;++Dt){let Ut=A[gt+Dt];for(let qt=0;qt<k;++qt)_[vt+qt]+=Ut*D[$t+qt];vt+=k,$t+=k}}}}}}return e.makeTensorInfo(E.shape,E.dtype,E.values)}var $D={kernelName:Os,backendName:"cpu",kernelFunc:GS};function P5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"depthwiseConv2dNativeBackpropFilter");let p=I.computeConv2DInfo(n.shape,c,i,a,l,u,!0),{strideHeight:m,strideWidth:f,filterHeight:h,filterWidth:d}=p,g=new Kt(p.filterShape,"float32"),x=p.padInfo.left,b=p.padInfo.top,w=p.outChannels/p.inChannels,C=e.data.get(n.dataId).values,k=new Kt(n.shape,n.dtype,C),E=e.data.get(s.dataId).values,A=new Kt(s.shape,s.dtype,E);for(let D=0;D<h;++D){let _=Math.max(0,Math.ceil((b-D)/m)),P=Math.min(p.outHeight,(p.inHeight+b-D)/m);for(let B=0;B<d;++B){let V=Math.max(0,Math.ceil((x-B)/f)),G=Math.min(p.outWidth,(p.inWidth+x-B)/f);for(let W=0;W<p.outChannels;++W){let U=Math.trunc(W/w),H=W%w,Z=0;for(let q=0;q<p.batchSize;++q)for(let Q=_;Q<P;++Q){let tt=D+Q*m-b;for(let rt=V;rt<G;++rt){let lt=B+rt*f-x;Z+=k.get(q,tt,lt,U)*A.get(q,Q,rt,W)}}g.set(Z,D,B,U,H)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}var AD={kernelName:vc,backendName:"cpu",kernelFunc:P5};function L5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o;Y([n,s],"depthwiseConv2DNativeBackpropInput");let p=y.computeStrides(n.shape),m=y.computeStrides(s.shape),f=I.computeConv2DInfo(c,s.shape,i,a,l,u,!0),h=new Kt(f.inShape,"float32"),d=h.values,[g,x,b]=h.strides,w=e.data.get(n.dataId).values,[C,k,E]=p,A=e.data.get(s.dataId).values,[D,_,P]=m,{batchSize:B,filterHeight:V,filterWidth:G,inChannels:W,inHeight:U,inWidth:H,outChannels:Z,outHeight:q,outWidth:Q,strideHeight:tt,strideWidth:rt}=f,lt=V-1-f.padInfo.top,at=G-1-f.padInfo.left,ht=Z/W;for(let ct=0;ct<B;++ct)for(let gt=0;gt<W;++gt)for(let vt=0;vt<U;++vt){let $t=vt-lt,Dt=Math.max(0,Math.ceil($t/tt)),Ut=Math.min(q,(V+$t)/tt);for(let qt=0;qt<H;++qt){let he=qt-at,Ie=Math.max(0,Math.ceil(he/rt)),Ee=Math.min(Q,(G+he)/rt),Oe=0;for(let ge=Dt;ge<Ut;++ge){let qe=ge*tt-$t;for(let Xe=Ie;Xe<Ee;++Xe){let Ri=Xe*rt-he,wr=C*ct+k*ge+E*Xe,Da=D*(V-1-qe)+_*(G-1-Ri)+P*gt;for(let So=0;So<ht;++So){let Yl=gt*ht+So,Fn=w[wr+Yl],Fi=A[Da+So];Oe+=Fn*Fi}}}d[g*ct+x*vt+b*qt+gt]=Oe}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}var DD={kernelName:kc,backendName:"cpu",kernelFunc:L5};function z5(r){let{inputs:t,backend:e}=r,{x:o}=t,n=y.sizeFromShape(o.shape),s=e.data.get(o.dataId).values,i=ot([n,n],o.dtype),a=i.values;for(let u=0;u<s.length;u++)a[u*n+u]=s[u];let l=[...o.shape,...o.shape];return e.makeTensorInfo(l,i.dtype,i.values)}var RD={kernelName:Tc,backendName:"cpu",kernelFunc:z5};var FD={kernelName:Ga,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n}=r,{strides:s,pad:i,dilations:a}=e,l=t,u=l.data.get(o.dataId).values,c=o.shape.length,p=l.data.get(n.dataId).values,m=n.shape.length,{batchSize:f,inHeight:h,inWidth:d,inChannels:g,outHeight:x,outWidth:b,padInfo:w,strideHeight:C,strideWidth:k,filterHeight:E,filterWidth:A,dilationHeight:D,dilationWidth:_,outShape:P}=I.computeDilation2DInfo(o.shape,n.shape,s,i,"NHWC",a),B=y.sizeFromShape(P),V=P.length,G=y.getArrayFromDType(o.dtype,B);for(let U=0;U<f;++U)for(let H=0;H<x;++H){let Z=H*C-w.top;for(let q=0;q<b;++q){let Q=q*k-w.left;for(let tt=0;tt<g;++tt){let rt=Number.MIN_SAFE_INTEGER;for(let at=0;at<E;++at){let ht=Z+at*D;if(ht>=0&&ht<h)for(let ct=0;ct<A;++ct){let gt=Q+ct*_;if(gt>=0&&gt<d){let vt=y.locToIndex([U,ht,gt,tt],c,y.computeStrides(o.shape)),$t=y.locToIndex([at,ct,tt],m,y.computeStrides(n.shape)),Dt=u[vt]+p[$t];Dt>rt&&(rt=Dt)}}}let lt=y.locToIndex([U,H,q,tt],V,y.computeStrides(P));G[lt]=rt}}}return{dataId:l.write(y.toTypedArray(G,o.dtype),P,o.dtype),shape:P,dtype:o.dtype}}};var _D={kernelName:rf,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:k,filterWidth:E,dilationHeight:A,dilationWidth:D,outShape:_}=I.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===_.length,()=>`Error in ${rf}, dy must have the same rank as output ${_.length}, but got ${s.rank}`);let P=y.toNestedArray(_,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let G=0;G<m;++G)for(let W=0;W<g;++W){let U=W*w-b.top;for(let H=0;H<x;++H){let Z=H*C-b.left;for(let q=0;q<d;++q){let Q=Number.MIN_SAFE_INTEGER,tt=0,rt=0;for(let lt=0;lt<k;++lt){let at=U+lt*A;if(at>=0&&at<f)for(let ht=0;ht<E;++ht){let ct=Z+ht*D;if(ct>=0&&ct<h){let gt=c[G][at][ct][q]+p[lt][ht][q];gt>Q&&(Q=gt,tt=lt,rt=ht)}}}B[tt][rt][q]+=P[G][W][H][q]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var OD={kernelName:ef,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:d,outHeight:g,outWidth:x,padInfo:b,strideHeight:w,strideWidth:C,filterHeight:k,filterWidth:E,dilationHeight:A,dilationWidth:D,outShape:_}=I.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===_.length,()=>`Error in ${ef}, dy must have the same rank as output ${_.length}, but got ${s.rank}`);let P=y.toNestedArray(_,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let G=0;G<m;++G)for(let W=0;W<g;++W){let U=W*w-b.top;for(let H=0;H<x;++H){let Z=H*C-b.left;for(let q=0;q<d;++q){let Q=Number.MIN_SAFE_INTEGER,tt=U<0?0:U,rt=Z<0?0:Z;for(let lt=0;lt<k;++lt){let at=U+lt*A;if(at>=0&&at<f)for(let ht=0;ht<E;++ht){let ct=Z+ht*D;if(ct>=0&&ct<h){let gt=c[G][at][ct][q]+p[lt][ht][q];gt>Q&&(Q=gt,tt=at,rt=ct)}}}B[G][tt][rt][q]+=P[G][W][H][q]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function va(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"sum");let a;n.dtype==="bool"?a=In({inputs:{x:n},backend:e,attrs:{dtype:"int32"}}):a=Tr({inputs:{x:n},backend:e});let l=a.shape.length,u=y.parseAxisParam(s,a.shape),c=I.getAxesPermutation(u,l),p=u,m=a;c!=null&&(m=Te({inputs:{x:a},backend:e,attrs:{perm:c}}),p=I.getInnerMostAxes(p.length,l)),I.assertAxesAreInnerMostDims("sum",p,m.shape.length);let[f,h]=I.computeOutAndReduceShapes(m.shape,p),d=I.upcastType(m.dtype,"int32"),g=mm(e,f,d),x=y.sizeFromShape(h),b=e.data.get(g.dataId).values,w=e.data.get(m.dataId).values;for(let C=0;C<b.length;++C){let k=C*x,E=0;for(let A=0;A<x;++A)E+=w[k+A];b[C]=E}if(i){let C=I.expandShapeToKeepDim(g.shape,u),k=g;g=Bt({inputs:{x:g},backend:e,attrs:{shape:C}}),e.disposeIntermediateTensorInfo(k)}return e.disposeIntermediateTensorInfo(a),c!=null&&e.disposeIntermediateTensorInfo(m),g}var PD={kernelName:Js,backendName:"cpu",kernelFunc:va};function M5(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[g]),w;I.isIdentityPermutation(x)?w=s[g]:(w=Te({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let k=0;k<b.length;++k)C.splice(b[k],0,1);y.arraysEqual(w.shape,C)||(w=Bt({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=Bu({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=va({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var LD={kernelName:Ua,backendName:"cpu",kernelFunc:M5};function B5(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t;Y([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),i=e.data.get(n.dataId).values,a=e.data.get(o.dataId).values;for(let l=0;l<i.length;++l){let u=i[l];u>=1?s[l]=a[l]:s[l]=a[l]*(u+1)}return e.makeTensorInfo(n.shape,"float32",s)}var zD={kernelName:Nc,backendName:"cpu",kernelFunc:B5};var V5=I.ERF_P,G5=I.ERF_A1,U5=I.ERF_A2,W5=I.ERF_A3,H5=I.ERF_A4,q5=I.ERF_A5,K5=kt(Ui,r=>{let t=Math.sign(r),e=Math.abs(r),o=1/(1+V5*e);return t*(1-((((q5*o+H5)*o+W5)*o+U5)*o+G5)*o*Math.exp(-e*e))}),MD={kernelName:Ui,backendName:"cpu",kernelFunc:K5};function bm(r){let{inputs:t,backend:e,attrs:o}=r,{input:n}=t,{dim:s}=o,i=n.shape.length,a=n.shape.slice(),l=s;return s<0&&(y.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),a.splice(l,0,1),Bt({inputs:{x:n},backend:e,attrs:{shape:a}})}var BD={kernelName:Ps,backendName:"cpu",kernelFunc:bm};var j5=Wt((r,t)=>r/t),Zh=Xt(Bn,j5),Qh={kernelName:Bn,backendName:"cpu",kernelFunc:Zh};function Ky(r,t,e){let o=r.shape,n=o[0],s=o[1],i=e.data.get(r.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[n,s],c=y.sizeFromShape(u),p=y.getTypedArrayFromDType("float32",c),m=y.getTypedArrayFromDType("float32",c);for(let g=0;g<n;g++){let x=kn({inputs:{x:a},backend:e,attrs:{begin:[g,0],size:[1,s]}}),b=kn({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,s]}}),w=sr({inputs:{real:x,imag:b},backend:e}),{real:C,imag:k}=X5(w,t,e),E=I.mergeRealAndImagArrays(C,k);for(let A=0;A<s;A++){let D=I.getComplexWithIndex(E,A);p[g*s+A]=D.real,m[g*s+A]=D.imag}e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w)}let f=e.makeTensorInfo(u,"float32",p),h=e.makeTensorInfo(u,"float32",m),d=sr({inputs:{real:f,imag:h},backend:e});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}function X5(r,t,e){let o=y.sizeFromShape(r.shape),n=e.data.get(r.dataId),s=e.data.get(n.complexTensorInfos.real.dataId).values,i=e.data.get(n.complexTensorInfos.imag.dataId).values;if(Y5(o)){let a=US(s,i,o,t,e),l=[r.shape[0],r.shape[1]];if(t){let u=e.makeTensorInfo(l,"float32",a.real),c=e.makeTensorInfo(l,"float32",a.imag),p=e.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=Tr({inputs:{x:p},backend:e}),f=Qh.kernelFunc({inputs:{a:u,b:p},backend:e}),h=Qh.kernelFunc({inputs:{a:c,b:m},backend:e}),d=e.data.get(f.dataId).values,g=e.data.get(h.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),{real:d,imag:g}}return a}else{let a=I.mergeRealAndImagArrays(s,i),l=Z5(a,o,t);return I.splitRealAndImagArrays(l)}}function Y5(r){return(r&r-1)===0}function US(r,t,e,o,n){if(e===1)return{real:r,imag:t};let s=I.mergeRealAndImagArrays(r,t),i=e/2,a=I.complexWithEvenIndex(s),l=a.real,u=a.imag,c=[l.length],p=n.makeTensorInfo(c,"float32",l),m=n.makeTensorInfo(c,"float32",u),f=sr({inputs:{real:p,imag:m},backend:n}),h=I.complexWithOddIndex(s),d=h.real,g=h.imag,x=[d.length],b=n.makeTensorInfo(x,"float32",d),w=n.makeTensorInfo(x,"float32",g),C=sr({inputs:{real:b,imag:w},backend:n}),k=US(l,u,i,o,n),E=k.real,A=k.imag,D=[E.length],_=n.makeTensorInfo(D,"float32",E),P=n.makeTensorInfo(D,"float32",A),B=sr({inputs:{real:_,imag:P},backend:n}),V=US(d,g,i,o,n),G=V.real,W=V.imag,U=[G.length],H=n.makeTensorInfo(U,"float32",G),Z=n.makeTensorInfo(U,"float32",W),q=sr({inputs:{real:H,imag:Z},backend:n}),Q=I.exponents(e,o),tt=[Q.real.length],rt=n.makeTensorInfo(tt,"float32",Q.real),lt=n.makeTensorInfo(tt,"float32",Q.imag),at=sr({inputs:{real:rt,imag:lt},backend:n}),ht=Bu({inputs:{a:at,b:q},backend:n}),ct=Ti({inputs:{a:B,b:ht},backend:n}),gt=Xh({inputs:{a:B,b:ht},backend:n}),vt=Cn({inputs:{input:ct},backend:n}),$t=Cn({inputs:{input:gt},backend:n}),Dt=Ni({inputs:{input:ct},backend:n}),Ut=Ni({inputs:{input:gt},backend:n}),qt=Ml({inputs:[vt,$t],backend:n,attrs:{axis:0}}),he=Ml({inputs:[Dt,Ut],backend:n,attrs:{axis:0}}),Ie=n.data.get(qt.dataId).values,Ee=n.data.get(he.dataId).values;return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo(_),n.disposeIntermediateTensorInfo(P),n.disposeIntermediateTensorInfo(B),n.disposeIntermediateTensorInfo(H),n.disposeIntermediateTensorInfo(Z),n.disposeIntermediateTensorInfo(q),n.disposeIntermediateTensorInfo(rt),n.disposeIntermediateTensorInfo(lt),n.disposeIntermediateTensorInfo(at),n.disposeIntermediateTensorInfo(ht),n.disposeIntermediateTensorInfo(ct),n.disposeIntermediateTensorInfo(gt),n.disposeIntermediateTensorInfo(vt),n.disposeIntermediateTensorInfo(Dt),n.disposeIntermediateTensorInfo($t),n.disposeIntermediateTensorInfo(Ut),n.disposeIntermediateTensorInfo(qt),n.disposeIntermediateTensorInfo(he),{real:Ie,imag:Ee}}function Z5(r,t,e){let o=new Float32Array(t*2);for(let n=0;n<t;n++){let s=0,i=0;for(let a=0;a<t;a++){let l=I.exponent(n*a,t,e),u=I.getComplexWithIndex(r,a);s+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}e&&(s/=t,i/=t),I.assignToTypedArray(o,s,i,n)}return o}function Q5(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=Bt({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=Ky(a,!1,e),u=Bt({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var VD={kernelName:Ec,backendName:"cpu",kernelFunc:Q5};function Jh(r){let{backend:t,attrs:e}=r,{shape:o,value:n,dtype:s}=e,i=s||y.inferDtype(n),a=y.getArrayFromDType(i,y.sizeFromShape(o));return J5(a,n,i),t.makeTensorInfo(o,i,a)}var GD={kernelName:Wa,backendName:"cpu",kernelFunc:Jh};function J5(r,t,e){r.fill(t)}var UD={kernelName:Ha,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,n=e,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[i,a,l,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<i;m++){let f=m*l*a*u;for(let h=0;h<a;h++){let d=h*(l*u);for(let g=0;g<l;g++){let x=g*u;for(let b=0;b<u;b++){let w=Math.round(l-g-1),C=f+d+x+b,k=c[C];if(w>=0&&w<l){let E=w*u,A=f+d+E+b;k=c[A]}s[C]=k}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var tY=Wt((r,t)=>Math.floor(r/t)),eY=Xt(Un,tY,null,"int32"),WD={kernelName:Un,backendName:"cpu",kernelFunc:eY};function rY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=VS({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;if(c==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){let x=Bt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});d=Ti({inputs:{a:d,b:x},backend:e}),e.disposeIntermediateTensorInfo(x)}else d=Ti({inputs:{a:d,b:i},backend:e});e.disposeIntermediateTensorInfo(g)}if(f){let g=d;if(c==="NCHW"&&f==="prelu"&&a.shape.length===1&&a.shape[0]!==1){let x=Bt({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});d=Vu(e,d,f,x,h),e.disposeIntermediateTensorInfo(x)}else d=Vu(e,d,f,a,h);e.disposeIntermediateTensorInfo(g)}return d}var HD={kernelName:na,backendName:"cpu",kernelFunc:rY};function oY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=GS({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=d;d=Ti({inputs:{a:d,b:i},backend:e}),e.disposeIntermediateTensorInfo(g)}if(f){let g=d;d=Vu(e,d,f,a,h),e.disposeIntermediateTensorInfo(g)}return d}var qD={kernelName:sa,backendName:"cpu",kernelFunc:oY};function nY(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=y.sizeFromShape(o.shape),i=n.shape,a=i[i.length-1],[l,u,c,p]=I.prepareAndValidate(o,n);if(u===0)return e.makeTensorInfo(l,o.dtype,[]);let m=e.data.get(n.dataId).values,f=e.bufferSync(o),h=Ay(m,f,o.dtype,u,a,c,p,o.shape,s);return e.makeTensorInfo(l,o.dtype,h.values)}var KD={kernelName:qa,backendName:"cpu",kernelFunc:nY};function sY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o;Y([n,s],"gatherV2");let l=y.parseAxisParam(i,n.shape)[0],u=e.data.get(s.dataId).values,c=n.shape[l];for(let C=0;C<u.length;++C){let k=u[C];y.assert(k<=c-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${c-1}]`)}let p=a;a==null&&(p=0);let m=y.sizeFromShape(s.shape),f=I.segment_util.collectGatherOpShapeInfo(n,s,l,p),h=Bt({inputs:{x:n},backend:e,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),d=Bt({inputs:{x:s},backend:e,attrs:{shape:[f.batchSize,m/f.batchSize]}}),g=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],x=e.bufferSync(d),b=e.bufferSync(h),w=Dy(b,x,g);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.makeTensorInfo(f.outputShape,w.dtype,w.values)}var jD={kernelName:zs,backendName:"cpu",kernelFunc:sY};function iY(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=Bt({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=Ky(a,!0,e),u=Bt({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var XD={kernelName:$c,backendName:"cpu",kernelFunc:iY};var aY=kt(Wi,r=>Number.isFinite(r)?1:0,"bool"),YD={kernelName:Wi,backendName:"cpu",kernelFunc:aY};var lY=kt(Hi,r=>Math.abs(r)===1/0?1:0,"bool"),ZD={kernelName:Hi,backendName:"cpu",kernelFunc:lY};var uY=kt(Hn,r=>Number.isNaN(r)?1:0,"bool"),QD={kernelName:Hn,backendName:"cpu",kernelFunc:uY};function cY(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=Ry(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var JD={kernelName:Ac,backendName:"cpu",kernelFunc:cY};var pY=kt(qi,r=>Math.log1p(r)),tR={kernelName:qi,backendName:"cpu",kernelFunc:pY};var mY=Wt((r,t)=>r&&t),fY=Xt(Ki,mY,null,"bool"),eR={kernelName:Ki,backendName:"cpu",kernelFunc:fY};var hY=kt(ji,r=>r?0:1,"bool"),rR={kernelName:ji,backendName:"cpu",kernelFunc:hY};var dY=Wt((r,t)=>r||t),gY=Xt(Jl,dY,null,"bool"),oR={kernelName:Jl,backendName:"cpu",kernelFunc:gY};function xY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o;Y(n,"LRN");let u=n.shape[3],c=u-1,p=e.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),f=new Float32Array(m);function h(d){let g=d%u,x=d-g+Math.max(0,g-s),b=d-g+Math.min(g+s,c),w=0;for(;x<=b;x++){let C=p[x];w+=C*C}return w}for(let d=0;d<m;d++){let g=h(d),x=p[d]*Math.pow(i+a*g,-l);f[d]=x}return e.makeTensorInfo(n.shape,n.dtype,f)}var nR={kernelName:ja,backendName:"cpu",kernelFunc:xY};function yY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o;Y(i,"LRNGrad");let p=y.sizeFromShape(i.shape),m=i.shape[3],f=e.data.get(i.dataId).values,h=e.data.get(n.dataId).values,d=e.data.get(s.dataId).values,g=new Float32Array(p),x=p;for(let b=0;b<x;b++){let w=b%m,C=b-w+Math.max(0,w-a),k=b-w+Math.min(m,w+a+1),E=0;for(let A=C;A<k;A++)E+=Math.pow(h[A],2);E=u*E+l;for(let A=C;A<k;A++){let D=-2*u*c*h[A]*d[b]/E;b===A&&(D+=Math.pow(E,-c)),D*=f[b],g[A]+=D}}return e.makeTensorInfo(i.shape,n.dtype,g)}var sR={kernelName:Dc,backendName:"cpu",kernelFunc:yY};function WS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=e,l=n.shape,u=l.length,c=y.parseAxisParam(s,l),p=c,m=I.getAxesPermutation(p,u),f=a.data.get(n.dataId).values;if(m!=null){let C=new Array(u);for(let k=0;k<C.length;k++)C[k]=l[m[k]];f=dm(f,l,n.dtype,m,C),p=I.getInnerMostAxes(p.length,u),l=C}Y(n,"max"),I.assertAxesAreInnerMostDims("max",p,u);let[h,d]=I.computeOutAndReduceShapes(l,p),g=y.sizeFromShape(d),x=Fy(f,g,h,n.dtype),b=a.write(x,h,n.dtype),w=h;return i&&(w=I.expandShapeToKeepDim(h,c)),{dataId:b,shape:w,dtype:n.dtype}}var iR={kernelName:Bs,backendName:"cpu",kernelFunc:WS};function bY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=Tr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=ym(m,n.shape,n.dtype,f,c,"max");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var aR={kernelName:Vs,backendName:"cpu",kernelFunc:bY};function wY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"maxPool3d");let c=I.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=qy(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"max");return e.makeTensorInfo(m.shape,"float32",m.values)}var lR={kernelName:Xa,backendName:"cpu",kernelFunc:wY};function CY(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"maxPool3DGrad");let c=I.computePool3DInfo(s.shape,i,a,1,l,u),p=e.bufferSync(s),m=oD(p,c),f=c.strideDepth,h=c.strideHeight,d=c.strideWidth,g=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,C=c.effectiveFilterHeight,k=c.effectiveFilterWidth,E=w-1-c.padInfo.front,A=k-1-c.padInfo.left,D=C-1-c.padInfo.top,_=ot(s.shape,"float32"),P=e.bufferSync(n);for(let B=0;B<c.batchSize;++B)for(let V=0;V<c.inChannels;++V)for(let G=0;G<c.inDepth;++G)for(let W=0;W<c.inHeight;++W)for(let U=0;U<c.inWidth;++U){let H=G-E,Z=W-D,q=U-A,Q=0;for(let tt=0;tt<w;tt+=g){let rt=(H+tt)/f;if(!(rt<0||rt>=c.outDepth||Math.floor(rt)!==rt))for(let lt=0;lt<C;lt+=x){let at=(Z+lt)/h;if(!(at<0||at>=c.outHeight||Math.floor(at)!==at))for(let ht=0;ht<k;ht+=b){let ct=(q+ht)/d;if(ct<0||ct>=c.outWidth||Math.floor(ct)!==ct)continue;let gt=w*C*k-1-m.get(B,rt,at,ct,V),vt=tt*C*k+lt*k+ht,$t=gt===vt?1:0;if($t===0)continue;Q+=P.get(B,rt,at,ct,V)*$t}}}_.set(Q,B,G,W,U,V)}return e.makeTensorInfo(_.shape,_.dtype,_.values)}var uR={kernelName:Fc,backendName:"cpu",kernelFunc:CY};function IY(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Y([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=I.computePool2DInfo(a.shape,l,u,1,c,p),f=e.data.get(a.dataId).values,h=ot(m.outShape,a.dtype,Hy(f,a.shape,a.dtype,m).values),d=m.strideHeight,g=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,w=m.effectiveFilterHeight,C=m.effectiveFilterWidth,k=C-1-m.padInfo.left,E=w-1-m.padInfo.top,A=ot(a.shape,"float32"),D=e.data.get(n.dataId).values,_=ot(n.shape,"float32",D);for(let P=0;P<m.batchSize;++P)for(let B=0;B<m.inChannels;++B)for(let V=0;V<m.inHeight;++V)for(let G=0;G<m.inWidth;++G){let W=V-E,U=G-k,H=0;for(let Z=0;Z<w;Z+=x){let q=(W+Z)/d;if(!(q<0||q>=m.outHeight||Math.floor(q)!==q))for(let Q=0;Q<C;Q+=b){let tt=(U+Q)/g;if(tt<0||tt>=m.outWidth||Math.floor(tt)!==tt)continue;let rt=w*C-1-h.get(P,q,tt,B),lt=Z*C+Q,at=rt===lt?1:0;if(at===0)continue;H+=_.get(P,q,tt,B)*at}}A.set(H,P,V,G,B)}return e.makeTensorInfo(A.shape,A.dtype,A.values)}var cR={kernelName:Rc,backendName:"cpu",kernelFunc:IY};function pR(r,t,e,o,n){let s=y.computeStrides(t),i=ym(r,t,e,s,n,"max"),a=Hy(r,t,e,n,!0,o);return[i.values,a.values]}var mR={kernelName:_c,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;Y(o,"MaxPoolWithArgmax");let u=l.data.get(o.dataId).values,c=I.computePool2DInfo(o.shape,n,s,[1,1],i),[p,m]=pR(u,o.shape,o.dtype,a,c),f=l.write(p,c.outShape,o.dtype),h=l.write(m,c.outShape,o.dtype);return[{dataId:f,shape:c.outShape,dtype:o.dtype},{dataId:h,shape:c.outShape,dtype:"int32"}]}};function SY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=y.parseAxisParam(s,n.shape),u=I.computeOutAndReduceShapes(n.shape,a)[1],c=y.sizeFromShape(u),p=[],m=e.makeTensorInfo([],"float32",new Float32Array([c]));p.push(m);let f=In({inputs:{x:n},backend:e,attrs:{dtype:"float32"}});p.push(f);let h=Zh({inputs:{a:f,b:m},backend:e});p.push(h);let d=va({inputs:{x:h},backend:e,attrs:{axis:s,keepDims:i}});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),d}var fR={kernelName:Gs,backendName:"cpu",kernelFunc:SY};function vY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"min");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Te({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("min",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),d=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,w=d[b];for(let C=0;C<f;++C){let k=d[b+C];(Number.isNaN(k)||k<w)&&(w=k)}h[x]=w}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Bt({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var hR={kernelName:Us,backendName:"cpu",kernelFunc:vY};function kY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,mode:i}=o;Y(n,"mirrorPad");let a=s.map((w,C)=>w[0]+n.shape[C]+w[1]),l=s.map(w=>w[0]),u=s.map((w,C)=>w[0]+n.shape[C]),c=i==="reflect"?0:1,p=e.data.get(n.dataId).values,m=n.shape.length,f=y.computeStrides(n.shape),h=y.sizeFromShape(a),d=a.length,g=y.computeStrides(a),x=y.getTypedArrayFromDType(n.dtype,h);for(let w=0;w<h;w++){let C=y.indexToLoc(w,d,g);for(let E=0;E<d;E++)C[E]<l[E]?C[E]=l[E]*2-C[E]-c:C[E]>=u[E]&&(C[E]=(u[E]-1)*2-C[E]+c);C=C.map((E,A)=>E-l[A]);let k=y.locToIndex(C,m,f);x[w]=p[k]}return{dataId:e.write(x,a,n.dtype),shape:a,dtype:n.dtype}}var dR={kernelName:Ws,backendName:"cpu",kernelFunc:kY};var TY=Wt((r,t)=>{let e=r%t;return r<0&&t<0||r>=0&&t>=0?e:(e+t)%t}),NY=Xt(Xi,TY),gR={kernelName:Xi,backendName:"cpu",kernelFunc:NY};var yR=Xm(xf());function HS(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=n.shape.length,a=s;if(a===-1&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);let l=y.parseAxisParam([a],n.shape),u=WS({inputs:{x:n},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=I.expandShapeToKeepDim(u.shape,l),p=Bt({inputs:{x:u},backend:e,attrs:{shape:c}}),m=Xh({inputs:{a:n,b:p},backend:e}),f=dS({inputs:{x:m},backend:e}),h=va({inputs:{x:f},backend:e,attrs:{axis:l,keepDims:!1}}),d=Bt({inputs:{x:h},backend:e,attrs:{shape:c}}),g=Zh({inputs:{a:f,b:d},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),g}var xR={kernelName:ri,backendName:"cpu",kernelFunc:HS};function EY(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o;Y(n,"multinomial");let l=a?n:HS({inputs:{logits:n},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=e.data.get(l.dataId).values,m=[u,s],f=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let h=0;h<u;++h){let d=h*c,g=new Float32Array(c-1);g[0]=p[d];for(let w=1;w<g.length;++w)g[w]=g[w-1]+p[d+w];let x=yR.alea(i.toString()),b=h*s;for(let w=0;w<s;++w){let C=x();f[b+w]=g.length;for(let k=0;k<g.length;k++)if(C<g[k]){f[b+w]=k;break}}}return a||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(m,"int32",f)}var bR={kernelName:Oc,backendName:"cpu",kernelFunc:EY};var $Y=er.nonMaxSuppressionV3Impl;function AY(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o;Y(n,"NonMaxSuppression");let u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,{selectedIndices:p}=$Y(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var wR={kernelName:Ya,backendName:"cpu",kernelFunc:AY};var DY=er.nonMaxSuppressionV4Impl;function RY(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o;Y(n,"NonMaxSuppressionPadded");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,{selectedIndices:m,validOutputs:f}=DY(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var CR={kernelName:Pc,backendName:"cpu",kernelFunc:RY};var FY=er.nonMaxSuppressionV5Impl;function _Y(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o;Y(n,"NonMaxSuppressionWithScore");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=FY(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var IR={kernelName:Za,backendName:"cpu",kernelFunc:_Y};function OY(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o;Y(n,"oneHot");let u=y.sizeFromShape(n.shape),c=new Float32Array(u*i);c.fill(l);let p=e.data.get(n.dataId).values;for(let m=0;m<u;++m)p[m]>=0&&p[m]<i&&(c[m*i+p[m]]=a);return e.makeTensorInfo([...n.shape,i],s,c)}var SR={kernelName:Qa,backendName:"cpu",kernelFunc:OY};function td(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Cn({inputs:{input:o},backend:e}),s=td({inputs:{x:n},backend:e}),i=Ni({inputs:{input:o},backend:e}),a=td({inputs:{x:i},backend:e}),l=sr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Jh({backend:e,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var vR={kernelName:ni,backendName:"cpu",kernelFunc:td};function kR(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Cn({inputs:{input:o},backend:e}),s=kR({inputs:{x:n},backend:e}),i=Ni({inputs:{input:o},backend:e}),a=td({inputs:{x:i},backend:e}),l=sr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Jh({backend:e,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var TR={kernelName:Hs,backendName:"cpu",kernelFunc:kR};function qS(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return bm({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=bm({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=Ml({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var NR={kernelName:qs,backendName:"cpu",kernelFunc:qS};function PY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;Y(n,"pad");let a=s.map((b,w)=>b[0]+n.shape[w]+b[1]),l=s.map(b=>b[0]),u=e.data.get(n.dataId).values,c=y.sizeFromShape(n.shape),p=n.shape.length,m=y.computeStrides(n.shape),f=y.sizeFromShape(a),h=a.length,d=y.computeStrides(a),g=y.getTypedArrayFromDType(n.dtype,f);i!==0&&g.fill(i);for(let b=0;b<c;b++){let C=y.indexToLoc(b,p,m).map((E,A)=>E+l[A]),k=y.locToIndex(C,h,d);g[k]=u[b]}return{dataId:e.write(g,a,n.dtype),shape:a,dtype:n.dtype}}var jy={kernelName:Ks,backendName:"cpu",kernelFunc:PY};var LY=Wt((r,t)=>Math.pow(r,t)),zY=Xt(Yn,LY),ER={kernelName:Yn,backendName:"cpu",kernelFunc:zY};function MY(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,p=e.data.get(i.dataId).values,m=a.map(g=>e.data.get(g.dataId).values),f=a.map(g=>g.shape),[h,d]=_y(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,d)}var $R={kernelName:Lc,backendName:"cpu",kernelFunc:MY};function BY(r){let{backend:t,attrs:e}=r,{start:o,stop:n,dtype:s,step:i}=e,a=Oy(o,n,i,s);return t.makeTensorInfo([a.length],s,a)}var AR={kernelName:Ja,backendName:"cpu",kernelFunc:BY};var VY=kt(Qn,r=>1/r),DR={kernelName:Qn,backendName:"cpu",kernelFunc:VY};function GY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeBilinear");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(y.sizeFromShape([p,u,c,h])),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=0,C=x[0]/b[0],k=x[1]/b[1];for(let E=0;E<p;E++)for(let A=0;A<u;A++){let D;i?D=C*(A+.5)-.5:D=C*A;let _=Math.max(0,Math.floor(D)),P=D-_,B=Math.min(m-1,Math.ceil(D)),V=E*l[0]+_*l[1],G=E*l[0]+B*l[1];for(let W=0;W<c;W++){let U;i?U=k*(W+.5)-.5:U=k*W;let H=Math.max(0,Math.floor(U)),Z=U-H,q=Math.min(f-1,Math.ceil(U)),Q=V+H*l[2],tt=G+H*l[2],rt=V+q*l[2],lt=G+q*l[2];for(let at=0;at<h;at++){let ht=d[Q+at],ct=d[tt+at],gt=d[rt+at],vt=d[lt+at],$t=ht+(gt-ht)*Z,Dt=ct+(vt-ct)*Z,Ut=$t+(Dt-$t)*P;g[w++]=Ut}}}return e.makeTensorInfo([p,u,c,h],"float32",g)}var RR={kernelName:Zs,backendName:"cpu",kernelFunc:GY};function UY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeBilinearGrad");let a=y.computeStrides(n.shape),[l,u,c,p]=n.shape,[,m,f]=s.shape,h=new Float32Array(l*u*c*p),d=[i&&m>1?u-1:u,i&&f>1?c-1:c],g=[i&&m>1?m-1:m,i&&f>1?f-1:f],x=d[0]/g[0],b=d[1]/g[1],w=e.data.get(s.dataId).values,C=0;for(let k=0;k<l;k++){let E=k*a[0];for(let A=0;A<m;A++){let D=A*x,_=Math.floor(D),P=Math.min(Math.ceil(D),u-1),B=E+_*a[1],V=E+P*a[1],G=D-_,W=1-G;for(let U=0;U<f;U++){let H=U*b,Z=Math.floor(H),q=Math.min(Math.ceil(H),c-1),Q=H-Z,tt=1-Q,rt=B+Z*a[2],lt=B+q*a[2],at=V+Z*a[2],ht=V+q*a[2],ct=W*tt,gt=W*Q,vt=G*tt,$t=G*Q;for(let Dt=0;Dt<p;Dt++){let Ut=w[C++];h[rt+Dt]+=Ut*ct,h[lt+Dt]+=Ut*gt,h[at+Dt]+=Ut*vt,h[ht+Dt]+=Ut*$t}}}}return e.makeTensorInfo([l,c,u,p],"float32",h)}var FR={kernelName:Mc,backendName:"cpu",kernelFunc:UY};function WY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeNearestNeighbor");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,d=e.data.get(n.dataId).values,g=new Float32Array(p*u*c*h),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],w=x[0]/b[0],C=x[1]/b[1],k=0;for(let E=0;E<p;E++){let A=E*l[0];for(let D=0;D<u;D++){let _=i?w*(D+.5):w*D,P=Math.min(m-1,s?Math.round(_):Math.floor(_));i&&(P=Math.max(0,P));let B=A+P*l[1];for(let V=0;V<c;V++){let G=i?C*(V+.5):C*V,W=Math.min(f-1,s?Math.round(G):Math.floor(G));i&&(W=Math.max(0,W));let U=B+W*l[2];for(let H=0;H<h;H++){let Z=d[U+H];g[k++]=Z}}}}return e.makeTensorInfo([p,u,c,h],n.dtype,g)}var _R={kernelName:Ys,backendName:"cpu",kernelFunc:WY};function HY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeNearestNeighborGrad");let a=y.computeStrides(n.shape),l=y.computeStrides(s.shape),[u,c,p,m]=n.shape,[,f,h]=s.shape,d=new Float32Array(u*c*p*m),g=e.data.get(s.dataId).values,x=[i&&f>1?c-1:c,i&&h>1?p-1:p],b=[i&&f>1?f-1:f,i&&h>1?h-1:h],w=x[0]/b[0],C=x[1]/b[1],k=1/w,E=1/C,A=Math.ceil(k)*2+2,D=Math.ceil(E)*2+2;for(let _=0;_<u;_++){let P=_*a[0];for(let B=0;B<c;B++){let V=P+B*a[1],G=Math.floor(B*k),W=Math.floor(G-A/2);for(let U=0;U<p;U++){let H=V+U*a[2],Z=Math.floor(U*E),q=Math.floor(Z-D/2);for(let Q=0;Q<m;Q++){let tt=0;for(let rt=0;rt<A;rt++){let lt=rt+W;if(lt<0||lt>=f)continue;let at=P+lt*l[1],ht=lt*w,ct=Math.min(c-1,i?Math.round(ht):Math.floor(ht));if(B===ct)for(let gt=0;gt<D;gt++){let vt=gt+q;if(vt<0||vt>=h)continue;let $t=at+vt*l[2],Dt=vt*C,Ut=Math.min(p-1,i?Math.round(Dt):Math.floor(Dt));U===Ut&&(tt+=g[$t+Q])}}d[H+Q]=tt}}}}return e.makeTensorInfo(n.shape,n.dtype,d)}var OR={kernelName:zc,backendName:"cpu",kernelFunc:HY};function qY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o;Y(n,"reverse");let i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Tr({inputs:{x:n},backend:e});let l=new Kt(n.shape,n.dtype),u=e.bufferSync(n);for(let c=0;c<l.size;c++){let p=l.indexToLoc(c),m=p.slice();a.forEach(f=>m[f]=n.shape[f]-1-m[f]),l.set(u.get(...m),...p)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}var PR={kernelName:tl,backendName:"cpu",kernelFunc:qY};var LR={kernelName:ul,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,c,p,m]=o.shape,[f,h]=I.getImageCenter(i,c,p),d=255,g=Math.sin(n),x=Math.cos(n),b=a.data.get(o.dataId).values;for(let C=0;C<u;C++){let k=C*p*c*m;for(let E=0;E<c;E++){let A=E*(p*m);for(let D=0;D<p;D++){let _=D*m;for(let P=0;P<m;P++){let B=[u,E,D,P],V=B[2],G=B[1],W=(V-f)*x-(G-h)*g,U=(V-f)*g+(G-h)*x;W=Math.round(W+f),U=Math.round(U+h);let H=s;if(typeof s!="number"&&(P===3?H=d:H=s[P]),W>=0&&W<p&&U>=0&&U<c){let q=U*(p*m),Q=W*m,tt=k+q+Q+P;H=b[tt]}let Z=k+A+_+P;l[Z]=H}}}}return{dataId:a.write(l,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var KY=kt(Zi,r=>{let t=Math.floor(r);return r-t<.5?Math.floor(r):r-t>.5?Math.ceil(r):t%2===0?t:t+1}),zR={kernelName:Zi,backendName:"cpu",kernelFunc:KY};function jY(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=!0,f=e.bufferSync(n),h=e.bufferSync(s),d=Sa(f,h,i,p,u,l,a,c,0,m);return e.makeTensorInfo(i,d.dtype,d.values)}var MR={kernelName:el,backendName:"cpu",kernelFunc:jY};function XY(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<t?e=n+1:o=n;return o}function YY(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<=t?e=n+1:o=n;return o}function BR(r,t,e,o,n,s){let i=y.getArrayFromDType("int32",e*n);for(let a=0;a<e;++a){let l=r.slice(a*o,(a+1)*o),u=a*n;for(let c=0;c<n;++c)i[u+c]=s==="left"?XY(l,t[c+u]):YY(l,t[c+u])}return i}function ZY(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=BR(a,l,n.shape[0],n.shape[1],s.shape[1],i);return e.makeTensorInfo(s.shape,"int32",u)}var VR={kernelName:Bc,backendName:"cpu",kernelFunc:ZY};function QY(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t;Y([o,n,s],"select");let i=o.shape.length,a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=oe(n.dtype,s.dtype),p=y.makeZerosTypedArray(y.sizeFromShape(n.shape),c),m=0,f=i===0||i>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let h=0;h<a.length;h++)for(let d=0;d<f;d++)a[h]===1?p[m++]=l[h]:p[m++]=u[h];return e.makeTensorInfo(n.shape,c,p)}var GR={kernelName:Qs,backendName:"cpu",kernelFunc:QY};var JY=I.SELU_SCALEALPHA,t8=I.SELU_SCALE,e8=kt(Qi,r=>r>=0?t8*r:JY*(Math.exp(r)-1)),UR={kernelName:Qi,backendName:"cpu",kernelFunc:e8};var r8=kt(Ji,r=>r<0?-1:r>0?1:0),WR={kernelName:Ji,backendName:"cpu",kernelFunc:r8};var o8=kt(rs,r=>Math.sin(r)),HR={kernelName:rs,backendName:"cpu",kernelFunc:o8};var n8=kt(os,r=>Math.sinh(r)),qR={kernelName:os,backendName:"cpu",kernelFunc:n8};var s8=11920928955078125e-23,KR=Math.log(s8)+2,i8=kt(ta,r=>{let t=r>-KR,e=r<KR,o=Math.exp(r),n;return e?n=o:t?n=r:n=Math.log(1+o),n}),jR={kernelName:ta,backendName:"cpu",kernelFunc:i8};function a8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;Y([n],"spaceToBatchND");let a=y.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let E=1+s.length;E<n.shape.length;++E)l.push([0,0]);let u=jy.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),c=I.getReshaped(u.shape,s,a,!1),p=I.getPermuted(c.length,s.length,!1),m=I.getReshapedPermuted(u.shape,s,a,!1),d=Bt({inputs:{x:u},backend:e,attrs:{shape:c}}),b=Te({inputs:{x:d},backend:e,attrs:{perm:p}}),k=Bt({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(b),k}var XR={kernelName:ti,backendName:"cpu",kernelFunc:a8};function l8(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=e.data.get(i.dataId).values[0],[p,m,f,h,d]=Py(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var YR={kernelName:Vc,backendName:"cpu",kernelFunc:l8};function u8(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.data.get(n.dataId).values),a=e.data.get(o.dataId).values,l=Array.from(e.data.get(s.dataId).values),[u,c,p]=Ly(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var ZR={kernelName:Gc,backendName:"cpu",kernelFunc:u8};function c8(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=xm(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var QR={kernelName:Uc,backendName:"cpu",kernelFunc:c8};function p8(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=xm(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var JR={kernelName:Wc,backendName:"cpu",kernelFunc:p8};function m8(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1,h=e.bufferSync(n),d;switch(s.dtype){case"bool":{let g=e.bufferSync(s),x=Boolean(e.data.get(i.dataId).values[0]);d=Sa(h,g,a,m,c,u,l,p,x,f);break}case"float32":{let g=e.bufferSync(s),x=e.data.get(i.dataId).values[0];d=Sa(h,g,a,m,c,u,l,p,x,f);break}case"int32":{let g=e.bufferSync(s),x=e.data.get(i.dataId).values[0];d=Sa(h,g,a,m,c,u,l,p,x,f);break}case"string":{let g=e.bufferSync(s),x=y.decodeString(e.data.get(i.dataId).values[0]);d=Sa(h,g,a,m,c,u,l,p,x,f);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return e.makeTensorInfo(a,d.dtype,d.values)}var tF={kernelName:rl,backendName:"cpu",kernelFunc:m8};function f8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return l.map(p=>{let m=[...c];m[a]=p;let f=kn({inputs:{x:n},backend:e,attrs:{begin:u,size:m}});return u[a]+=p,f})}var eF={kernelName:ei,backendName:"cpu",kernelFunc:f8};var rF={kernelName:ol,backendName:"cpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t;Y(e,"square");let n=o.data.get(e.dataId).values,s=new Float32Array(n.length);for(let a=0;a<n.length;++a){let l=n[a];s[a]=l*l}return{dataId:o.write(s,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}};var h8=kt(ra,(r,t)=>{let e=t;return isNaN(r)?NaN:r>0?1:e.alpha}),oF={kernelName:ra,backendName:"cpu",kernelFunc:h8};function d8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o;Y(n,"stridedSlice");let{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=xe.sliceInfo(n.shape,s,i,a,l,u,c,p,m),k;if(d)k=Bt({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let E=xe.computeOutShape(b,w,C),A=kn({inputs:{x:n},backend:e,attrs:{begin:b,size:E}});k=Bt({inputs:{x:A},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(A)}else{let E=e.bufferSync(n),A=zy(f,E,C,b);k=e.makeTensorInfo(h,A.dtype,A.values)}return k}var nF={kernelName:nl,backendName:"cpu",kernelFunc:d8};function g8(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.data.get(c.dataId).values,f=e.data.get(p.dataId).values,[h,d]=My(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var sF={kernelName:sl,backendName:"cpu",kernelFunc:g8};function x8(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values[0],[u,c,p]=By(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var iF={kernelName:Hc,backendName:"cpu",kernelFunc:x8};function y8(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.data.get(s.dataId).values,a=Vy(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var aF={kernelName:qc,backendName:"cpu",kernelFunc:y8};var b8=kt(ea,r=>Math.tan(r)),lF={kernelName:ea,backendName:"cpu",kernelFunc:b8};var w8=kt(ns,r=>Math.tanh(r)),uF={kernelName:ns,backendName:"cpu",kernelFunc:w8};function C8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;Y(n,"tile");let i=Gy(e.bufferSync(n),s);return e.makeTensorInfo(i.shape,i.dtype,i.values)}var cF={kernelName:tn,backendName:"cpu",kernelFunc:C8};function I8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o;Y(n,"topk");let a=e.data.get(n.dataId).values,[l,u]=Uy(a,n.shape,n.dtype,s,i);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}var pF={kernelName:il,backendName:"cpu",kernelFunc:I8};function S8(r){let{inputs:t,attrs:e,backend:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=e,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=y.computeStrides(n.shape),b=x[0],w=x[1],C=x[2],k=y.computeStrides(g),E=k[0],A=k[1],D=k[2],_=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(g));_.fill(l);let P=o.data.get(n.dataId).values,B=o.data.get(s.dataId).values;for(let G=0;G<c;++G){let W=s.shape[0]===1?B:B.subarray(G*8,G*8+8);for(let U=0;U<h;++U)for(let H=0;H<d;++H)for(let Z=0;Z<f;++Z){let q,Q=W[6]*H+W[7]*U+1;if(Q===0)continue;let tt=(W[0]*H+W[1]*U+W[2])/Q,rt=(W[3]*H+W[4]*U+W[5])/Q,lt=mF(tt,m,a),at=mF(rt,p,a);switch(i){case"nearest":q=E8(P,p,m,b,w,C,G,at,lt,Z,l);break;case"bilinear":q=$8(P,p,m,b,w,C,G,at,lt,Z,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let ht=G*E+U*A+H*D+Z;_[ht]=q}return o.makeTensorInfo(g,n.dtype,_)}return{dataId:o.write(_,g,n.dtype),shape:n.shape,dtype:n.dtype}}var fF={kernelName:al,backendName:"cpu",kernelFunc:S8};function mF(r,t,e){switch(e){case"reflect":return v8(r,t);case"wrap":return k8(r,t);case"nearest":return N8(r,t);case"constant":default:return T8(r,t)}}function v8(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=2*t;e<o&&(e=o*Math.trunc(-e/o)+e),e=e<-t?e+o:-e-1}else if(e>t-1)if(t<=1)e=0;else{let o=2*t;e-=o*Math.trunc(e/o),e>=t&&(e=o-e-1)}return y.clamp(0,e,t-1)}function k8(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=t-1;e+=t*(Math.trunc(-e/o)+1)}else if(e>t-1)if(t<=1)e=0;else{let o=t-1;e-=t*Math.trunc(e/o)}return y.clamp(0,e,t-1)}function T8(r,t){return r}function N8(r,t){return y.clamp(0,r,t-1)}function ed(r,t,e,o,n,s,i,a,l,u,c){let p=i*o+a*n+l*s+u;return 0<=a&&a<t&&0<=l&&l<e?r[p]:c}function E8(r,t,e,o,n,s,i,a,l,u,c){let p=Math.round(a),m=Math.round(l);return ed(r,t,e,o,n,s,i,p,m,u,c)}function $8(r,t,e,o,n,s,i,a,l,u,c){let p=Math.floor(a),m=Math.floor(l),f=p+1,h=m+1,d=(h-l)*ed(r,t,e,o,n,s,i,p,m,u,c)+(l-m)*ed(r,t,e,o,n,s,i,p,h,u,c),g=(h-l)*ed(r,t,e,o,n,s,i,f,m,u,c)+(l-m)*ed(r,t,e,o,n,s,i,f,h,u,c);return(f-a)*d+(a-p)*g}function A8(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Y(s,"unique");let i=o.data.get(s.dataId).values,{outputValues:a,outputShape:l,indices:u}=Wy(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var hF={kernelName:Kc,backendName:"cpu",kernelFunc:A8};function D8(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n.shape.length,a=n.shape[s],l=new Array(i-1),u=0;for(let f=0;f<i;f++)f!==s&&(l[u++]=n.shape[f]);let c=new Array(i).fill(0),p=n.shape.slice();p[s]=1;let m=new Array(a);for(let f=0;f<m.length;f++){c[s]=f;let h=kn({inputs:{x:n},backend:e,attrs:{begin:c,size:p}});m[f]=Bt({inputs:{x:h},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(h)}return m}var dF={kernelName:oi,backendName:"cpu",kernelFunc:D8};function R8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o;Y(n,"unsortedSegmentSum");let a=n.shape.length,l=s.shape.length,u=[],c=[],p=a-l,m=s;for(let h=0;h<p;++h){let d=bm({inputs:{input:m},backend:e,attrs:{dim:h+1}});m=d,c.push(d)}for(let h=0;h<i;++h){let d=y.createScalarValue(h,"int32"),g=e.makeTensorInfo([],"int32",d),x=fS({inputs:{a:g,b:m},backend:e}),b=In({inputs:{x},backend:e,attrs:{dtype:"float32"}}),w=Bu({inputs:{a:b,b:n},backend:e}),C=va({inputs:{x:w},backend:e,attrs:{axis:0,keepDims:!1}});u.push(C),c.push(g),c.push(x),c.push(b),c.push(w),c.push(C)}let f=qS({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var gF={kernelName:ll,backendName:"cpu",kernelFunc:R8};var F8=[WA,oA,HA,qA,lA,KA,jA,XA,YA,ZA,QA,JA,tD,eD,rD,nD,sD,iD,aD,UA,lD,uD,cD,pD,aA,uA,mD,nA,fD,dD,gD,xD,yD,bD,wD,CD,ID,SD,vD,kD,TD,ND,ED,$D,AD,DD,RD,FD,_D,OD,LD,LA,zD,cA,MD,pA,BD,mA,VD,GD,UD,fA,WD,HD,qD,KD,jD,hA,dA,sA,XD,hD,YD,ZD,QD,zA,gA,xA,JD,yA,tR,eR,rR,oR,nR,sR,iR,bA,aR,lR,uR,cR,mR,fR,hR,wA,dR,gR,bR,CA,IA,wR,CR,IR,SA,SR,TR,NR,jy,ER,MA,kA,$R,AR,iA,Qh,DR,BA,VA,GA,RR,FR,_R,OR,PR,LR,zR,EA,MR,VR,GR,UR,AA,WR,HR,qR,DA,xR,jR,XR,YR,ZR,QR,JR,tF,eF,FA,rF,_A,oF,nF,sF,iF,aF,OA,PD,lF,uF,cF,pF,fF,vA,hF,dF,gF,vR];for(let r of F8)jc(r);var Gu={},Xy={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function xF(r,t){Gu[r]=t}function Co(r,t){if(!(r in Gu)||t!=null){let o=O8(r,t);if(o!==null)Gu[r]=o;else return console.log("Could not get context for WebGL version",r),null}let e=Gu[r];return e==null||e.isContextLost()?(delete Gu[r],Co(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Gu[r])}function _8(r){if(typeof OffscreenCanvas<"u"&&r===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function O8(r,t){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let e=t??_8(r);return e.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete Gu[r]},!1),L().getBool("SOFTWARE_WEBGL_ENABLED")&&(Xy.failIfMajorPerformanceCaveat=!1),r===1?e.getContext("webgl",Xy)||e.getContext("experimental-webgl",Xy):e.getContext("webgl2",Xy)}var Bl;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Bl||(Bl={}));var Nr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(Nr||(Nr={}));var yr;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(yr||(yr={}));function Uu(r,t){return[t,r]}function yF(r,t){return r*t}function rd(r){let t=y.sizeFromShape(r),e=Math.ceil(t/4);return y.sizeToSquarishShape(e)}function Ei(r,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(r/2))]}function bF(r,t){let[e,o]=Ei(r,t);return e*o*4}function od(r,t){let e=r,o,n,s,i,a,l,u,c,p,m;return L().getNumber("WEBGL_VERSION")===2?(o=e.R32F,n=e.R16F,s=e.RGBA16F,i=e.RGBA32F,a=e.RED,u=4,c=1,p=e.HALF_FLOAT,m=e.FLOAT,l=e.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=e.RGBA,a=r.RGBA,u=4,c=4,p=t!=null?t.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function yt(r,t){let e=t();return L().getBool("DEBUG")&&P8(r),e}function P8(r){let t=r.getError();if(t!==r.NO_ERROR)throw new Error("WebGL Error: "+M8(r,t))}var L8=596e-10,z8=65504;function wF(r){return!!(L().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||L8<Math.abs(r)&&Math.abs(r)<z8)}function M8(r,t){switch(t){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function nd(r,t){return ka(r,()=>r.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function CF(r,t){let e=ka(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(yt(r,()=>r.shaderSource(e,t)),yt(r,()=>r.compileShader(e)),r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function IF(r,t){let e=ka(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(yt(r,()=>r.shaderSource(e,t)),yt(r,()=>r.compileShader(e)),L().get("ENGINE_COMPILE_ONLY"))return e;if(r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw ZS(t,r.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}var B8=/ERROR: [0-9]+:([0-9]+):/g;function ZS(r,t){let e=B8.exec(t);if(e==null){console.log(`Couldn't parse line number in error: ${t}`),console.log(r);return}let o=+e[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>y.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(t.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function SF(r){return ka(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function vF(r,t){if(yt(r,()=>r.linkProgram(t)),!L().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(t,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function Zy(r,t){if(yt(r,()=>r.validateProgram(t)),r.getProgramParameter(t,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function kF(r,t){let e=ka(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return yt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),yt(r,()=>r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function TF(r,t){let e=ka(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return yt(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)),yt(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function NF(r){return ka(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function EF(r,t){let e=L().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||t<=0){let o=`[${r}x${t}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>e||t>e){let o=`[${r}x${t}]`,n=`[${e}x${e}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function $F(r){return ka(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function QS(r,t,e,o,n,s,i){let a=r.getAttribLocation(t,e);return a===-1?!1:(yt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),yt(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),yt(r,()=>r.enableVertexAttribArray(a)),!0)}function V8(r,t,e){U8(r,e),yt(r,()=>r.activeTexture(r.TEXTURE0+e)),yt(r,()=>r.bindTexture(r.TEXTURE_2D,t))}function AF(r,t,e){return ka(r,()=>r.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function DF(r,t,e){return r.getUniformLocation(t,e)}function RF(r,t,e,o){yt(r,()=>V8(r,t,o)),yt(r,()=>r.uniform1i(e,o))}function Qy(r,t,e){yt(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),yt(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0))}function JS(r,t){yt(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),yt(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function sd(r){let t=r.checkFramebufferStatus(r.FRAMEBUFFER);if(t!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+G8(r,t))}function G8(r,t){switch(t){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function ka(r,t,e){let o=yt(r,()=>t());if(o==null)throw new Error(e);return o}function U8(r,t){let e=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=t+r.TEXTURE0;if(o<r.TEXTURE0||o>e){let n=`[gl.TEXTURE0, gl.TEXTURE${e}]`;throw new Error(`textureUnit must be in ${n}.`)}}function Vl(r,t=2){return y.sizeFromShape(r.slice(0,r.length-t))}function Gl(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function Jy(r){let t=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(t=[Vl(r),...Gl(r)]),t}function FF(r,t=!1){let e=L().getNumber("WEBGL_MAX_TEXTURE_SIZE");t&&(e=e*2,r=r.map((n,s)=>s>=r.length-2?y.nearestLargerEven(r[s]):r[s]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let o=y.sizeFromShape(r);if(r.length<=1&&o<=e)return[1,o];if(r.length===2&&r[0]<=e&&r[1]<=e)return r;if(r.length===3&&r[0]*r[1]<=e&&r[2]<=e)return[r[0]*r[1],r[2]];if(r.length===3&&r[0]<=e&&r[1]*r[2]<=e)return[r[0],r[1]*r[2]];if(r.length===4&&r[0]*r[1]*r[2]<=e&&r[3]<=e)return[r[0]*r[1]*r[2],r[3]];if(r.length===4&&r[0]<=e&&r[1]*r[2]*r[3]<=e)return[r[0],r[1]*r[2]*r[3]];if(t){let n=Vl(r),s=2,i=2;return r.length&&([s,i]=Gl(r)),o=n*(s/2)*(i/2),y.sizeToSquarishShape(o).map(a=>a*2)}return y.sizeToSquarishShape(o)}function Yy(r){return r%2===0}function Wu(r,t){if(r=r.slice(-2),t=t.slice(-2),y.arraysEqual(r,t)||!r.length||!t.length||r[0]===0||r[1]===0||t[0]===0||t[1]===0)return!0;if(r.length!==t.length){let e=r.slice(-1)[0],o=t.slice(-1)[0];if(e===o||Yy(e)&&Yy(o)&&(r[0]===1||t[0]===1))return!0}return r[1]===t[1]&&Yy(r[0])&&Yy(t[0])}var jS,XS;function _F(r){if(jS==null){let t=Co(r);jS=t.getParameter(t.MAX_TEXTURE_SIZE)}return jS}function OF(r){if(XS==null){let t=Co(r);XS=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,XS)}function PF(r){if(r===0)return 0;let t,e=Co(r);return Xo(e,"EXT_disjoint_timer_query_webgl2")&&r===2?t=2:Xo(e,"EXT_disjoint_timer_query")?t=1:t=0,t}function Xo(r,t){return r.getExtension(t)!=null}function tv(r){try{if(Co(r)!=null)return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function LF(r){if(r===0)return!1;let t=Co(r);if(r===1){if(!Xo(t,"OES_texture_float"))return!1}else if(!Xo(t,"EXT_color_buffer_float"))return!1;return YS(t)}function zF(r){if(r===0)return!1;let t=Co(r);if(r===1){if(!Xo(t,"OES_texture_float")||!Xo(t,"WEBGL_color_buffer_float"))return!1}else{if(Xo(t,"EXT_color_buffer_float"))return YS(t);let o="EXT_color_buffer_half_float";if(Xo(t,o)){let n=t.getExtension(o);return W8(t,n)}return!1}return YS(t)}function YS(r){let t=od(r),e=r.createTexture();r.bindTexture(r.TEXTURE_2D,e);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatFloat,o,n,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(e),r.deleteFramebuffer(s),i}function W8(r,t){let e=od(r,t),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatHalfFloat,n,s,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function MF(r){return r!==2?!1:Co(r).fenceSync!=null}function $i(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}var Tt=L();Tt.registerFlag("HAS_WEBGL",()=>Tt.getNumber("WEBGL_VERSION")>0);Tt.registerFlag("WEBGL_VERSION",()=>tv(2)?2:tv(1)?1:0);Tt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);Tt.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>Tt.get("WEBGL_VERSION")===2);Tt.registerFlag("WEBGL_CPU_FORWARD",()=>!0);Tt.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);Tt.registerFlag("WEBGL_PACK",()=>Tt.getBool("HAS_WEBGL"));Tt.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_CLIP",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_PACK_REDUCE",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_LAZILY_UNPACK",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_CONV_IM2COL",()=>Tt.getBool("WEBGL_PACK"));Tt.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>_F(Tt.getNumber("WEBGL_VERSION")));Tt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>OF(Tt.getNumber("WEBGL_VERSION")));Tt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=Tt.getNumber("WEBGL_VERSION");return r===0?0:PF(r)});Tt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Tt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ml.isMobile());Tt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>LF(Tt.getNumber("WEBGL_VERSION")));Tt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>Tt.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:Tt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));Tt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>zF(Tt.getNumber("WEBGL_VERSION")));Tt.registerFlag("WEBGL_FENCE_API_ENABLED",()=>MF(Tt.getNumber("WEBGL_VERSION")));Tt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Tt.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);Tt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});Tt.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>ml.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});Tt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);Tt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);Tt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);Tt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);Tt.registerFlag("WEBGL_EXP_CONV",()=>!1);Tt.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Tt.getBool("IS_TEST"));function Ne(){let r,t,e,o,n,s,i,a,l,u;return L().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",t="in",e="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",t="attribute",e="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:t,varyingVs:e,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function ys(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function Hu(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function H8(r,t){let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function BF(r,t,e="index"){let o=r.map((s,i)=>i),n=H8(o,t);return n.map((s,i)=>{let a=`int ${r[i]} = ${e} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${e} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function wm(r){let t=y.computeStrides(r).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function Cm(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var eb=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:VF}=I;function GF(r,t,e){let o=[];if(r.forEach(f=>{let h=y.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${h>1?`[${h}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),e.enableShapeUniforms){let{uniformShape:d}=rb(e.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(d.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>q8(f,t,e.packedInputs,e.enableShapeUniforms)).join(`
`),i=t.texShape,a=Ne(),l=X8(a),u,c,p=Q8(a);return t.isPacked?(u=K8(t.logicalShape,i,e.enableShapeUniforms),c=Z8(a)):(u=j8(t.logicalShape,i,e.enableShapeUniforms),c=Y8(a)),e.packedInputs&&(p+=rZ),[p,l,c,n,u,s,e.userCode].join(`
`)}function Sm(r,t=!1){let e=r.shapeInfo.logicalShape;switch(e.length){case 0:return hZ(r,t);case 1:return gZ(r,t);case 2:return yZ(r,t);case 3:return wZ(r,t);case 4:return IZ(r,t);case 5:return SZ(r);case 6:return vZ(r);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function UF(r,t){switch(r.shapeInfo.logicalShape.length){case 0:return fZ(r);case 1:return dZ(r,t);case 2:return xZ(r,t);case 3:return bZ(r,t);default:return CZ(r,t)}}function q8(r,t,e=!1,o){let n="";e?n+=UF(r,o):n+=Sm(r,o);let s=r.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(e?n+=kZ(r,t):n+=TZ(r,t)),n}function K8(r,t,e){switch(r.length){case 0:return WF();case 1:return oZ(r,t,e);case 2:return pZ(r,t,e);case 3:return sZ(r,t,e);default:return aZ(r,t,e)}}function j8(r,t,e){switch(r.length){case 0:return WF();case 1:return nZ(r,t,e);case 2:return mZ(r,t,e);case 3:return iZ(r,t,e);case 4:return lZ(r,t,e);case 5:return uZ(r,t);case 6:return cZ(r,t);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function X8(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function Y8(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function Z8(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function Q8(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${J8}
    ${tZ}
    ${eZ}
  `}var J8=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,tZ=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,eZ=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,rZ=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function WF(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function oZ(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return o[0]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function nZ(r,t,e){return t[0]===1?e?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:t[1]===1?e?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `}function sZ(r,t,e){if(e)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function iZ(r,t,e){if(e)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Hu(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=ys(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function aZ(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function lZ(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Hu(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=ys(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function uZ(r,t){let e=ys(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function cZ(r,t){let e=ys(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function pZ(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(y.arraysEqual(r,t))return e?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return e?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function mZ(r,t,e){return y.arraysEqual(r,t)?e?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:r[1]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:e?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function qu(r){return`offset${r}`}function fZ(r){let t=r.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),o=Ne();return`
    vec4 ${e}() {
      return ${o.texture2D}(${t}, halfCR);
    }
  `}function hZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${e};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;let i=qu(e);if(t)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `}function dZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=r.shapeInfo.texShape,s=Ne();if(t)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `}function gZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${vm(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;let a=qu(e);return i===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    `:s===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `:t?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `}function xZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=Ne();if(s!=null&&y.arraysEqual(e,s))return t?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(t)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function yZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(e,s)){if(t)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=y.squeezeShape(e),l=i;if(l.length<e.length){let m=km(r,l),f=["row","col"];return`
      ${Sm(m,t)}
      float ${n}(int row, int col) {
        return ${n}(${Tm(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${vm(r)}
      }
    `;let u=s[0],c=s[1],p=qu(o);return c===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:t?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function bZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(e[0]===1){let m=e.slice(1),f=[1,2],h=km(r,m),d=["b","row","col"];return`
        ${UF(h,t)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${Tm(d,f)});
        }
      `}let a=Ne();if(t)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(e[2]/2),p=c*Math.ceil(e[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function wZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[1]*e[2],i=e[2],{newShape:a,keptDims:l}=y.squeezeShape(e),u=a;if(u.length<e.length){let d=km(r,u),g=["row","col","depth"];return`
        ${Sm(d,t)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${Tm(g,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${vm(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let h=qu(o);return t?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * ${s} + col * ${i} + depth + ${h};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${h};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function CZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=Ne();if(t)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",h=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let d=2;d<i-1;d++)f=`int b${d}, `+f,m*=s[i-d-1],h=`b${d} * ${m} + `+h;return`
    vec4 ${o}(${f}) {
      int index = ${h};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `}function IZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[3],i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(e);if(l.length<e.length){let b=km(r,l),w=["row","col","depth","depth2"];return`
      ${Sm(b,t)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${Tm(w,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${vm(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],h=`int stride2 = ${o}Shape[3];`,d=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${h}
        ${d}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1]*e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=qu(o);return t?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${h}
      ${d}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function SZ(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=t[4],s=t[3]*n,i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(t);if(l.length<t.length){let d=km(r,l),g=["row","col","depth","depth2","depth3"];return`
      ${Sm(d)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${Tm(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${vm(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]},
               ${t[2]*t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;let h=qu(e);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${h};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `}function vZ(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(t);if(n.length<t.length){let g=km(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Sm(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${Tm(x,s)});
      }
    `}let i=t[5],a=t[4]*i,l=t[3]*a,u=t[2]*l,c=t[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${vm(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],h=m[1];if(h===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(h===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]*t[4]},
               ${t[2]*t[3]*t[4]},
               ${t[3]*t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;let d=qu(e);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${d};
      vec2 uv = uvFromFlat(${f}, ${h}, index);
      return sampleTexture(${e}, uv);
    }
  `}function vm(r){let t=r.name,e=y.sizeFromShape(r.shapeInfo.logicalShape);return e<2?`return ${t};`:`
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function kZ(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=VF(r.shapeInfo.logicalShape,t.logicalShape),l=_t(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,w)=>`coords.${p[w+u]}`).join(", ");let f="return outputValue;",d=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(t.logicalShape)===1;if(s===1&&!d&&!x)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(d&&!x)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,w=s-1;a.indexOf(b)>-1&&a.indexOf(w)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(w)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function TZ(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=t.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&y.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;let u=_t(l),c=VF(r.shapeInfo.logicalShape,t.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(d=>`coords.${f[d+p]} = 0;`).join(`
`);let h="";return l<2&&a>0?h="coords":h=r.shapeInfo.logicalShape.map((d,g)=>`coords.${f[g+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${h});
    }
  `}function _t(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function rb(r,t,e){let{newShape:o,keptDims:n}=y.squeezeShape(t),s=t.length,i=r&&s===3&&t[0]===1,a=i?t.slice(1):o,l=!r&&s>1&&!y.arraysEqual(t,e)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:t,keptDims:n}}function km(r,t){let e=JSON.parse(JSON.stringify(r));return e.shapeInfo.logicalShape=t,e}function Tm(r,t){return t.map(e=>r[e]).join(", ")}function qF(r,t,e,o){let n=e.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=GF(n,i,t),l=IF(r.gl,a),u=r.createProgram(l);return L().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},ev(r,t,u))}function ev(r,t,e){let o={},n={},s={},i=[],a,l,u,c=null,p=null;p=r.getUniformLocation(e,"NAN",!1),L().getNumber("WEBGL_VERSION")===1&&(c=r.getUniformLocation(e,"INFINITY",!1));let m=!1;for(let f=0;f<t.variableNames.length;f++){let h=t.variableNames[f];o[h]=r.getUniformLocation(e,h,m),o[`offset${h}`]=r.getUniformLocation(e,`offset${h}`,m),t.enableShapeUniforms&&(n[`${h}Shape`]=r.getUniformLocation(e,`${h}Shape`,m),s[`${h}TexShape`]=r.getUniformLocation(e,`${h}TexShape`,m))}return t.enableShapeUniforms&&(a=r.getUniformLocation(e,"outShape",m),u=r.getUniformLocation(e,"outShapeStrides",m),l=r.getUniformLocation(e,"outTexShape",m)),t.customUniforms&&t.customUniforms.forEach((f,h)=>{i[h]=r.getUniformLocation(e,f.name,m)}),{uniformLocations:o,customUniformLocations:i,infLoc:c,nanLoc:p,inShapesLocations:n,inTexShapesLocations:s,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}}function HF(r,t){if(r.length!==t.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t.length} inputs`);r.forEach((e,o)=>{let n=e.logicalShape,s=t[o],i=s.shape;if(!y.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&s.isUniform)return;let a=e.texShape,l=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function KF(r,t,e,o,n){t.program.enableShapeUniforms||(HF(t.inShapeInfos,e),HF([t.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(t.webGLProgram),L().getNumber("WEBGL_VERSION")===1&&t.infLoc!==null&&r.gl.uniform1f(t.infLoc,1/0),t.nanLoc!==null&&r.gl.uniform1f(t.nanLoc,NaN),e.forEach((l,u)=>{let c=t.program.variableNames[u],p=t.uniformLocations[c],m=t.uniformLocations[`offset${c}`],f=t.inShapesLocations[`${c}Shape`],h=t.inTexShapesLocations[`${c}TexShape`];if(f){let{uniformShape:d}=rb(t.program.packedInputs,l.shape,l.texData.texShape);switch(d.length){case 1:r.gl.uniform1iv(f,new Int32Array(d));break;case 2:r.gl.uniform2iv(f,new Int32Array(d));break;case 3:r.gl.uniform3iv(f,new Int32Array(d));break;case 4:r.gl.uniform4iv(f,new Int32Array(d));break;default:break}}if(h&&r.gl.uniform2i(h,l.texData.texShape[0],l.texData.texShape[1]),p!=null){if(l.isUniform){if(y.sizeFromShape(l.shape)<2)r.gl.uniform1f(p,l.uniformValues[0]);else{let d=l.uniformValues;d instanceof Float32Array||(d=new Float32Array(d)),r.gl.uniform1fv(p,d)}return}l.texData.slice!=null&&m!=null&&r.gl.uniform1i(m,l.texData.slice.flatOffset),r.setInputMatrixTexture(l.texData.texture.texture,p,u)}});let a=t.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(t.outShapeStridesLocation){let l=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l));break;default:break}}t.outTexShapeLocation&&r.gl.uniform2i(t.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),t.program.customUniforms&&n&&t.program.customUniforms.forEach((l,u)=>{let c=t.customUniformLocations[u],p=n[u];if(l.type==="float")r.gl.uniform1fv(c,p);else if(l.type==="vec2")r.gl.uniform2fv(c,p);else if(l.type==="vec3")r.gl.uniform3fv(c,p);else if(l.type==="vec4")r.gl.uniform4fv(c,p);else if(l.type==="int")r.gl.uniform1iv(c,p);else if(l.type==="ivec2")r.gl.uniform2iv(c,p);else if(l.type==="ivec3")r.gl.uniform3iv(c,p);else if(l.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${l.type} is not supported yet.`)}),r.executeProgram()}function jF(r,t,e){let o="";t.concat(e).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=rb(r.packedInputs,i.shape,l),m="",f="",h="";if(c.length===1&&r.packedInputs){let k=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${k[0]>1}_${k[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let k=y.computeStrides(c);h=`${k[0]===l[1]}_${k[k.length-1]===l[1]}`}let d=i.shape.length,g=c.length===2&&y.arraysEqual(i.shape,l),x=y.sizeFromShape(i.shape)===1,b=I.getBroadcastDims(i.shape,e.shape),w=!r.packedInputs&&d===e.shape.length&&y.arraysEqual(l,e.texData.texShape),C=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${d}_${w}_${u?p:""}_${c.length}_${x}_${b}_${g}_${m}_${f}_${h}_${C}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${L().getNumber("WEBGL_VERSION")}`,s}function le(r){return L().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var ob=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Bl.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=Ne();this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Hu(["r","c","d"],t):ys(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `}};var nb=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Bl.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=Ne();this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Hu(["r","c","d"],t):ys(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `}};var sb=class{constructor(t){this.variableNames=["A"],this.outTexUsage=Nr.DOWNLOAD;let e=Ne();this.outputShape=t,this.userCode=`
      ${eb}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `}};var ib=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Nr.DOWNLOAD;let e=Ne();this.outputShape=t,this.userCode=`
      ${eb}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `}};var ab=class{constructor(t,e=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=Ne();this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length);let n="result";e&&(n="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?Cm():wm(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${o.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${o.output} = vec4(${n}, 0., 0., 0.);
      }
    `}};var lb=class{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=Ne();this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length);let n="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Cm():wm(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function XF(r){let t=Ne(),e=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return CF(r,e)}function YF(r){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return kF(r,t)}function ZF(r){let t=new Uint16Array([0,1,2,2,1,3]);return TF(r,t)}function id(r,t,e,o,n,s){EF(t,e);let i=NF(r),a=r.TEXTURE_2D;return yt(r,()=>r.bindTexture(a,i)),yt(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),yt(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),yt(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),yt(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),L().getNumber("WEBGL_VERSION")===1?yt(r,()=>r.texImage2D(a,0,o,t,e,0,n,s,null)):yt(r,()=>r.texStorage2D(a,1,o,t,e)),yt(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function rv(r){return r.internalFormatFloat}function QF(r,t,e,o){let[n,s]=Uu(t,e);return id(r,n,s,rv(o),o.textureFormatFloat,r.FLOAT)}function ov(r){return r.internalFormatHalfFloat}function JF(r,t,e,o){let[n,s]=Uu(t,e);return id(r,n,s,ov(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function nv(r){return r.downloadTextureFormat}function t_(r,t,e,o){let[n,s]=Uu(t,e);return id(r,n,s,nv(o),r.RGBA,r.UNSIGNED_BYTE)}function sv(r){return r.internalFormatPackedFloat}function e_(r,t,e,o){let[n,s]=Ei(t,e);return id(r,n,s,sv(o),r.RGBA,r.FLOAT)}function iv(r){return r.internalFormatPackedHalfFloat}function r_(r,t,e,o){let[n,s]=Ei(t,e);return id(r,n,s,iv(o),r.RGBA,o.textureTypeHalfFloat)}function o_(r,t,e){return yt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),QS(r,t,"clipSpacePos",e,3,20,0)&&QS(r,t,"uv",e,2,20,12)}function n_(r,t,e,o,n,s){yt(r,()=>r.bindTexture(r.TEXTURE_2D,t));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(e*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(e*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),L().getNumber("WEBGL_VERSION")===2?yt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e,o,r.RGBA,a,i)):yt(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,e,o,0,r.RGBA,a,i)),yt(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function s_(r,t,e){yt(r,()=>r.bindTexture(r.TEXTURE_2D,t)),e.data instanceof Uint8Array?L().getNumber("WEBGL_VERSION")===2?yt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,e.data)):yt(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width,e.height,0,r.RGBA,r.UNSIGNED_BYTE,e.data)):L().getNumber("WEBGL_VERSION")===2?yt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,e)):yt(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)),yt(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function i_(r,t,e,o){let n=r.createBuffer();yt(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*t*e;return yt(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),yt(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,0)),yt(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function a_(r,t,e){let o=r,n=new Float32Array(e);return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function l_(r,t,e,o){let[n,s]=Uu(t,e),i=4,a=new Uint8Array(yF(t*e,i));return yt(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function u_(r,t,e,o,n,s,i,a){let l=r,u=new Float32Array(bF(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function c_(r,t,e){let o=new Float32Array(t*e*4);return yt(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,o)),o}var Nm=class{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let e=L().getNumber("WEBGL_VERSION");t!=null?(this.gl=t,xF(e,t)):this.gl=Co(e);let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),L().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=nd(this.gl,s),Xo(this.gl,i))this.textureHalfFloatExtension=nd(this.gl,i);else if(L().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),Xo(this.gl,n))this.colorBufferHalfFloatExtension=nd(this.gl,n);else if(L().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",Xo(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(Xo(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=YF(this.gl),this.indexBuffer=ZF(this.gl),this.framebuffer=$F(this.gl),this.textureConfig=od(this.gl,this.textureHalfFloatExtension)}get debug(){return L().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let t=this.gl;yt(t,()=>t.finish()),yt(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),yt(t,()=>t.deleteFramebuffer(this.framebuffer)),yt(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),yt(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),yt(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),QF(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),JF(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),t_(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),s_(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,o,n){this.throwIfDisposed(),n_(this.gl,t,e,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),r_(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),e_(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(JS(this.gl,this.framebuffer),this.outputTexture=null),yt(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,o){return this.downloadMatrixDriver(t,()=>l_(this.gl,e,o,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,o,n,s,i){return u_(this.gl,t,e,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return a_(this.gl,t,e)}createBufferFromTexture(t,e,o){this.bindTextureToFrameBuffer(t);let n=i_(this.gl,e,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,o;if(L().getBool("WEBGL_FENCE_API_ENABLED")){let n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},e=s}else L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(e,L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:e,isFencePassed:o}}downloadMatrixFromPackedTexture(t,e,o){return this.downloadMatrixDriver(t,()=>c_(this.gl,e,o))}createProgram(t){this.throwIfDisposed();let e=this.gl;this.vertexShader==null&&(this.vertexShader=XF(e));let o=SF(e);return yt(e,()=>e.attachShader(o,this.vertexShader)),yt(e,()=>e.attachShader(o,t)),vF(e,o),this.debug&&Zy(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=o_(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),t!=null&&yt(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,this.program!=null&&this.debug&&Zy(this.gl,this.program),yt(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,o=!0){return this.throwIfDisposed(),o?AF(this.gl,t,e):DF(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),yt(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,o){this.throwIfDisposed(),this.throwIfNoProgram(),RF(this.gl,t,e,o)}setOutputMatrixTexture(t,e,o){this.setOutputMatrixTextureDriver(t,o,e)}setOutputPackedMatrixTexture(t,e,o){this.throwIfDisposed();let[n,s]=Ei(e,o);this.setOutputMatrixTextureDriver(t,n,s)}setOutputMatrixWriteRegion(t,e,o,n){this.setOutputMatrixWriteRegionDriver(o,t,n,e)}setOutputPackedMatrixWriteRegion(t,e,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&Zy(this.gl,this.program),sd(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let t=this.gl;this.debug&&this.debugValidate(),yt(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),yt(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=nd(this.gl,L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let e=this.gl,o=this.getQueryTimerExtensionWebGL2();e.endQuery(o.TIME_ELAPSED_EXT);return}let t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(e===0)return null;if(e===2){let o=this.gl;return o.getQueryParameter(t,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(t,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(e===0)return!0;if(e===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(t,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(t,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){let t=AZ(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){let{resolveFn:o}=this.itemsToPoll[e];o()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),!(this.itemsToPoll.length>1)&&y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Qy(this.gl,t,this.framebuffer),this.debug&&sd(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(Qy(this.gl,this.outputTexture,this.framebuffer),this.debug&&sd(this.gl)):JS(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);let o=e();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(t,e,o){this.throwIfDisposed();let n=this.gl;Qy(n,t,this.framebuffer),this.debug&&sd(n),this.outputTexture=t,yt(n,()=>n.viewport(0,0,e,o)),yt(n,()=>n.scissor(0,0,e,o))}setOutputMatrixWriteRegionDriver(t,e,o,n){this.throwIfDisposed(),yt(this.gl,()=>this.gl.scissor(t,e,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function AZ(r){let t=0;for(;t<r.length&&r[t]();++t);return t-1}var{addImpl:p_,bincountImpl:ub,bincountReduceImpl:m_,castImpl:f_,ceilImpl:h_,concatImpl:d_,equalImpl:g_,expImpl:x_,expm1Impl:y_,floorImpl:b_,gatherNdImpl:w_,gatherV2Impl:C_,greaterImpl:I_,greaterEqualImpl:S_,lessImpl:v_,lessEqualImpl:k_,linSpaceImpl:T_,logImpl:N_,maxImpl:E_,maximumImpl:$_,minimumImpl:A_,multiplyImpl:D_,negImpl:R_,notEqualImpl:F_,prodImpl:__,raggedTensorToTensorImpl:O_,rangeImpl:P_,rsqrtImpl:L_,scatterImpl:z_,sigmoidImpl:M_,simpleAbsImpl:cb,sliceImpl:B_,sparseFillEmptyRowsImpl:V_,sparseReshapeImpl:G_,sparseSegmentReductionImpl:pb,sqrtImpl:U_,stridedSliceImpl:W_,stringNGramsImpl:H_,stringSplitImpl:q_,stringToHashBucketFastImpl:K_,subImpl:j_,tileImpl:X_,topKImpl:Y_,transposeImpl:Ku,uniqueImpl:Z_}=_S;function av(r,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${r}.${e}`)}function Me(r,t){return t===1?[r]:av(r,t)}function Q_(r,t){if(r===1)return"rc";let e="";for(let o=0;o<r;o++)e+=t[o],o<r-1&&(e+=",");return e}var mb=class{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=le(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=Me("rc",this.rank),o=_t(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),i=this.getOutput(e);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(t){let e=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${t[t.length-1-i]},`+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let o=this.rank-2;o<this.rank;o++)e+=`${t[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(e+="||");return e}getSetup(t){if(this.rank===1)return"";let e=t.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(t){let e=this.getSourceCoordsArr(t);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`}};var Em=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${DZ(e,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Cm():wm(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};

        ${o}

        setOutput(result);
      }
    `}};function DZ(r,t){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t?BF(["r","c","d"],"inputShape"):ys(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var fb=class{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,o){let n=tO(e,o),s=eO(t,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=J_(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].shift();return this.usedTextures[s].push(l),l}let a;return n===yr.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):n===yr.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):n===yr.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):n===yr.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):n===yr.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,o,n){if(this.freeTextures==null)return;let s=tO(o,n),i=eO(e,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=J_(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=L().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;let t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);let e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function RZ(r,t){let e=r;if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===r.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}function J_(r,t,e,o,n){let s=FZ(t,o),i;if(n){let[l,u]=Ei(r[0],r[1]);i=l*u}else{let[l,u]=Uu(r[0],r[1]);i=l*u}let a=RZ(e,s);return i*a}function FZ(r,t){switch(r){case yr.PACKED_2X2_FLOAT32:return sv(t);case yr.PACKED_2X2_FLOAT16:return iv(t);case yr.UNPACKED_FLOAT32:return rv(t);case yr.UNPACKED_FLOAT16:return ov(t);case yr.PACKED_4X1_UNSIGNED_BYTE:return nv(t);default:throw new Error(`Unknown physical texture type ${r}`)}}function _Z(r){return L().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?yr.PACKED_2X2_FLOAT32:yr.UNPACKED_FLOAT32:r?yr.PACKED_2X2_FLOAT16:yr.UNPACKED_FLOAT16}function tO(r,t){if(r===Nr.UPLOAD)return yr.PACKED_2X2_FLOAT32;if(r===Nr.RENDER||r==null)return _Z(t);if(r===Nr.DOWNLOAD||r===Nr.PIXELS)return yr.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function eO(r,t,e){return`${r[0]}_${r[1]}_${t}_${e}`}var _r=class{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},rr="if (isnan(x)) return x;",rO="return x;",lv="return abs(x);";var oO="return (x >= 0.0) ? x : (exp(x) - 1.0);",nO=rr+`
  return (x < 0.0) ? 0.0 : x;
`,sO=rr+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,ju="return x;",iO="return 1.0 / (1.0 + exp(-1.0 * x));";var lO="return x;",uO=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,cO=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,pO=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,mO="return 1.0 / (1.0 + exp(-1.0 * x));",Yo=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var hb=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length);let e=t.length,o=Me("rc",e),n=_t(e),s=Q_(e,o),i=o.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var PZ=er.whereImpl,LZ=1e-7,zZ=1e-4,db={};function MZ(r){return r in db||(db[r]={}),db[r]}var BZ=L().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),VZ=600;function GZ(){return L().global.screen==null?1024:L().global.screen.height*L().global.screen.width*window.devicePixelRatio*VZ/1024/1024}var Xu=class extends _n{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!L().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(t!=null){if(t instanceof Nm)e=t;else{let o=Co(L().getNumber("WEBGL_VERSION"),t);e=new Nm(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=Co(L().getNumber("WEBGL_VERSION"));e=new Nm(o),this.binaryCache=MZ(L().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new fb(this.gpgpu),this.numMBBeforeWarning=GZ(),this.texData=new _i(this,zr())}nextDataId(){return Xu.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(t,e,o){if((L().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||L().getBool("DEBUG"))&&this.checkNumericalProblems(t),o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:e,dtype:o,values:t,usage:Nr.UPLOAD,refCount:1}),n}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){let e=this.texData.get(t);e.refCount++}decRef(t){if(this.texData.has(t)){let e=this.texData.get(t);e.refCount--}}move(t,e,o,n,s){if(L().getBool("DEBUG")&&this.checkNumericalProblems(e),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:o,dtype:n,values:e,usage:Nr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){let e=this.texData.get(t),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=e;if(i!=null){let m;l?m=new Yo(a,ju):m=new _r(a,ju);let f=this.runWebGLProgram(m,[{dataId:t,shape:a,dtype:n}],n),h=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),h}if(o!=null)return this.convertAndCacheOnCPU(t);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=I.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(t,p)}async read(t){if(this.pendingRead.has(t)){let h=this.pendingRead.get(t);return new Promise(d=>h.push(d))}let e=this.texData.get(t),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=e;if(s!=null){let h;l?h=new Yo(n,ju):h=new _r(n,ju);let d=this.runWebGLProgram(h,[{dataId:t,shape:n,dtype:i}],i),g=this.read(d.dataId);return this.disposeIntermediateTensorInfo(d),g}if(o!=null)return this.convertAndCacheOnCPU(t);if(L().getBool("DEBUG")&&!L().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&L().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&L().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);let h=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(h.texture.texture,...rd(n))}this.pendingRead.set(t,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let h=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),d=h[0],g=h[1];p=I.mergeRealAndImagArrays(d,g)}else if(u==null)p=this.getValuesFromTexture(t);else{let h=y.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,h)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let h=this.gpgpu.gl;yt(h,()=>h.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(t,p),f=this.pendingRead.get(t);return this.pendingRead.delete(t),f.forEach(h=>h(m)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&zr().removeDataId(t,this),this.pendingDeletes--),m}readToGPU(t,e={}){let o=this.texData.get(t),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new Yo(s,ju):f=new _r(s,ju);let h=this.runWebGLProgram(f,[{dataId:t,shape:s,dtype:a}],a),d=this.readToGPU(h,e);return this.disposeIntermediateTensorInfo(h),d}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(t,e.customTexShape),p=zr().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return ot(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return ot(t.shape,t.dtype,e)}checkNumericalProblems(t){if(t!=null)for(let e=0;e<t.length;e++){let o=t[e];if(!wF(o))throw L().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(t){let{shape:e,dtype:o,isPacked:n}=this.texData.get(t),s=y.sizeFromShape(e);if(L().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(t),f=this.texData.get(m.dataId),h=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...rd(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),h}let i=L().getBool("WEBGL_PACK")&&n===!0,a=i?Jy(e):e,l=i?new ib(a):new sb(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:t}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=y.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(t){return L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=y.now(),t)}async getQueryTime(t){if(L().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);let e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);let{complexTensorInfos:o}=this.texData.get(t);return o!=null&&(this.disposeData(o.real.dataId,e),this.disposeData(o.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){let{texture:e,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(t),l=a&&a.origDataId||t,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),e!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(e,n,s,i)));let c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=BZ){return L().getBool("WEBGL_CPU_FORWARD")&&t.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){I.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let e=t.dataSync();return PZ(t.shape,e)}packedUnaryOp(t,e,o){let n=new Yo(t.shape,e),s=this.compileAndRun(n,[t],o);return zr().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&t.dtype!=="complex64"){let n=cb(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,n)}if(L().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,lv,t.dtype);let e=new _r(t.shape,lv),o=this.compileAndRun(e,[t]);return zr().makeTensorFromTensorInfo(o)}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e,o){return zr().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,o),this)}unpackTensor(t){let e=new hb(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){let e=new mb(t.shape),o=!0;return this.runWebGLProgram(e,[t],t.dtype,null,o)}packedReshape(t,e){let o=[Vl(t.shape),...Gl(t.shape)],n={dtype:t.dtype,shape:o,dataId:t.dataId},s=[Vl(e),...Gl(e)],i=new Em(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],t.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}decode(t,e){let o=this.texData.get(t),{isPacked:n,shape:s,dtype:i}=o;if(e!=null){let m=y.sizeFromShape(s),f=e[0]*e[1]*4;y.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=Jy(s),l;n?l=new nb(a):l=new ob(a);let u=!0,c=[e??rd(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:t}],i,c,u,e);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(t,e,o,n,s=!1,i){let a=this.makeTensorInfo(t.outputShape,o),l=this.texData.get(a.dataId);if(t.packedOutput&&(l.isPacked=!0),t.outPackingScheme===Bl.DENSE){let x=i??rd(t.outputShape);l.texShape=x.map(b=>b*2)}if(t.outTexUsage!=null&&(l.usage=t.outTexUsage),y.sizeFromShape(a.shape)===0)return l.values=y.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=e.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!t.packedInputs&&y.sizeFromShape(x.shape)<=L().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};t.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!t.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Wu(b.shape,x.shape)){let w=x,C=x.shape;x.shape=b.shape,x=this.packedReshape(x,C),u.push(x),b=this.texData.get(x.dataId),w.shape=C}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=jF(t,c,p),f=this.getAndSaveBinary(m,()=>qF(this.gpgpu,t,c,p)),h=this.activeTimers!=null,d;h&&(d=this.startTimer()),L().get("ENGINE_COMPILE_ONLY")||KF(this.gpgpu,f,c,p,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),h&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)}));let g=L().get("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!L().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let x=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),x}return a}compileAndRun(t,e,o,n,s=!1){return o=o||e[0].dtype,this.runWebGLProgram(t,e,o,n,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(L().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=M(()=>{if(!L().get("WEBGL_RENDER_FLOAT32_ENABLED")){let t=L().getBool("DEBUG");L().set("DEBUG",!1);let e=this.abs(st(1e-8)).dataSync()[0];if(L().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?LZ:zZ}uploadToGPU(t){let e=this.texData.get(t),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=e;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let p=e.texShape;if(p==null&&(p=FF(o,l),e.texShape=p),s!=null){let m=Jy(o),f,h=p[1],d=p[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!g)&&([h,d]=Ei(p[0],p[1])),l?f=new lb(m,g):f=new ab(m,g);let x=g?[d,h]:p,b=this.makeTensorInfo(x,n),w=this.texData.get(b.dataId);g?w.usage=Nr.PIXELS:w.usage=Nr.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),h,d,s);let C=[[d,h]],k=!0,E=this.runWebGLProgram(f,[b],n,C,k),A=this.texData.get(E.dataId);e.texShape=A.texShape,e.isPacked=A.isPacked,e.usage=A.usage,L().get("ENGINE_COMPILE_ONLY")?this.disposeData(E.dataId):(e.texture=A.texture,e.values=null,this.texData.delete(E.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(p,a,n,l);e.texture=m}}convertAndCacheOnCPU(t,e){let o=this.texData.get(t),{dtype:n}=o;return this.releaseGPUData(t),e!=null&&(o.values=UZ(e,n)),o.values}acquireTexture(t,e,o,n){if(this.numBytesInGPU+=this.computeBytes(t,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,n)}computeBytes(t,e){return t[0]*t[1]*y.bytesPerElement(e)}checkCompileCompletion(){for(let[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){let t=[];if(this.gpgpu.parallelCompilationExtension){for(let[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}else{for(let[,e]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(e),n(!0)}catch(s){throw s}});t.push(o)}return Promise.all(t)}}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await wf(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(ZS(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let[,t]of Object.entries(this.binaryCache)){let{uniformLocations:e,customUniformLocations:o,infLoc:n,nanLoc:s,inShapesLocations:i,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=ev(this.gpgpu,t.program,t.webGLProgram);t.uniformLocations=e,t.customUniformLocations=o,t.infLoc=n,t.nanLoc=s,t.inShapesLocations=i,t.inTexShapesLocations=a,t.outShapeLocation=l,t.outShapeStridesLocation=u,t.outTexShapeLocation=c}}};Xu.nextDataId=0;function UZ(r,t){if(t==="float32"||t==="complex64")return r;if(t==="int32"||t==="bool"){let e=t==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<e.length;++o)e[o]=Math.round(r[o]);return e}else throw new Error(`Unknown dtype ${t}`)}ml.isBrowser()&&sp("webgl",()=>new Xu,2);var gb=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var Zo=class{constructor(t,e,o){this.variableNames=["A","B"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.enableShapeUniforms=le(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var Ul=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;var Tn=class{constructor(t,e,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=I.assertAndGetBroadcastShape(e,o);let s=this.outputShape.length;this.enableShapeUniforms=le(s);let i="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${_t(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=Me("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function Be(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var fO={kernelName:Fo,backendName:"webgl",kernelFunc:Be};function uo(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.texData.get(s.dataId),a=Be({inputs:{x:o},backend:e}),l=Be({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var hO={kernelName:Gi,backendName:"webgl",kernelFunc:uo};var uv="return (a < 0.) ? b * a : a;",cv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function WZ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=e.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),a=L().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Tn(cv,n.shape,i.shape):new Zo(uv,n.shape,i.shape),l=e.runWebGLProgram(a,[n,i],"float32");return e.disposeIntermediateTensorInfo(i),l}var dO={kernelName:Ms,backendName:"webgl",kernelFunc:WZ};var pv="return (a < 0.) ? b * a : a;",mv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function HZ(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=L().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Tn(mv,o.shape,n.shape):new Zo(pv,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],"float32")}var gO={kernelName:js,backendName:"webgl",kernelFunc:HZ};var Nn="if (isnan(x)) return x;",xO=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,yO=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;function xt({opSnippet:r,packedOpSnippet:t,cpuKernelImpl:e,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&e!=null){let p=a.texData.get(i.dataId),m=e(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=L().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&t!=null,c;return u?c=new Yo(i.shape,t):c=new _r(i.shape,r),a.runWebGLProgram(c,[i],l)}}function Zt({opSnippet:r,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let h=c.texData.get(l.dataId),d=c.texData.get(u.dataId),[g,x]=[[h.complexTensorInfos.real,d.complexTensorInfos.real],[h.complexTensorInfos.imag,d.complexTensorInfos.imag]].map(w=>{let[C,k]=w,E={dataId:C.dataId,dtype:C.dtype,shape:l.shape},A={dataId:k.dataId,dtype:k.dtype,shape:u.shape},D=new Zo(r,l.shape,u.shape);return c.runWebGLProgram(D,[E,A],oe(C.dtype,k.dtype))}),b=uo({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),b}let p=s||oe(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let h=c.texData.get(l.dataId).values,d=c.texData.get(u.dataId).values,g=l.dtype==="string"?I.fromUint8ToStringArray(h):h,x=l.dtype==="string"?I.fromUint8ToStringArray(d):d,[b,w]=n(l.shape,u.shape,g,x,p),C=c.makeTensorInfo(w,p),k=c.texData.get(C.dataId);return k.values=b,C}let m=L().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&t!=null,f;return m?f=new Tn(t,l.shape,u.shape,e):f=new Zo(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function Ta(r,t=!1){if(r==="linear")return t?lO:rO;if(r==="relu")return t?cO:nO;if(r==="elu")return t?uO:oO;if(r==="relu6")return t?pO:sO;if(r==="prelu")return t?mv:pv;if(r==="leakyrelu")return t?cv:uv;if(r==="sigmoid")return t?mO:iO;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var $m=class{constructor(t,e,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=le(this.outputShape.length);let c=n?t[1]:t[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";a&&(l?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:g=`vec4 activation(vec4 x) {
          ${a}
        }`,x="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let w="rc.x",C="rc.x";t[0]<e[0]?w=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(C=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${w};
          int batchB = ${C};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${d[0]});
          result += (${h[1]} * ${d[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var fv={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},ad=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var bO="return a * b;";function ld(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=I.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),u=new ad(fv.REAL,o.shape,n.shape),c=new ad(fv.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=uo({inputs:{real:m,imag:f},backend:e});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}if(e.shouldExecuteOnCPU([o,n])){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),[u,c]=D_(o.shape,n.shape,a.values,l.values,s),p=e.makeTensorInfo(c,s),m=e.texData.get(p.dataId);return m.values=u,p}let i;return L().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new Tn(bO,o.shape,n.shape):i=new Zo(bO,o.shape,n.shape),e.runWebGLProgram(i,[o,n],s)}var wO={kernelName:Lo,backendName:"webgl",kernelFunc:ld};function CO(r,t,e){let o=[Vl(r.shape),...Gl(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[Vl(t),...Gl(t)],i=new Em(s,o),a=!0,l=[o],u=e.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function J(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=e,a=y.sizeFromShape(n.shape),l=y.inferFromImplicitShape(s,a),u=y.sizeFromShape(l);y.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!Wu(n.shape,l)&&!(c.texture!==null&&Wu(c.shape,l))?CO(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var IO={kernelName:Xs,backendName:"webgl",kernelFunc:J};var ud=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(e!=null){let p=1/e;u=`sumValue += dot(values * ${y.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var xb=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a="0.0",l="";e==="prod"?a="1.0":e==="min"?(a="1.0 / 1e-20",l="min"):e==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="sum"?u="sumValue":e==="prod"?u="prodValue":e==="all"?u="allValue":e==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${e==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${e==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e==="min"} || ${e==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";e==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):e==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function KZ(r){let t=[];for(;t.length===0||t[t.length-1].outSize!==1;){let e=t.length?t[t.length-1].outSize:r[1],o=I.computeOptimalWindowSize(e);t.push({inSize:e,windowSize:o,outSize:Math.ceil(e/o)})}return t}function Io(r,t,e,o){let n=KZ(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;e==="mean"?c=i===0?new ud({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new ud({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new xb({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},e),p=s,s=o.runWebGLProgram(c,[s],t),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var yb=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[e[i]];this.outputShape=o,this.rank=o.length;let n=_t(this.rank),s=jZ(e);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function jZ(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(t);for(let n=0;n<r.length;n++)o[r[n]]=e[n];return o.join()}var bb=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(t.length);for(let c=0;c<o.length;c++)o[c]=t[e[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=_t(this.rank),s=av("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function Wl(r,t,e){let o=L().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bb(r.shape,t):new yb(r.shape,t);return e.runWebGLProgram(o,[r],r.dtype)}function SO(r,t,e,o){let n=t,s=r.shape.length,i=y.parseAxisParam(n,r.shape),a=i,l=I.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=Wl(r,l,o),a=I.getInnerMostAxes(a.length,s)),I.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=I.computeOutAndReduceShapes(c.shape,a),f=p;e&&(f=I.expandShapeToKeepDim(p,i));let h=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/h,x=J({inputs:{x:c},attrs:{shape:[g,h]},backend:o}),b=aa(r.dtype),w=Io(x,b,"sum",o),C=J({inputs:{x:w},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),u&&o.disposeIntermediateTensorInfo(c),C}function Yu(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return SO(n,s,i,e)}var vO={kernelName:Js,backendName:"webgl",kernelFunc:Yu};function Ce(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=Ku(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=Wl(n,s,i);return u}var kO={kernelName:en,backendName:"webgl",kernelFunc:Ce};var hv=1e3;function Zu({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],d=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(d),b=y.sizeFromShape(g),C=Mr.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let k=e?[x,p,f]:[x,f,p],E=o?[b,h,m]:[b,m,h],A=J({inputs:{x:r},backend:n,attrs:{shape:k}}),D=J({inputs:{x:t},backend:n,attrs:{shape:E}}),_=[A,D],P=Math.max(x,b),B=e?A.shape[1]:A.shape[2],V=s!=null,G=i!=null,W=l==="leakyrelu",U=l!=null?Ta(l,!0):null,H=V||G||W||U!=null,Z;if((f===1||h===1)&&B>hv&&H===!1){let Q=A,tt=D;e&&(Q=Ce({inputs:{x:A},backend:n,attrs:{perm:[0,2,1]}}),_.push(Q)),o&&(tt=Ce({inputs:{x:D},backend:n,attrs:{perm:[0,2,1]}}),_.push(tt));let rt=h!==1,lt=h===1,at=Q;rt&&(at=J({inputs:{x:Q},backend:n,attrs:{shape:[P,B,1]}}),_.push(at));let ht=h===1?2:1,ct=tt;lt&&(ct=J({inputs:{x:tt},backend:n,attrs:{shape:[P,1,B]}}),_.push(ct));let gt=ld({inputs:{a:at,b:ct},backend:n});Z=Yu({inputs:{x:gt},backend:n,attrs:{axis:ht,keepDims:!0}}),_.push(gt)}else{let Q=oe(r.dtype,t.dtype),tt=new $m(k,E,[P,f,h],e,o,V,U,G,W),rt=[A,D];if(s!=null&&rt.push(s),G&&rt.push(i),W){let lt=n.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));rt.push(lt),_.push(lt)}Z=n.runWebGLProgram(tt,rt,Q)}let q=J({inputs:{x:Z},backend:n,attrs:{shape:C}});_.push(Z);for(let Q of _)n.disposeIntermediateTensorInfo(Q);return q}function XZ(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return Zu({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var TO={kernelName:oa,backendName:"webgl",kernelFunc:XZ};var NO="return abs(x);";function YZ(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=e.texData.get(o.dataId),i=cb(s.values);return e.makeTensorInfo(o.shape,o.dtype,i)}let n;return L().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Yo(o.shape,NO):n=new _r(o.shape,NO),e.runWebGLProgram(n,[o],o.dtype)}var EO={kernelName:On,backendName:"webgl",kernelFunc:YZ};var ZZ=rr+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,QZ=xt({opSnippet:ZZ}),$O={kernelName:Pi,backendName:"webgl",kernelFunc:QZ};var JZ=rr+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,tQ=xt({opSnippet:JZ}),AO={kernelName:Li,backendName:"webgl",kernelFunc:tQ};var DO="return a + b;",eQ=Zt({opSnippet:DO,packedOpSnippet:DO,supportsComplex:!0,cpuKernelImpl:p_}),RO={kernelName:Jr,backendName:"webgl",kernelFunc:eQ};var wb=class{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var Cb=class{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function Ib(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return Be({inputs:{x:o[0]},backend:e});if(o.length>L().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=Ib({inputs:o.slice(0,l),backend:e}),c=Ib({inputs:o.slice(l),backend:e});return Ib({inputs:[u,c],backend:e})}let n=o.map(l=>l.dtype).reduce((l,u)=>oe(l,u)),s=o.map(l=>l.shape),a=L().getBool("WEBGL_PACK")?new Cb(o[0].shape,s):new wb(o[0].shape,s);return e.runWebGLProgram(a,o,n)}var FO={kernelName:ks,backendName:"webgl",kernelFunc:Ib};function rQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=Ce({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,a)),I.assertAxesAreInnerMostDims("all",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=J({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Io(d,d.dtype,"all",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=J({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=J({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var _O={kernelName:hc,backendName:"webgl",kernelFunc:rQ};function oQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=Ce({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,a)),I.assertAxesAreInnerMostDims("any",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=J({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Io(d,d.dtype,"any",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=J({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=J({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var OO={kernelName:dc,backendName:"webgl",kernelFunc:oQ};var Sb=class{constructor(t,e,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=t;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=e==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var vb=class{constructor(t,e,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(t.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=_t(l),c=Me("coords",l),p,m;if(i===1){m=l+1;let D=_t(m);p=`
        ${D} sourceLocR = ${D}(${c.join()}, 0);
        ++${c[l-1]};
        ${D} sourceLocG = ${D}(${c.join()}, 0);
        ++${c[l-2]};
        ${D} sourceLocA = ${D}(${c.join()}, 0);
        --${c[l-1]};
        ${D} sourceLocB = ${D}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),h="."+f[m-1],d=f.map(D=>"int "+D),g=Me("sourceLocR",m-1).concat("inIdx.r"),x=Me("sourceLocG",m-1).concat("inIdx.g"),b=Me("sourceLocB",m-1).concat("inIdx.b"),w=Me("sourceLocA",m-1).concat("inIdx.a"),C=o==="max"?"greaterThan":"lessThan",k=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`,E=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,A=n?"":`
      float getBestIndicesAChannel(${d.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${d.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${A}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${E};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${E};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${C}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function PO(r,t,e,o=null){let n=t.shape[0],s=t.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=I.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new Sb(a,e,o==null),u=[t];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=PO(r,t,e,c);return r.disposeIntermediateTensorInfo(c),p}function LO(r,t,e,o=null){let n=o!=null?o.shape:t.shape,s=n[n.length-1],i=I.computeOptimalWindowSize(s),a=new vb(n,i,e,o==null),l=o==null?[t]:[t,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===t.shape.length){let c=LO(r,t,e,u);return r.disposeIntermediateTensorInfo(u),c}return u}function kb(r,t,e,o){let n=[e];if(I.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,t.shape.length),!L().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let s=[],i=r.texData.get(t.dataId),a=i!==null&&i.isPacked,l=t;a&&(l=r.unpackTensor(t),s.push(l));let[u,c]=I.computeOutAndReduceShapes(l.shape,n),p=y.sizeFromShape(c),m=J({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=PO(r,m,o);s.push(f);let h=J({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(d=>r.disposeIntermediateTensorInfo(d)),h}return LO(r,t,o)}function nQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Ce({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=kb(e,l,i[0],"max");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var zO={kernelName:Ts,backendName:"webgl",kernelFunc:nQ};function sQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Ce({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=kb(e,l,i[0],"min");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var MO={kernelName:Ns,backendName:"webgl",kernelFunc:sQ};var iQ=rr+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,aQ=xt({opSnippet:iQ}),BO={kernelName:zi,backendName:"webgl",kernelFunc:aQ};var lQ=rr+"return log(x + sqrt(x * x + 1.0));",uQ=xt({opSnippet:lQ}),VO={kernelName:Mi,backendName:"webgl",kernelFunc:uQ};var cQ=rr+`
  return atan(x);
`,pQ=xt({opSnippet:cQ}),GO={kernelName:Bi,backendName:"webgl",kernelFunc:pQ};var mQ=xO+`
  return atan(a, b);
`,fQ=`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+yO+`
  return result;
`,hQ=Zt({opSnippet:mQ,packedOpSnippet:fQ}),UO={kernelName:Pn,backendName:"webgl",kernelFunc:hQ};var dQ=rr+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,gQ=xt({opSnippet:dQ}),WO={kernelName:Vi,backendName:"webgl",kernelFunc:gQ};var bs=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterHeight,m=t.effectiveFilterWidth,f=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;let d=e==="avg",g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,x=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`,b="0.0";if(d||(b="-1.0 / 1e-20"),o){let D=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${D} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let w="max",C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(C="avgValue / count");let k=Math.floor(i/4)*4,E=i%4,A=`
      if (${d}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${k}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${A}
          }

          int xC = xCCorner + ${k};
          if (${E===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${A}
          } else if (${E===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${A}
          } else if (${E===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${A}
          }
        }
        setOutput(${C});
      }
    `}},Hl=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,p=t.dilationHeight,m=t.dilationWidth,f=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,g=t.padInfo.front,x=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;let w=e==="avg",C="0.0";if(w||(C="-1.0 / 1e-20"),o){let P=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${d};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${P} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${h} * ${d} +
                      wR * ${d} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let k="max",E=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(E="avgValue / count");let A=Math.floor(i/4)*4,D=i%4,_=`
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${k}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${C};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${C});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${A}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${_}
            }

            int xC = xCCorner + ${A};
            if (${D===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${_}
            } else if (${D===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${_}
            } else if (${D===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${_}
            }
          }
          setOutput(${E});
        }
      }
    `}};function xQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;$i(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Be({inputs:{x:n},backend:e});let p=new bs(c,"avg",!1);return e.runWebGLProgram(p,[n],"float32")}var HO={kernelName:Es,backendName:"webgl",kernelFunc:xQ};function yQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=I.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new Hl(p,"avg",!1);return e.runWebGLProgram(m,[n],"float32")}var qO={kernelName:Pa,backendName:"webgl",kernelFunc:yQ};var Tb=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=l-1-t.padInfo.top,p=u-1-t.padInfo.left,m=1/(e*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},Nb=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterDepth,m=t.effectiveFilterHeight,f=t.effectiveFilterWidth,h=p-1-t.padInfo.front,d=m-1-t.padInfo.top,g=f-1-t.padInfo.left,x=1/(e*o*n);this.userCode=`
      const ivec3 pads = ivec3(${h}, ${d}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function bQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=I.computePool3DInfo(i.shape,a,l,p,u,c),f=new Nb(m);return e.runWebGLProgram(f,[n],i.dtype)}var KO={kernelName:xc,backendName:"webgl",kernelFunc:bQ};function wQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;$i([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=I.computePool2DInfo(i.shape,a,l,1,u),p=new Tb(c);return e.runWebGLProgram(p,[n],i.dtype)}var jO={kernelName:gc,backendName:"webgl",kernelFunc:wQ};function CQ(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return Zu({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var XO={kernelName:$s,backendName:"webgl",kernelFunc:CQ};var Eb=class{constructor(t,e,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o);let a="0.0";n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var $b=class{constructor(t,e,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o);let a="vec4(0.0)";n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var IQ=({inputs:r,backend:t,attrs:e})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=L().getBool("WEBGL_PACK_NORMALIZATION")?new $b(o.shape,n.shape,s.shape,c,p,l):new Eb(o.shape,n.shape,s.shape,c,p,l);return t.runWebGLProgram(m,u,u[0].dtype)},YO={kernelName:Ls,backendName:"webgl",kernelFunc:IQ};var Ab=class{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;let e=_t(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=SQ(this.rank),n,s=t.map((i,a)=>`sourceLoc.${dv[a]} = start[${a}] + coords.${dv[a]};`);n=`
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},dv=["x","y","z","w","u","v"];function SQ(r){if(r===1)return"sourceLoc";if(r<=6)return dv.slice(0,r).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var Db=class{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let e=_t(this.rank),o=Me("coords",this.rank),n=Me("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${t[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${e}(${t.map((c,p)=>`start[${p}]`).join()});`:t.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function vQ(r,t,e,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(e,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=e,i.dtype=r.dtype;let a=xe.computeFlatOffset(t,y.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function ws(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=xe.parseSliceParams(n,s,i);if(xe.assertParamsValid(n,a,l),y.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);if(e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.texData.get(n.dataId),m=B_(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=e.texData.get(n.dataId),c=xe.isSliceContinous(n.shape,a,l);if(u||!c){let p=L().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Db(l):new Ab(l),m=[a];return e.runWebGLProgram(p,[n],n.dtype,m)}return e.uploadToGPU(n.dataId),vQ(n,a,l,e)}var ZO={kernelName:es,backendName:"webgl",kernelFunc:ws};var kQ=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,w)=>b*w),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=[],h=J({inputs:{x:n},backend:e,attrs:{shape:l}}),d=Ce({inputs:{x:h},backend:e,attrs:{perm:u}}),g=J({inputs:{x:d},backend:e,attrs:{shape:c}}),x=ws({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(d),f.push(g),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),x},QO={kernelName:As,backendName:"webgl",kernelFunc:kQ};function TQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.readSync(n.dataId),l=e.readSync(s.dataId),u=ub(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var JO={kernelName:yc,backendName:"webgl",kernelFunc:TQ};function NQ(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.readSync(o.dataId),i=e.readSync(n.dataId),a=I.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var tP={kernelName:bc,backendName:"webgl",kernelFunc:NQ};var EQ="return float(a != b);",gv=Zt({opSnippet:EQ,cpuKernelImpl:F_,dtype:"bool"}),eP={kernelName:Xn,backendName:"webgl",kernelFunc:gv};function Na(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return Be({inputs:{x:n.complexTensorInfos.real},backend:e})}var rP={kernelName:Yi,backendName:"webgl",kernelFunc:Na};var $Q="return float(int(x));";function oP(r,t){let e=new _r(r.shape,$Q),o=t.runWebGLProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function xv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Be({inputs:{x:n},backend:e});let i=ee(n.shape),a=xv({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=uo({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=Na({inputs:{input:n},backend:e}),a=xv({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(i),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=Be({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let i=e.texData.get(n.dataId).values,[a,l,u]=f_(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}if(s==="int32")return oP(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=gv({inputs:{a:n,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var nP={kernelName:No,backendName:"webgl",kernelFunc:xv};var sP="return ceil(x);",AQ=xt({opSnippet:sP,packedOpSnippet:sP,cpuKernelImpl:h_}),iP={kernelName:Eo,backendName:"webgl",kernelFunc:AQ};var Rb=class{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var Fb=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function DQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a;L().getBool("WEBGL_PACK_CLIP")?a=new Fb(n.shape):a=new Rb(n.shape);let l=[[s],[i]];return e.runWebGLProgram(a,[n],n.dtype,l)}var aP={kernelName:Ln,backendName:"webgl",kernelFunc:DQ};var _b=class{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function lP(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function RQ(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.texData.get(o.dataId),s=new _b(o.shape),i=[lP(o,n.complexTensorInfos.real),lP(o,n.complexTensorInfos.imag)];return e.runWebGLProgram(s,i,i[0].dtype)}var uP={kernelName:La,backendName:"webgl",kernelFunc:RQ};var Ob=class{constructor(t){this.outputShape=[],this.outputShape=I.computeOutShape(t,1),this.variableNames=t.map((i,a)=>`T${a}`);let e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];let o=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){let a=e[i-1];o.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=e.length,s=e[e.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var Lb=class{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=I.computeOutShape(t,e);let o=this.outputShape,n=o.length,s=_t(n),i=Me("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((d,g)=>`T${g}`);let l=new Array(t.length-1);l[0]=t[0][e];for(let d=1;d<l.length;d++)l[d]=l[d-1]+t[d][e];let u=a[e],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let d=1;d<l.length;d++){let g=l[d-1];m+=`
        if (${u} < ${l[d]}  && ${u} >= ${l[d-1]}) {
          return getChannel(
            getT${d}(${Pb(a,u,g)}),
            vec2(${Pb(c,u,g)}));
        }`}let f=l.length,h=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${Pb(a,u,h)}),
          vec2(${Pb(c,u,h)}));`,this.userCode=`
      float getValue(${a.map(d=>"int "+d)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function Pb(r,t,e){let o=r.indexOf(t);return r.map((s,i)=>i===o?`${s} - ${e}`:s).join()}function Qu(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return Be({inputs:{x:n.complexTensorInfos.imag},backend:e})}var cP={kernelName:Ka,backendName:"webgl",kernelFunc:Qu};function Am(r,t,e){let o=r[0].dtype;if(o==="complex64"){let p=r.map(g=>Na({inputs:{input:g},backend:e})),m=r.map(g=>Qu({inputs:{input:g},backend:e})),f=Am(p,t,e),h=Am(m,t,e),d=uo({inputs:{real:f,imag:h},backend:e});return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),m.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),d}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let p=r.map(b=>{let w=y.sizeFromShape(b.shape.slice(t));return J({inputs:{x:b},backend:e,attrs:{shape:[-1,w]}})}),m=p.map(b=>({vals:e.readSync(b.dataId),shape:b.shape})),f=I.computeOutShape(p.map(b=>b.shape),1),h=p[0].shape[0]===1,d=d_(m,f,o,h),g=I.computeOutShape(r.map(b=>b.shape),t),x=e.makeTensorInfo(g,o,d);return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}let s=L().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>s){let p=[];for(let f=0;f<r.length;f+=s){let h=r.slice(f,f+s);p.push(Am(h,t,e))}let m=Am(p,t,e);for(let f of p)e.disposeIntermediateTensorInfo(f);return m}if(L().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){let p=new Lb(r.map(m=>m.shape),t);return e.runWebGLProgram(p,r,o)}let{tensors2D:i,outShape:a}=FQ(r,t,e),l=new Ob(i.map(p=>p.shape)),u=e.runWebGLProgram(l,i,o);i.forEach(p=>e.disposeIntermediateTensorInfo(p));let c=J({inputs:{x:u},attrs:{shape:a},backend:e});return e.disposeIntermediateTensorInfo(u),c}function FQ(r,t,e){let o=I.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>J({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(t))]},backend:e})),outShape:o}}function yv(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=I.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return Be({inputs:{x:a[0]},backend:e});let l=a.map(u=>u.shape);return I.assertParamsConsistent(l,s),Am(a,s,e)}var pP={kernelName:Ds,backendName:"webgl",kernelFunc:yv};var Dm=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;let i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,p=t.dilationWidth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4,g=t.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,w=g?3:1,C="",k="";o&&(n?C=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?C=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:C=`
          float activation(float x) {
            ${o}
          }
        `,k="result = activation(result);");let E=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${C}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${d===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${d===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${d===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${E}
        ${k}
        setOutput(result);
      }
    `}},zb=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let e=t.padInfo.front,o=t.padInfo.top,n=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.filterDepth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,d=t.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${d===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${d===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${d===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var Rm=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=le(this.outputShape.length);let i=t.padInfo.left,a=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,p=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<c;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;for(let g=0;g<c;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(p+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*l};
           `,a===1){if(x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,l===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=i%2===0?y.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,l>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let f="",h="";o&&(n?f=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?f=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:f=`vec4 activation(vec4 x) {
           ${o}
         }`,h="result = activation(result);");let d=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${f}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${d}
         ${h}
         setOutput(result);
       }
     `}};var Mb=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=le(this.outputShape.length);let{dataFormat:o}=e,n=Ne(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function Bb(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function Vb({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=e.inChannels,p=l[0]*l[1]*l[2],m=e.outChannels,f=e.dataFormat==="channelsLast",h=!1,d=!1,g,x=[];if(s!=null){let C=Bb(s.shape,f);C!=null&&(s=J({inputs:{x:s},backend:o,attrs:{shape:C}}),x.push(s))}if(n!=null){let C=Bb(n.shape,f);C!=null&&(n=J({inputs:{x:n},backend:o,attrs:{shape:C}}),x.push(n))}if(!((p===1||m===1)&&c>hv)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),l.slice(-3))){let C=l[0]*l[1]*(l[2]+1),k={dataId:r.dataId,shape:[1,C,e.inChannels],dtype:r.dtype},E=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(Wu(u.shape,k.shape),()=>`packed reshape ${u.shape} to ${k.shape} isn't free`);let A=J({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});x.push(A);let D=Zu({a:k,b:A,backend:o,transposeA:h,transposeB:d,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),_=o.texData.get(D.dataId);y.assert(_.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=E,_.shape=e.outShape,g=Be({inputs:{x:D},backend:o}),g.shape=e.outShape,x.push(D)}else{let C=e.outHeight*e.outWidth,k=J({inputs:{x:r},backend:o,attrs:{shape:f?[e.batchSize,C,e.inChannels]:[e.batchSize,e.inChannels,C]}}),E=J({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}}),A=Zu({a:f?k:E,b:f?E:k,transposeA:!f,transposeB:d,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});g=J({inputs:{x:A},backend:o,attrs:{shape:e.outShape}}),x.push(k),x.push(E),x.push(A)}for(let C of x)o.disposeIntermediateTensorInfo(C);return g}function Gb({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=e,h=f==="channelsLast",d=l*u*c,g=m*p,x=[e.batchSize,d,g],b=!0,w=!1,C=[];if(s!=null){let q=Bb(s.shape,h);q!=null&&(s=J({inputs:{x:s},backend:o,attrs:{shape:q}}),C.push(s))}if(n!=null){let q=Bb(n.shape,h);q!=null&&(n=J({inputs:{x:n},backend:o,attrs:{shape:q}}),C.push(n))}let k=J({inputs:{x:t},backend:o,attrs:{shape:[1,d,y.sizeFromShape(t.shape)/d]}});C.push(k);let E=new Mb(x,e),A=[r.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]],D=o.runWebGLProgram(E,[r],"float32",A),_=J({inputs:{x:D},backend:o,attrs:{shape:x}});C.push(D),C.push(_);let P=n!=null,B=s!=null,V=a==="leakyrelu",G=a?Ta(a,!0):null,W=new $m(h?_.shape:k.shape,h?k.shape:_.shape,h?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],b,w,P,G,B,V),U=h?[_,k]:[k,_];if(n&&U.push(n),B&&U.push(s),V){let q=o.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));U.push(q),C.push(q)}let H=o.runWebGLProgram(W,U,"float32"),Z=J({inputs:{x:H},backend:o,attrs:{shape:e.outShape}});C.push(H);for(let q of C)o.disposeIntermediateTensorInfo(q);return Z}function _Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=Vb({x:n,filter:s,convInfo:m,backend:e});else if(m.strideWidth<=2&&p==="channelsLast"&&L().getBool("WEBGL_EXP_CONV")){let d=new Rm(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];f=e.runWebGLProgram(d,[n,s],"float32",g)}else if(L().getBool("WEBGL_CONV_IM2COL"))f=Gb({x:n,filter:s,convInfo:m,backend:e});else{let d=new Dm(m);f=e.runWebGLProgram(d,[n,s],"float32")}let h=J({inputs:{x:f},backend:e,attrs:{shape:m.outShape}});return e.disposeIntermediateTensorInfo(f),h}var mP={kernelName:Rs,backendName:"webgl",kernelFunc:_Q};var Ub=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Wb=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dataFormat==="channelsLast",a=e-1-t.padInfo.top,l=o-1-t.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Hb=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},qb=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=e-1-t.padInfo.front,u=o-1-t.padInfo.top,c=n-1-t.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function OQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new Ub(m);return e.runWebGLProgram(f,[n,s],"float32")}var fP={kernelName:wc,backendName:"webgl",kernelFunc:OQ};function PQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(u),m=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=new Wb(m);return e.runWebGLProgram(f,[n,s],"float32")}var hP={kernelName:Fs,backendName:"webgl",kernelFunc:PQ};function LQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=I.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new zb(u);return e.runWebGLProgram(c,[n,s],"float32")}var dP={kernelName:za,backendName:"webgl",kernelFunc:LQ};function zQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o,u=I.computeConv3DInfo(n.shape,l,i,1,a),c=new Hb(u);return e.runWebGLProgram(c,[n,s],"float32")}var gP={kernelName:Cc,backendName:"webgl",kernelFunc:zQ};function MQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o,u=I.computeConv3DInfo(l,s.shape,a,1,i),c=new qb(u);return e.runWebGLProgram(c,[n,s],"float32")}var xP={kernelName:Ic,backendName:"webgl",kernelFunc:MQ};var BQ=Nn+`
  return cos(x);
`,VQ=xt({opSnippet:BQ}),yP={kernelName:zn,backendName:"webgl",kernelFunc:VQ};var GQ=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,UQ=xt({opSnippet:GQ}),bP={kernelName:Mn,backendName:"webgl",kernelFunc:UQ};var Kb=class{constructor(t,e,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=t,[c]=e,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[h,d]=[`${a-1}.0`,`${l-1}.0`],[g,x,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[w,C,k]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${d} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${d}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${C};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${d} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var WQ=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new Kb(n.shape,s.shape,a,l,u);return e.runWebGLProgram(c,[n,s,i],"float32")},wP={kernelName:Ba,backendName:"webgl",kernelFunc:WQ};var Ju;(function(r){r.Prod="*",r.Sum="+"})(Ju||(Ju={}));var cd=class{constructor(t,e,o,n){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===Ju.Prod?"1.0":"0.0",a=o?i:`getX(${CP(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${_t(s)} coords = getOutputCoords();
        int end = ${IP(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${IP(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${CP(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function CP(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function IP(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function jb(r,t,e,o,n,s){let i=t.shape.length,a=I.getAxesPermutation([o],i),l=t;a!=null&&(l=Ce({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=I.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=Be({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new cd(r,l.shape,!1,s),h=[[m]],d=p;p=e.runWebGLProgram(f,[p],p.dtype,h),e.disposeIntermediateTensorInfo(d)}if(n){let m=new cd(r,l.shape,n,s),f=p;p=e.runWebGLProgram(m,[p],p.dtype),e.disposeIntermediateTensorInfo(f)}if(a!=null){let m=I.getUndoAxesPermutation(a),f=Ce({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(l),f}return p}function HQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return jb(Ju.Prod,n,e,s,i,a)}var SP={kernelName:Ma,backendName:"webgl",kernelFunc:HQ};function qQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return jb(Ju.Sum,n,e,s,i,a)}var vP={kernelName:_s,backendName:"webgl",kernelFunc:qQ};function KQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=ub(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=m_(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var kP={kernelName:Sc,backendName:"webgl",kernelFunc:KQ};var Xb=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function jQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],d=new Xb(h,s,i);return e.runWebGLProgram(d,[n],n.dtype)}var TP={kernelName:Va,backendName:"webgl",kernelFunc:jQ};var Fm=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=le(this.outputShape.length);let i=t.filterHeight,a=t.filterWidth,l=t.outChannels/t.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var _m=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=le(this.outputShape.length);let i=t.outChannels/t.inChannels,a=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,p=t.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<p;x++)f+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<p;x++)f+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let w=a%2===0?y.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:f+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):w===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let h="",d="";o&&(n?h=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?h=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:h=`vec4 activation(vec4 x) {
          ${o}
        }`,d="result = activation(result);");let g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${d}
        setOutput(result);
      }
    `}};function XQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=I.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;L().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new _m(p):m=new Fm(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return e.runWebGLProgram(m,[n,s],"float32",f)}var NP={kernelName:Os,backendName:"webgl",kernelFunc:XQ};var Yb=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Zb=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,a=o-1-t.padInfo.left,l=t.outChannels/t.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function YQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=I.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new Yb(p);return e.runWebGLProgram(m,[n,s],"float32")}var EP={kernelName:vc,backendName:"webgl",kernelFunc:YQ};function ZQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=I.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new Zb(p);return e.runWebGLProgram(m,[n,s],"float32")}var $P={kernelName:kc,backendName:"webgl",kernelFunc:ZQ};var Qb=class{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function QQ(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),i=J({inputs:{x:o},backend:e,attrs:{shape:[s]}}),a=new Qb(s),l=e.runWebGLProgram(a,[i],i.dtype),u=J({inputs:{x:l},backend:e,attrs:{shape:n}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}var AP={kernelName:Tc,backendName:"webgl",kernelFunc:QQ};var Jb=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let{inHeight:e,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function JQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=I.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new Jb(u);c=e.runWebGLProgram(p,[n,s],"float32");let m=J({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),m}var DP={kernelName:Ga,backendName:"webgl",kernelFunc:JQ};function t7(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[g]),w;I.isIdentityPermutation(x)?w=s[g]:(w=Ce({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let k=0;k<b.length;++k)C.splice(b[k],0,1);y.arraysEqual(w.shape,C)||(w=J({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=ld({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=Yu({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeIntermediateTensorInfo(d);return m}var RP={kernelName:Ua,backendName:"webgl",kernelFunc:t7};var e7="return (x >= 0.0) ? x : (exp(x) - 1.0);",r7=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,o7=xt({opSnippet:e7,packedOpSnippet:r7}),FP={kernelName:Vn,backendName:"webgl",kernelFunc:o7};var n7="return (b >= 1.0) ? a : a * (b + 1.0);",s7=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,i7=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=L().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Tn(s7,o.shape,n.shape):new Zo(n7,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],o.dtype)},_P={kernelName:Nc,backendName:"webgl",kernelFunc:i7};var a7=`
  return vec4(equal(a, b));
`,l7="return float(a == b);",u7=Zt({opSnippet:l7,packedOpSnippet:a7,dtype:"bool",cpuKernelImpl:g_}),OP={kernelName:Gn,backendName:"webgl",kernelFunc:u7};var c7=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${I.ERF_P};
  float a1 = ${I.ERF_A1};
  float a2 = ${I.ERF_A2};
  float a3 = ${I.ERF_A3};
  float a4 = ${I.ERF_A4};
  float a5 = ${I.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,p7=xt({opSnippet:c7}),PP={kernelName:Ui,backendName:"webgl",kernelFunc:p7};var m7=Nn+`
  return exp(x);
`,f7=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,bv=xt({opSnippet:m7,packedOpSnippet:f7,cpuKernelImpl:x_,dtype:"float32"}),LP={kernelName:$o,backendName:"webgl",kernelFunc:bv};function tw(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),J({inputs:{x:s},backend:o,attrs:{shape:a}})}var zP={kernelName:Ps,backendName:"webgl",kernelFunc:tw};var MP="return exp(x) - 1.0;",h7=xt({opSnippet:MP,packedOpSnippet:MP,cpuKernelImpl:y_}),BP={kernelName:Ao,backendName:"webgl",kernelFunc:h7};var pd=class{constructor(t,e,o){this.variableNames=["real","imag"];let n=e[1];this.outputShape=e;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(t==="real")a="return real * expR - imag * expI;";else if(t==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function ew(r,t,e){let o=e.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=J({inputs:{x:r},backend:e,attrs:{shape:[i,s]}}),l=a.shape,u=new pd("real",l,t),c=new pd("imag",l,t),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=uo({inputs:{real:m,imag:f},backend:e});e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f);let d=J({inputs:{x:h},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(h),d}function d7(r){let{inputs:t,backend:e}=r,{input:o}=t;return ew(o,!1,e)}var VP={kernelName:Ec,backendName:"webgl",kernelFunc:d7};var rw=class{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Ea(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new rw(o,n),a=[[n]];return t.runWebGLProgram(i,[],s,a)}}var GP={kernelName:Wa,backendName:"webgl",kernelFunc:Ea};var ow=class{constructor(t){this.variableNames=["Image"],this.outputShape=[];let e=t[2];this.outputShape=t,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var UP={kernelName:Ha,backendName:"webgl",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new ow(e.shape);return o.runWebGLProgram(n,[e],e.dtype)}};var WP="return floor(x);",g7=xt({opSnippet:WP,packedOpSnippet:WP,cpuKernelImpl:b_}),HP={kernelName:Do,backendName:"webgl",kernelFunc:g7};var x7=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,y7=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,b7=Zt({opSnippet:x7,packedOpSnippet:y7,dtype:"int32"}),qP={kernelName:Un,backendName:"webgl",kernelFunc:b7};var nw=class{constructor(t){this.variableNames=["A"];let e=Ne(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var sw=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let e=Ne(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `}};var KP={kernelName:tu,backendName:"webgl",kernelFunc:w7},Om,wv=L().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function w7(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o,i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];if(a||i){let d=L().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(Om==null||d!==wv)&&(wv=d,Om=document.createElement("canvas").getContext("2d",{willReadFrequently:wv})),Om.canvas.width=l,Om.canvas.height=u,Om.drawImage(n,0,0,l,u),n=Om.canvas}let m=e.makeTensorInfo(c,"int32");e.texData.get(m.dataId).usage=Nr.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId),n);let f=L().getBool("WEBGL_PACK")?new sw(p):new nw(p),h=e.runWebGLProgram(f,[m],"int32");return e.disposeData(m.dataId),h}function C7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=I.convertConv2DDataFormat(c),g=I.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,d),x,b=[],w=i!=null,C=a!=null,k=f==="leakyrelu",E=()=>{let D=[n,s],_=(P,B)=>{if(B==="NCHW"&&P.shape.length===1&&P.shape[0]!==1){let V=J({inputs:{x:P},backend:e,attrs:{shape:[P.shape[0],1,1]}});return b.push(V),V}return P};if(w&&D.push(_(i,c)),C&&D.push(_(a,c)),k){let P=e.makeTensorInfo([],"float32",y.createScalarValue(h,"float32"));D.push(P),b.push(P)}return D};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=Vb({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else if(g.strideWidth<=2&&d==="channelsLast"&&L().getBool("WEBGL_EXP_CONV")){let D=f?Ta(f,!0):null,_=new Rm(g,w,D,C,k),P=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],B=E();x=e.runWebGLProgram(_,B,"float32",P)}else if(L().getBool("WEBGL_CONV_IM2COL"))x=Gb({x:n,filter:s,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else{let D=f?Ta(f,!1):null,_=new Dm(g,w,D,C,k),P=E();x=e.runWebGLProgram(_,P,"float32")}let A=J({inputs:{x},backend:e,attrs:{shape:g.outShape}});return b.push(x),b.forEach(D=>e.disposeIntermediateTensorInfo(D)),A}var jP={kernelName:na,backendName:"webgl",kernelFunc:C7};function I7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=[],d=c;d==null&&(d=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(l,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${d}'`);let g=I.computeConv2DInfo(n.shape,s.shape,l,d,u,p,!0),x=L().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Ta(m,x):null,w=[n,s],C=i!=null,k=a!=null,E=m==="leakyrelu";if(C&&w.push(i),k&&w.push(a),E){let P=e.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));w.push(P),h.push(P)}let A;x?A=new _m(g,C,b,k,E):A=new Fm(g,C,b,k,E);let D=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],_=e.runWebGLProgram(A,w,"float32",D);return h.forEach(P=>e.disposeIntermediateTensorInfo(P)),_}var XP={kernelName:sa,backendName:"webgl",kernelFunc:I7};var iw=class{constructor(t,e,o,n){this.sliceDim=t,this.strides=e,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=_t(e.length),i=_t(o.length),a=this.sliceDim>1?"strides[j]":"strides",l=_t(n.length),u=n.length>1?"paramsShape[j]":"paramsShape";this.userCode=`
        ${s} strides = ${s}(${this.strides});
        ${l} paramsShape = ${l}(${this.paramsShape});
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            out_of_bounds = out_of_bounds || index < 0;
            out_of_bounds = out_of_bounds || index >= ${u};
            flattenIndex += index * ${a};
          }
          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function S7(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=I.prepareAndValidate(o,n),m=J({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=J({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=e.readSync(n.dataId),b=e.bufferSync(o),w=w_(x,b,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,w.values)}let h=new iw(i,p,[u,c],o.shape),d=e.runWebGLProgram(h,[f,m],f.dtype),g=J({inputs:{x:d},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(d),g}var YP={kernelName:qa,backendName:"webgl",kernelFunc:S7};var aw=class{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;let o=_t(this.rank),n=v7(t,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function v7(r,t){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${e[n]}`);return o.join()}function Cv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0];if(L().get("DEBUG")){let b=e.readSync(s.dataId),w=n.shape[l];for(let C=0;C<b.length;++C){let k=b[C];y.assert(k<=w-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${w-1}]`)}}let u=I.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=J({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=J({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=e.bufferSync(f),w=e.bufferSync(m),C=C_(w,b,h);return p.forEach(k=>e.disposeIntermediateTensorInfo(k)),e.makeTensorInfo(u.outputShape,C.dtype,C.values)}let d=new aw(m.shape,h),g=e.runWebGLProgram(d,[m,f],m.dtype);p.push(g);let x=J({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}var ZP={kernelName:zs,backendName:"webgl",kernelFunc:Cv};var k7="return float(a > b);",T7=`
  return vec4(greaterThan(a, b));
`,N7=Zt({opSnippet:k7,packedOpSnippet:T7,cpuKernelImpl:I_,dtype:"bool"}),QP={kernelName:Wn,backendName:"webgl",kernelFunc:N7};var E7="return float(a >= b);",$7=`
  return vec4(greaterThanEqual(a, b));
`,A7=Zt({opSnippet:E7,packedOpSnippet:$7,dtype:"bool",cpuKernelImpl:S_}),JP={kernelName:Ro,backendName:"webgl",kernelFunc:A7};function D7(r){let{inputs:t,backend:e}=r,{input:o}=t;return ew(o,!0,e)}var t3={kernelName:$c,backendName:"webgl",kernelFunc:D7};var R7="return float(!isnan(x) && !isinf(x));",F7=xt({opSnippet:R7,dtype:"bool"}),e3={kernelName:Wi,backendName:"webgl",kernelFunc:F7};var _7="return float(isinf(x));",O7=xt({opSnippet:_7,dtype:"bool"}),r3={kernelName:Hi,backendName:"webgl",kernelFunc:O7};var P7="return float(isnan(x));",L7=xt({opSnippet:P7,dtype:"bool"}),o3={kernelName:Hn,backendName:"webgl",kernelFunc:L7};var z7="return float(a < b);",M7=`
  return vec4(lessThan(a, b));
`,B7=Zt({opSnippet:z7,packedOpSnippet:M7,cpuKernelImpl:v_,dtype:"bool"}),n3={kernelName:qn,backendName:"webgl",kernelFunc:B7};var V7="return float(a <= b);",G7=`
  return vec4(lessThanEqual(a, b));
`,U7=Zt({opSnippet:V7,packedOpSnippet:G7,cpuKernelImpl:k_,dtype:"bool"}),s3={kernelName:Kn,backendName:"webgl",kernelFunc:U7};function W7(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=T_(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var i3={kernelName:Ac,backendName:"webgl",kernelFunc:W7};var H7=Nn+`
  return x < 0.0 ? 0./0. : log(x);
`,q7=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,K7=xt({opSnippet:H7,packedOpSnippet:q7,cpuKernelImpl:N_}),a3={kernelName:_o,backendName:"webgl",kernelFunc:K7};var j7=Nn+`
  return log(1.0 + x);
`,X7=xt({opSnippet:j7}),l3={kernelName:qi,backendName:"webgl",kernelFunc:X7};var Y7="return float(a >= 1.0 && b >= 1.0);",Z7=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,Q7=Zt({opSnippet:Y7,packedOpSnippet:Z7,dtype:"bool"}),u3={kernelName:Ki,backendName:"webgl",kernelFunc:Q7};var J7="return float(!(x >= 1.0));",tJ=xt({opSnippet:J7}),c3={kernelName:ji,backendName:"webgl",kernelFunc:tJ};var eJ="return float(a >= 1.0 || b >= 1.0);",rJ=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,oJ=Zt({opSnippet:eJ,packedOpSnippet:rJ,dtype:"bool"}),p3={kernelName:Jl,backendName:"webgl",kernelFunc:oJ};var lw=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var uw=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var nJ=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=L().getBool("WEBGL_PACK_NORMALIZATION")?new uw(n.shape,s,i,a,l):new lw(n.shape,s,i,a,l);return e.runWebGLProgram(u,[n],n.dtype)},m3={kernelName:ja,backendName:"webgl",kernelFunc:nJ};var cw=class{constructor(t,e,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var sJ=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new cw(n.shape,a,l,u,c);return e.runWebGLProgram(p,[n,s,i],n.dtype)},f3={kernelName:Dc,backendName:"webgl",kernelFunc:sJ};function h3(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=J({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=Io(a,r.dtype,"max",o),u=J({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function Iv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=c!=null,m=e.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let w=e.texData.get(f.dataId).values,C=new Array(a);for(let A=0;A<C.length;A++)C[A]=n.shape[c[A]];let k=Ku(w,n.shape,n.dtype,c,C);f=e.makeTensorInfo(C,n.dtype);let E=e.texData.get(f.dataId);E.values=k}else f=Wl(n,c,e);u=I.getInnerMostAxes(u.length,a)}I.assertAxesAreInnerMostDims("max",u,a);let[h,d]=I.computeOutAndReduceShapes(f.shape,u),g=h;i&&(g=I.expandShapeToKeepDim(h,l));let x;if(m){let w=e.texData.get(f.dataId).values,C=E_(w,y.sizeFromShape(d),g,n.dtype);x=e.makeTensorInfo(g,n.dtype);let k=e.texData.get(x.dataId);k.values=C}else x=h3(f,d,g,e);return p&&e.disposeIntermediateTensorInfo(f),x}var d3={kernelName:Bs,backendName:"webgl",kernelFunc:Iv};var iJ=gb+`
  return max(a, b);
`,aJ=`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+Ul+`
  return result;
`,lJ=Zt({opSnippet:iJ,packedOpSnippet:aJ,cpuKernelImpl:$_}),g3={kernelName:Oo,backendName:"webgl",kernelFunc:lJ};function uJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;$i(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Be({inputs:{x:n},backend:e});let p=new bs(c,"max",!1);return e.runWebGLProgram(p,[n],n.dtype)}var x3={kernelName:Vs,backendName:"webgl",kernelFunc:uJ};function cJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=I.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new Hl(p,"max",!1);return e.runWebGLProgram(m,[n],n.dtype)}var y3={kernelName:Xa,backendName:"webgl",kernelFunc:cJ};var pw=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideHeight,o=t.strideWidth,n=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=s-1-t.padInfo.top,l=i-1-t.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},mw=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,p=l-1-t.padInfo.front,m=u-1-t.padInfo.top,f=c-1-t.padInfo.left,h=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function pJ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=I.computePool3DInfo(i.shape,a,l,p,u,c),f=new Hl(m,"max",!0),h=e.runWebGLProgram(f,[i],i.dtype),d=new mw(m),g=e.runWebGLProgram(d,[n,h],i.dtype);return e.disposeIntermediateTensorInfo(h),g}var b3={kernelName:Fc,backendName:"webgl",kernelFunc:pJ};function mJ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;$i([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=I.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,h=new bs(m,"max",f),d=e.runWebGLProgram(h,[a],a.dtype),g=new pw(m),x=e.runWebGLProgram(g,[n,d],a.dtype);return e.disposeIntermediateTensorInfo(d),x}var w3={kernelName:Rc,backendName:"webgl",kernelFunc:mJ};function C3(r,t,e,o){let n=new bs(e,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new bs(e,"max",!0,!0,t);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var I3={kernelName:_c,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(I.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=I.computePool2DInfo(o.shape,n,s,u,i),[p,m]=C3(o,a,c,l);return[p,m]}};function S3(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=J({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=Io(a,"float32","mean",o),u=J({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var v3={kernelName:Gs,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{keepDims:n,axis:s}=t,i=e,a=o.shape.length,l=y.parseAxisParam(s,o.shape),u=l,c=I.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],h=o;if(p){if(m){let C=i.texData.get(h.dataId).values,k=new Array(a);for(let D=0;D<k.length;D++)k[D]=o.shape[c[D]];let E=Ku(C,o.shape,o.dtype,c,k);h=i.makeTensorInfo(k,o.dtype);let A=i.texData.get(h.dataId);A.values=E}else h=Wl(o,c,i);f.push(h),u=I.getInnerMostAxes(u.length,a)}I.assertAxesAreInnerMostDims("sum",u,a);let[d,g]=I.computeOutAndReduceShapes(h.shape,u),x=d;n&&(x=I.expandShapeToKeepDim(d,l));let b=S3(h,g,x,i);for(let w of f)i.disposeIntermediateTensorInfo(w);return b}};function fJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=Ce({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,n.shape.length)),I.assertAxesAreInnerMostDims("min",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),d=J({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),g=Io(d,d.dtype,"min",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=J({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=J({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(p),x}var k3={kernelName:Us,backendName:"webgl",kernelFunc:fJ};var hJ=gb+`
  return min(a, b);
`,dJ=`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+Ul+`
  return result;
`,gJ=Zt({opSnippet:hJ,packedOpSnippet:dJ,cpuKernelImpl:A_}),T3={kernelName:Po,backendName:"webgl",kernelFunc:gJ};var fw=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=e.map((c,p)=>c[0]+t[p]+c[1]);let n=t.length,s=_t(n),i=e.map(c=>c[0]).join(","),a=e.map((c,p)=>c[0]+t[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var hw=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((h,d)=>h[0]+t[d]+h[1]);let n=t.length,s=_t(n),i=e.map(h=>h[0]).join(","),a=e.map((h,d)=>h[0]+t[d]).join(","),l=Me("rc",n),u=Me("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let h=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let h=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${h}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${h}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var xJ=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{paddings:n,mode:s}=e,i=L().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hw(o.shape,n,s):new fw(o.shape,n,s);return t.runWebGLProgram(i,[o],o.dtype)},N3={kernelName:Ws,backendName:"webgl",kernelFunc:xJ};var yJ=`if (b == 0.0) return NAN;
  return mod(a, b);`,bJ=`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  `+Ul+`
  return result;
`,wJ=Zt({opSnippet:yJ,packedOpSnippet:bJ}),E3={kernelName:Xi,backendName:"webgl",kernelFunc:wJ};var dw=class{constructor(t,e,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e-1}));
      }
    `}};var CJ=`
if (a == b) {
  return 1.0;
};
return a / b;`,IJ=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,Sv=Zt({opSnippet:CJ,packedOpSnippet:IJ,checkOutOfBounds:!0}),$3={kernelName:Bn,backendName:"webgl",kernelFunc:Sv};var A3="return a - b;",vv=Zt({opSnippet:A3,packedOpSnippet:A3,supportsComplex:!0,cpuKernelImpl:j_}),D3={kernelName:Go,backendName:"webgl",kernelFunc:vv};function kv(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=Iv({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=I.expandShapeToKeepDim(a.shape,i),u=J({inputs:{x:a},backend:e,attrs:{shape:l}}),c=vv({inputs:{a:n,b:u},backend:e}),p=bv({inputs:{x:c},backend:e}),m=Yu({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=J({inputs:{x:m},backend:e,attrs:{shape:l}}),h=Sv({inputs:{a:p,b:f},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}var R3={kernelName:ri,backendName:"webgl",kernelFunc:kv};function SJ(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o,l=a?n:kv({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new dw(u,c,s),m=[[i]],f=e.runWebGLProgram(p,[l],"int32",m);return a||e.disposeIntermediateTensorInfo(l),f}var F3={kernelName:Oc,backendName:"webgl",kernelFunc:SJ};var vJ=rr+`
  return -x;
`,kJ=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function TJ(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.texData.get(o.dataId),[i,a]=R_(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n;return L().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Yo(o.shape,kJ):n=new _r(o.shape,vJ),e.runWebGLProgram(n,[o],o.dtype)}var _3={kernelName:jn,backendName:"webgl",kernelFunc:TJ};var NJ=er.nonMaxSuppressionV3Impl;function EJ(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=NJ(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var O3={kernelName:Ya,backendName:"webgl",kernelFunc:EJ};var $J=er.nonMaxSuppressionV4Impl;function AJ(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=$J(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var P3={kernelName:Pc,backendName:"webgl",kernelFunc:AJ};var DJ=er.nonMaxSuppressionV5Impl;function RJ(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=DJ(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var L3={kernelName:Za,backendName:"webgl",kernelFunc:RJ};var gw=class{constructor(t,e,o,n){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var FJ=r=>{let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o,u=y.sizeFromShape(n.shape),c=new gw(u,i,a,l),p=J({inputs:{x:n},backend:e,attrs:{shape:[u]}}),m=e.runWebGLProgram(c,[p],s);e.disposeIntermediateTensorInfo(p);let f=[...n.shape,i],h=J({inputs:{x:m},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(m),h},z3={kernelName:Qa,backendName:"webgl",kernelFunc:FJ};function md(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=Na({inputs:{input:o},backend:e}),s=md({inputs:{x:n},backend:e}),i=Qu({inputs:{input:o},backend:e}),a=md({inputs:{x:i},backend:e}),l=uo({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Ea({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var M3={kernelName:ni,backendName:"webgl",kernelFunc:md};function B3(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Na({inputs:{input:o},backend:e}),s=B3({inputs:{x:n},backend:e}),i=Qu({inputs:{input:o},backend:e}),a=md({inputs:{x:i},backend:e}),l=uo({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return Ea({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var V3={kernelName:Hs,backendName:"webgl",kernelFunc:B3};function _J(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return tw({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=tw({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=yv({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var G3={kernelName:qs,backendName:"webgl",kernelFunc:_J};var xw=class{constructor(t,e,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);let n=t.length,s=_t(n),i=e.map(u=>u[0]).join(","),a=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var yw=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((d,g)=>d[0]+t[g]+d[1]);let n=t.length,s=_t(n),i=e.map(d=>d[0]).join(","),a=e.map((d,g)=>d[0]+t[g]).join(","),l=Me("rc",n),u=Me("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",h="";for(let d=0,g=n===1?2:4;d<g;d++)h+=`
        ${m[d]}
        if (${f}) {
          result[${d}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${d}] = getChannel(getX(${u.join()}), ${p});
        }
      `;h+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `}};var Tv=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Ea({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=L().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yw(n.shape,s,i):new xw(n.shape,s,i),l=[[i]];return e.runWebGLProgram(a,[n],n.dtype,l)},U3={kernelName:Ks,backendName:"webgl",kernelFunc:Tv};var OJ=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,PJ=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  `+Ul+`
  return result;
`,LJ=Zt({opSnippet:OJ,packedOpSnippet:PJ}),W3={kernelName:Yn,backendName:"webgl",kernelFunc:LJ};function zJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=y.parseAxisParam(s,n.shape),c=u,p=I.getAxesPermutation(c,a),m=n;p!=null&&(m=Ce({inputs:{x:n},backend:e,attrs:{perm:p}}),c=I.getInnerMostAxes(c.length,a),l.push(m)),I.assertAxesAreInnerMostDims("prod",c,a);let f;if(e.shouldExecuteOnCPU([m])){let h=e.texData.get(m.dataId).values,{outVals:d,outShape:g,outDtype:x}=__(m.shape,m.dtype,h,c);f=e.makeTensorInfo(g,x,d)}else{let[h,d]=I.computeOutAndReduceShapes(m.shape,c),g=y.sizeFromShape(d),x=J({inputs:{x:m},backend:e,attrs:{shape:[-1,g]}}),b=aa(n.dtype),w=Io(x,b,"prod",e);f=J({inputs:{x:w},backend:e,attrs:{shape:h}}),l.push(x),l.push(w)}if(i){l.push(f);let h=I.expandShapeToKeepDim(f.shape,u);f=J({inputs:{x:f},backend:e,attrs:{shape:h}})}return l.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var H3={kernelName:Zn,backendName:"webgl",kernelFunc:zJ};function MJ(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),p=e.readSync(i.dataId),m=a.map(g=>e.readSync(g.dataId)),f=a.map(g=>g.shape),[h,d]=O_(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,d)}var q3={kernelName:Lc,backendName:"webgl",kernelFunc:MJ};var Nv=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=P_(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},K3={kernelName:Ja,backendName:"webgl",kernelFunc:Nv};var BJ="return 1.0 / x;",VJ=xt({opSnippet:BJ}),j3={kernelName:Qn,backendName:"webgl",kernelFunc:VJ};var GJ=rr+`
  return (x < 0.0) ? 0.0 : x;
`,UJ=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,WJ=xt({opSnippet:GJ,packedOpSnippet:UJ}),X3={kernelName:Jn,backendName:"webgl",kernelFunc:WJ};var HJ=rr+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,qJ=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,KJ=xt({opSnippet:HJ,packedOpSnippet:qJ}),Y3={kernelName:ts,backendName:"webgl",kernelFunc:KJ};var bw=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var ww=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function jJ(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=L().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ww(n.shape,l,u,s,i):new bw(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],"float32")}var Z3={kernelName:Zs,backendName:"webgl",kernelFunc:jJ};var Cw=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function XJ(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new Cw(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var Q3={kernelName:Mc,backendName:"webgl",kernelFunc:XJ};var Iw=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var Sw=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function YJ(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=L().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Sw(n.shape,l,u,s,i):new Iw(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],n.dtype)}var J3={kernelName:Ys,backendName:"webgl",kernelFunc:YJ};var vw=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,d=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${d});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function ZJ(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new vw(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var tL={kernelName:zc,backendName:"webgl",kernelFunc:ZJ};var kw=class{constructor(t,e){this.variableNames=["x"];let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=t,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;return}let n=a=>e.indexOf(a)!==-1&&t[a]!==1?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`,s=t.map((a,l)=>n(l)).join(","),i=_t(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var Tw=class{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=t;let n=Me("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=_t(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(h){return m(h)}function u(h){return h[o-1]="("+h[o-1]+" + 1)",m(h)}function c(h){return h[o-2]="("+h[o-2]+" + 1)",m(h)}function p(h){return h[o-1]="("+h[o-1]+" + 1)",h[o-2]="("+h[o-2]+" + 1)",m(h)}function m(h){let d=t.map((b,w)=>f(w,h)),g=d.join(","),x=d.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function f(h,d){return e.indexOf(h)!==-1&&t[h]!==1?`${t[h]} - ${d[h]} - 1`:`${d[h]}`}}};function QJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Be({inputs:{x:n},backend:e});let l=L().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tw(n.shape,a):new kw(n.shape,a);return e.runWebGLProgram(l,[n],n.dtype)}var eL={kernelName:tl,backendName:"webgl",kernelFunc:QJ};var Nw=class{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=t[1],n=t[2];this.outputShape=t;let s="";typeof e=="number"?s=`float outputValue = ${e.toFixed(2)};`:s=`
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var rL={kernelName:ul,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new Nw(o.shape,s),[u,c]=I.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var JJ=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,t9=xt({opSnippet:JJ}),oL={kernelName:Zi,backendName:"webgl",kernelFunc:t9};var e9="return inversesqrt(x);",r9=xt({opSnippet:e9,cpuKernelImpl:L_}),nL={kernelName:zo,backendName:"webgl",kernelFunc:r9};var Pm=class{constructor(t,e,o,n,s,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=_t(s.length),u=_t(i.length),c="";o===1?c="i":o===2&&(c="i, j");let p=`getIndices(${c})`,m="";n===1?m="i":n===2&&(m="i, coords[1]");let f=`getUpdates(${m})`,h=e>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${h};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}};function o9(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=J({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=J({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),d=e.makeTensorInfo([],"float32",new Float32Array([0])),g=new Pm(l,a,f.shape.length,h.shape.length,c,m),x=e.runWebGLProgram(g,[h,f,d],h.dtype),b=J({inputs:{x},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(d),b}var sL={kernelName:el,backendName:"webgl",kernelFunc:o9};var Ew=class{constructor(t,e,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=L().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function n9(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=new Ew(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return e.runWebGLProgram(a,[n,s],"int32",l)}var iL={kernelName:Bc,backendName:"webgl",kernelFunc:n9};var $w=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.outputShape=e;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${a[c]}`),c<t&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=_t(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function s9(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new $w(o.shape.length,n.shape,n.shape.length);return e.runWebGLProgram(i,[o,n,s],oe(n.dtype,s.dtype))}var aL={kernelName:Qs,backendName:"webgl",kernelFunc:s9};var i9=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${I.SELU_SCALEALPHA};
  float scale = ${I.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,a9=xt({opSnippet:i9}),lL={kernelName:Qi,backendName:"webgl",kernelFunc:a9};var l9=Nn+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,u9=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,c9=xt({opSnippet:l9,packedOpSnippet:u9,cpuKernelImpl:M_}),uL={kernelName:Mo,backendName:"webgl",kernelFunc:c9};var p9=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,m9=xt({opSnippet:p9}),cL={kernelName:Ji,backendName:"webgl",kernelFunc:m9};var f9=Nn+`
  return sin(x);
`,h9=xt({opSnippet:f9}),pL={kernelName:rs,backendName:"webgl",kernelFunc:h9};var d9=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,g9=xt({opSnippet:d9}),mL={kernelName:os,backendName:"webgl",kernelFunc:g9};var x9=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,y9=xt({opSnippet:x9}),fL={kernelName:ta,backendName:"webgl",kernelFunc:y9};var b9=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=Tv({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=I.getReshaped(c.shape,s,a,!1),m=I.getPermuted(p.length,s.length,!1),f=I.getReshapedPermuted(c.shape,s,a,!1),h=J({inputs:{x:c},backend:e,attrs:{shape:p}}),d=Ce({inputs:{x:h},backend:e,attrs:{perm:m}}),g=J({inputs:{x:d},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(d),u.forEach(x=>e.disposeIntermediateTensorInfo(x)),g},hL={kernelName:ti,backendName:"webgl",kernelFunc:b9};function w9(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.readSync(o.dataId),l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=e.readSync(i.dataId)[0],[p,m,f,h,d]=V_(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(g=>Number(g)))),e.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}var dL={kernelName:Vc,backendName:"webgl",kernelFunc:w9};function C9(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.readSync(n.dataId)),a=e.readSync(o.dataId),l=Array.from(e.readSync(s.dataId)),[u,c,p]=G_(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var gL={kernelName:Gc,backendName:"webgl",kernelFunc:C9};function I9(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=pb(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var xL={kernelName:Uc,backendName:"webgl",kernelFunc:I9};function S9(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=pb(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var yL={kernelName:Wc,backendName:"webgl",kernelFunc:S9};function v9(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let x=e.bufferSync(n),b=e.bufferSync(s),w=y.decodeString(e.readSync(i.dataId)[0]),C=z_(x,b,a,m,c,u,l,p,w,f);return e.makeTensorInfo(a,C.dtype,C.values)}let h=new Pm(u,l,n.shape.length,s.shape.length,p,[m,1],f),d=e.runWebGLProgram(h,[s,n,i],s.dtype),g=J({inputs:{x:d},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(d),g}var bL={kernelName:rl,backendName:"webgl",kernelFunc:v9};function k9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=ws({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var wL={kernelName:ei,backendName:"webgl",kernelFunc:k9};var CL="return sqrt(x);",T9=xt({opSnippet:CL,packedOpSnippet:CL,cpuKernelImpl:U_}),IL={kernelName:Bo,backendName:"webgl",kernelFunc:T9};var N9="return x * x;",E9=xt({opSnippet:N9}),SL={kernelName:ol,backendName:"webgl",kernelFunc:E9};var vL="return (a - b) * (a - b);",$9=Zt({opSnippet:vL,packedOpSnippet:vL}),kL={kernelName:Vo,backendName:"webgl",kernelFunc:$9};function A9({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=rr+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new _r(o.shape,n);return e.runWebGLProgram(s,[o],o.dtype)}var TL={kernelName:ra,backendName:"webgl",kernelFunc:A9};var Aw=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=_t(o.length),i=_t(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${t});
      ${s} strides = ${s}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function D9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=xe.sliceInfo(n.shape,s,i,a,l,u,c,p,m),k;if(d)k=J({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let A=xe.computeOutShape(b,w,C),D=ws({inputs:{x:n},backend:e,attrs:{begin:b,size:A}});k=J({inputs:{x:D},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(D)}else if(e.shouldExecuteOnCPU([n])){let D=e.readSync(n.dataId),_=ot(n.shape,n.dtype,D),P=W_(f,_,C,b);k=e.makeTensorInfo(h,n.dtype,P.values)}else{let D=new Aw(b,C,f);k=e.runWebGLProgram(D,[n],n.dtype)}let E=J({inputs:{x:k},backend:e,attrs:{shape:h}});return e.disposeIntermediateTensorInfo(k),E}var NL={kernelName:nl,backendName:"webgl",kernelFunc:D9};function R9(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,d]=H_(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var EL={kernelName:sl,backendName:"webgl",kernelFunc:R9};function F9(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.readSync(s.dataId),l=e.readSync(i.dataId)[0],[u,c,p]=q_(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var $L={kernelName:Hc,backendName:"webgl",kernelFunc:F9};function _9(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.readSync(s.dataId),a=K_(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var AL={kernelName:qc,backendName:"webgl",kernelFunc:_9};var O9="return tan(x);",P9=xt({opSnippet:O9}),DL={kernelName:ea,backendName:"webgl",kernelFunc:P9};var L9=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,z9=xt({opSnippet:L9}),RL={kernelName:ns,backendName:"webgl",kernelFunc:z9};var Dw=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[i]*e[i];this.outputShape=o,this.rank=o.length;let n=_t(this.rank),s=M9(t);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function M9(r){let t=r.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(t===1)return`imod(resRC, ${r[0]})`;let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${e[n]}, ${r[n]})`);return o.join()}function Ev(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=ot(n.shape,n.dtype,u),p=X_(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new Dw(n.shape,s);return e.runWebGLProgram(i,[n],n.dtype)}var FL={kernelName:tn,backendName:"webgl",kernelFunc:Ev};var Rw=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},Fw=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function tc(r,t){t!==null&&r.disposeIntermediateTensorInfo(t)}function _L(r){let t=1;for(;t<r;)t*=2;return t}function B9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=L().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=L().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([n])||c<a||s>l){let P=e.readSync(n.dataId),[B,V]=Y_(P,u,n.dtype,s,i);return[e.makeTensorInfo(B.shape,B.dtype,B.values),e.makeTensorInfo(V.shape,V.dtype,V.values)]}if(s===0)return u[u.length-1]=0,[e.makeTensorInfo(u,n.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(c===1)return[n,Ea({attrs:{shape:u,dtype:"int32",value:0},backend:e})];let p=e.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?e.unpackTensor(n):n,d=y.sizeFromShape(u)/c,g=J({inputs:{x:f},attrs:{shape:[d,c]},backend:e});m&&tc(e,f);let x=_L(s),b=_L(c),w=null,C=()=>w===null?[g,g]:[g,w],k=(P,B,V)=>{let G=C(),W=new Rw(V),H=[[c],[w===null?1:0],[Number.NEGATIVE_INFINITY],[P],[B]],Z=w;w=e.runWebGLProgram(W,G,"int32",H),tc(e,Z)};for(let P=1;P<x;P*=2){let B=P*2;for(let V=P;V>=1;V/=2)k(B,V,[d,b])}for(let P=b;P>x;P/=2){let B=C(),V=new Fw([d,P/2]),W=[[c],[w===null?1:0],[x]],U=w;w=e.runWebGLProgram(V,B,"int32",W),tc(e,U);let H=x/2,Z=H*2;for(let q=H;q>=1;q/=2)k(Z,q,w.shape)}let E=w;w=ws({inputs:{x:w},backend:e,attrs:{begin:0,size:[d,s]}}),tc(e,E);let A=Cv({inputs:{x:g,indices:w},backend:e,attrs:{axis:1,batchDims:1}});tc(e,g);let D=u.slice(0,-1);D.push(s),E=w,w=J({inputs:{x:w},attrs:{shape:D},backend:e}),tc(e,E);let _=A;return A=J({inputs:{x:A},attrs:{shape:D},backend:e}),tc(e,_),[A,w]}var OL={kernelName:il,backendName:"webgl",kernelFunc:B9};var _w=class{constructor(t,e,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function V9(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=new _w(p,m,i,a,l,g);return e.runWebGLProgram(x,[n,s],"float32")}var PL={kernelName:al,backendName:"webgl",kernelFunc:V9};function G9(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;$i(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=Z_(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var LL={kernelName:Kc,backendName:"webgl",kernelFunc:G9};function U9(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let d=0;d<a;d++)d!==s&&(u[c++]=i.shape[d]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let d=0;d<h.length;d++){m[s]=d;let g=ws({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),x=J({inputs:{x:g},backend:e,attrs:{shape:u}});h[d]=x,p.push(g)}return p.forEach(d=>e.disposeIntermediateTensorInfo(d)),h}var zL={kernelName:oi,backendName:"webgl",kernelFunc:U9};var Ow=class{constructor(t,e){this.variableNames=["x","segmentIds"];let o=t.windowSize,n=t.batchSize,s=t.inSize,i=t.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function W9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=I.getAxesPermutation([u],a),p=n;c!=null&&(p=Ce({inputs:{x:n},backend:e,attrs:{perm:c}}),l.push(p),u=I.getInnerMostAxes(1,a)[0]);let m=I.segment_util.computeOutShape(p.shape,u,i),f=y.sizeFromShape([p.shape[u]]),h=J({inputs:{x:p},backend:e,attrs:{shape:[-1,f]}});l.push(h);let d=aa(n.dtype),g=(C,k,E,A,D)=>{let _=C.shape[0],P=C.shape[1],B=I.segment_util.segOpComputeOptimalWindowSize(P,D),V={windowSize:B,inSize:P,batchSize:_,numSegments:D},G=new Ow(V,k),W=e.compileAndRun(G,[C,E],A);if(l.push(W),W.shape[1]===D)return W;let U=Nv({backend:e,attrs:{start:0,stop:D,step:1,dtype:"float32"}}),H=Ev({inputs:{x:U},backend:e,attrs:{reps:[P/B]}});return l.push(U),l.push(H),g(W,k,H,A,D)},x=g(h,"unsortedSegmentSum",s,d,i),b=J({inputs:{x},backend:e,attrs:{shape:m}}),w=b;if(c!=null){l.push(b);let C=I.getUndoAxesPermutation(c);w=Ce({inputs:{x:w},backend:e,attrs:{perm:C}})}return l.forEach(C=>e.disposeIntermediateTensorInfo(C)),w}var ML={kernelName:ll,backendName:"webgl",kernelFunc:W9};var H9=[TO,EO,$O,AO,RO,FO,_O,OO,zO,MO,BO,VO,GO,UO,WO,HO,qO,KO,jO,XO,YO,QO,JO,tP,nP,iP,aP,hO,uP,pP,mP,fP,hP,dP,gP,xP,yP,bP,wP,SP,vP,kP,TP,NP,EP,$P,AP,DP,RP,FP,_P,OP,PP,LP,zP,BP,VP,GP,UP,HP,qP,KP,jP,XP,YP,ZP,QP,JP,fO,t3,cP,e3,r3,o3,dO,n3,s3,i3,a3,l3,u3,c3,p3,m3,f3,d3,g3,x3,y3,b3,w3,I3,v3,k3,T3,N3,E3,F3,wO,_3,O3,P3,L3,eP,z3,V3,G3,U3,W3,gO,H3,q3,K3,rP,$3,j3,X3,Y3,IO,Z3,Q3,J3,tL,eL,rL,oL,nL,sL,iL,aL,lL,uL,cL,pL,mL,ZO,R3,fL,hL,dL,gL,xL,yL,bL,wL,IL,SL,kL,TL,NL,EL,$L,AL,D3,vO,DL,RL,FL,OL,PL,kO,LL,zL,ML,M3];for(let r of H9)jc(r);var ql=L();ql.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15);ql.registerFlag("WEBGPU_CPU_FORWARD",()=>!0);ql.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1);ql.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!1);ql.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1);ql.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3);ql.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1);ql.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0);var Pw=class{constructor(t){this.device=t,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireUploadBuffer(t,e){return this.acquireBuffer(t,e,!0)}acquireBuffer(t,e,o=!1){let n=BL(t,e);if(this.freeBuffers.has(n)||this.freeBuffers.set(n,[]),this.usedBuffers.has(n)||this.usedBuffers.set(n,[]),this.numBytesUsed+=t,this.numUsedBuffers++,this.freeBuffers.get(n).length>0){this.numFreeBuffers--;let i=this.freeBuffers.get(n).shift();return this.usedBuffers.get(n).push(i),i}this.numBytesAllocated+=t;let s=this.device.createBuffer({size:t,usage:e,mappedAtCreation:o});return this.usedBuffers.get(n).push(s),s}releaseBuffer(t,e,o){if(this.freeBuffers.size===0)return;let n=BL(e,o);this.freeBuffers.has(n)||this.freeBuffers.set(n,[]),this.freeBuffers.get(n).push(t),this.numFreeBuffers++,this.numUsedBuffers--;let s=this.usedBuffers.get(n),i=s.indexOf(t);if(i<0)throw new Error("Cannot release a buffer that was never provided by this buffer manager");s.splice(i,1),this.numBytesUsed-=e}releaseUploadBuffer(t,e,o){t.mapAsync(GPUMapMode.WRITE).then(()=>{this.releaseBuffer(t,e,o)},n=>{})}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.usedBuffers.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function BL(r,t){return`${r}_${t}`}var Lw=class{constructor(t){this.device=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(t,e,o,n){let s=GL(o),i=t*e*s,a=VL(t,e,o,n);if(this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.usedTextures.has(a)||this.usedTextures.set(a,[]),this.numBytesUsed+=i,this.numUsedTextures++,this.freeTextures.get(a).length>0){this.numFreeTextures--;let u=this.freeTextures.get(a).shift();return this.usedTextures.get(a).push(u),u}this.numBytesAllocated+=i;let l=this.device.createTexture({size:[t,e],format:o,usage:n});return this.usedTextures.get(a).push(l),l}releaseTexture(t,e,o,n,s){if(this.freeTextures.size===0)return;let i=VL(e,o,n,s);this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.freeTextures.get(i).push(t),this.numFreeTextures++,this.numUsedTextures--;let a=this.usedTextures.get(i),l=a.indexOf(t);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(l,1);let u=GL(n),c=e*o*u;this.numBytesUsed-=c}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.usedTextures.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function VL(r,t,e,o){return`${r}_${t}_${e}_${o}`}function GL(r){if(r==="rgba8unorm")return 16;throw new Error(`${r} is not supported!`)}function UL(r,t){if(Math.max(...r)>3)throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}var qL=(r,t,e,o)=>{let n={dtype:o.dtype,shape:o.shape},s=K9(e,n,t),i=r.createShaderModule({code:s,label:t.constructor.name});return r.createComputePipeline({compute:{module:i,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})};function Ve(r){if(r<=1)return"i32";if(r===2)return"vec2<i32>";if(r===3)return"vec3<i32>";if(r===4)return"vec4<i32>";if(r===5)return"vec5";if(r===6)return"vec6";throw Error(`GPU for rank ${r} is not yet supported`)}function En(r){if(r===0)return"x";if(r===1)return"y";if(r===2)return"z";if(r===3)return"w";if(r===4)return"u";if(r===5)return"v";throw Error(`Index ${r} is not yet supported`)}function mt(...r){let t;switch(r.length){case 0:t=`
        ${Kl()}
        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                  @builtin(global_invocation_id) GlobalId : vec3<u32>,
                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
          localId = LocalId;
          globalId = GlobalId;
          numWorkgroups = NumWorkgroups;
          main();
        }

        fn main()
      `;break;case 1:t=`
        ${Kl()}
        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                  @builtin(global_invocation_id) GlobalId : vec3<u32>,
                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
          localId = LocalId;
          globalId = GlobalId;
          numWorkgroups = NumWorkgroups;
          main(getGlobalIndex());
        }

        fn main(${r[0]} : i32)
      `;break;default:throw Error("Unreachable")}return t}function Kl(){return`
  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
`}function K9(r,t,e){let o=[];if(o.push(`
      const workGroupSizeX = ${e.workGroupSize[0]}u;
      const workGroupSizeY = ${e.workGroupSize[1]}u;
      const workGroupSizeZ = ${e.workGroupSize[2]}u;

      var<private> localId: vec3<u32>;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${jL(e)?"  return i32(globalId.x);":`  let localInvocationIndex = localId.z * workGroupSizeX * workGroupSizeY +
                   localId.y * workGroupSizeX + localId.x;
               let workGroupID = (globalId - localId)/vec3<u32>(
                   workGroupSizeX, workGroupSizeY, workGroupSizeZ);

               return i32((workGroupID.z * numWorkgroups.x * numWorkgroups.y +
                   workGroupID.y * numWorkgroups.x + workGroupID.x) *
                   (workGroupSizeX * workGroupSizeY * workGroupSizeZ) +
                   localInvocationIndex);
        `}
      }
    `),e.isFromPixels)return o.push(`
        struct Uniform {
          size            : i32,
          numChannels     : i32,
          outShapeStrides : vec2<i32>,
        };

        @group(0) @binding(0) var<storage, read_write> result: array<${Lm(t.dtype,e.isVec4)}>;
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `),[WL,o.join(`
`),HL(t.shape),e.getUserCode()].join(`
`);let n="struct Uniforms { NAN : f32, ";e.variableNames.forEach((m,f)=>{let h=Ve(r[f].shape.length);n+=`${m.charAt(0).toLowerCase()+m.slice(1)}Shape : ${h}, `}),n+=`outShape : ${Ve(t.shape.length)}, `;let i=t.shape.length-1;n+=`
         outShapeStrides: ${Ve(i)}, `,e.size&&(n+="size : i32, "),e.uniforms&&(n+=e.uniforms),n+="};",n=ttt(n),o.push(n),e.atomic?o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${Lm(t.dtype,e.isVec4)}>;
    `),e.variableNames.forEach((m,f)=>{o.push(`
      @group(0) @binding(${1+f}) var<storage, read> ${m}: array<${e.variableTypes?e.variableTypes[f]:Lm(r[f].dtype,e.isVec4)}>;
        `)}),n!==""&&o.push(`
      @group(0) @binding(${1+e.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let l=Z9(t.shape,e.dispatchLayout),u=[WL,o.join(`
`),HL(t.shape),l,Q9(t.shape.length)];e.atomic||u.push(J9(t.shape,t.dtype,e.isVec4));let c=r.map((m,f)=>Y9(m,t.shape,e.variableTypes?e.variableTypes[f]==="vec4<f32>":e.isVec4,e.dispatchLayout.x.length===t.shape.length)).join(`
`);return u.push(c),u.push(e.getUserCode()),u.join(`
`)}function KL(r,t,e,o){let n=r.shaderKey;if(r.isFromPixels)return n;let s=e.map(c=>c.dtype).concat(o.dtype),i=e.map(c=>I.getBroadcastDims(c.shape,o.shape)),a=e.map(c=>y.arraysEqual(c.shape,o.shape)).join("_"),l=i.map(c=>c.join("_")).join(";"),u=jL(r)?"flatDispatch":"";return n+="_"+(r.workGroupSize?r.workGroupSize.join(","):"")+t.map(c=>c.length).join(",")+s.join(",")+r.variableNames.join(",")+l+a+u,n}var WL=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  fn idiv(a: i32, b: i32, sign: f32) -> i32 {
    var res: i32 = a / b;
    let modulo: i32 = a % b;
    if (sign < 0. && modulo != 0) {
      res = res - 1;
    }
    return res;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    return vec4<bool>(isnan(val[0]), isnan(val[1]), isnan(val[2]), isnan(val[3]));
  }
`;function HL(r){let t=r.length;if(t<=1)return"fn getCoordsFromIndex(index : i32) -> i32 { return index; }";let e=y.computeStrides(r),o=Ve(t),n=[];for(let i=0;i<t;i++)n.push(`d${i}`);if(e.length===1)return`    fn getCoordsFromIndex(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;
      return vec2<i32>(d0, d1);
    }`;let s;return s="var index2 = index;"+e.map((i,a)=>{let l=`let ${n[a]} = index2 / uniforms.outShapeStrides.${En(a)}`,u=a===e.length-1?`let ${n[a+1]} = index2 - ${n[a]} * uniforms.outShapeStrides.${En(a)}`:`index2 = index2 - ${n[a]} * uniforms.outShapeStrides.${En(a)}`;return`${l}; ${u};`}).join(""),`
    fn getCoordsFromIndex(index : i32) -> ${o} {
      ${s}
      return ${o}(${n.join(",")});
    }
  `}function j9(r,t){let e=r.name,o=r.shape.length,n=Ve(o),s="get"+e.charAt(0).toUpperCase()+e.slice(1),i=["d0","d1","d2","d3","d4","d5"].slice(0,o),a=i.map(c=>`${c} : i32`).join(", ");if(o<1)return t?`
        fn ${s}() -> vec4<f32> {
          return vec4<f32>(${e}[0]);
        }
      `:`
      fn ${s}() ->f32 {
        return f32(${e}[0]);
      }
    `;let l=`uniforms.${e.charAt(0).toLowerCase()+e.slice(1)}Shape`,u=`${o}D`;return o===0&&(u="1D"),t?`
      fn ${s}(${a}) -> vec4<f32> {
        return vec4<f32>(${e}[getIndexFromCoords${u}(${n}(${i.join(",")}),
          ${l}) / 4]);
      }
      `:`
    fn ${s}(${a}) -> f32 {
      return f32(${e}[getIndexFromCoords${u}(${n}(${i.join(",")}),
        ${l})]);
    }
   `}function X9(r,t,e,o){let n=r.name,s=n.charAt(0).toUpperCase()+n.slice(1),i="get"+s+"ByOutput",a=r.shape.length,l=t.length,u=Ve(l);if(y.arraysEqual(r.shape,t)&&o)return e?`
      fn ${i}Index(globalIndex : i32) -> vec4<f32> {
        return vec4<f32>(${n}[globalIndex]);
      }

      fn ${i}Coords(coords : ${u}) -> vec4<f32> {
        return vec4<f32>(${n}[${l>1?"getOutputIndexFromCoords(coords)":"coords"} / 4]);
      }
      `:`
    fn ${i}Index(globalIndex : i32) -> f32 {
      return f32(${n}[globalIndex]);
    }

    fn ${i}Coords(coords : ${u}) -> f32 {
      return f32(${n}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}]);
    }
    `;let c=I.getBroadcastDims(r.shape,t),p=l-a,m="";if(a===0)return e?`
    fn ${i}Index(globalIndex : i32) -> vec4<f32> {
      return get${s}();
    }

    fn ${i}Coords(coords : ${u}) -> vec4<f32> {
      return get${s}();
    }
  `:`
    fn ${i}Index(globalIndex : i32) -> f32{
      return get${s}();
    }

    fn ${i}Coords(coords : ${u}) -> f32{
      return get${s}();
    }
  `;l<2&&c.length>=1?m="coords = 0;":m=c.map(g=>`coords.${En(g+p)} = 0;`).join(`
`);let f="";if(l<2&&a>0)f="coords";else if(l>1){let g=Ve(a),x=r.shape.map((b,w)=>`coords.${En(w+p)}`).join(", ");f=`${g}(${x})`}else f="coords";let h=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`,d=`${a}D`;return e?`
    fn ${i}Index(globalIndex : i32) -> vec4<f32> {
      var coords = getCoordsFromIndex(globalIndex);
      ${m}
      return ${n}[getIndexFromCoords${d}(${f}, ${h}) / 4];
    }

    fn ${i}Coords(coordsIn : ${u}) -> vec4<f32> {
      var coords = coordsIn;
      ${m}
      return ${n}[getIndexFromCoords${d}(${f}, ${h}) / 4];
    }
  `:`
  fn ${i}Index(globalIndex : i32) -> f32 {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return f32(${n}[getIndexFromCoords${d}(${f}, ${h})]);
  }

  fn ${i}Coords(coordsIn : ${u}) -> f32 {
    var coords = coordsIn;
    ${m}
    return f32(${n}[getIndexFromCoords${d}(${f}, ${h})]);
  }
`}function Y9(r,t,e,o){let n=j9(r,e);return r.shape.length<=t.length&&(n+=X9(r,t,e,o)),n}function Z9(r,t){let{x:e,y:o=[],z:n=[]}=t,s=r.length;if(e.length===s)return`fn getOutputCoords() -> ${Ve(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;let i="",a=[e,o,n],l=0;for(let m=0;m<a.length;m++){let f=a[m];if(f.length!==0)if(l+=f.length,f.length===1)i+=`let d${f[0]} = i32(globalId[${m}]);`;else{let h=UL(f,"uniforms.outShape");i+=`var index${m} = i32(globalId[${m}]);`;for(let d=0;d<h.length;d++)i+=`let d${f[d]} = index${m} / ${h[d]};`,d===h.length-1?i+=`let d${f[d+1]} = index${m} - d${f[d]} * ${h[d]};`:i+=`index${m} = index${m} - d${f[d]} * ${h[d]};`}}let u=[];for(let m=0;m<l;m++)u.push(`d${m}`);let c=Ve(l),p=`fn getOutputCoords() -> ${c} {
  ${i}
`;return u.length===0?p+=`return ${c}(0); }`:p+=`return ${c}(${u.join(",")}); }`,p}function Q9(r){let t="";switch(r){case 0:case 1:t+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:t+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:t+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:t+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:t+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:t+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:y.assert(!1,()=>`Unsupported ${r}D shape`);break}return t}function jL(r){return r.dispatch[1]===1&&r.dispatch[2]===1}function Lm(r,t){return r==="float32"?t?"vec4<f32>":"f32":r==="int32"||r==="bool"?t?"vec4<i32>":"i32":r}function J9(r,t,e){let o=r.length,n=Lm(t,e),s;if(e?s=`fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {
      result[flatIndex] = ${n}(value);
    }`:s=`fn setOutputAtIndex(flatIndex : i32, value : f32) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {
      result[flatIndex] = ${n}(value);
    }`,o>=2){let i=["d0","d1","d2","d3","d4","d5"].slice(0,o),a=Ve(o);e?s+=`
      fn setOutputAtCoords(${i.map(l=>`${l} : i32`).join(", ")}, value : vec4<f32>) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndex(flatIndex / 4, value);
      }
      fn setOutputAtCoordsI32(${i.map(l=>`${l} : i32`).join(", ")}, value : vec4<i32>) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex / 4, value);
      }
    `:s+=`
      fn setOutputAtCoords(${i.map(l=>`${l} : i32`).join(", ")}, value : f32) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndex(flatIndex, value);
      }
      fn setOutputAtCoordsI32(${i.map(l=>`${l} : i32`).join(", ")}, value : i32) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex, value);
      }
    `}return s}function ttt(r){let t=/(\w+)\s*:\s*vec(5|6)/g;r=r.replace(t,o=>"@align(16) "+o);let e=/vec(5|6)\s*,\s*(\w+)/g;return r=r.replace(e,(o,n,s)=>`vec${n}, @align(16) ${s}`),r}var ec=r=>{let t=1;for(let e=0;e<r.length;e++)t*=r[e];return t};function ut(r,t,e=[1,1,1],o=[1,1,1]){let[n,s,i]=[Math.ceil(ec(r.x.map(a=>t[a]))/(e[0]*o[0])),r.y?Math.ceil(ec(r.y.map(a=>t[a]))/(e[1]*o[1])):1,r.z?Math.ceil(ec(r.z.map(a=>t[a]))/(e[2]*o[2])):1];return[n,s,i]}function XL(r,t,e,o=!1){let n=[8,8,1],s=[4,4,1];return o||(r<=8&&(s[1]=1),t<=16&&e<=16&&(n[0]=4)),{workGroupSize:n,elementsPerThread:s}}function zw(r,t,e=!1){if(e)return[8,8,1];let o=ec(r.x.map(s=>t[s])),n=ec(r.y.map(s=>t[s]));return o<=4?[4,16,1]:n<=4?[16,4,1]:[16,16,1]}function Mw(r,t,e=!1){if(e)return[4,4,1];let o=ec(r.x.map(s=>t[s])),n=ec(r.y.map(s=>t[s]));return o<=4?[1,2,1]:n<=4?[2,1,1]:[2,2,1]}function dt(r){return{x:r.map((t,e)=>e)}}function YL(r){if(r==="float32"||r==="int32"||r==="bool"||r==="string")return 4;if(r==="complex64")return 8;throw new Error(`Unknown dtype ${r}`)}function ZL(r,t){if(t==="float32")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"||t==="string")return Uint8Array.from(new Int32Array(r));throw new Error(`Unknown dtype ${t}`)}function Bw(){return(typeof window<"u"||typeof WorkerGlobalScope<"u")&&!!navigator.gpu}var Cs;(function(r){r[r.MatMulReduceProgram=0]="MatMulReduceProgram",r[r.MatMulSplitKProgram=1]="MatMulSplitKProgram",r[r.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",r[r.MatMulPackedProgram=3]="MatMulPackedProgram",r[r.MatMulMax=4]="MatMulMax"})(Cs||(Cs={}));var rtt=L().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),ott=(r,t)=>{let e=r.limits.maxComputeWorkgroupsPerDimension,o=t.dispatchLayout,n=t.dispatch;if(n.every(i=>i<=e))return n;y.assert(n[0]>e&&o.y===void 0&&o.z===void 0,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let s=Math.ceil(Math.sqrt(n[0]));return s>e?(s=Math.ceil(Math.cbrt(n[0])),y.assert(s<=e,()=>"Total dispatch size exceeds WebGPU maximum."),[s,s,s]):[s,s,1]},jl=class extends _n{constructor(t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchNumberInEncoder=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,!Bw())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=t,this.queue=t.queue,this.currentCommandEncoder=null,this.currentComputePass=null,this.supportTimeQuery=t.features.has("timestamp-query"),this.bufferManager=new Pw(this.device),this.textureManager=new Lw(this.device),this.tensorMap=new _i(this,zr()),this.supportTimeQuery&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2})),L().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:t,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}nextDataId(){return jl.nextDataId++}floatPrecision(){return 32}defaultGpuBufferUsage(){return GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}disposeData(t,e=!1){if(this.tensorDataPendingDisposal.indexOf(t)>=0)return!1;if(!this.tensorMap.has(t))return!0;let o=this.tensorMap.get(t);if(this.decRef(t),!e&&o.refCount>0)return!1;if(this.commandQueueOwnedIds.has(t))return this.tensorDataPendingDisposal.push(t),!1;let{complexTensorInfos:n}=this.tensorMap.get(t);return n!=null&&(this.disposeData(n.real.dataId,e),this.disposeData(n.imag.dataId,e)),this.releaseResource(t),this.tensorMap.delete(t),!0}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(t){let e=this.tensorMap.get(t);if(!(!e||!e.resourceInfo)){if("texture"in e.resourceInfo){let o=e.resourceInfo;o.texture instanceof GPUTexture&&this.textureManager.releaseTexture(o.texture,o.width,o.height,o.format,o.usage),o.texture=null}else{let o=e.resourceInfo;this.bufferManager.releaseBuffer(o.buffer,o.size,o.usage),o.buffer=null}e.resourceInfo=null}}refCount(t){return this.tensorMap.has(t)?this.tensorMap.get(t).refCount:0}incRef(t){let e=this.tensorMap.get(t);e.refCount++}decRef(t){if(this.tensorMap.has(t)){let e=this.tensorMap.get(t);e.refCount--}}write(t,e,o){if(o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:o,shape:e,values:t,refCount:1}),n}move(t,e,o,n,s){if(n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(t,{dtype:n,shape:o,values:e,refCount:s})}submitQueue(){this.ensureComputePassEnded(),this.queue.submit([this.currentCommandEncoder.finish()]),this.currentCommandEncoder=null,this.dispatchNumberInEncoder=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(t=>{this.releaseResource(t),this.tensorMap.delete(t)}),this.uniformPendingDisposal.forEach(t=>this.bufferManager.releaseBuffer(t.buffer,t.size,t.usage)),this.stagingPendingDisposal.forEach(t=>this.bufferManager.releaseUploadBuffer(t.buffer,t.size,t.usage)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.currentCommandEncoder||(this.currentCommandEncoder=this.device.createCommandEncoder())}ensureComputePassEnded(){this.currentComputePass&&(this.currentComputePass.end(),this.currentComputePass=null)}getComputePass(){return this.currentComputePass||(this.currentComputePass=this.currentCommandEncoder.beginComputePass()),this.currentComputePass}async getBufferData(t,e){let o=this.bufferManager.acquireBuffer(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(t,0,o,0,e),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=o.getMappedRange().slice(0);return o.unmap(),o!=null&&this.bufferManager.releaseBuffer(o,e,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ),L().getBool("WEBGPU_USE_PROFILE_TOOL")&&(y.assert(this.dummyContext!==void 0,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(t,e){let o=this.tensorMap.get(t);return this.releaseResource(t),o.values=e,o.values}readSync(t){let e=this.tensorMap.get(t),{values:o}=e;if(o==null)throw new Error("WebGPU readSync is only available for CPU-resident tensors.");return o}async read(t){if(!this.tensorMap.has(t))throw new Error(`Tensor ${t} was not registered!`);let e=this.tensorMap.get(t),{values:o}=e;if(o!=null)return this.convertAndCacheOnCPU(t,o);let n;if(e.dtype==="complex64"){let s=await Promise.all([this.read(e.complexTensorInfos.real.dataId),this.read(e.complexTensorInfos.imag.dataId)]),i=s[0],a=s[1];n=I.mergeRealAndImagArrays(i,a)}else{let s=e.resourceInfo,i=await this.getBufferData(s.buffer,s.size);n=ZL(i,e.dtype)}return this.convertAndCacheOnCPU(t,n),n}readToGPU(t){let e=this.tensorMap.get(t),{values:o,dtype:n,shape:s,resourceInfo:i}=e;if(n==="complex64")throw new Error("Does not support reading buffer for complex64 dtype.");if(i==null)throw o!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let a=i.size,l=this.bufferManager.acquireBuffer(a,i.usage);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(i.buffer,0,l,0,a),this.submitQueue();let u=this.makeTensorInfo(s,n),c=zr().makeTensorFromTensorInfo(u),p=this.tensorMap.get(u.dataId);return p.resourceInfo={size:a,usage:this.defaultGpuBufferUsage(),buffer:l},{tensorRef:c,buffer:l,bufSize:a}}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return ot(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return ot(t.shape,t.dtype,e)}async time(t){this.supportTimeQuery||console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled. Using performance.now is not workable for webgpu since it doesn't support synchronous data read from GPU.");let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(u=>u.query)).filter(u=>u!=null),i=y.flatten(this.activeTimers.map(u=>u.name)).filter(u=>u!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},l=await Promise.all(s);return a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,a}makeTensorInfo(t,e,o){return e==="string"&&o!=null&&o.length>0&&y.isString(o[0])&&(o=o.map(s=>y.encodeString(s))),{dataId:this.write(o,t,e),shape:t,dtype:e}}tensorToBinding(t){if(!t)return null;let e=this.tensorMap.get(t.dataId);if("texture"in e.resourceInfo){let n=e.resourceInfo;return n.texture instanceof GPUExternalTexture?n.texture:n.texture.createView()}let o=e.resourceInfo;return{offset:0,size:o.size,buffer:o.buffer}}async getQueryTime(t){return this.supportTimeQuery?this.getTimeFromQuerySet(t):0}uploadToGPU(t){let e=this.tensorMap.get(t);if(e.resourceInfo)return;let o=YL(e.dtype)*y.sizeFromShape(e.shape),n=this.bufferManager.acquireBuffer(o,this.defaultGpuBufferUsage());if(e.resourceInfo={size:o,usage:this.defaultGpuBufferUsage(),buffer:n},e.values){let s=this.bufferManager.acquireUploadBuffer(o,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC),i=s.getMappedRange();e.dtype==="int32"||e.dtype==="bool"?new Int32Array(i).set(e.values):new Float32Array(i).set(e.values),s.unmap(),this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(s,0,n,0,o);let a={size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,buffer:s};this.stagingPendingDisposal.push(a)}}makeUniforms(t){let e=0,o=0,n=[];t.forEach(l=>{l.data.length===0&&(l.data=[1]);let u;switch(l.data.length){case 1:u=4;break;case 2:u=8;break;case 3:u=16;break;case 4:u=16;break;case 5:u=16;break;case 6:u=16;break;default:y.assert(!1,()=>`Unsupported ${l.data.length}D shape`)}(o===5||o===6)&&(u=16),e=Math.ceil(e/u)*u,o=l.data.length,n.push(e),e+=l.data.length*4});let s=new ArrayBuffer(e);t.forEach((l,u)=>{let c=n[u];l.type==="int32"?new Int32Array(s,c,l.data.length).set(l.data):l.type==="uint32"?new Uint32Array(s,c,l.data.length).set(l.data):new Float32Array(s,c,l.data.length).set(l.data)});let i=this.bufferManager.acquireBuffer(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.queue.writeBuffer(i,0,s,0,e);let a={size:e,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,buffer:i};return this.uniformPendingDisposal.push(a),{offset:0,size:e,buffer:i}}runWebGPUProgram(t,e,o,n,s){if(s||(s=this.makeTensorInfo(t.outputShape,o)),y.sizeFromShape(s.shape)===0)return this.tensorMap.get(s.dataId).values=y.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),t.dispatch=ott(this.device,t);let i=[],a=[];if(!t.isFromPixels){i.push({type:"float32",data:[NaN]}),a=e.concat(s).map(x=>x.shape);let d="int32";a.map(x=>{i.push({type:d,data:x})});let g=y.computeStrides(s.shape);if(i.push({type:d,data:g}),t.size){let x=y.sizeFromShape(t.outputShape);i.push({type:d,data:[t.isVec4?x/4:x]})}}let l=e.map((d,g)=>{if(d.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(d.dataId),{dtype:this.tensorMap.get(d.dataId).dtype,shape:d.shape,name:t.variableNames[g]}}),u=KL(t,a,l,s),c;u in this.pipelineCache?c=this.pipelineCache[u]:(c=qL(this.device,t,l,s),this.pipelineCache[u]=c),n&&(i=[...i,...n]);let p=[this.tensorToBinding(s),...e.map(d=>this.tensorToBinding(d)),this.makeUniforms(i)],m=this.device.createBindGroup({layout:c.getBindGroupLayout(0),entries:p.map((d,g)=>({binding:g,resource:d}))});this.ensureCommandEncoderReady();let f=this.getComputePass(),h=this.activeTimers!=null;return h&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,0),f.setPipeline(c),f.setBindGroup(0,m),f.dispatchWorkgroups(t.dispatch[0],t.dispatch[1],t.dispatch[2]),h&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,1),this.dispatchNumberInEncoder++,e.forEach(d=>{this.commandQueueOwnedIds.add(d.dataId)}),this.commandQueueOwnedIds.add(s.dataId),L().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchNumberInEncoder&&this.submitQueue(),h&&this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(this.querySet)}),s}async getTimeFromQuerySet(t){let e=this.bufferManager.acquireBuffer(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),o=this.bufferManager.acquireBuffer(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.resolveQuerySet(t,0,2,e,0),this.currentCommandEncoder.copyBufferToBuffer(e,0,o,0,16),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=new BigUint64Array(o.getMappedRange()),s=Number(n[1]-n[0]);return o.unmap(),this.bufferManager.releaseBuffer(o,16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST),this.bufferManager.releaseBuffer(e,16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),s/1e6}shouldExecuteOnCPU(t,e=rtt){return L().getBool("WEBGPU_CPU_FORWARD")&&t.every(o=>this.tensorMap.get(o.dataId).resourceInfo==null&&y.sizeFromShape(o.shape)<e)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}};jl.nextDataId=0;Bw()&&sp("webgpu",async()=>{L().set("CHECK_COMPUTATION_FOR_ERRORS",!1);let r={powerPreference:L().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(r),e=t.limits,o={},n=t.features.has("timestamp-query");o.requiredLimits={maxComputeWorkgroupStorageSize:e.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:e.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:e.maxStorageBufferBindingSize},n&&(o.requiredFeatures=["timestamp-query"]);let s=await t.requestDevice(o);return new jl(s)},3);var It;(function(r){r[r.MUL=0]="MUL",r[r.ADD=1]="ADD",r[r.ATAN2=2]="ATAN2",r[r.SUB=3]="SUB",r[r.DIV=4]="DIV",r[r.EQUAL=5]="EQUAL",r[r.GREATER=6]="GREATER",r[r.GREATER_EQUAL=7]="GREATER_EQUAL",r[r.LESS=8]="LESS",r[r.LESS_EQUAL=9]="LESS_EQUAL",r[r.LOGICAL_AND=10]="LOGICAL_AND",r[r.NOT_EQUAL=11]="NOT_EQUAL",r[r.SQUARED_DIFFERENCE=12]="SQUARED_DIFFERENCE",r[r.INT_DIV=13]="INT_DIV",r[r.POW=14]="POW",r[r.PRELU=15]="PRELU",r[r.MAX=16]="MAX",r[r.MIN=17]="MIN",r[r.COMPLEX_MULTIPLY_REAL=18]="COMPLEX_MULTIPLY_REAL",r[r.COMPLEX_MULTIPLY_IMAG=19]="COMPLEX_MULTIPLY_IMAG"})(It||(It={}));var ntt=`
  if (isnan(a)) { return a; }
  if (isnan(b)) { return b; }
  `,JL=`
  if (isNaN.r) {
    resultTemp.r = valueForNaN;
  }
  if (isNaN.g) {
    resultTemp.g = valueForNaN;
  }
  if (isNaN.b) {
    resultTemp.b = valueForNaN;
  }
  if (isNaN.a) {
    resultTemp.a = valueForNaN;
  }
  `,tz=`
  let isNaN = isnanVec4(a) | isnanVec4(b);
  ${JL}
  `,stt="return a + b;",itt="return areal * breal - aimag * bimag;",att="return areal * bimag + aimag * breal;",ltt="return a / b;",utt="return a * b;",ctt="return (a - b) * (a - b);",ptt="return a - b;",mtt="return f32(a == b);",ftt="return vec4<f32>(a == b);",htt="return f32(a > b);",dtt="return vec4<f32>(a > b);",gtt="return f32(a >= b);",xtt="return vec4<f32>(a >= b);",ytt="return f32(a < b);",btt="return vec4<f32>(a < b);",wtt="return f32(a <= b);",Ctt="return vec4<f32>(a <= b);",Itt="return f32(f32(a) >= 1.0 && f32(b) >= 1.0);",Stt=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,vtt=`
  let s = sign(a) * sign(b);
  let ia = i32(round(a));
  let ib = i32(round(b));
  return f32(idiv(ia, ib, s));
  `,ktt=`
  let ia = vec4<i32>(round(a));
  let ib = vec4<i32>(round(b));
  let cond = ib != vec4<i32>(0);
  var resultTemp = vec4<i32>(0);
  let s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    resultTemp[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    resultTemp[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    resultTemp[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    resultTemp[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4<f32>(resultTemp);
  `,Ttt=`
  if (isnan(a) || isnan(b)) {
    return 1.0;
  }
  return f32(a != b);
`,Ntt=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
  ${tz}

  return resultTemp;
`,Ett=`
  if(a < 0.0 && floor(b) < b) {
    return uniforms.NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  if (round(abs(b) % 2.0) != 1.0) {
    return pow(abs(a), b);
  }
  return sign(a) * pow(abs(a), b);
  `,$tt=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = a < vec4<f32>(0.0) & floor(b) < b;
  let valueForNaN = uniforms.NAN;
  ${JL}
  return resultTemp;
  `,Att="if (a < 0.0) { return b * a; }  return a;",Dtt=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
  `;function $v(r,t,e="uniforms.NAN"){let o=t?tz:ntt;return t?`
    let valueForNaN = ${e};
    var resultTemp = vec4<f32>(${r}(a, b));
    `+o+`
    return resultTemp;
  `:o+`
    return ${r}(a, b);
  `}function rc(r,t){switch(r){case It.MUL:return utt;case It.ADD:return stt;case It.ATAN2:return $v("atan2",t);case It.SUB:return ptt;case It.DIV:return ltt;case It.EQUAL:return t?ftt:mtt;case It.GREATER:return t?dtt:htt;case It.GREATER_EQUAL:return t?xtt:gtt;case It.LESS:return t?btt:ytt;case It.LESS_EQUAL:return t?Ctt:wtt;case It.LOGICAL_AND:return t?Stt:Itt;case It.NOT_EQUAL:return t?Ntt:Ttt;case It.SQUARED_DIFFERENCE:return ctt;case It.INT_DIV:return t?ktt:vtt;case It.PRELU:return t?Dtt:Att;case It.MAX:return $v("max",t);case It.MIN:return $v("min",t);case It.POW:return t?$tt:Ett;case It.COMPLEX_MULTIPLY_REAL:return itt;case It.COMPLEX_MULTIPLY_IMAG:return att;default:throw new Error(`BinaryType ${r} is not implemented!`)}}var pt;(function(r){r[r.ABS=0]="ABS",r[r.CEIL=1]="CEIL",r[r.COS=2]="COS",r[r.COSH=3]="COSH",r[r.ELU=4]="ELU",r[r.EXP=5]="EXP",r[r.EXPM1=6]="EXPM1",r[r.FLOOR=7]="FLOOR",r[r.IS_NAN=8]="IS_NAN",r[r.LINEAR=9]="LINEAR",r[r.LOG=10]="LOG",r[r.LOGICAL_NOT=11]="LOGICAL_NOT",r[r.NEG=12]="NEG",r[r.RELU=13]="RELU",r[r.RELU6=14]="RELU6",r[r.LEAKYRELU=15]="LEAKYRELU",r[r.RECIPROCAL=16]="RECIPROCAL",r[r.RSQRT=17]="RSQRT",r[r.SIN=18]="SIN",r[r.SINH=19]="SINH",r[r.SIGMOID=20]="SIGMOID",r[r.SQRT=21]="SQRT",r[r.SQUARE=22]="SQUARE",r[r.TANH=23]="TANH",r[r.TO_INT=24]="TO_INT"})(pt||(pt={}));var Rtt="return abs(a);",Ftt="return ceil(a);",_tt="return cos(a);",Ott=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,Ptt="return exp(a) - 1.0;",Ltt="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",ztt=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,Mtt="return exp(a);",Btt="return floor(a);",Vtt="return f32(isnan(a));",Gtt="return a;",Utt=`if (a < 0.0) { return 1.0/0.0; }
  return log(a);`,Wtt="return f32(!(a >= 1.0));",Htt="return -a;",qtt="if (a < 0.0) { return uniforms.alpha * a; } return a;",Ktt=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,jtt="return 1.0 / a;",Xtt="return select(a, 0.0, a < 0.0);",Ytt="return clamp(a, 0.0, 6.0);",Ztt="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",Qtt=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,Jtt="return 1.0/sqrt(a);",tet="return 1.0 / (1.0 + exp(-1.0 * a));",eet="return sin(a);",ret=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,oet="return sqrt(a);",net="return a * a;",set=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`,iet="return f32(i32((a)));";function $a(r,t){switch(r){case pt.ABS:return Rtt;case pt.COS:return _tt;case pt.COSH:return Ott;case pt.CEIL:return Ftt;case pt.ELU:return t?ztt:Ltt;case pt.EXP:return Mtt;case pt.EXPM1:return Ptt;case pt.FLOOR:return Btt;case pt.IS_NAN:return Vtt;case pt.LINEAR:return Gtt;case pt.LOG:return Utt;case pt.LOGICAL_NOT:return Wtt;case pt.NEG:return Htt;case pt.LEAKYRELU:return t?Ktt:qtt;case pt.RECIPROCAL:return jtt;case pt.RELU:return t?Qtt:Xtt;case pt.RELU6:return t?Ztt:Ytt;case pt.RSQRT:return Jtt;case pt.SIGMOID:return tet;case pt.SIN:return eet;case pt.SINH:return ret;case pt.SQRT:return oet;case pt.SQUARE:return net;case pt.TANH:return set;case pt.TO_INT:return iet;default:throw new Error(`BinaryType ${r} is not implemented!`)}}var Fe=r=>{switch(r){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(`${r}-component is not supported.`)}};function Xr(r,t=!1,e=!1,o=3){if(r===null)return"";let n="";if(r==="linear")n=$a(pt.LINEAR);else if(r==="relu")n=$a(pt.RELU,e);else if(r==="elu")n=$a(pt.ELU,e);else if(r==="relu6")n=$a(pt.RELU6,e);else if(r==="prelu")n=rc(It.PRELU,e);else if(r==="sigmoid")n=$a(pt.SIGMOID,e);else if(r==="leakyrelu")n=$a(pt.LEAKYRELU,e);else throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);let i=Fe(e?4:1),a="";return t?a=`
      fn activation(a : ${i}, coords : vec${o}<i32>) -> ${i} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }`:a=`
      fn activation(a : ${i}, coords : vec${o}<i32>) -> ${i} {
        ${n}
      }`,a}function $n(r,t){return`
      ${r?"value = value + getBiasByOutputCoords(coords);":""}
      ${t?"value = activation(value, coords);":""}
      `}function Av(r,t,e,o,n=!1,s=!1,i=!1,a=1){y.assert(e&&a===1||!e,()=>`transposeA ${e} is not compatible with component size ${a}`);let l=`
      let batch = ${r?"0":"batchIn"};
      let batchASize = uniforms.aShape[1] * uniforms.aShape[2];
      ${e?`value = A[(batch * batchASize + col * uniforms.aShape[2] + row) / ${a}];`:`value = A[(batch * batchASize + row * uniforms.aShape[2] + col) / ${a}];`}

    `,u;return o===!1?u=`value = B[(batch * batchBSize + row * uniforms.bShape[2] + col) / ${a}];`:u=`value = B[(batch * batchBSize + col * uniforms.bShape[2] + row) / ${a}];`,`
  fn mm_readA(batchIn: i32, row: i32, colIn: i32) -> ${Fe(a)} {
    var value = ${Fe(a)}(0.0);
    let col = colIn * ${a};
    ${n&&i?l:`
    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${l}
    }
    `}
    return value;
  }

  fn mm_readB(batchIn: i32, row: i32, colIn: i32) -> ${Fe(a)} {
    let col = colIn * ${a};
    let batch = ${t?"0":"batchIn"};
    let batchBSize = uniforms.bShape[1] * uniforms.bShape[2];
    var value = ${Fe(a)}(0.0);
    ${u}
    return value;
  }
  `}function fd(r,t,e,o,n,s,i=!1,a=!1,l=!1,u=1){return`
  ${Av(e,o,n,s,i,a,l,u)}
  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Fe(u)}) {
    let col = colIn * ${u};
    ${i&&a?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${$n(r,t)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}var aet=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / InnerElementSize + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / InnerElementSize + inputCol);
        `,uet=(r,t)=>r?`
        let ACached0 = mm_Asub[k * InnerElementSize][localRow];
        let ACached1 = mm_Asub[k * InnerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * InnerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * InnerElementSize + 3][localRow];"}
        for (var i = 0; i < RowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < RowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`;function oc(r,t,e=!1,o=32,n=!1,s=32,i=!1){let a=t[1]*r[1],l=t[0]*r[0],u=e?a:o,c=e?o:a,p=u/t[0],m=o/t[1];return y.assert((e&&p===4&&r[1]===4||!e&&(p===3||p===4))&&u%t[0]===0&&o%t[1]===0&&r[0]===4,()=>`If transposeA ${e} is true, innerElementSize ${p} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${p} must be 3 or 4.
      tileAWidth ${u} must be divisible by workGroupSize[0]${t[0]}. tileInner ${o} must be divisible by workGroupSize[1] ${t[1]}. ColPerThread ${r[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${u/p}>, ${c}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${l/r[0]}>, ${o}>;

  const RowPerThread = ${r[1]};
  const ColPerThread = ${r[0]};
  const InnerElementSize = ${p};
  const TileInner = ${o};

  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
  fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
            @builtin(global_invocation_id) GlobalId : vec3<u32>,
            @builtin(num_workgroups) NumWorkgroups: vec3<u32>,
            @builtin(workgroup_id) workgroupId: vec3<u32>) {
    localId = LocalId;
    globalId = GlobalId;
    numWorkgroups = NumWorkgroups;

    let localRow = i32(localId.y);
    let tileRow = ${i?"0":"localRow * RowPerThread"};
    let tileCol = i32(localId.x);

    let globalRow = ${i?"0":"i32(globalId.y) * RowPerThread"};
    let globalCol = i32(globalId.x);
    let batch = ${n?"0":"i32(globalId.z)"};
    let globalRowStart = i32(workgroupId.y) * ${a};

    let numTiles = ${n?`${Math.ceil(s/o)}`:"(uniforms.dimInner - 1) / TileInner + 1"};
    var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

    var acc: array<vec4<f32>, RowPerThread>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${aet(e)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);
        }
        kStart = kStart + TileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileInner / InnerElementSize; k = k + 1) {
            let BCached0 = mm_Bsub[k * InnerElementSize][tileCol];
            let BCached1 = mm_Bsub[k * InnerElementSize + 1][tileCol];
            let BCached2 = mm_Bsub[k * InnerElementSize + 2][tileCol];
            ${p===3?"":"let BCached3 = mm_Bsub[k * InnerElementSize + 3][tileCol];"}

            ${uet(e,p)}
        }

        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}var cet=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,pet=r=>r?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function nc(r,t,e=!1,o=32,n=!1,s=32){let i=r[1]*t[1],a=r[0]*t[0],l=e?i:o,u=e?o:i;y.assert(u%t[1]===0&&l%t[0]===0&&o%t[1]===0,()=>`tileAHight ${u} must be divisible by workGroupSize[1]${t[1]}, tileAWidth ${l} must be divisible by workGroupSize[0]${t[0]}, tileInner ${o} must be divisible by workGroupSize[1]${t[1]}`);let c=u/t[1],p=l/t[0],m=o/t[1];return`
    var<workgroup> mm_Asub : array<array<f32, ${l}>, ${u}>;
    var<workgroup> mm_Bsub : array<array<f32, ${a}>, ${o}>;
    const RowPerThread = ${r[1]};
    const ColPerThread = ${r[0]};
    const TileInner = ${o};

    @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
    fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
              @builtin(global_invocation_id) GlobalId : vec3<u32>,
              @builtin(num_workgroups) NumWorkgroups: vec3<u32>,
              @builtin(workgroup_id) workgroupId: vec3<u32>) {
      localId = LocalId;
      globalId = GlobalId;
      numWorkgroups = NumWorkgroups;

      let tileRow = i32(localId.y) * RowPerThread;
      let tileCol = i32(localId.x) * ColPerThread;

      let globalRow = i32(globalId.y) * RowPerThread;
      let globalCol = i32(globalId.x) * ColPerThread;
      let batch = ${n?"0":"i32(globalId.z)"};
      let globalRowStart = i32(workgroupId.y) * ${i};

      let numTiles = ${n?`${Math.ceil(s/o)}`:"(uniforms.dimInner - 1) / TileInner + 1"};
      var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

      var acc : array<array<f32, ColPerThread>, RowPerThread>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
          acc[innerRow][innerCol] = 0.0;
        }
      }

      let tileRowA = i32(localId.y) * ${c};
      let tileColA = i32(localId.x) * ${p};
      let tileRowB = i32(localId.y) * ${m};
      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${c}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ${p}; innerCol = innerCol + 1) {
            let inputRow = tileRowA + innerRow;
            let inputCol = tileColA + innerCol;
            ${cet(e)}
          }
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol + innerCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch,
              kStart + inputRow,
              globalCol + innerCol);
          }
        }
        kStart = kStart + TileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ColPerThread>;
        for (var k = 0; k < TileInner; k = k + 1) {
          for (var inner = 0; inner < ColPerThread; inner = inner + 1) {
            BCached[inner] = mm_Bsub[k][tileCol + inner];
          }

          for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            ${pet(e)}
            for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
              acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
            }
          }
        }

        workgroupBarrier();
      }

      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
          mm_write(batch, globalRow + innerRow, globalCol + innerCol,
              acc[innerRow][innerCol]);
        }
      }
    }
  `}var met=r=>r?`
      mm_readA(batch, colA, globalRow),
      mm_readA(batch, colA + 1, globalRow),
      mm_readA(batch, colA + 2, globalRow),
      mm_readA(batch, colA + 3, globalRow)
  `:`
      mm_readA(batch, globalRow, colA),
      mm_readA(batch, globalRow, colA + 1),
      mm_readA(batch, globalRow, colA + 2),
      mm_readA(batch, globalRow, colA + 3)
  `;function fet(r,t=!1){return y.assert(r[1]===1&&r[2]===1,()=>`A linear work group size is required. But got ${r}.`),`
    const TileSize = ${r[0]*4};
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${mt()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / TileSize + 1;
      let batch = i32(globalId.z);
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        let colA = t * TileSize + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${met(t)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileSize / 4; k = k + 1) {
          let rowB = t * TileSize + k * 4;
          let BCached = vec4<f32>(mm_readB(batch, rowB, globalCol),
                              mm_readB(batch, rowB + 1, globalCol),
                              mm_readB(batch, rowB + 2, globalCol),
                              mm_readB(batch, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}var Vw=class{constructor(t,e,o,n,s=!1,i=!1,a=null,l=null,u=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0]};let c=s?t[1]:t[2];if(this.isVec4=(c%4===0&&!s||e[1]%4===0&&s)&&e[2]%4===0&&!i,this.isVectorA=e[1]===1&&!s,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workGroupSize=[32,1,1];else{let f=XL(e[1],c,e[2],s);this.workGroupSize=f.workGroupSize,this.elementsPerThread=f.elementsPerThread}this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread);let p=a!=null,m=u!=null;p&&this.variableNames.push("bias"),m&&this.variableNames.push("preluActivationWeights"),this.transposeA=s,this.transposeB=i,this.addBias=p,this.activation=l,this.hasPreluActivationWeights=m,this.batchAEqualOne=o,this.batchBEqualOne=n,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(e[1],e[2],c),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${s}_${i}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getShapeFit(t,e,o){let n=this.workGroupSize[1]*this.elementsPerThread[1],s=this.workGroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=this.workGroupSize[0]*4:this.tileInner=s;let i=t%n===0,a=e%s===0,l=o%this.tileInner===0;return[i,a,l]}getUserCode(){return`
      ${Xr(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${fd(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?oc(this.elementsPerThread,this.workGroupSize,this.transposeA,this.tileInner,!1,null,this.isVectorA):this.isVectorA?fet(this.workGroupSize,this.transposeA):nc(this.elementsPerThread,this.workGroupSize,this.transposeA,this.tileInner)}
    `}};function het(){return`
    var<workgroup> sumValues : array<f32, workGroupSizeX>;
    ${mt()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + i32(workGroupSizeX)) {
        let dataA = mm_readA(batch, row, k);
        let dataB = mm_readB(batch, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = workGroupSizeX / 2u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}var Gw=class{constructor(t,e,o,n=!1,s=!1,i=null,a=null,l=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize);let u=i!=null,c=l!=null;u&&this.variableNames.push("bias"),c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=c,this.batchAEqualOne=e,this.batchBEqualOne=o,this.shaderKey=`matMulReduce_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getUserCode(){return`
      ${Xr(this.activation,this.hasPreluActivationWeights)}
      ${fd(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,this.transposeA,this.transposeB)}
      ${het()}
    `}};function det(r){let t=r[1],e=r[0],o=t>e?t:e;return`
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${t}>;
  var<workgroup> mm_Bsub : array<array<f32, ${e}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${mt()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batch, globalRow, globalColA);
    var regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batch, globalRow, globalColA);
      regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}var Uw=class{constructor(t,e,o,n=!1,s=!1,i=null,a=null,l=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[16,8,1],this.outputShape=o,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(o[2]/this.workGroupSize[0]),Math.ceil(o[1]/this.workGroupSize[1]),o[0]];let u=i!=null;u&&this.variableNames.push("bias");let c=l!=null;c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=c,this.batchAEqualOne=t[0]===1,this.batchBEqualOne=e[0]===1,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getUserCode(){return`
      ${Xr(this.activation,this.hasPreluActivationWeights)}
      ${fd(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,this.transposeA,this.transposeB)}
      ${det(this.workGroupSize)}
    `}};var Ww=class{constructor(t,e,o,n,s=!1,i=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[8,8,1],this.atomic=!0,this.isVec4=!1,this.splitedDimInner=128,y.assert(t[0]===1,()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0,3]},this.isVec4=(s&&this.outputShape[1]%4===0||!s&&e%4===0)&&this.outputShape[2]%4===0,this.elementsPerThread=[4,4,this.splitedDimInner],this.isVec4||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=ut(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],e],this.workGroupSize,this.elementsPerThread),this.transposeA=s,this.transposeB=i,this.batchAEqualOne=o,this.batchBEqualOne=n,this.shaderKey=`matMulSplitK_${s}_${i}_${o}_${n}_${this.elementsPerThread}_${this.isVec4}`}getUserCode(){let t=n=>`
      for (var i = 0; i < ${n}; i = i + 1)
      {
        var oldValue = atomicLoad(&(result[flatIndex + i]));
        var exchanged = false;
        for (; !exchanged;) {
          let newValueF32 = bitcast<f32>(oldValue) + ${n>1?"value[i]":"value"};
          let newValue = bitcast<i32>(newValueF32);
          let res = atomicCompareExchangeWeak(&(result[flatIndex + i]), oldValue, newValue);
          oldValue = res.old_value;
          exchanged = res.exchanged;
        }
      }
      `,e=this.isVec4?4:1;return`
      ${Av(this.batchAEqualOne,this.batchBEqualOne,!1,this.transposeB,!1,!1,!1,e)}
      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${Fe(e)}) {
        let col = colIn * ${e};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          ${t(e)}
        }
      }
      ${this.isVec4?oc(this.elementsPerThread,this.workGroupSize,this.transposeA,32,!0,this.splitedDimInner):nc(this.elementsPerThread,this.workGroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}},Hw=class{constructor(t,e=null,o=null,n=null){this.uniforms="",this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.addBias=e!=null,this.hasPreluActivationWeights=n!=null,this.activation=o,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${o}`}getUserCode(){return`
    ${Xr(this.activation,this.hasPreluActivationWeights)}
    ${mt("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${$n(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}};var qw=class{constructor(t){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${mt("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}};function Qo(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new qw(o),a=[{type:"float32",data:[n]}];return t.runWebGPUProgram(i,[],s,a)}}var ez={kernelName:Wa,backendName:"webgpu",kernelFunc:Qo};function Ct(r){let{inputs:t,attrs:e}=r,{x:o}=t,{shape:n}=e,s=y.sizeFromShape(o.shape),i=y.inferFromImplicitShape(n,s),a=y.sizeFromShape(i);return y.assert(s===a,()=>`The new shape (${i}) has ${a} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:i,dtype:o.dtype}}var rz={kernelName:Xs,backendName:"webgpu",kernelFunc:Ct};function zm({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],d=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(d),b=y.sizeFromShape(g),C=Mr.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let k=e?[x,p,f]:[x,f,p],E=o?[b,h,m]:[b,m,h],A=Ct({inputs:{x:r},backend:n,attrs:{shape:k}}),D=Ct({inputs:{x:t},backend:n,attrs:{shape:E}}),_=[A,D],P=Math.max(x,b),B=x===1,V=b===1,G=[A,D],W=[{type:"int32",data:[f]},{type:"int32",data:[h]},{type:"int32",data:[p]}],U,H,Z=[P,f,h],q=L().get("WEBGPU_MATMUL_PROGRAM_TYPE");switch(q<0&&(f*h<=128?q=Cs.MatMulReduceProgram:P===1&&f<=128&&h<=48&&m>=2e3?q=Cs.MatMulSplitKProgram:f<=16&&(h<=512||m>=2*h)||h<=16&&(f<=512||p>=2*f)?q=Cs.MatMulSmallOutputSizeProgram:q=Cs.MatMulPackedProgram),q){case Cs.MatMulReduceProgram:U=new Gw(Z,B,V,e,o,s,l,i);break;case Cs.MatMulSplitKProgram:{if(H=Qo({backend:n,attrs:{shape:Z,value:0,dtype:r.dtype}}),U=new Ww(Z,m,B,V,e,o),s||l){H=n.runWebGPUProgram(U,G,r.dtype,W,H);let tt=new Hw(H.shape,s,l,i),rt=null,lt=[H];s&&lt.push(s),i&&lt.push(i),l==="leakyrelu"&&(rt=[{type:"float32",data:[a]}],tt.uniforms+=" alpha : f32,");let at=n.runWebGPUProgram(tt,lt,H.dtype,rt);_.push(H);let ht=Ct({inputs:{x:at},backend:n,attrs:{shape:C}});_.push(at);for(let ct of _)n.disposeData(ct.dataId);return ht}break}case Cs.MatMulSmallOutputSizeProgram:U=new Uw(k,E,Z,e,o,s,l,i);break;case Cs.MatMulPackedProgram:U=new Vw(k,Z,B,V,e,o,s,l,i);break;default:throw new Error(`Unsupported MatMulProgramType ${q}.`)}s&&G.push(s),i&&G.push(i),l==="leakyrelu"&&(W.push({type:"float32",data:[a]}),U.uniforms+=" alpha : f32,"),H=n.runWebGPUProgram(U,G,r.dtype,W,H);let Q=Ct({inputs:{x:H},backend:n,attrs:{shape:C}});_.push(H);for(let tt of _)n.disposeData(tt.dataId);return Q}function get(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return zm({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var oz={kernelName:oa,backendName:"webgpu",kernelFunc:get};var hd=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.workGroupSize=[128,1,1],this.size=!0,this.outputShape=I.assertAndGetBroadcastShape(e,o),this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`binaryOpComplex_${t}`,this.op=t}getUserCode(){return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${rc(this.op,!1)}
      }

      ${mt("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}};var sc=class{constructor(t,e,o){this.size=!0,this.variableNames=["A","B"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.dispatchLayout=dt(this.outputShape),this.op=t,this.useSharedMemoryWithA=e.length===1&&o.length>1&&e[0]<1024,this.useSharedMemoryWithB=o.length===1&&e.length>1&&o[0]<1024,this.useSharedMemoryWithA||this.useSharedMemoryWithB?(this.isVec4=!1,this.lastDimensionSize=this.useSharedMemoryWithB?o[0]:e[0],this.shaderKey=`binary_${this.type}_${t}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`,this.type="shared",this.workGroupSize=[256,1,1],this.lastDimensionSize<256?this.workPerThread=1:this.lastDimensionSize<512?this.workPerThread=2:this.workPerThread=4):(y.arraysEqual(e,o)&&y.sizeFromShape(e)%4===0?(this.isVec4=!0,this.type="vec4",this.workPerThread=4):(this.isVec4=!1,this.type="plain",this.workPerThread=1),this.shaderKey=`binary_${this.type}_${t}`,this.workGroupSize=[128,1,1]),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1])}getUserCode(){let t;if(this.type==="shared"){let e=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",o=this.useSharedMemoryWithB?`let a = getAByOutputCoords(coords);
          let b = sharedBuf[${e}];`:`let a = sharedBuf[${e}];
          let b = getBByOutputCoords(coords);`;t=`
        fn binaryOperation(a : f32, b : f32) -> f32 {
          ${rc(this.op,this.isVec4)}
        }
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${mt("index")} {
          // Fill in the shared memory buffer. Here we need a loop to make sure
          // that all data in A|B are uploaded when |sharedMemorySize| is larger
          // than work group size.
          for(var localIndex = i32(localId.x); localIndex < ${this.lastDimensionSize}; localIndex = localIndex + ${this.workGroupSize[0]}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
            let flatIndex = index * ${this.workPerThread} + i;
            if(flatIndex < uniforms.size) {
              let coords = getCoordsFromIndex(flatIndex);

              ${o}
              setOutputAtIndex(flatIndex, binaryOperation(a, b));
            }
          }
        }
        `}else{let e=this.type==="vec4"?"vec4<f32>":"f32",o=rc(this.op,this.isVec4);t=`
       fn binaryOperation(a : ${e}, b : ${e}) -> ${e} {
         ${o}
       }
       ${mt("index")} {
         if (index < uniforms.size) {
           let a = getAByOutputIndex(index);
           let b = getBByOutputIndex(index);
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `}return t}};function je(r){let{inputs:t}=r,{x:e}=t;return r.backend.incRef(e.dataId),{dataId:e.dataId,shape:e.shape,dtype:e.dtype}}var nz={kernelName:Fo,backendName:"webgpu",kernelFunc:je};function Is(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.tensorMap.get(s.dataId),a=je({inputs:{x:o},backend:e}),l=je({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var sz={kernelName:Gi,backendName:"webgpu",kernelFunc:Is};var An=class{constructor(t,e){this.variableNames=["A"],this.size=!0;let o=128;this.workGroupSize=[o,1,1],this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.op=e,this.shaderKey=`unary_${e}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${$a(this.op,!1)}
      }
      ${mt("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}};function Ht({opType:r,cpuKernelImpl:t,dtype:e}){return({inputs:o,backend:n})=>{let{x:s}=o,i=n,a=e||s.dtype;if(i.shouldExecuteOnCPU([s])&&t!=null){let u=i.tensorMap.get(s.dataId),c=t(u.values,a);return i.makeTensorInfo(s.shape,a,c)}let l=new An(s.shape,r);return i.runWebGPUProgram(l,[s],a)}}function te({opType:r,cpuKernelImpl:t,supportsComplex:e=!1,dtype:o}){return({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(e&&i.dtype==="complex64"){let p=l.tensorMap.get(i.dataId),m=l.tensorMap.get(a.dataId),f,h;if(r!==It.MUL)[f,h]=[[p.complexTensorInfos.real,m.complexTensorInfos.real],[p.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(g=>{let[x,b]=g,w={dataId:x.dataId,dtype:x.dtype,shape:i.shape},C={dataId:b.dataId,dtype:b.dtype,shape:a.shape},k=new sc(r,i.shape,a.shape);return l.runWebGPUProgram(k,[w,C],oe(x.dtype,b.dtype))});else{let g=new hd(It.COMPLEX_MULTIPLY_REAL,i.shape,a.shape),x=new hd(It.COMPLEX_MULTIPLY_IMAG,i.shape,a.shape),b=[{dataId:p.complexTensorInfos.real.dataId,dtype:p.complexTensorInfos.real.dtype,shape:i.shape},{dataId:p.complexTensorInfos.imag.dataId,dtype:p.complexTensorInfos.imag.dtype,shape:i.shape},{dataId:m.complexTensorInfos.real.dataId,dtype:m.complexTensorInfos.real.dtype,shape:a.shape},{dataId:m.complexTensorInfos.imag.dataId,dtype:m.complexTensorInfos.imag.dtype,shape:a.shape}];f=l.runWebGPUProgram(g,b,"float32"),h=l.runWebGPUProgram(x,b,"float32")}let d=Is({inputs:{real:f,imag:h},backend:l});return l.disposeData(f.dataId),l.disposeData(h.dataId),d}let u=o||oe(i.dtype,a.dtype);if((i.dtype==="string"||a.dtype==="string"||l.shouldExecuteOnCPU([i,a]))&&t!=null){let p=l.tensorMap.get(i.dataId).values,m=l.tensorMap.get(a.dataId).values,f=i.dtype==="string"?I.fromUint8ToStringArray(p):p,h=i.dtype==="string"?I.fromUint8ToStringArray(m):m,[d,g]=t(i.shape,a.shape,f,h,u);return l.makeTensorInfo(g,u,d)}let c=new sc(r,i.shape,a.shape);return l.runWebGPUProgram(c,[i,a],u)}}var Zv={};Jt(Zv,{addImpl:()=>Fv,bincountImpl:()=>lz,bincountReduceImpl:()=>uz,castImpl:()=>Rv,ceilImpl:()=>_v,concatImpl:()=>cz,equalImpl:()=>Ov,expImpl:()=>Pv,expm1Impl:()=>Lv,floorImpl:()=>zv,gatherNdImpl:()=>pz,gatherV2Impl:()=>mz,greaterEqualImpl:()=>Bv,greaterImpl:()=>Mv,lessEqualImpl:()=>Gv,lessImpl:()=>Vv,linSpaceImpl:()=>fz,logImpl:()=>Uv,maxImpl:()=>hz,maximumImpl:()=>Wv,minimumImpl:()=>Hv,multiplyImpl:()=>xd,negImpl:()=>dz,notEqualImpl:()=>qv,prodImpl:()=>xz,raggedTensorToTensorImpl:()=>wz,rangeImpl:()=>Cz,rsqrtImpl:()=>Kv,scatterImpl:()=>Iz,sigmoidImpl:()=>Sz,simpleAbsImpl:()=>iz,sliceImpl:()=>vz,sparseFillEmptyRowsImpl:()=>kz,sparseReshapeImpl:()=>Tz,sparseSegmentReductionImpl:()=>Nz,sqrtImpl:()=>Ez,squaredDifferenceImpl:()=>jv,stridedSliceImpl:()=>$z,stringNGramsImpl:()=>Az,stringSplitImpl:()=>Dz,stringToHashBucketFastImpl:()=>Rz,subImpl:()=>Yv,tileImpl:()=>Fz,topKImpl:()=>Oz,transposeImpl:()=>gz,uniqueImpl:()=>Pz});function dd(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}function iz(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}function _e(r){return(t,e,o,n,s)=>{let i=I.assertAndGetBroadcastShape(t,e),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=y.computeStrides(t),h=y.computeStrides(e),d=I.getBroadcastDims(t,i),g=I.getBroadcastDims(e,i);if(d.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),w=b.slice(-p);d.forEach(A=>w[A]=0);let C=y.locToIndex(w,p,f),k=b.slice(-m);g.forEach(A=>k[A]=0);let E=y.locToIndex(k,m,h);c[x]=r(o[C],n[E])}return[c,i]}}function Mm(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}function Kw(r,t,e="float32"){if(e==="complex64"){let n=Kw(r,t,"float32"),s=Kw(r,t,"float32");return Mm({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function Dv(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function az(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}function Rv(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,i]=_e((a,l)=>a!==l?1:0)(t,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function gd(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Dv({inputs:{x:n},backend:e});let c=Kw(e,n.shape,n.dtype),p=gd({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=Mm({inputs:{real:p,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=az({inputs:{input:n},backend:e}),p=gd({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=Dv({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=e.data.get(n.dataId).values,[a,l,u]=Rv(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}function He(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;dd([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?I.fromUint8ToStringArray(u):u,m=i.dtype==="string"?I.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,d]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(d,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=gd({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,d=gd({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(d.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,w=l.data.get(x.dataId).values,C=l.data.get(b.dataId).values,[k,E,A]=e(i.shape,a.shape,f,h,w,C),D=l.makeTensorInfo(A,"float32",k),_=l.makeTensorInfo(A,"float32",E),P=Mm({inputs:{real:D,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(D),l.disposeIntermediateTensorInfo(_),P}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function Bm(r){return(t,e,o,n,s,i)=>{let a=I.assertAndGetBroadcastShape(t,e),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=I.getBroadcastDims(t,a),h=I.getBroadcastDims(e,a),d=I.mergeRealAndImagArrays(o,n),g=I.mergeRealAndImagArrays(s,i),x=t.length,b=y.computeStrides(t),w=e.length,C=y.computeStrides(e);if(f.length+h.length===0)for(let k=0;k<p.length;k++){let E=k%d.length,A=k%g.length,D=r(d[E*2],d[E*2+1],g[A*2],g[A*2+1]);p[k]=D.real,m[k]=D.imag}else for(let k=0;k<p.length;k++){let E=y.indexToLoc(k,u,c),A=E.slice(-x);f.forEach(V=>A[V]=0);let D=y.locToIndex(A,x,b),_=E.slice(-w);h.forEach(V=>_[V]=0);let P=y.locToIndex(_,w,C),B=r(d[D*2],d[D*2+1],g[P*2],g[P*2+1]);p[k]=B.real,m[k]=B.imag}return[p,m,a]}}var Fv=_e((r,t)=>r+t),xet=Bm((r,t,e,o)=>({real:r+e,imag:t+o})),_Me=He(Jr,Fv,xet);function lz(r,t,e,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function uz(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=ot([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function Yr(r){return(t,e,o)=>{let n=y.getTypedArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function jw(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(dd(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=e||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=t(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function Dn(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(dd(i,r),i.dtype==="string"||e==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=e||i.dtype,c=t(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var _v=Yr(r=>Math.ceil(r)),qMe=Dn(Eo,_v);function cz(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?I.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var Ov=_e((r,t)=>r===t?1:0),JMe=He(Gn,Ov,null,"bool");var Pv=Yr(r=>Math.exp(r)),nBe=Dn($o,Pv,"float32");var Lv=Yr(r=>Math.expm1(r)),uBe=Dn(Ao,Lv);var zv=Yr(r=>Math.floor(r)),hBe=Dn(Do,zv);function pz(r,t,e,o,n,s,i,a,l){let u=ot([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function mz(r,t,e){let o=ot(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var Mv=_e((r,t)=>r>t?1:0),SBe=He(Wn,Mv,null,"bool");var Bv=_e((r,t)=>r>=t?1:0),EBe=He(Ro,Bv,null,"bool");var Vv=_e((r,t)=>r<t?1:0),FBe=He(qn,Vv,null,"bool");var Gv=_e((r,t)=>r<=t?1:0),zBe=He(Kn,Gv,null,"bool");function fz(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var Uv=Yr(r=>Math.log(r)),HBe=Dn(_o,Uv);function hz(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var Wv=_e((r,t)=>Math.max(r,t)),QBe=He(Oo,Wv);var Hv=_e((r,t)=>Math.min(r,t)),oVe=He(Po,Hv);var xd=_e((r,t)=>r*t),yet=Bm((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),lVe=He(Lo,xd,yet);function dz(r,t,e){let o=y.createScalarValue(-1,e);return xd([],t,o,r,e)}var qv=_e((r,t)=>r!==t?1:0),gVe=He(Xn,qv,null,"bool");function gz(r,t,e,o,n){let s=t.length,i=y.sizeFromShape(t),a=y.computeStrides(t),l=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function xz(r,t,e,o){let[n,s]=I.computeOutAndReduceShapes(r,o),i=oe(t,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}var Rn=I.RowPartitionType,Vm=class{constructor(t,e,o,n,s,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=I.getRowPartitionTypesHelper(c),this.raggedRank=I.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Rn.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Rn.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Rn.VALUE_ROWIDS:return Vm.getMaxWidthValueRowID(e);case Rn.ROW_SPLITS:return Vm.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Rn[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let i=1;i<e;++i){let a=t[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return bz(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;I.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=I.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],i=0;for(let a=0;a<n;++a,i+=e)s.push(i);for(let a=n;a<t;++a)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,i=[];for(let a=0;a<s-1;++a){let l=t[a+1]-t[a],u=Math.min(n,l),c=e[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==t[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,i=[];if(s===0)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<s;++c){let p=t[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=e.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${e.length}`);u=e[p]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case Rn.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case Rn.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${Rn[i]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case Rn.FIRST_DIM_SIZE:return t[0];case Rn.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Rn.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Rn[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=bz(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(t+1);let l=y.sizeFromShape(a),u=e.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let h=this.defaultValueShape;M(()=>{let d=R(c,h);c=an(d,a).dataSync()})}let p=0,m=0,f=0;for(let h=0;h<=u;++h){let d=h<u?e[h]:-1;if(d===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;yz(x,g,b)}if(h>=u){let g=o.length;d=Math.floor(g/l)}if(d>f)if(this.defaultValue.length===1)i.subarray(f*l,d*l).fill(this.defaultValue[0]),f=d;else for(;d>f;){let g=i.slice(f*l);yz(g,c,l),++f}d<0?(p=h+1,m=f):(p=h,m=f,f=m+1)}}};function yz(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function bz(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function wz(r,t,e,o,n,s,i,a,l,u){return new Vm(r,t,e,o,n,s,i,a,l,u).compute()}function Cz(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=y.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var Kv=Yr(r=>1/Math.sqrt(r)),$Ve=Dn(zo,Kv);function Iz(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return ot(e,t.dtype);let f=ot(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let d=[],g=0;for(let x=0;x<i;x++){let b=p[h*i+x];d.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${d} does not index into ${e}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[h*n+x]:f.values[g*n+x]=t.rank===0?m[0]:m[h*n+x]}return f}var Sz=Yr(r=>1/(1+Math.exp(-r))),PVe=jw(Mo,r=>1/(1+Math.exp(-r)));function vz(r,t,e,o,n){let s=xe.isSliceContinous(o,t,e),i=y.sizeFromShape(e),a=y.computeStrides(o);if(s){let p=xe.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?I.fromUint8ToStringArray(r):r,u=ot(o,n,l),c=ot(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,d)=>h+t[d]);c.set(u.get(...f),...m)}return n==="string"?I.fromStringArrayToUint8(c.values):c.values}function kz(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(I.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(I.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(I.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++h[x],m=m&&x>=f,f=x}let d=!0;for(let g=0;g<l;++g){let x=h[g]===0;u[g]=x,d=d&&!x,h[g]=Math.max(h[g],1),g>0&&(h[g]+=h[g-1])}if(d&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=h[l-1],x=y.getArrayFromDType(e,g*p),b=y.getArrayFromDType(n,g),w=new Array(l).fill(0);for(let C=0;C<a;++C){let k=r[C*p],E=w[k],A=(k===0?0:h[k-1])+E;w[k]++;for(let D=0;D<p;++D)x[A*p+D]=r[C*p+D];b[A]=o[C],c[C]=A}for(let C=0;C<l;++C)if(w[C]===0){let E=C===0?0:h[C-1];x[E*p+0]=C;for(let A=1;A<p;++A)x[E*p+A]=0;b[E]=i}return[x,[g,p],b,u,c]}}function Tz(r,t,e,o,n){let s=y.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(I.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(I.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(I.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(I.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(I.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let h=[];if(a>0){h[a-1]=1;for(let g=a-2;g>=0;--g)h[g]=h[g+1]*l[g+1]}let d=y.getArrayFromDType(e,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)d[g*a+b]=Math.trunc(x/h[b]),x%=h[b]}return[d,[i,a],l]}function Nz(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((w,C)=>w*C,1),h=y.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=0,g=1,x=0,b=n[d];for(;;){let w=0;if(g<a){if(w=n[g],b===w){++g;continue}if(b>=w)throw new Error(I.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(I.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&h.fill(i,x*u,b*u);for(let C=d;C<g;++C){let k=o[C];if(k<0||k>=l[0])throw new Error(I.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C,o[C],l[0]));for(let E=0;E<u;E++)h[b*u+E]+=r[k*u+E]}if(s)for(let C=0;C<u;C++)h[b*u+C]/=g-d;if(d=g,++g,x=b+1,b=w,g>a)break}return x<p&&h.fill(i,x*u,p*u),[h,m]}var Ez=Yr(r=>Math.sqrt(r)),XVe=jw(Bo,r=>Math.sqrt(r));var jv=_e((r,t)=>{let e=r-t;return e*e}),tGe=He(Vo,jv);function $z(r,t,e,o){let n=ot(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var Xv=class{constructor(t,e,o,n,s,i){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let d=o[n+a],g=0,x=b=>b.forEach(w=>d[g++]=w);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(t[m+b]),x(this.separator);if(p>0){x(t[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function Az(r,t,e,o,n,s,i,a){return new Xv(e,o,n,s,i,a).compute(r,t)}function bet(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function Dz(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;bet(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function Rz(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var Yv=_e((r,t)=>r-t),wet=Bm((r,t,e,o)=>({real:r-e,imag:t-o})),fGe=He(Go,Yv,wet);function Fz(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=ot(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var yd=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function _z(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));_z(r,t,m,f)}let n=r[t],s=e,i=o;for(y.swap(r,e,t),yd(r[o],n)>0&&y.swap(r,e,o);s<i;){for(y.swap(r,s,i),s++,i--;yd(r[s],n)<0;)s=s+1;for(;yd(r[i],n)>0;)i=i-1}yd(r[e],n)===0?y.swap(r,e,i):(i=i+1,y.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function Oz(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(e,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,w)=>h[w]={value:b,index:w}),o<h.length&&(_z(h,o),h=h.slice(0,o)),n&&h.sort(yd);let d=p*o,g=l.subarray(d,d+o),x=u.subarray(d,d+o);for(let b=0;b<o;b++)g[b]=h[b].value,x[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[ot(c,e,l),ot(c,"int32",u)]}function Pz(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i={},a=new Int32Array(e[n]),l=new Kt(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let d;if(c)d=r[h].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,h,b));d=g.join(",")}if(i[d]!==void 0)a[h]=i[d];else{let g=Object.keys(i).length;i[d]=g,a[h]=g,u.push(h)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new Kt(p,o);u.forEach((h,d)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,h,x),g,d,x)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}var{addImpl:Lz,castImpl:zz,ceilImpl:Mz,concatImpl:Bz,equalImpl:Vz,expImpl:Gz,expm1Impl:Uz,floorImpl:Wz,gatherNdImpl:Hz,gatherV2Impl:qz,greaterEqualImpl:Kz,greaterImpl:jz,lessEqualImpl:Xz,lessImpl:Yz,logImpl:Zz,maxImpl:Qz,maximumImpl:Jz,minimumImpl:tM,multiplyImpl:eM,negImpl:rM,notEqualImpl:oM,prodImpl:nM,rangeImpl:sM,rsqrtImpl:iM,scatterImpl:aM,simpleAbsImpl:lM,sliceImpl:uM,stridedSliceImpl:cM,stringNGramsImpl:pM,subImpl:mM,tileImpl:fM,topKImpl:hM,transposeImpl:dM,uniqueImpl:mUe}=Zv;var Cet=Ht({opType:pt.ABS,cpuKernelImpl:lM}),gM={kernelName:On,backendName:"webgpu",kernelFunc:Cet};var Iet=te({opType:It.ADD,cpuKernelImpl:Lz,supportsComplex:!0}),xM={kernelName:Jr,backendName:"webgpu",kernelFunc:Iet};var Xw=class{constructor(t){this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t[0],this.variableNames=t.map((e,o)=>`T${o}`),this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let t=[];this.variableNames.forEach(n=>{t.push(`let v${n} = get${n}ByOutputCoords(coords);`)});let e=this.variableNames.map(n=>`v${n}`).join(" + ");return`
      ${mt("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${t.join(`
        `)}
            setOutputAtIndex(flatIndex, ${e});
          }
        }
      }
    `}};function vet(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return je({inputs:{x:o[0]},backend:e});let n=o.map(a=>a.dtype).reduce((a,l)=>oe(a,l)),s=o.map(a=>a.shape),i=new Xw(s);return e.runWebGPUProgram(i,o,n)}var yM={kernelName:ks,backendName:"webgpu",kernelFunc:vet};var Gm=class{constructor(t,e,o){this.workGroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;let n=[e];this.op=o==="min"?"<":">";let[s,i]=I.computeOutAndReduceShapes(t,n);this.outputShape=s.length===0?[1]:s,this.dispatchLayout=dt(this.outputShape),y.sizeFromShape(i)<32||y.sizeFromShape(s)>1e3?(this.type="plain",this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize)):(this.type="shared",this.dispatch=ut(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=t,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let t=()=>this.inputShape.length===1?"uniforms.xShape":`uniforms.xShape.${En(this.inputShape.length-1)}`,e=()=>{let o="";if(this.outputShape.length===1)this.inputShape.length!==1&&(o+="outputCoords,");else for(let n=0;n<this.outputShape.length;n++)o+=`outputCoords.${En(n)},`;return o};return this.type==="shared"?`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${this.workGroupSize[0]}>;
      var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
    `}

      ${mt("index")} {
        let outputIndex = index / i32(workGroupSizeX);
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + i32(workGroupSizeX)) {
          let candidate = getX(${e()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), workGroupSizeX);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `:`
      ${mt("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${e()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${e()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `}};var Yw=class{constructor(t,e){this.variableNames=["A"],this.workGroupSize=[16,16,1];let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[e[n]];this.outputShape=o,this.dispatchLayout={x:[0],y:[1]},this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){return`
      const TILE_DIM = ${this.workGroupSize[0]};
      var<workgroup> tile : array<array<f32, ${this.workGroupSize[0]+1}>, ${this.workGroupSize[0]}>;
      ${Kl()}
      fn _start(@builtin(local_invocation_id) localId : vec3<u32>,
                @builtin(workgroup_id) workgroupId : vec3<u32>) {
        var x = i32(workgroupId.x) * TILE_DIM + i32(localId.x);
        var y = i32(workgroupId.y) * TILE_DIM + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = A[y * width + x];
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * TILE_DIM + i32(localId.x);
        y = i32(workgroupId.x) * TILE_DIM + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}};var Zw=class{constructor(t,e){this.variableNames=["A"],this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0;let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[e[n]];this.outputShape=o,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.newDim=e,this.shaderKey=`transpose_${e}`}getUserCode(){let t=Ve(this.outputShape.length),e=ket(this.newDim);return`
      ${mt("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let resRC = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${t}(${e}), uniforms.aShape)]);
          }
        }
      }
    `}};function ket(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=new Array(t);for(let o=0;o<r.length;o++)e[r[o]]=`resRC.${En(o)}`;return e.join()}function Zr(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];if(e.shouldExecuteOnCPU([n])){let p=i.tensorMap.get(n.dataId).values,m=dM(p,n.shape,n.dtype,s,l);return e.makeTensorInfo(l,n.dtype,m)}if(n.shape.length===2&&y.arraysEqual(s,[1,0])){let c=new Yw(n.shape,s);return i.runWebGPUProgram(c,[n],n.dtype)}let u=new Zw(n.shape,s);return i.runWebGPUProgram(u,[n],n.dtype)}var bM={kernelName:en,backendName:"webgpu",kernelFunc:Zr};function Tet(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Zr({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=new Gm(l.shape,i[0],"max"),p=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],m=e.runWebGPUProgram(c,[l],"int32",p);return u.forEach(f=>e.disposeData(f.dataId)),m}var wM={kernelName:Ts,backendName:"webgpu",kernelFunc:Tet};function Net(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Zr({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=new Gm(l.shape,i[0],"min"),p=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],m=e.runWebGPUProgram(c,[l],"int32",p);return u.forEach(f=>e.disposeData(f.dataId)),m}var CM={kernelName:Ns,backendName:"webgpu",kernelFunc:Net};var Eet=te({opType:It.ATAN2}),IM={kernelName:Pn,backendName:"webgpu",kernelFunc:Eet};var bd=class{constructor(t,e){this.variableNames=["x"],this.uniforms="stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workGroupSize=[128,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`pool2D_${e}`,this.poolType=e}getUserCode(){let t="resultValue = max(value, resultValue);";this.poolType==="avg"&&(t="resultValue = resultValue + value; count = count + 1.0;");let e="resultValue";return this.poolType==="avg"&&(e="resultValue / count"),`
      ${mt("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};
          var count = 0.0;

          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, coords[3]);
              ${t}
            }
          }

          setOutputAtIndex(index, ${e});
        }
      }
    `}};var Qw=class{constructor(t){this.variableNames=["x"],this.uniforms="stride : vec2<i32>,",this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.stride;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}};var Jw=class{constructor(t,e){this.workGroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[t.batchSize,t.inSize];let[o]=I.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=o.length===0?[1]:o,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=e,this.shaderKey=`reduce_${e}`}getUserCode(){let t="",e="0.0";this.reduceType==="min"||this.reduceType==="max"?(t=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType==="min"?"<":">"} bestValue)
           {  bestValue = candidate; }`,e="f32(x[offset])"):this.reduceType==="sum"||this.reduceType==="mean"?t=" bestValue = bestValue + candidate; ":this.reduceType==="prod"&&(t=" bestValue = bestValue * candidate; ",e="1.0");let o=this.reduceType==="mean"?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length===1?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${mt("index")} {
         let outputIndex = index / i32(workGroupSizeX);
         let offset = getOffset(outputIndex);
         var bestValue = ${e};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), workGroupSizeX);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + i32(workGroupSizeX)) {
           let candidate = f32(x[offset + k]);
           ${t}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), workGroupSizeX);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${t}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${o}
        }
       }
     `}};function Ai(r,t,e,o,n){let s=r.shape.length,i=[],a=y.parseAxisParam(t,r.shape),l=a,u=I.getAxesPermutation(l,s),c=r;u!=null&&(c=Zr({inputs:{x:r},attrs:{perm:u},backend:n}),l=I.getInnerMostAxes(l.length,s),i.push(c)),I.assertAxesAreInnerMostDims(o,l,s);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=p;e&&(f=I.expandShapeToKeepDim(p,a));let h;if((o==="max"||o==="prod")&&n.shouldExecuteOnCPU([c])){let d=n.tensorMap.get(c.dataId).values;switch(o){case"max":let g=Qz(d,y.sizeFromShape(m),f,r.dtype);h=n.makeTensorInfo(f,r.dtype,g);break;case"prod":let{outVals:x,outShape:b,outDtype:w}=nM(c.shape,c.dtype,d,l);h=n.makeTensorInfo(b,w,x);break;default:throw new Error(`${o} CPU implementation is not yet supported.`)}}else{let d=y.sizeFromShape(m),x=y.sizeFromShape(c.shape)/d,b={windowSize:d,inSize:d,batchSize:x,outSize:1},w=o==="mean"?"float32":aa(r.dtype),C=[{type:"int32",data:[d]}],k=new Jw(b,o),E=n.runWebGPUProgram(k,[c],w,C);i.push(E),h=Ct({inputs:{x:E},attrs:{shape:f},backend:n})}return i.forEach(d=>n.disposeData(d.dataId)),h}function wd(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o;return Ai(n,s,i,"max",e)}var SM={kernelName:Bs,backendName:"webgpu",kernelFunc:wd};function Qv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{keepDims:s,axis:i}=o;return Ai(n,i,s,"mean",e)}var vM={kernelName:Gs,backendName:"webgpu",kernelFunc:Qv};function tC(r,t,e,o){if(t.filterWidth===1&&t.filterHeight===1&&y.arraysEqual(t.inShape,t.outShape))return je({inputs:{x:r},backend:o});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&t.batchSize===1&&t.padInfo.type==="VALID"){let i=r.shape.length,a=Ct({inputs:{x:r},backend:o,attrs:{shape:[r.shape[i-3]*r.shape[i-2],r.shape[i-1]]}}),l;e==="avg"?l=Qv({inputs:{x:a},backend:o,attrs:{axis:0,keepDims:!1}}):(y.assert(e==="max",()=>`Invalid pool type ${e}`),l=wd({inputs:{x:a},backend:o,attrs:{reductionIndices:0,keepDims:!1}}));let u=Ct({inputs:{x:l},backend:o,attrs:{shape:t.outShape}});return o.disposeData(a.dataId),o.disposeData(l.dataId),u}let n,s=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return t.filterHeight===1&&t.filterWidth===1?n=new Qw(t):(e==="avg"?n=new bd(t,"avg"):(y.assert(e==="max",()=>`Invalid pool type ${e}`),n=new bd(t,"max")),s.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),o.runWebGPUProgram(n,[r],r.dtype,s)}function $et(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1,c=I.computePool2DInfo(n.shape,s,i,u,a,l);return tC(n,c,"avg",e)}var kM={kernelName:Es,backendName:"webgpu",kernelFunc:$et};function Aet(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return zm({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var TM={kernelName:$s,backendName:"webgpu",kernelFunc:Aet};var eC=class{constructor(t,e){this.variableNames=["source"],this.workPerThread=1,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.rank=e.length,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.start=t,this.uniforms=`start : ${Ve(t.length)}, `,this.shaderKey="slice"}getUserCode(){let t=Ve(this.rank),e=Det(this.rank),o;return this.start.length===1?o=this.outputShape.map((s,i)=>"sourceLoc = uniforms.start + coords;"):o=this.outputShape.map((s,i)=>`sourceLoc.${Jv[i]} = uniforms.start.${En(i)} + coords.${Jv[i]};`),`
      ${mt("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${t};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${e}));
        }
      }
    `}},Jv=["x","y","z","w","u","v"];function Det(r){if(r===1)return"sourceLoc";if(r<=6)return Jv.slice(0,r).map(t=>`sourceLoc.${t}`).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}function Ss(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=xe.parseSliceParams(n,s,i);if(xe.assertParamsValid(n,a,l),e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.tensorMap.get(n.dataId),m=uM(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}if(y.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);let u=new eC(a,l),c=[{type:"int32",data:a}];return e.runWebGPUProgram(u,[n],n.dtype,c)}var NM={kernelName:es,backendName:"webgpu",kernelFunc:Ss};var Ret=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let a=s.reduce((b,w)=>b*w),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=[],h=Ct({inputs:{x:n},backend:e,attrs:{shape:l}}),d=Zr({inputs:{x:h},backend:e,attrs:{perm:u}}),g=Ct({inputs:{x:d},backend:e,attrs:{shape:c}}),x=Ss({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(d),f.push(g),f.forEach(b=>e.disposeData(b.dataId)),x},EM={kernelName:As,backendName:"webgpu",kernelFunc:Ret};var t1=te({opType:It.NOT_EQUAL,dtype:"bool",cpuKernelImpl:oM}),$M={kernelName:Xn,backendName:"webgpu",kernelFunc:t1};function Aa(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.tensorMap.get(o.dataId);return je({inputs:{x:n.complexTensorInfos.real},backend:e})}var AM={kernelName:Yi,backendName:"webgpu",kernelFunc:Aa};function DM(r,t){let e=new An(r.shape,pt.TO_INT),o=t.runWebGPUProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function e1(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return je({inputs:{x:n},backend:e});let i=ee(n.shape),a=e1({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=Is({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeData(a.dataId),l}if(n.dtype==="complex64"){let i=Aa({inputs:{input:n},backend:e}),a=e1({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeData(i.dataId),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=je({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let i=e.tensorMap.get(n.dataId).values,[a,l,u]=zz(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}if(s==="int32")return DM(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=t1({inputs:{a:n,b:i},backend:e});return e.disposeData(i.dataId),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var RM={kernelName:No,backendName:"webgpu",kernelFunc:e1};var Fet=Ht({opType:pt.CEIL,cpuKernelImpl:Mz}),FM={kernelName:Eo,backendName:"webgpu",kernelFunc:Fet};var rC=class{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workGroupSize=[64,1,1],this.isVec4=!0,this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${mt("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue : vec4<f32>;
          for (var i = 0; i < 4; i = i + 1) {
            if (isnan(value[i])) {
              clampedValue[i] = value[i];
            } else {
              clampedValue[i] = clamp(value[i], uniforms.minVal, uniforms.maxVal);
            }
          }

          setOutputAtIndex(index, clampedValue);
        }
      }
    `}};var oC=class{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${mt("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}};function _et(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a,l=[{type:"float32",data:[s]},{type:"float32",data:[i]}];return y.sizeFromShape(n.shape)%4===0?a=new rC(n.shape):a=new oC(n.shape),e.runWebGPUProgram(a,[n],n.dtype,l)}var _M={kernelName:Ln,backendName:"webgpu",kernelFunc:_et};var nC=class{constructor(t){this.uniforms="",this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=I.computeOutShape(t,1),this.variableNames=t.map((e,o)=>`T${o}`),this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.offsetLength=t.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){let t=[];if(this.offsetLength>0){t.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let s=1;s<this.offsetLength;s++)t.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s-1})); }`);let o=this.offsetLength,n=this.offsetLength-1;t.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`)}else t.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${mt("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${t.join(`
        `)}
          }
        }
      }
    `}};function ic(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.tensorMap.get(o.dataId);return je({inputs:{x:n.complexTensorInfos.imag},backend:e})}var OM={kernelName:Ka,backendName:"webgpu",kernelFunc:ic};function Um(r,t,e){let o=r[0].dtype;if(o==="complex64"){let h=r.map(w=>Aa({inputs:{input:w},backend:e})),d=r.map(w=>ic({inputs:{input:w},backend:e})),g=Um(h,t,e),x=Um(d,t,e),b=Is({inputs:{real:g,imag:x},backend:e});return h.forEach(w=>e.disposeData(w.dataId)),d.forEach(w=>e.disposeData(w.dataId)),e.disposeData(g.dataId),e.disposeData(x.dataId),b}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let h=r.map(k=>{let E=y.sizeFromShape(k.shape.slice(t));return Ct({inputs:{x:k},backend:e,attrs:{shape:[-1,E]}})}),d=h.map(k=>({vals:e.readSync(k.dataId),shape:k.shape})),g=I.computeOutShape(h.map(k=>k.shape),1),x=h[0].shape[0]===1,b=Bz(d,g,o,x),w=I.computeOutShape(r.map(k=>k.shape),t),C=e.makeTensorInfo(w,o,b);return h.forEach(k=>e.disposeData(k.dataId)),C}let s=e.device.limits.maxStorageBuffersPerShaderStage-1;if(r.length>s){let h=[];for(let g=0;g<r.length;g+=s){let x=r.slice(g,g+s);h.push(Um(x,t,e))}let d=Um(h,t,e);for(let g of h)e.disposeData(g.dataId);return d}let{tensors2D:i,outShape:a}=Oet(r,t,e),l=i.map(h=>h.shape),u=new nC(l),c=[],p=new Array(l.length-1);if(p.length>0){p[0]=l[0][1],c.push({type:"int32",data:[p[0]]});for(let h=1;h<p.length;h++)p[h]=p[h-1]+l[h][1],c.push({type:"int32",data:[p[h]]})}let m=e.runWebGPUProgram(u,i,i[0].dtype,c);i.forEach(h=>e.disposeData(h.dataId));let f=Ct({inputs:{x:m},backend:e,attrs:{shape:a}});return e.disposeData(m.dataId),f}function Oet(r,t,e){let o=I.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>Ct({inputs:{x:s},backend:e,attrs:{shape:[y.sizeFromShape(s.shape.slice(0,t)),y.sizeFromShape(s.shape.slice(t))]}})),outShape:o}}function r1(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=I.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let a=t.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return je({inputs:{x:a[0]},backend:e});let l=a.map(u=>u.shape);return I.assertParamsConsistent(l,s),Um(a,s,e)}var PM={kernelName:Ds,backendName:"webgpu",kernelFunc:r1};function Pet(r,t,e,o,n=!1,s=null,i=!1,a=4,l=4,u=4){let c=_=>{switch(_){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${_} is not supported.`)}},p=_=>{switch(_){case 1:return"return W[row * uniforms.wShape[3] + colIn];";case 4:return"return W[row * uniforms.wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${_} is not supported.`)}},m=r?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,f=r?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,h=r?"uniforms.xShape[1]":"uniforms.xShape[2]",d=r?"uniforms.xShape[2]":"uniforms.xShape[3]",g=r?"row":"col",x=r?"col":"row",b=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
      let xCh = ${x} % inChannels;
      var resData = ${Fe(a)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${h} && xCol >= 0 && xCol < ${d}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${c(a)}
      }
      return resData;`,w=r?t&&o?`
      let col = colIn * ${a};
      ${b}`:`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${Fe(a)}(0.0);`:o&&e?`
      let col = colIn * ${a};
      ${b}`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${Fe(a)}(0.0);`,C=`${p(l)}`,k=Fe(u),E=r?Fe(a):Fe(l),A=r?Fe(l):Fe(a);return`
      ${Xr(s,i,u===4,4)}
      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${E} {
        ${r?w:C}
      }

      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${A} {
        ${r?C:w}
      }

      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${k}) {
        let col = colIn * ${u};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${f}
        ${$n(n,s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}var sC=class{constructor(t,e,o,n,s=!1,i=null,a=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.outShape,this.isChannelsLast=t.dataFormat==="channelsLast",this.isVec4=((t.inChannels%4===0||t.inChannels%3===0)&&this.isChannelsLast||t.outWidth%4===0&&!this.isChannelsLast)&&t.outChannels%4===0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workGroupSize=zw(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=Mw(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread),this.isVec4?(this.isChannelsLast&&t.inChannels%4!==0?(this.innerElementSize=3,this.variableTypes=["f32","vec4<f32>"]):(this.innerElementSize=4,this.variableTypes=["vec4<f32>","vec4<f32>"]),s&&(this.variableNames.push("bias"),this.variableTypes.push("vec4<f32>")),a&&(this.variableNames.push("preluActivationWeights"),this.variableTypes.push("vec4<f32>"))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights")),this.addBias=s,this.activation=i,this.hasPreluActivationWeights=a,this.tileAOuter=this.workGroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workGroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workGroupSize[0]*this.innerElementSize,this.workGroupSize[1]),this.fitAOuter=e%this.tileAOuter===0,this.fitBOuter=o%this.tileBOuter===0,this.fitInner=n%this.tileInner===0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}`}getUserCode(){let t=this.isVec4?oc(this.elementsPerThread,this.workGroupSize,!this.isChannelsLast,this.tileInner):nc(this.elementsPerThread,this.workGroupSize,!this.isChannelsLast,this.tileInner),e=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${Pet(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,e[0],e[1],e[2])}
    ${t}
  `}};function LM(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function Let({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=e.dataFormat==="channelsLast",u=!l,c=!1,p=l&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&e.padInfo.type==="VALID",m=[],f,h;if(p){let x=e.inHeight*e.inWidth*e.inChannels;f=Ct({inputs:{x:r},backend:o,attrs:{shape:[1,e.batchSize,x]}}),h=Ct({inputs:{x:t},backend:o,attrs:{shape:[1,x,e.outChannels]}})}else f=Ct({inputs:{x:r},backend:o,attrs:{shape:l?[e.batchSize,e.inHeight*e.inWidth,e.inChannels]:[e.batchSize,e.inChannels,e.inHeight*e.inWidth]}}),h=Ct({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});if(m.push(f),m.push(h),s!=null){let x=LM(s.shape,l);x!=null&&(s=Ct({inputs:{x:s},backend:o,attrs:{shape:x}}),m.push(s))}if(n!=null){let x=LM(n.shape,l);x!=null&&(n=Ct({inputs:{x:n},backend:o,attrs:{shape:x}}),m.push(n))}let d=zm({a:l?f:h,b:l?h:f,transposeA:u,transposeB:c,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),g=Ct({inputs:{x:d},backend:o,attrs:{shape:e.outShape}});m.push(d);for(let x of m)o.disposeData(x.dataId);return g}function iC({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=n!=null,u=s!=null,c=e.dataFormat==="channelsLast";if(c&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&e.padInfo.type==="VALID"||e.filterHeight===1&&e.filterWidth===1&&e.dilationHeight===1&&e.dilationWidth===1&&e.strideHeight===1&&e.strideWidth===1&&(e.padInfo.type==="SAME"||e.padInfo.type==="VALID"))return Let({x:r,filter:t,convInfo:e,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});let m=c?e.outHeight*e.outWidth:e.outChannels,f=c?e.outChannels:e.outHeight*e.outWidth,h=e.filterHeight*e.filterWidth*e.inChannels,d=[e.padInfo.top,e.padInfo.left],g=[{type:"int32",data:[e.filterHeight,e.filterWidth]},{type:"int32",data:[...d]},{type:"int32",data:[e.strideHeight,e.strideWidth]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]},{type:"int32",data:[m]},{type:"int32",data:[f]},{type:"int32",data:[h]}],x=new sC(e,m,f,h,l,a,u),b=[],w=[r,t];l&&(!c&&n.shape.length===1&&(n=Ct({inputs:{x:n},backend:o,attrs:{shape:[n.shape[0],1,1]}}),b.push(n)),w.push(n)),u&&(!c&&s.shape.length===1&&(s=Ct({inputs:{x:s},backend:o,attrs:{shape:[s.shape[0],1,1]}}),b.push(s)),w.push(s)),a==="leakyrelu"&&(g.push({type:"float32",data:[i]}),x.uniforms+=" alpha : f32,");let C=o.runWebGPUProgram(x,w,r.dtype,g);for(let k of b)o.disposeData(k.dataId);return C}function zet(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=e,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p);return iC({x:n,filter:s,convInfo:m,backend:o})}var zM={kernelName:Rs,backendName:"webgpu",kernelFunc:zet};function Met(r=4){let t=s=>{switch(s){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${s} is not supported.`)}},o=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${Fe(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${Fe(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${Fe(r)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Fe(r)} {
    let col = colIn * ${r};
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Fe(r)} {
    let col = colIn * ${r};
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${t(r)}
    }
    return ${Fe(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${Fe(r)}) {
    let col = colIn * ${r};
    if (row < uniforms.dimAOuter && (col + ${r-1}) < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`}var aC=class{constructor(t){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.inShape,y.assert(t.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),this.isVec4=t.inChannels%4===0&&t.outChannels%4===0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workGroupSize=zw(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=Mw(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread),this.isVec4&&(this.variableTypes=["vec4<f32>","f32"]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let t=this.isVec4?oc(this.elementsPerThread,this.workGroupSize):nc(this.elementsPerThread,this.workGroupSize);return`
    ${Met(this.isVec4?4:1)}
    ${t}
    `}};var lC=class{constructor(t){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.isChannelsLast=t.dataFormat==="channelsLast",this.shaderKey=`conv2DDerInput_${this.isChannelsLast}`}getUserCode(){let t=this.isChannelsLast?1:2,e=this.isChannelsLast?2:3,o=this.isChannelsLast?3:1;return`
    ${mt("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${t}]), coords[${e}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = dyR;

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = dyC;

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              if (${this.isChannelsLast}) {
                let xValue = getDy(batch, idyR, idyC, d2);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              } else {
                let xValue = getDy(batch, d2, idyR, idyC);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              }

            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}};function Bet(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(u),m=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=[{type:"int32",data:[m.filterHeight,m.filterWidth]},{type:"int32",data:[m.filterHeight-1-m.padInfo.top,m.filterWidth-1-m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize,m.outHeight,m.outWidth,m.outChannels]}],h;if(L().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE"))h=new lC(m);else{h=new aC(m);let d=m.inShape[1]*m.inShape[2],g=m.inShape[3],x=m.filterHeight*m.filterWidth*m.outChannels;f.push({type:"uint32",data:[d]},{type:"uint32",data:[g]},{type:"uint32",data:[x]})}return e.runWebGPUProgram(h,[n,s],"float32",f)}var MM={kernelName:Fs,backendName:"webgpu",kernelFunc:Bet};var Vet=Ht({opType:pt.COS}),BM={kernelName:zn,backendName:"webgpu",kernelFunc:Vet};var Get=Ht({opType:pt.COSH}),VM={kernelName:Mn,backendName:"webgpu",kernelFunc:Get};var uC=class{constructor(t,e,o,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workGroupSize=[64,1,1],this.size=!0;let[s]=e;this.outputShape=[s,o[0],o[1],t],this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.methodId=n==="bilinear"?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[t,e]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[o,n,s]=this.cropHeightBiggerThan1?[`(${t} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${t} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${t}`],[i,a,l]=this.cropWidthBiggerThan1?[`(${e} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${e} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${e}`];return`
    ${mt("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${i});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${a};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${l};
        if( in_x < 0.0 || in_x > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}};var Uet=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new uC(n.shape[3],s.shape,a,l),p=[{type:"float32",data:[u]}];return e.runWebGPUProgram(c,[n,s,i],"float32",p)},GM={kernelName:Ba,backendName:"webgpu",kernelFunc:Uet};var ac;(function(r){r.Prod="*",r.Sum="+"})(ac||(ac={}));var Cd=class{constructor(t,e,o,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0;let s=128;this.workGroupSize=[s,1,1],this.outputShape=e,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.exclusive=o,this.reverse=n,this.op=t,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let t=this.outputShape.length,e=this.op===ac.Prod?"1.0":"0.0",o=this.exclusive?e:`getX(${UM(t,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],s="",i="";return this.exclusive?(s=this.reverse?`end != ${n-1}`:"end != 0",i=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${n}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`
      ${mt("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${WM(t,"coords",this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${i};
           ${WM(t,"coords",this.op)} = idx;
           val ${this.op}= getX(${UM(t,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}};function UM(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function WM(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function cC(r,t,e,o,n,s){let i=t.shape.length,a=I.getAxesPermutation([o],i),l=t;a!=null&&(l=Zr({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=I.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=je({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new Cd(r,l.shape,!1,s),h=p,d=[{type:"float32",data:[m]}];p=e.runWebGPUProgram(f,[p],p.dtype,d),e.disposeData(h.dataId)}if(n){let m=new Cd(r,l.shape,n,s),f=p,h=[{type:"float32",data:[0]}];p=e.runWebGPUProgram(m,[p],p.dtype,h),e.disposeData(f.dataId)}if(a!=null){let m=I.getUndoAxesPermutation(a),f=Zr({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeData(p.dataId),e.disposeData(l.dataId),f}return p}function Wet(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return cC(ac.Prod,n,e,s,i,a)}var HM={kernelName:Ma,backendName:"webgpu",kernelFunc:Wet};function Het(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return cC(ac.Sum,n,e,s,i,a)}var qM={kernelName:_s,backendName:"webgpu",kernelFunc:Het};var pC=class{constructor(t,e){this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`depthToSpace_${e}`,this.dataFormat=e}getUserCode(){return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function qet(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],d=[{type:"int32",data:[s]}],g=new pC(h,i);return e.runWebGPUProgram(g,[n],n.dtype,d)}var KM={kernelName:Va,backendName:"webgpu",kernelFunc:qet};var mC=class{constructor(t,e,o,n=!1,s=null,i=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workGroupSize=[16,16,1],this.outputShape=t,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),n&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=s,this.hasPreluActivation=i,this.filterHeight=e,this.filterWidth=o,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let t=this.filterWidth*this.filterHeight,e=this.workGroupSize[0]*this.workGroupSize[1]*this.workGroupSize[2],o=this.workGroupSize[1]+this.filterHeight-1,n=this.workGroupSize[0]+this.filterWidth-1;return`
      ${Xr(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${Kl()}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(num_workgroups) NumWorkgroups: vec3<u32>) {
        localId = LocalId;
        globalId = GlobalId;
        let localIndex = i32(LocalIndex);
        numWorkgroups = NumWorkgroups;
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workGroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workGroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = localIndex;
        ${t<e?`if (wIndex < ${t})`:`for(; wIndex < ${t}; wIndex = wIndex + ${e})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${$n(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};var Wm=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workGroupSize=[4,4,4],this.isVec4=!0,this.outputShape=t.outShape,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[4,4,1]),y.assert(t.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}`}getUserCode(){let t=4+this.convInfo.filterWidth-1;return`
      ${Xr(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, row, col, channel);
        }
        return value;
      }
      ${Kl()}
      fn _start(@builtin(global_invocation_id) globalId: vec3<u32>) {
        let batch = i32(globalId.z) / uniforms.outShape[1];
        let r = i32(globalId.z) % uniforms.outShape[1];
        let c = i32(globalId.y) * 4;
        let d1 = i32(globalId.x) * 4;
        let xRCCorner = vec2<i32>(r, c) - uniforms.pad;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${t}>;
        var dotProd : array<vec4<f32>, 4>;
        dotProd[0] = vec4<f32>(0.0);
        dotProd[1] = vec4<f32>(0.0);
        dotProd[2] = vec4<f32>(0.0);
        dotProd[3] = vec4<f32>(0.0);

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          for (var i = 0; i < ${t}; i++)
          {
            xVals[i] = readX(batch, xR, xCCorner + i, d1);
          }
          for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
            let wValue = getW(wR, wC, d1, 0);
            dotProd[0] = dotProd[0] + xVals[0 + wC] * wValue;
            dotProd[1] = dotProd[1] + xVals[1 + wC] * wValue;
            dotProd[2] = dotProd[2] + xVals[2 + wC] * wValue;
            dotProd[3] = dotProd[3] + xVals[3 + wC] * wValue;
          }
        }

        for (var i = 0; i < 4; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${$n(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}};var Hm=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,`,this.workGroupSize=[256,1,1],this.outputShape=t.outShape,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.isChannelsLast=t.dataFormat==="channelsLast",e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let t=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${Xr(this.activation,this.hasPreluActivation,!1,4)}

      ${mt()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.stride - uniforms.pad;
        let d2 = coords[${this.isChannelsLast?3:1}];
        let channelMul = uniforms.wShape[3];
        let d1 = d2 / channelMul;
        let q = d2 % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;
        let inputRowEnd = inputRowStart + uniforms.filterHeight *
            uniforms.dilation[0];
        let inputColEnd = inputColStart + uniforms.filterWidth *
            uniforms.dilation[1];

        // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
        // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
        // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
        // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
        var value = 0.0;

        // Extract if checking out of for loop for performance.
        if (inputRowStart >= 0 && inputColStart >= 0 &&
          inputRowEnd < uniforms.inDims[0] &&
              inputColEnd < uniforms.inDims[1]) {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                let xVal = ${t};
                let wVal = getW(wR, wC, d1, q);
                value = value + xVal * wVal;
              }
            }
          } else {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              if (xR < 0 || xR >= uniforms.inDims[0]) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                if (xC < 0 || xC >= uniforms.inDims[1]) {
                  continue;
                }

                let xVal = ${t};
                let wVal = getW(wR, wC, d1, q);
                value = value + xVal * wVal;
              }
            }
          }
          ${$n(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};function Ket(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(l),m=u;m==null&&(m=[1,1]);let f=I.computeConv2DInfo(n.shape,s.shape,i,m,a,c,!0,p),h=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],d=f.dataFormat==="channelsLast",g;return!d&&f.inHeight>16&&f.inWidth>16&&f.strideHeight===1&&f.strideWidth===1&&f.dilationWidth===1&&f.dilationHeight===1&&f.inChannels===f.outChannels?g=new mC(f.outShape,f.filterHeight,f.filterWidth):d&&f.inHeight>4&&f.inWidth>4&&f.strideHeight===1&&f.strideWidth===1&&f.inChannels===f.outChannels&&f.dilationHeight===1&&f.dilationWidth===1&&f.inChannels%4===0?g=new Wm(f):(g=new Hm(f),h.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),e.runWebGPUProgram(g,[n,s],n.dtype,h)}var jM={kernelName:Os,backendName:"webgpu",kernelFunc:Ket};var o1=te({opType:It.MUL,cpuKernelImpl:eM,supportsComplex:!0}),XM={kernelName:Lo,backendName:"webgpu",kernelFunc:o1};function Id(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return Ai(n,s,i,"sum",e)}var YM={kernelName:Js,backendName:"webgpu",kernelFunc:Id};function jet(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let d=0;d<p;++d){for(let g of c[d]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[g]),w;I.isIdentityPermutation(x)?w=s[g]:(w=Zr({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),h.push(w));let C=w.shape.slice();for(let k=0;k<b.length;++k)C.splice(b[k],0,1);y.arraysEqual(w.shape,C)||(w=Ct({inputs:{x:w},backend:e,attrs:{shape:C}}),h.push(w)),m===null?m=w:(m=o1({inputs:{a:w,b:m},backend:e}),h.push(m))}d<p-1&&(u[d]>=0&&(m=Id({inputs:{x:m},backend:e,attrs:{axis:u[d]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let d of h)d!==m&&e.disposeData(d.dataId);return m}var ZM={kernelName:Ua,backendName:"webgpu",kernelFunc:jet};var Xet=Ht({opType:pt.ELU}),QM={kernelName:Vn,backendName:"webgpu",kernelFunc:Xet};var Yet=te({opType:It.EQUAL,dtype:"bool",cpuKernelImpl:Vz}),JM={kernelName:Gn,backendName:"webgpu",kernelFunc:Yet};var n1=Ht({opType:pt.EXP,cpuKernelImpl:Gz,dtype:"float32"}),tB={kernelName:$o,backendName:"webgpu",kernelFunc:n1};function fC(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),Ct({inputs:{x:s},backend:o,attrs:{shape:a}})}var eB={kernelName:Ps,backendName:"webgpu",kernelFunc:fC};var Zet=Ht({opType:pt.EXPM1,cpuKernelImpl:Uz}),rB={kernelName:Ao,backendName:"webgpu",kernelFunc:Zet};var hC=class{constructor(t){this.outputShape=[],this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}};var oB={kernelName:Ha,backendName:"webgpu",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new hC(e.shape);return o.runWebGPUProgram(n,[e],e.dtype)}};var Qet=Ht({opType:pt.FLOOR,cpuKernelImpl:Wz}),nB={kernelName:Do,backendName:"webgpu",kernelFunc:Qet};var Jet=te({opType:It.INT_DIV,dtype:"int32"}),sB={kernelName:Un,backendName:"webgpu",kernelFunc:Jet};var dC=class{constructor(t,e,o=!1){this.isFromPixels=!0,this.outputShape=[0],this.variableNames=[],this.workGroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[e,1,1]),this.importVideo=o,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let t=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`
      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};
      ${mt("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${t};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}};var iB={kernelName:tu,backendName:"webgpu",kernelFunc:trt},qm,s1=L().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"),gC=new Map;function trt(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o;if(n==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,l=typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&n instanceof OffscreenCanvas,u=typeof ImageBitmap<"u"&&n instanceof ImageBitmap,[c,p]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],m=[p,c,s],f=L().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&i,h=i||a;if(u||l||h){let b;if(f){let P=n;if(!gC.has(P)||gC.get(P).expired){let B={source:P};gC.set(P,e.device.importExternalTexture(B))}b={width:c,height:p,format:null,usage:null,texture:gC.get(P)}}else{if(h){let G=L().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(qm==null||G!==s1)&&(s1=G,qm=document.createElement("canvas").getContext("2d",{willReadFrequently:s1})),qm.canvas.width=c,qm.canvas.height=p,qm.drawImage(n,0,0,c,p),n=qm.canvas}let P=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,B="rgba8unorm",V=e.textureManager.acquireTexture(m[1],m[0],B,P);e.queue.copyExternalImageToTexture({source:n},{texture:V},[m[1],m[0]]),b={width:c,height:p,format:B,usage:P,texture:V}}let w=y.sizeFromShape(m),C=y.computeStrides(m),k=new dC(m,s,f),E=[{type:"uint32",data:[w]},{type:"uint32",data:[s]},{type:"uint32",data:[...C]}],A=e.makeTensorInfo([p,c],"int32"),D=e.tensorMap.get(A.dataId);D.resourceInfo=b;let _=e.runWebGPUProgram(k,[A],"int32",E);return e.disposeData(A.dataId),_}let d=n.data,g=d;if(s!=null&&s!==4){g=new Uint8Array(n.width*n.height*s);let b=d.length,w=0;for(let C=0;C<b;C++)C%4<s&&(g[w++]=d[C])}let x=e.makeTensorInfo(m,"int32",new Int32Array(g));return e.uploadToGPU(x.dataId),x}var xC=class{constructor(t,e,o,n,s){this.uniforms="varianceEpsilon : f32,",this.workGroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o),this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset")),s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let t="0.0";this.offsetShape!=null&&(t="getOffsetByOutputIndex(index)");let e="1.0";return this.scaleShape!=null&&(e="getScaleByOutputIndex(index)"),`
      ${mt("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${t};
          let scaleValue = ${e};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}};var aB={kernelName:Ls,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o,scale:n,offset:s,mean:i,variance:a}=r,{varianceEpsilon:l}=t,u=e,c=[o,i,a],p=null;s!=null&&(p=s.shape,c.push(s));let m=null;n!=null&&(m=n.shape,c.push(n));let f=new xC(o.shape,i.shape,a.shape,p,m),h=[{type:"float32",data:[l]}];return u.runWebGPUProgram(f,c,o.dtype,h)}};function ert(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,d=I.convertConv2DDataFormat(c),g=I.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,d);return iC({x:n,filter:s,convInfo:g,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:h,activation:f})}var lB={kernelName:na,backendName:"webgpu",kernelFunc:ert};function rrt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=c;h==null&&(h=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(l,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${h}'`);let d=I.computeConv2DInfo(n.shape,s.shape,l,h,u,p,!0),g=[n,s],x=i!=null,b=a!=null;x&&g.push(i),b&&g.push(a);let w=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inHeight,d.inWidth]}],C;return d.inHeight>4&&d.inWidth>4&&d.strideHeight===1&&d.strideWidth===1&&d.inChannels===d.outChannels&&d.dilationHeight===1&&d.dilationWidth===1&&d.inChannels%4===0?C=new Wm(d,x,m,b):(C=new Hm(d,x,m,b),w.push({type:"int32",data:[d.filterHeight]},{type:"int32",data:[d.filterWidth]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]})),m==="leakyrelu"&&(w.push({type:"float32",data:[f]}),C.uniforms+=" alpha : f32,"),e.runWebGPUProgram(C,g,"float32",w)}var uB={kernelName:sa,backendName:"webgpu",kernelFunc:rrt};var yC=class{constructor(t,e){this.variableNames=["A","indices"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`gathernd_${t}`,this.sliceDim=t,this.uniforms=`sliceDim : i32, strides : ${Ve(t)},`}getUserCode(){let t;return this.sliceDim>1?t="uniforms.strides[j]":t="uniforms.strides",`
      ${mt("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${t};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}};function ort(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=I.prepareAndValidate(o,n),m=Ct({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=Ct({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let b=e.readSync(n.dataId),w=e.bufferSync(o),C=Hz(b,w,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,C.values)}let h=new yC(i,[u,c]),d=[{type:"int32",data:[i]},{type:"int32",data:p}],g=e.runWebGPUProgram(h,[f,m],f.dtype,d),x=Ct({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeData(m.dataId),e.disposeData(f.dataId),e.disposeData(g.dataId),x}var cB={kernelName:qa,backendName:"webgpu",kernelFunc:ort};var bC=class{constructor(t,e){this.variableNames=["A","indices"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t.slice(),this.aShape=t,this.outputShape=e,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="gather"}getUserCode(){let t=nrt(this.aShape);return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${t}));
        }
      }
    `}};function nrt(r){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],e=[];for(let o=0;o<r.length;o++)o===2?e.push("indexZ"):e.push(`${t[o]}`);return e.join()}function i1(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0],u=I.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=Ct({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=Ct({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])){let w=e.tensorMap.get(f.dataId).values,C=ot(f.shape,f.dtype,w),E=e.tensorMap.get(m.dataId).values,A=ot(m.shape,m.dtype,E),D=qz(A,C,h);return p.forEach(_=>e.disposeData(_.dataId)),e.makeTensorInfo(u.outputShape,D.dtype,D.values)}let d=new bC(m.shape,h),g=e.runWebGPUProgram(d,[m,f],m.dtype);p.push(g);let x=Ct({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeData(b.dataId)),x}var pB={kernelName:zs,backendName:"webgpu",kernelFunc:i1};var srt=te({opType:It.GREATER,cpuKernelImpl:jz,dtype:"bool"}),mB={kernelName:Wn,backendName:"webgpu",kernelFunc:srt};var irt=te({opType:It.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:Kz}),fB={kernelName:Ro,backendName:"webgpu",kernelFunc:irt};var art=Ht({opType:pt.IS_NAN,dtype:"bool"}),hB={kernelName:Hn,backendName:"webgpu",kernelFunc:art};function lrt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=[{type:"float32",data:[s]}],a=new An(n.shape,pt.LEAKYRELU);return a.uniforms="alpha : f32,",e.runWebGPUProgram(a,[n],"float32",i)}var dB={kernelName:Ms,backendName:"webgpu",kernelFunc:lrt};var urt=te({opType:It.LESS,dtype:"bool",cpuKernelImpl:Yz}),gB={kernelName:qn,backendName:"webgpu",kernelFunc:urt};var crt=te({opType:It.LESS_EQUAL,dtype:"bool",cpuKernelImpl:Xz}),xB={kernelName:Kn,backendName:"webgpu",kernelFunc:crt};var prt=Ht({opType:pt.LOG,cpuKernelImpl:Zz}),yB={kernelName:_o,backendName:"webgpu",kernelFunc:prt};var mrt=te({opType:It.LOGICAL_AND,dtype:"bool"}),bB={kernelName:Ki,backendName:"webgpu",kernelFunc:mrt};var frt=Ht({opType:pt.LOGICAL_NOT}),wB={kernelName:ji,backendName:"webgpu",kernelFunc:frt};var hrt=te({opType:It.MAX,cpuKernelImpl:Jz}),CB={kernelName:Oo,backendName:"webgpu",kernelFunc:hrt};function drt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1,c=I.computePool2DInfo(n.shape,s,i,u,a,l);return tC(n,c,"max",e)}var IB={kernelName:Vs,backendName:"webgpu",kernelFunc:drt};function grt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return Ai(n,s,i,"min",e)}var SB={kernelName:Us,backendName:"webgpu",kernelFunc:grt};var xrt=te({opType:It.MIN,cpuKernelImpl:tM}),vB={kernelName:Po,backendName:"webgpu",kernelFunc:xrt};var wC=class{constructor(t,e,o){this.uniforms="",this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((n,s)=>n[0]+t[s]+n[1]),this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.xShape=t,e.map((n,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.offset=o==="reflect"?0:1,this.shaderKey=`mirrorPad_${o}`}getUserCode(){let t=this.xShape.length,e=this.xShape.map((u,c)=>`uniforms.pad${c}[0]`).join(","),o=this.xShape.map((u,c)=>`uniforms.pad${c}[0] + uniforms.xShape${t>1?`[${c}]`:""}`).join(","),n=t===1?"start":"start[i]",s=t===1?"end":"end[i]",i=t===1?"outC":"outC[i]",a=Ve(t),l=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let start = ${a}(${e});
          let end = ${a}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${t}; i = i + 1) {
            if (${i} < ${n}) {
              ${i} = ${n} * 2 - ${i} - ${this.offset};
            } else if(${i} >= ${s}) {
              ${i} = (${s} - 1) * 2 - ${i} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${l}));
        }
      }
    `}};var kB={kernelName:Ws,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{paddings:n,mode:s}=t,i=e,a=n.map(c=>({type:"int32",data:[c[0],c[1]]})),l=new wC(o.shape,n,s);return i.runWebGPUProgram(l,[o],o.dtype,a)}};function yrt(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.tensorMap.get(o.dataId),[i,a]=rM(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n=new An(o.shape,pt.NEG);return e.runWebGPUProgram(n,[o],o.dtype)}var TB={kernelName:jn,backendName:"webgpu",kernelFunc:yrt};function brt(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=er.nonMaxSuppressionV3Impl(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var NB={kernelName:Ya,backendName:"webgpu",kernelFunc:brt};function wrt(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,d=u,{selectedIndices:g,selectedScores:x}=er.nonMaxSuppressionV5Impl(c,p,m,f,h,d);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var EB={kernelName:Za,backendName:"webgpu",kernelFunc:wrt};function Sd(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=Aa({inputs:{input:o},backend:e}),s=Sd({inputs:{x:n},backend:e}),i=ic({inputs:{input:o},backend:e}),a=Sd({inputs:{x:i},backend:e}),l=Is({inputs:{real:s,imag:a},backend:e});return e.disposeData(n.dataId),e.disposeData(s.dataId),e.disposeData(i.dataId),e.disposeData(a.dataId),l}else return Qo({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var $B={kernelName:ni,backendName:"webgpu",kernelFunc:Sd};function AB(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Aa({inputs:{input:o},backend:e}),s=AB({inputs:{x:n},backend:e}),i=ic({inputs:{input:o},backend:e}),a=Sd({inputs:{x:i},backend:e}),l=Is({inputs:{real:s,imag:a},backend:e});return e.disposeData(n.dataId),e.disposeData(s.dataId),e.disposeData(i.dataId),e.disposeData(a.dataId),l}else return Qo({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var DB={kernelName:Hs,backendName:"webgpu",kernelFunc:AB};function Crt(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return fC({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=fC({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=r1({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeData(c.dataId)),u}var RB={kernelName:qs,backendName:"webgpu",kernelFunc:Crt};var CC=class{constructor(t,e){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((o,n)=>o[0]+t[n]+o[1]),this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),e.map((o,n)=>{this.uniforms+=` pad${n} : vec2<i32>,`}),this.xShape=t,this.shaderKey="pad"}getUserCode(){let t=this.xShape.length,e=Ve(t),o=this.xShape.map((p,m)=>`uniforms.pad${m}[0]`).join(","),n=this.xShape.map((p,m)=>`uniforms.pad${m}[0] + uniforms.xShape${t>1?`[${m}]`:""}`).join(","),s=t>1?`${e}(${o})`:`${o}`,i=t>1?`${e}(${n})`:`${n}`,a=t>1?"any(outC < start)":"outC < start",l=t>1?"any(outC >= end)":"outC >= end",u=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let start = ${s};
          let end = ${i};
          let outC = getCoordsFromIndex(index);

          if (${a} || ${l}) {
            setOutputAtIndex(index, uniforms.constantValue);
          } else {
            let coords = outC - start;
            setOutputAtIndex(index, getX(${u}));
          }
        }
      }
    `}};var a1=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(s.every(u=>y.arraysEqual(u,[0,0])))return je({inputs:{x:n},backend:e});if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Qo({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=[{type:"float32",data:[i]}];s.map(u=>a.push({type:"int32",data:[u[0],u[1]]}));let l=new CC(n.shape,s);return e.runWebGPUProgram(l,[n],n.dtype,a)},FB={kernelName:Ks,backendName:"webgpu",kernelFunc:a1};var Irt=te({opType:It.POW}),_B={kernelName:Yn,backendName:"webgpu",kernelFunc:Irt};function Srt(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=new sc(It.PRELU,o.shape,n.shape);return e.runWebGPUProgram(s,[o,n],"float32")}var OB={kernelName:js,backendName:"webgpu",kernelFunc:Srt};function vrt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return Ai(n,s,i,"prod",e)}var PB={kernelName:Zn,backendName:"webgpu",kernelFunc:vrt};var krt=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=sM(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},LB={kernelName:Ja,backendName:"webgpu",kernelFunc:krt};var l1=te({opType:It.DIV}),zB={kernelName:Bn,backendName:"webgpu",kernelFunc:l1};var Trt=Ht({opType:pt.RECIPROCAL}),MB={kernelName:Qn,backendName:"webgpu",kernelFunc:Trt};var Nrt=Ht({opType:pt.RELU}),BB={kernelName:Jn,backendName:"webgpu",kernelFunc:Nrt};var Ert=Ht({opType:pt.RELU6}),VB={kernelName:ts,backendName:"webgpu",kernelFunc:Ert};var IC=class{constructor(t,e,o){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,o,t[3]],this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${mt("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function $rt(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,size:i,halfPixelCenters:a}=o,[l,u]=i,c=s&&l>1?1:0,p=s&&u>1?1:0,f=[{type:"float32",data:[c,p]},{type:"float32",data:[a?.5:0]}],h=new IC(n.shape,l,u);return e.runWebGPUProgram(h,[n],"float32",f)}var GB={kernelName:Zs,backendName:"webgpu",kernelFunc:$rt};var SC=class{constructor(t,e,o,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,o,t[3]],this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let t;return this.halfPixelCenters?t="max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":t="vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${mt("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${t};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function Art(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=s&&l>1?1:0,p=s&&u>1?1:0,f=[{type:"float32",data:[c,p]},{type:"float32",data:[s?.5:0]}],h=new SC(n.shape,l,u,i);return e.runWebGPUProgram(h,[n],n.dtype,f)}var UB={kernelName:Ys,backendName:"webgpu",kernelFunc:Art};var vC=class{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=t,typeof e=="number"?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${mt("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}};var WB={kernelName:ul,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new vC(o.shape,s),[u,c]=I.getImageCenter(i,o.shape[1],o.shape[2]),p=[{type:"float32",data:[u]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(n)]},{type:"float32",data:[Math.cos(n)]}];return typeof s=="number"?p.push({type:"float32",data:[Number.parseFloat(s.toFixed(2))]}):p.push({type:"float32",data:s}),a.runWebGPUProgram(l,[o],o.dtype,p)}};var Drt=Ht({opType:pt.RSQRT,cpuKernelImpl:iM}),HB={kernelName:zo,backendName:"webgpu",kernelFunc:Drt};var Xl=class{constructor(t,e,o,n,s,i,a,l=!0){this.variableNames=["updates","indices"],this.workGroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=a,this.sumDupeIndices=l,this.dispatchLayout=dt(t),this.dispatch=ut(this.dispatchLayout,t,this.workGroupSize),this.sliceDimGreaterThanOne=e>1,this.shaderKey=`scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${a}_${l}`;let u=Ve(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, size: i32,`,this.updatesRank=n,this.indicesRank=o}getUserCode(){let t="";this.indicesRank===1?t="coords[0]":this.indicesRank===2&&(t="coords[0], j");let e=`getIndices(${t})`,o=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",s="";this.dispatchLayout.x.length===1?(n="flattenedIndex",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):this.dispatchLayout.x.length===2&&(n="vec2<i32>(flattenedIndex, coords[1])",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let a=`getUpdates(${Array.from({length:this.updatesRank},(c,p)=>`coords[${p}]`).join(", ")})`,l=(c,p)=>{let m=`atomicAdd(${c}, bitcast<i32>(${p}))`;this.type==="float32"&&(m=`
          {
            var oldBits = 0;
            var newBits = bitcast<i32>(${p});
            loop {
              let info = atomicCompareExchangeWeak(${c}, oldBits, newBits);
              if (info.exchanged) {
                break;
              }
              oldBits = info.old_value;
              let oldValue = bitcast<f32>(oldBits);
              let newValue = oldValue + (${p});
              newBits = bitcast<i32>(newValue);
            }
          }
        `);let f=`atomicStore(${c}, bitcast<i32>(${p}));`;return this.sumDupeIndices?m:f};return`
    ${s}

      ${mt("index")} {
        if (index < uniforms.size) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${e}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${Lm(this.type,!1)}(${a});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${l("&result[flatIndex]","updateValue")};
        }
      }`}};function Rrt(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=Ct({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=Ct({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),d=h.dtype,g=Qo({backend:e,attrs:{shape:m,value:0,dtype:d}}),x=y.sizeFromShape(h.shape),b=[{type:"int32",data:[a]},{type:"int32",data:c},{type:"int32",data:[x]}],w=new Xl(h.shape,a,f.shape.length,h.shape.length,c,m,d),C=e.runWebGPUProgram(w,[h,f],d,b,g),k=Ct({inputs:{x:C},backend:e,attrs:{shape:i}});return e.disposeData(f.dataId),e.disposeData(h.dataId),e.disposeData(C.dataId),k}var qB={kernelName:el,backendName:"webgpu",kernelFunc:Rrt};var kC=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.cRank=t,this.rank=o,this.shaderKey="select"}getUserCode(){let t,e;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(this.rank===1)e="resRC",t="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let a=0;a<this.outputShape.length;a++)i.push(`${n[a]}`),a<this.cRank&&s.push(`${n[a]}`);t=s.join(),e=i.join()}return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${t});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${e}));
          } else {
            setOutputAtIndex(index, getB(${e}));
          }
        }
      }
    `}};function Frt(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new kC(o.shape.length,n.shape,n.shape.length);return e.runWebGPUProgram(i,[o,n,s],oe(n.dtype,s.dtype))}var KB={kernelName:Qs,backendName:"webgpu",kernelFunc:Frt};var _rt=Ht({opType:pt.SIGMOID}),jB={kernelName:Mo,backendName:"webgpu",kernelFunc:_rt};var Ort=Ht({opType:pt.SIN}),XB={kernelName:rs,backendName:"webgpu",kernelFunc:Ort};var Prt=Ht({opType:pt.SINH}),YB={kernelName:os,backendName:"webgpu",kernelFunc:Prt};var u1=te({opType:It.SUB,cpuKernelImpl:mM,supportsComplex:!0}),ZB={kernelName:Go,backendName:"webgpu",kernelFunc:u1};function Lrt(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=wd({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=I.expandShapeToKeepDim(a.shape,i),u=Ct({inputs:{x:a},backend:e,attrs:{shape:l}}),c=u1({inputs:{a:n,b:u},backend:e}),p=n1({inputs:{x:c},backend:e}),m=Id({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=Ct({inputs:{x:m},backend:e,attrs:{shape:l}}),h=l1({inputs:{a:p,b:f},backend:e});return e.disposeData(a.dataId),e.disposeData(u.dataId),e.disposeData(c.dataId),e.disposeData(p.dataId),e.disposeData(m.dataId),e.disposeData(f.dataId),h}var QB={kernelName:ri,backendName:"webgpu",kernelFunc:Lrt};var zrt=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=a1({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=I.getReshaped(c.shape,s,a,!1),m=I.getPermuted(p.length,s.length,!1),f=I.getReshapedPermuted(c.shape,s,a,!1),h=Ct({inputs:{x:c},backend:e,attrs:{shape:p}}),d=Zr({inputs:{x:h},backend:e,attrs:{perm:m}}),g=Ct({inputs:{x:d},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(d),u.forEach(x=>e.disposeData(x.dataId)),g},JB={kernelName:ti,backendName:"webgpu",kernelFunc:zrt};var TC=class{constructor(t,e){this.variableNames=["A"],this.workGroupSize=[64,1,1],this.size=!0;let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[n]*e[n];this.outputShape=o,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let t=Mrt(this.rank,"uniforms.");return`
      ${mt("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${t}));
        }
      }
    `}};function Mrt(r,t=""){if(r>=5)throw Error(`Tile for rank ${r} is not yet supported`);if(r===1)return`(resRC % ${t}aShape)`;let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r;n++)o.push(`(${e[n]} % ${t}aShape[${n}])`);return o.join()}function c1(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(e.shouldExecuteOnCPU([n])||n.dtype==="string"||n.shape.length>=5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=ot(n.shape,n.dtype,u),p=fM(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new TC(n.shape,s);return e.runWebGPUProgram(i,[n],n.dtype)}var tV={kernelName:tn,backendName:"webgpu",kernelFunc:c1};function Brt(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let D=e.bufferSync(n),_=e.bufferSync(s),P=y.decodeString(e.readSync(i.dataId)[0]),B=aM(D,_,a,m,c,u,l,p,P,f);return e.makeTensorInfo(a,B.dtype,B.values)}let h=[m/c,c],d=Ct({inputs:{x:n},backend:e,attrs:{shape:[u,l]}}),g=s.shape.length?Ct({inputs:{x:s},backend:e,attrs:{shape:[u,c]}}):je({inputs:{x:s},backend:e}),x=g.dtype,b=e.makeTensorInfo([],x,y.makeZerosTypedArray(1,x)),w=Ct({inputs:{x:i},backend:e,attrs:{shape:Array(h.length).fill(1)}}),C=c1({inputs:{x:w},backend:e,attrs:{reps:h}}),k=y.sizeFromShape([u,c]),E=[{type:"int32",data:[l]},{type:"int32",data:p},{type:"int32",data:[k]}];switch(u){case 0:break;case 1:{let D=new Xl([u,c],l,d.shape.length,g.shape.length,p,h,x,f);e.runWebGPUProgram(D,[g,d],x,E,C)}break;default:{let D=new Xl([u,c],l,d.shape.length,b.shape.length,p,h,x,f);e.runWebGPUProgram(D,[b,d],x,E,C)}{let D=new Xl([u,c],l,d.shape.length,g.shape.length,p,h,x);e.runWebGPUProgram(D,[g,d],x,E,C)}}let A=Ct({inputs:{x:C},backend:e,attrs:{shape:a}});return e.disposeData(d.dataId),e.disposeData(g.dataId),e.disposeData(w.dataId),e.disposeData(b.dataId),e.disposeData(C.dataId),A}var eV={kernelName:rl,backendName:"webgpu",kernelFunc:Brt};function Vrt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=Ss({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var rV={kernelName:ei,backendName:"webgpu",kernelFunc:Vrt};var Grt=Ht({opType:pt.SQRT}),oV={kernelName:Bo,backendName:"webgpu",kernelFunc:Grt};var nV={kernelName:ol,backendName:"webgpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t,n=new An(e.shape,pt.SQUARE);return o.runWebGPUProgram(n,[e],e.dtype)}};var Urt=te({opType:It.SQUARED_DIFFERENCE}),sV={kernelName:Vo,backendName:"webgpu",kernelFunc:Urt};var NC=class{constructor(t){this.variableNames=["x"],this.workPerThread=1,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]);let e=Ve(this.outputShape.length);this.uniforms=`begin : ${e},  strides : ${e}, `,this.shaderKey="stridedSlice"}getUserCode(){let t=this.outputShape.length,e="";if(t===1)e="coords * uniforms.strides + uniforms.begin";else{let n=0;e=this.outputShape.map((s,i)=>(n++,this.outputShape.length===1?`coords * uniforms.strides[${i}] + uniforms.begin[${i}]`:`coords[${n-1}] * uniforms.strides[${i}] + uniforms.begin[${i}]`)).join(",")}return`
       ${mt("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${e}));
         }
       }
     `}};function Wrt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:d,sliceDim0:g,isSimpleSlice:x,begin:b,end:w,strides:C}=xe.sliceInfo(n.shape,s,i,a,l,u,c,p,m),k;if(d)k=Ct({inputs:{x:n},backend:e,attrs:{shape:h}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let E=xe.computeOutShape(b,w,C),A=Ss({inputs:{x:n},backend:e,attrs:{begin:b,size:E}});k=Ct({inputs:{x:A},backend:e,attrs:{shape:h}}),e.disposeData(A.dataId)}else if(e.shouldExecuteOnCPU([n])){let A=e.readSync(n.dataId),D=ot(n.shape,n.dtype,A),_=cM(f,D,C,b);k=e.makeTensorInfo(h,n.dtype,_.values)}else{let A=new NC(f),D=[{type:"int32",data:b},{type:"int32",data:C}],_=e.runWebGPUProgram(A,[n],n.dtype,D);k=Ct({inputs:{x:_},backend:e,attrs:{shape:h}}),e.disposeData(_.dataId)}return k}var iV={kernelName:nl,backendName:"webgpu",kernelFunc:Wrt};function Hrt(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,d]=pM(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",d)]}var aV={kernelName:sl,backendName:"webgpu",kernelFunc:Hrt};var qrt=Ht({opType:pt.TANH}),lV={kernelName:ns,backendName:"webgpu",kernelFunc:qrt};var EC=class{constructor(t){this.variableNames=["x","indices"],this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${mt("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}},$C=class{constructor(t){this.variableNames=["x","indices"],this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${mt("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}};function Km(r,t){t!==null&&r.disposeData(t.dataId)}function uV(r){let t=1;for(;t<r;)t*=2;return t}function Krt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=n.shape,l=a[a.length-1];if(e.shouldExecuteOnCPU([n])){let k=e.readSync(n.dataId),[E,A]=hM(k,a,n.dtype,s,i);return[e.makeTensorInfo(E.shape,E.dtype,E.values),e.makeTensorInfo(A.shape,A.dtype,A.values)]}if(s===0)return a[a.length-1]=0,[e.makeTensorInfo(a,n.dtype,[]),e.makeTensorInfo(a,"int32",[])];if(l===1)return[n,Qo({attrs:{shape:a,dtype:"int32",value:0},backend:e})];let c=y.sizeFromShape(a)/l,p=Ct({inputs:{x:n},attrs:{shape:[c,l]},backend:e}),m=uV(s),f=uV(l),h=null,d=()=>h===null?[p,p]:[p,h],g=(k,E,A)=>{let D=d(),_=new EC(A),B=[{type:"int32",data:[l]},{type:"int32",data:[h===null?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[k]},{type:"int32",data:[E]}],V=h;h=e.runWebGPUProgram(_,D,"int32",B),Km(e,V)};for(let k=1;k<m;k*=2){let E=k*2;for(let A=k;A>=1;A/=2)g(E,A,[c,f])}for(let k=f;k>m;k/=2){let E=d(),A=new $C([c,k/2]),_=[{type:"int32",data:[l]},{type:"int32",data:[h===null?1:0]},{type:"int32",data:[m]}],P=h;h=e.runWebGPUProgram(A,E,"int32",_),Km(e,P);let B=m/2,V=B*2;for(let G=B;G>=1;G/=2)g(V,G,h.shape)}let x=h;h=Ss({inputs:{x:h},backend:e,attrs:{begin:0,size:[c,s]}}),Km(e,x);let b=i1({inputs:{x:p,indices:h},backend:e,attrs:{axis:1,batchDims:1}});Km(e,p);let w=a.slice(0,-1);w.push(s),x=h,h=Ct({inputs:{x:h},attrs:{shape:w},backend:e}),Km(e,x);let C=b;return b=Ct({inputs:{x:b},attrs:{shape:w},backend:e}),Km(e,C),[b,h]}var cV={kernelName:il,backendName:"webgpu",kernelFunc:Krt};var AC=class{constructor(t){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=dt(this.outputShape),this.dispatch=ut(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${mt("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}};function jrt(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,d]=u??[p,m],g=[c,h,d,f],x=new AC(g),b=i==="nearest"?1:2,w;switch(a){case"constant":w=1;break;case"reflect":w=2;break;case"wrap":w=3;break;case"nearest":w=4;break;default:w=1;break}let C=[{type:"int32",data:[b]},{type:"int32",data:[w]},{type:"float32",data:[l]}];return e.runWebGPUProgram(x,[n,s],"float32",C)}var pV={kernelName:al,backendName:"webgpu",kernelFunc:jrt};function Xrt(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let d=0;d<a;d++)d!==s&&(u[c++]=i.shape[d]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let d=0;d<h.length;d++){m[s]=d;let g=Ss({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),x=Ct({inputs:{x:g},backend:e,attrs:{shape:u}});h[d]=x,p.push(g)}return p.forEach(d=>e.disposeData(d.dataId)),h}var mV={kernelName:oi,backendName:"webgpu",kernelFunc:Xrt};var Yrt=[oz,gM,xM,yM,wM,CM,IM,kM,TM,EM,RM,FM,_M,sz,PM,zM,MM,BM,VM,GM,HM,qM,KM,jM,ZM,QM,JM,tB,eB,rB,ez,oB,iB,nB,sB,aB,lB,uB,cB,pB,mB,fB,nz,OM,hB,dB,gB,xB,yB,bB,wB,SM,CB,IB,vM,SB,vB,kB,XM,TB,NB,EB,$M,DB,RB,FB,_B,OB,PB,LB,AM,zB,MB,BB,VB,rz,GB,UB,WB,HB,qB,KB,jB,XB,YB,NM,iV,aV,QB,JB,eV,rV,oV,nV,sV,ZB,YM,lV,tV,cV,pV,bM,mV,$B];for(let r of Yrt)jc(r);var co=document.getElementById("video"),Di=document.getElementById("canvas"),DC=document.createElement("canvas"),fV=DC.getContext("2d"),Zrt=document.getElementById("markregions"),Qrt=document.getElementById("blurnude"),Jrt=document.getElementById("blursexy"),br=Di.getContext("2d"),cr={},FC,RC=r=>console.log(r),Qr={modelPath:"../model/model.json",videoPath:"../samples/video.webm",minScore:.3,maxResults:50,iouThreshold:.5,outputNodes:["output1","output2","output3"],blurRadius:25,resolution:[1280,720]},tot=["exposed anus","exposed armpits","belly","exposed belly","buttocks","exposed buttocks","female face","male face","feet","exposed feet","breast","exposed breast","vagina","exposed vagina","male breast","exposed male breast"],vd={person:[6,7],sexy:[1,2,3,4,8,9,10,15],nude:[0,5,11,12,13]};async function eot(r,t,e,o){let n=await r.array(),s=await t.data(),i=await e.data(),a=await wi.nonMaxSuppressionAsync(n[0],s,Qr.maxResults,Qr.iouThreshold,Qr.minScore),l=await a.data();St(a);let u=[];for(let p in l){let m=parseInt(p);u.push({score:s[p],id:i[m],class:tot[i[m]],box:[Math.trunc(n[0][m][0]),Math.trunc(n[0][m][1]),Math.trunc(n[0][m][3]-n[0][m][1]),Math.trunc(n[0][m][2]-n[0][m][0])]})}return{input:{width:o.shape[2],height:o.shape[1]},person:u.filter(p=>vd.person.includes(p.id)).length>0,sexy:u.filter(p=>vd.sexy.includes(p.id)).length>0,nude:u.filter(p=>vd.nude.includes(p.id)).length>0,parts:u}}function hV({left:r=0,top:t=0,width:e=0,height:o=0}){e===0||o===0||Di.width===0||Di.height===0||(DC.width=e/Qr.blurRadius+1,DC.height=o/Qr.blurRadius+1,fV.imageSmoothingEnabled=!0,fV.drawImage(Di,r,t,e,o,0,0,e/Qr.blurRadius,o/Qr.blurRadius),br.drawImage(DC,r,t,e,o))}function rot({x:r=0,y:t=0,width:e=0,height:o=0,radius:n=8,lineWidth:s=2,color:i="white",title:a="",font:l='16px "Segoe UI"'}){br.lineWidth=s,br.beginPath(),br.moveTo(r+n,t),br.lineTo(r+e-n,t),br.quadraticCurveTo(r+e,t,r+e,t+n),br.lineTo(r+e,t+o-n),br.quadraticCurveTo(r+e,t+o,r+e-n,t+o),br.lineTo(r+n,t+o),br.quadraticCurveTo(r,t+o,r,t+o-n),br.lineTo(r,t+n),br.quadraticCurveTo(r,t,r+n,t),br.closePath(),br.strokeStyle=i,br.stroke(),br.lineWidth=2,br.fillStyle=i,br.font=l,br.fillText(a,r+4,t-4)}function oot(r){for(let t of r.parts)vd.nude.includes(t.id)&&Qrt.checked&&hV({left:t.box[0],top:t.box[1],width:t.box[2],height:t.box[3]}),vd.sexy.includes(t.id)&&Jrt.checked&&hV({left:t.box[0],top:t.box[1],width:t.box[2],height:t.box[3]}),Zrt.checked&&rot({x:t.box[0],y:t.box[1],width:t.box[2],height:t.box[3],title:`${Math.round(100*t.score)}% ${t.class}`})}var p1=0;async function dV(){if(Di.width!==co.videoWidth&&(Di.width=co.videoWidth),Di.height!==co.videoHeight&&(Di.height=co.videoHeight),co.currentTime!==p1&&Di.width>0&&FC&&co.readyState>=2){p1=co.currentTime,cr.buffer=await ip.fromPixelsAsync(co),cr.resize=Qr.resolution[0]>0&&Qr.resolution[1]>0&&(Qr.resolution[0]!==co.videoWidth||Qr.resolution[1]!==co.videoHeight)?wi.resizeNearestNeighbor(cr.buffer,[Qr.resolution[1],Qr.resolution[0]]):cr.buffer,cr.cast=j(cr.resize,"float32"),cr.batch=Ze(cr.cast,0);let r=Date.now();[cr.boxes,cr.scores,cr.classes]=await FC.executeAsync(cr.batch,Qr.outputNodes);let t=Date.now(),e=await eot(cr.boxes,cr.scores,cr.classes,cr.cast);await ip.toPixels(cr.resize,Di),oot(e),RC({ts:p1,time:t-r,res:e,t:cr}),Object.keys(cr).forEach(o=>St(cr[o]))}requestAnimationFrame(dV)}async function not(){zr().registryFactory.webgpu&&navigator?.gpu?await Wd("webgpu"):await Wd("webgl"),await Sk(),RC({tf:qd,backend:vk(),available:zr().registryFactory,flags:L().getFlags()}),FC=await KI(Qr.modelPath),RC({model:FC}),co.oncanplay=()=>RC({video:co.src,width:co.videoWidth,height:co.videoHeight}),co.src=Qr.videoPath,await dV()}window.onload=not;
//# sourceMappingURL=index.js.map
