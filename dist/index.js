/*
  NudeNet
  author: <https://github.com/vladmandic>'
*/

var Pj=Object.create;var jI=Object.defineProperty;var Lj=Object.getOwnPropertyDescriptor;var zj=Object.getOwnPropertyNames;var Bj=Object.getPrototypeOf,Mj=Object.prototype.hasOwnProperty;var ln=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),lt=(r,e)=>{for(var t in e)jI(r,t,{get:e[t],enumerable:!0})},Vj=(r,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of zj(e))!Mj.call(r,n)&&n!==t&&jI(r,n,{get:()=>e[n],enumerable:!(o=Lj(e,n))||o.enumerable});return r};var pd=(r,e,t)=>(t=r!=null?Pj(Bj(r)):{},Vj(e||!r||!r.__esModule?jI(t,"default",{value:r,enumerable:!0}):t,r));var N$=ln((Gxe,k$)=>{k$.exports=Mt;var As=null;try{As=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function Mt(r,e,t){this.low=r|0,this.high=e|0,this.unsigned=!!t}Mt.prototype.__isLong__;Object.defineProperty(Mt.prototype,"__isLong__",{value:!0});function jo(r){return(r&&r.__isLong__)===!0}Mt.isLong=jo;var x$={},y$={};function Sc(r,e){var t,o,n;return e?(r>>>=0,(n=0<=r&&r<256)&&(o=y$[r],o)?o:(t=Vt(r,(r|0)<0?-1:0,!0),n&&(y$[r]=t),t)):(r|=0,(n=-128<=r&&r<128)&&(o=x$[r],o)?o:(t=Vt(r,r<0?-1:0,!1),n&&(x$[r]=t),t))}Mt.fromInt=Sc;function Ds(r,e){if(isNaN(r))return e?wc:Fs;if(e){if(r<0)return wc;if(r>=S$)return T$}else{if(r<=-C$)return Xo;if(r+1>=C$)return v$}return r<0?Ds(-r,e).neg():Vt(r%jp|0,r/jp|0,e)}Mt.fromNumber=Ds;function Vt(r,e,t){return new Mt(r,e,t)}Mt.fromBits=Vt;var tx=Math.pow;function uv(r,e,t){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return Fs;if(typeof e=="number"?(t=e,e=!1):e=!!e,t=t||10,t<2||36<t)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return uv(r.substring(1),e,t).neg();for(var n=Ds(tx(t,8)),s=Fs,i=0;i<r.length;i+=8){var a=Math.min(8,r.length-i),l=parseInt(r.substring(i,i+a),t);if(a<8){var u=Ds(tx(t,a));s=s.mul(u).add(Ds(l))}else s=s.mul(n),s=s.add(Ds(l))}return s.unsigned=e,s}Mt.fromString=uv;function Oi(r,e){return typeof r=="number"?Ds(r,e):typeof r=="string"?uv(r,e):Vt(r.low,r.high,typeof e=="boolean"?e:r.unsigned)}Mt.fromValue=Oi;var b$=1<<16,u6=1<<24,jp=b$*b$,S$=jp*jp,C$=S$/2,w$=Sc(u6),Fs=Sc(0);Mt.ZERO=Fs;var wc=Sc(0,!0);Mt.UZERO=wc;var Xp=Sc(1);Mt.ONE=Xp;var I$=Sc(1,!0);Mt.UONE=I$;var lv=Sc(-1);Mt.NEG_ONE=lv;var v$=Vt(-1,2147483647,!1);Mt.MAX_VALUE=v$;var T$=Vt(-1,-1,!0);Mt.MAX_UNSIGNED_VALUE=T$;var Xo=Vt(0,-2147483648,!1);Mt.MIN_VALUE=Xo;var he=Mt.prototype;he.toInt=function(){return this.unsigned?this.low>>>0:this.low};he.toNumber=function(){return this.unsigned?(this.high>>>0)*jp+(this.low>>>0):this.high*jp+(this.low>>>0)};he.toString=function(e){if(e=e||10,e<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(Xo)){var t=Ds(e),o=this.div(t),n=o.mul(t).sub(this);return o.toString(e)+n.toInt().toString(e)}else return"-"+this.neg().toString(e);for(var s=Ds(tx(e,6),this.unsigned),i=this,a="";;){var l=i.div(s),u=i.sub(l.mul(s)).toInt()>>>0,c=u.toString(e);if(i=l,i.isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}};he.getHighBits=function(){return this.high};he.getHighBitsUnsigned=function(){return this.high>>>0};he.getLowBits=function(){return this.low};he.getLowBitsUnsigned=function(){return this.low>>>0};he.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Xo)?64:this.neg().getNumBitsAbs();for(var e=this.high!=0?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return this.high!=0?t+33:t+1};he.isZero=function(){return this.high===0&&this.low===0};he.eqz=he.isZero;he.isNegative=function(){return!this.unsigned&&this.high<0};he.isPositive=function(){return this.unsigned||this.high>=0};he.isOdd=function(){return(this.low&1)===1};he.isEven=function(){return(this.low&1)===0};he.equals=function(e){return jo(e)||(e=Oi(e)),this.unsigned!==e.unsigned&&this.high>>>31===1&&e.high>>>31===1?!1:this.high===e.high&&this.low===e.low};he.eq=he.equals;he.notEquals=function(e){return!this.eq(e)};he.neq=he.notEquals;he.ne=he.notEquals;he.lessThan=function(e){return this.comp(e)<0};he.lt=he.lessThan;he.lessThanOrEqual=function(e){return this.comp(e)<=0};he.lte=he.lessThanOrEqual;he.le=he.lessThanOrEqual;he.greaterThan=function(e){return this.comp(e)>0};he.gt=he.greaterThan;he.greaterThanOrEqual=function(e){return this.comp(e)>=0};he.gte=he.greaterThanOrEqual;he.ge=he.greaterThanOrEqual;he.compare=function(e){if(jo(e)||(e=Oi(e)),this.eq(e))return 0;var t=this.isNegative(),o=e.isNegative();return t&&!o?-1:!t&&o?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1};he.comp=he.compare;he.negate=function(){return!this.unsigned&&this.eq(Xo)?Xo:this.not().add(Xp)};he.neg=he.negate;he.add=function(e){jo(e)||(e=Oi(e));var t=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,i=e.high>>>16,a=e.high&65535,l=e.low>>>16,u=e.low&65535,c=0,p=0,m=0,f=0;return f+=s+u,m+=f>>>16,f&=65535,m+=n+l,p+=m>>>16,m&=65535,p+=o+a,c+=p>>>16,p&=65535,c+=t+i,c&=65535,Vt(m<<16|f,c<<16|p,this.unsigned)};he.subtract=function(e){return jo(e)||(e=Oi(e)),this.add(e.neg())};he.sub=he.subtract;he.multiply=function(e){if(this.isZero())return Fs;if(jo(e)||(e=Oi(e)),As){var t=As.mul(this.low,this.high,e.low,e.high);return Vt(t,As.get_high(),this.unsigned)}if(e.isZero())return Fs;if(this.eq(Xo))return e.isOdd()?Xo:Fs;if(e.eq(Xo))return this.isOdd()?Xo:Fs;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(w$)&&e.lt(w$))return Ds(this.toNumber()*e.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,i=this.low&65535,a=e.high>>>16,l=e.high&65535,u=e.low>>>16,c=e.low&65535,p=0,m=0,f=0,d=0;return d+=i*c,f+=d>>>16,d&=65535,f+=s*c,m+=f>>>16,f&=65535,f+=i*u,m+=f>>>16,f&=65535,m+=n*c,p+=m>>>16,m&=65535,m+=s*u,p+=m>>>16,m&=65535,m+=i*l,p+=m>>>16,m&=65535,p+=o*c+n*u+s*l+i*a,p&=65535,Vt(f<<16|d,p<<16|m,this.unsigned)};he.mul=he.multiply;he.divide=function(e){if(jo(e)||(e=Oi(e)),e.isZero())throw Error("division by zero");if(As){if(!this.unsigned&&this.high===-2147483648&&e.low===-1&&e.high===-1)return this;var t=(this.unsigned?As.div_u:As.div_s)(this.low,this.high,e.low,e.high);return Vt(t,As.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?wc:Fs;var o,n,s;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return wc;if(e.gt(this.shru(1)))return I$;s=wc}else{if(this.eq(Xo)){if(e.eq(Xp)||e.eq(lv))return Xo;if(e.eq(Xo))return Xp;var i=this.shr(1);return o=i.div(e).shl(1),o.eq(Fs)?e.isNegative()?Xp:lv:(n=this.sub(e.mul(o)),s=o.add(n.div(e)),s)}else if(e.eq(Xo))return this.unsigned?wc:Fs;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=Fs}for(n=this;n.gte(e);){o=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(o)/Math.LN2),l=a<=48?1:tx(2,a-48),u=Ds(o),c=u.mul(e);c.isNegative()||c.gt(n);)o-=l,u=Ds(o,this.unsigned),c=u.mul(e);u.isZero()&&(u=Xp),s=s.add(u),n=n.sub(c)}return s};he.div=he.divide;he.modulo=function(e){if(jo(e)||(e=Oi(e)),As){var t=(this.unsigned?As.rem_u:As.rem_s)(this.low,this.high,e.low,e.high);return Vt(t,As.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))};he.mod=he.modulo;he.rem=he.modulo;he.not=function(){return Vt(~this.low,~this.high,this.unsigned)};he.and=function(e){return jo(e)||(e=Oi(e)),Vt(this.low&e.low,this.high&e.high,this.unsigned)};he.or=function(e){return jo(e)||(e=Oi(e)),Vt(this.low|e.low,this.high|e.high,this.unsigned)};he.xor=function(e){return jo(e)||(e=Oi(e)),Vt(this.low^e.low,this.high^e.high,this.unsigned)};he.shiftLeft=function(e){return jo(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?Vt(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Vt(0,this.low<<e-32,this.unsigned)};he.shl=he.shiftLeft;he.shiftRight=function(e){return jo(e)&&(e=e.toInt()),(e&=63)===0?this:e<32?Vt(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Vt(this.high>>e-32,this.high>=0?0:-1,this.unsigned)};he.shr=he.shiftRight;he.shiftRightUnsigned=function(e){if(jo(e)&&(e=e.toInt()),e&=63,e===0)return this;var t=this.high;if(e<32){var o=this.low;return Vt(o>>>e|t<<32-e,t>>>e,this.unsigned)}else return e===32?Vt(t,0,this.unsigned):Vt(t>>>e-32,0,this.unsigned)};he.shru=he.shiftRightUnsigned;he.shr_u=he.shiftRightUnsigned;he.toSigned=function(){return this.unsigned?Vt(this.low,this.high,!1):this};he.toUnsigned=function(){return this.unsigned?this:Vt(this.low,this.high,!0)};he.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()};he.toBytesLE=function(){var e=this.high,t=this.low;return[t&255,t>>>8&255,t>>>16&255,t>>>24,e&255,e>>>8&255,e>>>16&255,e>>>24]};he.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,e&255,t>>>24,t>>>16&255,t>>>8&255,t&255]};Mt.fromBytes=function(e,t,o){return o?Mt.fromBytesLE(e,t):Mt.fromBytesBE(e,t)};Mt.fromBytesLE=function(e,t){return new Mt(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)};Mt.fromBytesBE=function(e,t){return new Mt(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}});var a2=ln(()=>{});var l2=ln(()=>{});var oE=ln((rE,Yv)=>{(function(r,e,t){function o(a){var l=this,u=i();l.next=function(){var c=2091639*l.s0+l.c*23283064365386963e-26;return l.s0=l.s1,l.s1=l.s2,l.s2=c-(l.c=c|0)},l.c=1,l.s0=u(" "),l.s1=u(" "),l.s2=u(" "),l.s0-=u(a),l.s0<0&&(l.s0+=1),l.s1-=u(a),l.s1<0&&(l.s1+=1),l.s2-=u(a),l.s2<0&&(l.s2+=1),u=null}function n(a,l){return l.c=a.c,l.s0=a.s0,l.s1=a.s1,l.s2=a.s2,l}function s(a,l){var u=new o(a),c=l&&l.state,p=u.next;return p.int32=function(){return u.next()*4294967296|0},p.double=function(){return p()+(p()*2097152|0)*11102230246251565e-32},p.quick=p,c&&(typeof c=="object"&&n(c,u),p.state=function(){return n(u,{})}),p}function i(){var a=4022871197,l=function(u){u=String(u);for(var c=0;c<u.length;c++){a+=u.charCodeAt(c);var p=.02519603282416938*a;a=p>>>0,p-=a,p*=a,a=p>>>0,p-=a,a+=p*4294967296}return(a>>>0)*23283064365386963e-26};return l}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.alea=s})(rE,typeof Yv=="object"&&Yv,typeof define=="function"&&define)});var sE=ln((nE,Qv)=>{(function(r,e,t){function o(i){var a=this,l="";a.x=0,a.y=0,a.z=0,a.w=0,a.next=function(){var c=a.x^a.x<<11;return a.x=a.y,a.y=a.z,a.z=a.w,a.w^=a.w>>>19^c^c>>>8},i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xor128=s})(nE,typeof Qv=="object"&&Qv,typeof define=="function"&&define)});var aE=ln((iE,Zv)=>{(function(r,e,t){function o(i){var a=this,l="";a.next=function(){var c=a.x^a.x>>>2;return a.x=a.y,a.y=a.z,a.z=a.w,a.w=a.v,(a.d=a.d+362437|0)+(a.v=a.v^a.v<<4^(c^c<<1))|0},a.x=0,a.y=0,a.z=0,a.w=0,a.v=0,i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,u==l.length&&(a.d=a.x<<10^a.x>>>4),a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a.v=i.v,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xorwow=s})(iE,typeof Zv=="object"&&Zv,typeof define=="function"&&define)});var uE=ln((lE,Jv)=>{(function(r,e,t){function o(i){var a=this;a.next=function(){var u=a.x,c=a.i,p,m,f;return p=u[c],p^=p>>>7,m=p^p<<24,p=u[c+1&7],m^=p^p>>>10,p=u[c+3&7],m^=p^p>>>3,p=u[c+4&7],m^=p^p<<7,p=u[c+7&7],p=p^p<<13,m^=p^p<<9,u[c]=m,a.i=c+1&7,m};function l(u,c){var p,m,f=[];if(c===(c|0))m=f[0]=c;else for(c=""+c,p=0;p<c.length;++p)f[p&7]=f[p&7]<<15^c.charCodeAt(p)+f[p+1&7]<<13;for(;f.length<8;)f.push(0);for(p=0;p<8&&f[p]===0;++p);for(p==8?m=f[7]=-1:m=f[p],u.x=f,u.i=0,p=256;p>0;--p)u.next()}l(a,i)}function n(i,a){return a.x=i.x.slice(),a.i=i.i,a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.x&&n(u,l),c.state=function(){return n(l,{})}),c}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xorshift7=s})(lE,typeof Jv=="object"&&Jv,typeof define=="function"&&define)});var pE=ln((cE,e1)=>{(function(r,e,t){function o(i){var a=this;a.next=function(){var u=a.w,c=a.X,p=a.i,m,f;return a.w=u=u+1640531527|0,f=c[p+34&127],m=c[p=p+1&127],f^=f<<13,m^=m<<17,f^=f>>>15,m^=m>>>12,f=c[p]=f^m,a.i=p,f+(u^u>>>16)|0};function l(u,c){var p,m,f,d,h,g=[],x=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,x=Math.max(x,c.length)),f=0,d=-32;d<x;++d)c&&(m^=c.charCodeAt((d+32)%c.length)),d===0&&(h=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,d>=0&&(h=h+1640531527|0,p=g[d&127]^=m+h,f=p==0?f+1:0);for(f>=128&&(g[(c&&c.length||0)&127]=-1),f=127,d=4*128;d>0;--d)m=g[f+34&127],p=g[f=f+1&127],m^=m<<13,p^=p<<17,m^=m>>>15,p^=p>>>12,g[f]=m^p;u.w=h,u.X=g,u.i=f}l(a,i)}function n(i,a){return a.i=i.i,a.w=i.w,a.X=i.X.slice(),a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.X&&n(u,l),c.state=function(){return n(l,{})}),c}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.xor4096=s})(cE,typeof e1=="object"&&e1,typeof define=="function"&&define)});var fE=ln((mE,t1)=>{(function(r,e,t){function o(i){var a=this,l="";a.next=function(){var c=a.b,p=a.c,m=a.d,f=a.a;return c=c<<25^c>>>7^p,p=p-m|0,m=m<<24^m>>>8^f,f=f-c|0,a.b=c=c<<20^c>>>12^p,a.c=p=p-m|0,a.d=m<<16^p>>>16^f,a.a=f-c|0},a.a=0,a.b=0,a.c=-1640531527,a.d=1367130551,i===Math.floor(i)?(a.a=i/4294967296|0,a.b=i|0):l+=i;for(var u=0;u<l.length+20;u++)a.b^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.a=i.a,a.b=i.b,a.c=i.c,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}e&&e.exports?e.exports=s:t&&t.amd?t(function(){return s}):this.tychei=s})(mE,typeof t1=="object"&&t1,typeof define=="function"&&define)});var dE=ln(()=>{});var gE=ln((hE,iy)=>{(function(r,e,t){var o=256,n=6,s=52,i="random",a=t.pow(o,n),l=t.pow(2,s),u=l*2,c=o-1,p;function m(C,S,I){var N=[];S=S==!0?{entropy:!0}:S||{};var $=g(h(S.entropy?[C,b(e)]:C??x(),3),N),R=new f(N),F=function(){for(var _=R.g(n),B=a,V=0;_<l;)_=(_+V)*o,B*=o,V=R.g(1);for(;_>=u;)_/=2,B/=2,V>>>=1;return(_+V)/B};return F.int32=function(){return R.g(4)|0},F.quick=function(){return R.g(4)/4294967296},F.double=F,g(b(R.S),e),(S.pass||I||function(_,B,V,G){return G&&(G.S&&d(G,R),_.state=function(){return d(R,{})}),V?(t[i]=_,B):_})(F,$,"global"in S?S.global:this==t,S.state)}function f(C){var S,I=C.length,N=this,$=0,R=N.i=N.j=0,F=N.S=[];for(I||(C=[I++]);$<o;)F[$]=$++;for($=0;$<o;$++)F[$]=F[R=c&R+C[$%I]+(S=F[$])],F[R]=S;(N.g=function(_){for(var B,V=0,G=N.i,W=N.j,U=N.S;_--;)B=U[G=c&G+1],V=V*o+U[c&(U[G]=U[W=c&W+B])+(U[W]=B)];return N.i=G,N.j=W,V})(o)}function d(C,S){return S.i=C.i,S.j=C.j,S.S=C.S.slice(),S}function h(C,S){var I=[],N=typeof C,$;if(S&&N=="object")for($ in C)try{I.push(h(C[$],S-1))}catch{}return I.length?I:N=="string"?C:C+"\0"}function g(C,S){for(var I=C+"",N,$=0;$<I.length;)S[c&$]=c&(N^=S[c&$]*19)+I.charCodeAt($++);return b(S)}function x(){try{var C;return p&&(C=p.randomBytes)?C=C(o):(C=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(C)),b(C)}catch{var S=r.navigator,I=S&&S.plugins;return[+new Date,r,I,r.screen,b(e)]}}function b(C){return String.fromCharCode.apply(0,C)}if(g(t.random(),e),typeof iy=="object"&&iy.exports){iy.exports=m;try{p=dE()}catch{}}else typeof define=="function"&&define.amd?define(function(){return m}):t["seed"+i]=m})(typeof self<"u"?self:hE,[],Math)});var Dd=ln((qAe,xE)=>{var eQ=oE(),tQ=sE(),rQ=aE(),oQ=uE(),nQ=pE(),sQ=fE(),Lc=gE();Lc.alea=eQ;Lc.xor128=tQ;Lc.xorwow=rQ;Lc.xorshift7=oQ;Lc.xor4096=nQ;Lc.tychei=sQ;xE.exports=Lc});var MF=ln(()=>{});var ci=class{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}},cn=class{refCount(e){return un("refCount")}incRef(e){return un("incRef")}timerAvailable(){return!0}time(e){return un("time")}read(e){return un("read")}readSync(e){return un("readSync")}readToGPU(e,t){return un("readToGPU")}numDataIds(){return un("numDataIds")}disposeData(e,t){return un("disposeData")}write(e,t,o){return un("write")}move(e,t,o,n,s){return un("move")}memory(){return un("memory")}floatPrecision(){return un("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return un("dispose")}};function un(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function i$(r){let e=r.length,t=0;for(;e>0;)t=Math.random()*e|0,e--,Zg(r,e,t)}function Gj(r,e){if(r.length!==e.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${e.length}`);let t=r.length,o=0;for(;t>0;)o=Math.random()*t|0,t--,Zg(r,t,o),Zg(e,t,o)}function Gp(r,e,t){return Math.max(r,Math.min(e,t))}function Uj(r){return r%2===0?r:r+1}function Zg(r,e,t){let o=r[e];r[e]=r[t],r[t]=o}function Wj(r){let e=0;for(let t=0;t<r.length;t++)e+=r[t];return e}function Hj(r,e){let t=Math.random();return e*t+(1-t)*r}function Kj(r,e){let t=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(e[o]);t+=n*n}return t}function A(r,e){if(!r)throw new Error(typeof e=="string"?e:e())}function Kt(r,e,t=""){A(Yn(r,e),()=>t+` Shapes ${r} and ${e} must match`)}function pn(r){A(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function Wl(r,e=[],t=!1){if(e==null&&(e=[]),Array.isArray(r)||Ho(r)&&!t)for(let o=0;o<r.length;++o)Wl(r[o],e,t);else e.push(r);return e}function Ke(r){if(r.length===0)return 1;let e=r[0];for(let t=1;t<r.length;t++)e*=r[t];return e}function qj(r){return r.length===0}function Yn(r,e){if(r===e)return!0;if(r==null||e==null||r.length!==e.length)return!1;for(let t=0;t<r.length;t++)if(r[t]!==e[t])return!1;return!0}function ul(r){return r%1===0}function Xj(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let e=Math.exp(2*r);return(e-1)/(e+1)}}function jj(r){let e=Math.ceil(Math.sqrt(r));return[e,Math.ceil(r/e)]}function Yj(r){let e=new Uint32Array(r);for(let t=0;t<r;++t)e[t]=t;return i$(e),e}function Cc(r,e){return e<=r.length?r:r+" ".repeat(e-r.length)}function Qj(r,e=o=>0,t){return new Promise((o,n)=>{let s=0,i=()=>{if(r()){o();return}s++;let a=e(s);if(t!=null&&s>=t){n();return}setTimeout(i,a)};i()})}function Zj(r,e){let t=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)t*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(e>0&&e!==t)throw Error(`Size(${e}) must match the product of shape ${r}`);return r}if(t===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(e%t!==0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);let n=r.slice();return n[o]=e/t,n}function ur(r,e){let t=e.length;return r=r==null?e.map((o,n)=>n):[].concat(r),A(r.every(o=>o>=-t&&o<t),()=>`All values in axis param must be in range [-${t}, ${t}) but got axis ${r}`),A(r.every(o=>ul(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?t+o:o)}function YI(r,e){let t=[],o=[],n=e!=null&&Array.isArray(e)&&e.length===0,s=e==null||n?null:ur(e,r).sort(),i=0;for(let a=0;a<r.length;++a){if(s!=null){if(s[i]===a&&r[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${r[a]}' is not 1`);(s[i]==null||s[i]>a)&&r[a]===1&&(t.push(r[a]),o.push(a)),s[i]<=a&&i++}r[a]!==1&&(t.push(r[a]),o.push(a))}return{newShape:t,keptDims:o}}function QI(r,e){let t=null;if(r==null||r==="float32")t=new Float32Array(e);else if(r==="int32")t=new Int32Array(e);else if(r==="bool")t=new Uint8Array(e);else throw new Error(`Unknown data type ${r}`);return t}function ZI(r,e){let t=null;if(r==null||r==="float32")t=new Float32Array(e);else if(r==="int32")t=new Int32Array(e);else if(r==="bool")t=new Uint8Array(e);else if(r==="string")t=new Array(e);else throw new Error(`Unknown data type ${r}`);return t}function JI(r,e){for(let t=0;t<r.length;t++){let o=r[t];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${e} being uploaded contains ${o}.`)}}function ev(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function Jj(r,e){return!(e==="complex64"||e==="float32"&&r!=="complex64"||e==="int32"&&r!=="float32"&&r!=="complex64"||e==="bool"&&r==="bool")}function Ho(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}function Jg(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function tv(r){if(r==null)return 0;let e=0;return r.forEach(t=>e+=t.length),e}function Up(r){return typeof r=="string"||r instanceof String}function a$(r){return typeof r=="boolean"}function l$(r){return typeof r=="number"}function Wp(r){return Array.isArray(r)?Wp(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":l$(r)?"float32":Up(r)?"string":a$(r)?"bool":"float32"}function Hp(r){return!!(r&&r.constructor&&r.call&&r.apply)}function Kp(r,e){for(let t=e;t<r;++t)if(r%t===0)return t;return r}function oa(r){let e=r.length;if(e<2)return[];let t=new Array(e-1);t[e-2]=r[e-1];for(let o=e-3;o>=0;--o)t[o]=t[o+1]*r[o+1];return t}function u$(r,e,t,o=!1){let n=new Array;if(e.length===1){let s=e[0]*(o?2:1);for(let i=0;i<s;i++)n[i]=t[r+i]}else{let s=e[0],i=e.slice(1),a=i.reduce((l,u)=>l*u)*(o?2:1);for(let l=0;l<s;l++)n[l]=u$(r+l*a,i,t,o)}return n}function bc(r,e,t=!1){if(r.length===0)return e[0];let o=r.reduce((n,s)=>n*s)*(t?2:1);if(o===0)return[];if(o!==e.length)throw new Error(`[${r}] does not match the input size ${e.length}${t?" for a complex tensor":""}.`);return u$(0,r,e,t)}function md(r,e){let t=qp(r,e);for(let o=0;o<t.length;o++)t[o]=1;return t}function qp(r,e){if(e==null||e==="float32"||e==="complex64")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${e}`)}function e6(r,e){let t=r.reduce((o,n)=>o*n,1);if(e==null||e==="float32")return bc(r,new Float32Array(t));if(e==="int32")return bc(r,new Int32Array(t));if(e==="bool")return bc(r,new Uint8Array(t));throw new Error(`Unknown data type ${e}`)}function fd(r){r.forEach(e=>{A(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function t6(r,e,t){if(e===0)return 0;if(e===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=t[n]*r[n];return o}function r6(r,e,t){if(e===0)return[];if(e===1)return[r];let o=new Array(e);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/t[n]),r-=o[n]*t[n];return o[o.length-1]=r,o}function dd(r){return r&&r.then&&typeof r.then=="function"}var c$="tfjsflags",hd=class{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=n6,this.populateURLFlags()}setPlatform(e,t){this.platform!=null&&(D().getBool("IS_TEST")||D().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,o){if(this.flagRegistry[e]={evaluationFn:t,setHook:o},this.urlFlags[e]!=null){let n=this.urlFlags[e];D().getBool("IS_TEST")||D().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${n}.`),this.set(e,n)}}async getAsync(e){return e in this.flags?this.flags[e]:(this.flags[e]=await this.evaluateFlag(e),this.flags[e])}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(dd(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(this.flagRegistry[e]==null)throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,this.flagRegistry[e].setHook!=null&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(this.flagRegistry[e]==null)throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;let e=this.getQueryParams(this.global.location.search);c$ in e&&e[c$].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=i6(n,s)})}};function n6(r){let e={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...o)=>(s6(e,o[0],o[1]),o.join("="))),e}function s6(r,e,t){r[decodeURIComponent(e)]=decodeURIComponent(t||"")}function i6(r,e){if(e=e.toLowerCase(),e==="true"||e==="false")return e==="true";if(`${+e}`===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${r}.`)}function D(){return rv}var rv=null;function p$(r){rv=r}var ov;function nv(){if(ov==null){let r;if(typeof window<"u")r=window;else if(typeof global<"u")r=global;else if(typeof process<"u")r=process;else if(typeof self<"u")r=self;else throw new Error("Could not find a global object");ov=r}return ov}function a6(){let r=nv();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function gd(r,e){let t=a6();if(t.has(r))return t.get(r);{let o=e();return t.set(r,o),t.get(r)}}var mn="Abs",pi="Acos",mi="Acosh",Wr="Add",Qn="AddN",Hl="All",Kl="Any",Zn="ArgMax",Jn="ArgMin",fi="Asin",di="Asinh",hi="Atan",gi="Atanh",fn="Atan2",es="AvgPool",ql="AvgPoolGrad",na="AvgPool3D",Xl="AvgPool3DGrad",ts="BatchMatMul",rs="BatchToSpaceND",jl="Bincount",m$="BroadcastTo",Yl="BroadcastArgs",go="Cast",xo="Ceil",dn="ClipByValue",xi="Complex",sa="ComplexAbs",os="Concat",ns="Conv2D",Ql="Conv2DBackpropFilter",ss="Conv2DBackpropInput",ia="Conv3D",Zl="Conv3DBackpropFilterV2",Jl="Conv3DBackpropInputV2",hn="Cos",gn="Cosh",aa="Cumprod",is="Cumsum",la="CropAndResize",eu="DenseBincount",ua="DepthToSpace",as="DepthwiseConv2dNative",tu="DepthwiseConv2dNativeBackpropFilter",ru="DepthwiseConv2dNativeBackpropInput",ou="Diag",ca="Dilation2D",xd="Dilation2DBackpropInput",yd="Dilation2DBackpropFilter",xn="RealDiv",pa="Einsum",yn="Elu",nu="EluGrad",yi="Erf",bn="Equal",yo="Exp",ls="ExpandDims",bo="Expm1",su="FFT",ma="Fill",fa="FlipLeftRight",Co="Floor",Cn="FloorDiv",us="FusedBatchNorm",cs="GatherV2",da="GatherNd",wn="Greater",wo="GreaterEqual",So="Identity",iu="IFFT",ha="Imag",bi="IsFinite",Ci="IsInf",Sn="IsNan",ps="LeakyRelu",In="Less",vn="LessEqual",au="LinSpace",Io="Log",wi="Log1p",Si="LogicalAnd",Ii="LogicalNot",cl="LogicalOr";var f$="LogSoftmax";var ga="LRN",lu="LRNGrad",ms="Max",vo="Maximum",fs="MaxPool",uu="MaxPoolGrad",xa="MaxPool3D",cu="MaxPool3DGrad",pu="MaxPoolWithArgmax",ds="Mean",hs="Min",To="Minimum",gs="MirrorPad",vi="Mod",mu="Multinomial",ko="Multiply",Tn="Neg",kn="NotEqual",ya="NonMaxSuppressionV3",fu="NonMaxSuppressionV4",ba="NonMaxSuppressionV5",xs="OnesLike",Ca="OneHot",ys="Pack",bs="PadV2";var Nn="Pow",Cs="Prelu",$n="Prod",du="RaggedTensorToTensor",wa="Range",Ti="Real",En="Reciprocal",Rn="Relu",ws="Reshape",Ss="ResizeNearestNeighbor",hu="ResizeNearestNeighborGrad",Is="ResizeBilinear",gu="ResizeBilinearGrad",An="Relu6",Sa="Reverse",ki="Round",No="Rsqrt",Ia="ScatterNd",xu="SearchSorted",vs="Select",Ni="Selu",Dn="Slice",Fn="Sin",_n="Sinh",$i="Sign",$o="Sigmoid",Ei="Softplus",Eo="Sqrt",Ts="Sum",ks="SpaceToBatchND",Ns="SplitV",$s="Softmax",yu="SparseFillEmptyRows",bu="SparseReshape",Cu="SparseSegmentMean",wu="SparseSegmentSum",va="SparseToDense",Ro="SquaredDifference",Ta="Square",ka="StridedSlice",Na="StringNGrams",Su="StringSplit",Iu="StringToHashBucketFast",Ao="Sub",Ri="Tan",On="Tanh",Ko="Tile",$a="TopK",Ea="Transform",qo="Transpose",vu="Unique",Es="Unpack",Ra="UnsortedSegmentSum";var Rs="ZerosLike",Ai="Step",pl="FromPixels",Aa="RotateWithOffset",Di="_FusedMatMul",Fi="FusedConv2D",_i="FusedDepthwiseConv2D";function Da(...r){D().getBool("IS_TEST")||D().getBool("PROD")||console.warn(...r)}function l6(...r){D().getBool("IS_TEST")||D().getBool("PROD")||console.log(...r)}var ex=gd("kernelRegistry",()=>new Map),sv=gd("gradRegistry",()=>new Map);function bd(r,e){let t=g$(r,e);return ex.get(t)}function iv(r){return sv.get(r)}function av(r){let e=ex.entries(),t=[];for(;;){let{done:o,value:n}=e.next();if(o)break;let[s,i]=n,[a]=s.split("_");a===r&&t.push(i)}return t}function Tu(r){let{kernelName:e,backendName:t}=r,o=g$(e,t);ex.has(o)&&Da(`The kernel '${e}' for backend '${t}' is already registered`),ex.set(o,r)}function h$(r){let{kernelName:e}=r;sv.has(e)&&D().getBool("DEBUG")&&Da(`Overriding the gradient for '${e}'`),sv.set(e,r)}function g$(r,e){return`${e}_${r}`}var y={};lt(y,{arraysEqual:()=>Yn,assert:()=>A,assertNonNegativeIntegerDimensions:()=>fd,assertNonNull:()=>pn,assertShapesMatch:()=>Kt,bytesFromStringArray:()=>tv,bytesPerElement:()=>Jg,checkConversionForErrors:()=>JI,clamp:()=>Gp,computeStrides:()=>oa,createScalarValue:()=>h6,createShuffledIndices:()=>Yj,decodeString:()=>Zp,distSquared:()=>Kj,encodeString:()=>Qp,fetch:()=>x6,fingerPrint64:()=>d6,flatten:()=>Wl,getArrayFromDType:()=>ZI,getTypedArrayFromDType:()=>QI,hasEncodingLoss:()=>Jj,hexToLong:()=>Cd,indexToLoc:()=>r6,inferDtype:()=>Wp,inferFromImplicitShape:()=>Zj,isBoolean:()=>a$,isFunction:()=>Hp,isInt:()=>ul,isNumber:()=>l$,isPromise:()=>dd,isScalarShape:()=>qj,isString:()=>Up,isTypedArray:()=>Ho,isValidDtype:()=>ev,locToIndex:()=>t6,makeOnesTypedArray:()=>md,makeZerosNestedTypedArray:()=>e6,makeZerosTypedArray:()=>qp,nearestDivisor:()=>Kp,nearestLargerEven:()=>Uj,now:()=>Tc,parseAxisParam:()=>ur,randUniform:()=>Hj,repeatedTry:()=>Qj,rightPad:()=>Cc,shuffle:()=>i$,shuffleCombo:()=>Gj,sizeFromShape:()=>Ke,sizeToSquarishShape:()=>jj,squeezeShape:()=>YI,sum:()=>Wj,swap:()=>Zg,tanh:()=>Xj,toNestedArray:()=>bc,toTypedArray:()=>Yp});var pv=pd(N$());var vc=pv.default||pv;function Cd(r){return vc.fromString(r,!0,16)}var E$=Cd("c3a5c85c97cb3127"),Ic=Cd("b492b66fbe98f273"),Jr=Cd("9ae16a3b2f90404f");function cv(r){return r.xor(r.shru(47))}function R$(r,e,t){let o=r.slice(e,e+t);return vc.fromBytes(Array.from(o),!0,!0)}function Dt(r,e){return R$(r,e,8)}function $$(r,e){return R$(r,e,4)}function vr(r,e){return e===0?r:r.shru(e).or(r.shl(64-e))}function ku(r,e,t=Cd("9ddfea08eb382d69")){let o=r.xor(e).mul(t);o=o.xor(o.shru(47));let n=e.xor(o).mul(t);return n=n.xor(n.shru(47)),n=n.mul(t),n}function c6(r,e,t,o,n,s){n=n.add(r),s=vr(s.add(n).add(o),21);let i=n;return n=n.add(e),n=n.add(t),s=s.add(vr(n,44)),[n.add(o),s.add(i)]}function rx(r,e,t,o){return c6(Dt(r,e),Dt(r,e+8),Dt(r,e+16),Dt(r,e+24),t,o)}function p6(r,e=r.length){if(e>=8){let t=Jr.add(e*2),o=Dt(r,0).add(Jr),n=Dt(r,e-8),s=vr(n,37).mul(t).add(o),i=vr(o,25).add(n).mul(t);return ku(s,i,t)}if(e>=4){let t=Jr.add(e*2),o=$$(r,0);return ku(o.shl(3).add(e),$$(r,e-4),t)}if(e>0){let t=r[0],o=r[e>>1],n=r[e-1],s=t+(o<<8),i=e+(n<<2);return cv(Jr.mul(s).xor(E$.mul(i))).mul(Jr)}return Jr}function m6(r,e=r.length){let t=Jr.add(e*2),o=Dt(r,0).mul(Ic),n=Dt(r,8),s=Dt(r,e-8).mul(t),i=Dt(r,e-16).mul(Jr);return ku(vr(o.add(n),43).add(vr(s,30)).add(i),o.add(vr(n.add(Jr),18)).add(s),t)}function f6(r,e=r.length){let t=Jr.add(e*2),o=Dt(r,0).mul(Jr),n=Dt(r,8),s=Dt(r,e-8).mul(t),i=Dt(r,e-16).mul(Jr),a=vr(o.add(n),43).add(vr(s,30)).add(i),l=ku(a,o.add(vr(n.add(Jr),18)).add(s),t),u=Dt(r,16).mul(t),c=Dt(r,24),p=a.add(Dt(r,e-32)).mul(t),m=l.add(Dt(r,e-24)).mul(t);return ku(vr(u.add(c),43).add(vr(p,30)).add(m),u.add(vr(c.add(o),18)).add(p),t)}function d6(r,e=r.length){let t=vc.fromNumber(81,!0);if(e<=32)return e<=16?p6(r,e):m6(r,e);if(e<=64)return f6(r,e);let o=t,n=t.mul(Ic).add(113),s=cv(n.mul(Jr).add(113)).mul(Jr),i=[vc.UZERO,vc.UZERO],a=[vc.UZERO,vc.UZERO];o=o.mul(Jr).add(Dt(r,0));let l=0,u=(e-1>>6)*64,c=u+(e-1&63)-63;do o=vr(o.add(n).add(i[0]).add(Dt(r,l+8)),37).mul(Ic),n=vr(n.add(i[1]).add(Dt(r,l+48)),42).mul(Ic),o=o.xor(a[1]),n=n.add(i[0]).add(Dt(r,l+40)),s=vr(s.add(a[0]),33).mul(Ic),i=rx(r,l,i[1].mul(Ic),o.add(a[0])),a=rx(r,l+32,s.add(a[1]),n.add(Dt(r,l+16))),[s,o]=[o,s],l+=64;while(l!==u);let p=Ic.add(s.and(255).shl(1));return l=c,a[0]=a[0].add(e-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),o=vr(o.add(n).add(i[0]).add(Dt(r,l+8)),37).mul(p),n=vr(n.add(i[1]).add(Dt(r,l+48)),42).mul(p),o=o.xor(a[1].mul(9)),n=n.add(i[0].mul(9).add(Dt(r,l+40))),s=vr(s.add(a[0]),33).mul(p),i=rx(r,l,i[1].mul(p),o.add(a[0])),a=rx(r,l+32,s.add(a[1]),n.add(Dt(r,l+16))),[s,o]=[o,s],ku(ku(i[0],a[0],p).add(cv(n).mul(E$)).add(s),ku(i[1],a[1],p).add(o),p)}function h6(r,e){return e==="string"?Qp(r):Yp([r],e)}function g6(r,e){return r instanceof Float32Array&&e==="float32"||r instanceof Int32Array&&e==="int32"||r instanceof Uint8Array&&e==="bool"}function Yp(r,e){if(e==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=Wl(r)),D().getBool("DEBUG")&&JI(r,e),g6(r,e))return r;if(e==null||e==="float32"||e==="complex64")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool"){let t=new Uint8Array(r.length);for(let o=0;o<t.length;++o)Math.round(r[o])!==0&&(t[o]=1);return t}else throw new Error(`Unknown data type ${e}`)}function Tc(){return D().platform.now()}function x6(r,e){return D().platform.fetch(r,e)}function Qp(r,e="utf-8"){return e=e||"utf-8",D().platform.encode(r,e)}function Zp(r,e="utf-8"){return e=e||"utf-8",D().platform.decode(r,e)}var ox=class{constructor(e,t){this.backendTimer=e,this.logger=t,t==null&&(this.logger=new mv)}profileKernel(e,t,o){let n,s=()=>{n=o()},i,a=Tc();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();i=Promise.resolve({kernelMs:Tc()-a})}if(D().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(p=>{y6(p,c.dtype,e)})}return{kernelName:e,outputs:n,inputs:t,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(e){let{kernelName:t,outputs:o,timeMs:n,inputs:s,extraInfo:i}=e;o.forEach(a=>{Promise.all([a.data(),n,i]).then(l=>{this.logger.logKernelProfile(t,a,l[0],l[1],s,l[2])})})}};function y6(r,e,t){if(e!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${t}'`),!0}return!1}var mv=class{logKernelProfile(e,t,o,n,s,i){let a=typeof n=="number"?Cc(`${n}ms`,9):n.error,l=Cc(e,25),u=t.rank,c=t.size,p=Cc(t.shape.toString(),14),m="";for(let f in s){let d=s[f];if(d!=null){let h=d.shape||t.shape,g=h.length;m+=`${f}: ${g}D ${g>0?h:""} `}}console.log(`%c${l}	%c${a}	%c${u}D ${p}	%c${c}	%c${m}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function A$(r,e,t){let o={},n={};for(let l=0;l<e.length;l++)o[e[l].id]=!0;for(let l=0;l<r.length;l++){let u=r[l],c=u.inputs;for(let p in c){let m=c[p],f=!1;for(let d=0;d<e.length;d++)if(o[m.id]){u.outputs.forEach(h=>o[h.id]=!0),f=!0,n[u.id]=!0;break}if(f)break}}let s={};s[t.id]=!0;let i={};for(let l=r.length-1;l>=0;l--){let u=r[l],c=u.inputs;for(let p=0;p<u.outputs.length;p++)if(s[u.outputs[p].id]){for(let m in c)s[c[m].id]=!0,i[u.id]=!0;break}}let a=[];for(let l=0;l<r.length;l++){let u=r[l];if(n[u.id]&&i[u.id]){let c={};for(let m in u.inputs){let f=u.inputs[m];o[f.id]&&(c[m]=f)}let p=Object.assign({},u);p.inputs=c,p.outputs=u.outputs,a.push(p)}}return a}function D$(r,e,t,o){for(let n=e.length-1;n>=0;n--){let s=e[n],i=[];if(s.outputs.forEach(l=>{let u=r[l.id];u!=null?i.push(u):i.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let a=s.gradient(i);for(let l in s.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);let u=t(()=>a[l]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[l];if(!Yn(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let p=r[c.id];r[c.id]=o(p,u),p.dispose()}}}}var F$=20,wd=3,fv=7;function _$(r,e,t,o){let n=oa(e),s=b6(r,e,t,n),i=e.length,a=nx(r,e,t,n,s),l=["Tensor"];return o&&(l.push(`  dtype: ${t}`),l.push(`  rank: ${i}`),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join(`
`)),l.join(`
`)}function b6(r,e,t,o){let n=Ke(e),s=o[o.length-1],i=new Array(s).fill(0),a=e.length,l=t==="complex64"?Id(r):r;if(a>1)for(let u=0;u<n/s;u++){let c=u*s;for(let p=0;p<s;p++)i[p]=Math.max(i[p],Sd(l[c+p],0,t).length)}return i}function Sd(r,e,t){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(fv))} + ${parseFloat(r[1].toFixed(fv))}j`:Up(r)?o=`'${r}'`:t==="bool"?o=O$(r):o=parseFloat(r.toFixed(fv)).toString(),Cc(o,e)}function O$(r){return r===0?"false":"true"}function nx(r,e,t,o,n,s=!0){let i=t==="complex64"?2:1,a=e[0],l=e.length;if(l===0){if(t==="complex64"){let h=Id(r);return[Sd(h[0],0,t)]}return t==="bool"?[O$(r[0])]:[r[0].toString()]}if(l===1){if(a>F$){let g=wd*i,x=Array.from(r.slice(0,g)),b=Array.from(r.slice((a-wd)*i,a*i));return t==="complex64"&&(x=Id(x),b=Id(b)),["["+x.map((C,S)=>Sd(C,n[S],t)).join(", ")+", ..., "+b.map((C,S)=>Sd(C,n[a-wd+S],t)).join(", ")+"]"]}let h=t==="complex64"?Id(r):Array.from(r);return["["+h.map((g,x)=>Sd(g,n[x],t)).join(", ")+"]"]}let u=e.slice(1),c=o.slice(1),p=o[0]*i,m=[];if(a>F$){for(let h=0;h<wd;h++){let g=h*p,x=g+p;m.push(...nx(r.slice(g,x),u,t,c,n,!1))}m.push("...");for(let h=a-wd;h<a;h++){let g=h*p,x=g+p;m.push(...nx(r.slice(g,x),u,t,c,n,h===a-1))}}else for(let h=0;h<a;h++){let g=h*p,x=g+p;m.push(...nx(r.slice(g,x),u,t,c,n,h===a-1))}let f=l===2?",":"";m[0]="["+m[0]+f;for(let h=1;h<m.length-1;h++)m[h]=" "+m[h]+f;let d=`,
`;for(let h=2;h<l;h++)d+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":d),m}function Id(r){let e=[];for(let t=0;t<r.length;t+=2)e.push([r[t],r[t+1]]);return e}var Je=class{constructor(e,t,o){if(this.dtype=t,this.shape=e.slice(),this.size=Ke(e),o!=null){let n=o.length;A(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(t==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||ZI(t,this.size),this.strides=oa(e)}set(e,...t){t.length===0&&(t=[0]),A(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let o=this.locToIndex(t);this.values[o]=e}get(...e){e.length===0&&(e=[0]);let t=0;for(let n of e){if(n<0||n>=this.shape[t]){let s=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(s)}t++}let o=e[e.length-1];for(let n=0;n<e.length-1;++n)o+=this.strides[n]*e[n];return this.values[o]}locToIndex(e){if(this.rank===0)return 0;if(this.rank===1)return e[0];let t=e[e.length-1];for(let o=0;o<e.length-1;++o)t+=this.strides[o]*e[o];return t}indexToLoc(e){if(this.rank===0)return[];if(this.rank===1)return[e];let t=new Array(this.shape.length);for(let o=0;o<t.length-1;++o)t[o]=Math.floor(e/this.strides[o]),e-=t[o]*this.strides[o];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Pi().makeTensor(this.values,this.shape,this.dtype)}},Pi=null,Jp=null,C6=null;function P$(r){Pi=r}function L$(r){Jp=r}function z$(r){C6=r}var Ve=class{constructor(e,t,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=Ke(e),this.strides=oa(e),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return Jp.buffer(this.shape,this.dtype,e)}bufferSync(){return Jp.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return bc(this.shape,e,this.dtype==="complex64")}arraySync(){return bc(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let e=Pi().read(this.dataId);if(this.dtype==="string"){let t=await e;try{return t.map(o=>Zp(o))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Pi().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=Pi().readSync(this.dataId);if(this.dtype==="string")try{return e.map(t=>Zp(t))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await Pi().read(this.dataId);return this.dtype==="string"?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Pi().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Jp.print(this,e)}clone(){return this.throwIfDisposed(),Jp.clone(this)}toString(e=!1){let t=this.dataSync();return _$(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Jp.cast(this,e)}variable(e=!0,t,o){return this.throwIfDisposed(),Pi().makeVariable(this,e,t,o)}};Object.defineProperty(Ve,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function L(){return gd("Tensor",()=>Ve)}L();var ml=class extends Ve{constructor(e,t,o,n){super(e.shape,e.dtype,e.dataId,n),this.trainable=t,this.name=o}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Yn(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Pi().disposeTensor(this),this.dataId=e.dataId,Pi().incRef(this,null)}dispose(){Pi().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(ml,Symbol.hasInstance,{value:r=>r instanceof Ve&&r.assign!=null&&r.assign instanceof Function});var _s={};lt(_s,{assertTypesMatch:()=>bv,getTensorsInContainer:()=>vd,isTensorInList:()=>S6,makeTypesMatch:()=>Ue});var dv;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(dv||(dv={}));var hv;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(hv||(hv={}));var gv;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(gv||(gv={}));var xv;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(xv||(xv={}));var yv;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(yv||(yv={}));var w6={float32:xv,int32:hv,bool:gv,complex64:yv};function Ye(r,e){if(r==="string"||e==="string"){if(r==="string"&&e==="string")return"string";throw new Error(`Can not upcast ${r} with ${e}`)}return w6[r][e]}function Do(r){return Ye(r,"int32")}function Ue(r,e){if(r.dtype===e.dtype)return[r,e];let t=Ye(r.dtype,e.dtype);return[r.cast(t),e.cast(t)]}function bv(r,e){A(r.dtype===e.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${e.dtype}) input must match`)}function S6(r,e){return e.some(t=>t.id===r.id)}function vd(r){let e=[];return B$(r,e,new Set),e}function B$(r,e,t){if(r==null)return;if(r instanceof Ve){e.push(r);return}if(!I6(r))return;let o=r;for(let n in o){let s=o[n];t.has(s)||(t.add(s),B$(s,e,t))}}function I6(r){return Array.isArray(r)||typeof r=="object"}function Cv(r){return r.kernelName!=null}var sx=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}},Nu=class{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new sx}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let o=e[t];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(e in this.registryFactory){let{asyncInit:t}=this.initializeBackend(e);if(t)return null}else return null;return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,o=1){return e in this.registryFactory?(Da(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:o},!0)}async setBackend(e){if(this.registryFactory[e]==null)throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,this.registry[e]==null){this.backendInstance=null;let{success:t,asyncInit:o}=this.initializeBackend(e);if(!(o?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ox(this.backendInstance),!0}setupRegisteredKernels(){av(this.backendName).forEach(t=>{t.setupFunc!=null&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){av(e).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[e])})}initializeBackend(e){let t=this.registryFactory[e];if(t==null)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{let o=t.factory();if(o&&!(o instanceof cn)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(i=>n<this.pendingBackendInitId?!1:(this.registry[e]=i,this.pendingBackendInit=null,!0)).catch(i=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,Da(`Initialization of backend ${e} failed`),Da(i.stack||i.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[e]=o,{success:!0,asyncInit:!1}}catch(o){return Da(`Initialization of backend ${e} failed`),Da(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let o=e[t],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let o=this.state.tensorInfo.get(t),n=o.backend,s=this.readSync(t),i=n.refCount(t);n.disposeData(t,!0),o.backend=e,e.move(t,s,o.shape,o.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let o=null;if(t==null){if(typeof e!="function")throw new Error("Please provide a function to tidy()");t=e}else{if(typeof e!="string"&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof t!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=e}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,o){e();try{let n=o();return t(),n}catch(n){throw t(),n}}nextTensorId(){return Nu.nextTensorId++}nextVariableId(){return Nu.nextVariableId++}clone(e){let t=E.runKernel(So,{x:e}),o={x:e},n=i=>({x:()=>{let a="float32",l={x:i},u={dtype:a};return E.runKernel(go,l,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[t],n,s,{}),t}runKernel(e,t,o){if(this.backendName==null&&this.backend,!(bd(e,this.backendName)!=null))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,o){let n=this.backend.numDataIds(),s=0;o.forEach(l=>{s+=l.dtype==="complex64"?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=n-t-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e){let t,o=[],n=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l,u=Cv(e)?e.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(Cv(e)){let{kernelName:d,inputs:h,attrs:g}=e;this.backendName==null&&this.backend;let x=bd(d,this.backendName);A(x!=null,()=>`Cannot find registered kernel '${d}' for backend '${this.backendName}'`),a=()=>{let b=this.backend.numDataIds();l=x.kernelFunc({inputs:h,attrs:g,backend:this.backend});let C=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(d,b,C);let S=C.map(I=>I.rank!=null?I:this.makeTensorFromTensorInfo(I));if(n){let I=this.getTensorsForGradient(d,h,S);o=this.saveTensorsForBackwardMode(I)}return S}}else{let{forwardFunc:d}=e,h=g=>{!n||(o=g.map(x=>this.keep(this.clone(x))))};a=()=>{let g=this.backend.numDataIds();l=this.tidy(()=>d(this.backend,h));let x=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,x),x}}let{inputs:c,attrs:p}=e,m=Cv(e)?null:e.backwardsFunc,f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?t=a():(f=this.profiler.profileKernel(u,c,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs)}),n&&this.addTapeNode(u,c,t,m,o,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(d=>c[d]!=null?c[d].shape:null),outputShapes:t.map(d=>d.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(e,t,o){let n=iv(e);if(n!=null){let s=n.inputsToSave||[],i=n.outputsToSave||[],a;n.saveAllInputs?(A(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(u=>t[u])):a=s.map(u=>t[u]);let l=o.filter((u,c)=>i[c]);return a.concat(l)}return[]}makeTensor(e,t,o,n){if(e==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=e;o==="string"&&Up(e[0])&&(s=e.map(l=>Qp(l)));let i=n.write(s,t,o),a=new Ve(t,o,i,this.nextTensorId());if(this.trackTensor(a,n),o==="string"){let l=this.state.tensorInfo.get(i),u=tv(s);this.state.numBytes+=u-l.bytes,l.bytes=u}return a}makeTensorFromDataId(e,t,o,n){o=o||"float32";let s={dataId:e,shape:t,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(e,t){let{dataId:o,shape:n,dtype:s}=e,i=new Ve(n,s,o,this.nextTensorId());return this.trackTensor(i,t),i}makeVariable(e,t=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==e.dtype&&(e=e.cast(n));let s=new ml(e,t,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,e.dtype==="string"&&this.state.numStringTensors++;let o=0;e.dtype!=="complex64"&&e.dtype!=="string"&&(o=e.size*Jg(e.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:o})),e instanceof ml||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,e.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),e.dtype!=="complex64"&&e.dtype!=="string"){let o=e.size*Jg(e.dtype);this.state.numBytes-=o}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),this.state.registeredVariables[e.name]!=null&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,e.reasons==null&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(e,t,o,n,s,i){let a={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:o,saved:s},l=iv(e);l!=null&&(n=l.gradFunc),n!=null&&(a.gradient=u=>(u=u.map((c,p)=>{if(c==null){let m=o[p],f=qp(m.size,m.dtype);return this.makeTensor(f,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,i))),this.state.activeTape.push(a)}keep(e){return e.kept=!0,e}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=vd(e),o=new Set(t.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let i=this.state.activeScope.track[s];!i.kept&&!o.has(i.id)&&i.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(e,t,o,n=!1){if(A(t.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));A(s instanceof Ve,()=>"The result y returned by f() must be a tensor.");let i=A$(this.state.activeTape,t,s);if(!n&&i.length===0&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let a={};a[s.id]=o??v6(s.shape),D$(a,i,u=>this.tidy(u),T6);let l=t.map(u=>a[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:l}})}customGrad(e){return A(Hp(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{A(t.every(a=>a instanceof Ve),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};t.forEach((a,l)=>{n[l]=a});let s=(a,l)=>(o=e(...t,l),A(o.value instanceof Ve,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),A(Hp(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),i=(a,l)=>{let u=o.gradFunc(a,l),c=Array.isArray(u)?u:[u];A(c.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),A(c.every(m=>m instanceof Ve),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let p={};return c.forEach((m,f)=>{p[f]=()=>m}),p};return this.runKernelFunc({forwardFunc:s,backwardsFunc:i,inputs:n})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){let t=Tc(),o=await this.backend.time(e);return o.wallMs=Tc()-t,o}track(e){return this.state.activeScope!=null&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new sx;for(let e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};Nu.nextTensorId=0;Nu.nextVariableId=0;function v6(r){let e=md(Ke(r),"float32");return E.makeTensor(e,r,"float32")}function wv(){let r=nv();if(r._tfengine==null){let e=new hd(r);r._tfengine=new Nu(e)}return p$(r._tfengine.ENV),P$(()=>r._tfengine),r._tfengine}var E=wv();function T6(r,e){let t={a:r,b:e};return E.runKernel(Wr,t)}var Pn={};lt(Pn,{isBrowser:()=>Iv,isMobile:()=>$6,mockIsMobile:()=>N6});function k6(){return typeof navigator<"u"&&navigator!=null}var Sv;function N6(r){Sv=r}function $6(r){if(Sv!==void 0)return Sv;if(r||k6()){if(r||(r=navigator),r.product==="ReactNative")return!0;let e=r.userAgent||r.vendor||(typeof window<"u"?window.opera:"");if(!e){let t=r;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Iv(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}var Ln=D();Ln.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});Ln.registerFlag("IS_BROWSER",()=>Iv());Ln.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u");Ln.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));Ln.registerFlag("PROD",()=>!1);Ln.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Ln.getBool("DEBUG"));Ln.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);Ln.registerFlag("IS_TEST",()=>!1);Ln.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);Ln.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);Ln.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);Ln.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);function Fo(r,e){let t=r;if(Ho(r))return e==="string"?[]:[r.length];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(t)||Ho(t)&&e!=="string";)o.push(t.length),t=t[0];return Array.isArray(r)&&D().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&V$(r,o,[]),o}function V$(r,e,t){if(t=t||[],!Array.isArray(r)&&!Ho(r)){A(e.length===0,()=>`Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);return}A(e.length>0,()=>`Element arr[${t.join("][")}] should be a primitive, but is an array of ${r.length} elements`),A(r.length===e[0],()=>`Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${r.length} elements`);let o=e.slice(1);for(let n=0;n<r.length;++n)V$(r[n],o,t.concat(n))}function M$(r,e,t,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==e||r==="numeric"&&e==="string")throw new Error(`Argument '${t}' passed to '${o}' must be ${r} tensor, but got ${e} tensor`)}}function T(r,e,t,o="numeric"){if(r instanceof Ve)return M$(o,r.dtype,e,t),r;let n=Wp(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),M$(o,n,e,t),r==null||!Ho(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let l=r==null?"null":r.constructor.name;throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${l}'`)}let s=Fo(r,n);!Ho(r)&&!Array.isArray(r)&&(r=[r]);let a=n!=="string"?Yp(r,n):Wl(r,[],!0);return E.makeTensor(a,s,n)}function kc(r,e,t,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,i)=>T(s,`${e}[${i}]`,t,o))}var vv="__op";function k(r){let e=Object.keys(r);if(e.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let t=e[0],o=r[t];t.endsWith("_")&&(t=t.substring(0,t.length-1)),t=t+vv;let n=(...s)=>{E.startScope(t);try{let i=o(...s);return dd(i)&&console.error("Cannot return a Promise inside of tidy."),E.endScope(i),i}catch(i){throw E.endScope(null),i}};return Object.defineProperty(n,"name",{value:t,configurable:!0}),n}function E6(r,e){let t=T(r,"real","complex"),o=T(e,"imag","complex");Kt(t.shape,o.shape,`real and imag shapes, ${t.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:t,imag:o};return E.runKernel(xi,n)}var _o=k({complex_:E6});function eo(r,e,t,o){if(o==null&&(o=Wp(r)),o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Ho(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(e!=null){fd(e);let n=Ke(e),s=Ke(t);A(n===s,()=>`Based on the provided shape, [${e}], the tensor should have ${n} values but has ${s}`);for(let i=0;i<t.length;++i){let a=t[i],l=i===t.length-1?a!==Ke(e.slice(i)):!0;A(t[i]===e[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `)}}return!Ho(r)&&!Array.isArray(r)&&(r=[r]),e=e||t,r=o!=="string"?Yp(r,o):Wl(r,[],!0),E.makeTensor(r,e,o)}function Tr(r,e,t){let o=Fo(r,t);return eo(r,e,o,t)}var Td={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var ix=4;async function U$(r,e){let t=[],o=[],n=Array.isArray(r)?r.map(i=>i.name):Object.keys(r);for(let i=0;i<n.length;++i){let a=n[i],l=Array.isArray(r)?r[i].tensor:r[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);let u={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){let c=new Promise(async p=>{let m=await l.bytes(),f=m.reduce((g,x)=>g+x.length,0)+ix*m.length,d=new Uint8Array(f),h=0;for(let g=0;g<m.length;g++){let x=m[g],b=new Uint8Array(new Uint32Array([x.length]).buffer);d.set(b,h),h+=ix,d.set(x,h),h+=x.length}p(d)});o.push(c)}else o.push(l.data());e!=null&&(u.group=e),t.push(u)}let s=await Promise.all(o);return{data:R6(s),specs:t}}function ax(r,e){let t={},o,n=0;for(let s of e){let i=s.name,a=s.dtype,l=s.shape,u=Ke(l),c;if("quantization"in s){let p=s.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(a!=="float32")throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${a}.`)}else throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let m=Td[p.dtype],f=r.slice(n,n+u*m),d=p.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(a==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){c=new Float32Array(d.length);for(let h=0;h<d.length;h++){let g=d[h];c[h]=g*p.scale+p.min}}else if(p.dtype==="float16")o===void 0&&(o=_6()),c=o(d);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(a==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);c=new Int32Array(d.length);for(let h=0;h<d.length;h++){let g=d[h];c[h]=Math.round(g*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*m}else if(a==="string"){let p=Ke(s.shape);c=[];for(let m=0;m<p;m++){let f=new Uint32Array(r.slice(n,n+ix))[0];n+=ix;let d=new Uint8Array(r.slice(n,n+f));c.push(d),n+=f}}else{let p=Td[a],m=r.slice(n,n+u*p);if(a==="float32")c=new Float32Array(m);else if(a==="int32")c=new Int32Array(m);else if(a==="bool")c=new Uint8Array(m);else if(a==="complex64"){c=new Float32Array(m);let f=new Float32Array(c.length/2),d=new Float32Array(c.length/2);for(let x=0;x<f.length;x++)f[x]=c[x*2],d[x]=c[x*2+1];let h=Tr(f,l,"float32"),g=Tr(d,l,"float32");t[i]=_o(h,g),h.dispose(),g.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*p}a!=="complex64"&&(t[i]=Tr(c,l,a))}return t}function R6(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let e=0,t=[];r.forEach(s=>{if(e+=s.byteLength,t.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(e),n=0;return t.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var Tv=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function G$(r){return Tv?Buffer.byteLength(r):new Blob([r]).size}function W$(r){if(Tv)return Buffer.from(r).toString("base64");let e=new Uint8Array(r),t="";for(let o=0,n=e.length;o<n;o++)t+=String.fromCharCode(e[o]);return btoa(t)}function H$(r){if(Tv){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let e=atob(r),t=new Uint8Array(e.length);for(let o=0;o<e.length;++o)t.set([e.charCodeAt(o)],o);return t.buffer}function em(r){if(r.length===1)return r[0];let e=0;r.forEach(n=>{e+=n.byteLength});let t=new Uint8Array(e),o=0;return r.forEach(n=>{t.set(new Uint8Array(n),o),o+=n.byteLength}),t.buffer}function kv(r){let e="/";for(r=r.trim();r.endsWith(e);)r=r.slice(0,r.length-1);let t=r.split(e);return t[t.length-1]}function lx(r,e){let t={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:e};return r.signature!=null&&(t.signature=r.signature),r.userDefinedMetadata!=null&&(t.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(t.modelInitializer=r.modelInitializer),r.trainingConfig!=null&&(t.trainingConfig=r.trainingConfig),t}async function tm(r,e){let t={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(t.trainingConfig=r.trainingConfig),r.weightsManifest!=null){let[o,n]=await e(r.weightsManifest);t.weightSpecs=o,t.weightData=n}return r.signature!=null&&(t.signature=r.signature),r.userDefinedMetadata!=null&&(t.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(t.modelInitializer=r.modelInitializer),t}function Fa(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:G$(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:G$(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function A6(){let r=t=>{let o=t<<13,n=0;for(;(o&8388608)===0;)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},e=new Uint32Array(2048);e[0]=0;for(let t=1;t<1024;t++)e[t]=r(t);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}function D6(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let e=1;e<31;e++)r[e]=e<<23;for(let e=33;e<63;e++)r[e]=2147483648+(e-32<<23);return r}function F6(){let r=new Uint32Array(64);for(let e=0;e<64;e++)r[e]=1024;return r[0]=r[32]=0,r}function _6(){let r=A6(),e=D6(),t=F6();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let i=0;i<o.length;i++){let a=o[i],l=r[t[a>>10]+(a&1023)]+e[a>>10];s[i]=l}return new Float32Array(n)}}var xt=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return xt.instance==null&&(xt.instance=new xt),xt.instance}static registerSaveRouter(e){xt.getInstance().saveRouters.push(e)}static registerLoadRouter(e){xt.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return xt.getHandlers(e,"save")}static getLoadHandlers(e,t){return xt.getHandlers(e,"load",t)}static getHandlers(e,t,o){let n=[];return(t==="load"?xt.getInstance().loadRouters:xt.getInstance().saveRouters).forEach(i=>{let a=i(e,o);a!==null&&n.push(a)}),n}},K$=r=>xt.registerSaveRouter(r),q$=r=>xt.registerLoadRouter(r),X$=r=>xt.getSaveHandlers(r),j$=(r,e)=>xt.getLoadHandlers(r,e);var Nv="tensorflowjs",$v=1,Nc="models_store",$u="model_info_store";function Y$(){if(!D().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window>"u"?self:window,e=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(e==null)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Ev(r){let e=r.result;e.createObjectStore(Nc,{keyPath:"modelPath"}),e.createObjectStore($u,{keyPath:"modelPath"})}var _a=class{constructor(e){if(this.indexedDB=Y$(),e==null||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((o,n)=>{let s=this.indexedDB.open(Nv,$v);s.onupgradeneeded=()=>Ev(s),s.onsuccess=()=>{let i=s.result;if(t==null){let a=i.transaction(Nc,"readonly"),u=a.objectStore(Nc).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return i.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(i.close(),n(u.error)),a.oncomplete=()=>i.close()}else{let a=Fa(t),l=i.transaction($u,"readwrite"),u=l.objectStore($u),c=u.put({modelPath:this.modelPath,modelArtifactsInfo:a}),p;c.onsuccess=()=>{p=i.transaction(Nc,"readwrite");let f=p.objectStore(Nc).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:a});f.onsuccess=()=>o({modelArtifactsInfo:a}),f.onerror=d=>{u=l.objectStore($u);let h=u.delete(this.modelPath);h.onsuccess=()=>(i.close(),n(f.error)),h.onerror=g=>(i.close(),n(f.error))}},c.onerror=m=>(i.close(),n(c.error)),l.oncomplete=()=>{p==null?i.close():p.oncomplete=()=>i.close()}}},s.onerror=i=>n(s.error)})}};_a.URL_SCHEME="indexeddb://";var Q$=r=>D().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(_a.URL_SCHEME)?O6(r.slice(_a.URL_SCHEME.length)):null;xt.registerSaveRouter(Q$);xt.registerLoadRouter(Q$);function O6(r){return new _a(r)}function P6(r){return r.startsWith(_a.URL_SCHEME)?r.slice(_a.URL_SCHEME.length):r}var ux=class{constructor(){this.indexedDB=Y$()}async listModels(){return new Promise((e,t)=>{let o=this.indexedDB.open(Nv,$v);o.onupgradeneeded=()=>Ev(o),o.onsuccess=()=>{let n=o.result,s=n.transaction($u,"readonly"),a=s.objectStore($u).getAll();a.onsuccess=()=>{let l={};for(let u of a.result)l[u.modelPath]=u.modelArtifactsInfo;e(l)},a.onerror=l=>(n.close(),t(a.error)),s.oncomplete=()=>n.close()},o.onerror=n=>t(o.error)})}async removeModel(e){return e=P6(e),new Promise((t,o)=>{let n=this.indexedDB.open(Nv,$v);n.onupgradeneeded=()=>Ev(n),n.onsuccess=()=>{let s=n.result,i=s.transaction($u,"readwrite"),a=i.objectStore($u),l=a.get(e),u;l.onsuccess=()=>{if(l.result==null)return s.close(),o(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{let c=a.delete(e),p=()=>{u=s.transaction(Nc,"readwrite");let f=u.objectStore(Nc).delete(e);f.onsuccess=()=>t(l.result.modelArtifactsInfo),f.onerror=d=>o(l.error)};c.onsuccess=p,c.onerror=m=>(p(),s.close(),o(l.error))}},l.onerror=c=>(s.close(),o(l.error)),i.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var fl="/",rm="tensorflowjs_models",Z$="info",L6="model_topology",z6="weight_specs",B6="weight_data",M6="model_metadata";function J$(r){return{info:[rm,r,Z$].join(fl),topology:[rm,r,L6].join(fl),weightSpecs:[rm,r,z6].join(fl),weightData:[rm,r,B6].join(fl),modelMetadata:[rm,r,M6].join(fl)}}function e2(r){for(let e of Object.values(r))window.localStorage.removeItem(e)}function V6(r){let e=r.split(fl);if(e.length<3)throw new Error(`Invalid key format: ${r}`);return e.slice(1,e.length-1).join(fl)}function G6(r){return r.startsWith(Oa.URL_SCHEME)?r.slice(Oa.URL_SCHEME.length):r}var Oa=class{constructor(e){if(!D().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,e==null||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=J$(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),n=Fa(e);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,W$(e.weightData));let s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:e.signature!=null?e.signature:void 0,userDefinedMetadata:e.userDefinedMetadata!=null?e.userDefinedMetadata:void 0,modelInitializer:e.modelInitializer!=null?e.modelInitializer:void 0,trainingConfig:e.trainingConfig!=null?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:n}}catch{throw e2(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(e==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(e.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let a=JSON.parse(s);t.format=a.format,t.generatedBy=a.generatedBy,t.convertedBy=a.convertedBy,a.signature!=null&&(t.signature=a.signature),a.userDefinedMetadata!=null&&(t.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(t.modelInitializer=a.modelInitializer),a.trainingConfig!=null&&(t.trainingConfig=a.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=H$(i),t}};Oa.URL_SCHEME="localstorage://";var t2=r=>D().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Oa.URL_SCHEME)?U6(r.slice(Oa.URL_SCHEME.length)):null;xt.registerSaveRouter(t2);xt.registerLoadRouter(t2);function U6(r){return new Oa(r)}var cx=class{constructor(){A(D().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),A(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=rm+fl,o=fl+Z$;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(t)&&s.endsWith(o)){let i=V6(s);e[i]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){e=G6(e);let t=J$(e);if(this.LS.getItem(t.info)==null)throw new Error(`Cannot find model at path '${e}'`);let o=JSON.parse(this.LS.getItem(t.info));return e2(t),o}};var om="://",kr=class{constructor(){this.managers={}}static getInstance(){return kr.instance==null&&(kr.instance=new kr),kr.instance}static registerManager(e,t){A(e!=null,()=>"scheme must not be undefined or null."),e.endsWith(om)&&(e=e.slice(0,e.indexOf(om))),A(e.length>0,()=>"scheme must not be an empty string.");let o=kr.getInstance();A(o.managers[e]==null,()=>`A model store manager is already registered for scheme '${e}'.`),o.managers[e]=t}static getManager(e){let t=kr.getInstance().managers[e];if(t==null)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(kr.getInstance().managers)}};function px(r){if(r.indexOf(om)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${kr.getSchemes().join(",")}`);return{scheme:r.split(om)[0],path:r.split(om)[1]}}async function r2(r,e,t=!1){A(r!==e,()=>`Old path and new path are the same: '${r}'`);let o=xt.getLoadHandlers(r);A(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),A(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=xt.getSaveHandlers(e);A(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),A(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${e}.`);let i=s[0],a=px(r).scheme,l=px(r).path,u=a===px(r).scheme,c=await n.load();t&&u&&await kr.getManager(a).removeModel(l);let p=await i.save(c);return t&&!u&&await kr.getManager(a).removeModel(l),p.modelArtifactsInfo}async function o2(){let r=kr.getSchemes(),e={};for(let t of r){let o=await kr.getManager(t).listModels();for(let n in o){let s=t+om+n;e[s]=o[n]}}return e}async function n2(r){let e=px(r);return kr.getManager(e.scheme).removeModel(e.path)}async function s2(r,e){return r2(r,e,!1)}async function i2(r,e){return r2(r,e,!0)}var Rv=class{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}};if(D().get("IS_BROWSER")){D().setPlatform("browser",new Rv);try{kr.registerManager(Oa.URL_SCHEME,new cx)}catch{}try{kr.registerManager(_a.URL_SCHEME,new ux)}catch{}}var W6={importFetch:()=>a2()},Av;var Dv=class{constructor(){this.util=l2(),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return D().global.fetch!=null?D().global.fetch(e,t):(Av==null&&(Av=W6.importFetch()),Av(e,t))}now(){let e=process.hrtime();return e[0]*1e3+e[1]/1e6}encode(e,t){if(t!=="utf-8"&&t!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return e.length===0?"":new this.util.TextDecoder(t).decode(e)}};D().get("IS_NODE")&&!D().get("IS_BROWSER")&&D().setPlatform("node",new Dv);function te(r,e="float32",t){return e=e||"float32",fd(r),new Je(r,e,t)}function H6(r,e){let t=T(r,"x","cast");if(!ev(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(e==="string"&&t.dtype!=="string"||e!=="string"&&t.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:t},n={dtype:e};return E.runKernel(go,o,n)}var j=k({cast_:H6});function K6(r){let t={x:T(r,"x","clone","string_or_numeric")};return E.runKernel(So,t)}var to=k({clone_:K6});function mx(r,e=!1){console.log(r.toString(e))}wv();var q6={buffer:te,cast:j,clone:to,print:mx};L$(q6);var Li={};lt(Li,{browserFiles:()=>c2,browserHTTPRequest:()=>f2,concatenateArrayBuffers:()=>em,copyModel:()=>s2,decodeWeights:()=>ax,encodeWeights:()=>U$,fromMemory:()=>d2,fromMemorySync:()=>zv,getLoadHandlers:()=>j$,getModelArtifactsForJSON:()=>tm,getModelArtifactsInfoForJSON:()=>Fa,getSaveHandlers:()=>X$,http:()=>dx,isHTTPScheme:()=>fx,listModels:()=>o2,loadWeights:()=>p2,moveModel:()=>i2,registerLoadRouter:()=>q$,registerSaveRouter:()=>K$,removeModel:()=>n2,weightsLoaderFactory:()=>Pv,withSaveHandler:()=>h2,withSaveHandlerSync:()=>g2});var X6="model",j6=".json",Y6=".weights.bin";function u2(r){return new Promise(e=>setTimeout(e)).then(r)}var dl=class{constructor(e){if(!D().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(dl.URL_SCHEME)&&(e=e.slice(dl.URL_SCHEME.length)),(e==null||e.length===0)&&(e=X6),this.modelJsonFileName=e+j6,this.weightDataFileName=e+Y6}async save(e){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let o=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],n=lx(e,o),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=s,await u2(()=>i.dispatchEvent(new MouseEvent("click"))),e.weightData!=null){let a=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;a.download=this.weightDataFileName,a.href=t,await u2(()=>a.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Fa(e)}}}};dl.URL_SCHEME="downloads://";var Fv=class{constructor(e){if(e==null||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),i=s.modelTopology;if(i==null){t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){e({modelTopology:i});return}let l=tm(s,u=>this.loadWeights(u));e(l)},o.onerror=n=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(e){let t=[],o=[];for(let i of e)t.push(...i.weights),o.push(...i.paths);let n=this.checkManifestAndWeightFiles(e),s=o.map(i=>this.loadWeightsFile(i,n[i]));return Promise.all(s).then(i=>[t,em(i)])}loadWeightsFile(e,t){return new Promise((o,n)=>{let s=new FileReader;s.onload=i=>{let a=i.target.result;o(a)},s.onerror=i=>n(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){let t=[],o=this.weightsFiles.map(s=>kv(s.name)),n={};for(let s of e)s.paths.forEach(i=>{let a=kv(i);if(t.indexOf(a)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),o.indexOf(a)===-1)throw new Error(`Weight file with basename '${a}' is not provided.`);n[i]=this.weightsFiles[o.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},Q6=r=>D().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(dl.URL_SCHEME)?Z6(r.slice(dl.URL_SCHEME.length)):null;xt.registerSaveRouter(Q6);function Z6(r="model"){return new dl(r)}function c2(r){return new Fv(r)}function _v(r,e,t,o){i(r),t=t??0,o=o??1,a(t,o);let n=0,s=l=>(l.then(u=>{let c=t+ ++n/r.length*(o-t);return e(c),u}),l);function i(l){A(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")}function a(l,u){A(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),A(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),A(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}return Promise.all(r.map(s))}async function Ov(r,e){e==null&&(e={});let t=e.fetchFunc==null?D().platform.fetch:e.fetchFunc,o=r.map(p=>t(p,e.requestInit,{isBinary:!0})),n=0,s=.5,a=(e.onProgress==null?await Promise.all(o):await _v(o,e.onProgress,n,s)).map(p=>p.arrayBuffer()),l=.5,u=1;return e.onProgress==null?await Promise.all(a):await _v(a,e.onProgress,l,u)}async function p2(r,e="",t,o){return Pv(i=>Ov(i,{requestInit:o}))(r,e,t)}function Pv(r){return async(e,t="",o)=>{let n=e.map(()=>!1),s={},i=o!=null?o.map(()=>!1):[],a=[];if(e.forEach((f,d)=>{let h=0;f.weights.forEach(g=>{let x="quantization"in g?g.quantization.dtype:g.dtype,b=Td[x]*Ke(g.shape),C=()=>{n[d]=!0,s[d]==null&&(s[d]=[]),s[d].push({manifestEntry:g,groupOffset:h,sizeBytes:b})};o!=null?o.forEach((S,I)=>{S===g.name&&(C(),i[I]=!0)}):C(),a.push(g.name),h+=b})}),!i.every(f=>f)){let f=o.filter((d,h)=>!i[h]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`)}let l=n.reduce((f,d,h)=>(d&&f.push(h),f),[]),u=[];l.forEach(f=>{e[f].paths.forEach(d=>{let h=t+(t.endsWith("/")?"":"/")+d;u.push(h)})});let c=await r(u),p={},m=0;return l.forEach(f=>{let d=e[f].paths.length,h=0;for(let S=0;S<d;S++)h+=c[m+S].byteLength;let g=new ArrayBuffer(h),x=new Uint8Array(g),b=0;for(let S=0;S<d;S++){let I=new Uint8Array(c[m+S]);x.set(I,b),b+=I.byteLength}s[f].forEach(S=>{let I=g.slice(S.groupOffset,S.groupOffset+S.sizeBytes),N=ax(I,[S.manifestEntry]);for(let $ in N)p[$]=N[$]}),m+=d}),p}}var J6="application/octet-stream",e5="application/json",kd=class{constructor(e,t){if(this.DEFAULT_METHOD="POST",t==null&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,t.fetchFunc!=null?(A(typeof t.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=D().platform.fetch,A(e!=null&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&A(e.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,t.requestInit!=null&&t.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],n=lx(e,o);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:e5}),"model.json"),e.weightData!=null&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:J6}),"model.weights.bin");let s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Fa(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=t.modelTopology,n=t.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return tm(t,s=>this.loadWeights(s))}async loadWeights(e){let t=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=t5(t),s=this.weightPathPrefix||o,i=[];for(let c of e)i.push(...c.weights);let a=[],l=[];for(let c of e)for(let p of c.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(p)):a.push(s+p+n);this.weightUrlConverter&&a.push(...await Promise.all(l));let u=await Ov(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,em(u)]}};kd.URL_SCHEME_REGEX=/^https?:\/\//;function t5(r){let e=r.lastIndexOf("/"),t=r.lastIndexOf("?"),o=r.substring(0,e),n=t>e?r.substring(t):"";return[o+"/",n]}function fx(r){return r.match(kd.URL_SCHEME_REGEX)!=null}var m2=(r,e)=>{if(typeof fetch>"u"&&(e==null||e.fetchFunc==null))return null;{let t=!0;if(Array.isArray(r)?t=r.every(o=>fx(o)):t=fx(r),t)return dx(r,e)}return null};xt.registerSaveRouter(m2);xt.registerLoadRouter(m2);function dx(r,e){return new kd(r,e)}function f2(r,e){return dx(r,e)}var Nd=class{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}},hx=class{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}},Lv=class{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}};function d2(r,e,t,o){let n=arguments;return new Lv(zv(...n))}function zv(r,e,t,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new Nd(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Nd({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Nd({modelTopology:r,weightSpecs:e,weightData:t,trainingConfig:o}))}function h2(r){return new hx(r)}function g2(r){return new hx(r)}function r5(r,e,t=!1,o=!1){let n=T(r,"a","matMul"),s=T(e,"b","matMul");[n,s]=Ue(n,s);let i={a:n,b:s},a={transposeA:t,transposeB:o};return E.runKernel(ts,i,a)}var Ge=k({matMul_:r5});function o5(r,e,t=1,o=0,n="int32"){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);let i={indices:T(r,"indices","oneHot","int32")},a={dtype:n,depth:e,onValue:t,offValue:o};return E.runKernel(Ca,i,a)}var $c=k({oneHot_:o5});function n5(r){D().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}z$(n5);function sr(){return E}function $d(){return E.memory()}function M(r,e){return E.tidy(r,e)}function ke(r){vd(r).forEach(t=>t.dispose())}function Nt(r){return E.keep(r)}function gx(r){return E.setBackend(r)}function x2(){return E.ready()}function y2(){return E.backendName}function Eu(r,e,t=1){return E.registerBackend(r,e,t)}function b2(){return E.backend}function s5(r){let t={input:T(r,"input","imag")};return E.runKernel(ha,t)}var Ru=k({imag_:s5});function i5(r){let t={x:T(r,"x","neg")};return E.runKernel(Tn,t)}var We=k({neg_:i5});function a5(r){let t={input:T(r,"input","real")};return E.runKernel(Ti,t)}var hl=k({real_:a5});function l5(r,e,t){let o=T(r,"x","transpose");if(e==null&&(e=o.shape.map((i,a)=>a).reverse()),A(o.rank===e.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${e}.`),e.forEach(i=>{A(i>=0&&i<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${e}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:e};return o.dtype==="complex64"?M(()=>{let i=hl(o),a=Ru(o);return i=E.runKernel(qo,{x:i},s),a=E.runKernel(qo,{x:a},s),t&&(a=We(a)),_o(i,a)}):E.runKernel(qo,n,s)}var Pe=k({transpose_:l5});var Or={};lt(Or,{assertAndGetBroadcastShape:()=>_e,getBroadcastDims:()=>C2,getReductionAxes:()=>pt});function C2(r,e){let t=r.length,o=[];for(let n=0;n<t;n++){let s=t-1-n,i=r[s]||1;(e[e.length-1-n]||1)>1&&i===1&&o.unshift(s)}return o}function pt(r,e){let t=[];for(let o=0;o<e.length;o++){let n=r[r.length-o-1],s=e.length-o-1,i=e[s];(n==null||n===1&&i>1)&&t.unshift(s)}return t}function _e(r,e){let t=[],o=Math.max(r.length,e.length);for(let n=0;n<o;n++){let s=r[r.length-n-1];s==null&&(s=1);let i=e[e.length-n-1];if(i==null&&(i=1),s===1)t.unshift(i);else if(i===1)t.unshift(s);else if(s!==i){let a=`Operands could not be broadcast together with shapes ${r} and ${e}.`;throw Error(a)}else t.unshift(s)}return t}var nm={};lt(nm,{fromPixels:()=>h5,fromPixelsAsync:()=>f5,toPixels:()=>d5});function xx(r,e,t){if(pn(r),e!=null&&e.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=Fo(r,t);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return eo(r,e,o,t)}var Ec;function w2(r,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let t=!1,o=!1,n=!1,s=!1,i=!1,a=!1;if(r.data instanceof Uint8Array)t=!0;else if(typeof ImageData<"u"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)i=!0;else if(typeof ImageBitmap<"u"&&r instanceof ImageBitmap)a=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(bd(pl,E.backendName)!=null){let d={pixels:r},h={numChannels:e};return E.runKernel(pl,d,h)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],p;if(i)p=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||t)p=r.data;else if(s||n||a){if(Ec==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")Ec=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else Ec=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Ec.canvas.width=u,Ec.canvas.height=c,Ec.drawImage(r,0,0,u,c),p=Ec.getImageData(0,0,u,c).data}let m;if(e===4)m=new Int32Array(p);else{let d=u*c;m=new Int32Array(d*e);for(let h=0;h<d;h++)for(let g=0;g<e;++g)m[h*e+g]=p[h*4+g]}return xx(m,[c,u,e],"int32")}function u5(r){return r!=null&&r.data instanceof Uint8Array}function c5(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}function p5(r){return r!=null&&r.width!==0&&r.height!==0}function m5(r){return c5()&&!(r instanceof ImageBitmap)&&p5(r)&&!u5(r)}async function f5(r,e=3){let t=null;if(D().getBool("WRAP_TO_IMAGEBITMAP")&&m5(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch{o=null}o!=null&&o.width===r.width&&o.height===r.height?t=o:t=r}else t=r;return w2(t,e)}async function d5(r,e){let t=T(r,"img","toPixels");if(!(r instanceof Ve)){let u=t;t=j(u,"int32"),u.dispose()}if(t.rank!==2&&t.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${t.rank}.`);let[o,n]=t.shape.slice(0,2),s=t.rank===2?1:t.shape[2];if(s>4||s===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if(t.dtype!=="float32"&&t.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${t.dtype}. Please use float32 or int32 tensors.`);let i=await t.data(),a=t.dtype==="float32"?255:1,l=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let f=i[u*s+m];if(t.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(t.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);s===1?(c[0]=f*a,c[1]=f*a,c[2]=f*a):c[m]=f*a}let p=u*4;l[p+0]=Math.round(c[0]),l[p+1]=Math.round(c[1]),l[p+2]=Math.round(c[2]),l[p+3]=Math.round(c[3])}if(e!=null){e.width=n,e.height=o;let u=e.getContext("2d"),c=new ImageData(l,n,o);u.putImageData(c,0,0)}return t!==r&&t.dispose(),l}var h5=k({fromPixels_:w2});function g5(r,e){let t=r.shape.length,o=e.shape.length;if(t<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(e.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[o-1]>t)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[o-1]} vs. ${t}`);if(Ke(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=e.shape,s=n[n.length-1],i=1;for(let p=0;p<n.length-1;++p)i*=n[p];let a=r.shape,l=n.slice();l.pop();let u=1;for(let p=s;p<t;++p)u*=a[p],l.push(a[p]);let c=[...oa(r.shape).map(p=>p/u),1].slice(0,s);return[l,i,u,c]}function S2(r,e,t){let o=e.rank>1?e.shape[e.rank-1]:1,n=e.rank>1?e.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(t.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(t.rank-n))throw new Error(s+` Output shape length < ${o+(t.rank-n)}`);if(t.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let i=0;i<n;++i)if(t.shape[i]!==e.shape[i])throw new Error(s+` updates.shape[${i}] (${t.shape[i]}) != indices.shape[${i}] (${e.shape[i]}).`);for(let i=0;i<t.rank-n;++i)if(t.shape[i+n]!==r[i+o])throw new Error(s+` updates.shape[${i+n}] (${t.shape[i+n]}) != shape[${i+n}] (${r[i+n]})`)}function Bv(r,e,t){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(e.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(t.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);if(t.length===0){if(e.size===0)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}S2(t,e,r)}function x5(r,e,t){let o=e.shape.length,n=o>1?e.shape[o-1]:1,s=t.length,i=1;for(let p=n;p<s;++p)i*=t[p];let a=n<1?1:n,l=Ke(e.shape)/a,u=[...oa(t.slice(0,n)),1],c=Ke(t);return{sliceRank:n,numUpdates:l,sliceSize:i,strides:u,outputSize:c}}var rt={};lt(rt,{assertParamsValid:()=>C5,computeFlatOffset:()=>T5,computeOutShape:()=>S5,getNormalizedAxes:()=>I5,isSliceContinous:()=>v5,maskToAxes:()=>w5,parseSliceParams:()=>Vv,sliceInfo:()=>k5,startForAxis:()=>R2,startIndicesWithElidedDims:()=>N2,stopForAxis:()=>A2,stopIndicesWithElidedDims:()=>$2,stridesForAxis:()=>E2,stridesWithElidedDims:()=>v2});var Mv=-2,b5=-1;function C5(r,e,t){let o=r.shape.length;A(o===e.length,()=>`Error in slice${o}D: Length of begin ${e} must match the rank of the array (${o}).`),A(o===t.length,()=>`Error in slice${o}D: Length of size ${t} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)A(e[n]+t[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${e[n]+t[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function w5(r){let e=[],t=0;for(;r>0;)r&1&&e.push(t),r/=2,t++;return e}function S5(r,e,t){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((e[n]-r[n])/t[n]);return o}function v2(r,e,t,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<t;s++)s===0?n[e]=1:(n.splice(e,0,1),n.pop());return n}function T2(r,e,t){return t<=r?t:t-(e-1)}function k2(r,e){let t=[];for(let o=0;o<r;o++)t.push(e+o);return t}function I5(r,e,t,o,n,s,i,a,l){let u=r.length,c=new Array(u),p=new Array(u),m=new Array(u);if(e.length&&t>0){let f=e[0],d=t+1;c=N2(i,f,d,o,r),p=$2(a,f,d,n,r),m=v2(s,f,d,r)}else for(let f=0;f<u;f++)c[f]=R2(i,o,s,r,f,l),p[f]=A2(a,n,s,r,f,l),m[f]=E2(s,f,l);return{begin:c,end:p,strides:m}}function N2(r,e,t,o,n){let s=[...n],i=k2(t,e);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{let l=T2(e,t,a),u=o[l];r&1<<l&&(u=0),s[a]=u}return s}function $2(r,e,t,o,n){let s=[...n],i=k2(t,e);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{let l=T2(e,t,a),u=o[l];r&1<<l&&(u=Number.MAX_SAFE_INTEGER),s[a]=u}for(let a=0;a<s.length;a++){let l=n[a];s[a]<0&&(s[a]+=l),s[a]=Gp(0,s[a],n[a])}return s}function E2(r,e,t){let o=r[e];return(t&1<<e||o==null)&&(o=1),o}function R2(r,e,t,o,n,s){let i=e[n],a=t[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),i=Gp(0,i,l-1),i}function A2(r,e,t,o,n,s){let i=e[n],a=t[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),a>0?i=Gp(0,i,l):i=Gp(-1,i,l-1),i}function v5(r,e,t){let o=t.length;for(let n=0;n<t.length;n++)if(t[n]>1){o=n;break}for(let n=o+1;n<t.length;n++)if(e[n]>0||t[n]!==r[n])return!1;return!0}function T5(r,e){let t=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)t+=r[o]*e[o];return t}function Vv(r,e,t){let o,n=r.shape.length;typeof e=="number"?o=[e,...new Array(n-1).fill(0)]:e.length<n?o=e.concat(new Array(n-e.length).fill(0)):o=e.slice(),o.forEach(i=>{A(i!==-1,()=>"slice() does not support negative begin indexing.")});let s;return t==null?s=new Array(n).fill(-1):typeof t=="number"?s=[t,...new Array(n-1).fill(-1)]:t.length<n?s=t.concat(new Array(n-t.length).fill(-1)):s=t,s=s.map((i,a)=>i>=0?i:(A(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),r.shape[a]-o[a])),[o,s]}function k5(r,e,t,o,n,s,i,a,l){let u;if(o==null?(u=new Array(e.length),u.fill(1)):u=o,i!=null&&(i&i-1)!==0)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:t.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let C=0;C<p.dims;C++)c&&(1<<C&a)!==0&&p.numAddAxisAfterEllipsis++,1<<C&i&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};N5(p,m);let f=!0,d=!0,h=!0,g=[],x=[];for(let C=0;C<r.length;++C){if(m.strides[C]===0)throw Error(`strides[${C}] must be non-zero`);let S=!!(m.shrinkAxisMask&1<<C),I=r[C];if(I===-1){g.push(S?1:-1);continue}let N=[m.beginMask&1<<C,m.endMask&1<<C],$=[m.strides[C]>0?0:-1,m.strides[C]>0?I:I-1];if(S&&m.strides[C]<=0)throw Error("only stride 1 allowed on non-range indexing.");h=h&&m.strides[C]===1;let R=!!(m.beginMask&1<<C&&m.endMask&1<<C);if(m.beginValid&&m.endValid){if(S){let V=m.begin[C]<0?I+m.begin[C]:m.begin[C];if(m.begin[C]=V,m.end[C]=m.begin[C]+1,V<0||V>=I)throw Error(`slice index ${m.begin[C]} of dimension ${C} out of bounds.`)}else m.begin[C]=I2(m.begin[C],0,m.strides[C],I,N,$),m.end[C]=I2(m.end[C],1,m.strides[C],I,N,$);let B=m.strides[C]===1&&m.begin[C]===0&&m.end[C]===I;f=f&&B,d=d&&(C===0&&m.strides[C]===1||B)}else f=f&&m.strides[C]===1&&R,d=d&&(C===0&&m.strides[C]===1||R);let F,_=!1;if(m.beginValid&&m.endValid?(F=m.end[C]-m.begin[C],_=!0):S?(F=1,_=!0):R&&I>=0&&(m.strides[C]<0?F=-I:F=I,_=!0),_){let B;F===0||F<0!=m.strides[C]<0?B=0:B=Math.trunc(F/m.strides[C])+(F%m.strides[C]!==0?1:0),g.push(B)}else g.push(-1)}for(let C=0;C<m.finalShapeGatherIndices.length;++C){let S=m.finalShapeGatherIndices[C];S>=0?x.push(g[S]):S===Mv&&x.push(1)}return{finalShapeSparse:x.filter((C,S)=>m.finalShapeGatherIndices[S]!==Mv),finalShape:x,isIdentity:f,sliceDim0:d,isSimpleSlice:h,begin:m.begin,end:m.end,strides:m.strides}}function N5(r,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let t=0;e.beginValid=r.begin!=null,e.endValid=r.end!=null,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(e.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,e.dims);for(;t<n;t++)e.begin[t]=0,e.end[t]=0,e.strides[t]=1,e.beginMask|=1<<t,e.endMask|=1<<t,e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[t]=o}else if(1<<o&r.newAxisMask)e.finalShapeGatherIndices.push(Mv),e.finalShapeGatherIndicesSparse.push(-1);else{if(t===e.begin.length)throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);r.begin!=null&&(e.begin[t]=r.begin[o]),r.end!=null&&(e.end[t]=r.end[o]),e.strides[t]=r.strides[o],r.beginMask&1<<o&&(e.beginMask|=1<<t),r.endMask&1<<o&&(e.endMask|=1<<t),r.shrinkAxisMask&1<<o?(e.finalShapeGatherIndices.push(b5),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<t):(e.finalShapeGatherIndices.push(t),e.finalShapeGatherIndicesSparse.push(o)),e.inputShapeGatherIndicesSparse[t]=o,t++}}function I2(r,e,t,o,n,s){if(n[e])return t>0?s[e]:s[e+1&1];{let i=r<0?o+r:r;return i<s[0]?s[0]:i>s[1]?s[1]:i}}var Y={};lt(Y,{Serializable:()=>Ed,SerializationMap:()=>Pa,registerClass:()=>Oo});var Ed=class{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}},Pa=class{constructor(){this.classNameMap={}}static getMap(){return Pa.instance==null&&(Pa.instance=new Pa),Pa.instance}static register(e){Pa.getMap().classNameMap[e.className]=[e,e.fromConfig]}};function Oo(r){A(r.className!=null,()=>"Class being registered does not have the static className property defined."),A(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),A(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Pa.register(r)}var yx="3.20.0";function $5(r,e){let t=T(r,"a","add"),o=T(e,"b","add");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(Wr,n)}var q=k({add_:$5});function E5(r,e){let t=T(r,"a","floorDiv"),o=T(e,"b","floorDiv");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(Cn,n)}var sm=k({floorDiv_:E5});function R5(r,e){let t=T(r,"a","div"),o=T(e,"b","div");if([t,o]=Ue(t,o),t.dtype==="int32"&&o.dtype==="int32")return sm(t,o);let n={a:t,b:o},s={};return E.runKernel(xn,n,s)}var se=k({div_:R5});function A5(r,e){let t=T(r,"a","mul"),o=T(e,"b","mul");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(ko,n)}var P=k({mul_:A5});function D5(r){let e=T(r,"x","abs");if(e.dtype==="complex64"){let t={x:e};return E.runKernel(sa,t)}else{let t={x:e};return E.runKernel(mn,t)}}var It=k({abs_:D5});function F5(r){let t={x:T(r,"x","acos")};return E.runKernel(pi,t)}var bx=k({acos_:F5});function _5(r){let t={x:T(r,"x","acosh")};return E.runKernel(mi,t)}var Cx=k({acosh_:_5});function O5(r){A(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),A(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let e=r.map((n,s)=>T(n,`tensors${s}`,"addN")),t=e[0];e.forEach(n=>{if(n.dtype!==t.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(n=>{if(!Yn(n.shape,t.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=e;return E.runKernel(Qn,o)}var D2=k({addN_:O5});function P5(r,e=null,t=!1){let n={x:T(r,"x","all","bool")},s={axis:e,keepDims:t};return E.runKernel(Hl,n,s)}var im=k({all_:P5});function L5(r,e=null,t=!1){let n={x:T(r,"x","any","bool")},s={axis:e,keepDims:t};return E.runKernel(Kl,n,s)}var Rc=k({any_:L5});function z5(r,e=0){let o={x:T(r,"x","argMax")},n={axis:e};return E.runKernel(Zn,o,n)}var La=k({argMax_:z5});function B5(r,e=0){let o={x:T(r,"x","argMin")},n={axis:e};return E.runKernel(Jn,o,n)}var wx=k({argMin_:B5});function M5(r){let t={x:T(r,"x","asin")};return E.runKernel(fi,t)}var Sx=k({asin_:M5});function V5(r){let t={x:T(r,"x","asinh")};return E.runKernel(di,t)}var Ix=k({asinh_:V5});function G5(r){let t={x:T(r,"x","atan")};return E.runKernel(hi,t)}var vx=k({atan_:G5});function U5(r,e){let t=T(r,"a","atan2"),o=T(e,"b","atan2");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(fn,n)}var Tx=k({atan2_:U5});function W5(r){let t={x:T(r,"x","atanh")};return E.runKernel(gi,t)}var kx=k({atanh_:W5});function H5(r,e,t,o,n="NHWC",s){let i=r[3],a=[...e,i],l=_2(n);return Dc(r,a,t,s,o,null,null,l)}function Uv(r,e,t,o,n,s,i="channelsLast"){let[a,l]=Nx(e),u;if(i==="channelsLast")u=[a,l,r[3],r[3]];else if(i==="channelsFirst")u=[a,l,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return Dc(r,u,t,o,n,s,!1,i)}function K5(r,e,t,o,n,s,i="NDHWC"){let[a,l,u]=Gv(e),c,p;if(i==="NDHWC")p="channelsLast",c=[a,l,u,r[4],r[4]];else if(i==="NCDHW")p="channelsFirst",c=[a,l,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return F2(r,c,t,o,n,!1,p,s)}function Dc(r,e,t,o,n,s,i=!1,a="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if(a==="channelsLast")[l,u,c,p]=r;else if(a==="channelsFirst")[l,p,u,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[m,f,,d]=e,[h,g]=Nx(t),[x,b]=Nx(o),C=am(m,x),S=am(f,b),{padInfo:I,outHeight:N,outWidth:$}=j5(n,u,c,h,g,C,S,s,a),R=i?d*p:d,F;return a==="channelsFirst"?F=[l,R,N,$]:a==="channelsLast"&&(F=[l,N,$,R]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:p,outHeight:N,outWidth:$,outChannels:R,padInfo:I,strideHeight:h,strideWidth:g,filterHeight:m,filterWidth:f,effectiveFilterHeight:C,effectiveFilterWidth:S,dilationHeight:x,dilationWidth:b,inShape:r,outShape:F,filterShape:e}}function F2(r,e,t,o,n,s=!1,i="channelsLast",a){let[l,u,c,p,m]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[l,u,c,p,m]=r;else if(i==="channelsFirst")[l,m,u,c,p]=r;else throw new Error(`Unknown dataFormat ${i}`);let[f,d,h,,g]=e,[x,b,C]=Gv(t),[S,I,N]=Gv(o),$=am(f,S),R=am(d,I),F=am(h,N),{padInfo:_,outDepth:B,outHeight:V,outWidth:G}=Y5(n,u,c,p,x,b,C,$,R,F,a),W=s?g*m:g,U;return i==="channelsFirst"?U=[l,W,B,V,G]:i==="channelsLast"&&(U=[l,B,V,G,W]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:p,inChannels:m,outDepth:B,outHeight:V,outWidth:G,outChannels:W,padInfo:_,strideDepth:x,strideHeight:b,strideWidth:C,filterDepth:f,filterHeight:d,filterWidth:h,effectiveFilterDepth:$,effectiveFilterHeight:R,effectiveFilterWidth:F,dilationDepth:S,dilationHeight:I,dilationWidth:N,inShape:r,outShape:U,filterShape:e}}function q5(r,e,t,o,n){o==null&&(o=Wv(r,e,t));let s=r[0],i=r[1],a=Ac((s-e+2*o)/t+1,n),l=Ac((i-e+2*o)/t+1,n);return[a,l]}function X5(r,e,t,o,n,s){n==null&&(n=Wv(r,e,o));let i=r[0],a=r[1],l=r[2],u=Ac((i-e+2*n)/o+1,s),c=Ac((a-e+2*n)/o+1,s),p=Ac((l-e+2*n)/o+1,s);return[u,c,p,t]}function Wv(r,e,t,o=1){let n=am(e,o);return Math.floor((r[0]*(t-1)-t+n)/2)}function Nx(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function Gv(r){return typeof r=="number"?[r,r,r]:r}function am(r,e){return e<=1?r:r+(r-1)*(e-1)}function j5(r,e,t,o,n,s,i,a,l){let u,c,p;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let f=q5([e,t],s,o,r,a);c=f[0],p=f[1]}else if(r==="same"){c=Math.ceil(e/o),p=Math.ceil(t/n);let m=Math.max(0,(c-1)*o+s-e),f=Math.max(0,(p-1)*n+i-t),d=Math.floor(m/2),h=m-d,g=Math.floor(f/2),x=f-g;u={top:d,bottom:h,left:g,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-s+1)/o),p=Math.ceil((t-i+1)/n);else if(typeof r=="object"){let m=l==="channelsLast"?r[1][0]:r[2][0],f=l==="channelsLast"?r[1][1]:r[2][1],d=l==="channelsLast"?r[2][0]:r[3][0],h=l==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:f,left:d,right:h,type:m===0&&f===0&&d===0&&h===0?"VALID":"EXPLICIT"},c=Ac((e-s+m+f)/o+1,a),p=Ac((t-i+d+h)/n+1,a)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:p}}function Y5(r,e,t,o,n,s,i,a,l,u,c){let p,m,f,d;if(typeof r=="number"){p={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=X5([e,t,o,1],a,1,n,r,c);m=g[0],f=g[1],d=g[2]}else if(r==="same"){m=Math.ceil(e/n),f=Math.ceil(t/s),d=Math.ceil(o/i);let h=(m-1)*n+a-e,g=(f-1)*s+l-t,x=(d-1)*i+u-o,b=Math.floor(h/2),C=h-b,S=Math.floor(g/2),I=g-S,N=Math.floor(x/2),$=x-N;p={top:S,bottom:I,left:N,right:$,front:b,back:C,type:"SAME"}}else if(r==="valid")p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},m=Math.ceil((e-a+1)/n),f=Math.ceil((t-l+1)/s),d=Math.ceil((o-u+1)/i);else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:p,outDepth:m,outHeight:f,outWidth:d}}function Ac(r,e){if(!e)return Math.trunc(r);switch(e){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${e}`)}}function zn(r){let[e,t,o]=Nx(r);return e===1&&t===1&&o===1}function Nr(r,e){return zn(r)||zn(e)}function _2(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function yt(r,e,t){if(t!=null){if(typeof e=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);if(typeof e=="number")A(ul(e),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);else if(typeof e=="object")e.forEach(o=>{o.forEach(n=>{A(ul(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${t} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${e}`)}}function Q5(r,e){let o={x:T(r,"x","reshape","string_or_numeric")},n={shape:e};return E.runKernel(ws,o,n)}var O=k({reshape_:Q5});function Z5(r,e,t,o,n){let s=T(r,"x","avgPool","float32"),i=1;A(Nr(t,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`);let a=s,l=!1;s.rank===3&&(l=!0,a=O(s,[1,s.shape[0],s.shape[1],s.shape[2]])),A(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),yt("avgPool",o,n);let u={x:a},c={filterSize:e,strides:t,pad:o,dimRoundingMode:n},p=E.runKernel(es,u,c);return p=j(p,s.dtype),l?O(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Au=k({avgPool_:Z5});function J5(r,e,t,o,n,s="NDHWC"){let i=T(r,"x","avgPool3d","float32"),a=i,l=!1;i.rank===4&&(l=!0,a=O(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),A(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),A(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),yt("avgPool3d",o,n);let u={x:a},c={filterSize:e,strides:t,pad:o,dimRoundingMode:n,dataFormat:s},p=E.runKernel(na,u,c);return p=j(p,a.dtype),l?O(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var $x=k({avgPool3d_:J5});function eY(r,e=0){A(r.length>=1,()=>"Pass at least one tensor to concat");let t=kc(r,"tensors","concat","string_or_numeric");if(t[0].dtype==="complex64"&&t.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),t.length===1)return to(t[0]);let o=t,n={axis:e};return E.runKernel(os,o,n)}var et=k({concat_:eY});function tY(r){let t={x:T(r,"x","sigmoid","float32")};return E.runKernel($o,t)}var Hr=k({sigmoid_:tY});function rY(r,e,t){let o=T(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:e,size:t};return E.runKernel(Dn,n,s)}var Ae=k({slice_:rY});function oY(r){let t={x:T(r,"x","tanh","float32")};return E.runKernel(On,t)}var za=k({tanh_:oY});function nY(r,e,t,o,n,s){let i=T(r,"forgetBias","basicLSTMCell"),a=T(e,"lstmKernel","basicLSTMCell"),l=T(t,"lstmBias","basicLSTMCell"),u=T(o,"data","basicLSTMCell"),c=T(n,"c","basicLSTMCell"),p=T(s,"h","basicLSTMCell"),m=et([u,p],1),f=Ge(m,a),d=q(f,l),h=d.shape[0],g=d.shape[1]/4,x=[h,g],b=Ae(d,[0,0],x),C=Ae(d,[0,g],x),S=Ae(d,[0,g*2],x),I=Ae(d,[0,g*3],x),N=q(P(Hr(b),za(C)),P(c,Hr(q(i,S)))),$=P(za(N),Hr(I));return[N,$]}var O2=k({basicLSTMCell_:nY});function sY(r,e,t){let o=T(r,"x","batchToSpaceND"),n=e.reduce((a,l)=>a*l);A(o.rank>=1+e.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${e.length}`),A(t.length===e.length,()=>`crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`),A(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${n}`);let s={x:o},i={blockShape:e,crops:t};return E.runKernel(rs,s,i)}var Du=k({batchToSpaceND_:sY});function P2(r){let e;return r.rank===0||r.rank===1?e=O(r,[1,1,1,r.size]):r.rank===2?e=O(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?e=O(r,[1,r.shape[0],r.shape[1],r.shape[2]]):e=r,e}function iY(r,e,t,o,n,s){s==null&&(s=.001);let i=T(r,"x","batchNorm"),a=T(e,"mean","batchNorm"),l=T(t,"variance","batchNorm"),u;n!=null&&(u=T(n,"scale","batchNorm"));let c;o!=null&&(c=T(o,"offset","batchNorm")),A(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),A(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),A(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:P2(i),scale:u,offset:c,mean:a,variance:l},f={varianceEpsilon:s},d=E.runKernel(us,m,f);return O(d,i.shape)}var Ba=k({batchNorm_:iY});function aY(r,e,t,o,n,s){let i=T(r,"x","batchNorm"),a=T(e,"mean","batchNorm"),l=T(t,"variance","batchNorm"),u;n!=null&&(u=T(n,"scale","batchNorm"));let c;return o!=null&&(c=T(o,"offset","batchNorm")),A(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),A(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),A(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),u!=null&&A(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&A(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ba(i,a,l,c,u,s)}var Ex=k({batchNorm2d_:aY});function lY(r,e,t,o,n,s){let i=T(r,"x","batchNorm"),a=T(e,"mean","batchNorm"),l=T(t,"variance","batchNorm"),u;n!=null&&(u=T(n,"scale","batchNorm"));let c;return o!=null&&(c=T(o,"offset","batchNorm")),A(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),A(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),A(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),u!=null&&A(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&A(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ba(i,a,l,c,u,s)}var Rx=k({batchNorm3d_:lY});function uY(r,e,t,o,n,s){let i=T(r,"x","batchNorm"),a=T(e,"mean","batchNorm"),l=T(t,"variance","batchNorm"),u;n!=null&&(u=T(n,"scale","batchNorm"));let c;return o!=null&&(c=T(o,"offset","batchNorm")),A(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),A(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),A(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),u!=null&&A(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&A(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ba(i,a,l,c,u,s)}var Ax=k({batchNorm4d_:uY});function cY(r,e,t){let o=T(r,"x","bincount"),n=T(e,"weights","bincount");A(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),A(t>=0,()=>`size must be non-negative, but got ${t}.`),A(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},i={size:t};return E.runKernel(jl,s,i)}var Dx=k({bincount_:cY});function pY(r,e){let t=T(r,"s0","broadcastArgs","int32"),o=T(e,"s1","broadcastArgs","int32");if(t.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:t,s1:o};return E.runKernel(Yl,n)}var L2=k({broadcastArgs_:pY});function mY(r,e){let t=T(r,"broadcastTo","x"),o=t.shape;if(e.some(u=>!(u>0)||u%1!==0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<t.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);if(e.length>t.rank){let u=t.shape.slice();for(;u.length<e.length;)u.unshift(1);t=O(t,u)}let n=t.shape,s=Array.from(e);for(let u=e.length-1;u>=0;u--)if(n[u]===e[u])s[u]=1;else if(t.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${e}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return to(t);let a={x:t},l={reps:s};return E.runKernel(Ko,a,l)}var Os=k({broadcastTo_:mY});function fY(r){let t={x:T(r,"x","ceil","float32")};return E.runKernel(xo,t)}var Fx=k({ceil_:fY});function dY(r,e,t){let o=T(r,"x","clipByValue");A(e<=t,()=>`Error in clip: min (${e}) must be less than or equal to max (${t}).`);let n={x:o},s={clipValueMin:e,clipValueMax:t};return E.runKernel(dn,n,s)}var br=k({clipByValue_:dY});function hY(r){return et(r,0)}var _x=k({concat1d_:hY});function gY(r,e){return et(r,e)}var Ox=k({concat2d_:gY});function xY(r,e){return et(r,e)}var Px=k({concat3d_:xY});function yY(r,e){return et(r,e)}var Lx=k({concat4d_:yY});function bY(r,e,t,o,n="NHWC",s=[1,1],i){let a=T(r,"x","conv2d","float32"),l=T(e,"filter","conv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=O(a,[1,a.shape[0],a.shape[1],a.shape[2]])),A(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),A(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),yt("conv2d",o,i);let p=n==="NHWC"?u.shape[3]:u.shape[1];A(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),A(Nr(t,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`);let m={x:u,filter:l},f={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},d=E.runKernel(ns,m,f);return c?O(d,[d.shape[1],d.shape[2],d.shape[3]]):d}var Po=k({conv2d_:bY});function CY(r,e,t,o,n="NWC",s=1,i){let a=T(r,"x","conv1d"),l=T(e,"filter","conv1d"),u=a,c=!1;a.rank===2&&(c=!0,u=O(a,[1,a.shape[0],a.shape[1]])),A(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),A(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),yt("conv1d",o,i),A(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),A(Nr(t,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${s}'`),A(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let p=O(l,[1,l.shape[0],l.shape[1],l.shape[2]]),m=O(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=Po(m,p,[1,t],o,"NHWC",[1,s],i);return c?O(g,[g.shape[2],g.shape[3]]):O(g,[g.shape[0],g.shape[2],g.shape[3]])}var lm=k({conv1d_:CY});function wY(r,e,t,o,n,s="NHWC",i){A(r.length===e.rank,()=>`Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);let a=r,l=e,u=!1;e.rank===3&&(u=!0,l=O(e,[1,e.shape[0],e.shape[1],e.shape[2]]),a=[1,r[0],r[1],r[2]]),A(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),A(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),A(t.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);let c=s==="NHWC"?a[3]:a[1],p=s==="NHWC"?l.shape[3]:l.shape[1];A(c===t.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${t.shape[2]}.`),A(p===t.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${t.shape[3]}.`),yt("conv2dDerInput",n,i);let m={dy:l,filter:t},f={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,inputShape:a},d=E.runKernel(ss,m,f);return u?O(d,[d.shape[1],d.shape[2],d.shape[3]]):d}var um=k({conv2DBackpropInput_:wY});function SY(r,e,t,o,n,s){let i=T(r,"x","conv2dTranspose"),a=T(e,"filter","conv2dTranspose");return um(t,i,a,o,n,"NHWC",s)}var cm=k({conv2dTranspose_:SY});function IY(r,e,t,o,n="NDHWC",s=[1,1,1]){let i=T(r,"x","conv3d"),a=T(e,"filter","conv3d"),l=i,u=!1;i.rank===4&&(u=!0,l=O(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),A(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),A(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),A(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),A(Nr(t,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`),A(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`);let c={x:l,filter:a},p={strides:t,pad:o,dataFormat:n,dilations:s},m=E.runKernel(ia,c,p);return u?O(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var zx=k({conv3d_:IY});function vY(r,e,t,o,n){A(r.length===e.rank,()=>`Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);let s=r,i=e,a=!1;e.rank===4&&(a=!0,i=O(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let l=s[4],u=i.shape[4];A(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),A(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),A(t.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`),A(l===t.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[3]}.`),A(u===t.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${t.shape[4]}.`);let c={dy:i,filter:t},p={pad:n,strides:o,inputShape:s},m=E.runKernel(Jl,c,p);return a?O(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var Bx=k({conv3DBackpropInput_:vY});function TY(r,e,t,o,n){let s=T(r,"x","conv3dTranspose"),i=T(e,"filter","conv3dTranspose");return Bx(t,s,i,o,n)}var Mx=k({conv3dTranspose_:TY});function kY(r){let t={x:T(r,"x","cos","float32")};return E.runKernel(hn,t)}var Fu=k({cos_:kY});function NY(r){let t={x:T(r,"x","cosh","float32")};return E.runKernel(gn,t)}var pm=k({cosh_:NY});function $Y(r,e=0,t=!1,o=!1){let s={x:T(r,"x","cumprod")},i={axis:e,exclusive:t,reverse:o};return E.runKernel(aa,s,i)}var Fc=k({cumprod_:$Y});function EY(r,e=0,t=!1,o=!1){let s={x:T(r,"x","cumsum")},i={axis:e,exclusive:t,reverse:o};return E.runKernel(is,s,i)}var mm=k({cumsum_:EY});function RY(r,e,t,o=!1){let n=T(r,"x","denseBincount"),s=T(e,"weights","denseBincount");A(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),A(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),A(t>=0,()=>`size must be non-negative, but got ${t}.`),A(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let i={x:n,weights:s},a={size:t,binaryOutput:o};return E.runKernel(eu,i,a)}var z2=k({denseBincount_:RY});function AY(r,e,t="NHWC"){let o=T(r,"x","depthToSpace","float32"),n=t==="NHWC"?o.shape[1]:o.shape[2],s=t==="NHWC"?o.shape[2]:o.shape[3],i=t==="NHWC"?o.shape[3]:o.shape[1];A(e>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`),A(n*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${e}  for depthToSpace with input shape
    ${o.shape}`),A(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${e} for depthToSpace with input shape
        ${o.shape}`),A(i%(e*e)===0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${o.shape}`);let a={x:o},l={blockSize:e,dataFormat:t};return E.runKernel(ua,a,l)}var Vx=k({depthToSpace_:AY});function DY(r,e,t,o,n="NHWC",s=[1,1],i){let a=T(r,"x","depthwiseConv2d","float32"),l=T(e,"filter","depthwiseConv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=O(a,[1,a.shape[0],a.shape[1],a.shape[2]])),A(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),A(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p=n==="NHWC"?u.shape[3]:u.shape[1];A(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),yt("depthwiseConv2d",o,i);let m={x:u,filter:l},f={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},d=E.runKernel(as,m,f);return c?O(d,[d.shape[1],d.shape[2],d.shape[3]]):d}var Ma=k({depthwiseConv2d_:DY});function FY(r){let t={x:T(r,"x","diag")};return E.runKernel(ou,t)}var B2=k({diag_:FY});function _Y(r,e,t,o,n=[1,1],s="NHWC"){let i=T(r,"x","dilation2d"),a=T(e,"filter","dilation2d");A(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),A(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),A(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;i.rank===3&&(l=O(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let c={x:l,filter:a},p={strides:t,pad:o,dilations:n},m=E.runKernel(ca,c,p);return u?O(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var Gx=k({dilation2d_:_Y});function OY(r,e){let t=T(r,"a","equal","string_or_numeric"),o=T(e,"b","equal","string_or_numeric");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(bn,n)}var Kr=k({equal_:OY});function PY(r,e,t){let o=T(e,"a","where"),n=T(t,"b","where"),s=T(r,"condition","where","bool"),i=_e(_e(s.shape,o.shape),n.shape),a=Os(s,i),l=Os(o,i),u=Os(n,i),c={condition:a,t:l,e:u};return E.runKernel(vs,c)}var kt=k({where_:PY});function LY(r){let t={x:T(r,"x","zerosLike")};return E.runKernel(Rs,t)}var Se=k({zerosLike_:LY});function zY(r,e){let t=T(r,"a","div"),o=T(e,"b","div");[t,o]=Ue(t,o);let n=se(t,o),s=Se(n),i=Kr(o,s);return kt(i,s,n)}var Ux=k({divNoNan_:zY});function BY(r,e){let t=T(r,"t1","dot"),o=T(e,"t2","dot");A((t.rank===1||t.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${o.rank}.`);let n=t.rank===1?t.size:t.shape[1],s=o.rank===1?o.size:o.shape[0];if(A(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),t.rank===1&&o.rank===1){let i=O(t,[1,-1]),a=O(o,[-1,1]),l=Ge(i,a);return O(l,[])}else if(t.rank===1&&o.rank===2){let i=O(t,[1,-1]),a=O(o,[o.shape[0],o.shape[1]]),l=Ge(i,a);return O(l,[l.size])}else if(t.rank===2&&o.rank===1){let i=O(o,[-1,1]),a=Ge(t,i);return O(a,[a.size])}else{let i=O(o,[o.shape[0],o.shape[1]]);return Ge(t,i)}}var Wx=k({dot_:BY});function MY(r,...e){let t=e.map((n,s)=>T(n,`tensors${s}`,"einsum")),o={equation:r};return E.runKernel(pa,t,o)}var M2=k({einsum_:MY});function VY(r){let t={x:T(r,"x","elu","float32")};return E.runKernel(yn,t)}var Va=k({elu_:VY});function GY(r){let e=T(r,"x","erf");A(e.dtype==="int32"||e.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),e.dtype==="int32"&&(e=j(e,"float32"));let t={x:e};return E.runKernel(yi,t)}var Hx=k({erf_:GY});function Hv(r,e){for(let t=0;t<r.length;++t)if(r[r.length-t-1]!==e-1-t)return!1;return!0}function V2(r,e,t){let o=r.length+e.length,n=[],s=0,i=0;for(let a=0;a<o;a++)t.indexOf(a)===-1?n.push(r[s++]):n.push(e[i++]);return n}function Kv(r,e){let t=[],o=r.length;for(let s=0;s<o;s++)e.indexOf(s)===-1&&t.push(r[s]);let n=e.map(s=>r[s]);return[t,n]}function Ps(r,e){let t=e.map(o=>1);return V2(r,t,e)}function UY(r,e,t){A(Hv(e,t),()=>`${r} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`)}function qv(r,e){if(Hv(r,e))return null;let t=[];for(let o=0;o<e;++o)r.indexOf(o)===-1&&t.push(o);return r.forEach(o=>t.push(o)),t}function Rd(r){return r.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function WY(r,e){let t=[];for(let o=e-r;o<e;++o)t.push(o);return t}function HY(r,e=null,t=!1){let n={x:T(r,"x","max")},s={reductionIndices:e,keepDims:t};return E.runKernel(ms,n,s)}var Pr=k({max_:HY});function KY(r,e=null,t=!1){let n={x:T(r,"x","min")},s={axis:e,keepDims:t};return E.runKernel(hs,n,s)}var _c=k({min_:KY});function qY(r,e){let t=T(r,"base","pow"),o=T(e,"exp","pow");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(Nn,n)}var ro=k({pow_:qY});function ae(r,e){if((Ho(r)&&e!=="string"||Array.isArray(r))&&e!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(e==="string"&&Ho(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return eo(r,[],[],e)}function XY(r){let t={x:T(r,"x","sqrt","float32")};return E.runKernel(Eo,t)}var bt=k({sqrt_:XY});function jY(r){let e=T(r,"x","square"),t={};return E.runKernel("Square",{x:e},t)}var Me=k({square_:jY});function YY(r,e=null,t=!1){let o=T(r,"x","sum");o.dtype==="bool"&&(o=j(o,"int32"));let n={x:o},s={axis:e,keepDims:t};return E.runKernel(Ts,n,s)}var ue=k({sum_:YY});function QY(r,e="euclidean",t=null,o=!1){r=T(r,"x","norm");let n=G2(r,e,t),s=n.shape;if(o){let i=ur(t,r.shape);s=Ps(n.shape,i)}return O(n,s)}function G2(r,e,t=null){if(r.rank===0)return It(r);if(r.rank!==1&&t===null)return G2(O(r,[-1]),e,t);if(r.rank===1||typeof t=="number"||Array.isArray(t)&&t.length===1){if(e===1)return ue(It(r),t);if(e===1/0)return Pr(It(r),t);if(e===-1/0)return _c(It(r),t);if(e==="euclidean"||e===2)return bt(ue(ro(It(r),ae(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(t)&&t.length===2){if(e===1)return Pr(ue(It(r),t[0]),t[1]-1);if(e===1/0)return Pr(ue(It(r),t[1]),t[0]);if(e===-1/0)return _c(ue(It(r),t[1]),t[0]);if(e==="fro"||e==="euclidean")return bt(ue(Me(r),t));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}var gl=k({norm_:QY});function ZY(r,e=null,t=!1){return gl(r,"euclidean",e,t)}var Kx=k({euclideanNorm_:ZY});function JY(r){let t={x:T(r,"x","exp")};return E.runKernel(yo,t)}var er=k({exp_:JY});function e8(r,e=0){let t=T(r,"x","expandDims","string_or_numeric");A(e<=t.rank,()=>"Axis must be <= rank of the tensor");let o={input:t},n={dim:e};return E.runKernel(ls,o,n)}var cr=k({expandDims_:e8});function t8(r){let t={x:T(r,"x","expm1")};return E.runKernel(bo,t)}var qx=k({expm1_:t8});function r8(r,e){let t=T(r,"x","tile","string_or_numeric");A(t.rank===e.length,()=>`Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);let o={x:t},n={reps:e};return E.runKernel(Ko,o,n)}var $r=k({tile_:r8});function o8(r,e,t,o="float32"){e==null&&(e=r);let n=te([r,e],o),s=r<=e?r:e;for(let a=0;a<s;++a)n.set(1,a,a);let i=O(n.toTensor(),[r,e]);if(t==null)return i;if(t.length===1)return $r(cr(i,0),[t[0],1,1]);if(t.length===2)return $r(cr(cr(i,0),0),[t[0],t[1],1,1]);if(t.length===3)return $r(cr(cr(cr(i,0),0),0),[t[0],t[1],t[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`)}var Oc=k({eye_:o8});function Ga(r,e,t){let o={shape:r,value:e,dtype:t};return E.runKernel(ma,{},o)}function n8(r){let t={x:T(r,"x","floor","float32")};return E.runKernel(Co,t)}var Ua=k({floor_:n8});function s8(r,e,t=0,o=0){let n=T(r,"x","gather"),s=T(e,"indices","gather","int32"),i={x:n,indices:s},a={axis:t,batchDims:o};return E.runKernel(cs,i,a)}var Wa=k({gather_:s8});function i8(r,e){let t=T(r,"a","greater","string_or_numeric"),o=T(e,"b","greater","string_or_numeric");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(wn,n)}var qt=k({greater_:i8});function a8(r,e){let t=T(r,"a","greaterEqual","string_or_numeric"),o=T(e,"b","greaterEqual","string_or_numeric");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(wo,n)}var Yo=k({greaterEqual_:a8});function l8(r){let t={x:T(r,"x","isFinite")};return E.runKernel(bi,t)}var Xx=k({isFinite_:l8});function u8(r){let t={x:T(r,"x","isInf")};return E.runKernel(Ci,t)}var jx=k({isInf_:u8});function c8(r){let t={x:T(r,"x","isNaN")};return E.runKernel(Sn,t)}var Yx=k({isNaN_:c8});function p8(r,e=.2){let o={x:T(r,"x","leakyRelu")},n={alpha:e};return E.runKernel(ps,o,n)}var _u=k({leakyRelu_:p8});function m8(r,e){let t=T(r,"a","less","string_or_numeric"),o=T(e,"b","less","string_or_numeric");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(In,n)}var fm=k({less_:m8});function f8(r,e){let t=T(r,"a","lessEqual","string_or_numeric"),o=T(e,"b","lessEqual","string_or_numeric");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(vn,n)}var Qo=k({lessEqual_:f8});function U2(r,e,t){if(t<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:e,num:t};return E.runKernel(au,{},o)}function d8(r,e=5,t=1,o=1,n=.5){let s=T(r,"x","localResponseNormalization");A(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),A(ul(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=s,a=!1;s.rank===3&&(a=!0,i=O(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u={depthRadius:e,bias:t,alpha:o,beta:n},c=E.runKernel(ga,l,u);return a?O(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var Qx=k({localResponseNormalization_:d8});function h8(r){let t={x:T(r,"x","log","float32")};return E.runKernel(Io,t)}var Cr=k({log_:h8});function g8(r){let t={x:T(r,"x","log1p")};return E.runKernel(wi,t)}var Ou=k({log1p_:g8});function jv(r,e){A(Hp(r),()=>"The f passed in variableGrads(f) must be a function"),A(e==null||Array.isArray(e)&&e.every(u=>u instanceof ml),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let t=e!=null;if(!t){e=[];for(let u in E.registeredVariables)e.push(E.registeredVariables[u])}let o=t?e.filter(u=>!u.trainable):null,n=e.length;e=e.filter(u=>u.trainable),A(e.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:i,grads:a}=E.gradients(r,e,null,s);A(a.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),A(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let l={};return e.forEach((u,c)=>{a[c]!=null&&(l[u.name]=a[c])}),o?.forEach(u=>l[u.name]=null),{value:i,grads:l}}function Lo(r){return E.customGrad(r)}function x8(r){let t={x:T(r,"x","softplus")};return E.runKernel(Ei,t)}var zi=k({softplus_:x8});function y8(r){let e=T(r,"x","logSigmoid");return Lo(o=>({value:We(zi(We(o))),gradFunc:i=>P(i,Hr(We(o)))}))(e)}var Zx=k({logSigmoid_:y8});function b8(r,e){let t=T(r,"a","sub"),o=T(e,"b","sub");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(Ao,n)}var ne=k({sub_:b8});function C8(r,e=-1){let t=T(r,"logits","logSoftmax");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);return Lo((n,s)=>{let a=Pr(n,e,!0),l=ne(n,a),u=ne(j(l,"float32"),Cr(ue(er(l),e,!0)));return s([u]),{value:u,gradFunc:(p,m)=>{let[f]=m,d=!0,h=er(f);return ne(p,P(ue(p,e,d),h))}}})(t)}var dm=k({logSoftmax_:C8});function w8(r,e=null,t=!1){let o=T(r,"x","logSumExp"),n=ur(e,o.shape),s=Pr(o,n,!0),i=ne(o,s),a=er(i),l=ue(a,n),u=Cr(l),c=q(O(s,u.shape),u);if(t){let p=Ps(c.shape,n);return O(c,p)}return c}var hm=k({logSumExp_:w8});function S8(r,e){let t=T(r,"a","logicalAnd","bool"),o=T(e,"b","logicalAnd","bool");_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(Si,n)}var Lr=k({logicalAnd_:S8});function I8(r){let t={x:T(r,"x","logicalNot","bool")};return E.runKernel(Ii,t)}var Pu=k({logicalNot_:I8});function v8(r,e){let t=T(r,"a","logicalOr","bool"),o=T(e,"b","logicalOr","bool");_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(cl,n)}var gm=k({logicalOr_:v8});function T8(r,e){let t=T(r,"a","logicalXor","bool"),o=T(e,"b","logicalXor","bool");return _e(t.shape,o.shape),Lr(gm(r,e),Pu(Lr(r,e)))}var Jx=k({logicalXor_:T8});var ey=2147483648;function k8(r,e,t="left"){let o=T(r,"sortedSequence","searchSorted"),n=T(e,"values","searchSorted"),s=o.shape[o.shape.length-1],i=n.shape[n.shape.length-1],a=O(o,[-1,s]),l=O(n,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Ke(l.shape)>=ey)throw new Error(`values tensor size must less than ${ey}`);if(a.shape[1]>=ey)throw new Error(`trailing dim_size must less than ${ey} for int32 output type, was ${a.shape[1]}`);let u={sortedSequence:a,values:l},c={side:t};return E.runKernel(xu,u,c)}var Ad=k({searchSorted_:k8});function W2(r,e){return Ad(r,e,"left")}function N8(r,e,t,o,n){let s=T(r,"x","maxPool"),i=1,a=s,l=!1;s.rank===3&&(l=!0,a=O(s,[1,s.shape[0],s.shape[1],s.shape[2]])),A(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),A(Nr(t,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${i}'`),yt("maxPool",o,n);let u={x:a},c={filterSize:e,strides:t,pad:o,dimRoundingMode:n},p=E.runKernel(fs,u,c);return l?O(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Lu=k({maxPool_:N8});function $8(r,e=[1,1,1],t,o,n,s="NDHWC"){let i=T(r,"x","maxPool3d"),a=i,l=!1;i.rank===4&&(l=!0,a=O(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),A(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),A(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),yt("maxPool3d",o,n);let u={x:a},c={filterSize:e,strides:t,pad:o,dimRoundingMode:n,dataFormat:s},p=E.runKernel(xa,u,c);return l?O(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var ty=k({maxPool3d_:$8});function E8(r,e,t,o,n=!1){let i={x:T(r,"x","maxPoolWithArgmax")},a={filterSize:e,strides:t,pad:o,includeBatchInIndex:n},l=E.runKernel(pu,i,a);return{result:l[0],indexes:l[1]}}var H2=k({maxPoolWithArgmax_:E8});function R8(r,e){let t=T(r,"a","maximum"),o=T(e,"b","maximum");[t,o]=Ue(t,o),t.dtype==="bool"&&(t=j(t,"int32"),o=j(o,"int32")),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(vo,n)}var zo=k({maximum_:R8});function A8(r,e=null,t=!1){let n={x:T(r,"x","mean")},s={axis:e,keepDims:t};return E.runKernel(ds,n,s)}var Ct=k({mean_:A8});function it(r,e="float32"){if(e==="complex64"){let o=it(r,"float32"),n=it(r,"float32");return _o(o,n)}let t=qp(Ke(r),e);return E.makeTensor(t,r,e)}function pr(r,e="float32"){if(e==="complex64"){let o=pr(r,"float32"),n=it(r,"float32");return _o(o,n)}let t=md(Ke(r),e);return E.makeTensor(t,r,e)}function K2(r,e,{indexing:t="xy"}={}){if(t!=="xy"&&t!=="ij")throw new TypeError(`${t} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=T(r,"x","meshgrid",r instanceof Ve?r.dtype:"float32");if(e===void 0)return[o];let n=T(e,"y","meshgrid",e instanceof Ve?e.dtype:"float32"),s=Ke(o.shape),i=Ke(n.shape);return t==="xy"?(o=O(o,[1,-1]),n=O(n,[-1,1]),[Ge(pr([i,1],o.dtype),o),Ge(n,pr([1,s],n.dtype))]):(o=O(o,[-1,1]),n=O(n,[1,-1]),[Ge(o,pr([1,i],o.dtype)),Ge(pr([s,1],n.dtype),n)])}function D8(r,e){let t=T(r,"a","minimum"),o=T(e,"b","minimum");[t,o]=Ue(t,o),t.dtype==="bool"&&(t=j(t,"int32"),o=j(o,"int32")),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(To,n)}var Ha=k({minimum_:D8});function F8(r,e,t){A(t==="reflect"||t==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);let o=T(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");A(e.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${e.length}.`);let n=t==="reflect"?1:0;for(let a=0;a<o.rank;a++)A(e[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),A(e[a][0]>=0&&e[a][0]<=o.shape[a]-n&&e[a][1]>=0&&e[a][1]<=o.shape[a]-n,()=>`Padding in dimension ${a} cannot be greater than or equal to ${o.shape[a]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:e,mode:t},i={x:o};return E.runKernel(gs,i,s)}var ry=k({mirrorPad_:F8});function _8(r,e){let t=T(r,"a","mod"),o=T(e,"b","mod");[t,o]=Ue(t,o);let n={a:t,b:o};return E.runKernel(vi,n)}var oy=k({mod_:_8});function O8(r,e=null,t=!1){r=T(r,"x","moments");let o=ur(e,r.shape),n=Ct(r,o,t),s=n.shape;t||(s=Ps(n.shape,o));let i=Me(ne(j(r,"float32"),O(n,s))),a=Ct(i,o,t);return{mean:n,variance:a}}var Pc=k({moments_:O8});function P8(r,e,t,o){let n=T(e,"data","multiRNNCell"),s=kc(t,"c","multiRNNCell"),i=kc(o,"h","multiRNNCell"),a=n,l=[];for(let p=0;p<r.length;p++){let m=r[p](a,s[p],i[p]);l.push(m[0]),l.push(m[1]),a=m[1]}let u=[],c=[];for(let p=0;p<l.length;p+=2)u.push(l[p]),c.push(l[p+1]);return[u,c]}var q2=k({multiRNNCell_:P8});function L8(r,e,t,o=!1){let n=T(r,"logits","multinomial"),s=n.size,i=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);t=t||Math.random();let l={logits:i===1?O(n,[1,-1]):n},u={numSamples:e,seed:t,normalized:o},c=E.runKernel(mu,l,u);return i===1?O(c,[c.size]):c}var X2=k({multinomial_:L8});function z8(r,e){let t=T(r,"a","notEqual","string_or_numeric"),o=T(e,"b","notEqual","string_or_numeric");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o};return E.runKernel(kn,n)}var Bi=k({notEqual_:z8});function B8(r){let t={x:T(r,"x","onesLike")};return E.runKernel(xs,t)}var gr=k({onesLike_:B8});function M8(r,e){let t=T(r,"v1","outerProduct"),o=T(e,"v2","outerProduct");A(t.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${o.rank}.`);let n=O(t,[-1,1]),s=O(o,[1,-1]);return Ge(n,s)}var j2=k({outerProduct_:M8});function V8(r,e,t=0){let o=T(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:e,constantValue:t},s={x:o};return E.runKernel(bs,s,n)}var oo=k({pad_:V8});function G8(r,e,t=0){return A(e.length===2,()=>"Invalid number of paddings. Must be length of 2."),oo(r,[e],t)}var Y2=k({pad1d_:G8});function U8(r,e,t=0){return A(e.length===2&&e[0].length===2&&e[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),oo(r,e,t)}var Q2=k({pad2d_:U8});function W8(r,e,t=0){return A(e.length===3&&e[0].length===2&&e[1].length===2&&e[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),oo(r,e,t)}var Z2=k({pad3d_:W8});function H8(r,e,t=0){return A(e.length===4&&e[0].length===2&&e[1].length===2&&e[2].length===2&&e[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),oo(r,e,t)}var J2=k({pad4d_:H8});function K8(r,e,t){let o=T(r,"x","spaceToBatchND");A(o.rank>=1+e.length,()=>`input rank ${o.rank} should be > than [blockShape] ${e.length}`),A(t.length===e.length,()=>`paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`),A(o.shape.reduce((i,a,l)=>l>0&&l<=e.length?i&&(a+t[l-1][0]+t[l-1][1])%e[l-1]===0:i,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);let n={x:o},s={blockShape:e,paddings:t};return E.runKernel(ks,n,s)}var zu=k({spaceToBatchND_:K8});function q8(r,e,t,o,n,s,i){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let a=T(r,"x","maxPool"),l=a,u=!1;a.rank===3&&(u=!0,l=O(a,[1,a.shape[0],a.shape[1],a.shape[2]])),A(Nr(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=Uv(l.shape,e,s,n,o),p=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=j8([c.filterHeight,c.filterWidth],p):m=[[0,0],[0,0]];let f=p[0]===1&&p[1]===1,[d,h]=X8([c.inHeight,c.inWidth],p,m),g=f?o:"valid",x=f?l:zu(l,p,d),C=(t==="avg"?()=>Au(x,e,s,g,i):()=>Lu(x,e,s,g,i))(),S=f?C:Du(C,p,h);return u?O(S,[S.shape[1],S.shape[2],S.shape[3]]):S}function X8(r,e,t){let o=t.map(c=>c[0]),n=t.map(c=>c[1]),s=r.concat(o,n),i=e.map((c,p)=>(c-s[p]%c)%c),a=n.map((c,p)=>c+i[p]),l=e.map((c,p)=>[o[p],a[p]]),u=e.map((c,p)=>[0,i[p]]);return[l,u]}function j8(r,e){let o=r.map((i,a)=>i+(i-1)*(e[a]-1)).map(i=>i-1),n=o.map(i=>Math.floor(i/2)),s=o.map((i,a)=>i-n[a]);return o.map((i,a)=>[n[a],s[a]])}var ny=k({pool_:q8});function Y8(r,e){let t=T(r,"x","prelu"),o=T(e,"alpha","prelu"),n={x:t,alpha:o};return E.runKernel(Cs,n)}var Bu=k({prelu_:Y8});function Q8(r,e=null,t=!1){let o=T(r,"x","prod");o.dtype==="bool"&&(o=j(o,"int32"));let n={x:o},s={axis:e,keepDims:t};return E.runKernel($n,n,s)}var sy=k({prod_:Q8});function Z8(r,e,t,o,n){let s=T(r,"shape","raggedTensorToTensor","int32"),i=T(e,"values","raggedTensorToTensor"),a=T(t,"defaultValue","raggedTensorToTensor",i.dtype),l=o.map((p,m)=>T(p,`tensors${m}`,"raggedTensorToTensor","int32")),u={shape:s,values:i,defaultValue:a,rowPartitionTensors:l},c={rowPartitionTypes:n};return E.runKernel(du,u,c)}var eE=k({raggedTensorToTensor_:Z8});function J8(r,e,t){let o=Ke(r),n=null;if(t==null||t==="float32")n=new Float32Array(o);else if(t==="int32")n=new Int32Array(o);else if(t==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${t}`);for(let s=0;s<o;s++)n[s]=e();return E.makeTensor(n,r,t)}var tE=k({rand_:J8});var uy=pd(Dd());var zc=class{constructor(e,t,o,n,s){this.mean=e,this.stdDev=t,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let i=s||Math.random();this.random=uy.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let e,t,o=!1;for(;!o;){let n,s,i;do n=2*this.random()-1,s=2*this.random()-1,i=n*n+s*s;while(i>=1||i===0);let a=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*n*a,t=this.mean+this.stdDev*s*a,(!this.truncated||this.isValidTruncated(e))&&(o=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return this.dtype==null||this.dtype==="float32"?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}},ay=class{constructor(e,t,o,n){this.alpha=e,this.beta=1/t,this.dtype=o;let s=n||Math.random();this.randu=uy.alea(s.toString()),this.randn=new zc(0,1,o,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,o,n,s,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0);if(i*=i*i,e=n*n,t=1-.331*e*e,o=.5*e+this.d*(1-i+Math.log(i)),s=this.randu(),s<t||Math.log(s)<o)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(e){return this.dtype==="float32"?e:Math.round(e)}},ly=class{constructor(e=0,t=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=e,this.range=t-e,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=uy.alea(n)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function iQ(r,e,t=1,o="float32",n){if(t==null&&(t=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new ay(e,t,o,n),i=te(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var yE=k({randomGamma_:iQ});function aQ(r,e=0,t=1,o,n){if(o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new zc(e,t,o,!1,n),i=te(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Bc=k({randomNormal_:aQ});function lQ(r,e,t){if(e!=null&&e==="bool")throw new Error(`Unsupported data type ${e}`);return Bc(r,0,1,e,t)}var bE=k({randomStandardNormal_:lQ});function uQ(r,e=0,t=1,o="float32",n){let s=te(r,o),i=new ly(e,t,null,n);for(let a=0;a<s.values.length;a++)s.values[a]=i.nextValue();return s.toTensor()}var Ka=k({randomUniform_:uQ});function Mu(r,e,t=1,o="float32"){if(t===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:e,step:t,dtype:o};return E.runKernel(wa,{},n)}function cQ(r){let t={x:T(r,"x","reciprocal")};return E.runKernel(En,t)}var cy=k({reciprocal_:cQ});function pQ(r){let t={x:T(r,"x","relu")};return E.runKernel(Rn,t)}var Er=k({relu_:pQ});function mQ(r){let t={x:T(r,"x","relu6")};return E.runKernel(An,t)}var xm=k({relu6_:mQ});function fQ(r,e){let o={x:T(r,"x","reverse")},n={dims:e};return E.runKernel(Sa,o,n)}var mr=k({reverse_:fQ});function dQ(r){let e=T(r,"x","reverse");return A(e.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),mr(e,0)}var CE=k({reverse1d_:dQ});function hQ(r,e){let t=T(r,"x","reverse");return A(t.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`),mr(t,e)}var wE=k({reverse2d_:hQ});function gQ(r,e){let t=T(r,"x","reverse");return A(t.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`),mr(t,e)}var SE=k({reverse3d_:gQ});function xQ(r,e){let t=T(r,"x","reverse");return A(t.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`),mr(t,e)}var IE=k({reverse4d_:xQ});function yQ(r){let t={x:T(r,"x","round")};return E.runKernel(ki,t)}var ym=k({round_:yQ});function bQ(r){let t={x:T(r,"x","rsqrt","float32")};return E.runKernel(No,t)}var bm=k({rsqrt_:bQ});function CQ(r){let t={x:T(r,"x","selu")};return E.runKernel(Ni,t)}var Cm=k({selu_:CQ});function wQ(r,e,t,o,n,s=[1,1],i="NHWC"){let a=T(r,"x","separableConv2d"),l=T(e,"depthwiseFilter","separableConv2d"),u=T(t,"pointwiseFilter","separableConv2d"),c=a,p=!1;if(a.rank===3&&(p=!0,c=O(a,[1,a.shape[0],a.shape[1],a.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");A(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),A(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),A(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),A(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),A(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=l.shape[2],f=l.shape[3];A(u.shape[2]===m*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*f}, but got ${u.shape[2]}.`);let d=Ma(c,l,o,n,i,s),g=Po(d,u,1,"valid",i);return p?O(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var wm=k({separableConv2d_:wQ});async function SQ(r,e){let t=T(r,"x","setdiff1d"),o=T(e,"y","setdiff1d");A(t.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${t.dtype}) and y (${o.dtype}).`),A(t.rank===1,()=>`x should be 1D tensor, but got x (${t.shape}).`),A(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await t.data(),s=await o.data(),i=new Set(s),a=0;for(let c=0;c<n.length;c++)i.has(n[c])||a++;let l=new Je([a],t.dtype),u=new Je([a],"int32");for(let c=0,p=0;c<n.length;c++)i.has(n[c])||(l.values[p]=n[c],u.values[p]=c,p++);return[l.toTensor(),u.toTensor()]}var vE=SQ;function IQ(r){let t={x:T(r,"x","sign")};return E.runKernel($i,t)}var py=k({sign_:IQ});function vQ(r){let t={x:T(r,"x","sin","float32")};return E.runKernel(Fn,t)}var Sm=k({sin_:vQ});function TQ(r){let t={x:T(r,"x","sinh")};return E.runKernel(_n,t)}var Im=k({sinh_:TQ});function kQ(r,e,t){let o=T(r,"x","slice1d");return A(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Ae(o,[e],[t])}var vm=k({slice1d_:kQ});function NQ(r,e,t){let o=T(r,"x","slice2d");return A(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Ae(o,e,t)}var Fd=k({slice2d_:NQ});function $Q(r,e,t){let o=T(r,"x","slice3d");return A(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Ae(o,e,t)}var Tm=k({slice3d_:$Q});function EQ(r,e,t){let o=T(r,"x","slice4d");return A(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Ae(o,e,t)}var Mc=k({slice4d_:EQ});function RQ(r,e=-1){let t=T(r,"logits","softmax","float32");if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);let o={logits:t},n={dim:e};return E.runKernel($s,o,n)}var Vu=k({softmax_:RQ});function AQ(r){A(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let e={input:r};return E.runKernel(su,e)}var Gu=k({fft_:AQ});function DQ(r){A(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let e={input:r};return E.runKernel(iu,e)}var xl=k({ifft_:DQ});function FQ(r){let e=r.shape[r.shape.length-1],t=r.size/e,o;if(e<=2){let n=O(r,[t,e]);o=xl(n)}else{let n=[t,2*(e-1)],s=O(hl(r),[t,e]),i=O(Ru(r),[t,e]),a=mr(Ae(s,[0,1],[t,e-2]),1),l=P(mr(Ae(i,[0,1],[t,e-2]),1),ae(-1)),u=et([s,a],1),c=et([i,l],1),p=O(_o(u,c),[n[0],n[1]]);o=xl(p)}if(o=hl(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=O(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var km=k({irfft_:FQ});function _Q(r,e,t=0){let n={x:T(r,"x","split")},s={numOrSizeSplits:e,axis:t};return E.runKernel(Ns,n,s)}var fr=k({split_:_Q});function OQ(r,e){A(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let t=r.shape[r.shape.length-1],o=r.size/t,n;if(e!=null&&e<t){let d=r.shape.map(g=>0),h=r.shape.map(g=>g);h[r.shape.length-1]=e,n=Ae(r,d,h),t=e}else if(e!=null&&e>t){let d=r.shape.map(h=>h);d[r.shape.length-1]=e-t,n=et([r,it(d)],r.shape.length-1),t=e}else n=r;let s=Se(n),i=O(_o(n,s),[o,t]),a=Gu(i),l=Math.floor(t/2)+1,u=hl(a),c=Ru(a),p=fr(u,[l,t-l],u.shape.length-1),m=fr(c,[l,t-l],c.shape.length-1),f=n.shape.slice();return f[n.shape.length-1]=l,O(_o(p[0],m[0]),f)}var Uu=k({rfft_:OQ});function PQ(r,e){let t=T(r,"a","squaredDifference"),o=T(e,"b","squaredDifference");[t,o]=Ue(t,o),_e(t.shape,o.shape);let n={a:t,b:o},s={};return E.runKernel(Ro,n,s)}var Nm=k({squaredDifference_:PQ});function LQ(r,e){let t=T(r,"x","squeeze","string_or_numeric");return O(t,YI(t.shape,e).newShape)}var Zo=k({squeeze_:LQ});function zQ(r,e=0){let t=kc(r,"tensors","stack","string_or_numeric");A(t.length>=1,()=>"Pass at least one tensor to tf.stack"),t.length>0&&A(e<=t[0].rank,()=>"Axis must be <= rank of the tensor");let o=t,n={axis:e};return E.runKernel(ys,o,n)}var tr=k({stack_:zQ});function BQ(r,e=0){let o={x:T(r,"x","step")},n={alpha:e};return E.runKernel(Ai,o,n)}var Ls=k({step_:BQ});function MQ(r,e,t,o,n=0,s=0,i=0,a=0,l=0){let c={x:T(r,"x","stridedSlice","string_or_numeric")},p={begin:e,end:t,strides:o,beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};return E.runKernel(ka,c,p)}var my=k({stridedSlice_:MQ});function VQ(r){let t={x:T(r,"x","tan","float32")};return E.runKernel(Ri,t)}var fy=k({tan_:VQ});function Gt(r,e){pn(r);let t=Fo(r,e);if(t.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return eo(r,null,t,e)}function yl(r,e,t){if(pn(r),e!=null&&e.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=Fo(r,t);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return eo(r,e,o,t)}function TE(r,e,t){if(pn(r),e!=null&&e.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=Fo(r,t);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return eo(r,e,o,t)}function kE(r,e,t){if(pn(r),e!=null&&e.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=Fo(r,t);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return eo(r,e,o,t)}function NE(r,e,t){if(pn(r),e!=null&&e.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=Fo(r,t);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&e==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return e=e||o,eo(r,e,o,t)}function GQ(r,e=1,t=!0){let o=T(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${e}`);let s={x:o},i={k:e,sorted:t},[a,l]=E.runKernel($a,s,i);return{values:a,indices:l}}var dy=k({topk_:GQ});function UQ(r,e=0,t=1,o,n){if(o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new zc(e,t,o,!0,n),i=te(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var $m=k({truncatedNormal_:UQ});function WQ(r,e=0){let t=T(r,"x","unique","string_or_numeric");A(t.rank>0,()=>"The input tensor must be at least 1D");let o={x:t},n={axis:e},[s,i]=E.runKernel(vu,o,n);return{values:s,indices:i}}var hy=k({unique_:WQ});function HQ(r,e,t){let o=T(r,"x","unsortedSegmentSum"),n=T(e,"segmentIds","unsortedSegmentSum","int32");A(ul(t),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},i={numSegments:t};return E.runKernel(Ra,s,i)}var Em=k({unsortedSegmentSum_:HQ});function KQ(r,e=0){let t=T(r,"x","unstack","string_or_numeric");A(e>=-t.shape.length&&e<t.shape.length,()=>`Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);let o={value:t},n={axis:e};return E.runKernel(Es,o,n)}var wr=k({unstack_:KQ});function $E(r,e){return Ad(r,e,"right")}function gy(r,e=!0,t,o){return E.makeVariable(r,e,t,o)}function xy(r,e){let t=[];for(let s=0;s<e.length;s++)e[s]&&t.push(s);let o=te(r,"int32"),n=te([t.length,r.length],"int32");for(let s=0;s<t.length;s++){let i=o.indexToLoc(t[s]),a=s*r.length;n.values.set(i,a)}return n.toTensor()}async function qQ(r){let e=T(r,"condition","whereAsync","bool"),t=await e.data(),o=xy(e.shape,t);return r!==e&&e.dispose(),o}var yy=qQ;async function XQ(r,e,t){let o=T(r,"tensor","boolMask"),n=T(e,"mask","boolMask","bool"),s=t??0,i=n.rank,a=o.shape;A(i>0,()=>"mask cannot be scalar"),Kt(a.slice(s,s+i),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let h=s;h<s+i;h++)l*=a[h];let u=a.slice(0,s).concat([l],a.slice(s+i)),c=O(o,u),p=O(n,[-1]),m=await yy(p),f=Zo(m,[1]),d=Wa(c,f,s);return r!==o&&o.dispose(),e!==n&&n.dispose(),f.dispose(),c.dispose(),p.dispose(),m.dispose(),d}var jQ=XQ;function YQ(r,e,t,o,n=!0){let s=T(r,"v","movingAverage"),i=T(e,"x","movingAverage"),a=T(t,"decay","movingAverage");bv(s,i),A(Yn(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=ae(1),u=ne(l,a),c=P(ne(i,s),u);if(n){A(o!=null,()=>"When using zeroDebias: true, step is required.");let p=T(o,"step","movingAverage");c=se(c,ne(l,ro(a,p)))}return q(s,c)}var QQ=k({movingAverage_:YQ});function ZQ(r,e,t){let o=T(r,"indices","scatterND","int32"),n=T(e,"updates","scatterND");Bv(n,o,t);let s={indices:o,updates:n},i={shape:t};return E.runKernel(Ia,s,i)}var JQ=k({scatterND_:ZQ});function EE(r,e,t,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(t.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${s}.`);let i=e.size;if(!(e.rank===0||e.rank===1&&i===n))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${n}]`);if(e.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function tZ(r,e,t,o=0){let n=T(r,"sparseIndices","sparseToDense","int32"),s=T(e,"sparseValues","sparseToDense","string_or_numeric"),i=T(o,"defaultValue","sparseToDense",s.dtype);EE(n,s,t,i);let a={sparseIndices:n,sparseValues:s,defaultValue:i},l={outputShape:t};return E.runKernel(va,a,l)}var rZ=k({sparseToDense_:tZ});function oZ(r,e){let t=T(e,"indices","gatherND","int32"),n={params:T(r,"x","gatherND","string_or_numeric"),indices:t};return E.runKernel(da,n)}var nZ=k({gatherND_:oZ});function RE(r,e){if(e==null)return r.shape.slice();if(Yn(r.shape,e))return e;if(r.shape.length===e.length){let t=[];for(let o=0;o<r.shape.length;o++)e[o]==null&&r.shape[o]!=null?t.push(r.shape[o]):t.push(e[o]);return t}return e}function sZ(r,e,t,o){let n=T(r,"x","dropout");if(A(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),A(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),e===0)return r instanceof Ve?n.clone():n;let s=RE(n,t),i=1-e,a=se(Ua(q(Ka(s,0,1,"float32",o),i)),i);return P(n,a)}var r1=k({dropout_:sZ});function o1(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function _d(r,e,t){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let i=2*Math.PI*s/(r+o-1);n[s]=e-t*Math.cos(i)}return Gt(n,"float32")}async function iZ(r,e,t=1){let o=T(r,"predictions","inTopK"),n=T(e,"targets","inTopK");A(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),A(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),Kt(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];A(t>0&&t<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${t}`);let i=await o.data(),a=await n.data(),[l,u]=[i.length/s,s],c=QI("bool",l);for(let p=0;p<l;p++){let m=p*u,f=i.subarray(m,m+u),d=[];for(let h=0;h<f.length;h++)d.push({value:f[h],index:h});d.sort((h,g)=>g.value-h.value),c[p]=0;for(let h=0;h<t;h++)if(d[h].index===a[p]){c[p]=1;break}}return r!==o&&o.dispose(),e!==n&&n.dispose(),Tr(c,n.shape,"bool")}var aZ=iZ;var Wu={};lt(Wu,{conv2d:()=>AE,depthwiseConv2d:()=>DE,matMul:()=>FE});function lZ(r,e,t,o,n,s="NHWC",i){let a=r;r.rank===3&&(a=O(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=e;l.rank===3&&(l=O(e,[1,e.shape[0],e.shape[1],e.shape[2]])),A(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),A(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),A(t.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);let u=s==="NHWC"?a.shape[3]:a.shape[1],c=s==="NHWC"?l.shape[3]:l.shape[1];A(u===t[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${t[2]}.`),A(c===t[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${t[3]}).`),yt("conv2dDerFilter",n,i);let p={x:a,dy:l},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,filterShape:t};return E.runKernel(Ql,p,m)}var Rm=k({conv2DBackpropFilter_:lZ});function Vc(r,e,t){if(t==null||t==="linear")return r;if(t==="relu")return P(r,Ls(e));throw new Error(`Cannot compute gradient for fused activation ${t}.`)}function Gc(r,e){let t=e,o=pt(r.shape,e.shape);return o.length>0&&(t=ue(t,o)),O(t,r.shape)}function Uc(r,e,t,o){if(e==="linear")return r;if(e==="relu")return Er(r);if(e==="elu")return Va(r);if(e==="relu6")return xm(r);if(e==="prelu")return Bu(r,t);if(e==="leakyrelu")return _u(r,o);if(e==="sigmoid")return Hr(r);throw new Error(`Unknown fused activation ${e}.`)}var Wc=(r,e)=>!(r>0)||e==="linear";function uZ({x:r,filter:e,strides:t,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",Wc(E.state.gradientDepth,l)===!1){A(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let N=Po(r,e,t,o,n,s,i);return a!=null&&(N=q(N,a)),Uc(N,l,u,c)}let p=T(r,"x","conv2d","float32"),m=T(e,"filter","conv2d","float32"),f=p,d=!1;p.rank===3&&(d=!0,f=O(p,[1,p.shape[0],p.shape[1],p.shape[2]])),A(f.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),A(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),yt("fused conv2d",o,i);let h=n==="NHWC"?f.shape[3]:f.shape[1];A(m.shape[2]===h,()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${m.shape[2]}.`),A(Nr(t,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`);let g=Dc(f.shape,m.shape,t,s,o,i),x;a!=null&&(x=T(a,"bias","fused conv2d"),[x]=Ue(x,p),n==="NHWC"?_e(g.outShape,x.shape):(A(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),A(x.shape.length===0||x.shape[0]===g.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let N=u.shape;if(A(N.length<=1||N.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${N.length}.`),N.length===1)A(N[0]===1||N[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the number of output channels (${g.outChannels}).`);else if(N.length===3)try{_e(N,g.outShape)}catch{let R=`Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(R)}b=T(u,"prelu weights","fused conv2d")}let C=(N,$)=>{A(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[R,F,_,B]=$,V=Vc(N,_,l);A(zn(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let G=um(F.shape,V,R,t,o),W=Rm(F,V,R.shape,t,o),U=[G,W];if(B!=null){let K=Gc(B,V);U.push(K)}return U},S={x:f,filter:m,bias:x,preluActivationWeights:b},I={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Lo(($,R,F)=>{let _=E.runKernel(Fi,S,I);return F([R,$,_]),d&&(_=O(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:C}})(f,m):Lo(($,R,F,_)=>{let B=E.runKernel(Fi,S,I);return _([R,$,B,F]),d&&(B=O(B,[B.shape[1],B.shape[2],B.shape[3]])),{value:B,gradFunc:C}})(f,m,x)}var AE=k({fusedConv2d_:uZ});function cZ(r,e,t,o,n,s=[1,1],i){let a=r;r.rank===3&&(a=O(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=e;l.rank===3&&(l=O(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u={x:a,dy:l},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,filterShape:t};return E.runKernel(tu,u,c)}var by=k({depthwiseConv2dNativeBackpropFilter_:cZ});function pZ(r,e,t,o,n,s=[1,1],i){let a=e,l=!1;e.rank===3&&(l=!0,a=O(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u={dy:a,filter:t},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,inputShape:r},p=E.runKernel(ru,u,c);return l?O(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Cy=k({depthwiseConv2dNativeBackpropInput_:pZ});function mZ({x:r,filter:e,strides:t,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(Wc(E.state.gradientDepth,l)===!1){let I=Ma(r,e,t,o,n,s,i);return a!=null&&(I=q(I,a)),Uc(I,l,u,c)}let p=T(r,"x","depthwiseConv2d","float32"),m=T(e,"filter","depthwiseConv2d","float32"),f=p,d=!1;p.rank===3&&(d=!0,f=O(p,[1,p.shape[0],p.shape[1],p.shape[2]])),A(f.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),A(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),A(f.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),A(Nr(t,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${s}'`),yt("fused depthwiseConv2d",o,i);let h=Dc(f.shape,m.shape,t,s,o,i,!0),g;a!=null&&(g=T(a,"bias","fused conv2d"),[g]=Ue(g,p),_e(h.outShape,g.shape));let x;u!=null&&(x=T(u,"prelu weights","fused depthwiseConv2d"));let b=(I,N)=>{A(zn(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[$,R,F,_]=N,B=Vc(I,F,l),V=Cy(R.shape,B,$,t,o,s,i),G=by(R,B,$.shape,t,o,s,i);if(_!=null){let W=Gc(g,B);return[V,G,W]}return[V,G]},C={x:f,filter:m,bias:g,preluActivationWeights:x},S={strides:t,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Lo((N,$,R)=>{let F=E.runKernel(_i,C,S);return R([$,N,F]),d&&(F=O(F,[F.shape[1],F.shape[2],F.shape[3]])),{value:F,gradFunc:b}})(f,m):Lo((N,$,R,F)=>{let _=E.runKernel(_i,C,S);return F([$,N,_,R]),d&&(_=O(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:b}})(f,m,g)}var DE=k({fusedDepthwiseConv2d_:mZ});function fZ({a:r,b:e,transposeA:t=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(Wc(E.state.gradientDepth,s)===!1){let B=Ge(r,e,t,o);return n!=null&&(B=q(B,n)),Uc(B,s,i,a)}let l=T(r,"a","fused matMul"),u=T(e,"b","fused matMul");[l,u]=Ue(l,u);let c=t?l.shape[l.rank-2]:l.shape[l.rank-1],p=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=t?l.shape[l.rank-1]:l.shape[l.rank-2],f=o?u.shape[u.rank-2]:u.shape[u.rank-1],d=l.shape.slice(0,-2),h=u.shape.slice(0,-2),g=Ke(d),x=Ke(h);A(c===p,()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${t} and transposeB=${o} must match.`);let C=_e(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,f]),S=t?O(l,[g,c,m]):O(l,[g,m,c]),I=o?O(u,[x,f,p]):O(u,[x,p,f]),N;n!=null&&(N=T(n,"bias","fused matMul"),[N]=Ue(N,l),_e(C,N.shape));let $;i!=null&&($=T(i,"prelu weights","fused matMul"));let R=(B,V)=>{let[G,W,U,K]=V,X=Vc(O(B,U.shape),U,s),H,Z;if(!t&&!o?(H=Ge(X,W,!1,!0),Z=Ge(G,X,!0,!1)):!t&&o?(H=Ge(X,W,!1,!1),Z=Ge(X,G,!0,!1)):t&&!o?(H=Ge(W,X,!1,!0),Z=Ge(G,X,!1,!1)):(H=Ge(W,X,!0,!0),Z=Ge(X,G,!0,!0)),n!=null){let J=Gc(K,X);return[H,Z,J]}else return[H,Z]},F={a:S,b:I,bias:N,preluActivationWeights:$},_={transposeA:t,transposeB:o,activation:s,leakyreluAlpha:a};return n==null?Lo((V,G,W)=>{let U=E.runKernel(Di,F,_);return W([V,G,U]),{value:O(U,C),gradFunc:R}})(S,I):Lo((V,G,W,U)=>{let K=E.runKernel(Di,F,_);return U([V,G,K,W]),{value:O(K,C),gradFunc:R}})(S,I,N)}var FE=k({fusedMatMul_:fZ});function dZ(r){return _d(r,.54,.46)}var _E=k({hammingWindow_:dZ});function hZ(r){return _d(r,.5,.5)}var wy=k({hannWindow_:hZ});function gZ(r,e,t,o=!1,n=0){let s=0,i=[];for(;s+e<=r.size;)i.push(Ae(r,s,e)),s+=t;if(o)for(;s<r.size;){let a=s+e-r.size,l=et([Ae(r,s,e-a),Ga([a],n)]);i.push(l),s+=t}return i.length===0?yl([],[0,e]):O(et(i),[i.length,e])}var Sy=k({frame_:gZ});function xZ(r,e,t,o,n=wy){o==null&&(o=o1(e));let s=Sy(r,e,t),i=P(s,n(e));return Uu(i,o)}var OE=k({stft_:xZ});function yZ(r,e,t,o,n="bilinear",s=0){let i=T(r,"image","cropAndResize"),a=T(e,"boxes","cropAndResize","float32"),l=T(t,"boxInd","cropAndResize","int32"),u=a.shape[0];A(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),A(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),A(l.rank===1&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),A(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),A(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),A(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:i,boxes:a,boxInd:l},p={method:n,extrapolationValue:s,cropSize:o};return E.runKernel(la,c,p)}var PE=k({cropAndResize_:yZ});function bZ(r){let e=T(r,"image","flipLeftRight","float32");A(e.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);let t={image:e};return E.runKernel(fa,t,{})}var LE=k({flipLeftRight_:bZ});function CZ(r){let e=T(r,"image","grayscaleToRGB"),t=e.rank-1,o=e.shape[t];A(e.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`),A(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(e.rank);return n.fill(1,0,t),n[t]=3,$r(e,n)}var zE=k({grayscaleToRGB_:CZ});function wZ(r,e,t=0,o=.5){let n=T(r,"image","rotateWithOffset","float32");A(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},i={radians:e,fillValue:t,center:o};return E.runKernel(Aa,s,i)}var BE=k({rotateWithOffset_:wZ});function zs(r,e,t,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let i=r.shape[0];return t=Math.min(t,i),A(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),A(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),A(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),A(e.rank===1,()=>"scores must be a 1D tensor"),A(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${e.shape[0]}`),A(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:t,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function SZ(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY){let s=T(r,"boxes","nonMaxSuppression","float32"),i=T(e,"scores","nonMaxSuppression","float32"),a=zs(s,i,t,o,n);t=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l={maxOutputSize:t,iouThreshold:o,scoreThreshold:n};return E.runKernel(ya,{boxes:s,scores:i},l)}var ME=k({nonMaxSuppression_:SZ});function VE(r,e,t){let o=IZ(r,e,t),n=o<0?-(o+1):o;r.splice(n,0,e)}function IZ(r,e,t){return TZ(r,e,t||vZ)}function vZ(r,e){return r>e?1:r<e?-1:0}function TZ(r,e,t){let o=0,n=r.length,s=0,i=!1;for(;o<n;){s=o+(n-o>>>1);let a=t(e,r[s]);a>0?o=s+1:(n=s,i=!a)}return i?o:-o-1}function Iy(r,e,t,o,n){return n1(r,e,t,o,n,0)}function vy(r,e,t,o,n,s){return n1(r,e,t,o,n,0,!1,s,!0)}function Ty(r,e,t,o,n,s){return n1(r,e,t,o,n,s,!0)}function n1(r,e,t,o,n,s,i=!1,a=!1,l=!1){let u=[];for(let g=0;g<e.length;g++)e[g]>n&&u.push({score:e[g],boxIndex:g,suppressBeginIndex:0});u.sort(GE);let c=s>0?-.5/s:0,p=[],m=[];for(;p.length<t&&u.length>0;){let g=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:C}=g;if(x<n)break;let S=!1;for(let I=p.length-1;I>=C;--I){let N=kZ(r,b,p[I]);if(N>=o){S=!0;break}if(g.score=g.score*NZ(o,c,N),g.score<=n)break}g.suppressBeginIndex=p.length,S||(g.score===x?(p.push(b),m.push(g.score)):g.score>n&&VE(u,g,GE))}let f=p.length,d=t-f;a&&d>0&&(p.push(...new Array(d).fill(0)),m.push(...new Array(d).fill(0)));let h={selectedIndices:p};return i&&(h.selectedScores=m),l&&(h.validOutputs=f),h}function kZ(r,e,t){let o=r.subarray(e*4,e*4+4),n=r.subarray(t*4,t*4+4),s=Math.min(o[0],o[2]),i=Math.min(o[1],o[3]),a=Math.max(o[0],o[2]),l=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),p=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),f=(a-s)*(l-i),d=(p-u)*(m-c);if(f<=0||d<=0)return 0;let h=Math.max(s,u),g=Math.max(i,c),x=Math.min(a,p),b=Math.min(l,m),C=Math.max(x-h,0)*Math.max(b-g,0);return C/(f+d-C)}function NZ(r,e,t){let o=Math.exp(e*t*t);return t<=r?o:0}function GE(r,e){return r.score-e.score||r.score===e.score&&e.boxIndex-r.boxIndex}async function $Z(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY){let s=T(r,"boxes","nonMaxSuppressionAsync"),i=T(e,"scores","nonMaxSuppressionAsync"),a=zs(s,i,t,o,n);t=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:p}=Iy(u,c,t,o,n);return s!==r&&s.dispose(),i!==e&&i.dispose(),Gt(p,"int32")}var UE=$Z;function EZ(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=T(r,"boxes","nonMaxSuppression"),a=T(e,"scores","nonMaxSuppression"),l=zs(i,a,t,o,n,s);t=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u={boxes:i,scores:a},c={maxOutputSize:t,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},p=E.runKernel(ba,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}var WE=k({nonMaxSuppressionWithScore_:EZ});async function RZ(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=T(r,"boxes","nonMaxSuppressionAsync"),a=T(e,"scores","nonMaxSuppressionAsync"),l=zs(i,a,t,o,n,s);t=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),a.data()]),c=u[0],p=u[1],{selectedIndices:m,selectedScores:f}=Ty(c,p,t,o,n,s);return i!==r&&i.dispose(),a!==e&&a.dispose(),{selectedIndices:Gt(m,"int32"),selectedScores:Gt(f)}}var HE=RZ;function AZ(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=T(r,"boxes","nonMaxSuppression"),a=T(e,"scores","nonMaxSuppression"),l=zs(i,a,t,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,m={boxes:i,scores:a},f={maxOutputSize:u,iouThreshold:c,scoreThreshold:p,padToMaxOutputSize:s},d=E.runKernel(fu,m,f);return{selectedIndices:d[0],validOutputs:d[1]}}var KE=k({nonMaxSuppressionPadded_:AZ});async function DZ(r,e,t,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=T(r,"boxes","nonMaxSuppressionAsync"),a=T(e,"scores","nonMaxSuppressionAsync"),l=zs(i,a,t,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[m,f]=await Promise.all([i.data(),a.data()]),{selectedIndices:d,validOutputs:h}=vy(m,f,u,c,p,s);return i!==r&&i.dispose(),a!==e&&a.dispose(),{selectedIndices:Gt(d,"int32"),validOutputs:ae(h,"int32")}}var qE=DZ;function FZ(r,e,t=!1,o=!1){let n=T(r,"images","resizeBilinear");A(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),A(e.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`),A(o===!1||t===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=O(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=e,a={images:s},l={alignCorners:t,halfPixelCenters:o,size:e},u=E.runKernel(Is,a,l);return i?O(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var ky=k({resizeBilinear_:FZ});function _Z(r,e,t=!1,o=!1){let n=T(r,"images","resizeNearestNeighbor");A(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),A(e.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`),A(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),A(o===!1||t===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=O(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=e,a={images:s},l={alignCorners:t,halfPixelCenters:o,size:e},u=E.runKernel(Ss,a,l);return i?O(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var Ny=k({resizeNearestNeighbor_:_Z});function OZ(r,e="binary",t=!1,o=.5){let n=T(r,"image","threshold"),s=.2989,i=.587,a=.114,l=n.shape[0]*n.shape[1],u=P(Gt([o]),255),c,p,m,f;if(A(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),A(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),A(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),A(e==="otsu"||e==="binary",()=>`Method must be binary or otsu, but was ${e}`),n.shape[2]===3){[c,p,m]=fr(n,[1,1,1],-1);let g=P(c,s),x=P(p,i),b=P(m,a);f=q(q(g,x),b)}else f=r;if(e==="otsu"){let g=Dx(j(ym(f),"int32"),Tr([]),256);u=PZ(g,l)}let d=t?Qo(f,u):qt(f,u);return j(P(d,255),"int32")}function PZ(r,e){let t=Gt([-1]),o=Gt([0]),n=Gt([0]),s,i,a,l,u,c;for(let p=0;p<r.size-1;p++){s=Ae(r,0,p+1),i=Ae(r,p+1),u=se(ue(s),e),c=se(ue(i),e);let m=ue(P(s,Mu(0,s.size)));a=se(m,ue(s));let f=Ga(i.shape,s.size),d=q(Mu(0,i.size),f),h=P(i,d);l=se(ue(h),ue(i));let g=ne(a,l),x=ne(a,l),b=P(u,c);n=P(P(b,g),x);let C=qt(n,o);o=kt(C,n,o),t=kt(C,Gt([p]),t)}return t}var XE=k({threshold_:OZ});function LZ(r,e,t="nearest",o="constant",n=0,s){let i=T(r,"image","transform","float32"),a=T(e,"transforms","transform","float32");A(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),A(a.rank===2&&(a.shape[0]===i.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),A(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let l={image:i,transforms:a},u={interpolation:t,fillMode:o,fillValue:n,outputShape:s};return E.runKernel(Ea,l,u)}var jE=k({transform_:LZ});function zZ(r,e,t){A(e%1===0,()=>`bandPart(): numLower must be an integer, got ${e}.`),A(t%1===0,()=>`bandPart(): numUpper must be an integer, got ${t}.`);let o=T(r,"a","bandPart");A(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,i]=o.shape.slice(-2);if(!(e<=s))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${s}).`);if(!(t<=i))throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${i}).`);e<0&&(e=s),t<0&&(t=i);let a=O(Mu(0,s,1,"int32"),[-1,1]),l=Mu(0,i,1,"int32"),u=ne(a,l),c=Lr(Qo(u,ae(+e,"int32")),Yo(u,ae(-t,"int32"))),p=it([s,i],o.dtype);return O(tr(wr(O(o,[-1,s,i])).map(m=>kt(c,m,p))),n)}var YE=k({bandPart_:zZ});function BZ(r){let e;if(Array.isArray(r)){e=!1,A(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)A(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else e=!0,r=fr(r,r.shape[0],0).map(n=>Zo(n,[0]));A(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let t=[],o=r;for(let n=0;n<r.length;++n)t.push(E.tidy(()=>{let s=o[n];if(n>0)for(let i=0;i<n;++i){let a=P(ue(P(t[i],s)),t[i]);s=ne(s,a)}return se(s,gl(s,"euclidean"))}));return e?tr(t,0):t}var QE=k({gramSchmidt_:BZ});function MZ(r,e=!1){if(A(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return ZE(r,e);{let t=r.shape.slice(0,r.shape.length-2).reduce((l,u)=>l*u),o=wr(O(r,[t,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(l=>{let[u,c]=ZE(l,e);n.push(u),s.push(c)});let i=O(tr(n,0),r.shape),a=O(tr(s,0),r.shape);return[i,a]}}function ZE(r,e=!1){return E.tidy(()=>{A(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let t=r.shape[0],o=r.shape[1],n=Oc(t),s=to(r),i=yl([[1]],[1,1]),a=to(i),l=t>=o?o:t;for(let u=0;u<l;++u){let c=s,p=a,m=n;[a,s,n]=E.tidy(()=>{let f=Ae(s,[u,u],[t-u,1]),d=gl(f),h=Ae(s,[u,u],[1,1]),g=kt(qt(h,0),yl([[-1]]),yl([[1]])),x=ne(h,P(g,d)),b=se(f,x);b.shape[0]===1?a=to(i):a=et([i,Ae(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let C=We(se(Ge(g,x),d)),S=Ae(s,[u,0],[t-u,o]),I=P(C,a),N=Pe(a);if(u===0)s=ne(S,Ge(I,Ge(N,S)));else{let F=ne(S,Ge(I,Ge(N,S)));s=et([Ae(s,[0,0],[u,o]),F],0)}let $=Pe(I),R=Ae(n,[0,u],[t,n.shape[1]-u]);if(u===0)n=ne(R,Ge(Ge(R,a),$));else{let F=ne(R,Ge(Ge(R,a),$));n=et([Ae(n,[0,0],[t,u]),F],1)}return[a,s,n]}),ke([c,p,m])}return!e&&t>o&&(n=Ae(n,[0,0],[t,o]),s=Ae(s,[0,0],[o,o])),[n,s]})}var JE=k({qr_:MZ});var rr;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(rr||(rr={}));function VZ(r,e,t=rr.SUM_BY_NONZERO_WEIGHTS){let o=T(r,"losses","computeWeightedLoss"),n=null;e!=null&&(n=T(e,"weights","computeWeightedLoss"));let s=n==null?o:P(o,n);if(t===rr.NONE)return s;if(t===rr.SUM)return ue(s);if(t===rr.MEAN){if(n==null)return Ct(s);{let i=o.size/n.size,a=se(ue(s),ue(n));return i>1?se(a,ae(i)):a}}if(t===rr.SUM_BY_NONZERO_WEIGHTS){if(n==null)return se(ue(s),ae(o.size));{let i=P(n,pr(o.shape)),a=j(ue(Bi(i,ae(0))),"float32");return se(ue(s),a)}}throw Error(`Unknown reduction: ${t}`)}var zr=k({computeWeightedLoss_:VZ});function GZ(r,e,t,o=rr.SUM_BY_NONZERO_WEIGHTS){let n=T(r,"labels","absoluteDifference"),s=T(e,"predictions","absoluteDifference"),i=null;t!=null&&(i=T(t,"weights","absoluteDifference")),Kt(n.shape,s.shape,"Error in absoluteDifference: ");let a=It(ne(n,s));return zr(a,i,o)}var eR=k({absoluteDifference_:GZ});function UZ(r,e,t,o,n=rr.SUM_BY_NONZERO_WEIGHTS){let s=T(r,"labels","cosineDistance"),i=T(e,"predictions","cosineDistance"),a=null;o!=null&&(a=T(o,"weights","cosineDistance")),Kt(s.shape,i.shape,"Error in cosineDistance: ");let l=ae(1),u=ne(l,ue(P(s,i),t,!0));return zr(u,a,n)}var tR=k({cosineDistance_:UZ});function WZ(r,e,t,o=rr.SUM_BY_NONZERO_WEIGHTS){let n=T(r,"labels","hingeLoss"),s=T(e,"predictions","hingeLoss"),i=null;t!=null&&(i=T(t,"weights","hingeLoss")),Kt(n.shape,s.shape,"Error in hingeLoss: ");let a=ae(1);n=ne(P(ae(2),n),a);let l=Er(ne(a,P(n,s)));return zr(l,i,o)}var rR=k({hingeLoss_:WZ});function HZ(r,e,t,o=1,n=rr.SUM_BY_NONZERO_WEIGHTS){let s=T(r,"labels","huberLoss"),i=T(e,"predictions","huberLoss"),a=null;t!=null&&(a=T(t,"weights","huberLoss")),Kt(s.shape,i.shape,"Error in huberLoss: ");let l=ae(o),u=It(ne(i,s)),c=Ha(u,l),p=ne(u,c),m=q(P(ae(.5),Me(c)),P(l,p));return zr(m,a,n)}var oR=k({huberLoss_:HZ});function KZ(r,e,t,o=1e-7,n=rr.SUM_BY_NONZERO_WEIGHTS){let s=T(r,"labels","logLoss"),i=T(e,"predictions","logLoss"),a=null;t!=null&&(a=T(t,"weights","logLoss")),Kt(s.shape,i.shape,"Error in logLoss: ");let l=ae(1),u=ae(o),c=We(P(s,Cr(q(i,u)))),p=P(ne(l,s),Cr(q(ne(l,i),u))),m=ne(c,p);return zr(m,a,n)}var nR=k({logLoss_:KZ});function qZ(r,e,t,o=rr.SUM_BY_NONZERO_WEIGHTS){let n=T(r,"labels","meanSquaredError"),s=T(e,"predictions","meanSquaredError"),i=null;t!=null&&(i=T(t,"weights","meanSquaredError")),Kt(n.shape,s.shape,"Error in meanSquaredError: ");let a=Nm(n,s);return zr(a,i,o)}var sR=k({meanSquaredError_:qZ});function XZ(r,e){let t=T(r,"labels","sigmoidCrossEntropyWithLogits"),o=T(e,"logits","sigmoidCrossEntropyWithLogits");Kt(t.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=Er(o),s=P(o,t),i=Ou(er(We(It(o))));return q(ne(n,s),i)}function jZ(r,e,t,o=0,n=rr.SUM_BY_NONZERO_WEIGHTS){let s=T(r,"multiClassLabels","sigmoidCrossEntropy"),i=T(e,"logits","sigmoidCrossEntropy"),a=null;if(t!=null&&(a=T(t,"weights","sigmoidCrossEntropy")),Kt(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=ae(o),c=ae(1),p=ae(.5);s=q(P(s,ne(c,u)),P(p,u))}let l=XZ(s,i);return zr(l,a,n)}var iR=k({sigmoidCrossEntropy_:jZ});function YZ(r,e,t=-1){if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);return Lo((n,s,i)=>{let l=hm(s,[t],!0),u=ne(j(s,"float32"),l);i([n,u]);let c=We(P(u,n));return{value:ue(c,[t]),gradFunc:(f,d)=>{let[h,g]=d,x=Ps(f.shape,[t]);return[P(O(f,x),ne(j(h,"float32"),er(g))),P(O(f,x),ne(er(g),j(h,"float32")))]}}})(r,e)}function QZ(r,e,t,o=0,n=rr.SUM_BY_NONZERO_WEIGHTS){let s=T(r,"onehotLabels","softmaxCrossEntropy"),i=T(e,"logits","softmaxCrossEntropy"),a=null;if(t!=null&&(a=T(t,"weights","softmaxCrossEntropy")),Kt(s.shape,i.shape,"Error in softmaxCrossEntropy: "),o>0){let u=ae(o),c=ae(1),p=ae(s.shape[1]);s=q(P(s,ne(c,u)),se(u,p))}let l=YZ(s,i);return zr(l,a,n)}var aR=k({softmaxCrossEntropy_:QZ});function ZZ(r,e,t,o){let n=T(r,"indices","sparseFillEmptyRows","int32"),s=T(e,"values","sparseFillEmptyRows"),i=T(t,"denseShape","sparseFillEmptyRows","int32"),a=T(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(i.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(a.rank!==0)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);let l={indices:n,values:s,denseShape:i,defaultValue:a},u=E.runKernel(yu,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var lR=k({sparseFillEmptyRows_:ZZ});function JZ(r,e,t){let o=T(r,"inputIndices","sparseReshape","int32"),n=T(e,"inputShape","sparseReshape","int32"),s=T(t,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i={inputIndices:o,inputShape:n,newShape:s},a=E.runKernel(bu,i);return{outputIndices:a[0],outputShape:a[1]}}var uR=k({sparseReshape_:JZ});function e7(r,e,t){let o=T(r,"data","sparseSegmentMean"),n=T(e,"indices","sparseSegmentMean","int32"),s=T(t,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return E.runKernel(Cu,i)}var cR=k({sparseSegmentMean_:e7});function t7(r,e,t){let o=T(r,"data","sparseSegmentSum"),n=T(e,"indices","sparseSegmentSum","int32"),s=T(t,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return E.runKernel(wu,i)}var pR=k({sparseSegmentSum_:t7});function r7(r,e,t,o,n,s,i,a){let l=T(r,"data","stringNGrams","string");if(l.dtype!=="string")throw new Error("Data must be of datatype string");if(l.shape.length!==1)throw new Error(`Data must be a vector, saw: ${l.shape}`);let u=T(e,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let c={separator:t,nGramWidths:o,leftPad:n,rightPad:s,padWidth:i,preserveShortSequences:a},p={data:l,dataSplits:u},m=E.runKernel(Na,p,c);return{nGrams:m[0],nGramsSplits:m[1]}}var mR=k({stringNGrams_:r7});function o7(r,e,t=!0){let o=T(r,"input","stringSplit","string"),n=T(e,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:t},i={input:o,delimiter:n},a=E.runKernel(Su,i,s);return{indices:a[0],values:a[1],shape:a[2]}}var fR=k({stringSplit_:o7});function n7(r,e){let t=T(r,"input","stringToHashBucketFast","string"),o={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");let n={input:t};return E.runKernel(Iu,n,o)}var dR=k({stringToHashBucketFast_:n7});var s7={fft:Gu,ifft:xl,rfft:Uu,irfft:km},i7={hammingWindow:_E,hannWindow:wy,frame:Sy,stft:OE},qa={flipLeftRight:LE,grayscaleToRGB:zE,resizeNearestNeighbor:Ny,resizeBilinear:ky,rotateWithOffset:BE,cropAndResize:PE,nonMaxSuppression:ME,nonMaxSuppressionAsync:UE,nonMaxSuppressionWithScore:WE,nonMaxSuppressionWithScoreAsync:HE,nonMaxSuppressionPadded:KE,nonMaxSuppressionPaddedAsync:qE,threshold:XE,transform:jE},s1={bandPart:YE,gramSchmidt:QE,qr:JE},a7={absoluteDifference:eR,computeWeightedLoss:zr,cosineDistance:tR,hingeLoss:rR,huberLoss:oR,logLoss:nR,meanSquaredError:sR,sigmoidCrossEntropy:iR,softmaxCrossEntropy:aR},l7={sparseFillEmptyRows:lR,sparseReshape:uR,sparseSegmentMean:cR,sparseSegmentSum:pR},u7={stringNGrams:mR,stringSplit:fR,stringToHashBucketFast:dR};var Br=class extends Ed{minimize(e,t=!1,o){let{value:n,grads:s}=this.computeGradients(e,o);if(o!=null){let i=o.map(a=>({name:a.name,tensor:s[a.name]}));this.applyGradients(i)}else this.applyGradients(s);return ke(s),t?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return jv(e,t)}dispose(){this.iterations_!=null&&ke(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:ae(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}};Object.defineProperty(Br,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var Am=class extends Br{constructor(e,t,o=null){super(),this.learningRate=e,this.rho=t,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=E.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=E.registeredVariables[o],i=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:M(()=>Se(s).variable(i))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:M(()=>Se(s).variable(i))});let a=Array.isArray(e)?e[n].tensor:e[o];if(a==null)return;let l=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;M(()=>{let c=q(P(l,this.rho),P(Me(a),1-this.rho)),p=P(se(bt(q(u,this.epsilon)),bt(q(l,this.epsilon))),a),m=q(P(u,this.rho),P(Me(p),1-this.rho));l.assign(c),u.assign(m);let f=q(P(p,-this.learningRate),s);s.assign(f)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(ke(this.accumulatedGrads.map(e=>e.variable)),ke(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=e.length/2,o=!1;this.accumulatedGrads=e.slice(0,t).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=e.slice(t,t*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}};Am.className="Adadelta";Oo(Am);var Dm=class extends Br{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=E.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:M(()=>Ga(s.shape,this.initialAccumulatorValue).variable(!1))});let i=Array.isArray(e)?e[n].tensor:e[o];if(i==null)return;let a=this.accumulatedGrads[n].variable;M(()=>{let l=q(a,Me(i));a.assign(l);let u=q(P(se(i,bt(q(l,E.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&ke(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=!1;this.accumulatedGrads=e.map(o=>({originalName:o.name,variable:o.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}};Dm.className="Adagrad";Oo(Dm);var Fm=class extends Br{constructor(e,t,o,n=null){super(),this.learningRate=e,this.beta1=t,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],M(()=>{this.accBeta1=ae(t).variable(),this.accBeta2=ae(o).variable()}),n==null&&(this.epsilon=E.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(o=>o.name):Object.keys(e);M(()=>{let o=ne(1,this.accBeta1),n=ne(1,this.accBeta2);t.forEach((s,i)=>{let a=E.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:M(()=>Se(a).variable(l))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${s}/v`,variable:M(()=>Se(a).variable(l))});let u=Array.isArray(e)?e[i].tensor:e[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedSecondMoment[i].variable,m=q(P(c,this.beta1),P(u,1-this.beta1)),f=q(P(p,this.beta2),P(Me(u),1-this.beta2)),d=se(m,o),h=se(f,n);c.assign(m),p.assign(f);let g=q(P(se(d,q(bt(h),this.epsilon)),-this.learningRate),a);a.assign(g)}),this.accBeta1.assign(P(this.accBeta1,this.beta1)),this.accBeta2.assign(P(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&ke(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedSecondMoment!=null&&ke(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e),M(()=>{this.accBeta1.assign(ro(this.beta1,this.iterations_+1)),this.accBeta2.assign(ro(this.beta2,this.iterations_+1))});let t=e.length/2,o=!1;this.accumulatedFirstMoment=e.slice(0,t).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=e.slice(t,t*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}};Fm.className="Adam";Oo(Fm);var _m=class extends Br{constructor(e,t,o,n=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],M(()=>{this.iteration=ae(0).variable(),this.accBeta1=ae(t).variable()}),n==null&&(this.epsilon=E.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(o=>o.name):Object.keys(e);M(()=>{let o=ne(1,this.accBeta1),n=se(-this.learningRate,q(P(this.iteration,this.decay),1));t.forEach((s,i)=>{let a=E.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:Se(a).variable(l)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${s}/v`,variable:Se(a).variable(l)});let u=Array.isArray(e)?e[i].tensor:e[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedWeightedInfNorm[i].variable,m=q(P(c,this.beta1),P(u,1-this.beta1)),f=P(p,this.beta2),d=It(u),h=zo(f,d);c.assign(m),p.assign(h);let g=q(P(se(n,o),se(m,q(h,this.epsilon))),a);a.assign(g)}),this.iteration.assign(q(this.iteration,1)),this.accBeta1.assign(P(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&ke(this.accumulatedFirstMoment.map(e=>e.variable)),this.accumulatedWeightedInfNorm!=null&&ke(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}};_m.className="Adamax";Oo(_m);var Hu=class extends Br{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=Array.isArray(e)?e[n].tensor:e[o];if(s==null)return;let i=E.registeredVariables[o];M(()=>{let a=q(P(this.c,s),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,this.c!=null&&this.c.dispose(),this.c=Nt(ae(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(e=await this.extractIterations(e),e.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}};Hu.className="SGD";Oo(Hu);var Om=class extends Hu{constructor(e,t,o=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=o,this.accumulations=[],this.m=ae(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=E.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:M(()=>Se(s).variable(!1))});let i=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[o];a!=null&&M(()=>{let l,u=q(P(this.m,i),a);this.useNesterov?l=q(P(this.c,q(a,P(u,this.m))),s):l=q(P(this.c,u),s),i.assign(u),s.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&ke(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=!1;this.accumulations=e.map(o=>({originalName:o.name,variable:o.tensor.variable(t)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}};Om.className="Momentum";Oo(Om);var Pm=class extends Br{constructor(e,t=.9,o=0,n=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=E.backend.epsilon()),e==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(o=>o.name):Object.keys(e)).forEach((o,n)=>{let s=E.registeredVariables[o],i=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:M(()=>Se(s).variable(i))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:M(()=>Se(s).variable(i))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:M(()=>Se(s).variable(i))});let a=Array.isArray(e)?e[n].tensor:e[o];if(a==null)return;let l=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;M(()=>{let c=q(P(l,this.decay),P(Me(a),1-this.decay));if(this.centered){let p=this.accumulatedMeanGrads[n].variable,m=q(P(p,this.decay),P(a,1-this.decay)),f=se(P(a,this.learningRate),bt(ne(c,q(Me(m),this.epsilon)))),d=q(P(u,this.momentum),f);l.assign(c),p.assign(m),u.assign(d);let h=ne(s,d);s.assign(h)}else{let p=q(P(l,this.decay),P(Me(a),1-this.decay)),m=q(P(u,this.momentum),se(P(a,this.learningRate),bt(q(p,this.epsilon))));l.assign(p),u.assign(m);let f=ne(s,m);s.assign(f)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&ke(this.accumulatedMeanSquares.map(e=>e.variable)),this.accumulatedMeanGrads!=null&&this.centered&&ke(this.accumulatedMeanGrads.map(e=>e.variable)),this.accumulatedMoments!=null&&ke(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2,o=!1;this.accumulatedMeanSquares=e.slice(0,t).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=e.slice(t,t*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=e.slice(t*2,t*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}};Pm.className="RMSProp";Oo(Pm);var Xa=class{static sgd(e){return new Hu(e)}static momentum(e,t,o=!1){return new Om(e,t,o)}static rmsprop(e,t=.9,o=0,n=null,s=!1){return new Pm(e,t,o,n,s)}static adam(e=.001,t=.9,o=.999,n=null){return new Fm(e,t,o,n)}static adadelta(e=.001,t=.95,o=null){return new Am(e,t,o)}static adamax(e=.002,t=.9,o=.999,n=null,s=0){return new _m(e,t,o,n,s)}static adagrad(e,t=.1){return new Dm(e,t)}};var Hc={sgd:Xa.sgd,momentum:Xa.momentum,adadelta:Xa.adadelta,adagrad:Xa.adagrad,rmsprop:Xa.rmsprop,adamax:Xa.adamax,adam:Xa.adam};var c7=(()=>typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:r=>r())();function Kc(){return new Promise(r=>c7(()=>r()))}var w={};lt(w,{ERF_A1:()=>T7,ERF_A2:()=>k7,ERF_A3:()=>N7,ERF_A4:()=>$7,ERF_A5:()=>E7,ERF_P:()=>v7,PARALLELIZE_THRESHOLD:()=>$y,RowPartitionType:()=>ja,SELU_SCALE:()=>a1,SELU_SCALEALPHA:()=>i1,applyActivation:()=>Uc,assertAndGetBroadcastShape:()=>_e,assertAxesAreInnerMostDims:()=>UY,assertParamsConsistent:()=>p7,assignToTypedArray:()=>O7,axesAreInnerMostDims:()=>Hv,calculateShapes:()=>x5,checkEinsumDimSizes:()=>V7,checkPadOnDimRoundingMode:()=>yt,combineLocations:()=>V2,combineRaggedTensorToTensorShapes:()=>f7,complexWithEvenIndex:()=>D7,complexWithOddIndex:()=>F7,computeConv2DInfo:()=>Dc,computeConv3DInfo:()=>F2,computeDefaultPad:()=>Wv,computeDilation2DInfo:()=>H5,computeOptimalWindowSize:()=>x7,computeOutAndReduceShapes:()=>Kv,computeOutShape:()=>m7,computePool2DInfo:()=>Uv,computePool3DInfo:()=>K5,convertConv2DDataFormat:()=>_2,decodeEinsumEquation:()=>B7,eitherStridesOrDilationsAreOne:()=>Nr,expandShapeToKeepDim:()=>Ps,exponent:()=>L7,exponents:()=>P7,fromStringArrayToUint8:()=>lJ,fromUint8ToStringArray:()=>aJ,getAxesPermutation:()=>qv,getBroadcastDims:()=>C2,getComplexWithIndex:()=>_7,getEinsumComputePath:()=>G7,getEinsumPermutation:()=>M7,getFusedBiasGradient:()=>Gc,getFusedDyActivation:()=>Vc,getImageCenter:()=>y7,getInnerMostAxes:()=>WY,getPermuted:()=>C7,getRaggedRank:()=>h7,getReductionAxes:()=>pt,getReshaped:()=>b7,getReshapedPermuted:()=>w7,getRowPartitionTypesHelper:()=>d7,getSliceBeginCoords:()=>S7,getSliceSize:()=>I7,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>K7,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>q7,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>X7,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Q7,getSparseReshapeInputOutputMismatchErrorMessage:()=>J7,getSparseReshapeInputOutputMultipleErrorMessage:()=>Z7,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>j7,getSparseReshapeNegativeOutputDimErrorMessage:()=>Y7,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>oJ,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>eJ,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>tJ,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>rJ,getUndoAxesPermutation:()=>Rd,isIdentityPermutation:()=>U7,log:()=>l6,mergeRealAndImagArrays:()=>R7,prepareAndValidate:()=>g5,prepareSplitSize:()=>H7,segment_util:()=>u1,shouldFuse:()=>Wc,slice_util:()=>rt,splitRealAndImagArrays:()=>A7,tupleValuesAreOne:()=>zn,upcastType:()=>Ye,validateDefaultValueShape:()=>g7,validateInput:()=>Bv,validateUpdateShape:()=>S2,warn:()=>Da});function p7(r,e){let t=r[0].length;r.forEach((n,s)=>{A(n.length===t,()=>`Error in concat${t}D: rank of tensors[${s}] must be the same as the rank of the rest (${t})`)}),A(e>=0&&e<t,()=>`Error in concat${t}D: axis must be between 0 and ${t-1}.`);let o=r[0];r.forEach((n,s)=>{for(let i=0;i<t;i++)A(i===e||n[i]===o[i],()=>`Error in concat${t}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function m7(r,e){let t=r[0].slice();for(let o=1;o<r.length;o++)t[e]+=r[o][e];return t}var ja;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(ja||(ja={}));function f7(r,e,t){let o=new Array;if(t==null&&e==null)return o;if(e==null)for(;o.length<r+t.length;)o.push(-1);else o=e.slice();if(t==null)return o;if(r+t.length!==o.length)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${r+t.length}, but shape.rank = ${o.length}`);for(let n=1;n<t.length;++n){let s=t[n],i=o[o.length-t.length+n],a=o[i];if(s>=0)if(a>=0){if(a!==s)throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${a}`)}else o[i]=s}return o}function d7(r){let e={FIRST_DIM_SIZE:ja.FIRST_DIM_SIZE,VALUE_ROWIDS:ja.VALUE_ROWIDS,ROW_LENGTHS:ja.ROW_LENGTHS,ROW_SPLITS:ja.ROW_SPLITS,ROW_LIMITS:ja.ROW_LIMITS,ROW_STARTS:ja.ROW_STARTS},t=[];for(let o of r)if(o in e)t.push(e[o]);else break;return t}function h7(r){return r.length===0?0:r[0]===ja.FIRST_DIM_SIZE?r.length-1:r.length}function g7(r,e){if(r==null||e==null)return;let t=r.length,o=e.length;if(t>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(t,o-1);++n){let s=r[n],i=e[n+1];if(s>=0&&i>=0&&s!==1&&s!==i)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${i}`)}}var $y=30;function x7(r){return r<=$y?r:Kp(r,Math.floor(Math.sqrt(r)))}function y7(r,e,t){let o=t*(typeof r=="number"?r:r[0]),n=e*(typeof r=="number"?r:r[1]);return[o,n]}function b7(r,e,t,o=!0){let n=[];if(o)n=n.concat(e.slice(0)),n.push(r[0]/t),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=e.length;for(let i=0;i<s;++i)n=n.concat([r[i+1]/e[i],e[i]]);n=n.concat(r.slice(s+1))}return n}function C7(r,e,t=!0){let o=[];if(t){o.push(e);for(let n=e+1;n<r;++n)n<=2*e?(o.push(n),o.push(n-(e+1))):o.push(n)}else{let n=[],s=[];for(let i=1;i<r;++i)i>=e*2+1||i%2===1?s.push(i):n.push(i);o.push(...n),o.push(0),o.push(...s)}return o}function w7(r,e,t,o=!0){let n=[];o?n.push(r[0]/t):n.push(r[0]*t);for(let s=1;s<r.length;++s)s<=e.length?o?n.push(e[s-1]*r[s]):n.push(r[s]/e[s-1]):n.push(r[s]);return n}function S7(r,e){let t=[0];for(let o=0;o<e;++o)t.push(r[o][0]);return t}function I7(r,e,t){let o=r.slice(0,1);for(let n=0;n<t;++n)o.push(r[n+1]-e[n][0]-e[n][1]);return o}var i1=1.7580993408473768,a1=1.0507009873554805;var v7=.3275911,T7=.254829592,k7=-.284496736,N7=1.421413741,$7=-1.453152027,E7=1.061405429;function R7(r,e){if(r.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${e.length}.`);let t=new Float32Array(r.length*2);for(let o=0;o<t.length;o+=2)t[o]=r[o/2],t[o+1]=e[o/2];return t}function A7(r){let e=new Float32Array(r.length/2),t=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)e[o/2]=r[o],t[o/2]=r[o+1];return{real:e,imag:t}}function D7(r){let e=Math.ceil(r.length/4),t=new Float32Array(e),o=new Float32Array(e);for(let n=0;n<r.length;n+=4)t[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:t,imag:o}}function F7(r){let e=Math.floor(r.length/4),t=new Float32Array(e),o=new Float32Array(e);for(let n=2;n<r.length;n+=4)t[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:t,imag:o}}function _7(r,e){let t=r[e*2],o=r[e*2+1];return{real:t,imag:o}}function O7(r,e,t,o){r[o*2]=e,r[o*2+1]=t}function P7(r,e){let t=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(e?2:-2)*Math.PI*(n/r);t[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:t,imag:o}}function L7(r,e,t){let o=(t?2:-2)*Math.PI*(r/e),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var l1="->",z7=/->/g,hR=",",gR="...";function B7(r,e){r=r.replace(/\s/g,"");let t=(r.length-r.replace(z7,"").length)/l1.length;if(t<1)throw new Error("Equations without an arrow are not supported.");if(t>1)throw new Error(`Equation must contain exactly one arrow ("${l1}").`);let[o,n]=r.split(l1);A(o.indexOf(gR)===-1,()=>`The ellipsis notation ("${gR}") is not supported yet.`);let s=o.split(hR),i=s.length;if(e!==i)throw new Error(`Expected ${i} input tensors, received ${e}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let a=[];for(let m=0;m<n.length;++m){let f=n[m];if(!s.some(d=>d.indexOf(f)!==-1))throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);a.indexOf(f)===-1&&a.push(f)}for(let m=0;m<o.length;++m){let f=o[m];a.indexOf(f)===-1&&f!==hR&&a.push(f)}let l=new Array(s.length);for(let m=0;m<i;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);l[m]=[];for(let f=0;f<s[m].length;++f)l[m].push(a.indexOf(s[m][f]))}let u=a.length,c=n.length,p=[];for(let m=c;m<u;++m)p.push(m);return{allDims:a,summedDims:p,idDims:l}}function M7(r,e){let t=new Array(r);t.fill(-1);for(let n=0;n<e.length;++n)t[e[n]]=n;let o=[];for(let n=0;n<r;++n)t[n]===-1&&o.push(n);return t=t.filter(n=>n!==-1),{permutationIndices:t,expandDims:o}}function V7(r,e,t){let o=new Array(r);for(let n=0;n<t.length;++n){let s=t[n].shape;for(let i=0;i<e[n].length;++i)o[e[n][i]]===void 0?o[e[n][i]]=s[i]:A(o[e[n][i]]===s[i],()=>`Expected dimension ${o[e[n][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`)}}function G7(r,e){let t=r,o=[],n=0;r.length===0&&t.push(-1),n=r.length+1;for(let i=0;i<n;++i)o.push([]);let s=[];for(let i=0;i<t.length;++i){let a=t[i],l=W7(e,a);for(let u of l)s.indexOf(u)===-1&&(o[i].push(u),s.push(u))}return{path:t,steps:o}}function U7(r){return r.every((e,t)=>e===t)}function W7(r,e){let t=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(e)!==-1||e===-1)&&t.push(o);return t}function H7(r,e,t=0){let o=[];if(typeof e=="number")A(r.shape[t]%e===0,()=>"Number of splits must evenly divide the axis."),o=new Array(e).fill(r.shape[t]/e);else{let n=e.reduce((i,a)=>(a===-1&&(i+=1),i),0);A(n<=1,()=>"There should be only one negative value in split array.");let s=e.indexOf(-1);if(s!==-1){let i=e.reduce((a,l)=>l>0?a+l:a);e[s]=r.shape[t]-i}A(r.shape[t]===e.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),o=e}return o}function K7(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function q7(r,e){return`indices(${r}, 0) is invalid: ${e} < 0`}function X7(r,e,t){return`indices(${r}, 0) is invalid: ${e} >= ${t}`}function j7(r,e){return`only one output dimension may be -1, not both ${r} and ${e}`}function Y7(r,e){return`size ${r} must be non-negative, not ${e}`}function Q7(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Z7(r,e){let t=Ke(r),o=Ke(e);return`Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${e}`}function J7(r,e){let t=Ke(r),o=Ke(e);return`Input to reshape is a tensor with ${t} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${e}`}function eJ(){return"segment ids must be >= 0"}function tJ(){return"segment ids are not increasing"}function rJ(r,e){return`Segment id ${r} out of range [0, ${e}), possibly because segmentIds input is not sorted.`}function oJ(r,e,t){return`Bad: indices[${r}] == ${e} out of range [0, ${t})`}var u1={};lt(u1,{collectGatherOpShapeInfo:()=>iJ,computeOutShape:()=>sJ,segOpComputeOptimalWindowSize:()=>nJ});function nJ(r,e){let t=!1,o;for(r<=$y?(o=r,t=!0):o=Kp(r,Math.floor(Math.sqrt(r)));!t;)o>e||o===r?t=!0:o=Kp(r,o+1);return o}function sJ(r,e,t){let o=[],n=r.length;for(let s=0;s<n;s++)s!==e?o.push(r[s]):o.push(t);return o}function iJ(r,e,t,o){let n=e.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(t<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${t}).`);for(let p=0;p<o;++p)if(r.shape[p]!==e.shape[p])throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${e.shape[p]}.`);let i=r.shape[t],a=[],l=1,u=1,c=1;for(let p=0;p<o;++p)a.push(r.shape[p]),l*=r.shape[p];for(let p=o;p<t;p++)a.push(r.shape[p]),u*=r.shape[p];for(let p=o;p<n;p++)a.push(e.shape[p]);for(let p=t+1;p<s;p++)a.push(r.shape[p]),c*=r.shape[p];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function aJ(r){try{return r.map(e=>Zp(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function lJ(r){return r.map(e=>Qp(e))}var vt={};lt(vt,{nonMaxSuppressionV3Impl:()=>Iy,nonMaxSuppressionV4Impl:()=>vy,nonMaxSuppressionV5Impl:()=>Ty,whereImpl:()=>xy});var Ey={kernelName:mn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,Ls(j(t,"float32"),-1))}}};var xR={kernelName:pi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>{let o=Me(j(t,"float32")),n=bt(ne(ae(1),o));return We(se(r,n))}}}};var yR={kernelName:mi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>{let o=bt(ne(Me(j(t,"float32")),1));return se(r,o)}}}};var bR={kernelName:Wr,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=r,l=pt(t.shape,n);return l.length>0&&(a=ue(a,l)),O(a,t.shape)},b:()=>{let a=r,l=pt(o.shape,n);return l.length>0&&(a=ue(a,l)),O(a,o.shape)}}}};var CR={kernelName:Qn,saveAllInputs:!0,gradFunc:(r,e)=>{let t={};return e.forEach((o,n)=>{t[n]=()=>r.clone()}),t}};var wR={kernelName:Zn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>Se(t)}}};var SR={kernelName:Jn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>Se(t)}}};var IR={kernelName:fi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,bt(ne(ae(1),Me(j(t,"float32")))))}}};var vR={kernelName:di,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>{let o=bt(q(ae(1),Me(j(t,"float32"))));return se(r,o)}}}};var TR={kernelName:fn,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=q(Me(t),Me(o)),l=P(r,se(o,a)),u=pt(t.shape,n);return u.length>0&&(l=ue(l,u)),O(l,t.shape)},b:()=>{let a=q(Me(t),Me(o)),l=We(P(r,se(t,a))),u=pt(o.shape,n);return u.length>0&&(l=ue(l,u)),O(l,o.shape)}}}};var kR={kernelName:hi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,q(Me(j(t,"float32")),1))}}};var NR={kernelName:gi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,ne(ae(1),Me(j(t,"float32"))))}}};function uJ(r,e,t,o,n,s){let i=T(r,"dy","avgPool3dGrad"),a=T(e,"input","avgPool3dGrad"),l=i,u=a,c=!1;a.rank===4&&(c=!0,l=O(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=O(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),A(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),A(u.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),yt("avgPool3dGrad",n,s);let p={dy:l,input:u},m={filterSize:t,strides:o,pad:n,dimRoundingMode:s},f=E.runKernel(Xl,p,m);return c?O(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}var $R=k({avgPool3dGrad_:uJ});var ER={kernelName:na,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{filterSize:n,strides:s,pad:i,dimRoundingMode:a}=t;return{x:()=>$R(r,o,n,s,i,a)}}};function cJ(r,e,t,o,n){let s=T(r,"dy","avgPoolGrad"),i=T(e,"input","avgPoolGrad");A(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let a=i,l=s,u=!1;i.rank===3&&(u=!0,a=O(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=O(s,[1,s.shape[0],s.shape[1],s.shape[2]])),A(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),A(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);let c={dy:l,input:a},p={filterSize:t,strides:o,pad:n},m=E.runKernel(ql,c,p);return u?O(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var RR=k({avgPoolGrad_:cJ});var AR={kernelName:es,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{filterSize:n,strides:s,pad:i}=t;return{x:()=>RR(r,o,n,s,i)}}};var DR={kernelName:ts,inputsToSave:["a","b"],gradFunc:(r,e,t)=>{let[o,n]=e,{transposeA:s,transposeB:i}=t;return!s&&!i?{a:()=>Ge(r,n,!1,!0),b:()=>Ge(o,r,!0,!1)}:!s&&i?{a:()=>Ge(r,n,!1,!1),b:()=>Ge(r,o,!0,!1)}:s&&!i?{a:()=>Ge(n,r,!1,!0),b:()=>Ge(o,r,!1,!1)}:{a:()=>Ge(n,r,!0,!0),b:()=>Ge(r,o,!0,!0)}}};var FR={kernelName:rs,gradFunc:(r,e,t)=>{let{blockShape:o,crops:n}=t;return{x:()=>zu(r,o,n)}}};var _R={kernelName:m$,gradFunc:(r,e,t)=>{let o=t,n=o.inputShape,s=o.shape,i=Array.from(s);for(let l=n.length-1;l>=0;l--)if(n[l]===s[l])i[l]=1;else if(n[l]!==1)throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${s}].`);let a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>ue(r,a,!0)}}};var OR={kernelName:go,gradFunc:r=>({x:()=>r.clone()})};var PR={kernelName:xo,gradFunc:r=>({x:()=>Se(r)})};var LR={kernelName:dn,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{clipValueMin:n,clipValueMax:s}=t;return{x:()=>kt(Lr(Yo(o,n),Qo(o,s)),r,Se(r))}}};var zR={kernelName:sa,inputsToSave:["x"],gradFunc:Ey.gradFunc};var BR={kernelName:os,saveAllInputs:!0,gradFunc:(r,e,t)=>{let o=e.map(l=>l.shape),{axis:n}=t,s=ur(n,e[0].shape)[0],i=o.map(l=>l[s]);return fr(r,i,s).map(l=>()=>l)}};var MR={kernelName:ns,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{let[o,n]=e,{dilations:s,strides:i,pad:a,dataFormat:l}=t;return A(zn(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>um(o.shape,r,n,i,a,l),filter:()=>Rm(o,r,n.shape,i,a,l)}}};var VR={kernelName:ss,inputsToSave:["dy","filter"],gradFunc:(r,e,t)=>{let[o,n]=e,{strides:s,pad:i,dataFormat:a,dimRoundingMode:l}=t;return{dy:()=>Po(r,n,s,i,a,1,l),filter:()=>Rm(r,o,n.shape,s,i,a,l)}}};function pJ(r,e,t,o,n){let s=r;r.rank===4&&(s=O(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let i=e;i.rank===4&&(i=O(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),A(s.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),A(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),A(t.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`),A(s.shape[4]===t[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${t[3]}.`),A(i.shape[4]===t[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${t[4]}).`);let a={x:s,dy:i},l={strides:o,pad:n,filterShape:t};return E.runKernel(Zl,a,l)}var GR=k({conv3DBackpropFilter_:pJ});var UR={kernelName:ia,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{let{dilations:o,strides:n,pad:s}=t;A(zn(o),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);let[i,a]=e;return{x:()=>Bx(i.shape,r,a,n,s),filter:()=>GR(i,r,a.shape,n,s)}}};var WR={kernelName:hn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(We(Sm(j(t,"float32"))),r)}}};var HR={kernelName:gn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(Im(j(t,"float32")),r)}}};var KR={kernelName:is,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{axis:n,exclusive:s,reverse:i}=t;return{x:()=>{let a=qv([n],o.rank),l=mm(r,n,s,!i);return a!=null&&(l=Pe(l,a)),l}}}};var qR={kernelName:as,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{let{dilations:o,strides:n,pad:s,dimRoundingMode:i}=t,a=o??[1,1];A(zn(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);let[l,u]=e;return A(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),A(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),A(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),A(Nr(n,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${a}'.`),yt("depthwiseConv2d",s,i),{x:()=>Cy(l.shape,r,u,n,s,a,i),filter:()=>by(l,r,u.shape,n,s,a,i)}}};var XR={kernelName:ca,inputsToSave:["x","filter"],gradFunc:(r,e,t)=>{let[o,n]=e,s={x:o,filter:n,dy:r},i={x:o,filter:n,dy:r};return{x:()=>E.runKernel(xd,s,t),filter:()=>E.runKernel(yd,i,t)}}};var jR={kernelName:yn,outputsToSave:[!0],gradFunc:(r,e)=>{let[t]=e,o={dy:r,y:t};return{x:()=>E.runKernel(nu,o)}}};var YR={kernelName:yi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e,o=P(er(We(Me(t))),2/Math.sqrt(Math.PI));return{x:()=>P(r,o)}}};var QR={kernelName:yo,outputsToSave:[!0],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,t)}}};var ZR={kernelName:ls,inputsToSave:["input"],gradFunc:(r,e)=>{let[t]=e;return{input:()=>O(r,t.shape)}}};var JR={kernelName:bo,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,er(t))}}};var eA={kernelName:Co,gradFunc:r=>({x:()=>Se(r)})};var tA={kernelName:Cn,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=se(r,j(o,"float32")),l=pt(t.shape,n);return l.length>0?O(ue(a,l),t.shape):a},b:()=>{let a=P(r,j(t,"float32")),l=pt(o.shape,n);l.length>0&&(a=O(ue(a,l),o.shape));let u=Me(o);return We(se(a,j(u,"float32")))}}}};var rA={kernelName:us,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,e,t)=>{let{varianceEpsilon:o}=t,[n,s,i,a]=e,l=a??ae(1),u=pt(s.shape,n.shape),c=[];if(s.rank===1){for(let S=0;S<n.shape.length-1;++S)c.push(n.shape[S]);c.push(1)}let p=ne(n,s),m=P(r,l),f=bm(q(i,ae(o))),d=P(P(P(f,f),f),ae(-.5));return{x:()=>s.rank===1?O(P(P(r,$r(O(f,[1,1,1,s.shape[0]]),c)),l),n.shape):O(P(P(r,f),l),n.shape),mean:()=>{let S=P(P(f,ae(-1)),m);return s.rank===1&&(S=ue(S,u)),O(S,s.shape)},variance:()=>{let S=P(P(d,p),m);return s.rank===1&&(S=ue(S,u)),O(S,s.shape)},scale:()=>{let S=P(p,f),I=P(r,S);return s.rank===1&&(I=ue(I,u)),O(I,s.shape)},offset:()=>{let S=r;return s.rank===1&&(S=ue(S,u)),O(S,s.shape)}}}};var sA={kernelName:cs,inputsToSave:["x","indices"],gradFunc:(r,e,t)=>{let[o,n]=e,{axis:s}=t,i=ur(s,o.shape)[0];return{x:()=>{let l=o.shape,u=n.size,c=l.slice(0,i),p=c.length,m=l.slice(s,l.length).slice(1),f=m.length,d=oA(0,p),h=oA(p+1,p+1+f),g=nA([c,[u],m]),x=O(r,g),b=O(n,[u]),C=nA([[p],d,h]),S=Pe(x,C),I=Em(S,b,o.shape[i]),N=Rd(C);return I=Pe(I,N),I},indices:()=>n}}};function oA(r,e){let t=[];for(let o=r;o<e;++o)t.push(o);return t}function nA(r){let e=[];for(let t=0;t<r.length;++t)for(let o=0;o<r[t].length;++o)e.push(r[t][o]);return e}var iA={kernelName:wo,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e;return{a:()=>Se(t),b:()=>Se(o)}}};var aA={kernelName:So,gradFunc:r=>({x:()=>j(r,"float32")})};var lA={kernelName:bi,gradFunc:r=>({x:()=>Se(r)})};var uA={kernelName:Ci,gradFunc:r=>({x:()=>Se(r)})};var cA={kernelName:Sn,gradFunc:r=>({x:()=>Se(r)})};var pA={kernelName:ps,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{alpha:n}=t,s=qt(o,0);return{x:()=>kt(s,r,P(r,n))}}};var mA={kernelName:wi,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,q(t,1))}}};var fA={kernelName:Io,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,j(t,"float32"))}}};var dA={kernelName:f$,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,e,t)=>{let[o]=e,{axis:n}=t;return{logits:()=>{let i=er(o);return ne(r,P(ue(r,n,!0),i))}}}};function mJ(r,e,t,o=5,n=1,s=1,i=.5){let a={x:r,y:e,dy:t},l={depthRadius:o,bias:n,alpha:s,beta:i};return E.runKernel(lu,a,l)}var hA=k({localResponseNormalizationBackprop_:mJ});var gA={kernelName:ga,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{let[o,n]=e,{depthRadius:s,bias:i,alpha:a,beta:l}=t;return{x:()=>hA(o,n,r,s,i,a,l)}}};function Ry(r,e,t,o){return e.rank<t.rank&&(e=O(e,Ps(e.shape,o))),r.rank<t.rank&&(r=O(r,Ps(r.shape,o))),{x:()=>P(r,j(Kr(t,e),r.dtype))}}var c1={kernelName:ms,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{let o=t,{reductionIndices:n}=o,s=e[0],i=e[1],a=ur(n,s.shape),l=Ry(r,i,s,a);return{x:()=>l.x()}}};var xA={kernelName:vo,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e;return{a:()=>P(r,j(Yo(t,o),"float32")),b:()=>P(r,j(fm(t,o),"float32"))}}};function fJ(r,e,t,o,n,s,i){let a=T(r,"dy","maxPool3dGrad"),l=T(e,"input","maxPool3dGrad"),u=T(t,"output","maxPool3dGrad"),c=a,p=l,m=u,f=!1;l.rank===4&&(f=!0,c=O(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),p=O(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=O(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),A(c.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),A(p.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),A(m.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`),yt("maxPool3dGrad",s,i);let d={dy:c,input:p,output:m},h={filterSize:o,strides:n,pad:s,dimRoundingMode:i},g=E.runKernel(cu,d,h);return f?O(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}var yA=k({maxPool3dGrad_:fJ});var bA={kernelName:xa,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{let[o,n]=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=t;return{x:()=>yA(r,o,n,s,i,a,l)}}};function dJ(r,e,t,o,n,s,i){let a=T(r,"dy","maxPoolGrad"),l=T(e,"input","maxPoolGrad"),u=T(t,"output","maxPoolGrad");A(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),A(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),A(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),yt("maxPoolGrad",s,i);let c={dy:a,input:l,output:u},p={filterSize:o,strides:n,pad:s,dimRoundingMode:i};return E.runKernel(uu,c,p)}var CA=k({maxPoolGrad_:dJ});var wA={kernelName:fs,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{let[o,n]=e,{filterSize:s,strides:i,pad:a}=t;return{x:()=>CA(r,o,n,s,i,a)}}};var SA={kernelName:ds,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{axis:n}=t,s=ur(n,o.shape),a=Kv(o.shape,s)[1],l=Ke(a);return{x:()=>{let c=o.shape.slice();s.forEach(f=>{c[f]=1});let p=O(r,c);return se(P(p,pr(o.shape,"float32")),l)}}}};var IA={kernelName:hs,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,e,t)=>{let o=t,{axis:n}=o,[s,i]=e,a=ur(n,s.shape),l=Ry(r,i,s,a);return{x:()=>l.x()}}};var vA={kernelName:To,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e;return{a:()=>P(r,j(Qo(t,o),"float32")),b:()=>P(r,j(qt(t,o),"float32"))}}};var TA={kernelName:gs,inputsToSave:["x"],gradFunc:(r,e,t)=>{let o=e[0],{paddings:n}=t,s=n.map(i=>i[0]);return{x:()=>Ae(r,s,o.shape)}}};var kA={kernelName:vi,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=pt(t.shape,n);return a.length>0?O(ue(r,a),t.shape):r},b:()=>{let a=P(r,We(Ua(se(t,o)))),l=pt(o.shape,n);return l.length>0?O(ue(a,l),o.shape):a}}}};var NA={kernelName:ko,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=P(r,j(o,"float32")),l=pt(t.shape,n);return l.length>0?O(ue(a,l),t.shape):a},b:()=>{let a=P(r,j(t,"float32")),l=pt(o.shape,n);return l.length>0?O(ue(a,l),o.shape):a}}}};var $A={kernelName:Tn,gradFunc:r=>({x:()=>We(r)})};var EA={kernelName:Ca,inputsToSave:["indices"],gradFunc:(r,e)=>{let t=e[0];return{indices:()=>it(t.shape,"float32")}}};var RA={kernelName:xs,gradFunc:r=>({x:()=>Se(r)})};var AA={kernelName:ys,saveAllInputs:!0,gradFunc:(r,e,t)=>{let{axis:o}=t;return wr(r,o).map(s=>()=>s)}};var p1={kernelName:bs,inputsToSave:["x"],gradFunc:(r,e,t)=>{let o=e[0],{paddings:n}=t,s=n.map(i=>i[0]);return{x:()=>Ae(r,s,o.shape)}}};var DA={kernelName:Nn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,e)=>{let[t,o,n]=e,s=t,i=o,a=_e(s.shape,i.shape);return{a:()=>{let c=j(i,"float32"),p=P(r,P(c,ro(s,ne(c,ae(1))))),m=pt(s.shape,a);return m.length>0&&(p=ue(p,m)),O(p,s.shape)},b:()=>{let c=qt(s,0),p=kt(c,Cr(s),Se(s)),m=P(r,P(n,p)),f=pt(i.shape,a);return f.length>0&&(m=ue(m,f)),O(m,i.shape)}}}};var FA={kernelName:Cs,inputsToSave:["x","alpha"],gradFunc:(r,e)=>{let[t,o]=e,n=qt(t,0);return{x:()=>kt(n,r,P(r,o)),alpha:()=>{let s=kt(n,Se(r),P(r,t)),i=pt(o.shape,r.shape);return i.length>0&&(s=ue(s,i)),O(s,o.shape)}}}};function hJ(r,e,t){let o=r.shape.slice();o[t]=1;let n=O(e,o),s=Fc(r,t,!0,!1),i=Fc(r,t,!0,!0),a=P(s,i);return P(n,a)}function gJ(r,e,t){let o=r.shape.length,n=o-t.length,s=w.getAxesPermutation(t,o),i=r;s!=null&&(i=Pe(r,s));let a=i.shape.slice(),u=a.splice(o-t.length,t.length).reduce((m,f)=>m*f,1);a.push(u);let c=i.reshape(a),p=hJ(c,e,n);if(p=p.reshape(i.shape),s!=null){let m=w.getUndoAxesPermutation(s);p=Pe(p,m)}return p}var _A={kernelName:$n,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{axis:n}=t,s=[];return n==null?s=o.shape.map((i,a)=>a):typeof n=="number"?s=[n]:s=n,{x:()=>gJ(o,r,s)}}};var OA={kernelName:xn,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=se(r,j(o,"float32")),l=pt(t.shape,n);return l.length>0?O(ue(a,l),t.shape):a},b:()=>{let a=P(r,j(t,"float32")),l=pt(o.shape,n);l.length>0&&(a=O(ue(a,l),o.shape));let u=Me(o);return We(se(a,j(u,"float32")))}}}};var PA={kernelName:En,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,We(Me(t)))}}};var LA={kernelName:An,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e,o=P(Qo(t,6),Ls(t));return{x:()=>P(r,j(o,"float32"))}}};var zA={kernelName:Rn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,j(Ls(t),"float32"))}}};var BA={kernelName:ws,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>O(r,t.shape)}}};var MA={kernelName:Is,inputsToSave:["images"],gradFunc:(r,e,t)=>{let[o]=e,n={dy:r,images:o};return{images:()=>E.runKernel(gu,n,t)}}};var VA={kernelName:Ss,inputsToSave:["images"],gradFunc:(r,e,t)=>{let[o]=e,n={dy:r,images:o};return{images:()=>E.runKernel(hu,n,t)}}};var GA={kernelName:Sa,gradFunc:(r,e,t)=>{let{dims:o}=t,n=ur(o,r.shape);return{x:()=>mr(r,n)}}};var UA={kernelName:ki,gradFunc:r=>({x:()=>Se(r)})};var WA={kernelName:No,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>We(se(r,P(ro(t,1.5),2)))}}};var HA={kernelName:vs,inputsToSave:["condition"],gradFunc:(r,e)=>{let[t]=e;return{condition:()=>j(Se(t),"float32"),t:()=>P(r,j(t,r.dtype)),e:()=>P(r,j(Pu(t),r.dtype))}}};var KA={kernelName:Ni,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>{let o=qt(t,ae(0)),n=ae(i1),s=ae(a1),i=P(r,s),a=P(P(r,n),er(j(t,"float32")));return kt(o,i,a)}}}};var qA={kernelName:$o,outputsToSave:[!0],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,P(t,ne(ae(1),t)))}}};var XA={kernelName:$i,gradFunc:r=>({x:()=>Se(r)})};var jA={kernelName:Fn,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(Fu(j(t,"float32")),r)}}};var YA={kernelName:_n,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(pm(j(t,"float32")),r)}}};var QA={kernelName:Dn,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{begin:n,size:s}=t,i=o.shape,[a,l]=Vv(o,n,s),u=[];for(let c=0;c<r.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>oo(r,u)}}};var ZA={kernelName:$s,outputsToSave:[!0],gradFunc:(r,e,t)=>{let[o]=e,{dim:n}=t,s=!0,i=P(r,o);return{logits:()=>ne(i,P(ue(i,[n],s),o))}}};var JA={kernelName:Ei,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,Hr(t))}}};var m1={kernelName:ks,gradFunc:(r,e,t)=>{let{blockShape:o,paddings:n}=t;return{x:()=>Du(r,o,n)}}};var f1={kernelName:Ns,gradFunc:(r,e,t)=>{let{axis:o}=t;return{x:()=>et(r,o)}}};var eD={kernelName:Eo,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,P(bt(j(t,"float32")),2))}}};var tD={kernelName:Ta,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(r,P(j(t,"float32"),2))}}};var rD={kernelName:Ro,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=ae(2);return{a:()=>P(r,P(n,ne(t,o))),b:()=>P(r,P(n,ne(o,t)))}}};var oD={kernelName:Ai,gradFunc:r=>({x:()=>Se(r)})};var nD={kernelName:Ao,inputsToSave:["a","b"],gradFunc:(r,e)=>{let[t,o]=e,n=_e(t.shape,o.shape);return{a:()=>{let a=r,l=pt(t.shape,n);return l.length>0&&(a=ue(a,l)),O(a,t.shape)},b:()=>{let a=r,l=pt(o.shape,n);return l.length>0&&(a=ue(a,l)),O(We(a),o.shape)}}}};var sD={kernelName:Ts,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,n=o.shape.slice(),{axis:s}=t;ur(s,o.shape).forEach(u=>{n[u]=1});let a=O(r,n),l=P(a,pr(o.shape,"float32"));return{x:()=>l}}};var iD={kernelName:Ri,inputsToSave:["x"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>se(r,Me(Fu(t)))}}};var aD={kernelName:On,outputsToSave:[!0],gradFunc:(r,e)=>{let[t]=e;return{x:()=>P(ne(ae(1),Me(t)),r)}}};var lD={kernelName:Ko,inputsToSave:["x"],gradFunc:(r,e,t)=>{let[o]=e,{reps:n}=t;return{x:()=>{let i=Se(o);if(o.rank===1)for(let a=0;a<n[0];++a)i=q(i,Ae(r,[a*o.shape[0]],[o.shape[0]]));else if(o.rank===2)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)i=q(i,Ae(r,[a*o.shape[0],l*o.shape[1]],[o.shape[0],o.shape[1]]));else if(o.rank===3)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)i=q(i,Ae(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2]],[o.shape[0],o.shape[1],o.shape[2]]));else if(o.rank===4)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)for(let c=0;c<n[3];++c)i=q(i,Ae(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2],c*o.shape[3]],[o.shape[0],o.shape[1],o.shape[2],o.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${o.rank} tensors yet.`);return i}}}};var uD={kernelName:qo,gradFunc:(r,e,t)=>{let o=t,{perm:n}=o,s=Rd(n);return{x:()=>Pe(r,s)}}};var cD={kernelName:Es,gradFunc:(r,e,t)=>{let o=t,{axis:n}=o;return{value:()=>tr(r,n)}}};var pD={kernelName:Ra,inputsToSave:["segmentIds"],gradFunc:(r,e)=>{let[t]=e;return{x:()=>xJ(r,t)}}};function xJ(r,e){let t=zo(e,Se(e)),o=Wa(r,t),n=Yo(e,ae(0,"int32")),s=o.rank-n.rank;for(let a=0;a<s;++a)n=cr(n,a+1);n=Lr(n,pr(o.shape,"bool"));let i=Se(o);return kt(n,o,i)}var mD={kernelName:Rs,gradFunc:r=>({x:()=>Se(r)})};var yJ=[Ey,xR,yR,bR,CR,wR,SR,IR,vR,TR,kR,NR,ER,AR,DR,FR,_R,OR,PR,LR,zR,BR,VR,MR,UR,WR,HR,KR,qR,XR,OA,jR,YR,QR,ZR,JR,tA,eA,rA,sA,iA,aA,lA,uA,cA,pA,mA,fA,dA,gA,c1,c1,xA,bA,wA,SA,IA,vA,TA,kA,NA,$A,EA,RA,AA,p1,p1,DA,FA,_A,PA,LA,zA,BA,MA,VA,GA,UA,WA,HA,KA,qA,XA,jA,YA,QA,ZA,JA,m1,m1,f1,f1,eD,rD,tD,oD,nD,sD,iD,aD,lD,uD,cD,pD,mD];for(let r of yJ)h$(r);L().prototype.abs=function(){return this.throwIfDisposed(),It(this)};L().prototype.acos=function(){return this.throwIfDisposed(),bx(this)};L().prototype.acosh=function(){return this.throwIfDisposed(),Cx(this)};L().prototype.add=function(r){return this.throwIfDisposed(),q(this,r)};L().prototype.all=function(r,e){return this.throwIfDisposed(),im(this,r,e)};L().prototype.any=function(r,e){return this.throwIfDisposed(),Rc(this,r,e)};L().prototype.argMax=function(r){return this.throwIfDisposed(),La(this,r)};L().prototype.argMin=function(r){return this.throwIfDisposed(),wx(this,r)};L().prototype.asScalar=function(){return this.throwIfDisposed(),A(this.size===1,()=>"The array must have only 1 element."),O(this,[])};L().prototype.asType=function(r){return this.throwIfDisposed(),j(this,r)};L().prototype.as1D=function(){return this.throwIfDisposed(),O(this,[this.size])};L().prototype.as2D=function(r,e){return this.throwIfDisposed(),O(this,[r,e])};L().prototype.as3D=function(r,e,t){return this.throwIfDisposed(),O(this,[r,e,t])};L().prototype.as4D=function(r,e,t,o){return this.throwIfDisposed(),O(this,[r,e,t,o])};L().prototype.as5D=function(r,e,t,o,n){return this.throwIfDisposed(),O(this,[r,e,t,o,n])};L().prototype.asin=function(){return this.throwIfDisposed(),Sx(this)};L().prototype.asinh=function(){return this.throwIfDisposed(),Ix(this)};L().prototype.atan=function(){return this.throwIfDisposed(),vx(this)};L().prototype.atan2=function(r){return this.throwIfDisposed(),Tx(this,r)};L().prototype.atanh=function(){return this.throwIfDisposed(),kx(this)};L().prototype.avgPool=function(r,e,t,o){return this.throwIfDisposed(),Au(this,r,e,t,o)};L().prototype.batchToSpaceND=function(r,e){return this.throwIfDisposed(),Du(this,r,e)};L().prototype.batchNorm=function(r,e,t,o,n){return this.throwIfDisposed(),Ba(this,r,e,t,o,n)};L().prototype.broadcastTo=function(r){return this.throwIfDisposed(),Os(this,r)};L().prototype.cast=function(r){return this.throwIfDisposed(),j(this,r)};L().prototype.ceil=function(){return this.throwIfDisposed(),Fx(this)};L().prototype.clipByValue=function(r,e){return this.throwIfDisposed(),br(this,r,e)};L().prototype.concat=function(r,e){return this.throwIfDisposed(),r instanceof Ve&&(r=[r]),et([this,...r],e)};L().prototype.conv1d=function(r,e,t,o,n,s){return this.throwIfDisposed(),lm(this,r,e,t,o,n,s)};L().prototype.conv2dTranspose=function(r,e,t,o,n){return this.throwIfDisposed(),cm(this,r,e,t,o,n)};L().prototype.conv2d=function(r,e,t,o,n,s){return this.throwIfDisposed(),Po(this,r,e,t,o,n,s)};L().prototype.cos=function(){return this.throwIfDisposed(),Fu(this)};L().prototype.cosh=function(){return this.throwIfDisposed(),pm(this)};L().prototype.cumprod=function(r,e,t){return this.throwIfDisposed(),Fc(this,r,e,t)};L().prototype.cumsum=function(r,e,t){return this.throwIfDisposed(),mm(this,r,e,t)};L().prototype.depthToSpace=function(r,e){return this.throwIfDisposed(),Vx(this,r,e)};L().prototype.depthwiseConv2d=function(r,e,t,o,n,s){return this.throwIfDisposed(),Ma(this,r,e,t,o,n,s)};L().prototype.dilation2d=function(r,e,t,o,n){return this.throwIfDisposed(),Gx(this,r,e,t,o,n)};L().prototype.divNoNan=function(r){return this.throwIfDisposed(),Ux(this,r)};L().prototype.div=function(r){return this.throwIfDisposed(),se(this,r)};L().prototype.dot=function(r){return this.throwIfDisposed(),Wx(this,r)};L().prototype.elu=function(){return this.throwIfDisposed(),Va(this)};L().prototype.equal=function(r){return this.throwIfDisposed(),Kr(this,r)};L().prototype.erf=function(){return this.throwIfDisposed(),Hx(this)};L().prototype.euclideanNorm=function(r,e){return this.throwIfDisposed(),Kx(this,r,e)};L().prototype.exp=function(){return this.throwIfDisposed(),er(this)};L().prototype.expandDims=function(r){return this.throwIfDisposed(),cr(this,r)};L().prototype.expm1=function(){return this.throwIfDisposed(),qx(this)};L().prototype.fft=function(){return this.throwIfDisposed(),Gu(this)};L().prototype.flatten=function(){return this.throwIfDisposed(),O(this,[this.size])};L().prototype.floor=function(){return this.throwIfDisposed(),Ua(this)};L().prototype.floorDiv=function(r){return this.throwIfDisposed(),sm(this,r)};L().prototype.gather=function(r,e){return this.throwIfDisposed(),Wa(this,r,e)};L().prototype.greaterEqual=function(r){return this.throwIfDisposed(),Yo(this,r)};L().prototype.greater=function(r){return this.throwIfDisposed(),qt(this,r)};L().prototype.ifft=function(){return this.throwIfDisposed(),xl(this)};L().prototype.irfft=function(){return this.throwIfDisposed(),km(this)};L().prototype.isFinite=function(){return this.throwIfDisposed(),Xx(this)};L().prototype.isInf=function(){return this.throwIfDisposed(),jx(this)};L().prototype.isNaN=function(){return this.throwIfDisposed(),Yx(this)};L().prototype.leakyRelu=function(r){return this.throwIfDisposed(),_u(this,r)};L().prototype.lessEqual=function(r){return this.throwIfDisposed(),Qo(this,r)};L().prototype.less=function(r){return this.throwIfDisposed(),fm(this,r)};L().prototype.localResponseNormalization=function(r,e,t,o){return this.throwIfDisposed(),Qx(this,r,e,t,o)};L().prototype.logSigmoid=function(){return this.throwIfDisposed(),Zx(this)};L().prototype.logSoftmax=function(r){return this.throwIfDisposed(),dm(this,r)};L().prototype.logSumExp=function(r,e){return this.throwIfDisposed(),hm(this,r,e)};L().prototype.log=function(){return this.throwIfDisposed(),Cr(this)};L().prototype.log1p=function(){return this.throwIfDisposed(),Ou(this)};L().prototype.logicalAnd=function(r){return this.throwIfDisposed(),Lr(this,r)};L().prototype.logicalNot=function(){return this.throwIfDisposed(),Pu(this)};L().prototype.logicalOr=function(r){return this.throwIfDisposed(),gm(this,r)};L().prototype.logicalXor=function(r){return this.throwIfDisposed(),Jx(this,r)};L().prototype.matMul=function(r,e,t){return this.throwIfDisposed(),Ge(this,r,e,t)};L().prototype.maxPool=function(r,e,t,o){return this.throwIfDisposed(),Lu(this,r,e,t,o)};L().prototype.max=function(r,e){return this.throwIfDisposed(),Pr(this,r,e)};L().prototype.maximum=function(r){return this.throwIfDisposed(),zo(this,r)};L().prototype.mean=function(r,e){return this.throwIfDisposed(),Ct(this,r,e)};L().prototype.min=function(r,e){return this.throwIfDisposed(),_c(this,r,e)};L().prototype.minimum=function(r){return this.throwIfDisposed(),Ha(this,r)};L().prototype.mirrorPad=function(r,e){return this.throwIfDisposed(),ry(this,r,e)};L().prototype.mod=function(r){return this.throwIfDisposed(),oy(this,r)};L().prototype.mul=function(r){return this.throwIfDisposed(),P(this,r)};L().prototype.neg=function(){return this.throwIfDisposed(),We(this)};L().prototype.norm=function(r,e,t){return this.throwIfDisposed(),gl(this,r,e,t)};L().prototype.notEqual=function(r){return this.throwIfDisposed(),Bi(this,r)};L().prototype.oneHot=function(r,e=1,t=0){return this.throwIfDisposed(),$c(this,r,e,t)};L().prototype.onesLike=function(){return this.throwIfDisposed(),gr(this)};L().prototype.pad=function(r,e){return this.throwIfDisposed(),oo(this,r,e)};L().prototype.pool=function(r,e,t,o,n,s){return this.throwIfDisposed(),ny(this,r,e,t,o,n,s)};L().prototype.pow=function(r){return this.throwIfDisposed(),ro(this,r)};L().prototype.prelu=function(r){return this.throwIfDisposed(),Bu(this,r)};L().prototype.prod=function(r,e){return this.throwIfDisposed(),sy(this,r,e)};L().prototype.reciprocal=function(){return this.throwIfDisposed(),cy(this)};L().prototype.relu=function(){return this.throwIfDisposed(),Er(this)};L().prototype.relu6=function(){return this.throwIfDisposed(),xm(this)};L().prototype.reshapeAs=function(r){return this.throwIfDisposed(),O(this,r.shape)};L().prototype.reshape=function(r){return this.throwIfDisposed(),O(this,r)};L().prototype.resizeBilinear=function(r,e,t){return this.throwIfDisposed(),ky(this,r,e,t)};L().prototype.resizeNearestNeighbor=function(r,e,t){return this.throwIfDisposed(),Ny(this,r,e,t)};L().prototype.reverse=function(r){return this.throwIfDisposed(),mr(this,r)};L().prototype.rfft=function(){return this.throwIfDisposed(),Uu(this)};L().prototype.round=function(){return this.throwIfDisposed(),ym(this)};L().prototype.rsqrt=function(){return this.throwIfDisposed(),bm(this)};L().prototype.selu=function(){return this.throwIfDisposed(),Cm(this)};L().prototype.separableConv2d=function(r,e,t,o,n,s){return this.throwIfDisposed(),wm(this,r,e,t,o,n,s)};L().prototype.sigmoid=function(){return this.throwIfDisposed(),Hr(this)};L().prototype.sign=function(){return this.throwIfDisposed(),py(this)};L().prototype.sin=function(){return this.throwIfDisposed(),Sm(this)};L().prototype.sinh=function(){return this.throwIfDisposed(),Im(this)};L().prototype.slice=function(r,e){return this.throwIfDisposed(),Ae(this,r,e)};L().prototype.softmax=function(r){return this.throwIfDisposed(),Vu(this,r)};L().prototype.softplus=function(){return this.throwIfDisposed(),zi(this)};L().prototype.spaceToBatchND=function(r,e){return this.throwIfDisposed(),zu(this,r,e)};L().prototype.split=function(r,e){return this.throwIfDisposed(),fr(this,r,e)};L().prototype.sqrt=function(){return this.throwIfDisposed(),bt(this)};L().prototype.square=function(){return this.throwIfDisposed(),Me(this)};L().prototype.squaredDifference=function(r){return this.throwIfDisposed(),Nm(this,r)};L().prototype.squeeze=function(r){return this.throwIfDisposed(),Zo(this,r)};L().prototype.stack=function(r,e){this.throwIfDisposed();let t=r instanceof Ve?[this,r]:[this,...r];return tr(t,e)};L().prototype.step=function(r){return this.throwIfDisposed(),Ls(this,r)};L().prototype.stridedSlice=function(r,e,t,o,n,s,i,a){return this.throwIfDisposed(),my(this,r,e,t,o,n,s,i,a)};L().prototype.sub=function(r){return this.throwIfDisposed(),ne(this,r)};L().prototype.sum=function(r,e){return this.throwIfDisposed(),ue(this,r,e)};L().prototype.tan=function(){return this.throwIfDisposed(),fy(this)};L().prototype.tanh=function(){return this.throwIfDisposed(),za(this)};L().prototype.tile=function(r){return this.throwIfDisposed(),$r(this,r)};L().prototype.toBool=function(){return this.throwIfDisposed(),j(this,"bool")};L().prototype.toFloat=function(){return this.throwIfDisposed(),j(this,"float32")};L().prototype.toInt=function(){return this.throwIfDisposed(),j(this,"int32")};L().prototype.topk=function(r,e){return this.throwIfDisposed(),dy(this,r,e)};L().prototype.transpose=function(r){return this.throwIfDisposed(),Pe(this,r)};L().prototype.unique=function(r){return this.throwIfDisposed(),hy(this,r)};L().prototype.unsortedSegmentSum=function(r,e){return this.throwIfDisposed(),Em(this,r,e)};L().prototype.unstack=function(r){return this.throwIfDisposed(),wr(this,r)};L().prototype.where=function(r,e){return this.throwIfDisposed(),kt(r,this,e)};L().prototype.zerosLike=function(){return this.throwIfDisposed(),Se(this)};var Bo=class extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Bo.prototype)}},Mr=class extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Mr.prototype)}},z=class extends Error{constructor(e){super(e),Object.setPrototypeOf(this,z.prototype)}},Ie=class extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ie.prototype)}},Lm=class extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Lm.prototype)}};var Od=class{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){let o=this.cache.keys().next().value;this.cache.delete(o)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){let o=this.cache.keys().next().value;this.cache.delete(o)}this.maxEntries=e}};function Ms(r,e){if(Array.isArray(r)){let t=[];for(let o=0;o<e;o++)t=t.concat(r);return t}else{let t=new Array(e);return t.fill(r),t}}function Mn(r,e){if(!r)throw new Lm(e)}function h1(r,e){let t=0;for(let o of r)o===e&&t++;return t}function Sr(r){return r.length===1?r[0]:r}function mt(r){return Array.isArray(r)?r:[r]}function Vs(r){let t=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return t[0]!=="_"?t:"private"+t}function bl(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}var Bs={};function zm(r){if(r==null)return null;let e={};return e.className=r.getClassName(),e.config=r.getConfig(),e}function d1(r){if(!(r==null||typeof r!="object"))if(Array.isArray(r))r.forEach(e=>d1(e));else{let e=Object.keys(r);for(let t of e){let o=r[t];o!=null&&typeof o=="object"&&(!Array.isArray(o)&&o.type==="ndarray"&&typeof o.value=="number"?r[t]=o.value:d1(o))}}}function Ya(r,e={},t={},o="object",n=!1){if(typeof r=="string"){let s=r,i;if(s in t)i=t[s];else if(s in Bs)i=Bs[s];else if(i=e[s],i==null)throw new z(`Unknown ${o}: ${r}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{let s=r;if(s.className==null||s.config==null)throw new z(`${o}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);let i=s.className,a,l;if(i in t?[a,l]=t[i]:i in Bs?[a,l]=Bs.className:i in e&&([a,l]=e[i]),a==null)throw new z(`Unknown ${o}: ${i}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){let u={};for(let f of Object.keys(Bs))u[f]=Bs[f];for(let f of Object.keys(t))u[f]=t[f];let c=s.config;c.customObjects=u;let p=Object.assign({},Bs);for(let f of Object.keys(t))Bs[f]=t[f];d1(s.config);let m=l(a,s.config,t,n);return Bs=Object.assign({},p),m}else{let u=Object.assign({},Bs);for(let p of Object.keys(t))Bs[p]=t[p];let c=new a(s.config);return Bs=Object.assign({},u),c}}}function bJ(r,e){return r<e?-1:r>e?1:0}function Pd(r,e){return-1*bJ(r,e)}function Gs(r){if(r==null)return r;let e=[];for(let t of r)e.indexOf(t)===-1&&e.push(t);return e}function fD(r){if(r==null)throw new z(`Invalid value in obj: ${JSON.stringify(r)}`);for(let e in r)if(r.hasOwnProperty(e))return!1;return!0}function Qa(r,e,t){if(t!=null&&r.indexOf(t)<0)throw new z(`${t} is not a valid ${e}.  Valid values are ${r} or null/undefined.`)}function Ay(r,e,t=0,o=1/0){return Mn(t>=0),Mn(o>=t),Array.isArray(r)&&r.length>=t&&r.length<=o&&r.every(n=>typeof n===e)}function Xt(r,e){Array.isArray(r)?(y.assert(r.length>0,()=>`${e} is unexpectedly an empty array.`),r.forEach((t,o)=>Xt(t,`element ${o+1} of ${e}`))):y.assert(Number.isInteger(r)&&r>0,()=>`Expected ${e} to be a positive integer, but got ${dD(r)}.`)}function dD(r){return r===null?"null":Array.isArray(r)?"["+r.map(e=>dD(e)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function hD(r,e,t){let o=t!=null?t():y.now(),n;return(...i)=>{let a=t!=null?t():y.now();return a-o<e||(o=a,n=r(...i)),n}}function Dy(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}var CJ=0;function _y(){return CJ++}var Fy={};function Ku(r=""){return r in Fy||(Fy[r]=0),Fy[r]+=1,r+Fy[r].toString()}var gD=["channelsFirst","channelsLast"],xD=["nearest","bilinear"],yD=["valid","same","causal"],bD=["max","avg"],CD=["sum","mul","concat","ave"];var Bm=new Map;function $t(r){Qa(gD,"DataFormat",r)}function SD(r){Qa(xD,"InterpolationFormat",r)}function no(r){Qa(yD,"PaddingMode",r)}function g1(r){Qa(bD,"PoolMode",r)}var Ld=[],wD="/";function Vi(r,e){Ld.push(r);try{let t=e();return Ld.pop(),t}catch(t){throw Ld.pop(),t}}function wJ(){return Ld.length===0?"":Ld.join(wD)+wD}function Oy(r){if(!ID(r))throw new Error("Not a valid tensor name: '"+r+"'");return wJ()+r}function Py(r){if(!ID(r))throw new Error("Not a valid tensor name: '"+r+"'");Bm.has(r)||Bm.set(r,0);let e=Bm.get(r);if(Bm.set(r,Bm.get(r)+1),e>0){let t=`${r}_${e}`;return Bm.set(t,1),t}else return r}var SJ=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function ID(r){return!!r.match(SJ)}function vD(r){return r===parseInt(r.toString(),10)}function Us(r,e,t){e==null&&(e=0),t==null&&(t=r.length);let o=1;for(let n=e;n<t;++n)o*=r[n];return o}function qc(r){if(r.length===0)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let t=0;t<r.length;t++){let o=r[t];o<e&&(e=o)}return e}function Gi(r){if(r.length===0)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let t=0;t<r.length;t++){let o=r[t];o>e&&(e=o)}return e}function qr(r,e){if(e<r)throw new z(`end (${e}) < begin (${r}) is forbidden.`);let t=[];for(let o=r;o<e;++o)t.push(o);return t}var x1;function ir(){return x1==null&&(x1=b2().epsilon()),x1}function so(){return"channelsLast"}function Xc(r,e){return j(r,e)}function wl(r,e=-1){let t=r.shape.slice();return e<0&&(e=t.length+e+1),t.splice(e,0,1),O(r,t)}function TD(r,e){return M(()=>{if(r.shape.length!==2)throw new z(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);let t=wl(r,1);return zy(t,[1,e,1])})}function kD(r){let e=[Us(r.shape)];return O(r,e)}function ND(r){if(r.rank<=1)throw new z(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let e=[r.shape[0],Us(r.shape,1)];return O(r,e)}function Cl(r,e,t){return M(()=>{switch(r.rank){case 1:return vm(r,e,t);case 2:return Fd(r,[e,0],[t,r.shape[1]]);case 3:return Tm(r,[e,0,0],[t,r.shape[1],r.shape[2]]);case 4:return Mc(r,[e,0,0,0],[t,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Ae(r,[e,0,0,0,0],[t,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Ae(r,[e,0,0,0,0,0],[t,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new z(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function y1(r,e,t){return M(()=>{switch(r.rank){case 1:return vm(r,e,t);case 2:return Fd(r,[0,e],[r.shape[0],t]);case 3:return Tm(r,[0,0,e],[r.shape[0],r.shape[1],t]);case 4:return Mc(r,[0,0,0,e],[r.shape[0],r.shape[1],r.shape[2],t]);default:throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function zd(r,e,t,o){return M(()=>{switch(r.rank){case 1:return vm(r,e,t);case 2:switch(o){case 1:return Cl(r,e,t);case 2:return y1(r,e,t);default:throw new z(`The axis is not within the rank of the tensor ${o}`)}case 3:switch(o){case 1:return Cl(r,e,t);case 2:return Tm(r,[0,e,0],[r.shape[0],t,r.shape[2]]);case 3:return y1(r,e,t);default:throw new z(`The axis is not within the rank of the tensor ${o}`)}case 4:switch(o){case 1:return Cl(r,e,t);case 2:return Mc(r,[0,e,0,0],[r.shape[0],t,r.shape[2],r.shape[3]]);case 3:return Mc(r,[0,0,e,0],[r.shape[0],r.shape[1],t,r.shape[3]]);case 4:return y1(r,e,t);default:throw new z(`The axis is not within the rank of the tensor ${o}`)}default:throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Mm(r,e=-1){let t;return e<0&&(t=r[0].rank,t!==0?e=t:e=0),e===r[0].rank&&(e=-1),et(r,e)}function C1(r,e){switch(r.rank){case 1:return _x([r,e]);case 2:return Ox([r,e],0);case 3:return Px([r,e],0);case 4:return Lx([r,e],0);default:throw new z(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function zy(r,e){if(Array.isArray(e)||(e=[e]),r.rank!==e.length)throw new z(`The length of input n (${e.length}) does not match the number of dimensions in input x (${r.rank})`);return $r(r,e)}function Vm(r,e=0,t=1,o,n){return Bc(r,e,t,o,n)}function Ws(r,e,t,o){if(r.rank<2||e.rank<2)throw new Ie(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${e.shape}`);if(e.rank>=3){let n=r.shape.slice(-1)[0],s=e.shape.slice(-2)[0];if(n!==s)throw new Ie(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${e.shape}`)}if(r.rank===2&&e.rank===2)return Wu.matMul({a:r,b:e,transposeA:!1,transposeB:!1,bias:o?b1(r.rank,o,so()):null,activation:t});{let n=r.shape.slice(),s=n.pop();r=O(r,[-1,s]);let i=e.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:e.rank},(d,h)=>h===0?e.rank-2:h<=e.rank-2?h-1:h);e=O(Pe(e,c),[l,-1]);let p=[...n,...u],m=!1,f=!1;return O(Wu.matMul({a:r,b:e,transposeA:m,transposeB:f,bias:o?b1(r.rank,o,so()):null,activation:t}),p)}}function By(r,e,t){return M(()=>(Array.isArray(e)?e=Gt(e,"int32"):e=j(e,"int32"),Wa(r,e,t)))}function jc(r){return P(r,r)}function b1(r,e,t){let o=e.shape;if(e.rank!==1&&e.rank!==r)throw new z(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${r}`);if(r===5){if(t==="channelsFirst")return o.length===1?O(e,[1,o[0],1,1,1]):O(e,[1,o[3],o[0],o[1],o[2]]);if(t==="channelsLast")return o.length===1?O(e,[1,1,1,1,o[0]]):O(e,[1].concat(o))}else if(r===4){if(t==="channelsFirst")return o.length===1?O(e,[1,o[0],1,1]):O(e,[1,o[2],o[0],o[1]]);if(t==="channelsLast")return o.length===1?O(e,[1,1,1,o[0]]):O(e,[1].concat(o))}else if(r===3){if(t==="channelsFirst")return o.length===1?O(e,[1,o[0],1]):O(e,[1,o[1],o[0]]);if(t==="channelsLast")return o.length===1?O(e,[1,1,o[0]]):O(e,[1].concat(o))}else if(r<3)return e;throw new z(`Unsupported input rank by biasAdd: ${e.rank}`)}function io(r,e,t){return M(()=>(t==null&&(t=so()),$t(t),q(r,b1(r.rank,e,t))))}function $D(r,e=1){if(e!==1)throw new Ie(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Va(r)}function ED(r){return M(()=>se(r,q(It(r),1)))}function My(r,e,t,o){return M(()=>r1(r,e,t,o))}function RD(r){return M(()=>{let e=q(.5,P(.2,r));return br(e,0,1)})}function qu(r,e,t=!1){return t?r():e()}var AD=["fanIn","fanOut","fanAvg"],DD=["normal","uniform","truncatedNormal"];function IJ(r){Qa(AD,"FanMode",r)}function vJ(r){Qa(DD,"Distribution",r)}var lo=class extends Y.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}},Bd=class extends lo{apply(e,t){return it(e,t)}};Bd.className="Zeros";Y.registerClass(Bd);var Yc=class extends lo{apply(e,t){return pr(e,t)}};Yc.className="Ones";Y.registerClass(Yc);var Md=class extends lo{constructor(e){if(super(),typeof e!="object")throw new z(`Expected argument of type ConstantConfig but got ${e}`);if(e.value===void 0)throw new z(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return M(()=>P(ae(this.value),pr(e,t)))}getConfig(){return{value:this.value}}};Md.className="Constant";Y.registerClass(Md);var Vd=class extends lo{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Ka(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}};Vd.className="RandomUniform";Y.registerClass(Vd);var Gd=class extends lo{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if(t=t||"float32",t!=="float32"&&t!=="int32")throw new Ie(`randomNormal does not support dType ${t}.`);return Vm(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Gd.className="RandomNormal";Y.registerClass(Gd);var Ud=class extends lo{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if(t=t||"float32",t!=="float32"&&t!=="int32")throw new Ie(`truncatedNormal does not support dType ${t}.`);return $m(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Ud.className="TruncatedNormal";Y.registerClass(Ud);var Wd=class extends lo{constructor(e){super(),this.gain=e.gain!=null?e.gain:1}apply(e,t){return M(()=>{if(e.length!==2||e[0]!==e[1])throw new z("Identity matrix initializer can only be used for 2D square matrices.");return P(this.gain,Oc(e[0]))})}getConfig(){return{gain:this.gain}}};Wd.className="Identity";Y.registerClass(Wd);function TJ(r,e="channelsLast"){let t,o;if($t(e),r.length===2)t=r[0],o=r[1];else if([3,4,5].indexOf(r.length)!==-1){if(e==="channelsFirst"){let n=Us(r,2);t=r[1]*n,o=r[0]*n}else if(e==="channelsLast"){let n=Us(r,0,r.length-2);t=r[r.length-2]*n,o=r[r.length-1]*n}}else{let n=Us(r);t=Math.sqrt(n),o=Math.sqrt(n)}return[t,o]}var Xr=class extends lo{constructor(e){if(super(),e.scale<0)throw new z(`scale must be a positive float. Got: ${e.scale}`);this.scale=e.scale==null?1:e.scale,this.mode=e.mode==null?"fanIn":e.mode,IJ(this.mode),this.distribution=e.distribution==null?"normal":e.distribution,vJ(this.distribution),this.seed=e.seed}apply(e,t){let o=TJ(e),n=o[0],s=o[1],i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,n):this.mode==="fanOut"?i/=Math.max(1,s):i/=Math.max(1,(n+s)/2),this.distribution==="normal"){let a=Math.sqrt(i);if(t=t||"float32",t!=="float32"&&t!=="int32")throw new Ie(`${this.getClassName()} does not support dType ${t}.`);return $m(e,0,a,t,this.seed)}else{let a=Math.sqrt(3*i);return Ka(e,-a,a,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}};Xr.className="VarianceScaling";Y.registerClass(Xr);var Gm=class extends Xr{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return Xr.className}};Gm.className="GlorotUniform";Y.registerClass(Gm);var Um=class extends Xr{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return Xr.className}};Um.className="GlorotNormal";Y.registerClass(Um);var Wm=class extends Xr{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return Xr.className}};Wm.className="HeNormal";Y.registerClass(Wm);var Hm=class extends Xr{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return Xr.className}};Hm.className="HeUniform";Y.registerClass(Hm);var Km=class extends Xr{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:e==null?null:e.seed})}getClassName(){return Xr.className}};Km.className="LeCunNormal";Y.registerClass(Km);var qm=class extends Xr{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:e==null?null:e.seed})}getClassName(){return Xr.className}};qm.className="LeCunNormal";Y.registerClass(qm);var Hd=class extends lo{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=e.gain==null?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,this.seed!=null)throw new Ie("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return M(()=>{if(e.length<2)throw new Ie("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);let o=e[0]>e[1]?[e[1],e[0]]:e,n=Vm(o,0,1,"float32"),s=s1.gramSchmidt(n);return e[0]>e[1]&&(s=Pe(s)),P(this.gain,s)})}getConfig(){return{gain:this.gain,seed:this.seed}}};Hd.className="Orthogonal";Y.registerClass(Hd);var FD={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function _D(r,e={}){return Ya(r,Y.SerializationMap.getMap().classNameMap,e,"initializer")}function wt(r){return zm(r)}function ct(r){if(typeof r=="string"){let e=r in FD?FD[r]:r;if(e==="GlorotNormal")return new Um;if(e==="GlorotUniform")return new Gm;if(e==="HeNormal")return new Wm;if(e==="HeUniform")return new Hm;if(e==="LeCunNormal")return new Km;if(e==="LeCunUniform")return new qm;{let t={};return t.className=e,t.config={},_D(t)}}else return r instanceof lo?r:_D(r)}function Vy(r){return Array.isArray(r)&&Array.isArray(r[0])}function Xm(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function De(r){let e;if(Array.isArray(r)){if(r.length!==1)throw new z(`Expected Tensor length to be 1; got ${r.length}`);e=r[0]}else e=r;return e}function qe(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return r=r,r[0];throw new z(`Expected exactly 1 Shape; got ${r.length}`)}else return r}function jm(r){let e=0;for(let t of r)t.shape.length===0?e+=1:e+=t.shape.reduce((o,n)=>o*n);return e}var PD="Variable",Kd=class{constructor(e,t="float32",o=PD,n=!0,s=null){this.dtype=t??"float32",this.shape=e.shape,this.id=_y(),o=o??PD,this.originalName=Oy(o),this.name=Py(this.originalName),this.trainable_=n,this.constraint=s,this.val=gy(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),NJ(this.val,e),this.val.id!==e.id&&(this.val.assign(e),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}};function NJ(r,e){if(r.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(r.shape)+" vs. "+JSON.stringify(e.shape))}function qd(r){return r.map(e=>e.read())}function Ym(r){r.forEach(e=>{e[0].write(e[1])})}var ft=class{constructor(e){this.dtype=e.dtype,this.shape=e.shape,e.shape!=null?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}},jr=class{constructor(e,t,o,n,s,i,a){this.dtype=e,this.shape=t,this.sourceLayer=o,this.inputs=n,this.callArgs=s,this.outputTensorIndex=a,this.id=_y(),i!=null&&(this.originalName=Oy(i),this.name=Py(this.originalName)),this.rank=t.length}},$J=0,Sl=class{constructor(e,t){this.callArgs=t,this.id=$J++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(let o of e.inboundLayers)o?.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){let e=[];for(let t of this.inboundLayers)t!=null?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},EJ=0,Le=class extends Y.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=EJ++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){let o=this.getClassName();t=Vs(o)+"_"+Ku(o)}if(this.name=t,this.trainable_=e.trainable==null?!0:e.trainable,e.inputShape!=null||e.batchInputShape!=null){let o;if(e.batchInputShape!=null)o=e.batchInputShape;else if(e.inputShape!=null){let s=null;e.batchSize!=null&&(s=e.batchSize),o=[s].concat(e.inputShape)}this.batchInputShape=o;let n=e.dtype;n==null&&(n=e.inputDType),n==null&&(n="float32"),this.dtype=n}e.weights!=null?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(this.inboundNodes.length===0)throw new Mr(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new z(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Sr(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Sr(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Bo(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new Bo(`Layer ${this.name} is not connected, no input to return.`);return Sr(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new Bo(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Bo(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Sr(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=mt(e),this.inputSpec==null||this.inputSpec.length===0)return;let t=mt(this.inputSpec);if(e.length!==t.length)throw new z(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let o=0;o<e.length;o++){let n=e[o],s=t[o];if(s==null)continue;let i=n.rank;if(s.ndim!=null&&i!==s.ndim)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(s.maxNDim!=null&&i>s.maxNDim)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(s.minNDim!=null&&i<s.minNDim)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(s.dtype!=null&&n.dtype!==s.dtype)throw new z(`Input ${o} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${n.dtype}.`);if(s.axes){let a=n.shape;for(let l in s.axes){let u=Number(l),c=s.axes[l],p=u>=0?a[u]:a[a.length+u];if(c!=null&&[c,null].indexOf(p)===-1)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(s.shape!=null)for(let a=0;a<s.shape.length;++a){let l=s.shape[a],u=n.shape[a];if(l!=null&&u!=null&&l!==u)throw new z(`Input ${o} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${n.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){this._callHook!=null&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();let o=mt(e),n=!0;for(let i of o)if(!(i instanceof jr)){n=!1;break}let s=!0;for(let i of o)if(i instanceof jr){s=!1;break}if(n===s)throw new z("Arguments to apply() must be all SymbolicTensors or all Tensors");return Vi(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);let i=[];for(let a of mt(e))i.push(a.shape);this.build(Sr(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let i=this.call(e,t),a=mt(i),l=[];for(let u of a)o.indexOf(u)!==-1&&(u=u.clone()),l.push(u);if(i=Sr(l),this.activityRegularizer!=null)throw new Ie("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{let i=RJ(e),a=this.computeOutputShape(i),l,u=AJ(e);if(this.warnOnIncompatibleInputShape(Array.isArray(e)?i[0]:i),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((c,p)=>new jr(u,c,this,mt(e),t,this.name,p)):l=new jr(u,a,this,mt(e),t,this.name),this.addInboundNode(e,l,null,null,i,a,t),this._refCount++,this.activityRegularizer!=null)throw new Ie("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(e){if(this.batchInputShape!=null)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((o,n)=>{o!=null&&e[n]!=null&&e[n]!==o&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new Bo(`The layer ${this.name} has never been called and thus has no defined output shape.`);let e=[];for(let t of this.inboundNodes){let o=JSON.stringify(t.outputShapes);e.indexOf(o)===-1&&e.push(o)}if(e.length===1){let t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&t.length===1?t[0]:t}else throw new Bo(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Mr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return jm(this.weights)}build(e){this.built=!0}getWeights(e=!1){return qd(e?this.trainableWeights:this.weights)}setWeights(e){M(()=>{let t=this.weights;if(t.length!==e.length)throw new z(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(t.length===0)return;let o=[],n=qd(t);for(let s=0;s<n.length;++s){let i=n[s],a=t[s],l=e[s];if(!y.arraysEqual(i.shape,l.shape))throw new z(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);o.push([a,l])}Ym(o)})}addWeight(e,t,o,n,s,i,a,l){if(this._addedWeightNames.indexOf(e)!==-1)throw new z(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),o==null&&(o="float32"),this.fastWeightInitDuringBuild&&(n=l!=null?l():ct("zeros"));let u=n.apply(t,o),c=new Kd(u,o,e,i,a);return u.dispose(),s!=null&&this.addLoss(()=>s.apply(c.read())),i==null&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){e==null||Array.isArray(e)&&e.length===0||(e=mt(e),this._losses!==void 0&&this._losses!==null&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(t!=null)if(Array.isArray(t))t.forEach(o=>{if(o!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return t}addInboundNode(e,t,o,n,s,i,a=null){let l=mt(e);t=mt(t),o=mt(o),n=mt(n),s=Xm(s),i=Xm(i);let u=[],c=[],p=[];for(let m of l)u.push(m.sourceLayer),c.push(m.nodeIndex),p.push(m.tensorIndex);new Sl({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:p,inputTensors:l,outputTensors:t,inputMasks:o,outputMasks:n,inputShapes:s,outputShapes:i},a);for(let m=0;m<t.length;m++)t[m].sourceLayer=this,t[m].nodeIndex=this.inboundNodes.length-1,t[m].tensorIndex=m}getConfig(){let e={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(e.batchInputShape=this.batchInputShape),this.dtype!=null&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return--this._refCount===0&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}};function RJ(r){r=mt(r);let e=[];for(let t of r)e.push(t.shape);return Sr(e)}function AJ(r){return"float32"}function w1(r,e,t){if((e==null||t!=null&&t>0)&&(e=r.sourceLayer,t=r.nodeIndex),e.inboundNodes.length===0)return[r];{let o=e.inboundNodes[t];if(o.inboundLayers.length===0)return o.inputTensors;{let n=[];for(let s=0;s<o.inboundLayers.length;s++){let i=o.inputTensors[s],a=o.inboundLayers[s],l=o.nodeIndices[s],u=w1(i,a,l);for(let c of u)n.indexOf(c)===-1&&n.push(c)}return n}}}var Za=class extends Le{constructor(e){if(super({dtype:e.dtype,name:e.name!=null?e.name:Ku("input").toString()}),e.batchSize==null&&(e.batchSize=null),e.sparse==null&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,e.inputShape!=null&&e.batchInputShape!=null)throw new z("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(t==null){if(e.inputShape==null)throw new z("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(e.batchSize!=null)throw new z("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let o=e.dtype||"float32";this.batchInputShape=t,this.dtype=o,this.inputSpec=[{shape:t}];let n=new jr(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new Sl({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new z(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}};Za.className="InputLayer";Y.registerClass(Za);function S1(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new z("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=r.batchShape;r.shape!=null&&e==null&&(e=[null].concat(r.shape));let t=r.dtype;return t==null&&(t="float32"),new Za({batchInputShape:e,name:r.name,dtype:t,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}function DJ(r,e){if(r.dtype==null||r.dtype===e.dtype)return e;try{return j(e,r.dtype)}catch{throw new z(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`)}}var Hs=class{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Hs)for(let t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(e==null)return;for(let t of e)this.add(t.key,t.value)}}add(e,t,o){if(this.id2Value[e.id]==null)this.id2Value[e.id]=DJ(e,t),this.name2Id[e.name]=e.id,o!=null&&(this.id2Mask[e.id]=o);else throw new z(`Duplicate key: name=${e.name}, id=${e.id}`);return this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return this.id2Value[e.id]!=null}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof jr){if(this.id2Value[e.id]==null)throw new z(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}else{let t=this.name2Id[e];if(t==null)throw new z(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof jr){if(this.id2Value[e.id]==null)throw new z(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}else{let t=this.name2Id[e];if(t==null)throw new z(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){this.id2Mask!=null&&ke(this.id2Mask)}},Gy=new Od,Uy=new Od;function zD(r){Gy?.setMaxEntries(r),Uy?.setMaxEntries(r)}function Qc(r,e,t,o){let n=t==null?!1:t.training,s=Array.isArray(r),i=s?r:[r],a=i.map(d=>d.name),l=[],u=e.names();for(let d of a)u.indexOf(d)!==-1?l.push(e.getValue(d)):l.push(null);o!=null&&(o.maxNumTensors=-1/0,o.minNumTensors=1/0);let c=a.join(",")+"|"+e.names().sort().join(","),p=Gy.get(c),m;if(p==null){let d=FJ(i,e);p=d.sorted,m=d.recipientCounts,Gy.put(c,p),Uy.put(c,m)}m={},n||Object.assign(m,Uy.get(c));let f=new Hs(e);for(let d=0;d<p.length;++d){if(o!=null){let F=$d().numTensors;F>o.maxNumTensors&&(o.maxNumTensors=F),F<o.minNumTensors&&(o.minNumTensors=F)}let h=p[d],g=h.sourceLayer;if(g instanceof Za)continue;let x=[],b=[],C=[],S=!1;for(let F of h.inputs){let _=f.getValue(F),B=f.getMask(F);x.push(_),b.push(B),B!=null&&(S=!0),n||(m[F.name]--,m[F.name]===0&&!e.hasKey(F)&&a.indexOf(F.name)===-1&&!_.isDisposed&&F.sourceLayer.stateful!==!0&&C.push(_))}S&&(t=t||{},t.mask=b[0]);let I=mt(g.apply(x,t)),N=null;g.supportsMasking&&(N=g.computeMask(x,b));let $=OJ(h),R=Array.isArray($)?$:[$];for(let F=0;F<R.length;++F){f.hasKey(R[F])||f.add(R[F],I[F],Array.isArray(N)?N[0]:N);let _=a.indexOf(R[F].name);_!==-1&&(l[_]=I[F])}n||ke(C)}return f.disposeMasks(),s?l:l[0]}function FJ(r,e){y.assert(r!=null&&r.length>0,()=>"Expected at least one fetch, got none");let t=[],o={};if(r.length===1){let n=LD(r[0],e);t=n.sorted,o=n.recipientMap}else{let n=new Set;for(let s of r){let{sorted:i,recipientMap:a}=LD(s,e);for(let l of i)n.has(l.name)||(t.push(l),n.add(l.name));for(let l in a)o[l]==null&&(o[l]=new Set),a[l].forEach(u=>o[l].add(u))}}return{sorted:t,recipientCounts:_J(o)}}function _J(r){let e={};for(let t in r)e[t]=r[t].size;return e}function LD(r,e){let t=new Set,o=[],n={};for(let a of e.names())t.add(a);let s=[],i=[];for(s.push(r);s.length>0;){let a=s[s.length-1];if(t.has(a.name)){s.pop();continue}let l=i[i.length-1]===s.length-1;if(a.inputs.length===0||l)s.pop(),o.push(a),t.add(a.name),l&&i.pop();else{i.push(s.length-1);for(let u of a.inputs)n[u.name]==null&&(n[u.name]=new Set),n[u.name].add(a.name),!t.has(u.name)&&s.push(u)}}return{sorted:o,recipientMap:n}}function OJ(r){let e;if(r.sourceLayer.inboundNodes.length===1)e=r.sourceLayer.output;else{let t=null;for(let o=0;o<r.sourceLayer.inboundNodes.length;++o)for(let n of r.sourceLayer.inboundNodes[o].outputTensors)if(n.id===r.id){t=o;break}e=r.sourceLayer.getOutputAt(t)}return e}var PJ=D();PJ.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,zD);function I1(r,e){return M(()=>bt(ue(P(r,r),e,!0)))}var Zc=class extends Y.Serializable{getConfig(){return{}}},Xd=class extends Zc{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return M(()=>{let t=I1(e,this.axis),o=br(t,0,this.maxValue);return P(e,se(o,q(ir(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}};Xd.className="MaxNorm";Y.registerClass(Xd);var jd=class extends Zc{constructor(e){super(),this.defaultAxis=0,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return M(()=>se(e,q(ir(),I1(e,this.axis))))}getConfig(){return{axis:this.axis}}};jd.className="UnitNorm";Y.registerClass(jd);var Yd=class extends Zc{apply(e){return Er(e)}};Yd.className="NonNeg";Y.registerClass(Yd);var Qd=class extends Zc{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=e.minValue!=null?e.minValue:this.defaultMinValue,this.maxValue=e.maxValue!=null?e.maxValue:this.defaultMaxValue,this.rate=e.rate!=null?e.rate:this.defaultRate,this.axis=e.axis!=null?e.axis:this.defaultAxis}apply(e){return M(()=>{let t=I1(e,this.axis),o=q(P(this.rate,br(t,this.minValue,this.maxValue)),P(1-this.rate,t));return P(e,se(o,q(ir(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}};Qd.className="MinMaxNorm";Y.registerClass(Qd);var BD={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function _t(r){return zm(r)}function MD(r,e={}){return Ya(r,Y.SerializationMap.getMap().classNameMap,e,"constraint")}function Ot(r){if(r==null)return null;if(typeof r=="string"){let t={className:r in BD?BD[r]:r,config:{}};return MD(t)}else return r instanceof Zc?r:MD(r)}async function Il(r){if(r==null)return;let e=[],t=[],o=[];for(let n in r){let s=r[n];if(typeof s!="number"){let i=s;e.push(i.data()),t.push(n),o.push(i)}}if(e.length>0){let n=await Promise.all(e);for(let s=0;s<n.length;++s)r[t[s]]=n[s][0];ke(o)}}function Wy(r){if(r!=null)for(let e in r){let t=r[e];typeof t!="number"&&t.dispose()}}var VD;(function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"})(VD||(VD={}));var BJ=125,Xu=class{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}},Hy=class{constructor(e,t=10){e==null&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(let t of this.callbacks)t.setParams(e)}setModel(e){for(let t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){t==null&&(t={});for(let o of this.callbacks)await o.onEpochBegin(e,t)}async onEpochEnd(e,t){t==null&&(t={});for(let o of this.callbacks)await o.onEpochEnd(e,t)}async onBatchBegin(e,t){t==null&&(t={});for(let o of this.callbacks)await o.onBatchBegin(e,t)}async onBatchEnd(e,t){t==null&&(t={});for(let o of this.callbacks)await o.onBatchEnd(e,t)}async onTrainBegin(e){e==null&&(e={});for(let t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){e==null&&(e={});for(let t of this.callbacks)await t.onTrainEnd(e)}},v1=class extends Xu{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){t==null&&(t={});let o=t.size==null?0:t.size;this.seen+=o;for(let n in t){let s=t[n];if(typeof s=="number")this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+s*o;else{let i;n in this.totals?i=this.totals[n]:this.totals[n]=0;let a=M(()=>q(this.totals[n],P(s,o)));this.totals[n]=a,i?.dispose()}}}async onEpochEnd(e,t){if(t!=null)for(let o of this.params.metrics)this.totals[o]!=null&&(typeof this.totals[o]=="number"?t[o]=this.totals[o]/this.seen:M(()=>{let n=P(se(1,this.seen),this.totals[o]);t[o]=n,this.totals[o].dispose(),Nt(t[o])}))}},Ky=class extends Xu{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){t==null&&(t={}),this.epoch.push(e);for(let o in t)this.history[o]==null&&(this.history[o]=[]),this.history[o].push(t[o])}async syncData(){let e=[],t=[],o=[];for(let s in this.history){let i=this.history[s];for(let a=0;a<i.length;++a)if(typeof i[a]!="number"){let l=i[a];e.push(l.data()),t.push(s),o.push(a)}}let n=await Promise.all(e);for(let s=0;s<n.length;++s)this.history[t[s]][o[s]].dispose(),this.history[t[s]][o[s]]=n[s][0]}},qy=class extends Xu{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Kc,this.yieldEvery=t||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=BJ),this.yieldEvery==="never"&&e.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");y.isNumber(this.yieldEvery)&&(this.maybeWait=hD(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,o){let n=[];this.yield!=null&&(await Il(o),n.push(this.yield(e,t,o))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(e,t){this.currentEpoch=e,this.epochBegin!=null&&(await Il(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){let o=[];this.epochEnd!=null&&(await Il(t),o.push(this.epochEnd(e,t))),this.yieldEvery==="epoch"&&o.push(this.nextFrameFunc()),await Promise.all(o)}async onBatchBegin(e,t){this.batchBegin!=null&&(await Il(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){let o=[];this.batchEnd!=null&&(await Il(t),o.push(this.batchEnd(e,t))),this.yieldEvery==="batch"?o.push(this.nextFrameFunc()):y.isNumber(this.yieldEvery)&&o.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(o)}async onTrainBegin(e){this.trainBegin!=null&&(await Il(e),await this.trainBegin(e))}async onTrainEnd(e){this.trainEnd!=null&&(await Il(e),await this.trainEnd(e))}};function Xy(r,e){return r==null&&(r={}),r instanceof Xu?[r]:Array.isArray(r)&&r[0]instanceof Xu?r:mt(r).map(o=>new qy(o,e))}var Mo=class{constructor(){}static registerCallbackConstructor(e,t){y.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),Mo.checkForDuplicate(t),Mo.constructors[e]==null&&(Mo.constructors[e]=[]),Mo.constructors[e].push(t)}static checkForDuplicate(e){for(let t in Mo.constructors)Mo.constructors[+t].forEach(n=>{if(n===e)throw new z("Duplicate callback constructor.")})}static clear(){Mo.constructors={}}static createCallbacks(e){let t=[];for(let o in Mo.constructors){let n=+o;e>=n&&t.push(...Mo.constructors[n])}return t.map(o=>new o)}};Mo.constructors={};function jy(r,e,t,o,n,s,i,a,l){let u=new Ky,c=[new v1,...Mo.createCallbacks(e)];r!=null&&c.push(...r),c.push(u);let p=new Hy(c);return p.setParams({epochs:t,initialEpoch:o,samples:n,steps:s,batchSize:i,verbose:e,doValidation:a,metrics:l}),{callbackList:p,history:u}}function Jo(r,e={},t=!1){return Ya(r,Y.SerializationMap.getMap().classNameMap,e,"layer",t)}function Zd(r,e){return M(()=>{r.dtype!=="float32"&&(r=j(r,"float32"));let t=ue(jc(r),e,!0),o=Ga(t.shape,ir()),n=bt(zo(t,o));return se(r,n)})}function Jc(r,e){return M(()=>Ct(jc(ne(e,r)),-1))}function eh(r,e){return M(()=>Ct(It(ne(e,r)),-1))}function th(r,e){return M(()=>{let t=ne(r,e),o=br(It(r),ir(),Number.MAX_VALUE),n=It(se(t,o));return P(100,Ct(n,-1))})}function MJ(r,e){return M(()=>{let t=br(e,ir(),Number.MAX_VALUE),o=Cr(q(1,t)),n=br(r,ir(),Number.MAX_VALUE),s=Cr(q(1,n));return Ct(jc(ne(o,s)),-1)})}function VJ(r,e){return M(()=>{let t=zo(0,ne(1,P(r,e)));return Ct(jc(t),-1)})}function GJ(r,e){return M(()=>{let t=zo(0,ne(1,P(r,e)));return Ct(t,-1)})}function UJ(r,e){return M(()=>{let t=ue(P(r,e),-1),o=Pr(P(ne(1,r),e),-1);return zo(0,q(1,ne(o,t)))})}function WJ(r,e){return M(()=>{let t=Math.log(2),o=ne(e,r),n=ne(q(o,zi(P(-2,o))),t);return Ct(n,-1)})}function ep(r,e,t=!1){return M(()=>{if(t)e=Vu(e);else{let o=ue(e,e.shape.length-1,!0);e=se(e,o)}return e=br(e,ir(),1-ir()),We(ue(P(j(r,"float32"),Cr(e)),e.shape.length-1))})}function Qm(r,e,t=!1){return M(()=>{let o=j(Ua(kD(r)),"int32");e=br(e,ir(),1-ir());let n=e.shape,s=O($c(o,n[n.length-1]),n);return ep(s,e,t)})}function HJ(r,e){if(!y.arraysEqual(r.shape,e.shape))throw new z(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(e.shape)}`);return M(()=>{let t=Er(e),o=We(It(e));return q(ne(t,P(e,r)),Ou(er(o)))})}function Zm(r,e){return M(()=>{let t;return t=br(e,ir(),1-ir()),t=Cr(se(t,ne(1,t))),Ct(HJ(r,t),-1)})}function KJ(r,e){return M(()=>{let t=br(r,ir(),1),o=br(e,ir(),1);return ue(P(r,Cr(se(t,o))),-1)})}function qJ(r,e){return M(()=>{let t=Cr(q(ir(),e));return Ct(ne(e,P(r,t)),-1)})}function Yy(r,e){return M(()=>{let t=Zd(r,-1),o=Zd(e,-1),n=P(t,o);return We(ue(n,-1))})}var Jd={meanSquaredError:Jc,meanAbsoluteError:eh,meanAbsolutePercentageError:th,meanSquaredLogarithmicError:MJ,squaredHinge:VJ,hinge:GJ,categoricalHinge:UJ,logcosh:WJ,categoricalCrossentropy:ep,sparseCategoricalCrossentropy:Qm,binaryCrossentropy:Zm,kullbackLeiblerDivergence:KJ,poisson:qJ,cosineProximity:Yy};function Qy(r){if(typeof r=="string"){if(r in Jd)return Jd[r];let e=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new z(e)}else return r}function Jy(r,e){return M(()=>{let t=P(.5,gr(e)),o=Xc(qt(e,t),r.dtype);return Ct(Kr(r,o),-1)})}function eb(r,e){return M(()=>Xc(Kr(La(r,-1),La(e,-1)),"float32"))}function XJ(r,e){return M(()=>j(ue(Lr(Kr(r,1),Kr(e,1))),"float32"))}function jJ(r,e){return M(()=>j(ue(Lr(Kr(r,0),Kr(e,1))),"float32"))}function UD(r,e){return M(()=>{let t=XJ(r,e),o=jJ(r,e),n=q(t,o);return j(kt(qt(n,0),se(t,n),0),"float32")})}function T1(r,e){return Zm(r,e)}function k1(r,e){return r.rank===e.rank&&(r=Zo(r,[r.rank-1])),e=La(e,-1),e.dtype!==r.dtype&&(e=j(e,r.dtype)),j(Kr(r,e),"float32")}var YJ=Jc,QJ=Jc,ZJ=eh,JJ=eh,e9=th,t9=th,tb=ep,r9=Yy,N1=Qm,Zy={binaryAccuracy:Jy,categoricalAccuracy:eb,precision:UD,categoricalCrossentropy:tb,sparseCategoricalCrossentropy:N1,mse:YJ,MSE:QJ,mae:ZJ,MAE:JJ,mape:e9,MAPE:t9,cosine:r9};function WD(r){if(typeof r=="string"&&r in Zy)return Zy[r];if(typeof r!="string"&&r!=null)return r;throw new z(`Unknown metric ${r}`)}function rh(r){if(Mn(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let e;for(let t of Object.keys(Jd))if(Jd[t]===r){e=t;break}if(e!==void 0)return e;for(let t of Object.keys(Zy))if(Zy[t]===r){e=t;break}return e!==void 0?e:r.name}}function KD(r){let e={Adagrad:()=>Hc.adagrad(.01),Adadelta:()=>Hc.adadelta(1,.95,ir()),Adam:()=>Hc.adam(.001,.9,.999,ir()),Adamax:()=>Hc.adamax(.002,.9,.999,ir(),0),RMSProp:()=>Hc.rmsprop(.001,.9,0,ir()),SGD:()=>Hc.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,r in e)return e[r]();throw new z(`Unknown Optimizer ${r}`)}function E1(r,e,t=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!$1(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(t){let o=JSON.stringify(r);o.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${o.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${1048576}.`)}}function $1(r){if(r===null)return!0;if(typeof r=="object")if(Object.getPrototypeOf(r)===Object.prototype){let e=Object.keys(r);for(let t of e)if(typeof t!="string"||!$1(r[t]))return!1;return!0}else if(Array.isArray(r)){for(let e of r)if(!$1(e))return!1;return!0}else return!1;else{let e=typeof r;return e==="string"||e==="number"||e==="boolean"}}function qD(r,e,t,o=console.log){let n=s9(r),s=["Layer (type)","Input Shape","Output shape","Param #"];n?(e=e||90,t=t||[.32,.61,.89,1]):(e=e||115,t=t||[.24,.48,.7,.8,1]),t[t.length-1]<=1&&(t=t.map(c=>Math.floor(e*c)));let i;if(!n){s.push("Receives inputs"),i=[];for(let c in r.nodesByDepth)i.push(...r.nodesByDepth[c])}o("_".repeat(e)),rb(s,t,o),o("=".repeat(e));let a=r.layers;for(let c=0;c<a.length;++c)n?i9(a[c],t,o):a9(a[c],t,i,o),o((c===a.length-1?"=":"_").repeat(e));r.checkTrainableWeightsConsistency();let l=n9(r),u=jm(r.nonTrainableWeights);o(`Total params: ${l+u}`),o(`Trainable params: ${l}`),o(`Non-trainable params: ${u}`),o("_".repeat(e))}function n9(r){let e;return r.collectedTrainableWeights!=null?e=jm(r.collectedTrainableWeights):e=jm(r.trainableWeights),e}function s9(r){let e=!0,t=[],o=[];for(let n in r.nodesByDepth)t.push(r.nodesByDepth[n]);for(let n of t){if(n.length>1||n.length===1&&n[0].inboundLayers.length>1){e=!1;break}o.push(...n)}if(e)for(let n of r.layers){let s=!1;for(let i of n.inboundNodes)if(o.indexOf(i)!==-1)if(s){e=!1;break}else s=!0;if(!e)break}return e}function rb(r,e,t=console.log){let o="";for(let n=0;n<r.length;++n)n>0&&(o=o.slice(0,o.length-1)+" "),o+=r[n],o=o.slice(0,e[n]),o+=" ".repeat(e[n]-o.length);t(o)}function i9(r,e,t){let o,n;try{n=r.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{n="multiple"}try{o=JSON.stringify(r.outputShape)}catch{o="multiple"}let s=r.name,i=r.getClassName(),a=[`${s} (${i})`,n,o,r.countParams().toString()];rb(a,e,t)}function a9(r,e,t,o){let n,s;try{s=r.inboundNodes.map(p=>JSON.stringify(p.inputShapes)).join(",")}catch{s="multiple"}try{n=JSON.stringify(r.outputShape)}catch{n="multiple"}let i=[];for(let p of r.inboundNodes)if(!(t!=null&&t.length>0&&t.indexOf(p)===-1))for(let m=0;m<p.inboundLayers.length;++m){let f=p.inboundLayers[m].name,d=p.nodeIndices[m],h=p.tensorIndices[m];i.push(`${f}[${d}][${h}]`)}let a=r.name,l=r.getClassName(),u=i.length===0?"":i[0],c=[`${a} (${l})`,s,n,r.countParams().toString(),u];rb(c,e,o);for(let p=1;p<i.length;++p)rb(["","","","",i[p]],e,o)}function XD(r,e,t){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&e===0&&typeof t=="string"}function oh(r,e){if(r===null)return null;if(typeof r=="string")return bl(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let t=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];XD(e,n,s)?t.push(s):t.push(oh(s,e))}return t}else{let t={};for(let o of Object.keys(r)){let n=r[o];if(o==="name"&&typeof n=="string")t[o]=n;else{let s=bl(o);t[s]=oh(n,s)}}return t}}function ob(r,e){if(r==null)return null;if(typeof r=="string")return Vs(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let t=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];XD(e,n,s)?t.push(s):t.push(ob(s,e))}return t}else{let t={};for(let o of Object.keys(r)){let n=r[o],s=Vs(o);(o==="name"||o==="className")&&typeof n=="string"?t[s]=n:t[s]=ob(n,o)}return t}}var Jm="3.20.0";var en=class extends Le{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,this.name==null){let b=this.getClassName().toLowerCase();this.name=Ku(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Gs(this.inputs).length!==this.inputs.length)throw new z(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);Gs(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(let b of this.outputs){let C=b.sourceLayer,S=b.nodeIndex,I=b.tensorIndex;this.outputLayers.push(C),this.outputLayersNodeIndices.push(S),this.outputLayersTensorIndices.push(I)}for(let b of this.inputs){let C=b.sourceLayer,S=b.nodeIndex,I=b.tensorIndex;Mn(S===0,"input layer has >1 nodes"),Mn(I===0,"input layer has >1 tensors"),this.inputLayers.push(C),this.inputLayersNodeIndices.push(S),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){let C=this.inputLayers[b];if(!(C instanceof Za))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${C.getClassName()}.`);this.inputNames.push(C.name),this.feedInputShapes.push(C.batchInputShape),this.feedInputNames.push(C.name)}for(let b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);let t={},o={},n={},s={},i={},a=[],l=(b,C,S,I,N,$)=>{(I==null||N==null||$==null)&&(I=b.sourceLayer,N=b.nodeIndex,$=b.tensorIndex);let R=I.inboundNodes[N];if(S.indexOf(R)!==-1)throw new Mr(`The tensor ${b.name} at layer "${I.name}" is part of a cycle.`);if(C.indexOf(R)!==-1)return;this.containerNodes.add(en.nodeKey(I,N)),I.id in i||(i[I.id]=Object.keys(i).length),S.indexOf(R)===-1&&S.push(R);let F=R.inboundLayers.length;for(let _=0;_<F;_++){let B=R.inputTensors[_],V=R.inboundLayers[_],G=R.nodeIndices[_],W=R.tensorIndices[_];l(B,C,S,V,G,W)}for(C.push(R);S.indexOf(R)>=0;)S.splice(S.indexOf(R),1);a.push(R)},u=[],c=[];for(let b of this.outputs)l(b,u,c);let p=a.slice().reverse();for(let b of p){o[b.id]=b,b.id in t||(t[b.id]=0);let C=t[b.id],S=n[b.outboundLayer.id]==null?0:n[b.outboundLayer.id];C=Math.max(C,S),n[b.outboundLayer.id]=C,s[b.outboundLayer.id]=b.outboundLayer,t[b.id]=C;for(let I=0;I<b.inboundLayers.length;I++){let N=b.inboundLayers[I],$=b.nodeIndices[I],R=N.inboundNodes[$],F=t[R.id]==null?0:t[R.id];t[R.id]=Math.max(C+1,F),o[R.id]=R}}let m={};for(let b in t){let C=t[b];C in m||(m[C]=[]),m[C].push(o[b])}let f={};for(let b in n){let C=n[b];C in f||(f[C]=[]),f[C].push(s[b])}let d=Object.keys(f).map(b=>parseInt(b,10)).sort(Pd);this.layers=[];for(let b of d){let C=f[b];C.sort((S,I)=>{let N=i[S.id],$=i[I.id];return N<$?-1:N>$?1:0});for(let S of C)S instanceof en&&this.internalContainerRefs.push(S),this.layers.push(S)}this.layersByDepth=f,d=Object.keys(m).map(b=>parseInt(b,10)).sort(Pd);let h=this.inputs.slice(),g=[];for(let b of d)for(let C of m[b]){let S=C.outboundLayer;if(S!=null){for(let I of C.inputTensors)if(h.indexOf(I)===-1)throw new Mr(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${S.name}". The following previous layers were accessed without issue: ${g}`);for(let I of C.outputTensors)h.push(I);g.push(S.name)}}this.nodesByDepth=m;let x=this.layers.map(b=>b.name);for(let b of x){let C=x.filter(S=>S===b).length;if(C!==1)throw new Mr(`The name "${b}" is used ${C} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(x))}this.outboundNodes=[],this.inboundNodes=[],new Sl({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let e={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(let t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(let t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(o=>o.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new z("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(let t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let o of this.layers)t.push(...o.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){let o={},n=0;for(let i of this.layers)for(let a of i.weights){if(o[a.originalName]!=null)throw new z(`Duplicate weight name: ${a.originalName}`);o[a.originalName]=a,n++}let s=[];for(let i in e){let a=i;if(o[i]==null){let l=i.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(o[a]!=null)s.push([o[a],e[i]]);else if(t)throw new z(`Provided weight data has no target variable: ${i}`);delete o[a]}if(t){let i=[];for(let a in o)i.push(a);if(i.length>0)throw new z(`${i.length} of ${n} weights are not set: ${i}`)}Ym(s)}updatedConfig(){let e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Jm}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){let o=ob(this.updatedConfig());return t?JSON.stringify(o):o}call(e,t){return M(()=>{e=mt(e);let o=new Hs;for(let n=0;n<this.inputs.length;++n)o.add(this.inputs[n],e[n]);return Qc(this.outputs,o,t)})}computeMask(e,t){return M(()=>{e=mt(e);let o;return t==null?o=Ms(null,e.length):o=mt(t),this.runInternalGraph(e,o)[1]})}computeOutputShape(e){let t=Xm(e);if(t.length!==this.inputLayers.length)throw new z(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);let o={};for(let a=0;a<t.length;a++){let l=this.inputLayers[a],u=t[a],c=l.name+"_0_0";o[c]=u}let n=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(Pd);if(n.length>1)for(let a of n){let l=this.nodesByDepth[a];for(let u of l){let c=u.outboundLayer;if(this.inputLayers.map(h=>h.id).indexOf(c.id)!==-1)continue;let p=[];for(let h=0;h<u.inboundLayers.length;h++){let g=u.inboundLayers[h],x=u.nodeIndices[h],b=u.tensorIndices[h],C=`${g.name}_${x}_${b}`,S=o[C];p.push(S)}let m=c.computeOutputShape(Sr(p)),f=Xm(m),d=c.inboundNodes.indexOf(u);for(let h=0;h<f.length;h++){let g=`${c.name}_${d}_${h}`;o[g]=f[h]}}}let s=[],i=[];for(let a=0;a<this.outputLayers.length;a++){let l=this.outputLayers[a],u=this.outputLayersNodeIndices[a],c=this.outputLayersTensorIndices[a],p=`${l.name}_${u}_${c}`;i.push(p)}for(let a=0;a<i.length;a++){let l=i[a];Mn(l in o),s.push(o[l])}return Sr(s)}runInternalGraph(e,t){t==null&&(t=Ms(null,e.length));let o={};for(let l=0;l<this.inputs.length;++l){let u=this.inputs[l],c=e[l],p=t[l];o[u.id]=[c,p]}let n=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Pd);for(let l of n){let u=this.nodesByDepth[l];for(let c of u){let p=c.outboundLayer,m=c.inputTensors,f=c.outputTensors,d=new Array;for(let h of m)h.id in o&&d.push(o[h.id]);if(d.length===m.length){let h={},g,x,b,C;if(c.callArgs!=null&&(h=c.callArgs),d.length===1){let[S,I]=d[0];h.mask==null&&(h.mask=I),b=mt(p.call(S,h)),C=mt(p.computeMask(S,I)),g=[S],x=[I]}else g=d.map(S=>S[0]),x=d.map(S=>S[1]),h.mask==null&&(h.mask=x),b=mt(p.call(g,h)),C=mt(p.computeMask(g,x));if(p.activityRegularizer)throw new Ie("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let S=0;S<f.length;++S){let I=f[S],N=b[S],$=C[S];o[I.id]=[N,$]}}}}let s=[],i=[],a=[];for(let l of this.outputs){Mn(l.id in o,`Could not compute output ${l.name} : ${l.id}`);let[u,c]=o[l.id];a.push(u.shape),s.push(u),i.push(c)}return[s,i,a]}buildNodeConversionMap(e){let t={},o;for(let n of this.layers){o=n instanceof en?1:0;for(let s=0;s<n.inboundNodes.length;s++){let i=en.nodeKey(n,s);this.containerNodes.has(i)&&(t[i]=o,o+=1)}}return t}getLayer(e,t){if(t!=null){if(this.layers.length<=t)throw new z(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}else if(e==null)throw new z("Provide either a layer name or layer index");for(let o of this.layers)if(o.name===e)return o;throw new z(`No such layer: ${e}`)}calculateLosses(){return M(()=>{let e=[];for(let t of this.layers)for(let o=0;o<t.inboundNodes.length;++o){let n=en.nodeKey(t,o);this.containerNodes.has(n)&&e.push(...t.calculateLosses())}return e})}getConfig(){let e={name:this.name},t=this.buildNodeConversionMap(this.layers),o=[];for(let i of this.layers){let a=i.getClassName(),l=i.getConfig(),u=[];for(let p=0;p<i.inboundNodes.length;p++){let m=i.inboundNodes[p],f=en.nodeKey(i,p),d={};if(this.containerNodes.has(f)){if(m.callArgs)try{JSON.stringify(m.callArgs),d=m.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),d={}}if(m.inboundLayers.length>0){let h=[];for(let g=0;g<m.inboundLayers.length;g++){let x=m.inboundLayers[g],b=m.nodeIndices[g],C=m.tensorIndices[g],S=en.nodeKey(x,b),I=t[S];I==null&&(I=0),h.push([x.name,I,C,d])}u.push(h)}}}let c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,o.push(c)}e.layers=o;let n=[];for(let i=0;i<this.inputLayers.length;i++){let a=this.inputLayers[i],l=this.inputLayersNodeIndices[i],u=en.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=t[u];c==null&&(c=0);let p=this.inputLayersTensorIndices[i];n.push([a.name,c,p])}e.inputLayers=n;let s=[];for(let i=0;i<this.outputLayers.length;i++){let a=this.outputLayers[i],l=this.outputLayersNodeIndices[i],u=en.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=t[u];c==null&&(c=0);let p=this.outputLayersTensorIndices[i];s.push([a.name,c,p])}return e.outputLayers=s,e}static fromConfig(e,t,o={},n=!1){let s={},i={};function a(g,x){g.name in i?i[g.name].push(x):i[g.name]=[x]}function l(g,x){let b=[],C;for(let S of x){let I=S[0],N=S[1],$=S[2];if(C=S[3]==null?{}:S[3],!(I in s)){a(g,x);return}let R=s[I];if(R.inboundNodes.length<=N){a(g,x);return}let F=R.inboundNodes[N];b.push(F.outputTensors[$])}b.length>0&&g.apply(Sr(b),C)}function u(g){let x=g.name,b=Jo(g,t.customObjects!=null?t.customObjects:{});b.setFastWeightInitDuringBuild(n),s[x]=b,g.inboundNodes.forEach(S=>{if(!(S instanceof Array))throw new z(`Corrupted configuration, expected array for nodeData: ${S}`);a(b,S)})}let c=t.name,p=t.layers;for(let g of p)u(g);for(;!fD(i);)for(let g of p){let x=s[g.name];if(x.name in i){let b=i[x.name];delete i[x.name];for(let C of b)l(x,C)}}let m=[],f=[],d=t.inputLayers;for(let g of d){let x=g[0],b=g[1],C=g[2];Mn(x in s);let I=s[x].inboundNodes[b].outputTensors;m.push(I[C])}let h=t.outputLayers;for(let g of h){let x=g[0],b=g[1],C=g[2];Mn(x in s);let I=s[x].inboundNodes[b].outputTensors;f.push(I[C])}return new e({inputs:m,outputs:f,name:c})}get stateful(){if(this._stateful)throw new z("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let e of this.layers)if(e.stateful)return!0;return!1}resetStates(){M(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}};function l9(r,e,t){let o=e.length;if(r==null||Array.isArray(r)&&r.length===0)return e.map(n=>null);if(o===1)return Array.isArray(r)&&r.length===1?r:typeof r=="object"&&e[0]in r?[r[e[0]]]:[r];if(Array.isArray(r)){if(r.length!==o)throw new Error(`Provided ${t} is an array of ${r.length} element(s), but the model has ${o} outputs. Make sure a set of weights is provided for each model output.`);return r}else if(typeof r=="object"&&Object.keys(r).length>0&&typeof r[Object.keys(r)[0]]=="object"){let n=[];return e.forEach(s=>{s in r?n.push(r[s]):n.push(null)}),n}else throw new Error(`The model has multiple (${o}) outputs, so ${t} must be either an array with ${o} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(r)}`)}function nb(r,e){return l9(r,e,"classWeight")}async function sb(r,e,t,o){if(e!=null||o!=null)throw new Error("Support sampleWeight is not implemented yet");if(t!=null){let n=M(()=>{if(r.shape.length===1)return to(r);if(r.shape.length===2){if(r.shape[1]>1)return La(r,1);if(r.shape[1]===1)return O(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await n.data());ke(n);let i=[];return s.forEach(a=>{if(t[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(t[a])}),Gt(i,"float32")}else return null}function jD(r,e){return P(r,e)}var u9=32;function ZD(r,e){let t,o,n=e;t=n.xs,o=n.ys,y.assert(t!=null&&o!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);let s=YD("input",r.inputNames,t),i=YD("output",r.outputNames,o),a=s[0].shape[0];y.assert(s.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),y.assert(i.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let l=0;l<s.length;l++)y.assert(s[l].shape[0]===a,()=>`Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);for(let l=0;l<i.length;l++)y.assert(i[l].shape[0]===a,()=>`Batch size mismatch: output ${r.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);return{xs:s,ys:i}}function YD(r,e,t){if(t instanceof Ve)return[t];if(Array.isArray(t))return y.assert(t.length===e.length,()=>`Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${r} keys ${e}.`),t;{let o=[];for(let n of e){if(t[n]==null)throw new z(`The feature data generated by the dataset lacks the required ${r} key '${n}'.`);o.push(t[n])}return o}}function c9(r){if(r.length===3)throw new Ie("Validation with sample weights is not implemented yet.");return{xs:r[0],ys:r[1]}}async function JD(r,e,t){let o=t.batchesPerEpoch!=null;if(y.assert(r.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),y.assert(t!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),y.assert(t.epochs!=null&&t.epochs>0&&Number.isInteger(t.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`),y.assert(!o||t.batchesPerEpoch>0&&Number.isInteger(t.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`),y.assert(t.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;try{let n=t.validationData!=null,s,i;if(n)if(QD(t.validationData))y.assert(t.validationBatches==null||t.validationBatches>0&&Number.isInteger(t.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);else{let g=c9(t.validationData);s=g.xs,i=g.ys}let a=r.makeTrainFunction(),l=r.getDedupedMetricsNames(),u;n?u=l.slice().concat(l.map(g=>"val_"+g)):u=l.slice();let c=Xy(t.callbacks,t.yieldEvery),p=t.verbose==null?1:t.verbose,{callbackList:m,history:f}=jy(c,p,t.epochs,null,null,p9(e,t),null,n,u);m.setModel(r),r.history=f,await m.onTrainBegin(),r.stopTraining_=!1;let d=t.initialEpoch==null?0:t.initialEpoch,h=await e.iterator();for(;d<t.epochs;){let g={};await m.onEpochBegin(d);let x=0,b=0;for(o||(h=await e.iterator());!o||x<t.batchesPerEpoch;){let C=await h.next();if(o&&C.done){console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${x} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch*t.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(C.value!=null){let{xs:S,ys:I}=ZD(r,C.value),N={};N.batch=b,N.size=S[0].shape[0],await m.onBatchBegin(b,N);let $=[];if(t.classWeight!=null){let _=nb(t.classWeight,r.outputNames);for(let B=0;B<_.length;++B)$.push(await sb(I[B],null,_[B]))}let R=S.concat(I).concat($),F=a(R);ke(R);for(let _=0;_<l.length;++_){let B=l[_],V=F[_];N[B]=V,Nt(V)}await m.onBatchEnd(b,N),Wy(N),b++,x++}if(o?x>=t.batchesPerEpoch:C.done){if(n){let S;QD(t.validationData)?S=mt(await r.evaluateDataset(t.validationData,{batches:t.validationBatches})):S=mt(r.evaluate(s,i,{batchSize:t.validationBatchSize==null?u9:t.validationBatchSize,verbose:0}));for(let I=0;I<r.metricsNames.length;++I)g[`val_${r.metricsNames[I]}`]=S[I]}break}if(r.stopTraining_)break}if(await m.onEpochEnd(d,g),d++,r.stopTraining_)break}return await m.onTrainEnd(),await r.history.syncData(),r.history}finally{r.isTraining=!1}}function p9(r,e){let t=null;return e.batchesPerEpoch!=null?t=e.batchesPerEpoch:Number.isFinite(r.size)&&(t=r.size),t}function QD(r){return typeof r.iterator=="function"}function m9(r){return typeof r.next=="function"}async function eF(r,e,t){t=t||{};let o=t.batches!=null,n=r.testFunction,s=[];if(t.verbose>0)throw new Ie("Verbose mode is not implemented yet.");y.assert(!o||t.batches>0&&Number.isInteger(t.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);let i=m9(e)?e:await e.iterator(),a=0,l=0;for(;!o||l<t.batches;){let u=await i.next();if(s=M(()=>{if(u.value){let{xs:c,ys:p}=ZD(r,u.value),m=c.concat(p),f=M(()=>n(m));if(ke(m),l===0)for(let h=0;h<f.length;++h)s.push(ae(0));let d=m[0].shape[0];for(let h=0;h<f.length;++h){let g=f[h],x=s[h];s[h]=M(()=>q(s[h],P(d,g))),l>0&&ke(x)}ke(f),a+=d,++l}return s}),u.done){o&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<s.length;++u){let c=s[u];s[u]=se(s[u],a),ke(c)}return Sr(s)}function ib(r){y.assert(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function ef(r,e,t){return r==null?[null]:Array.isArray(r)?r.map(o=>Cl(o,e,t-e)):Cl(r,e,t-e)}function ab(r,e){return M(()=>r==null?null:Array.isArray(r)?r.map(t=>ab(t,e)):By(r,e.dtype==="int32"?e:j(e,"int32")))}function lb(r,e){let t=[],o=0,n=null;for(;o<r;)n=o+e,n>=r&&(n=r),t.push([o,n]),o=n;return t}async function f9(r,e,t,o,n,s,i,a,l,u,c,p,m,f,d){n==null&&(n=32),s==null&&(s=1),c==null&&(c=!0),m==null&&(m=0);let h=!1;if(l!=null&&u!=null&&(h=!0),d!=null&&(h=!0,f==null))throw new z("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let g=r.checkNumSamples(t,n,f,"steps_per_epoch"),x;g!=null&&(x=qr(0,g)),i==null&&(i=1);let{callbackList:b,history:C}=jy(a,i,s,m,g,f,n,h,p);b.setModel(r),r.history=C,await b.onTrainBegin(),r.stopTraining_=!1;for(let S=m;S<s;++S){await b.onEpochBegin(S);let I={};if(f!=null)throw new Ie("stepsPerEpoch mode is not implemented yet.");{if(c==="batch")throw new Ie("batch shuffling is not implemneted yet");c&&y.shuffle(x);let N=Gt(x),$=lb(g,n);for(let R=0;R<$.length;++R){let F={};if(await b.onBatchBegin(R,F),M(()=>{let _=$[R][0],B=$[R][1],V=Cl(N,_,B-_);F.batch=R,F.size=B-_;let G=ab(t,V),W=e(G);for(let U=0;U<o.length;++U){let K=o[U],X=W[U];F[K]=X,Nt(X)}if(R===$.length-1&&h){let U=r.testLoop(l,u,n);for(let K=0;K<o.length;++K){let X=o[K],H=U[K];Nt(H),I["val_"+X]=H}}}),await b.onBatchEnd(R,F),Wy(F),r.stopTraining_)break}N.dispose()}if(await b.onEpochEnd(S,I),r.stopTraining_)break}return await b.onTrainEnd(),await r.history.syncData(),r.history}async function tF(r,e,t,o={}){if(r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;let n,s,i,a,l,u,c,p,m;try{let f=o.batchSize==null?32:o.batchSize;ib(f);let d=!1,h=await r.standardizeUserData(e,t,o.sampleWeight,o.classWeight,d,f);n=h[0],s=h[1],m=h[2];let g=!1,x;if(o.validationData!=null&&o.validationData.length>0){if(g=!0,o.validationData.length===2)l=o.validationData[0],u=o.validationData[1];else throw o.validationData.length===3?new Ie("validationData including sample weights is not supported yet."):new z(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${o.validationData} is invalid.`);let F=!0,_=await r.standardizeUserData(l,u,null,null,F,f);c=_[0],p=_[1],x=c.concat(p)}else if(o.validationSplit!=null&&o.validationSplit>0&&o.validationSplit<1){g=!0;let F=Math.floor(n[0].shape[0]*(1-o.validationSplit)),_=n[0].shape[0];c=ef(n,F,_),i=n,n=ef(n,0,F),p=ef(s,F,_),a=s,s=ef(s,0,F),x=c.concat(p)}else o.validationSteps!=null&&(g=!0);let b=n.concat(s).concat(m);r.checkTrainableWeightsConsistency();let C=r.makeTrainFunction(),S=r.getDedupedMetricsNames(),I,N;g?(r.makeTestFunction(),I=r.testFunction,N=S.slice().concat(S.map(F=>"val_"+F))):(I=null,x=[],N=S.slice());let $=Xy(o.callbacks,o.yieldEvery);return await f9(r,C,b,S,f,o.epochs,o.verbose,$,I,x,o.shuffle,N,o.initialEpoch,null,null)}finally{r.isTraining=!1,Ks(n,e),Ks(s,t),Ks(i,e),Ks(a,t),Ks(c,l),Ks(p,u),m!=null&&ke(m)}}function R1(r){let e=[];r instanceof Ve&&(r=[r]);for(let t=0;t<r.length;++t){let o=r[t];if(o.rank===1)e.push(wl(o,1));else{if(o.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(o)}}return e}function Ks(r,e){if(r==null)return;let t=[];if(e instanceof Ve)t.push(e.id);else if(Array.isArray(e))e.forEach(n=>t.push(n.id));else if(e!=null)for(let n in e){let s=e[n];t.push(s.id)}let o=[];if(r instanceof Ve)t.indexOf(r.id)===-1&&o.push(r);else if(Array.isArray(r))r.forEach(n=>{t.indexOf(n.id)===-1&&o.push(n)});else if(r!=null)for(let n in r){let s=r[n];t.indexOf(s.id)===-1&&o.push(s)}o.forEach(n=>{n.isDisposed||n.dispose()})}function d9(r){return r instanceof Ve}function A1(r){return Array.isArray(r)}function rF(r){return!d9(r)&&!A1(r)}function oF(r,e,t,o=!0,n=""){if(e==null||e.length===0){if(r!=null){let i=!1;if(A1(r)&&r.length>0)i=!0;else if(rF(r)){for(let a in r)if(r.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new z(`Error when checking model ${n} expected no data, but got ${r}`)}return[]}if(r==null)return e.map(i=>null);let s;if(rF(r)){r=r,s=[];for(let i of e){if(r[i]==null)throw new z(`No data provided for "${i}". Need data for each key in: ${e}`);s.push(r[i])}}else if(A1(r)){if(r=r,r.length!==e.length)throw new z(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);s=r}else{if(r=r,e.length>1)throw new z(`The model ${n} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);s=[r]}if(s=R1(s),t!=null)for(let i=0;i<e.length;++i){if(t[i]==null)continue;let a=s[i];if(a.shape.length!==t[i].length)throw new z(`Error when checking ${n}: expected ${e[i]} to have ${t[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<t[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=t[i][l];if(c!=null&&c>=0&&u!==c)throw new z(`${n} expected a batch of elements where each example has shape [${t[i].slice(1,t[i].length)}] (i.e.,tensor shape [*,${t[i].slice(1,t[i].length)}]) but the ${n} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return s}function h9(r,e,t){let o=Gs(r.map(s=>s.shape[0]));o.sort();let n=Gs(e.map(s=>s.shape[0]));if(n.sort(),o.length>1)throw new z(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map(s=>s.shape))}`);if(n.length>1)throw new z(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(s=>s.shape))}`);if(o.length>0&&n.length>0&&!y.arraysEqual(o,n))throw new z(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${n[0]} target sample(s).`)}function g9(r,e,t){let o=[Jc,Zm,ep];for(let n=0;n<r.length;++n){let s=r[n],i=e[n],a=t[n];if(i!=null){if(i===ep&&s.shape[s.shape.length-1]===1)throw new z(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(o.indexOf(i)!==-1){let l=s.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){let p=l[c],m=u[c];if(m!=null&&p!==m)throw new z(`A target Tensor with shape ${s.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function nF(r,e,t,o=!0,n=""){let s;if(Array.isArray(r)){if(r.length!==e.length)throw new z(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${r.length} Tensors(s).`);s=r}else{if(e.length>1)throw new z(`The model expects ${e.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);s=[r]}if(t!=null)for(let i=0;i<e.length;++i){if(t[i]==null)continue;let a=s[i];if(a.shape.length!==t[i].length)throw new z(`Error when checking ${n}: expected ${e[i]} to have ${t[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<t[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=t[i][l];if(c!=null&&c!==u)throw new z(`Error when checking ${n}: expected ${e[i]} to have shape ${JSON.stringify(t[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function x9(r,e){if(r==null||Array.isArray(r)&&r.length===0)return e.map(o=>[]);let t;if(typeof r=="string"||typeof r=="function")t=[r];else if(Array.isArray(r)||typeof r=="object")t=r;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);if(Array.isArray(t))return e.map(o=>t);{let o=[];for(let n of e){let s=t.hasOwnProperty(n)?t[n]:[];Array.isArray(s)||(s=[s]),o.push(s)}return o}}var y9="layers-model",qs=class extends en{constructor(e){super(e),this.isTraining=!1}summary(e,t,o=console.log){if(!this.built)throw new z("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");qD(this,e,t,o)}compile(e){if(e.loss==null&&(e.loss=[]),this.loss=e.loss,typeof e.optimizer=="string")this.optimizer_=KD(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Br))throw new z("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(!Array.isArray(e.loss)&&typeof e.loss!="string"&&typeof e.loss!="function"){e.loss=e.loss;for(let i in e.loss)if(this.outputNames.indexOf(i)===-1)throw new z(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(let i of this.outputNames)e.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),t.push(Qy(e.loss[i]))}else if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new z(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(a=>Qy(a))}else{let i=Qy(e.loss);this.outputs.forEach(a=>{t.push(i)})}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){let a=this.internalOutputShapes[i],l=this.outputNames[i];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[i])}let o=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Vi("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([a,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});let n=x9(e.metrics,this.outputNames),s=(i,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[i]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,i])};Vi("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=n[i];(u=>{let c="",p,m,f;for(let d of u){if(typeof d=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(d)!==-1){let g=this.internalOutputShapes[i];g[g.length-1]===1||this.lossFunctions[i]===Zm?["accuracy","acc"].indexOf(d)!==-1?m=Jy:["crossentropy","ce"].indexOf(d)!==-1&&(m=T1):this.lossFunctions[i]===Qm?["accuracy","acc"].indexOf(d)!==-1?m=k1:["crossentropy","ce"].indexOf(d)!==-1&&(m=N1):["accuracy","acc"].indexOf(d)!==-1?m=eb:["crossentropy","ce"].indexOf(d)!==-1&&(m=tb);let x;["accuracy","acc"].indexOf(d)!==-1?x="acc":["crossentropy","ce"].indexOf(d)!==-1&&(x="ce"),f=m,p=c+x}else f=WD(d),p=c+rh(d);let h;Vi(p,()=>{h=f}),s(i,p,h)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,o={}){let n=o.batchSize==null?32:o.batchSize;ib(n);let s=!0,i=this.standardizeUserDataXY(e,t,s,n);try{let a=i[0].concat(i[1]);this.makeTestFunction();let l=this.testFunction,u=this.testLoop(l,a,n,o.verbose,o.steps);return Sr(u)}finally{Ks(i[0],e),Ks(i[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),eF(this,e,t)}checkNumSamples(e,t,o,n="steps"){let s;if(o!=null){if(s=null,t!=null)throw new z(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(e!=null)Array.isArray(e)?s=e[0].shape[0]:s=e.shape[0];else throw new z(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return s}execute(e,t){if(Array.isArray(t)&&t.length===0)throw new z("`outputs` is an empty Array, which is not allowed.");let o=Array.isArray(t),n=o?t:[t],s=this.retrieveSymbolicTensors(n),i=new Hs;if(e instanceof Ve&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new z(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)i.add(this.inputs[l],e[l])}else for(let l of this.inputs){let u=e[l.name];if(u==null)throw new z(`No value is provided for the model's input ${l.name}`);i.add(l,u)}let a=Qc(s,i);return o?a:a[0]}retrieveSymbolicTensors(e){let t=Ms(null,e.length),o=e.length;for(let n of this.layers){let s=Array.isArray(n.output)?n.output:[n.output],i=s.map(a=>a.name);for(let a=0;a<e.length;++a){let l=i.indexOf(e[a]);if(l!==-1&&(t[a]=s[l],o--),o===0)break}if(o===0)break}if(o>0){let n=[];throw t.forEach((s,i)=>{s==null&&n.push(e[i])}),new z(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,o=!1){return M(()=>{let n=this.checkNumSamples(e);if(o)throw new Ie("Verbose predictLoop() is not implemented yet.");let s=lb(n,t),i=this.outputs.map(a=>[]);for(let a=0;a<s.length;++a)M(()=>{let u=s[a][0],c=s[a][1],p=ef(e,u,c),m=[];if(Array.isArray(p))for(let d=0;d<p.length;++d)m.push({key:this.inputs[d],value:p[d]});else m.push({key:this.inputs[0],value:p});let f=new Hs(m);return Qc(this.outputs,f)}).forEach((u,c)=>i[c].push(u));return Sr(i.map(a=>et(a,0)))})}predict(e,t={}){let o=R1(e);nF(o,this.inputNames,this.feedInputShapes,!1);try{let n=t.batchSize==null?32:t.batchSize;return ib(n),this.predictLoop(o,n)}finally{Ks(o,e)}}predictOnBatch(e){nF(e,this.inputNames,this.feedInputShapes,!0);let t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,o=!0,n){if(this.optimizer_==null)throw new Mr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let s=[];for(let i=0;i<this.feedOutputShapes.length;++i){let a=this.feedOutputShapes[i];this.feedLossFns[i]===Qm?s.push(a.slice(0,a.length-1).concat([1])):s.push(a)}if(e=oF(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=oF(t,this.feedOutputNames,s,!1,"target"),h9(e,t,null),g9(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&n!=null&&n>0&&e[0].shape[0]%n!==0)throw new z(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,o,n,s=!0,i){let[a,l]=this.standardizeUserDataXY(e,t,s,i);if(o!=null)throw new Error("sample weight is not supported yet.");let u=null;if(n!=null){let c=nb(n,this.outputNames);u=[];for(let p=0;p<c.length;++p)u.push(await sb(l[p],null,c[p]))}return[a,l,u]}testLoop(e,t,o,n=0,s){return M(()=>{let i=this.checkNumSamples(t,o,s,"steps"),a=[];if(n>0)throw new Ie("Verbose mode is not implemented yet.");if(s!=null)throw new Ie("steps mode in testLoop() is not implemented yet");{let l=lb(i,o),u=Gt(qr(0,i));for(let c=0;c<l.length;++c){let p=l[c][0],m=l[c][1],f=Cl(u,p,m-p),d=ab(t,f),h=e(d);if(c===0)for(let g=0;g<h.length;++g)a.push(ae(0));for(let g=0;g<h.length;++g){let x=h[g];a[g]=q(a[g],P(m-p,x))}}for(let c=0;c<a.length;++c)a[c]=se(a[c],i)}return a})}getDedupedMetricsNames(){let e=this.metricsNames,t=[];for(let o=0;o<e.length;++o){let n=e[o],s=n;h1(e,n)>1&&(s+=`_${h1(e.slice(0,o),n)}`),t.push(s)}return t}makeTrainFunction(){return e=>{let t=[],o=e.slice(0,this.inputs.length),n=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],a=()=>{let p=[];for(let h=0;h<this.inputs.length;++h)p.push({key:this.inputs[h],value:o[h]});let m=new Hs(p),f=Qc(this.outputs,m,{training:!0}),d;for(let h=0;h<this.lossFunctions.length;++h){let g=this.lossFunctions[h],x=g(n[h],f[h]);s[h]!=null&&(x=jD(x,s[h]));let b=Ct(x);t.push(b),h===0?d=x:d=q(d,x)}for(let h=0;h<this.metricsTensors.length;++h){let g;if(this.outputs.length>1&&h<this.outputs.length)g=t[h];else{let x=this.metricsTensors[h][0],b=this.metricsTensors[h][1];g=Ct(x(n[b],f[b]))}Nt(g),i.push(g)}return d=Ct(d),this.calculateLosses().forEach(h=>{d=q(d,h)}),d},l=this.collectedTrainableWeights.map(p=>p.read()),u=!0;return[this.optimizer_.minimize(a,u,l)].concat(i)}}makeTestFunction(){this.testFunction=e=>M(()=>{let t=[],o,n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let u=0;u<this.inputs.length;++u)i.push({key:this.inputs[u],value:n[u]});let a=new Hs(i),l=Qc(this.outputs,a);for(let u=0;u<this.lossFunctions.length;++u){let c=this.lossFunctions[u],p=Ct(c(s[u],l[u]));u===0?o=p:o=q(o,p),t.push(o)}for(let u=0;u<this.metricsTensors.length;++u){let c=this.metricsTensors[u][0],p=this.metricsTensors[u][1],m=Ct(c(s[p],l[p]));t.push(m)}return t})}async fit(e,t,o={}){return tF(this,e,t,o)}async fitDataset(e,t){return JD(this,e,t)}async trainOnBatch(e,t){let o=await this.standardizeUserData(e,t),n=o[0],s=o[1],a=this.makeTrainFunction()(n.concat(s)),l=[];for(let u of a){let c=await u.data();l.push(c[0])}return ke(a),Ks(o[0],e),Ks(o[1],t),Sr(l)}getNamedWeights(e){let t=[],o=e!=null&&e.trainableOnly,n=o?this.trainableWeights:this.weights,s=this.getWeights(o);for(let i=0;i<n.length;++i)o&&!n[i].trainable||t.push({name:n[i].originalName,tensor:s[i]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){let e=super.dispose();if(e.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){let t=$d().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-$d().numTensors}return e}getLossIdentifiers(){let e;if(typeof this.loss=="string")e=Vs(this.loss);else if(Array.isArray(this.loss)){for(let t of this.loss)if(typeof t!="string")throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(t=>Vs(t))}else{let t=Object.keys(this.loss);e={};let o=this.loss;for(let n of t)if(typeof o[n]=="string")e[n]=Vs(o[n]);else throw new Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[Vs(rh(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Vs(rh(e)));{let e={};for(let t in this.metrics)e[t]=Vs(rh(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(e.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(e.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(e.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");let t=oh(e.optimizer_config),o=Jo(t),n;if(typeof e.loss=="string")n=bl(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(i=>bl(i));else if(e.loss!=null){n={};for(let i in e.loss)n[i]=bl(e.loss[i])}let s;if(Array.isArray(e.metrics))s=e.metrics.map(i=>bl(i));else if(e.metrics!=null){s={};for(let i in e.metrics)s[i]=bl(e.metrics[i])}this.compile({loss:n,metrics:s,optimizer:o})}async save(e,t){if(typeof e=="string"){let u=Li.getSaveHandlers(e);if(u.length===0)throw new z(`Cannot find any save handlers for URL '${e}'`);if(u.length>1)throw new z(`Found more than one (${u.length}) save handlers for URL '${e}'`);e=u[0]}if(e.save==null)throw new z("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let o=await Li.encodeWeights(this.getNamedWeights(t)),n=!1,s=null,a={modelTopology:this.toJSON(s,n),format:y9,generatedBy:`TensorFlow.js tfjs-layers v${Jm}`,convertedBy:null};if((t==null?!1:t.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();let u="optimizer",{data:c,specs:p}=await Li.encodeWeights(await this.optimizer.getWeights(),u);o.specs.push(...p),o.data=Li.concatenateArrayBuffers([o.data,c])}return this.userDefinedMetadata!=null&&(E1(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=o.data,a.weightSpecs=o.specs,e.save(a)}setUserDefinedMetadata(e){E1(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}};qs.className="Model";Y.registerClass(qs);var ub=class extends qs{};ub.className="Functional";Y.registerClass(ub);var vl=class extends qs{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=e.name!=null?e.name:Ku("sequential_"),e.layers!=null)for(let t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(o=>o<0))throw new z(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){let t=e instanceof vl||e instanceof qs,o;if(t){if(o=e,o.outputs.length!==1)throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(o.inputs.length!==1)throw new z("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(e.inboundNodes.length===0){if(e.batchInputShape==null)throw new z("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let n=S1({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(n)}if(t)this.outputs=o.outputs,this.inputs=o.inputs;else{if(e.inboundNodes.length!==1)throw new z(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(e.inboundNodes[0].outputTensors.length!==1)throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=w1(this.outputs[0])}this.inboundNodes=[],new Sl({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Ms(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(n=>n.shape),outputShapes:this.outputs[0].shape})}else{let n=e.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return this.model==null&&this.build(),this.model.call(e,t)}build(e){if(qe(e),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new qs({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,o=console.log){this.built||this.build(),super.summary(e,t,o)}setWeights(e){this.model==null&&this.build(),this.model.setWeights(e)}evaluate(e,t,o={}){if(!this.built)throw new Mr("The model needs to be compiled before being used.");return this.model.evaluate(e,t,o)}async evaluateDataset(e,t){if(!this.built)throw new Mr("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return this.model==null&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return this.model==null&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,o={}){if(!this.built)throw new Mr("The model needs to be compiled before being used.");return this.model.fit(e,t,o)}async fitDataset(e,t){if(!this.built)throw new Mr("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,o={},n=!1){let s,i={};if(t instanceof Array){if(t[0].className==null||t[0].className==="Merge")throw new z("Legacy serialization format not supported yet.");s=t}else y.assert(t.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=t.layers,delete t.layers,i=t;let a=new e(i);if(!(a instanceof vl))throw new Ie(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(let l of s){let c=Jo(l,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),a.add(c)}return a}set stopTraining(e){if(this.model==null)throw new z("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(this.model==null)throw new z("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let e=[];for(let t of this.layers){let o={};o.className=t.getClassName(),o.config=t.getConfig(),e.push(o)}return{name:this.name,layers:e}}};vl.className="Sequential";Y.registerClass(vl);var Yr=class extends Y.Serializable{getConfig(){return{}}},cb=class extends Yr{apply(e,t=1){return $D(e,t)}};cb.className="elu";Y.registerClass(cb);var pb=class extends Yr{apply(e){return Cm(e)}};pb.className="selu";Y.registerClass(pb);var mb=class extends Yr{apply(e){return Er(e)}};mb.className="relu";Y.registerClass(mb);var fb=class extends Yr{apply(e){return M(()=>Ha(6,Er(e)))}};fb.className="relu6";Y.registerClass(fb);var db=class extends Yr{apply(e){return e}};db.className="linear";Y.registerClass(db);var hb=class extends Yr{apply(e){return Hr(e)}};hb.className="sigmoid";Y.registerClass(hb);var gb=class extends Yr{apply(e){return RD(e)}};gb.className="hardSigmoid";Y.registerClass(gb);var xb=class extends Yr{apply(e){return zi(e)}};xb.className="softplus";Y.registerClass(xb);var yb=class extends Yr{apply(e){return ED(e)}};yb.className="softsign";Y.registerClass(yb);var bb=class extends Yr{apply(e){return za(e)}};bb.className="tanh";Y.registerClass(bb);var tf=class extends Yr{apply(e,t=-1){return Vu(e,t)}};tf.className="softmax";Y.registerClass(tf);var Cb=class extends Yr{apply(e,t=-1){return dm(e,t)}};Cb.className="logSoftmax";Y.registerClass(Cb);var wb=class extends Yr{apply(e,t=1){return M(()=>P(Hr(P(e,t)),e))}};wb.className="swish";Y.registerClass(wb);var Sb=class extends Yr{apply(e){return M(()=>P(e,za(zi(e))))}};Sb.className="mish";Y.registerClass(Sb);function Ui(r){return r.getClassName()}function D1(r,e={}){return Ya(r,Y.SerializationMap.getMap().classNameMap,e,"activation")}function Wi(r){if(r==null){let e={};return e.className="linear",e.config={},D1(e)}if(typeof r=="string"){let e={};return e.className=r,e.config={},D1(e)}else return r instanceof Yr?r:D1(r)}function b9(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}var Ib=class extends Y.Serializable{},nh=class extends Ib{constructor(e){super(),b9(e),this.l1=e==null||e.l1==null?.01:e.l1,this.l2=e==null||e.l2==null?.01:e.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(e){return M(()=>{let t=it([1]);return this.hasL1&&(t=q(t,ue(P(this.l1,It(e))))),this.hasL2&&(t=q(t,ue(P(this.l2,jc(e))))),O(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}};nh.className="L1L2";Y.registerClass(nh);var sF={l1l2:"L1L2"};function at(r){return zm(r)}function iF(r,e={}){return Ya(r,Y.SerializationMap.getMap().classNameMap,e,"regularizer")}function dt(r){if(r==null)return null;if(typeof r=="string"){let t={className:r in sF?sF[r]:r,config:{}};return iF(t)}else return r instanceof Ib?r:iF(r)}var sh=class extends Le{constructor(e){super(e??{}),this.supportsMasking=!0,e!=null&&(this.maxValue=e.maxValue)}call(e,t){e=De(e);let o=Er(e);return this.maxValue!=null&&(o=br(o,0,this.maxValue)),o}computeOutputShape(e){return e}getConfig(){let e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}};sh.className="ReLU";Y.registerClass(sh);var ih=class extends Le{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,e==null&&(e={}),this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){let o=De(e);return _u(o,this.alpha)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}};ih.className="LeakyReLU";Y.registerClass(ih);var ah=class extends Le{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",e==null&&(e={}),this.supportsMasking=!0,this.alphaInitializer=ct(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=dt(e.alphaRegularizer),this.alphaConstraint=Ot(e.alphaConstraint),e.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if(typeof e.sharedAxes=="number")this.sharedAxes=[e.sharedAxes];else throw new z(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){e=qe(e);let t=e.slice(1);if(this.sharedAxes!=null)for(let n of this.sharedAxes)t[n-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let o={};if(this.sharedAxes!=null)for(let n=1;n<e.length;++n)o[n]=e[n];this.inputSpec=[new ft({ndim:e.length,axes:o})],this.built=!0}call(e,t){return e=De(e),Bu(e,this.alpha.read())}getConfig(){let e={alphaInitializer:wt(this.alphaInitializer),alphaRegularizer:at(this.alphaRegularizer),alphaConstraint:_t(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}};ah.className="PReLU";Y.registerClass(ah);var lh=class extends Le{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,e==null&&(e={}),e.alpha!=null&&e.alpha!==this.DEFAULT_ALPHA)throw new Ie(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=e.alpha==null?this.DEFAULT_ALPHA:e.alpha}call(e,t){let o=De(e);return Va(o)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}};lh.className="ELU";Y.registerClass(lh);var uh=class extends Le{constructor(e){super(e??{}),this.DEFAULT_THETA=1,e==null&&(e={}),this.theta=e.theta==null?this.DEFAULT_THETA:e.theta}call(e,t){let o=De(e);return P(o,j(qt(o,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){let e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}};uh.className="ThresholdedReLU";Y.registerClass(uh);var ch=class extends Le{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,e==null&&(e={}),this.softmax=new tf().apply,this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis}call(e,t){let o=De(e);return this.softmax(o,this.axis)}computeOutputShape(e){return e}getConfig(){let e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}};ch.className="Softmax";Y.registerClass(ch);function ju(r,e,t){if(typeof r=="number")return Ms(r,e);if(r.length!==e)throw new z(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${r.length} elements.`);for(let o=0;o<e;++o){let n=r[o];if(!vD(n))throw new z(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(r)} including a non-integer number ${n}`)}return r}function Vo(r,e,t,o,n=1){if(r==null)return r;let s=e+(e-1)*(n-1),i;return t==="same"?i=r:i=r-s+1,Math.floor((i+o-1)/o)}function Hi(r,e,t,o){if(r==null)return null;if(o==="valid")r=r*e+Gi([t-e,0]);else if(o==="same")r=r*e;else throw new z(`Unsupport padding mode: ${o}.`);return r}function gh(r,e){return M(()=>($t(e),e==="channelsFirst"?Pe(r,[0,2,3,1]):r))}function F1(r,e){return M(()=>($t(e),e==="channelsFirst"?Pe(r,[0,2,3,4,1]):r))}function w9(r,e,t,o=1,n="valid",s,i=1){return M(()=>{if(s==null&&(s=so()),$t(s),r.shape.length!==3)throw new z(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);if(e.shape.length!==3)throw new z(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(t!=null&&t.shape.length!==1)throw new z(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if(s==="channelsFirst"&&(r=Pe(r,[0,2,1])),n==="causal")throw new Ie("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=lm(r,e,o,n==="same"?"same":"valid","NWC",i);return t!=null&&(a=io(a,t)),a})}function aF(r,e,t,o=[1,1],n="valid",s,i,a=null){return M(()=>{if(s==null&&(s=so()),$t(s),r.rank!==3&&r.rank!==4)throw new z(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(e.rank!==3&&e.rank!==4)throw new z(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let l=gh(r,s);if(n==="causal")throw new Ie("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Wu.conv2d({x:l,filter:e,strides:o,pad:n==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:t,activation:a}),s==="channelsFirst"&&(l=Pe(l,[0,3,1,2])),l})}function S9(r,e,t,o=[1,1,1],n="valid",s,i){return M(()=>{if(s==null&&(s=so()),$t(s),r.rank!==4&&r.rank!==5)throw new z(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);if(e.rank!==4&&e.rank!==5)throw new z(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);let a=F1(r,s);if(n==="causal")throw new Ie("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=zx(a,e,o,n==="same"?"same":"valid","NDHWC",i),t!=null&&(a=io(a,t)),s==="channelsFirst"&&(a=Pe(a,[0,4,1,2,3])),a})}var tp=class extends Le{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",tp.verifyArgs(t),this.rank=e,Xt(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new Ie(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ju(t.kernelSize,e,"kernelSize"),this.strides=ju(t.strides==null?1:t.strides,e,"strides"),this.padding=t.padding==null?"valid":t.padding,no(this.padding),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,$t(this.dataFormat),this.activation=Wi(t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.biasInitializer=ct(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ot(t.biasConstraint),this.biasRegularizer=dt(t.biasRegularizer),this.activityRegularizer=dt(t.activityRegularizer),this.dilationRate=ju(t.dilationRate==null?1:t.dilationRate,e,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new z(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new z(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new z(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(Mn("kernelSize"in e,"required key 'kernelSize' not in config"),typeof e.kernelSize!="number"&&!Ay(e.kernelSize,"number",1,3))throw new z(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){let e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Ui(this.activation),useBias:this.useBias,biasInitializer:wt(this.biasInitializer),biasRegularizer:at(this.biasRegularizer),activityRegularizer:at(this.activityRegularizer),biasConstraint:_t(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}},Yu=class extends tp{constructor(e,t){super(e,t),this.kernel=null,Yu.verifyArgs(t),this.filters=t.filters,Xt(this.filters,"filters"),this.kernelInitializer=ct(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ot(t.kernelConstraint),this.kernelRegularizer=dt(t.kernelRegularizer)}build(e){e=qe(e);let t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new z(`The channel dimension of the input should be defined. Found ${e[t]}`);let o=e[t],n=this.kernelSize.concat([o,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:o}}],this.built=!0}call(e,t){return M(()=>{e=De(e);let o,n=this.bias==null?null:this.bias.read(),s=Dy(this.activation.getClassName());if(s!=null&&this.rank===2)o=aF(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(this.rank===1)o=w9(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)o=aF(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)o=S9(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new Ie("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(o=this.activation.apply(o))}return o})}computeOutputShape(e){e=qe(e);let t=[],o=this.dataFormat==="channelsLast"?e.slice(1,e.length-1):e.slice(2);for(let s=0;s<o.length;++s){let i=Vo(o[s],this.kernelSize[s],this.padding,this.strides[s],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[s]);t.push(i)}let n=[e[0]];return this.dataFormat==="channelsLast"?(n=n.concat(t),n.push(this.filters)):(n.push(this.filters),n=n.concat(t)),n}getConfig(){let e={filters:this.filters,kernelInitializer:wt(this.kernelInitializer),kernelRegularizer:at(this.kernelRegularizer),kernelConstraint:_t(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||typeof e.filters!="number"||e.filters<1)throw new z(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}},Qu=class extends Yu{constructor(e){super(2,e),Qu.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!Ay(e.kernelSize,"number",1,2))throw new z(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}};Qu.className="Conv2D";Y.registerClass(Qu);var Zu=class extends Yu{constructor(e){super(3,e),Zu.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!(Array.isArray(e.kernelSize)&&(e.kernelSize.length===1||e.kernelSize.length===3)))throw new z(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}};Zu.className="Conv3D";Y.registerClass(Zu);var ph=class extends Qu{constructor(e){if(super(e),this.inputSpec=[new ft({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new z(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(e=qe(e),e.length!==4)throw new z("Input should have rank 4; Received input shape: "+JSON.stringify(e));let t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new z("The channel dimension of the inputs should be defined. Found `None`.");let o=e[t],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ft({ndim:4,axes:{[t]:o}})],this.built=!0}call(e,t){return M(()=>{let o=De(e);if(o.shape.length!==4)throw new z(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a;this.dataFormat==="channelsFirst"?(i=2,a=3):(i=1,a=2);let l=n[i],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],m=this.strides[0],f=this.strides[1],d=Hi(l,m,c,this.padding),h=Hi(u,f,p,this.padding),g=[s,d,h,this.filters];this.dataFormat!=="channelsLast"&&(o=Pe(o,[0,2,3,1]));let x=cm(o,this.kernel.read(),g,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(x=Pe(x,[0,3,1,2])),this.bias!=null&&(x=io(x,this.bias.read(),this.dataFormat)),this.activation!=null&&(x=this.activation.apply(x)),x})}computeOutputShape(e){e=qe(e);let t=e.slice(),o,n,s;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3):(o=3,n=1,s=2);let i=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],u=this.strides[1];return t[o]=this.filters,t[n]=Hi(t[n],l,i,this.padding),t[s]=Hi(t[s],u,a,this.padding),t}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}};ph.className="Conv2DTranspose";Y.registerClass(ph);var mh=class extends Zu{constructor(e){if(super(e),this.inputSpec=[new ft({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new z(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(e=qe(e),e.length!==5)throw new z("Input should have rank 5; Received input shape: "+JSON.stringify(e));let t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null)throw new z("The channel dimension of the inputs should be defined. Found `None`.");let o=e[t],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ft({ndim:5,axes:{[t]:o}})],this.built=!0}call(e,t){return M(()=>{let o=De(e);if(o.shape.length!==5)throw new z(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a,l;this.dataFormat==="channelsFirst"?(l=2,i=3,a=4):(l=1,i=2,a=3);let u=n[l],c=n[i],p=n[a],m=this.kernelSize[0],f=this.kernelSize[1],d=this.kernelSize[2],h=this.strides[0],g=this.strides[1],x=this.strides[2],b=Hi(u,h,m,this.padding),C=Hi(c,g,f,this.padding),S=Hi(p,x,d,this.padding),I=[s,b,C,S,this.filters];this.dataFormat!=="channelsLast"&&(o=Pe(o,[0,2,3,4,1]));let N=Mx(o,this.kernel.read(),I,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(N=Pe(N,[0,4,1,2,3])),this.bias!==null&&(N=io(N,this.bias.read(),this.dataFormat)),this.activation!==null&&(N=this.activation.apply(N)),N})}computeOutputShape(e){e=qe(e);let t=e.slice(),o,n,s,i;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3,i=4):(o=4,n=1,s=2,i=3);let a=this.kernelSize[0],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[0],p=this.strides[1],m=this.strides[2];return t[o]=this.filters,t[n]=Hi(t[n],c,a,this.padding),t[s]=Hi(t[s],p,l,this.padding),t[i]=Hi(t[i],m,u,this.padding),t}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}};mh.className="Conv3DTranspose";Y.registerClass(mh);var vb=class extends Yu{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,t.filters==null)throw new z("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(t.kernelInitializer!=null||t.kernelRegularizer!=null||t.kernelConstraint!=null)throw new z("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(t.padding!=null&&t.padding!=="same"&&t.padding!=="valid")throw new z(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=ct(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=dt(t.depthwiseRegularizer),this.depthwiseConstraint=Ot(t.depthwiseConstraint),this.pointwiseInitializer=ct(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=dt(t.pointwiseRegularizer),this.pointwiseConstraint=Ot(t.pointwiseConstraint)}build(e){if(e=qe(e),e.length<this.rank+2)throw new z(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);let t=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[t]==null||e[t]<0)throw new z(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);let o=e[t],n=this.kernelSize.concat([o,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(o*this.depthMultiplier,this.filters);let i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new ft({ndim:this.rank+2,axes:{[t]:o}})],this.built=!0}call(e,t){return M(()=>{e=De(e);let o;if(this.rank===1)throw new Ie("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(e=Pe(e,[0,2,3,1])),o=wm(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(o=io(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),this.dataFormat==="channelsFirst"&&(o=Pe(o,[0,3,1,2])),o})}getConfig(){let e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=wt(this.depthwiseInitializer),e.pointwiseInitializer=wt(this.pointwiseInitializer),e.depthwiseRegularizer=at(this.depthwiseRegularizer),e.pointwiseRegularizer=at(this.pointwiseRegularizer),e.depthwiseConstraint=_t(this.depthwiseConstraint),e.pointwiseConstraint=_t(this.pointwiseConstraint),e}};vb.className="SeparableConv";var fh=class extends vb{constructor(e){super(2,e)}};fh.className="SeparableConv2D";Y.registerClass(fh);var rp=class extends Yu{constructor(e){super(1,e),rp.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){let e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if(typeof e.kernelSize!="number"&&!Ay(e.kernelSize,"number",1,1))throw new z(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}};rp.className="Conv1D";Y.registerClass(rp);var dh=class extends Le{constructor(e){super(e),typeof e.cropping=="number"?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:typeof e.cropping[0]=="number"?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=e.dataFormat===void 0?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return this.dataFormat==="channelsFirst"?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return M(()=>{if(e=De(e),this.dataFormat==="channelsLast"){let o=zd(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return zd(o,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{let o=zd(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return zd(o,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}};dh.className="Cropping2D";Y.registerClass(dh);var hh=class extends Le{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=e.size==null?this.DEFAULT_SIZE:e.size,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,$t(this.dataFormat),this.interpolation=e.interpolation==null?"nearest":e.interpolation,SD(this.interpolation)}computeOutputShape(e){if(this.dataFormat==="channelsFirst"){let t=e[2]==null?null:this.size[0]*e[2],o=e[3]==null?null:this.size[1]*e[3];return[e[0],e[1],t,o]}else{let t=e[1]==null?null:this.size[0]*e[1],o=e[2]==null?null:this.size[1]*e[2];return[e[0],t,o,e[3]]}}call(e,t){return M(()=>{let o=De(e),n=o.shape;if(this.dataFormat==="channelsFirst"){o=Pe(o,[0,2,3,1]);let s=this.size[0]*n[2],i=this.size[1]*n[3],a=this.interpolation==="nearest"?qa.resizeNearestNeighbor(o,[s,i]):qa.resizeBilinear(o,[s,i]);return Pe(a,[0,3,1,2])}else{let s=this.size[0]*n[1],i=this.size[1]*n[2];return this.interpolation==="nearest"?qa.resizeNearestNeighbor(o,[s,i]):qa.resizeBilinear(o,[s,i])}})}getConfig(){let e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}};hh.className="UpSampling2D";Y.registerClass(hh);function I9(r,e,t=[1,1],o="valid",n,s){return M(()=>{n==null&&(n=so()),$t(n);let i=gh(r,n);if(r.rank!==4)throw new z(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);if(e.rank!==4)throw new z(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return i=Ma(i,e,t,o==="same"?"same":"valid","NHWC",s),n==="channelsFirst"&&(i=Pe(i,[0,3,1,2])),i})}var xh=class extends tp{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=ct(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ot(e.depthwiseConstraint),this.depthwiseRegularizer=dt(e.depthwiseRegularizer)}build(e){if(e=qe(e),e.length<4)throw new z(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);let t=this.dataFormat==="channelsFirst"?1:3;if(e[t]==null||e[t]<0)throw new z(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);let o=e[t],n=[this.kernelSize[0],this.kernelSize[1],o,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[o*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return M(()=>{e=De(e);let o=I9(e,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(o=io(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),o})}computeOutputShape(e){e=qe(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],o=this.dataFormat==="channelsFirst"?e[3]:e[2],n=this.dataFormat==="channelsFirst"?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=Vo(t,this.kernelSize[0],this.padding,this.strides[0]),i=Vo(o,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[e[0],n,s,i]:[e[0],s,i,n]}getConfig(){let e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=wt(this.depthwiseInitializer),e.depthwiseRegularizer=at(this.depthwiseRegularizer),e.depthwiseConstraint=_t(this.depthwiseRegularizer),e}};xh.className="DepthwiseConv2D";Y.registerClass(xh);function _1(r,e,t,o){if(Array.isArray(r)){if(e!=null||t!=null)throw new z("When inputs is an array, neither initialState or constants should be provided");o!=null&&(t=r.slice(r.length-o,r.length),r=r.slice(0,r.length-o)),r.length>1&&(e=r.slice(1,r.length)),r=r[0]}function n(s){return s==null||Array.isArray(s)?s:[s]}return e=n(e),t=n(t),{inputs:r,initialState:e,constants:t}}function O1(r,e,t,o=!1,n,s,i=!1,a=!1){return M(()=>{let l=e.shape.length;if(l<3)throw new z(`Input should be at least 3D, but is ${l}D.`);let u=[1,0].concat(qr(2,l));if(e=Pe(e,u),s!=null)throw new Ie("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),n!=null&&(n=j(j(n,"bool"),"float32"),n.rank===l-1&&(n=cr(n,-1)),n=Pe(n,u)),o&&(e=mr(e,0),n!=null&&(n=mr(n,0)));let c=[],p,m=t,f=e.shape[0],d=wr(e),h;n!=null&&(h=wr(n));for(let x=0;x<f;++x){let b=d[x],C=M(()=>r(b,m));if(n==null)p=C[0],m=C[1];else{let S=M(()=>{let I=h[x],N=ne(gr(I),I),$=q(P(C[0],I),P(m[0],N)),R=m.map((F,_)=>q(P(C[1][_],I),P(F,N)));return{output:$,newStates:R}});p=S.output,m=S.newStates}a&&c.push(p)}let g;return a&&(g=tr(c,1)),[p,g,m]})}var Vn=class extends Le{constructor(e){super(e);let t;if(e.cell==null)throw new z("cell property is missing for the constructor of RNN.");if(Array.isArray(e.cell)?t=new nf({cells:e.cell}):t=e.cell,t.stateSize==null)throw new z("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=e.returnSequences==null?!1:e.returnSequences,this.returnState=e.returnState==null?!1:e.returnState,this.goBackwards=e.goBackwards==null?!1:e.goBackwards,this._stateful=e.stateful==null?!1:e.stateful,this.unroll=e.unroll==null?!1:e.unroll,this.supportsMasking=!0,this.inputSpec=[new ft({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return qr(0,e).map(t=>null)}else return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Vy(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);let o=t[0],n;if(this.returnSequences?n=[e[0],e[1],o]:n=[e[0],o],this.returnState){let s=[];for(let i of t)s.push([e[0],i]);return[n].concat(s)}else return n}computeMask(e,t){return M(()=>{Array.isArray(t)&&(t=t[0]);let o=this.returnSequences?t:null;if(this.returnState){let n=this.states.map(s=>null);return[o].concat(n)}else return o})}get states(){if(this.states_==null){let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let o=0;o<e;++o)t.push(null);return t}else return this.states_}set states(e){this.states_=e}build(e){if(this.numConstants!=null)throw new Ie("Constants support is not implemented in RNN yet.");Vy(e)&&(e=e[0]),e=e;let o=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new ft({shape:[o,null,...n]});let s=[e[0]].concat(e.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!y.arraysEqual(this.stateSpec.map(a=>a.shape[a.shape.length-1]),i))throw new z(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(a=>new ft({shape:[null,a]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){M(()=>{if(!this.stateful)throw new Bo("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape[0];if(o==null)throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>it([o,n])):this.states_=[it([o,this.cell.stateSize])];else if(e==null)ke(this.states_),this.keptStates!=null&&(ke(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>it([o,n])):this.states_[0]=it([o,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t===!0?this.keptStates.push(this.states_.slice()):ke(this.states_);for(let n=0;n<this.states_.length;++n){let s=e[n],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,a=[o,i];if(!y.arraysEqual(s.shape,a))throw new z(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map(n=>Nt(n.clone()))})}apply(e,t){let o=t==null?null:t.initialState,n=t==null?null:t.constants;t==null&&(t={});let s=_1(e,o,n,this.numConstants);e=s.inputs,o=s.initialState,n=s.constants;let i=[],a=[];if(o!=null){t.initialState=o,i=i.concat(o),this.stateSpec=[];for(let u of o)this.stateSpec.push(new ft({shape:u.shape}));a=a.concat(this.stateSpec)}if(n!=null&&(t.constants=n,i=i.concat(n),this.numConstants=n.length),i[0]instanceof jr){let u=[e].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,t);return this.inputSpec=p,m}else return super.apply(e,t)}call(e,t){return M(()=>{let o=t==null?null:t.mask,n=t==null?null:t.training,s=t==null?null:t.initialState;e=De(e),s==null&&(this.stateful?s=this.states_:s=this.getInitialState(e));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new z(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let a={training:n},u=O1((d,h)=>{let g=this.cell.call([d].concat(h),a);return[g[0],g.slice(1)]},e,s,this.goBackwards,o,null,this.unroll,this.returnSequences),c=u[0],p=u[1],m=u[2];this.stateful&&this.resetStates(m,n);let f=this.returnSequences?p:c;return this.returnState?[f].concat(m):f})}getInitialState(e){return M(()=>{let t=it(e.shape);return t=ue(t,[1,2]),t=wl(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>o>1?zy(t,[1,o]):t):this.cell.stateSize>1?[zy(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){let e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(t.numConstants=this.numConstants);let o=this.cell.getConfig();return this.getClassName()===Vn.className&&(t.cell={className:this.cell.getClassName(),config:o}),Object.assign({},o,e,t)}static fromConfig(e,t,o={}){let n=t.cell,s=Jo(n,o);return new e(Object.assign(t,{cell:s}))}};Vn.className="RNN";Y.registerClass(Vn);var Ju=class extends Le{},rf=class extends Ju{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Xt(this.units,"units"),this.activation=Wi(e.activation==null?this.DEFAULT_ACTIVATION:e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=ct(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ct(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ct(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=dt(e.kernelRegularizer),this.recurrentRegularizer=dt(e.recurrentRegularizer),this.biasRegularizer=dt(e.biasRegularizer),this.kernelConstraint=Ot(e.kernelConstraint),this.recurrentConstraint=Ot(e.recurrentConstraint),this.biasConstraint=Ot(e.biasConstraint),this.dropout=qc([1,Gi([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=qc([1,Gi([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=qe(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return M(()=>{if(e=e,e.length!==2)throw new z(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let o=e[1];e=e[0];let n=t.training==null?!1:t.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Tl({ones:()=>gr(e),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Tl({ones:()=>gr(o),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));let s,i=this.dropoutMask,a=this.recurrentDropoutMask;i!=null?s=Ws(P(e,i),this.kernel.read()):s=Ws(e,this.kernel.read()),this.bias!=null&&(s=io(s,this.bias.read())),a!=null&&(o=P(o,a));let l=q(s,Ws(o,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:Ui(this.activation),useBias:this.useBias,kernelInitializer:wt(this.kernelInitializer),recurrentInitializer:wt(this.recurrentInitializer),biasInitializer:wt(this.biasInitializer),kernelRegularizer:at(this.kernelRegularizer),recurrentRegularizer:at(this.recurrentRegularizer),biasRegularizer:at(this.biasRegularizer),activityRegularizer:at(this.activityRegularizer),kernelConstraint:_t(this.kernelConstraint),recurrentConstraint:_t(this.recurrentConstraint),biasConstraint:_t(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}};rf.className="SimpleRNNCell";Y.registerClass(rf);var yh=class extends Vn{constructor(e){e.cell=new rf(e),super(e)}call(e,t){return M(()=>{this.cell.dropoutMask!=null&&(ke(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(ke(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=t==null?null:t.mask,n=t==null?null:t.training,s=t==null?null:t.initialState;return super.call(e,{mask:o,training:n,initialState:s})})}static fromConfig(e,t){return new e(t)}};yh.className="SimpleRNN";Y.registerClass(yh);var of=class extends Ju{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new z("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Xt(this.units,"units"),this.activation=Wi(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Wi(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=ct(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ct(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ct(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=dt(e.kernelRegularizer),this.recurrentRegularizer=dt(e.recurrentRegularizer),this.biasRegularizer=dt(e.biasRegularizer),this.kernelConstraint=Ot(e.kernelConstraint),this.recurrentConstraint=Ot(e.recurrentConstraint),this.biasConstraint=Ot(e.biasConstraint),this.dropout=qc([1,Gi([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=qc([1,Gi([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=qe(e);let t=e[e.length-1];this.kernel=this.addWeight("kernel",[t,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return M(()=>{if(e=e,e.length!==2)throw new z(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);let o=t.training==null?!1:t.training,n=e[1];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Tl({ones:()=>gr(e),rate:this.dropout,training:o,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Tl({ones:()=>gr(n),rate:this.recurrentDropout,training:o,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask,a,l,u;0<this.dropout&&this.dropout<1&&(e=P(e,s[0]));let c=Ws(e,this.kernel.read());this.useBias&&(c=io(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=P(n,i[0]));let p=this.recurrentKernel.read(),[m,f]=fr(p,[2*this.units,this.units],p.rank-1),d=Ws(n,m),[h,g,x]=fr(c,3,c.rank-1),[b,C]=fr(d,2,d.rank-1);a=this.recurrentActivation.apply(q(h,b)),l=this.recurrentActivation.apply(q(g,C));let S=Ws(P(l,n),f);u=this.activation.apply(q(x,S));let I=q(P(a,n),P(q(1,We(a)),u));return[I,I]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:Ui(this.activation),recurrentActivation:Ui(this.recurrentActivation),useBias:this.useBias,kernelInitializer:wt(this.kernelInitializer),recurrentInitializer:wt(this.recurrentInitializer),biasInitializer:wt(this.biasInitializer),kernelRegularizer:at(this.kernelRegularizer),recurrentRegularizer:at(this.recurrentRegularizer),biasRegularizer:at(this.biasRegularizer),activityRegularizer:at(this.activityRegularizer),kernelConstraint:_t(this.kernelConstraint),recurrentConstraint:_t(this.recurrentConstraint),biasConstraint:_t(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}};of.className="GRUCell";Y.registerClass(of);var bh=class extends Vn{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new of(e),super(e)}call(e,t){return M(()=>{this.cell.dropoutMask!=null&&(ke(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(ke(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=t==null?null:t.mask,n=t==null?null:t.training,s=t==null?null:t.initialState;return super.call(e,{mask:o,training:n,initialState:s})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}};bh.className="GRU";Y.registerClass(bh);var ec=class extends Ju{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Xt(this.units,"units"),this.activation=Wi(e.activation===void 0?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Wi(e.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=e.useBias==null?!0:e.useBias,this.kernelInitializer=ct(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ct(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ct(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=dt(e.kernelRegularizer),this.recurrentRegularizer=dt(e.recurrentRegularizer),this.biasRegularizer=dt(e.biasRegularizer),this.kernelConstraint=Ot(e.kernelConstraint),this.recurrentConstraint=Ot(e.recurrentConstraint),this.biasConstraint=Ot(e.biasConstraint),this.dropout=qc([1,Gi([0,e.dropout==null?0:e.dropout])]),this.recurrentDropout=qc([1,Gi([0,e.recurrentDropout==null?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;e=qe(e);let o=e[e.length-1];this.kernel=this.addWeight("kernel",[o,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let n;if(this.useBias){if(this.unitForgetBias){let s=this.biasInitializer,i=this.units;n=new(t=class extends lo{apply(l,u){let c=s.apply([i]),p=new Yc().apply([i]),m=s.apply([i*2]);return C1(C1(c,p),m)}},t.className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return M(()=>{let o=t.training==null?!1:t.training;if(e=e,e.length!==3)throw new z(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let n=e[1],s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Tl({ones:()=>gr(e),rate:this.dropout,training:o,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Tl({ones:()=>gr(n),rate:this.recurrentDropout,training:o,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,a=this.recurrentDropoutMask,l,u,c,p;0<this.dropout&&this.dropout<1&&(e=P(e,i[0]));let m=Ws(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=P(n,a[0])),m=q(m,Ws(n,this.recurrentKernel.read())),this.useBias&&(m=io(m,this.bias.read()));let[f,d,h,g]=fr(m,4,m.rank-1);l=this.recurrentActivation.apply(f),u=this.recurrentActivation.apply(d),c=q(P(u,s),P(l,this.activation.apply(h))),p=this.recurrentActivation.apply(g);let x=P(p,this.activation.apply(c));return[x,x,c]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:Ui(this.activation),recurrentActivation:Ui(this.recurrentActivation),useBias:this.useBias,kernelInitializer:wt(this.kernelInitializer),recurrentInitializer:wt(this.recurrentInitializer),biasInitializer:wt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:at(this.kernelRegularizer),recurrentRegularizer:at(this.recurrentRegularizer),biasRegularizer:at(this.biasRegularizer),activityRegularizer:at(this.activityRegularizer),kernelConstraint:_t(this.kernelConstraint),recurrentConstraint:_t(this.recurrentConstraint),biasConstraint:_t(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}};ec.className="LSTMCell";Y.registerClass(ec);var Ch=class extends Vn{constructor(e){e.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ec(e),super(e)}call(e,t){return M(()=>{this.cell.dropoutMask!=null&&(ke(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(ke(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=t==null?null:t.mask,n=t==null?null:t.training,s=t==null?null:t.initialState;return super.call(e,{mask:o,training:n,initialState:s})})}static fromConfig(e,t){return t.implmentation===0&&(t.implementation=1),new e(t)}};Ch.className="LSTM";Y.registerClass(Ch);var nf=class extends Ju{constructor(e){super(e),this.cells=e.cells}get stateSize(){let e=[];for(let t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return M(()=>{e=e;let o=e.slice(1),n=[];for(let a of this.cells.slice().reverse())Array.isArray(a.stateSize)?n.push(o.splice(0,a.stateSize.length)):n.push(o.splice(0,1));n.reverse();let s=[],i;for(let a=0;a<this.cells.length;++a){let l=this.cells[a];o=n[a],a===0?i=[e[0]].concat(o):i=[i[0]].concat(o),i=l.call(i,t),s.push(i.slice(1))}o=[];for(let a of s.slice().reverse())o.push(...a);return[i[0]].concat(o)})}build(e){Vy(e)&&(e=e[0]),e=e;let t;this.cells.forEach((o,n)=>{Vi(`RNNCell_${n}`,()=>{o.build(e),Array.isArray(o.stateSize)?t=o.stateSize[0]:t=o.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){let e=super.getConfig(),t=s=>({className:s.getClassName(),config:s.getConfig()}),n={cells:this.cells.map(t)};return Object.assign({},e,n)}static fromConfig(e,t,o={}){let n=[];for(let s of t.cells)n.push(Jo(s,o));return new e({cells:n})}get trainableWeights(){if(!this.trainable)return[];let e=[];for(let t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let o of this.cells)t.push(...o.trainableWeights);return t.concat(e)}return e}getWeights(){let e=[];for(let t of this.cells)e.push(...t.weights);return qd(e)}setWeights(e){let t=[];for(let o of this.cells){let n=o.weights.length,s=e.splice(n);for(let i=0;i<o.weights.length;++i)t.push([o.weights[i],s[i]])}Ym(t)}};nf.className="StackedRNNCells";Y.registerClass(nf);function Tl(r){let{ones:e,rate:t,training:o=!1,count:n=1,dropoutFunc:s}=r,i=()=>s!=null?s(e(),t):My(e(),t),a=()=>qu(i,e,o);return!n||n<=1?Nt(a().clone()):Array(n).fill(void 0).map(a).map(u=>Nt(u.clone()))}var v9=function(r,e){var t={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&e.indexOf(o)<0&&(t[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var n=0,o=Object.getOwnPropertySymbols(r);n<o.length;n++)e.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(r,o[n])&&(t[o[n]]=r[o[n]]);return t};var Tb=class extends Vn{constructor(e){if(e.unroll)throw new Ie("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Ie("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new ft({ndim:5})]}call(e,t){return M(()=>{if(this.cell.dropoutMask!=null&&(ke(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(ke(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new z("ConvRNN2D cell does not support constants");let o=t==null?null:t.mask,n=t==null?null:t.training,s=t==null?null:t.initialState;return super.call(e,{mask:o,training:n,initialState:s})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return M(()=>{let{stateSize:t}=this.cell,o=e.shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)],i=it(s);return Array.isArray(t)?Array(t.length).fill(i):[i]})}resetStates(e,t=!1){M(()=>{if(!this.stateful)throw new Bo("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)];if(o[0]==null)throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>it(s)):this.states_=[it(s)];else if(e==null)ke(this.states_),this.keptStates!=null&&(ke(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>it(s)):this.states_[0]=it(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):ke(this.states_);for(let a=0;a<this.states_.length;++a){let l=e[a],u=s;if(!y.arraysEqual(l.shape,u))throw new z(`State ${a} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>Nt(a.clone()))})}computeSingleOutputShape(e){let{dataFormat:t,filters:o,kernelSize:n,padding:s,strides:i,dilationRate:a}=this.cell,l=t==="channelsFirst",u=e[l?3:2],c=e[l?4:3],p=Vo(u,n[0],s,i[0],a[0]),m=Vo(c,n[1],s,i[1],a[1]);return[...e.slice(0,2),...l?[o,p,m]:[p,m,o]]}};Tb.className="ConvRNN2D";var sf=class extends ec{constructor(e){let{filters:t,kernelSize:o,strides:n,padding:s,dataFormat:i,dilationRate:a}=e;super(Object.assign({},e,{units:t})),this.filters=t,Xt(this.filters,"filters"),this.kernelSize=ju(o,2,"kernelSize"),this.kernelSize.forEach(l=>Xt(l,"kernelSize")),this.strides=ju(n||1,2,"strides"),this.strides.forEach(l=>Xt(l,"strides")),this.padding=s||"valid",no(this.padding),this.dataFormat=i||"channelsLast",$t(this.dataFormat),this.dilationRate=ju(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>Xt(l,"dilationRate"))}build(e){var t;e=qe(e);let o=this.dataFormat==="channelsFirst"?1:e.length-1;if(e[o]==null)throw new z(`The channel dimension of the input should be defined. Found ${e[o]}`);let n=e[o],s=4,i=this.kernelSize.concat([n,this.filters*s]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let a=this.kernelSize.concat([this.filters,this.filters*s]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){let u=this.biasInitializer,c=this.filters;l=new(t=class extends lo{apply(m,f){let d=u.apply([c]),h=pr([c]),g=u.apply([c*2]);return Mm([d,h,g])}},t.className="CustomInit",t)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*s],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return M(()=>{if(e.length!==3)throw new z(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=t.training||!1,n=e[0],s=e[1],i=e[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=Tl({ones:()=>gr(n),rate:this.dropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=(J,ee,le)=>!ee||!ee[le]?J:P(ee[le],J),c=u(n,l,0),p=u(n,l,1),m=u(n,l,2),f=u(n,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=Tl({ones:()=>gr(s),rate:this.recurrentDropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let d=this.recurrentDropoutMask,h=u(s,d,0),g=u(s,d,1),x=u(s,d,2),b=u(s,d,3),C=3,[S,I,N,$]=fr(this.kernel.read(),a,C),[R,F,_,B]=this.useBias?fr(this.bias.read(),a):[null,null,null,null];c=this.inputConv(c,S,R,this.padding),p=this.inputConv(p,I,F,this.padding),m=this.inputConv(m,N,_,this.padding),f=this.inputConv(f,$,B,this.padding);let[V,G,W,U]=fr(this.recurrentKernel.read(),a,C);h=this.recurrentConv(h,V),g=this.recurrentConv(g,G),x=this.recurrentConv(x,W),b=this.recurrentConv(b,U);let K=this.recurrentActivation.apply(q(c,h)),X=this.recurrentActivation.apply(q(p,g)),H=q(P(X,i),P(K,this.activation.apply(q(m,x)))),Z=P(this.recurrentActivation.apply(q(f,b)),this.activation.apply(H));return[Z,Z,H]})}getConfig(){let e=super.getConfig(),{units:t}=e,o=v9(e,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},o,n)}inputConv(e,t,o,n){let s=Po(e,t,this.strides,n||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return o?io(s,o,this.dataFormat):s}recurrentConv(e,t){return Po(e,t,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}};sf.className="ConvLSTM2DCell";Y.registerClass(sf);var wh=class extends Tb{constructor(e){let t=new sf(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}};wh.className="ConvLSTM2D";Y.registerClass(wh);var af=class extends Le{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(this.noiseShape==null)return this.noiseShape;let t=e.shape,o=[];for(let n=0;n<this.noiseShape.length;++n)o.push(this.noiseShape[n]==null?t[n]:this.noiseShape[n]);return o}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e);if(0<this.rate&&this.rate<1){let n=t.training==null?!1:t.training,s=this.getNoiseShape(o);return qu(()=>My(o,this.rate,s,this.seed),()=>o,n)}return e})}getConfig(){let e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}};af.className="Dropout";Y.registerClass(af);var Sh=class extends af{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){let t=e.shape;return[t[0],1,t[2]]}};Sh.className="SpatialDropout1D";Y.registerClass(Sh);var Ih=class extends Le{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.batchInputShape==null&&e.inputShape==null&&e.inputDim!=null){let t=null;e.batchSize!=null&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Xt(this.units,"units"),this.activation=Wi(e.activation),e.useBias!=null&&(this.useBias=e.useBias),this.kernelInitializer=ct(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=ct(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ot(e.kernelConstraint),this.biasConstraint=Ot(e.biasConstraint),this.kernelRegularizer=dt(e.kernelRegularizer),this.biasRegularizer=dt(e.biasRegularizer),this.activityRegularizer=dt(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){e=qe(e);let t=e[e.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){e=qe(e);let t=e.slice();return t[t.length-1]=this.units,t}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e),n=Dy(this.activation.getClassName()),s;return n!=null?s=Ws(o,this.kernel.read(),n,this.bias?this.bias.read():null):(s=Ws(o,this.kernel.read()),this.bias!=null&&(s=io(s,this.bias.read())),this.activation!=null&&(s=this.activation.apply(s))),s})}getConfig(){let e={units:this.units,activation:Ui(this.activation),useBias:this.useBias,kernelInitializer:wt(this.kernelInitializer),biasInitializer:wt(this.biasInitializer),kernelRegularizer:at(this.kernelRegularizer),biasRegularizer:at(this.biasRegularizer),activityRegularizer:at(this.activityRegularizer),kernelConstraint:_t(this.kernelConstraint),biasConstraint:_t(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}};Ih.className="Dense";Y.registerClass(Ih);var vh=class extends Le{constructor(e){e=e||{},super(e),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=qe(e);for(let t of e.slice(1))if(t==null)throw new z(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Us(e,1)]}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e);if(this.dataFormat==="channelsFirst"&&o.rank>1){let n=[0];for(let s=2;s<o.rank;++s)n.push(s);n.push(1),o=Pe(o,n)}return ND(o)})}getConfig(){let e={};this.dataFormat!=null&&(e.dataFormat=this.dataFormat);let t=super.getConfig();return Object.assign(e,t),e}};vh.className="Flatten";Y.registerClass(vh);var Th=class extends Le{constructor(e){super(e),this.supportsMasking=!0,this.activation=Wi(e.activation)}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e);return this.activation.apply(o)})}getConfig(){let e={activation:Ui(this.activation)},t=super.getConfig();return Object.assign(e,t),e}};Th.className="Activation";Y.registerClass(Th);var kh=class extends Le{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return M(()=>(e=De(e),TD(e,this.n)))}getConfig(){let e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}};kh.className="RepeatVector";Y.registerClass(kh);var Nh=class extends Le{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||e==null}fixUnknownDimension(e,t){let o="Total size of new array must be unchanged.",n=t.slice(),s=1,i=null;for(let l=0;l<n.length;++l){let u=n[l];if(this.isUnknown(u))if(i===null)i=l;else throw new z("Can only specifiy one unknown dimension.");else s*=u}let a=Us(e);if(i!==null){if(s===0||a%s!==0)throw new z(o);n[i]=a/s}else if(a!==s)throw new z(o);return n}computeOutputShape(e){let t=!1;for(let o=0;o<e.length;++o)if(this.isUnknown(e[o])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e),n=o.shape,s=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return O(o,s)})}getConfig(){let e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}};Nh.className="Reshape";Y.registerClass(Nh);var $h=class extends Le{constructor(e){if(super(e),e.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);let t=qr(1,e.dims.length+1);if(!y.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ft({ndim:this.dims.length+1})]}computeOutputShape(e){e=qe(e);let t=e.slice();return this.dims.forEach((o,n)=>{t[n+1]=e[o]}),t}call(e,t){return Pe(De(e),this.dimsIncludingBatch)}getConfig(){let e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}};$h.className="Permute";Y.registerClass($h);var Eh=class extends Le{constructor(e){super(e??{}),this.supportsMasking=!0,e!=null?this.maskValue=e.maskValue==null?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){let o=De(e),n=-1;return Rc(Bi(o,this.maskValue),n)}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e),n=-1,s=!0,i=Rc(Bi(o,this.maskValue),n,s);return P(o,j(i,o.dtype))})}};Eh.className="Masking";Y.registerClass(Eh);var Rh=class extends Le{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",e.batchInputShape==null&&e.inputShape==null){let t=null;e.batchSize!=null&&(t=e.batchSize),e.inputLength==null?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(mt(e.inputLength))}this.inputDim=e.inputDim,Xt(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Xt(this.outputDim,"outputDim"),this.embeddingsInitializer=ct(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=dt(e.embeddingsRegularizer),this.activityRegularizer=dt(e.activityRegularizer),this.embeddingsConstraint=Ot(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return M(()=>this.maskZero?(e=De(e),Bi(e,Se(e))):null)}computeOutputShape(e){if(e=qe(e),this.inputLength==null)return[...e,this.outputDim];let t=mt(this.inputLength);if(t.length!==e.length-1)throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let o=0;for(let n=0;n<t.length;++n){let s=t[n],i=e[n+1];if(s!=null&&i!=null&&s!==i)throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);s==null&&(t[o]=i),o++}}return[e[0],...t,this.outputDim]}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e);o.dtype!=="int32"&&(o=Xc(o,"int32"));let n=By(this.embeddings.read(),O(o,[o.size]));return O(n,qe(this.computeOutputShape(o.shape)))})}getConfig(){let e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:wt(this.embeddingsInitializer),embeddingsRegularizer:at(this.embeddingsRegularizer),activityRegularizer:at(this.activityRegularizer),embeddingsConstraint:_t(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}};Rh.className="Embedding";Y.registerClass(Rh);var kl=class extends Le{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Ie}computeElementwiseOpOutputShape(e,t){if(e==null||t==null)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(t.length===0)return e;let o=e.slice(0,e.length-t.length);for(let n=0;n<t.length;++n){let s=e[e.length-t.length+n],i=t[n];if(s==null||i==null||s<0||i<0)o.push(null);else if(s===1)o.push(i);else if(i===1)o.push(s);else{if(s!==i)throw new z("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));o.push(s)}}return o}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[qe(e)]),e=e,e.length<2)throw new z(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(let s of e)s!=null&&s[0]!==null&&t.push(s[0]);if(t=Gs(t),t.length>1)throw new z(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let o=e[0]==null?null:e[0].slice(1);for(let s=1;s<e.length;++s){let i=e[s]==null?null:e[s].slice(1);o=this.computeElementwiseOpOutputShape(o,i)}let n=e.map(s=>s.length);e.indexOf(null)===-1&&Gs(n).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return M(()=>{if(e=e,this.reshapeRequired){let o=[],n=e.map(s=>s.rank);if(n.indexOf(null)===-1){let s=Gi(n);for(let i of e){let a=i.rank;for(let l=0;l<s-a;++l)i=wl(i,1);o.push(i)}return this.mergeFunction(o)}else{let s=!1;for(let l of e){let u=l.rank;if(u==null){let c=l.shape,p=c[0],m=c.slice(1).concat([p]),f=O(l,[p].concat(Us(c.slice(1))));f=Pe(f,[1,0]),f=O(f,m),o.push(f),s=!0}else if(u>1){let c=qr(1,u).concat([0]);o.push(Pe(l,c)),s=!0}else o.push(l)}let i=this.mergeFunction(o),a=i.rank;if(s){if(a==null){let l=i.shape,u=l.length,c=l[u-1],p=[c].concat(l.slice(0,l.length-1));i=O(Pe(O(i,[-1,c]),[1,0]),p)}else if(a>1){let l=[a-1].concat(qr(0,a-1));i=Pe(i,l)}}return i}}else return this.mergeFunction(e)})}computeOutputShape(e){e=e;let t;e[0]==null?t=null:t=e[0].slice(1);for(let n=1;n<e.length;++n){let s=e[n]==null?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let o=[];for(let n of e)n!=null&&n[0]!==null&&o.push(n[0]);return o=Gs(o),o.length===1?t=o.concat(t):t=[null].concat(t),t}computeMask(e,t){return M(()=>{if(t==null)return null;if(!Array.isArray(t))throw new z("`mask` should be an Array");if(!Array.isArray(e))throw new z("`inputs` should be an Array");if(t.length!==e.length)throw new z(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(n=>n==null))return null;t=t.map(n=>n==null?n:cr(n,0));let o=t[0];for(let n=1;n<t.length-1;++n)o=Lr(o,t[n]);return o})}},Dh=class extends kl{constructor(e){super(e)}mergeFunction(e){return M(()=>{let t=e[0].clone();for(let o=1;o<e.length;++o)t=q(t,e[o]);return t})}};Dh.className="Add";Y.registerClass(Dh);var Fh=class extends kl{constructor(e){super(e)}mergeFunction(e){return M(()=>{let t=e[0].clone();for(let o=1;o<e.length;++o)t=P(t,e[o]);return t})}};Fh.className="Multiply";Y.registerClass(Fh);var _h=class extends kl{constructor(e){super(e)}mergeFunction(e){return M(()=>{let t=e[0].clone();for(let o=1;o<e.length;++o)t=q(t,e[o]);return P(1/e.length,t)})}};_h.className="Average";Y.registerClass(_h);var Oh=class extends kl{constructor(e){super(e)}mergeFunction(e){return M(()=>{let t=e[0];for(let o=1;o<e.length;++o)t=zo(t,e[o]);return t})}};Oh.className="Maximum";Y.registerClass(Oh);var Ph=class extends kl{constructor(e){super(e)}mergeFunction(e){return M(()=>{let t=e[0];for(let o=1;o<e.length;++o)t=Ha(t,e[o]);return t})}};Ph.className="Minimum";Y.registerClass(Ph);var Lh=class extends kl{constructor(e){super(e),this.DEFAULT_AXIS=-1,e==null&&(e={}),this.axis=e.axis==null?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!(Array.isArray(e)&&Array.isArray(e[0]))||e.length===1)throw new z("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(let n of e)if(n!=null){t=!1;break}if(t)return;let o=[];for(let n=0;n<e.length;++n){let s=e[n].slice();s.splice(this.axis,1);let i=!1;for(let a of o)if(y.arraysEqual(a,s)){i=!0;break}i||o.push(s)}if(o.length>1)throw new z("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return M(()=>Mm(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new z("A `Concatenate` layer should be called on a list of inputs.");let t=e,o=t[0].slice(),n=this.axis<0?o.length+this.axis:this.axis;for(let s of t.slice(1)){if(o[n]==null||s[n]==null){o[n]=null;break}o[n]+=s[n]}return o}computeMask(e,t){if(t==null)return null;if(!Array.isArray(t))throw new z("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new z("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new z(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return M(()=>{let o=!0;if(t.forEach(i=>{if(i!=null){o=!1;return}}),o)return null;let n=[];for(let i=0;i<e.length;++i)t[i]==null?n.push(j(gr(e[i]),"bool")):t[i].rank<e[i].rank?n.push(cr(t[i],-1)):n.push(t[i]);let s=et(n,this.axis);return im(s,-1,!1)})}getConfig(){let e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}};Lh.className="Concatenate";Y.registerClass(Lh);function Ah(r,e){for(;r<0;)r+=e;return r}function T9(r,e,t){if(r.shape.length>3||e.shape.length>3)throw new Ie("batchDot is not implemented for tensors of 4D or higher rank yet");if(y.assert(r.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`),y.assert(r.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`),typeof t=="number"&&(t=[t,t]),r.dtype==="complex64"||e.dtype==="complex64")throw new Ie("batchDot is not implemented for complex64-type Tensors yet.");let o=r.shape.length,n=e.shape.length;t==null&&(t=[o-1,n-2]);let s=t;return M(()=>{let i;if(o>n){i=o-n;let l=[];for(let u=0;u<i;++u)l.push(1);e=O(e,e.shape.concat(l))}else if(n>o){i=n-o;let l=[];for(let u=0;u<i;++u)l.push(1);r=O(r,r.shape.concat(l))}else i=0;let a;if(r.shape.length===2&&e.shape.length===2)s[0]===s[1]?a=ue(P(r,e),s[0]):a=ue(P(Pe(r,[1,0]),e),s[1]);else{let l=s[0]!==r.shape.length-1,u=s[1]===e.shape.length-1;a=Ge(r,e,l,u)}if(i>0){let l;o>n?l=o+n-3:l=o-1;let u=[];for(let c=l;c<l+i;++c)u.push(c);a=Zo(a,u)}return a.shape.length===1&&(a=cr(a,1)),a})}var zh=class extends kl{constructor(e){super(e),this.axes=e.axes,this.normalize=e.normalize==null?!1:e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){y.assert(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0],o=e[1];if(t.length>3||o.length>3)throw new Ie("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(t,o);if(t[n[0]]!==o[n[1]])throw new z(`Dimension incompatibility: ${t[n[0]]} !== ${o[n[1]]}`)}mergeFunction(e){if(e.length!==2)throw new z(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t=e[0],o=e[1],n;return Array.isArray(this.axes)?n=this.axes.map((s,i)=>Ah(s,e[i].shape.length)):n=[Ah(this.axes,t.shape.length),Ah(this.axes,o.shape.length)],this.normalize&&(t=Zd(t,n[0]),o=Zd(o,n[1])),T9(t,o,n)}interpretAxes(e,t){let o;return Array.isArray(this.axes)?o=this.axes:o=[Ah(this.axes,e.length),Ah(this.axes,t.length)],o}computeOutputShape(e){y.assert(Array.isArray(e)&&e.length===2&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0].slice(),o=e[1].slice();if(t.length>3||o.length>3)throw new Ie("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(t,o);t.splice(n[0],1),o.splice(n[1],1),o.splice(0,1);let s=t.concat(o);return s.length===1&&s.push(1),s}computeMask(e,t){return null}getConfig(){let e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}};zh.className="Dot";Y.registerClass(zh);var Bh=class extends Le{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e);return qu(()=>q(Vm(o.shape,0,this.stddev),o),()=>o,t.training||!1)})}};Bh.className="GaussianNoise";Y.registerClass(Bh);var Mh=class extends Le{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return M(()=>{this.invokeCallHook(e,t);let o=De(e);return this.rate>0&&this.rate<1?qu(()=>{let s=Math.sqrt(this.rate/(1-this.rate));return P(o,Vm(o.shape,1,s))},()=>o,t.training||!1):o})}};Mh.className="GaussianDropout";Y.registerClass(Mh);var Vh=class extends Le{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||De(e).shape}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return M(()=>{if(this.rate<1&&this.rate>0){let o=this._getNoiseShape(e);return qu(()=>{let s=De(e),i=1.6732632423543772,a=1.0507009873554805,l=-i*a,u=Yo(Ka(o),this.rate);u=Xc(u,"float32");let c=((1-this.rate)*(1+this.rate*l**2))**-.5,p=-c*l*this.rate,m=q(P(s,u),P(q(u,-1),l));return q(P(m,c),p)},()=>De(e),t.training||!1)}return e})}};Vh.className="AlphaDropout";Y.registerClass(Vh);function Gh(r,e,t,o,n,s=.001){let i;if(r.rank===2)i=Ex(r,e,t,o,n,s);else if(r.rank===3)i=Rx(r,e,t,o,n,s);else if(r.rank===4)i=Ax(r,e,t,o,n,s);else throw new Ie(`batchNormalization is not implemented for array of rank ${r.rank} yet`);return i}function k9(r,e,t,o,n=.001){return M(()=>{let s=Pc(r,o),i=s.mean,a=s.variance;return[Gh(r,i,a,t,e,n),i,a]})}function N9(r,e,t,o,n=.001){return M(()=>{let s=Pc(r,o),i=s.mean,a=s.variance,l=[];for(let d of qr(0,r.rank))o.indexOf(d)!==-1?l.push(1):l.push(r.shape[d]);let u=O(i,l),c=O(a,l),p=e==null?null:O(e,l),m=t==null?null:O(t,l);return[Gh(r,u,c,m,p,n),i,a]})}function $9(r,e,t,o,n=.001){return y.arraysEqual(o.slice().sort(),qr(0,r.rank-1))?k9(r,e,t,o,n):N9(r,e,t,o,n)}var Uh=class extends Le{constructor(e){e==null&&(e={}),super(e),this.supportsMasking=!0,this.axis=e.axis==null?-1:e.axis,this.momentum=e.momentum==null?.99:e.momentum,this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null?!0:e.center,this.scale=e.scale==null?!0:e.scale,this.betaInitializer=ct(e.betaInitializer||"zeros"),this.gammaInitializer=ct(e.gammaInitializer||"ones"),this.movingMeanInitializer=ct(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=ct(e.movingVarianceInitializer||"ones"),this.betaConstraint=Ot(e.betaConstraint),this.gammaConstraint=Ot(e.gammaConstraint),this.betaRegularizer=dt(e.betaRegularizer),this.gammaRegularizer=dt(e.gammaRegularizer)}build(e){e=qe(e);let t=this.axis>=0?this.axis:this.axis+e.length,o=e[t];if(o==null)throw new z(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new ft({ndim:e.length,axes:{[t]:o}})];let n=[o];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return M(()=>{let o=t.training==null?!1:t.training,n=De(e),s=n.shape,i=s.length,a=qr(0,i),l=this.axis>=0?this.axis:this.axis+i;a.splice(l,1);let u=Ms(1,i);u[l]=s[l];let c=a.slice();c.sort();let p=!y.arraysEqual(c,qr(0,i).slice(0,i-1)),m=()=>{if(p){let b=O(this.movingMean.read(),u),C=O(this.movingVariance.read(),u),S=this.center?O(this.beta.read(),u):null,I=this.scale?O(this.gamma.read(),u):null;return Gh(n,b,C,S,I,this.epsilon)}else return Gh(n,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!o)return m();let[f,d,h]=$9(n,this.gamma.read(),this.beta.read(),a,this.epsilon),g=(b,C,S)=>{M(()=>{let I=1-S,N=b.read(),$=P(ne(N,C),I);b.write(ne(N,$))})};return(()=>{g(this.movingMean,d,this.momentum),g(this.movingVariance,h,this.momentum)})(),f})}getConfig(){let e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:wt(this.betaInitializer),gammaInitializer:wt(this.gammaInitializer),movingMeanInitializer:wt(this.movingMeanInitializer),movingVarianceInitializer:wt(this.movingVarianceInitializer),betaRegularizer:at(this.betaRegularizer),gammaRegularizer:at(this.gammaRegularizer),betaConstraint:_t(this.betaConstraint),gammaConstraint:_t(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}};Uh.className="BatchNormalization";Y.registerClass(Uh);var Wh=class extends Le{constructor(e){if(e==null&&(e={}),super(e),this.axis=e.axis==null?-1:e.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=e.epsilon==null?.001:e.epsilon,this.center=e.center==null?!0:e.center,this.scale=e.scale==null?!0:e.scale,this.betaInitializer=ct(e.betaInitializer||"zeros"),this.gammaInitializer=ct(e.gammaInitializer||"ones"),this.betaRegularizer=dt(e.betaRegularizer),this.gammaRegularizer=dt(e.gammaRegularizer),this.supportsMasking=!0}build(e){e=qe(e);let t=e.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=t);for(let s of this.axis)if(s<0||s>=t)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==Gs(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);let o=this.axis.map(s=>e[s]),n=!0;this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,n):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,n):this.beta=null,this.built=!0}call(e,t){let o=De(e),n=o.shape,s=n.length;return M(()=>{let{mean:a,variance:l}=Pc(o,this.axis,!0),u=Ms(1,s);for(let h of this.axis)u[h]=n[h];let c=h=>h!=null&&h.shape.length!==s?O(h,u):h,p=this.scale?c(this.gamma.read()):null,m=this.center?c(this.beta.read()):null,f=[],d=[];for(let h=0;h<s;++h)this.axis.indexOf(h)!==-1?(f.push(n[h]),d.push(1)):(f.push(1),d.push(n[h]));return a=$r(a,f),l=$r(l,f),p!=null&&(p=$r(p,d)),m!=null&&(m=$r(m,d)),Gh(o,a,l,m,p,this.epsilon)})}getConfig(){let e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:wt(this.betaInitializer),gammaInitializer:wt(this.gammaInitializer),betaRegularizer:at(this.betaRegularizer),gammaRegularizer:at(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}};Wh.className="LayerNormalization";Y.registerClass(Wh);function E9(r,e,t){return M(()=>{if(r.rank!==4)throw new z(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);if(e==null&&(e=[[1,1],[1,1]]),e.length!==2||e[0].length!==2||e[1].length!==2)throw new z("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(t==null&&(t=so()),t!=="channelsLast"&&t!=="channelsFirst")throw new z(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let o;return t==="channelsFirst"?o=[[0,0],[0,0],e[0],e[1]]:o=[[0,0],e[0],e[1],[0,0]],oo(r,o)})}var Hh=class extends Le{constructor(e){if(e==null&&(e={}),super(e),this.dataFormat=e.dataFormat==null?so():e.dataFormat,e.padding==null)this.padding=[[1,1],[1,1]];else if(typeof e.padding=="number")this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,e.padding.length!==2)throw new z(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,o;if(typeof e.padding[0]=="number")t=[e.padding[0],e.padding[0]],o=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,e.padding[0].length!==2)throw new z(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],e.padding[1].length!==2)throw new z(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);o=e.padding[1]}this.padding=[t,o]}this.inputSpec=[new ft({ndim:4})]}computeOutputShape(e){e=qe(e);let t,o;return this.dataFormat==="channelsFirst"?(e[2]!=null&&e[2]>=0?t=e[2]+this.padding[0][0]+this.padding[0][1]:t=null,e[3]!=null&&e[3]>=0?o=e[3]+this.padding[1][0]+this.padding[1][1]:o=null,[e[0],e[1],t,o]):(e[1]!=null&&e[1]>=0?t=e[1]+this.padding[0][0]+this.padding[0][1]:t=null,e[2]!=null&&e[2]>=0?o=e[2]+this.padding[1][0]+this.padding[1][1]:o=null,[e[0],t,o,e[3]])}call(e,t){return M(()=>E9(De(e),this.padding,this.dataFormat))}getConfig(){let e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}};Hh.className="ZeroPadding2D";Y.registerClass(Hh);function Ab(r,e,t,o,n,s){return M(()=>{$t(n),g1(s),no(o),t==null&&(t=[1,1]),o==null&&(o="valid"),n==null&&(n=so()),s==null&&(s="max"),r=gh(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=Lu(r,e,t,a):i=Au(r,e,t,a),n==="channelsFirst"&&(i=Pe(i,[0,3,1,2])),i})}function lF(r,e,t,o,n,s){return M(()=>{$t(n),g1(s),no(o),t==null&&(t=[1,1,1]),o==null&&(o="valid"),n==null&&(n=so()),s==null&&(s="max"),r=F1(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=ty(r,e,t,a):i=$x(r,e,t,a),n==="channelsFirst"&&(i=Pe(i,[0,4,1,2,3])),i})}var kb=class extends Le{constructor(e){if(e.poolSize==null&&(e.poolSize=2),super(e),typeof e.poolSize=="number")this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&e.poolSize.length===1&&typeof e.poolSize[0]=="number")this.poolSize=e.poolSize;else throw new z(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if(Xt(this.poolSize,"poolSize"),e.strides==null)this.strides=this.poolSize;else if(typeof e.strides=="number")this.strides=[e.strides];else if(Array.isArray(e.strides)&&e.strides.length===1&&typeof e.strides[0]=="number")this.strides=e.strides;else throw new z(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);Xt(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,no(this.padding),this.inputSpec=[new ft({ndim:3})]}computeOutputShape(e){e=qe(e);let t=Vo(e[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return M(()=>{this.invokeCallHook(e,t),e=wl(De(e),2);let o=this.poolingFunction(De(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Zo(o,[2])})}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}},Kh=class extends kb{constructor(e){super(e)}poolingFunction(e,t,o,n,s){return $t(s),no(n),Ab(e,t,o,n,s,"max")}};Kh.className="MaxPooling1D";Y.registerClass(Kh);var qh=class extends kb{constructor(e){super(e)}poolingFunction(e,t,o,n,s){return $t(s),no(n),Ab(e,t,o,n,s,"avg")}};qh.className="AveragePooling1D";Y.registerClass(qh);var Nb=class extends Le{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==2)throw new z(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Xt(this.poolSize,"poolSize"),Xt(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,$t(this.dataFormat),no(this.padding),this.inputSpec=[new ft({ndim:4})]}computeOutputShape(e){e=qe(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],o=this.dataFormat==="channelsFirst"?e[3]:e[2];return t=Vo(t,this.poolSize[0],this.padding,this.strides[0]),o=Vo(o,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,o]:[e[0],t,o,e[3]]}call(e,t){return M(()=>(this.invokeCallHook(e,t),this.poolingFunction(De(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}},Xh=class extends Nb{constructor(e){super(e)}poolingFunction(e,t,o,n,s){return $t(s),no(n),Ab(e,t,o,n,s,"max")}};Xh.className="MaxPooling2D";Y.registerClass(Xh);var jh=class extends Nb{constructor(e){super(e)}poolingFunction(e,t,o,n,s){return $t(s),no(n),Ab(e,t,o,n,s,"avg")}};jh.className="AveragePooling2D";Y.registerClass(jh);var $b=class extends Le{constructor(e){if(e.poolSize==null&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],e.strides==null)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(e.strides.length!==3)throw new z(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Xt(this.poolSize,"poolSize"),Xt(this.strides,"strides"),this.padding=e.padding==null?"valid":e.padding,this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,$t(this.dataFormat),no(this.padding),this.inputSpec=[new ft({ndim:5})]}computeOutputShape(e){e=qe(e);let t=this.dataFormat==="channelsFirst"?e[2]:e[1],o=this.dataFormat==="channelsFirst"?e[3]:e[2],n=this.dataFormat==="channelsFirst"?e[4]:e[3];return t=Vo(t,this.poolSize[0],this.padding,this.strides[0]),o=Vo(o,this.poolSize[1],this.padding,this.strides[1]),n=Vo(n,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[e[0],e[1],t,o,n]:[e[0],t,o,n,e[4]]}call(e,t){return M(()=>(this.invokeCallHook(e,t),this.poolingFunction(De(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}},Yh=class extends $b{constructor(e){super(e)}poolingFunction(e,t,o,n,s){return $t(s),no(n),lF(e,t,o,n,s,"max")}};Yh.className="MaxPooling3D";Y.registerClass(Yh);var Qh=class extends $b{constructor(e){super(e)}poolingFunction(e,t,o,n,s){return $t(s),no(n),lF(e,t,o,n,s,"avg")}};Qh.className="AveragePooling3D";Y.registerClass(Qh);var Eb=class extends Le{constructor(e){super(e),this.inputSpec=[new ft({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Ie}},Zh=class extends Eb{constructor(e){super(e||{})}call(e,t){return M(()=>{let o=De(e);return Ct(o,1)})}};Zh.className="GlobalAveragePooling1D";Y.registerClass(Zh);var Jh=class extends Eb{constructor(e){super(e||{})}call(e,t){return M(()=>{let o=De(e);return Pr(o,1)})}};Jh.className="GlobalMaxPooling1D";Y.registerClass(Jh);var Rb=class extends Le{constructor(e){super(e),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,$t(this.dataFormat),this.inputSpec=[new ft({ndim:4})]}computeOutputShape(e){return e=e,this.dataFormat==="channelsLast"?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Ie}getConfig(){let e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}},eg=class extends Rb{call(e,t){return M(()=>{let o=De(e);return this.dataFormat==="channelsLast"?Ct(o,[1,2]):Ct(o,[2,3])})}};eg.className="GlobalAveragePooling2D";Y.registerClass(eg);var tg=class extends Rb{call(e,t){return M(()=>{let o=De(e);return this.dataFormat==="channelsLast"?Pr(o,[1,2]):Pr(o,[2,3])})}};tg.className="GlobalMaxPooling2D";Y.registerClass(tg);var Db=class extends Le{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(e){this.layer!=null&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){let e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,o={}){let n=t.layer,s=Jo(n,o);delete t.layer;let i={layer:s};return Object.assign(i,t),new e(i)}},rg=class extends Db{constructor(e){super(e),this.supportsMasking=!0}build(e){if(e=qe(e),e.length<3)throw new z(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];let t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){e=qe(e);let t=[e[0]].concat(e.slice(2)),o=this.layer.computeOutputShape(t),n=e[1];return[o[0],n].concat(o.slice(1))}call(e,t){return M(()=>(e=De(e),O1((i,a)=>[De(this.layer.call(i,t)),[]],e,[],!1,null,null,!1,!0)[1]))}};rg.className="TimeDistributed";Y.registerClass(rg);function R9(r){Qa(CD,"BidirectionalMergeMode",r)}var A9="concat",og=class extends Db{constructor(e){super(e);let t=e.layer.getConfig(),o={};o.className=e.layer.getClassName(),o.config=t,this.forwardLayer=Jo(o),t.goBackwards=t.goBackwards!==!0;let n={};if(n.className=e.layer.getClassName(),n.config=t,this.backwardLayer=Jo(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=e.mergeMode===void 0?A9:e.mergeMode,R9(this.mergeMode),e.weights)throw new Ie("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,this.forwardLayer!=null&&(this.forwardLayer.trainable=e),this.backwardLayer!=null&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){let t=e.length,o=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,o)),this.backwardLayer.setWeights(e.slice(o))}computeOutputShape(e){let t=this.forwardLayer.computeOutputShape(e);Array.isArray(t)&&Array.isArray(t[0])||(t=[t]),t=t;let o,n,s;return this.returnState&&(s=t.slice(1)),o=t[0],o=o,this.mergeMode==="concat"?(o[o.length-1]*=2,n=[o]):this.mergeMode==null?n=[o,o.slice()]:n=[o],this.returnState?this.mergeMode==null?n.concat(s).concat(s.slice()):[o].concat(s).concat(s.slice()):Sr(n)}apply(e,t){let o=t==null?null:t.initialState,n=t==null?null:t.constants;t==null&&(t={});let s=_1(e,o,n,this.numConstants);if(e=s.inputs,o=s.initialState,n=s.constants,Array.isArray(e)&&(o=e.slice(1),e=e[0]),(o==null||o.length===0)&&n==null)return super.apply(e,t);let i=[],a=[];if(o!=null){let u=o.length;if(u%2>0)throw new z("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=o,i.push(...o);let c=o.map(p=>new ft({shape:p.shape}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),a.push(...c)}if(n!=null)throw new Ie("Support for constants in Bidirectional layers is not implemented yet.");let l=i[0]instanceof jr;for(let u of i)if(u instanceof jr!==l)throw new z("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){let u=[e].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,t);return this.inputSpec=p,m}else return super.apply(e,t)}call(e,t){return M(()=>{let o=t.initialState,n,s;if(o==null)n=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{let l=o.slice(0,o.length/2),u=o.slice(o.length/2);n=this.forwardLayer.call(e,Object.assign(t,{initialState:l})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:u}))}let i;this.returnState&&(Array.isArray(n)&&(i=n.slice(1).concat(s.slice(1))),n=n[0],s=s[0]),this.returnSequences&&(s=mr(s,1));let a;return this.mergeMode==="concat"?a=Mm([n,s]):this.mergeMode==="sum"?a=q(n,s):this.mergeMode==="ave"?a=P(.5,q(n,s)):this.mergeMode==="mul"?a=P(n,s):this.mergeMode==null&&(a=[n,s]),this.returnState?this.mergeMode==null?a.concat(i):[a].concat(i):a})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Vi(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Vi(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){Array.isArray(t)&&(t=t[0]);let o;if(this.returnSequences?this.mergeMode==null?o=[t,t]:o=t:this.mergeMode==null?o=[null,null]:o=null,this.returnState){let s=this.forwardLayer.states.map(i=>null);return Array.isArray(o)?o.concat(s).concat(s):[o].concat(s).concat(s)}else return o}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(e),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){let e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){let o=Jo(t.layer);if(delete t.layer,t.numConstants!=null)throw new Ie("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");let n=t;return n.layer=o,new e(n)}};og.className="Bidirectional";Y.registerClass(og);var L9=D();L9.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var Gn;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(Gn||(Gn={}));var uF;(function(r){let e;(function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"})(e=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(uF||(uF={}));var B9={};function Fb(r){return B9[r]}function v(r,e,t,o,n){let s=e.inputParams[r];if(s&&s.inputIndexStart!==void 0){let a=s.inputIndexStart,l=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?a+1:s.inputIndexEnd;if(s.type==="tensor")return xr(e.inputNames[s.inputIndexStart],t,o,n);if(s.type==="tensors")return e.inputNames.slice(a,l).map(m=>xr(m,t,o,n));let u=xr(e.inputNames.slice(a)[0],t,o,n),c=u.dataSync();return s.type==="number"?c[0]:y.toNestedArray(u.shape,c)}let i=e.attrParams[r];return i&&i.value}function xr(r,e,t,o){let[n,s]=uo(r);if(o!=null){let a=o.getHashTableHandleByName(n);if(a!=null)return a}let i=t.currentContextIds.find(a=>!!e[_b(n,a)]);return i!==void 0?e[_b(n,i)][s]:void 0}function cF(r,e,t){return e[_b(r,t.currentContextId)]}function Xs(r,e){let[t,o,n]=uo(r);return[_b(t,e&&e.currentContextId),o,n]}function _b(r,e){return e?`${r}-${e}`:r}function uo(r){let e=r.split(":");if(e.length===1)return[r,0,void 0];let t=e[0],o=e.length===3?e[1]:void 0,n=Number(e[e.length-1]);return[t,n,o]}function ng(r,e,t){let o=v("pad",r,e,t);if(o==="explicit"){o=v("explicitPaddings",r,e,t);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function Ki(r){return r.kept?r:to(r)}var P1={};lt(P1,{json:()=>M9});var M9=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var L1={};lt(L1,{json:()=>V9});var V9=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var z1={};lt(z1,{json:()=>G9});var G9=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var B1={};lt(B1,{json:()=>U9});var U9=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var M1={};lt(M1,{json:()=>W9});var W9=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var V1={};lt(V1,{json:()=>H9});var H9=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var G1={};lt(G1,{json:()=>K9});var K9=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var U1={};lt(U1,{json:()=>q9});var q9=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var W1={};lt(W1,{json:()=>X9});var X9=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var H1={};lt(H1,{json:()=>j9});var j9=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var K1={};lt(K1,{json:()=>Y9});var Y9=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var q1={};lt(q1,{json:()=>Q9});var Q9=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var X1={};lt(X1,{json:()=>Z9});var Z9=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var j1={};lt(j1,{json:()=>J9});var J9=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var Y1={};lt(Y1,{json:()=>eee});var eee=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var Q1={};lt(Q1,{json:()=>tee});var tee=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var Z1={};lt(Z1,{json:()=>ree});var ree=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var J1={};lt(J1,{json:()=>oee});var oee=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var eT={};lt(eT,{json:()=>nee});var nee=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var sg=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[P1,L1,z1,B1,M1,V1,G1,U1,W1,H1,K1,q1,X1,j1,Y1,Q1,Z1,J1,eT],t=[].concat(...e.map(o=>o.json));this.opMappers=t.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(e,t={}){let o=e.node,n=[],s=[],i=[],a=o.reduce((h,g)=>(h[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?n.push(h[g.name]):g.op==="Const"?s.push(h[g.name]):(g.input==null||g.input.length===0)&&i.push(h[g.name]),h),{}),l=[],u=[],c={},p={};t!=null&&(c=this.mapSignatureEntries(t.inputs),p=this.mapSignatureEntries(t.outputs));let m=Object.keys(a);m.forEach(h=>{let g=a[h];g.inputNames.forEach((x,b)=>{let[C,,S]=Xs(x),I=a[C];if(I.outputs!=null){let N=I.outputs.indexOf(S);if(N!==-1){let $=`${C}:${N}`;g.inputNames[b]=$}}g.inputs.push(I),I.children.push(g)})}),Object.keys(p).length===0?m.forEach(h=>{let g=a[h];g.children.length===0&&u.push(g)}):Object.keys(p).forEach(h=>{let[g]=Xs(h),x=a[g];x!=null&&(x.signatureKey=p[h],u.push(x))}),Object.keys(c).length>0?Object.keys(c).forEach(h=>{let[g]=Xs(h),x=a[g];x&&(x.signatureKey=c[h],l.push(x))}):l=n;let f={};e.library!=null&&e.library.function!=null&&(f=e.library.function.reduce((h,g)=>(h[g.signature.name]=this.mapFunction(g),h),{}));let d={nodes:a,inputs:l,outputs:u,weights:s,placeholders:n,signature:t,functions:f};return i.length>0&&(d.initNodes=i),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,o)=>(t[e[o].name]=o,t),{})}mapNode(e){let t=Fb(e.op)||this.opMappers[e.op]||{};e.attr==null&&(e.attr={});let o={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return t.inputs!=null&&(o.inputParams=t.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),t.attrs!=null&&(o.attrParams=t.attrs.reduce((n,s)=>{let i=s.type,a;switch(s.type){case"string":a=Ob(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Ob(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":a=Gb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Gb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":a=Lb(e.attr,s.tfName,s.defaultValue||0),a===void 0&&!!s.tfDeprecatedName&&(a=Lb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":a=Vb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Vb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":a=Pb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Pb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":a=Wb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Wb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":a=Mb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Mb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":a=Ub(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Ub(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":a=zb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=zb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":a=Bb(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=Bb(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":a=pF(e.attr,s.tfName,s.defaultValue),a===void 0&&!!s.tfDeprecatedName&&(a=pF(e.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${e.op}`)}return n[s.name]={value:a,type:i},n},{})),o}mapFunction(e){let t=e.nodeDef,o=[],n=[],s={};t!=null&&(s=t.reduce((p,m)=>(p[m.name]=this.mapNode(m),m.op==="Const"&&n.push(p[m.name]),p),{}));let i=[],a=[];e.signature.inputArg.forEach(p=>{let[m]=Xs(p.name),f={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:tT(p.type),type:"dtype"}},children:[]};f.signatureKey=p.name,i.push(f),s[m]=f}),Object.keys(s).forEach(p=>{let m=s[p];m.inputNames.forEach((f,d)=>{let[h,,g]=Xs(f),x=s[h];if(x.outputs!=null){let b=x.outputs.indexOf(g);if(b!==-1){let C=`${h}:${b}`;m.inputNames[d]=C}}m.inputs.push(x),x.children.push(m)})});let u=e.ret;e.signature.outputArg.forEach(p=>{let[m,f]=Xs(u[p.name]),d=s[m];d!=null&&(d.defaultOutput=f,a.push(d))});let c=this.mapArgsToSignature(e);return{nodes:s,inputs:i,outputs:a,weights:n,placeholders:o,signature:c}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((t,o)=>(t[o.name]=this.mapArgToTensorInfo(o),t),{}),outputs:e.signature.outputArg.reduce((t,o)=>(t[o.name]=this.mapArgToTensorInfo(o,e.ret),t),{})}}mapArgToTensorInfo(e,t){let o=e.name;return t!=null&&(o=t[o]),{name:o,dtype:e.type}}};function see(r){let e=D().global;if(typeof e.atob<"u")return e.atob(r);if(typeof Buffer<"u")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function mF(r,e){let t=Array.isArray(r)?String.fromCharCode.apply(null,r):see(r);return e?t:t.toLowerCase()}function Ob(r,e,t,o=!1){let n=r[e];return n!=null?mF(n.s,o):t}function Pb(r,e,t){let o=r[e];return o?o.b:t}function Lb(r,e,t){let o=r[e]||{},n=o.i!=null?o.i:o.f!=null?o.f:t;return typeof n=="number"?n:parseInt(n,10)}function tT(r){switch(typeof r=="string"&&(r=Gn[r]),r){case Gn.DT_FLOAT:case Gn.DT_HALF:return"float32";case Gn.DT_INT32:case Gn.DT_INT64:case Gn.DT_INT8:case Gn.DT_UINT8:return"int32";case Gn.DT_BOOL:return"bool";case Gn.DT_DOUBLE:return"float32";case Gn.DT_STRING:return"string";default:return null}}function pF(r,e,t){let o=r[e];return o&&o.func?o.func.name:t}function zb(r,e,t){let o=r[e];return o&&o.type?tT(o.type):t}function Bb(r,e,t){let o=r[e];return o&&o.list&&o.list.type?o.list.type.map(n=>tT(n)):t}function fF(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(e=>typeof e.size=="number"?e.size:parseInt(e.size,10)):[]}function Mb(r,e,t){let o=r[e];return o&&o.shape?fF(o.shape):t}function Vb(r,e,t){let o=r[e];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):t}function Gb(r,e,t,o=!1){let n=r[e];return n&&n.list&&n.list.s?n.list.s.map(s=>mF(s,o)):t}function Ub(r,e,t){let o=r[e];return o&&o.list&&o.list.shape?o.list.shape.map(n=>fF(n)):t}function Wb(r,e,t){let o=r[e];return o&&o.list&&o.list.b?o.list.b:t}var Hb=class{constructor(e,t,o){this.node=e,this.tensorMap=t,this.context=o,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(n=>this.getInput(n)),e.rawAttrs!=null&&(this.attrs=Object.keys(e.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(e){return xr(e,this.tensorMap,this.context)}getAttr(e,t){let o=this.node.rawAttrs[e];if(o.tensor!=null)return xr(e,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return Lb(this.node.rawAttrs,e,t);if(o.s!=null)return Ob(this.node.rawAttrs,e,t);if(o.b!=null)return Pb(this.node.rawAttrs,e,t);if(o.shape!=null)return Mb(this.node.rawAttrs,e,t);if(o.type!=null)return zb(this.node.rawAttrs,e,t);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return Vb(this.node.rawAttrs,e,t);if(o.list.s!=null)return Gb(this.node.rawAttrs,e,t);if(o.list.shape!=null)return Ub(this.node.rawAttrs,e,t);if(o.list.b!=null)return Wb(this.node.rawAttrs,e,t);if(o.list.type!=null)return Bb(this.node.rawAttrs,e,t)}return t}};var ot={};lt(ot,{OP_SCOPE_SUFFIX:()=>vv,abs:()=>It,acos:()=>bx,acosh:()=>Cx,add:()=>q,addN:()=>D2,all:()=>im,any:()=>Rc,argMax:()=>La,argMin:()=>wx,asin:()=>Sx,asinh:()=>Ix,atan:()=>vx,atan2:()=>Tx,atanh:()=>kx,avgPool:()=>Au,avgPool3d:()=>$x,basicLSTMCell:()=>O2,batchNorm:()=>Ba,batchNorm2d:()=>Ex,batchNorm3d:()=>Rx,batchNorm4d:()=>Ax,batchToSpaceND:()=>Du,bincount:()=>Dx,booleanMaskAsync:()=>jQ,broadcastArgs:()=>L2,broadcastTo:()=>Os,buffer:()=>te,cast:()=>j,ceil:()=>Fx,clipByValue:()=>br,clone:()=>to,complex:()=>_o,concat:()=>et,concat1d:()=>_x,concat2d:()=>Ox,concat3d:()=>Px,concat4d:()=>Lx,conv1d:()=>lm,conv2d:()=>Po,conv2dTranspose:()=>cm,conv3d:()=>zx,conv3dTranspose:()=>Mx,cos:()=>Fu,cosh:()=>pm,cosineWindow:()=>_d,cumprod:()=>Fc,cumsum:()=>mm,denseBincount:()=>z2,depthToSpace:()=>Vx,depthwiseConv2d:()=>Ma,diag:()=>B2,dilation2d:()=>Gx,div:()=>se,divNoNan:()=>Ux,dot:()=>Wx,dropout:()=>r1,einsum:()=>M2,elu:()=>Va,enclosingPowerOfTwo:()=>o1,equal:()=>Kr,erf:()=>Hx,euclideanNorm:()=>Kx,exp:()=>er,expandDims:()=>cr,expm1:()=>qx,eye:()=>Oc,fft:()=>Gu,fill:()=>Ga,floor:()=>Ua,floorDiv:()=>sm,fused:()=>Wu,gather:()=>Wa,gatherND:()=>nZ,greater:()=>qt,greaterEqual:()=>Yo,ifft:()=>xl,imag:()=>Ru,image:()=>qa,inTopKAsync:()=>aZ,irfft:()=>km,isFinite:()=>Xx,isInf:()=>jx,isNaN:()=>Yx,leakyRelu:()=>_u,less:()=>fm,lessEqual:()=>Qo,linalg:()=>s1,linspace:()=>U2,localResponseNormalization:()=>Qx,log:()=>Cr,log1p:()=>Ou,logSigmoid:()=>Zx,logSoftmax:()=>dm,logSumExp:()=>hm,logicalAnd:()=>Lr,logicalNot:()=>Pu,logicalOr:()=>gm,logicalXor:()=>Jx,losses:()=>a7,lowerBound:()=>W2,matMul:()=>Ge,max:()=>Pr,maxPool:()=>Lu,maxPool3d:()=>ty,maxPoolWithArgmax:()=>H2,maximum:()=>zo,mean:()=>Ct,meshgrid:()=>K2,min:()=>_c,minimum:()=>Ha,mirrorPad:()=>ry,mod:()=>oy,moments:()=>Pc,movingAverage:()=>QQ,mul:()=>P,multiRNNCell:()=>q2,multinomial:()=>X2,neg:()=>We,norm:()=>gl,notEqual:()=>Bi,oneHot:()=>$c,ones:()=>pr,onesLike:()=>gr,op:()=>k,outerProduct:()=>j2,pad:()=>oo,pad1d:()=>Y2,pad2d:()=>Q2,pad3d:()=>Z2,pad4d:()=>J2,pool:()=>ny,pow:()=>ro,prelu:()=>Bu,print:()=>mx,prod:()=>sy,raggedTensorToTensor:()=>eE,rand:()=>tE,randomGamma:()=>yE,randomNormal:()=>Bc,randomStandardNormal:()=>bE,randomUniform:()=>Ka,range:()=>Mu,real:()=>hl,reciprocal:()=>cy,relu:()=>Er,relu6:()=>xm,reshape:()=>O,reverse:()=>mr,reverse1d:()=>CE,reverse2d:()=>wE,reverse3d:()=>SE,reverse4d:()=>IE,rfft:()=>Uu,round:()=>ym,rsqrt:()=>bm,scalar:()=>ae,scatterND:()=>JQ,searchSorted:()=>Ad,selu:()=>Cm,separableConv2d:()=>wm,setdiff1dAsync:()=>vE,sigmoid:()=>Hr,sign:()=>py,signal:()=>i7,sin:()=>Sm,sinh:()=>Im,slice:()=>Ae,slice1d:()=>vm,slice2d:()=>Fd,slice3d:()=>Tm,slice4d:()=>Mc,softmax:()=>Vu,softplus:()=>zi,spaceToBatchND:()=>zu,sparse:()=>l7,sparseToDense:()=>rZ,spectral:()=>s7,split:()=>fr,sqrt:()=>bt,square:()=>Me,squaredDifference:()=>Nm,squeeze:()=>Zo,stack:()=>tr,step:()=>Ls,stridedSlice:()=>my,string:()=>u7,sub:()=>ne,sum:()=>ue,tan:()=>fy,tanh:()=>za,tensor:()=>Tr,tensor1d:()=>Gt,tensor2d:()=>yl,tensor3d:()=>xx,tensor4d:()=>TE,tensor5d:()=>kE,tensor6d:()=>NE,tile:()=>$r,topk:()=>dy,transpose:()=>Pe,truncatedNormal:()=>$m,unique:()=>hy,unsortedSegmentSum:()=>Em,unstack:()=>wr,upperBound:()=>$E,variable:()=>gy,where:()=>kt,whereAsync:()=>yy,zeros:()=>it,zerosLike:()=>Se});var dF=(r,e,t,o=ot)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(v("a",r,e,t),v("b",r,e,t))];case"AddN":return[o.addN(v("tensors",r,e,t))];case"FloorMod":case"Mod":return[o.mod(v("a",r,e,t),v("b",r,e,t))];case"Mul":return[o.mul(v("a",r,e,t),v("b",r,e,t))];case"RealDiv":case"Div":return[o.div(v("a",r,e,t),v("b",r,e,t))];case"DivNoNan":return[o.divNoNan(v("a",r,e,t),v("b",r,e,t))];case"FloorDiv":return[o.floorDiv(v("a",r,e,t),v("b",r,e,t))];case"Sub":return[o.sub(v("a",r,e,t),v("b",r,e,t))];case"Minimum":return[o.minimum(v("a",r,e,t),v("b",r,e,t))];case"Maximum":return[o.maximum(v("a",r,e,t),v("b",r,e,t))];case"Pow":return[o.pow(v("a",r,e,t),v("b",r,e,t))];case"SquaredDifference":return[o.squaredDifference(v("a",r,e,t),v("b",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var hF=(r,e,t,o=ot)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(v("x",r,e,t))];case"Acos":return[o.acos(v("x",r,e,t))];case"Acosh":return[o.acosh(v("x",r,e,t))];case"Asin":return[o.asin(v("x",r,e,t))];case"Asinh":return[o.asinh(v("x",r,e,t))];case"Atan":return[o.atan(v("x",r,e,t))];case"Atan2":return[o.atan2(v("x",r,e,t),v("y",r,e,t))];case"Atanh":return[o.atanh(v("x",r,e,t))];case"Ceil":return[o.ceil(v("x",r,e,t))];case"Complex":return[o.complex(v("real",r,e,t),v("imag",r,e,t))];case"Cos":return[o.cos(v("x",r,e,t))];case"Cosh":return[o.cosh(v("x",r,e,t))];case"Elu":return[o.elu(v("x",r,e,t))];case"Erf":return[o.erf(v("x",r,e,t))];case"Exp":return[o.exp(v("x",r,e,t))];case"Expm1":return[o.expm1(v("x",r,e,t))];case"Floor":return[o.floor(v("x",r,e,t))];case"Log":return[o.log(v("x",r,e,t))];case"Log1p":return[o.log1p(v("x",r,e,t))];case"Imag":return[o.imag(v("x",r,e,t))];case"Neg":return[o.neg(v("x",r,e,t))];case"Reciprocal":return[o.reciprocal(v("x",r,e,t))];case"Real":return[o.real(v("x",r,e,t))];case"Relu":return[o.relu(v("x",r,e,t))];case"Round":return[o.round(v("x",r,e,t))];case"Selu":return[o.selu(v("x",r,e,t))];case"Sigmoid":return[o.sigmoid(v("x",r,e,t))];case"Sin":return[o.sin(v("x",r,e,t))];case"Sign":return[o.sign(v("x",r,e,t))];case"Sinh":return[o.sinh(v("x",r,e,t))];case"Softplus":return[o.softplus(v("x",r,e,t))];case"Sqrt":return[o.sqrt(v("x",r,e,t))];case"Square":return[o.square(v("x",r,e,t))];case"Tanh":return[o.tanh(v("x",r,e,t))];case"Tan":return[o.tan(v("x",r,e,t))];case"ClipByValue":return[o.clipByValue(v("x",r,e,t),v("clipValueMin",r,e,t),v("clipValueMax",r,e,t))];case"Relu6":return[o.relu6(v("x",r,e,t))];case"Rsqrt":return[o.rsqrt(xr(r.inputNames[0],e,t))];case"Prod":return[o.prod(v("x",r,e,t),v("axes",r,e,t))];case"LeakyRelu":return[o.leakyRelu(v("x",r,e,t),v("alpha",r,e,t))];case"Prelu":return[o.prelu(v("x",r,e,t),v("alpha",r,e,t))];case"IsNan":return[o.isNaN(xr(r.inputNames[0],e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function tn(r,e,t=""){if(!(typeof r=="number"||typeof e=="number")){y.assert(r.length===e.length,()=>t+` Shapes ${r} and ${e} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=e[o];y.assert(n<0||s<0||n===s,()=>t+` Shapes ${r} and ${e} must match`)}}}function gF(r){return!(typeof r=="number"||r.some(e=>e<0))}function lf(r,e,t){let o=Kb(r,t),n=!gF(o);if(n&&e.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&e.forEach(s=>{o=Kb(s.shape,o)}),!gF(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function Kb(r,e){if(typeof r=="number")return e;if(typeof e=="number")return r;if(r.length!==e.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${e}`);let t=[];for(let o=0;o<r.length;++o){let n=r[o],s=e[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${e}`);t[o]=n>=0?n:s}return t}var qb=class{constructor(e,t,o,n,s,i,a){this.name=e,this.dtype=t,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=ae(0),Nt(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{(e==null||!e.has(t.tensor.id))&&t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(t=>this.read(t))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=t.shape),tn(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);o.tensor=t,Nt(t),o.written=!0,this.tensors[e]=o}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((o,n)=>this.write(o,t[n]))}gather(e,t){if(!!t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let n=0;n<this.size();n++)e.push(n)}if(e.length===0)return Tr([],[0].concat(this.elementShape));let o=this.readMany(e);return tn(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),tr(o,0)}concat(e){if(!!e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(this.size()===0)return Tr([],[0].concat(this.elementShape));let t=[];for(let n=0;n<this.size();n++)t.push(n);let o=this.readMany(t);return tn(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),et(o,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let o=Math.max(...e);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(e,wr(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let o=0,n=e.map(l=>(o+=l,o));if(o!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:t.size/o,i=[];M(()=>{t=O(t,[1,o,s]);for(let l=0;l<e.length;++l){let u=l===0?0:n[l-1],c=[0,u,0],p=[1,e[l],s];i[l]=O(Ae(t,c,p),this.elementShape)}return i});let a=[];for(let l=0;l<e.length;l++)a[l]=l;this.writeMany(a,i)}};var Nl=class{constructor(e,t,o,n=-1){this.tensors=e,this.elementShape=t,this.elementDtype=o,e?.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);tn(t,s.shape,"TensorList shape mismatch: "),Nt(s)}),this.idTensor=ae(0),this.maxNumElements=n,Nt(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Nl([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{(e==null||!e.has(t.id))&&t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,o=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);tn(e,this.elementShape,"TensorList shape mismatch: ");let n=lf(this.elementShape,this.tensors,e);return M(()=>{let s=this.tensors.map(i=>O(i,n));return tr(s,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=lf(this.elementShape,this.tensors,e),n=this.tensors.pop();return n.kept=!1,tn(n.shape,e,"TensorList shape mismatch: "),O(n,o)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(tn(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Nt(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(this.maxNumElements!==-1&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new Nl([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let o=0;o<Math.min(this.tensors.length,e);++o)t.tensors[o]=this.tensors[o];return t}getItem(e,t,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(this.tensors[e]==null)throw new Error(`element at index ${e} is null.`);tn(this.tensors[e].shape,t,"TensorList shape mismatch: ");let n=lf(this.elementShape,this.tensors,t);return O(this.tensors[e],n)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||this.maxNumElements!==-1&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);tn(this.elementShape,t.shape,"TensorList shape mismatch: "),Nt(t),this.tensors[e]!=null&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,o){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);tn(this.elementShape,o,"TensorList shape mismatch: "),e=e.slice(0,this.size());let n=lf(this.elementShape,this.tensors,o);return e.length===0?Tr([],[0].concat(n)):M(()=>{let s=e.map(i=>O(this.tensors[i],n));return tr(s,0)})}concat(e,t){if(!!e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);tn(this.elementShape,t,"TensorList shape mismatch: ");let o=lf(this.elementShape,this.tensors,t);return this.size()===0?Tr([],[0].concat(o)):M(()=>{let n=this.tensors.map(s=>O(s,o));return et(n,0)})}};function xF(r,e,t){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==t)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${t}`);let n=r.shape.slice(1);tn(n,e,"TensorList shape mismatch: ");let s=wr(r);return new Nl(s,e,o)}function yF(r,e,t,o){return new Nl([],r,e,o)}function bF(r,e,t,o){if(e.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${r.shape[0]}`);let n=Math.max(...e);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new Nl([],t,r.dtype,o),i=wr(r,0);return e.forEach((a,l)=>{s.setItem(a,i[l])}),s}function CF(r,e,t){let o=0,n=e.map(c=>(o+=c,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),i=Kb(s,t),a=o===0?0:r.size/o,l=M(()=>{let c=[];r=O(r,[1,o,a]);for(let p=0;p<e.length;++p){let m=p===0?0:n[p-1],f=[0,m,0],d=[1,e[p],a];c[p]=O(Ae(r,f,d),i)}return r.dispose(),c}),u=new Nl([],t,r.dtype,e.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}var wF=async(r,e,t)=>{switch(r.op){case"If":case"StatelessIf":{let o=v("thenBranch",r,e,t),n=v("elseBranch",r,e,t),s=v("cond",r,e,t),i=v("args",r,e,t);return(await s.data())[0]?t.functionMap[o].executeFunctionAsync(i,t.tensorArrayMap,t.tensorListMap):t.functionMap[n].executeFunctionAsync(i,t.tensorArrayMap,t.tensorListMap)}case"While":case"StatelessWhile":{let o=v("body",r,e,t),n=v("cond",r,e,t),s=v("args",r,e,t),i=await t.functionMap[n].executeFunctionAsync(s,t.tensorArrayMap,t.tensorListMap),a=s.map(c=>c.id),l=await i[0].data();i.forEach(c=>{!c.kept&&a.indexOf(c.id)===-1&&c.dispose()});let u=s;for(;l[0];){let c=u;u=await t.functionMap[o].executeFunctionAsync(u,t.tensorArrayMap,t.tensorListMap);let p=u.map(f=>f.id);c.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()});let m=await t.functionMap[n].executeFunctionAsync(u,t.tensorArrayMap,t.tensorListMap);l=await m[0].data(),m.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()})}return u}case"LoopCond":{let o=v("pred",r,e,t);return[Ki(o)]}case"Switch":{let o=v("pred",r,e,t),n=v("data",r,e,t);return n.kept||(n=Ki(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>xr(n,e,t)!==void 0);if(o){let n=xr(o,e,t);return[Ki(n)]}return}case"Enter":{let o=v("frameName",r,e,t),n=v("tensor",r,e,t);return t.enterFrame(o),[Ki(n)]}case"Exit":{let o=v("tensor",r,e,t);return t.exitFrame(),[Ki(o)]}case"NextIteration":{let o=v("tensor",r,e,t);return t.nextIteration(),[Ki(o)]}case"TensorArrayV3":{let o=v("size",r,e,t),n=v("dtype",r,e,t),s=v("elementShape",r,e,t),i=v("dynamicSize",r,e,t),a=v("clearAfterRead",r,e,t),l=v("identicalElementShapes",r,e,t),u=v("name",r,e,t),c=new qb(u,n,o,s,l,i,a);return t.addTensorArray(c),[c.idTensor,ae(1)]}case"TensorArrayWriteV3":{let o=v("tensorArrayId",r,e,t),n=v("index",r,e,t),s=v("tensor",r,e,t),i=t.getTensorArray(o.id);return i.write(n,s),[i.idTensor]}case"TensorArrayReadV3":{let o=v("tensorArrayId",r,e,t),n=v("index",r,e,t);return[t.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=v("tensorArrayId",r,e,t),n=v("indices",r,e,t),s=v("dtype",r,e,t);return[t.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=v("tensorArrayId",r,e,t),n=v("indices",r,e,t),s=v("tensor",r,e,t),i=t.getTensorArray(o.id);return i.scatter(n,s),[i.idTensor]}case"TensorArrayConcatV3":{let o=v("tensorArrayId",r,e,t),n=t.getTensorArray(o.id),s=v("dtype",r,e,t);return[n.concat(s)]}case"TensorArraySplitV3":{let o=v("tensorArrayId",r,e,t),n=v("tensor",r,e,t),s=v("lengths",r,e,t),i=t.getTensorArray(o.id);return i.split(s,n),[i.idTensor]}case"TensorArraySizeV3":{let o=v("tensorArrayId",r,e,t),n=t.getTensorArray(o.id);return[ae(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=v("tensorArrayId",r,e,t),n=t.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=v("tensorListId",r,e,t),n=v("index",r,e,t),s=v("tensor",r,e,t),i=t.getTensorList(o.id);return i.setItem(n,s),[i.idTensor]}case"TensorListGetItem":{let o=v("tensorListId",r,e,t),n=v("index",r,e,t),s=v("elementShape",r,e,t),i=v("elementDType",r,e,t);return[t.getTensorList(o.id).getItem(n,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let o=v("indices",r,e,t),n=v("tensor",r,e,t),s=v("elementShape",r,e,t),i=v("numElements",r,e,t),a=bF(n,o,s,i);return t.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=v("elementShape",r,e,t),n=v("elementDType",r,e,t),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let i=v(s,r,e,t),a=r.op==="TensorListReserve"?-1:i,l=yF(o,n,i,a);return t.addTensorList(l),[l.idTensor]}case"TensorListGather":{let o=v("tensorListId",r,e,t),n=v("indices",r,e,t),s=v("elementShape",r,e,t),i=v("elementDType",r,e,t);return[t.getTensorList(o.id).gather(n,i,s)]}case"TensorListStack":{let o=v("tensorListId",r,e,t),n=v("elementShape",r,e,t),s=v("elementDType",r,e,t),i=v("numElements",r,e,t);return[t.getTensorList(o.id).stack(n,s,i)]}case"TensorListFromTensor":{let o=v("tensor",r,e,t),n=v("elementShape",r,e,t),s=v("elementDType",r,e,t),i=xF(o,n,s);return t.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=v("tensorListId",r,e,t),n=t.getTensorList(o.id),s=v("dtype",r,e,t),i=v("elementShape",r,e,t);return[n.concat(s,i)]}case"TensorListPushBack":{let o=v("tensorListId",r,e,t),n=v("tensor",r,e,t),s=t.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=v("tensorListId",r,e,t),n=v("elementShape",r,e,t),s=v("elementDType",r,e,t);return[t.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=v("tensor",r,e,t),n=v("elementShape",r,e,t),s=v("lengths",r,e,t),i=CF(o,s,n);return t.addTensorList(i),[i.idTensor]}case"TensorListLength":{let o=v("tensorListId",r,e,t),n=t.getTensorList(o.id);return[ae(n.size(),"int32")]}case"TensorListResize":{let o=v("tensorListId",r,e,t),n=v("size",r,e,t),i=t.getTensorList(o.id).resize(n);return t.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function SF(r,e,t){let[o,n]=v("fusedOps",r,e,t),s=o==="biasadd",i=!s,a=n==="prelu",l=o==="fusedbatchnorm",u=v("numArgs",r,e,t);if(s){if(a&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let c=v("strides",r,e,t),p=ng(r,e,t),m=v("dataFormat",r,e,t).toUpperCase(),f=v("dilations",r,e,t),[d,h]=v("args",r,e,t);i&&(h=d,d=void 0);let g=v("leakyreluAlpha",r,e,t);return{stride:c,pad:p,dataFormat:m,dilations:f,biasArg:d,preluArg:h,activationFunc:n,leakyreluAlpha:g}}var IF=(r,e,t,o=ot)=>{switch(r.op){case"Conv1D":{let n=v("stride",r,e,t),s=v("pad",r,e,t),i=v("dataFormat",r,e,t).toUpperCase(),a=v("dilation",r,e,t);return[o.conv1d(v("x",r,e,t),v("filter",r,e,t),n,s,i,a)]}case"Conv2D":{let n=v("strides",r,e,t),s=ng(r,e,t),i=v("dataFormat",r,e,t).toUpperCase(),a=v("dilations",r,e,t);return[o.conv2d(v("x",r,e,t),v("filter",r,e,t),[n[1],n[2]],s,i,[a[1],a[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=SF(r,e,t);return[o.fused.conv2d({x:v("x",r,e,t),filter:v("filter",r,e,t),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=SF(r,e,t);return[o.fused.depthwiseConv2d({x:v("x",r,e,t),filter:v("filter",r,e,t),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=v("outputShape",r,e,t),s=v("strides",r,e,t),i=ng(r,e,t);return[o.conv2dTranspose(v("x",r,e,t),v("filter",r,e,t),n,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=v("strides",r,e,t),s=ng(r,e,t),i=v("dilations",r,e,t),a=v("dataFormat",r,e,t).toUpperCase();return[o.depthwiseConv2d(v("input",r,e,t),v("filter",r,e,t),[n[1],n[2]],s,a,[i[1],i[2]])]}case"Conv3D":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("dataFormat",r,e,t).toUpperCase(),a=v("dilations",r,e,t);return[o.conv3d(v("x",r,e,t),v("filter",r,e,t),[n[1],n[2],n[3]],s,i,[a[1],a[2],a[3]])]}case"AvgPool":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("kernelSize",r,e,t);return[o.avgPool(v("x",r,e,t),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("kernelSize",r,e,t);return[o.maxPool(v("x",r,e,t),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("kernelSize",r,e,t),a=v("includeBatchInIndex",r,e,t),{result:l,indexes:u}=o.maxPoolWithArgmax(v("x",r,e,t),[i[1],i[2]],[n[1],n[2]],s,a);return[l,u]}case"AvgPool3D":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("kernelSize",r,e,t);return[o.avgPool3d(v("x",r,e,t),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("kernelSize",r,e,t);return[o.maxPool3d(v("x",r,e,t),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=v("strides",r,e,t),s=v("pad",r,e,t),i=v("dilations",r,e,t),a=n[1],l=n[2],u=i[1],c=i[2];return[o.dilation2d(v("x",r,e,t),v("filter",r,e,t),[a,l],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var vF=(r,e,t,o=ot)=>{switch(r.op){case"Fill":{let n=v("shape",r,e,t),s=v("dtype",r,e,t),i=v("value",r,e,t);return[o.fill(n,i,s)]}case"LinSpace":{let n=v("start",r,e,t),s=v("stop",r,e,t),i=v("num",r,e,t);return[o.linspace(n,s,i)]}case"Multinomial":{let n=v("logits",r,e,t),s=v("numSamples",r,e,t),i=v("seed",r,e,t);return[o.multinomial(n,s,i)]}case"OneHot":{let n=v("indices",r,e,t),s=v("depth",r,e,t),i=v("onValue",r,e,t),a=v("offValue",r,e,t),l=v("dtype",r,e,t);return[o.oneHot(n,s,i,a,l)]}case"Ones":return[o.ones(v("shape",r,e,t),v("dtype",r,e,t))];case"OnesLike":return[o.onesLike(v("x",r,e,t))];case"RandomStandardNormal":return[o.randomStandardNormal(v("shape",r,e,t),v("dtype",r,e,t),v("seed",r,e,t))];case"RandomUniform":return[o.randomUniform(v("shape",r,e,t),v("minval",r,e,t),v("maxval",r,e,t),v("dtype",r,e,t))];case"Range":{let n=v("start",r,e,t),s=v("stop",r,e,t),i=v("step",r,e,t);return[o.range(n,s,i,v("dtype",r,e,t))]}case"TruncatedNormal":{let n=v("shape",r,e,t),s=v("mean",r,e,t),i=v("stdDev",r,e,t),a=v("seed",r,e,t);return[o.truncatedNormal(n,s,i,v("dtype",r,e,t),a)]}case"Zeros":return[o.zeros(v("shape",r,e,t),v("dtype",r,e,t))];case"ZerosLike":return[o.zerosLike(v("x",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function rT(r,e,t){let o=v("boxes",r,e,t),n=v("scores",r,e,t),s=v("maxOutputSize",r,e,t),i=v("iouThreshold",r,e,t),a=v("scoreThreshold",r,e,t),l=v("softNmsSigma",r,e,t);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:i,scoreThreshold:a,softNmsSigma:l}}var TF=async(r,e,t,o,n=ot)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=rT(r,e,t),p=await n.image.nonMaxSuppressionWithScoreAsync(s,i,a,l,u,c);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=rT(r,e,t),c=v("padToMaxOutputSize",r,e,t),p=await n.image.nonMaxSuppressionPaddedAsync(s,i,a,l,u,c);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=rT(r,e,t);return[await n.image.nonMaxSuppressionAsync(s,i,a,l,u)]}case"Where":{let s=n.cast(v("condition",r,e,t),"bool"),i=[await n.whereAsync(s)];return s.dispose(),i}case"ListDiff":return n.setdiff1dAsync(v("x",r,e,t),v("y",r,e,t));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var kF=(r,e,t,o=ot)=>{switch(r.op){case"LowerBound":{let n=v("sortedSequence",r,e,t),s=v("values",r,e,t);return[o.lowerBound(n,s)]}case"TopKV2":{let n=v("x",r,e,t),s=v("k",r,e,t),i=v("sorted",r,e,t),a=o.topk(n,s,i);return[a.values,a.indices]}case"UpperBound":{let n=v("sortedSequence",r,e,t),s=v("values",r,e,t);return[o.upperBound(n,s)]}case"Unique":{let n=v("x",r,e,t),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=v("x",r,e,t),s=v("axis",r,e,t),i=o.unique(n,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var NF=(r,e,t,o=ot)=>{switch(r.op){case"Const":return e[r.name];case"PlaceholderWithDefault":let n=v("default",r,e,t);return[xr(r.name,e,t)||n];case"Placeholder":return[xr(r.name,e,t)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let c=v("x",r,e,t);return[Ki(c)]}case"IdentityN":return v("x",r,e,t).map(c=>Ki(c));case"Snapshot":let s=v("x",r,e,t);return[Ki(s)];case"Shape":return[o.tensor1d(v("x",r,e,t).shape,"int32")];case"ShapeN":return v("x",r,e,t).map(c=>o.tensor1d(c.shape));case"Size":return[o.scalar(v("x",r,e,t).size,"int32")];case"Rank":return[o.scalar(v("x",r,e,t).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let i=v("x",r,e,t),a=v("data",r,e,t),l=v("message",r,e,t),u=v("summarize",r,e,t);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Xb=class{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=ae(0),this.tensorMap=new Map,Nt(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return ae(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let o=await e.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),M(()=>{let n=wr(t),s=o.length,i=n.length;y.assert(s===i,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${i} elements.`);for(let a=0;a<s;a++){let l=o[a],u=n[a];Nt(u),this.tensorMap.set(l,u)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);let o=await e.data();return M(()=>{let n=[];for(let s=0;s<o.length;s++){let i=o[s],a=this.findWithDefault(i,t);n.push(a)}return tr(n)})}findWithDefault(e,t){let o=this.tensorMap.get(e);return o??t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}};var $F=async(r,e,t,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=v("keyDType",r,e,t),s=v("valueDType",r,e,t),i=new Xb(n,s);return o.addHashTable(r.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{let n=v("tableHandle",r,e,t,o),s=v("keys",r,e,t),i=v("values",r,e,t);return[await o.getHashTableById(n.id).import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let n=v("tableHandle",r,e,t,o),s=v("keys",r,e,t),i=v("defaultValue",r,e,t);return[await o.getHashTableById(n.id).find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=v("tableHandle",r,e,t,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var EF=(r,e,t,o=ot)=>{switch(r.op){case"ResizeBilinear":{let n=v("images",r,e,t),s=v("size",r,e,t),i=v("alignCorners",r,e,t),a=v("halfPixelCenters",r,e,t);return[o.image.resizeBilinear(n,[s[0],s[1]],i,a)]}case"ResizeNearestNeighbor":{let n=v("images",r,e,t),s=v("size",r,e,t),i=v("alignCorners",r,e,t),a=v("halfPixelCenters",r,e,t);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],i,a)]}case"CropAndResize":{let n=v("image",r,e,t),s=v("boxes",r,e,t),i=v("boxInd",r,e,t),a=v("cropSize",r,e,t),l=v("method",r,e,t),u=v("extrapolationValue",r,e,t);return[o.image.cropAndResize(n,s,i,a,l,u)]}case"ImageProjectiveTransformV3":{let n=v("images",r,e,t),s=v("transforms",r,e,t),i=v("outputShape",r,e,t),a=v("fillValue",r,e,t),l=v("interpolation",r,e,t),u=v("fillMode",r,e,t);return[o.image.transform(n,s,l.toLowerCase(),u.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var RF=(r,e,t,o=ot)=>{switch(r.op){case"Equal":return[o.equal(v("a",r,e,t),v("b",r,e,t))];case"NotEqual":return[o.notEqual(v("a",r,e,t),v("b",r,e,t))];case"Greater":return[o.greater(v("a",r,e,t),v("b",r,e,t))];case"GreaterEqual":return[o.greaterEqual(v("a",r,e,t),v("b",r,e,t))];case"Less":return[o.less(v("a",r,e,t),v("b",r,e,t))];case"LessEqual":return[o.lessEqual(v("a",r,e,t),v("b",r,e,t))];case"LogicalAnd":return[o.logicalAnd(v("a",r,e,t),v("b",r,e,t))];case"LogicalNot":return[o.logicalNot(v("a",r,e,t))];case"LogicalOr":return[o.logicalOr(v("a",r,e,t),v("b",r,e,t))];case"Select":case"SelectV2":return[o.where(v("condition",r,e,t),v("a",r,e,t),v("b",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var AF=(r,e,t,o=ot)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(v("a",r,e,t),v("b",r,e,t),v("transposeA",r,e,t),v("transposeB",r,e,t))];case"Einsum":return[o.einsum(v("equation",r,e,t),...v("tensors",r,e,t))];case"Transpose":return[o.transpose(v("x",r,e,t),v("perm",r,e,t))];case"_FusedMatMul":let[n,s]=v("fusedOps",r,e,t),i=n==="biasadd",a=s==="prelu",l=v("numArgs",r,e,t),u=v("leakyreluAlpha",r,e,t);if(i){if(a&&l!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&l!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[c,p]=v("args",r,e,t);return[o.fused.matMul({a:v("a",r,e,t),b:v("b",r,e,t),transposeA:v("transposeA",r,e,t),transposeB:v("transposeB",r,e,t),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var DF=(r,e,t,o=ot)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(v("x",r,e,t),v("axis",r,e,t),v("keepDims",r,e,t))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(v("x",r,e,t),v("mean",r,e,t),v("variance",r,e,t),v("offset",r,e,t),v("scale",r,e,t),v("epsilon",r,e,t))];case"FusedBatchNormV3":return[o.batchNorm(v("x",r,e,t),v("mean",r,e,t),v("variance",r,e,t),v("offset",r,e,t),v("scale",r,e,t),v("epsilon",r,e,t))];case"LRN":return[o.localResponseNormalization(v("x",r,e,t),v("radius",r,e,t),v("bias",r,e,t),v("alpha",r,e,t),v("beta",r,e,t))];case"Softmax":return[o.softmax(v("x",r,e,t))];case"LogSoftmax":return[o.logSoftmax(v("x",r,e,t))];case"SparseToDense":return[o.sparseToDense(v("sparseIndices",r,e,t),v("outputShape",r,e,t),v("sparseValues",r,e,t),v("defaultValue",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var FF=(r,e,t,o=ot)=>{switch(r.op){case"Max":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.max(v("x",r,e,t),a,l)]}case"Mean":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.mean(v("x",r,e,t),a,l)]}case"Min":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.min(v("x",r,e,t),a,l)]}case"Sum":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.sum(v("x",r,e,t),a,l)]}case"All":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.all(v("x",r,e,t),a,l)]}case"Any":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.any(v("x",r,e,t),a,l)]}case"ArgMax":{let a=v("axis",r,e,t);return[o.argMax(v("x",r,e,t),a)]}case"ArgMin":{let a=v("axis",r,e,t);return[o.argMin(v("x",r,e,t),a)]}case"Prod":{let a=v("axis",r,e,t),l=v("keepDims",r,e,t);return[o.prod(v("x",r,e,t),a,l)]}case"Cumprod":{let a=v("axis",r,e,t),l=v("exclusive",r,e,t),u=v("reverse",r,e,t);return[o.cumprod(v("x",r,e,t),a,l,u)]}case"Cumsum":{let a=v("axis",r,e,t),l=v("exclusive",r,e,t),u=v("reverse",r,e,t);return[o.cumsum(v("x",r,e,t),a,l,u)]}case"Bincount":let n=v("x",r,e,t),s=v("weights",r,e,t),i=v("size",r,e,t);return[o.bincount(n,s,i)];case"DenseBincount":{let a=v("x",r,e,t),l=v("weights",r,e,t),u=v("size",r,e,t),c=v("binaryOutput",r,e,t);return[o.denseBincount(a,l,u,c)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var _F=(r,e,t,o=ot)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=v("n",r,e,t),s=v("axis",r,e,t),i=v("tensors",r,e,t);return i=i.slice(0,n),[o.concat(i,s)]}case"Gather":{let n=v("x",r,e,t),s=v("indices",r,e,t);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=v("axis",r,e,t),s=v("batchDims",r,e,t),i=v("x",r,e,t),a=v("indices",r,e,t);return[o.gather(i,o.cast(a,"int32"),n,s)]}case"Reverse":{let n=v("dims",r,e,t),s=[];for(let a=0;a<n.length;a++)n[a]&&s.push(a);let i=v("x",r,e,t);return[o.reverse(i,s)]}case"ReverseV2":{let n=v("axis",r,e,t),s=v("x",r,e,t);return[o.reverse(s,n)]}case"Slice":{let n=v("begin",r,e,t),s=v("size",r,e,t);return[o.slice(v("x",r,e,t),n,s)]}case"StridedSlice":{let n=v("begin",r,e,t),s=v("end",r,e,t),i=v("strides",r,e,t),a=v("beginMask",r,e,t),l=v("endMask",r,e,t),u=v("ellipsisMask",r,e,t),c=v("newAxisMask",r,e,t),p=v("shrinkAxisMask",r,e,t),m=v("x",r,e,t);return[o.stridedSlice(m,n,s,i,a,l,u,c,p)]}case"Pack":return M(()=>{let n=v("axis",r,e,t),s=v("tensors",r,e,t),i=s[0].shape,a=o.squeeze(s[0]).shape,l=s.map(u=>{let c=y.arraysEqual(u.shape,i);if(!c&&!y.arraysEqual(o.squeeze(u).shape,a))throw new Error("the input tensors shape does not match");return c?u:o.reshape(u,i)});return[o.stack(l,n)]});case"Unpack":{let n=v("axis",r,e,t),s=v("tensor",r,e,t);return o.unstack(s,n)}case"Tile":{let n=v("reps",r,e,t);return[o.tile(v("x",r,e,t),n)]}case"Split":case"SplitV":{let n=v("axis",r,e,t),s=v("numOrSizeSplits",r,e,t),i=v("x",r,e,t);return o.split(i,s,n)}case"ScatterNd":{let n=v("indices",r,e,t),s=v("values",r,e,t),i=v("shape",r,e,t);return[o.scatterND(n,s,i)]}case"GatherNd":{let n=v("x",r,e,t),s=v("indices",r,e,t);return[o.gatherND(n,s)]}case"SparseToDense":{let n=v("sparseIndices",r,e,t),s=v("outputShape",r,e,t),i=v("sparseValues",r,e,t),a=v("defaultValue",r,e,t);return[o.sparseToDense(n,i,s,i.dtype===a.dtype?a:o.cast(a,i.dtype))]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var OF=(r,e,t,o=ot)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:i,reverseIndexMap:a}=o.sparse.sparseFillEmptyRows(v("indices",r,e,t),v("values",r,e,t),v("denseShape",r,e,t),v("defaultValue",r,e,t));return[n,s,i,a]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(v("inputIndices",r,e,t),v("inputShape",r,e,t),v("newShape",r,e,t));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(v("data",r,e,t),v("indices",r,e,t),v("segmentIds",r,e,t))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(v("data",r,e,t),v("indices",r,e,t),v("segmentIds",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var PF=(r,e,t,o=ot)=>{switch(r.op){case"FFT":return[o.fft(v("x",r,e,t))];case"IFFT":return[o.ifft(v("x",r,e,t))];case"RFFT":return[o.rfft(v("x",r,e,t))];case"IRFFT":return[o.irfft(v("x",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var LF=(r,e,t,o=ot)=>{switch(r.op){case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(v("data",r,e,t),v("dataSplits",r,e,t),v("separator",r,e,t),v("nGramWidths",r,e,t),v("leftPad",r,e,t),v("rightPad",r,e,t),v("padWidth",r,e,t),v("preserveShortSequences",r,e,t));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:i}=o.string.stringSplit(v("input",r,e,t),v("delimiter",r,e,t),v("skipEmpty",r,e,t));return[n,s,i]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(v("input",r,e,t),v("numBuckets",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var zF=(r,e,t,o=ot)=>{switch(r.op){case"Cast":return[o.cast(v("x",r,e,t),v("dtype",r,e,t))];case"ExpandDims":{let n=v("axis",r,e,t);return[o.expandDims(v("x",r,e,t),n)]}case"Squeeze":{let n=v("axis",r,e,t);return[o.squeeze(v("x",r,e,t),n)]}case"Reshape":return[o.reshape(v("x",r,e,t),v("shape",r,e,t))];case"MirrorPad":return[o.mirrorPad(v("x",r,e,t),v("padding",r,e,t),v("mode",r,e,t))];case"PadV2":case"Pad":return[o.pad(v("x",r,e,t),v("padding",r,e,t),v("constantValue",r,e,t))];case"SpaceToBatchND":{let n=v("blockShape",r,e,t),s=v("paddings",r,e,t);return[o.spaceToBatchND(v("x",r,e,t),n,s)]}case"BatchToSpaceND":{let n=v("blockShape",r,e,t),s=v("crops",r,e,t);return[o.batchToSpaceND(v("x",r,e,t),n,s)]}case"DepthToSpace":{let n=v("blockSize",r,e,t),s=v("dataFormat",r,e,t).toUpperCase();return[o.depthToSpace(v("x",r,e,t),n,s)]}case"BroadcastTo":return[o.broadcastTo(v("x",r,e,t),v("shape",r,e,t))];case"BroadcastArgs":return[o.broadcastArgs(v("s0",r,e,t),v("s1",r,e,t))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function oT(r,e,t,o,n=M){let s=((i,a,l)=>{switch(i.category){case"arithmetic":return n(()=>dF(i,a,l));case"basic_math":return n(()=>hF(i,a,l));case"control":return wF(i,a,l);case"convolution":return n(()=>IF(i,a,l));case"creation":return n(()=>vF(i,a,l));case"dynamic":return TF(i,a,l);case"evaluation":return n(()=>kF(i,a,l));case"image":return n(()=>EF(i,a,l));case"graph":return n(()=>NF(i,a,l));case"logical":return n(()=>RF(i,a,l));case"matrices":return n(()=>AF(i,a,l));case"normalization":return n(()=>DF(i,a,l));case"reduction":return n(()=>FF(i,a,l));case"slice_join":return n(()=>_F(i,a,l));case"sparse":return n(()=>OF(i,a,l));case"spectral":return n(()=>PF(i,a,l));case"string":return n(()=>LF(i,a,l));case"transformation":return n(()=>zF(i,a,l));case"hash_table":return $F(i,a,l,o);case"custom":let u=Fb(i.op);if(u&&u.customExecutor)return u.customExecutor(new Hb(i,a,l));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,e,t);return y.isPromise(s)?s.then(i=>[].concat(i)):[].concat(s)}var ig=class{constructor(e={},t={},o={},n={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=o,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let o=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(o))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(t=>t.id===0&&t.iterationId===0?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}};function nT(r,e,t,o){let n=new Set,s=[],i=null,a=null,l=new Set,u=Object.keys(r).map(m=>uo(m)[0]),c=[];o!=null&&(c=o.map(m=>uo(m.name)[0]));let p=[...e];for(;p.length>0;){let m=p.pop();if((sT(m)||$ee(m)||Eee(m))&&i==null&&(i=m,a=i.children.map(f=>f.name).filter(f=>n.has(f))),n.add(m.name),t[m.name]==null&&u.indexOf(m.name)===-1&&c.indexOf(m.name)===-1){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(f=>{l.has(f.name)||(l.add(f.name),p.push(f))})}}return{inputs:r,outputs:e,usedNodes:n,missingInputs:s,dynamicNode:i,syncInputs:a}}function BF(r,e,t){let{usedNodes:o,inputs:n}=t,s=[],i=Object.keys(n).map(c=>uo(c)[0]).map(c=>r.nodes[c]),a=r.initNodes;i.forEach(c=>{o.has(c.name)&&s.push(c)}),r.weights.forEach(c=>{o.has(c.name)&&s.push(c)}),a?.forEach(c=>{o.has(c.name)&&s.push(c)});let l=new Set,u=[];for(;s.length>0;){let c=s.pop();l.add(c.name),e[c.name]||u.push(c),c.children.forEach(p=>{!l.has(p.name)&&o.has(p.name)&&p.inputs.every(m=>l.has(m.name))&&s.push(p)})}return u}var Tee=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],kee=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Nee=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function sT(r){return Tee.indexOf(r.op)>=0}function $ee(r){return kee.indexOf(r.op)>=0}function Eee(r){return Nee.indexOf(r.op)>=0}var op=class{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,e.functions!=null&&Object.keys(e.functions).forEach(o=>{this._functionExecutorMap[o]=new op(e.functions[o],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map(o=>e[o].map(n=>n.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){let o=e.map(s=>s.name).sort(),n=t.map(s=>s.name).sort();return o.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)}compile(e,t){let o=nT(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:i}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let a=t.map(u=>u.name),l=Object.keys(e);throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${l}]. Missing the following inputs: [${n}]`)}return BF(this.graph,this.weightMap,o)}execute(e,t){e=this.mapInputs(e);let o=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let n=o.map(p=>this.graph.nodes[uo(p)[0]]),s=t.map(p=>uo(p)[0]),i=s.map(p=>this.graph.nodes[p]);this.resetIntermediateTensors(),i.length===0&&(i=this._outputs);let a=this.getCompilationKey(n,i),l=this.compiledMap.get(a);l==null&&(l=this.compile(e,i),this.compiledMap.set(a,l));let u={},c={};return M(()=>{let p=new ig(this.weightMap,u,c,this.functionExecutorMap),m=Object.assign({},this.weightMap);Object.keys(e).forEach(h=>{let[g,x]=uo(h),b=[];b[x]=e[h],m[g]=b});let f=this.getFrozenTensorIds(m),d={};for(let h=0;h<l.length;h++){let g=l[h];if(!m[g.name]){let x=oT(g,m,p,this._resourceManager);if(y.isPromise(x))throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);m[g.name]=x,this.checkTensorForDisposal(g.name,g,m,p,f,s,d)}}return this.parent==null&&p.dispose(f),t.map(h=>xr(h,m,p))})}getFrozenTensorIds(e){let t=[].concat.apply([],Object.keys(e).map(o=>e[o]).map(o=>o.map(n=>n.id)));return new Set(t)}checkTensorForDisposal(e,t,o,n,s,i,a){t.category==="control"||i.indexOf(e)!==-1||(o[e].forEach(l=>{l!=null&&(a[l.id]=(a[l.id]||0)+t.children.length)}),t.inputs.forEach(l=>{if(l.category!=="control"){let u=cF(l.name,o,n);u?.forEach(c=>{if(c&&!c.kept&&!s.has(c.id)){let p=a[c.id];if(p===1){if(!this.keepTensorForDebug)c.dispose();else{let[m,f]=Xs(t.name,n);this.intermediateTensors[m]?this.intermediateTensors[m][f]=c:(this.intermediateTensors[m]=[],this.intermediateTensors[m][f]=c)}delete a[c.id]}else p!=null&&a[c.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){!this.intermediateTensors||(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(t=>t.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){!this.tensorsMap||Object.keys(this.tensorsMap).forEach(e=>{this.tensorsMap[e].forEach(o=>{o&&!o.kept&&!o.isDisposed&&!this.keepIds.has(o.id)&&o.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(let e in this.intermediateTensors)this.intermediateTensors[e].forEach(t=>t.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t,o=!1,n={},s={}){o||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=D().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(c){console.warn(c.message)}this.resetIntermediateTensors();let i=new ig(this.weightMap,n,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,i,t,o);let a=t.map(c=>xr(c,this.tensorsMap,i)),l=a.map(c=>c.id),u=Object.keys(e).map(c=>e[c].id);return this.keepIds=new Set([...l,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),this.parent==null&&i.dispose(this.keepIds),a}async executeFunctionAsync(e,t,o){let n=e.reduce((s,i,a)=>(s[this.inputs[a].name]=i,s),{});return this._executeAsync(n,this.outputNodes,!0,t,o)}async executeWithControlFlow(e,t,o,n){let s=Object.keys(e),i=s.map(C=>this.graph.nodes[uo(C)[0]]),a=o.map(C=>uo(C)[0]),l=a.map(C=>this.graph.nodes[C]);l.length===0&&(l=this._outputs);let{usedNodes:u,missingInputs:c,dynamicNode:p,syncInputs:m}=nT(e,l,this.weightMap,this._initNodes),f=[...i,...this.graph.weights,...this._initNodes||[]].map(C=>({node:C,contexts:t.currentContext})),d=Object.assign({},this.weightMap);Object.keys(e).forEach(C=>{let[S,I]=uo(C),N=[];N[I]=e[C],d[S]=N});let h={},g=this.getFrozenTensorIds(d),x={};for(;f.length>0;){let C=this.processStack(i,f,t,d,x,g,a,h,u);await Promise.all(C)}p==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let b=l.filter(C=>!sT(C)&&!xr(C.name,d,t)).map(C=>C.name);if(b.length>0){let C="";throw p!=null&&(C=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${C}`)}return d}processStack(e,t,o,n,s,i,a,l,u){let c=[];for(;t.length>0;){let p=t.pop();o.currentContext=p.contexts;let m="";if(p.node.op==="Enter"&&v("isConstant",p.node,n,o)&&([m]=Xs(p.node.name,o)),n[p.node.name]==null){let f=oT(p.node,n,o,this._resourceManager);m||([m]=Xs(p.node.name,o));let d=o.currentContext;y.isPromise(f)?c.push(f.then(h=>(n[m]=h,o.currentContext=d,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,t,o,n,s,u),h))):(n[m]=f,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,t,o,n,s,u))}else this.processChildNodes(p.node,t,o,n,s,u)}return c}processChildNodes(e,t,o,n,s,i){e.children.forEach(a=>{let[l]=Xs(a.name,o);s[l]||!i.has(a.name)||(a.op==="Merge"?a.inputNames.some(u=>!!xr(u,n,o))&&(s[l]=!0,t.push({contexts:o.currentContext,node:a})):a.inputNames.every(u=>!!xr(u,n,o))&&(s[l]=!0,t.push({contexts:o.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(t=>t.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{let o=e[t],[n]=uo(t),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let i=s.attrParams.shape.value,a=i.length===o.shape.length&&o.shape.every((l,u)=>i[u]===-1||i[u]===l);y.assert(a,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&y.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(e){let t={};for(let o in e)if(this._signature!=null&&this._signature.inputs!=null&&this._signature.inputs[o]!=null){let n=this._signature.inputs[o];t[n.name]=e[o]}else t[o]=e[o];return t}checkInputs(e){let t=Object.keys(e).filter(o=>{let[n]=uo(o);return this.graph.nodes[n]==null});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(t=>this._signature!=null&&this._signature.outputs!=null&&this._signature.outputs[t]!=null?this._signature.outputs[t].name:t,{})}checkOutputs(e){e.forEach(t=>{let[o]=uo(t);if(!this.graph.nodes[o])throw new Error(`The output '${t}' is not found in the graph`)})}};var jb=class{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}};var Ree="?tfjs-format=file",Aee="model.json",Yb=class{constructor(e,t={},o=Li){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=o,t==null&&(this.loadOptions={}),this.resourceManager=new jb}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){let e=this.modelUrl;if(e.load!=null)this.handler=e;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{let t=this.io.getLoadHandlers(e,this.loadOptions);if(t.length===0)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let e=this.handler.load();return y.isPromise(e)?e.then(t=>this.loadSync(t)):this.loadSync(e)}loadSync(e){this.artifacts=e;let t=this.artifacts.modelTopology,o=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(o=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}this.signature=o,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;let n=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new op(sg.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,e.modelInitializer!=null&&e.modelInitializer.node!=null){let s=sg.Instance.transformGraph(e.modelInitializer);this.initializer=new op(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if(typeof e=="string"){let o=this.io.getSaveHandlers(e);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${e}'`);e=o[0]}if(e.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){let o=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){let n=o instanceof Ve?[o]:o,s={};return n.forEach((i,a)=>s[this.structuredOutputKeys[a]]=i),s}return o}normalizeInputs(e){if(!(e instanceof Ve)&&!Array.isArray(e))return e;if(e=Array.isArray(e)?e:[e],e.length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,o,n)=>(t[o]=e[n],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let o=this.executor.execute(e,t);return o.length>1?o:o[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let o=await this.executor.executeAsync(e,t);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,o)=>(t[o]=[e[o]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}};async function iT(r,e={},t=Li){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");e==null&&(e={}),e.fromTFHub&&typeof r=="string"&&(r=Dee(r));let o=new Yb(r,e,t);return await o.load(),o}function Dee(r){return r.endsWith("/")||(r=r+"/"),`${r}${Aee}${Ree}`}var YF=pd(Dd());var qF=pd(Dd());function VF(r,e){return GF(r,e)}function GF(r,e,t=new Map,o=new Set){if(r==null)return null;if(typeof Blob=="function"&&r instanceof Blob)return r.slice();if(o.has(r))throw new Error("Circular references are not supported.");if(t.has(r))return t.get(r);let n=e(r);if(n.recurse&&n.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(n.recurse)if(uf(r)){let s=Array.isArray(r)?[]:{};o.add(r);for(let i in r){let a=r[i],l=GF(a,e,t,o);s[i]=l}return o.delete(r),r.__proto__&&(s.__proto__=r.__proto__),s}else throw new Error(`Can't recurse into non-iterable type: ${r}`);else return t.set(r,n.value),n.value}function UF(r,e=aT){return WF(r,e)}function WF(r,e,t=new Set){let o=r[0];if(t.has(o))throw new Error("Circular references are not supported.");let n=e(r);if(n.recurse&&n.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(n.recurse)if(uf(o)){let s=Array.isArray(o)?[]:{};t.add(o);for(let i in o){let a=r.map(u=>u[i]),l=WF(a,e,t);s[i]=l}return t.delete(o),s}else throw new Error(`Can't recurse into non-iterable type: ${o}`);else return n.value}function aT(r){return r===null?null:uf(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}function uf(r){let e=!1;if(D().get("IS_BROWSER"))e=r instanceof TextDecoder;else{let{StringDecoder:t}=MF();e=r instanceof t}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof Ve)&&!(r instanceof Promise)&&!e)}function HF(r){return r==null||_ee(r)||Array.isArray(r)||typeof r=="object"&&r instanceof Ve||y.isTypedArray(r)}function _ee(r){return r===null||typeof r!="object"&&typeof r!="function"}function KF(r){return VF(r,Oee)}function Oee(r){return r instanceof Ve?{value:r.clone(),recurse:!1}:uf(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}var cf=class{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,e==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(let t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let t=this.wrap(this.begin+e),o=this.get(t);return this.set(t,this.pop()),o}};var np=class extends cf{constructor(){super(np.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){let e=this.capacity*2,t=new Array(e),o=this.length();for(let n=0;n<o;n++)t[n]=this.get(this.wrap(this.begin+n));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=o}};np.INITIAL_CAPACITY=32;function XF(r){return new lT(r)}function CT(r){return new uT(r)}function jF(r,e){return new Zb(r,e)}var Rr=class{async toArray(){let e=[],t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){let e=this.prefetch(100),t=[],o=await e.next();for(;!o.done;)t.push(o.value),o=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),o=e(t.value);for(;!t.done&&o;)t=await this.next(),o=e(t.value)}handleErrors(e){return new gT(this,e)}filter(e){return new dT(this,e)}map(e){return new hT(this,e)}mapAsync(e){return new Qb(this,e)}serialMapAsync(e){return new Qb(this,e).serial()}flatmap(e){return new xT(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(t=>t===!0)}rowMajorBatch(e,t=!0){return new fT(this,e,t)}columnMajorBatch(e,t=!0,o=aT){return this.rowMajorBatch(e,t).map(s=>UF(s,o))}concatenate(e,t){return new Zb(XF([this,e]),t)}take(e){return e<0||e==null?this:new mT(this,e)}skip(e){return e<0||e==null?this:new pT(this,e)}prefetch(e){return new Jb(this,e)}shuffle(e,t){return new bT(this,e,t)}serial(){return new cT(this)}},lT=class extends Rr{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let e=this.items[this.trav];return this.trav++,{value:KF(e),done:!1}}},uT=class extends Rr{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}},cT=class extends Rr{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}},pT=class extends Rr{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let e=await this.upstream.next();if(e.done)return e;ke(e.value)}return this.upstream.next()}},mT=class extends Rr{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}},fT=class extends Rr{constructor(e,t,o=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=o,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let e=[];for(;e.length<this.batchSize;){let t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}},dT=class extends Rr{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;ke(e.value)}}},hT=class extends Rr{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=_s.getTensorsInContainer(e.value),o=this.transform(e.value),n=_s.getTensorsInContainer(o);for(let s of t)_s.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},gT=class extends Rr{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}},Qb=class extends Rr{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=_s.getTensorsInContainer(e.value),o=await this.transform(e.value),n=_s.getTensorsInContainer(o);for(let s of t)_s.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},ag=class extends Rr{constructor(){super(),this.outputQueue=new np,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}},xT=class extends ag{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let e=await this.upstream.next();if(e.done)return!1;let t=_s.getTensorsInContainer(e.value),o=this.transform(e.value),n=_s.getTensorsInContainer(o);this.outputQueue.pushAll(o);for(let s of t)_s.isTensorInList(s,n)||s.dispose();return!0}},Zb=class extends Rr{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,this.iterator==null){let o=await this.moreIterators.next();if(o.done)return{value:null,done:!0};this.iterator=o.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}},yT;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(yT||(yT={}));var Jb=class extends Rr{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new cf(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}},bT=class extends Jb{constructor(e,t,o){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=qF.alea(o||y.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(t.done)this.upstreamExhausted=!0;else return this.refill(),t}return{value:null,done:!0}}};var sp=class{constructor(){this.size=null}batch(e,t=!0){let o=this;y.assert(e>0,()=>`batchSize needs to be positive, but it is
      ${e}`);let n;return this.size===1/0||this.size==null?n=this.size:t?n=Math.ceil(this.size/e):n=Math.floor(this.size/e),qi(async()=>(await o.iterator()).columnMajorBatch(e,t,Lee),n)}concatenate(e){let t=this,o;return this.size===1/0||e.size===1/0?o=1/0:this.size!=null&&e.size!=null?o=this.size+e.size:o=null,qi(async()=>(await t.iterator()).concatenate(await e.iterator()),o)}filter(e){let t=this,o;return this.size===1/0?o=1/0:o=null,qi(async()=>(await t.iterator()).filter(n=>M(()=>e(n))),o)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){let t=this;return qi(async()=>(await t.iterator()).map(o=>M(()=>e(o))),this.size)}mapAsync(e){let t=this;return qi(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(e==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let t=this;return qi(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){let t=this,o;return this.size!=null&&e>0?o=this.size*e:e===0?o=0:this.size!=null&&(e===void 0||e<0)?o=1/0:o=null,qi(async()=>{let n=CT(async()=>({value:await t.iterator(),done:!1}));return jF(n.take(e))},o)}skip(e){let t=this,o;return this.size!=null&&e>=0&&this.size>=e?o=this.size-e:this.size!=null&&(this.size<e||e===void 0||e<0)?o=0:o=null,qi(async()=>(await t.iterator()).skip(e),o)}shuffle(e,t,o=!0){if(e==null||e<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,s=YF.alea(t||y.now().toString());return qi(async()=>{let i=s.int32();return o&&(i+=s.int32()),(await n.iterator()).shuffle(e,i.toString())},this.size)}take(e){let t=this,o;return this.size!=null&&this.size>e?o=e:this.size!=null&&this.size<=e?o=this.size:o=null,qi(async()=>(await t.iterator()).take(e),o)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}};sp.MAX_BUFFER_SIZE=1e4;function qi(r,e=null){return new class extends sp{constructor(){super(...arguments),this.size=e}async iterator(){return r()}}}function Lee(r){if(r===null)return null;let e=r[0];return HF(e)?{value:zee(r),recurse:!1}:{value:null,recurse:!0}}function zee(r){if(r.length===0)throw new Error("Can't make a batch of zero elements.");return r[0]instanceof Ve?tr(r):Tr(r)}var vxt=Symbol("out"),Txt=Symbol("field"),kxt=Symbol("quote"),Nxt=Symbol("quoteafterquote"),$xt=Symbol("quoteinquote");function Q(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}var Xee=vt.whereImpl,ip=class extends cn{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new ci(this,sr())}nextDataId(){return ip.nextDataId++}write(e,t,o){this.firstUse&&(this.firstUse=!1,D().get("IS_NODE")&&w.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:e,dtype:o,refCount:1}),n}makeTensorInfo(e,t,o){let n;if(t==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,e,t)}else n=this.write(o,e,t);return{dataId:n,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){let t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){let t=this.data.get(e);t.refCount--}}move(e,t,o,n,s){this.data.set(e,{values:t,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:o}=this.data.get(e);if(t==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return w.mergeRealAndImagArrays(n,s)}return this.data.get(e).values}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return te(e.shape,e.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return te(e.shape,e.dtype,t)}makeOutput(e,t,o){return sr().makeTensorFromTensorInfo(this.makeTensorInfo(t,o,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(e);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=y.now();return e(),{kernelMs:y.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Q([e],"where");let t=this.readSync(e.dataId);return Xee(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};ip.nextDataId=0;var qT={};lt(qT,{addImpl:()=>IT,bincountImpl:()=>ff,bincountReduceImpl:()=>eC,castImpl:()=>ST,ceilImpl:()=>vT,concatImpl:()=>tC,equalImpl:()=>TT,expImpl:()=>NT,expm1Impl:()=>ET,floorImpl:()=>RT,gatherNdImpl:()=>rC,gatherV2Impl:()=>oC,greaterEqualImpl:()=>DT,greaterImpl:()=>AT,lessEqualImpl:()=>_T,lessImpl:()=>FT,linSpaceImpl:()=>nC,logImpl:()=>OT,maxImpl:()=>sC,maximumImpl:()=>PT,minimumImpl:()=>LT,multiplyImpl:()=>lg,negImpl:()=>zT,notEqualImpl:()=>BT,prodImpl:()=>MT,raggedTensorToTensorImpl:()=>iC,rangeImpl:()=>aC,rsqrtImpl:()=>VT,scatterImpl:()=>$l,sigmoidImpl:()=>I_,simpleAbsImpl:()=>wT,sliceImpl:()=>UT,sparseFillEmptyRowsImpl:()=>lC,sparseReshapeImpl:()=>uC,sparseSegmentReductionImpl:()=>gf,sqrtImpl:()=>k_,squaredDifferenceImpl:()=>WT,stridedSliceImpl:()=>cC,stringNGramsImpl:()=>pC,stringSplitImpl:()=>mC,stringToHashBucketFastImpl:()=>fC,subImpl:()=>KT,tileImpl:()=>dC,topKImpl:()=>hC,transposeImpl:()=>df,uniqueImpl:()=>gC});function wT(r){let e=new Float32Array(r.length);for(let t=0;t<r.length;++t)e[t]=Math.abs(r[t]);return e}var jee=r=>{let{x:e}=r.inputs,t=r.backend;Q(e,"abs");let o=new Float32Array(y.sizeFromShape(e.shape)),n=t.data.get(e.dataId).values;return o=wT(n),t.makeOutput(o,e.shape,e.dtype)},QF={kernelName:mn,backendName:"cpu",kernelFunc:jee};function je(r){return(e,t,o,n,s)=>{let i=w.assertAndGetBroadcastShape(e,t),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=e.length,m=t.length,f=y.computeStrides(e),d=y.computeStrides(t),h=w.getBroadcastDims(e,i),g=w.getBroadcastDims(t,i);if(h.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),C=b.slice(-p);h.forEach($=>C[$]=0);let S=y.locToIndex(C,p,f),I=b.slice(-m);g.forEach($=>I[$]=0);let N=y.locToIndex(I,m,d);c[x]=r(o[S],n[N])}return[c,i]}}function yr(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,a=t.makeTensorInfo(o.shape,"complex64"),l=t.data.get(a.dataId);return l.complexTensorInfos={real:t.makeTensorInfo(o.shape,"float32",s),imag:t.makeTensorInfo(n.shape,"float32",i)},a}var ZF={kernelName:xi,backendName:"cpu",kernelFunc:yr};function pf(r,e,t="float32"){if(t==="complex64"){let n=pf(r,e,"float32"),s=pf(r,e,"float32");return yr({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(e),t);return r.makeTensorInfo(e,t,o)}function Vr(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var JF={kernelName:So,backendName:"cpu",kernelFunc:Vr};function js(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.data.get(o.dataId).complexTensorInfos.real,s=t.data.get(n.dataId).values;return t.makeTensorInfo(n.shape,n.dtype,s)}var e_={kernelName:Ti,backendName:"cpu",kernelFunc:js};function ST(r,e,t,o){if(o==="int32"){let n=Int32Array.from(r);return[e,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],t),[s,i]=je((a,l)=>a!==l?1:0)(e,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${t} to ${o}`)}function Ys(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Vr({inputs:{x:n},backend:t});let c=pf(t,n.shape,n.dtype),p=Ys({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),m=yr({inputs:{real:p,imag:c},backend:t});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=js({inputs:{input:n},backend:t}),p=Ys({inputs:{x:c},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=Vr({inputs:{x:n},backend:t});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=t.data.get(n.dataId).values,[a,l,u]=ST(i,n.shape,n.dtype,s);return t.makeTensorInfo(a,l,u)}var t_={kernelName:go,backendName:"cpu",kernelFunc:Ys};function tt(r,e,t,o){return t==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Q([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?w.fromUint8ToStringArray(u):u,m=i.dtype==="string"?w.fromUint8ToStringArray(c):c,f=o||i.dtype,[d,h]=e(i.shape,a.shape,p,m,f);return l.makeTensorInfo(h,f,d)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=Ys({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,d=l.data.get(m.dataId).values,h=Ys({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(h.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,C=l.data.get(x.dataId).values,S=l.data.get(b.dataId).values,[I,N,$]=t(i.shape,a.shape,f,d,C,S),R=l.makeTensorInfo($,"float32",I),F=l.makeTensorInfo($,"float32",N),_=yr({inputs:{real:R,imag:F},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(h),l.disposeIntermediateTensorInfo(R),l.disposeIntermediateTensorInfo(F),_}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=e(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function mf(r){return(e,t,o,n,s,i)=>{let a=w.assertAndGetBroadcastShape(e,t),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=w.getBroadcastDims(e,a),d=w.getBroadcastDims(t,a),h=w.mergeRealAndImagArrays(o,n),g=w.mergeRealAndImagArrays(s,i),x=e.length,b=y.computeStrides(e),C=t.length,S=y.computeStrides(t);if(f.length+d.length===0)for(let I=0;I<p.length;I++){let N=I%h.length,$=I%g.length,R=r(h[N*2],h[N*2+1],g[$*2],g[$*2+1]);p[I]=R.real,m[I]=R.imag}else for(let I=0;I<p.length;I++){let N=y.indexToLoc(I,u,c),$=N.slice(-x);f.forEach(V=>$[V]=0);let R=y.locToIndex($,x,b),F=N.slice(-C);d.forEach(V=>F[V]=0);let _=y.locToIndex(F,C,S),B=r(h[R*2],h[R*2+1],g[_*2],g[_*2+1]);p[I]=B.real,m[I]=B.imag}return[p,m,a]}}var IT=je((r,e)=>r+e),Yee=mf((r,e,t,o)=>({real:r+t,imag:e+o})),Ja=tt(Wr,IT,Yee),r_={kernelName:Wr,backendName:"cpu",kernelFunc:Ja};function ff(r,e,t,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,t);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=e[a]:i[l]+=1)}return i}function eC(r,e,t,o=!1){let n=r.shape[0],s=r.shape[1],i=te([n,t],e.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=t||(o?i.set(1,a,u):e.size>0?i.set(i.get(a,u)+e.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function co(r){return(e,t,o)=>{let n=y.getTypedArrayFromDType(t,e.length);for(let s=0;s<e.length;++s)n[s]=r(e[s],o);return n}}function $e(r,e,t){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Q(i,r),i.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=t||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=e(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function Qs(r,e,t){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Q(i,r),i.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=t||i.dtype,c=e(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var vT=co(r=>Math.ceil(r)),Qee=Qs(xo,vT),o_={kernelName:xo,backendName:"cpu",kernelFunc:Qee};function tC(r,e,t,o){let n=y.getArrayFromDType(t,y.sizeFromShape(e));if(o&&t!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=t==="string"?w.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*e[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var TT=je((r,e)=>r===e?1:0),kT=tt(bn,TT,null,"bool"),n_={kernelName:bn,backendName:"cpu",kernelFunc:kT};var NT=co(r=>Math.exp(r)),$T=Qs(yo,NT,"float32"),s_={kernelName:yo,backendName:"cpu",kernelFunc:$T};var ET=co(r=>Math.expm1(r)),Zee=Qs(bo,ET),i_={kernelName:bo,backendName:"cpu",kernelFunc:Zee};var RT=co(r=>Math.floor(r)),Jee=Qs(Co,RT),a_={kernelName:Co,backendName:"cpu",kernelFunc:Jee};function rC(r,e,t,o,n,s,i,a,l){let u=te([o,s],t);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let d=r[c*n+f];m+=d*i[f],p.push(d)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=e.get(...e.indexToLoc(m*s+f))}return u}function oC(r,e,t){let o=te(t,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=e.locToIndex([a,l]);i[2]=e.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var AT=je((r,e)=>r>e?1:0),ete=tt(wn,AT,null,"bool"),l_={kernelName:wn,backendName:"cpu",kernelFunc:ete};var DT=je((r,e)=>r>=e?1:0),tte=tt(wo,DT,null,"bool"),u_={kernelName:wo,backendName:"cpu",kernelFunc:tte};var FT=je((r,e)=>r<e?1:0),rte=tt(In,FT,null,"bool"),c_={kernelName:In,backendName:"cpu",kernelFunc:rte};var _T=je((r,e)=>r<=e?1:0),ote=tt(vn,_T,null,"bool"),p_={kernelName:vn,backendName:"cpu",kernelFunc:ote};function nC(r,e,t){let o=(e-r)/(t-1),n=y.makeZerosTypedArray(t,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var OT=co(r=>Math.log(r)),nte=Qs(Io,OT),m_={kernelName:Io,backendName:"cpu",kernelFunc:nte};function sC(r,e,t,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(t));for(let s=0;s<n.length;++s){let i=s*e,a=r[i];for(let l=0;l<e;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var PT=je((r,e)=>Math.max(r,e)),ste=tt(vo,PT),f_={kernelName:vo,backendName:"cpu",kernelFunc:ste};var LT=je((r,e)=>Math.min(r,e)),ite=tt(To,LT),d_={kernelName:To,backendName:"cpu",kernelFunc:ite};var lg=je((r,e)=>r*e),ate=mf((r,e,t,o)=>({real:r*t-e*o,imag:r*o+e*t})),ap=tt(ko,lg,ate),h_={kernelName:ko,backendName:"cpu",kernelFunc:ap};function zT(r,e,t){let o=y.createScalarValue(-1,t);return lg([],e,o,r,t)}function lte(r){let{inputs:e,backend:t}=r,{x:o}=e;Q(o,"neg");let n=t.data.get(o.dataId).values,[s,i]=zT(n,o.shape,o.dtype);return t.makeTensorInfo(i,o.dtype,s)}var g_={kernelName:Tn,backendName:"cpu",kernelFunc:lte};var BT=je((r,e)=>r!==e?1:0),ute=tt(kn,BT,null,"bool"),x_={kernelName:kn,backendName:"cpu",kernelFunc:ute};function df(r,e,t,o,n){let s=e.length,i=y.sizeFromShape(e),a=y.computeStrides(e),l=y.computeStrides(n),u=y.getTypedArrayFromDType(t,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let d=0;d<m.length;d++)m[d]=p[o[d]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function Pt(r){let{inputs:e,attrs:t,backend:o}=r,{x:n}=e,{perm:s}=t;Q(n,"transpose");let i=n.shape.length,a=new Array(i);for(let p=0;p<a.length;p++)a[p]=n.shape[s[p]];let l=o.data.get(n.dataId).values,u=df(l,n.shape,n.dtype,s,a);return{dataId:o.write(u,a,n.dtype),shape:a,dtype:n.dtype}}var y_={kernelName:qo,backendName:"cpu",kernelFunc:Pt};function MT(r,e,t,o){let[n,s]=w.computeOutAndReduceShapes(r,o),i=Ye(e,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=t[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}function cte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;Q(n,"prod");let a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=w.getAxesPermutation(l,a),c=l,p=n,m=[];u!=null&&(p=Pt({inputs:{x:n},backend:t,attrs:{perm:u}}),m.push(p),c=w.getInnerMostAxes(c.length,a));let f=t.data.get(p.dataId).values,{outVals:d,outShape:h,outDtype:g}=MT(p.shape,p.dtype,f,c),x=h;return i&&(x=w.expandShapeToKeepDim(h,l)),m.forEach(b=>t.disposeIntermediateTensorInfo(b)),t.makeTensorInfo(x,g,d)}var b_={kernelName:$n,backendName:"cpu",kernelFunc:cte};var Zs=w.RowPartitionType,hf=class{constructor(e,t,o,n,s,i,a,l,u,c){this.shape=e,this.shapeShape=t,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=w.getRowPartitionTypesHelper(c),this.raggedRank=w.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Zs.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Zs.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Zs.VALUE_ROWIDS:return hf.getMaxWidthValueRowID(t);case Zs.ROW_SPLITS:return hf.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Zs[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(t===0||t===1)return 0;let o=0;for(let n=0;n<t-1;++n){let s=e[n+1]-e[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(e){let t=e.length;if(t===0)return 0;let o=0,n=e[0],s=0;for(let i=1;i<t;++i){let a=e[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(t-o,s)}tensorShapeFromTensor(e,t,o=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return w_(e,o)}calculateOutputSize(e){let t=this.valuesShape,o=this.defaultValueShape;w.validateDefaultValueShape(o,t);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=w.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);i[0]<0&&(i[0]=e);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(e,t,o){let n=Math.min(e,o),s=[],i=0;for(let a=0;a<n;++a,i+=t)s.push(i);for(let a=n;a<e;++a)s.push(-1);return y.assert(s.length===e,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(e,t,o,n){let s=e.length,i=[];for(let a=0;a<s-1;++a){let l=e[a+1]-e[a],u=Math.min(n,l),c=t[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==e[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,o,n){let s=e.length,i=[];if(s===0)return[];let a=0,l=e[0];if(l>=t.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${t.length}`);let u=t[l];i.push(u);for(let c=1;c<s;++c){let p=e[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=t.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${t.length}`);u=t[p]}i.push(u)}if(i.length!==e.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(e,t,o,n){let s=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case Zs.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,o,n);case Zs.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,o,n);default:throw new Error(`Unsupported partition type: ${Zs[i]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case Zs.FIRST_DIM_SIZE:return e[0];case Zs.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Zs.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Zs[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let t=this.getFirstDimensionSize(),o=this.calculateOutputSize(t),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=w_(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(t,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(e,t,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(e+1);let l=y.sizeFromShape(a),u=t.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let d=this.defaultValueShape;M(()=>{let h=O(c,d);c=Os(h,a).dataSync()})}let p=0,m=0,f=0;for(let d=0;d<=u;++d){let h=d<u?t[d]:-1;if(h===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;C_(x,g,b)}if(d>=u){let g=o.length;h=Math.floor(g/l)}if(h>f)if(this.defaultValue.length===1)i.subarray(f*l,h*l).fill(this.defaultValue[0]),f=h;else for(;h>f;){let g=i.slice(f*l);C_(g,c,l),++f}h<0?(p=d+1,m=f):(p=d,m=f,f=m+1)}}};function C_(r,e,t){for(let o=0;o<t;o++)r[o]=e[o]}function w_(r,e){let t=[];for(let o of r){if(o<0){if(!e)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}t.push(o)}return t}function iC(r,e,t,o,n,s,i,a,l,u){return new hf(r,e,t,o,n,s,i,a,l,u).compute()}function aC(r,e,t,o){let n=r===e,s=r<e&&t<0,i=e<r&&t>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((e-r)/t)),l=y.makeZerosTypedArray(a,o);e<r&&t===1&&(t=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+t;return l}var VT=co(r=>1/Math.sqrt(r)),pte=Qs(No,VT),S_={kernelName:No,backendName:"cpu",kernelFunc:pte};function $l(r,e,t,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=e.values;if(o===0)return te(t,e.dtype);let f=te(c,e.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let d=0;d<s;d++){let h=[],g=0;for(let x=0;x<i;x++){let b=p[d*i+x];h.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${h} does not index into ${t}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[d*n+x]:f.values[g*n+x]=e.rank===0?m[0]:m[d*n+x]}return f}var I_=co(r=>1/(1+Math.exp(-r))),GT=$e($o,r=>1/(1+Math.exp(-r))),v_={kernelName:$o,backendName:"cpu",kernelFunc:GT};function UT(r,e,t,o,n){let s=rt.isSliceContinous(o,e,t),i=y.sizeFromShape(t),a=y.computeStrides(o);if(s){let p=rt.computeFlatOffset(e,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?w.fromUint8ToStringArray(r):r,u=te(o,n,l),c=te(t,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((d,h)=>d+e[h]);c.set(u.get(...f),...m)}return n==="string"?w.fromStringArrayToUint8(c.values):c.values}function Js(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:i}=o;Q(n,"slice");let[a,l]=rt.parseSliceParams(n,s,i);rt.assertParamsValid(n,a,l);let u=t.data.get(n.dataId).values,c=UT(u,a,l,n.shape,n.dtype);return t.makeTensorInfo(l,n.dtype,c)}var T_={kernelName:Dn,backendName:"cpu",kernelFunc:Js};function lC(r,e,t,o,n,s,i){let a=e[0],l=s[0],u=new Array(l),c=new Array(a),p=e[1];if(l===0){if(a!==0)throw new Error(w.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(t,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,d=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(w.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(w.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++d[x],m=m&&x>=f,f=x}let h=!0;for(let g=0;g<l;++g){let x=d[g]===0;u[g]=x,h=h&&!x,d[g]=Math.max(d[g],1),g>0&&(d[g]+=d[g-1])}if(h&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=d[l-1],x=y.getArrayFromDType(t,g*p),b=y.getArrayFromDType(n,g),C=new Array(l).fill(0);for(let S=0;S<a;++S){let I=r[S*p],N=C[I],$=(I===0?0:d[I-1])+N;C[I]++;for(let R=0;R<p;++R)x[$*p+R]=r[S*p+R];b[$]=o[S],c[S]=$}for(let S=0;S<l;++S)if(C[S]===0){let N=S===0?0:d[S-1];x[N*p+0]=S;for(let $=1;$<p;++$)x[N*p+$]=0;b[N]=i}return[x,[g,p],b,u,c]}}function uC(r,e,t,o,n){let s=y.sizeFromShape(o),i=e[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(w.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(w.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(w.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(w.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(w.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let d=[];if(a>0){d[a-1]=1;for(let g=a-2;g>=0;--g)d[g]=d[g+1]*l[g+1]}let h=y.getArrayFromDType(t,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)h[g*a+b]=Math.trunc(x/d[b]),x%=d[b]}return[h,[i,a],l]}function gf(r,e,t,o,n,s=!1,i=0){let a=o.length,l=[e[0],r.length/e[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=e.slice();m[0]=p;let f=m.reduce((C,S)=>C*S,1),d=y.getArrayFromDType(t,f);if(a===0)return p>0&&d.fill(i),[d,m];if(p<=0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let h=0,g=1,x=0,b=n[h];for(;;){let C=0;if(g<a){if(C=n[g],b===C){++g;continue}if(b>=C)throw new Error(w.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(w.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&d.fill(i,x*u,b*u);for(let S=h;S<g;++S){let I=o[S];if(I<0||I>=l[0])throw new Error(w.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(S,o[S],l[0]));for(let N=0;N<u;N++)d[b*u+N]+=r[I*u+N]}if(s)for(let S=0;S<u;S++)d[b*u+S]/=g-h;if(h=g,++g,x=b+1,b=C,g>a)break}return x<p&&d.fill(i,x*u,p*u),[d,m]}var k_=co(r=>Math.sqrt(r)),mte=$e(Eo,r=>Math.sqrt(r)),N_={kernelName:Eo,backendName:"cpu",kernelFunc:mte};var WT=je((r,e)=>{let t=r-e;return t*t}),fte=tt(Ro,WT),$_={kernelName:Ro,backendName:"cpu",kernelFunc:fte};function cC(r,e,t,o){let n=te(r,e.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*t[l]+o[l];n.set(e.get(...a),...i)}return n}var HT=class{constructor(e,t,o,n,s,i){this.separator=y.encodeString(e),this.nGramWidths=t,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let o=this.getPadWidth(t);return Math.max(0,e+2*o-t+1)}createNGrams(e,t,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=t+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=e[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let h=o[n+a],g=0,x=b=>b.forEach(C=>h[g++]=C);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(e[m+b]),x(this.separator);if(p>0){x(e[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(e,t){let o=e.length,n=t.length;if(n>0){let l=t[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=t[u]>=l;if(c=c&&t[u]<=o,!c)throw new Error(`Invalid split value ${t[u]}, must be in [${l}, ${o}]`);l=t[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=t[l]-t[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=t[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=t[l+1]-t[l],f=this.getNumNGrams(m,p);this.createNGrams(e,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=t[l+1]-t[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(e,u,a,c,f,m)}}return[a,i]}};function pC(r,e,t,o,n,s,i,a){return new HT(t,o,n,s,i,a).compute(r,e)}function dte(r,e,t,o){if(!r.length)return;if(e.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(e.length===1){let s=e[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!t||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!t||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||e.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!t||i.length!==0)&&o.push(i),n=s+1}}function mC(r,e,t){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;dte(r[m],e,t,n);let d=n.length-f;a[m]=d,s+=d,i=Math.max(i,d)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function fC(r,e){let t=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)t[o]=y.fingerPrint64(r[o]).modulo(e).getLowBitsUnsigned();return t}var KT=je((r,e)=>r-e),hte=mf((r,e,t,o)=>({real:r-t,imag:e-o})),ug=tt(Ao,KT,hte),E_={kernelName:Ao,backendName:"cpu",kernelFunc:ug};function dC(r,e){let t=new Array(r.rank);for(let n=0;n<t.length;n++)t[n]=r.shape[n]*e[n];let o=te(t,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var cg=(r,e)=>{let t=e.value-r.value;return t===0?r.index-e.index:t};function R_(r,e,t=0,o=r.length-1){for(;o>t;){if(o-t>600){let a=o-t+1,l=e-t+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(t,Math.floor(e-l*c/a+p)),f=Math.min(o,Math.floor(e+(a-l)*c/a+p));R_(r,e,m,f)}let n=r[e],s=t,i=o;for(y.swap(r,t,e),cg(r[o],n)>0&&y.swap(r,t,o);s<i;){for(y.swap(r,s,i),s++,i--;cg(r[s],n)<0;)s=s+1;for(;cg(r[i],n)>0;)i=i-1}cg(r[t],n)===0?y.swap(r,t,i):(i=i+1,y.swap(r,i,o)),i<=e&&(t=i+1),e<=i&&(o=i-1)}}function hC(r,e,t,o,n){let s=e[e.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(t,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),d=new Array(f.length);f.forEach((b,C)=>d[C]={value:b,index:C}),o<d.length&&(R_(d,o),d=d.slice(0,o)),n&&d.sort(cg);let h=p*o,g=l.subarray(h,h+o),x=u.subarray(h,h+o);for(let b=0;b<o;b++)g[b]=d[b].value,x[b]=d[b].index}let c=e.slice();return c[c.length-1]=o,[te(c,t,l),te(c,"int32",u)]}function gC(r,e,t,o){let n=y.parseAxisParam(e,t)[0],s=[1,t[0],1];for(let d=0;d<n;d++)s[0]*=t[d];s[1]=t[n];for(let d=n+1;d<t.length;d++)s[2]*=t[d];let i={},a=new Int32Array(t[n]),l=new Je(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let d=0;d<t[n];d++){let h;if(c)h=r[d].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,d,b));h=g.join(",")}if(i[h]!==void 0)a[d]=i[h];else{let g=Object.keys(i).length;i[h]=g,a[d]=g,u.push(d)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new Je(p,o);u.forEach((d,h)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,d,x),g,h,x)});let f=t.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}Eu("cpu",()=>new ip,1);var XT=$e(yn,r=>r>=0?r:Math.exp(r)-1),A_={kernelName:yn,backendName:"cpu",kernelFunc:XT};function jT(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o;Q([n],"leakyRelu");let i=y.sizeFromShape(n.shape),a=t.data.get(n.dataId).values,l=y.getTypedArrayFromDType("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?s*a[u]:a[u];return t.makeTensorInfo(n.shape,"float32",l)}var D_={kernelName:ps,backendName:"cpu",kernelFunc:jT};var gte=je((r,e)=>r<0?e*r:r);function YT(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e;Q([o,n],"prelu");let s=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,[a,l]=gte(o.shape,n.shape,s,i,"float32");return t.makeTensorInfo(l,"float32",a)}var F_={kernelName:Cs,backendName:"cpu",kernelFunc:YT};var QT=$e(Rn,r=>Math.max(0,r)),__={kernelName:Rn,backendName:"cpu",kernelFunc:QT};var ZT=$e(An,r=>Math.min(Math.max(0,r),6)),O_={kernelName:An,backendName:"cpu",kernelFunc:ZT};function lp(r,e,t,o,n){if(t==="linear")return Vr({inputs:{x:e},backend:r});if(t==="relu")return QT({inputs:{x:e},backend:r});if(t==="elu")return XT({inputs:{x:e},backend:r});if(t==="relu6")return ZT({inputs:{x:e},backend:r});if(t==="prelu")return YT({inputs:{x:e,alpha:o},backend:r});if(t==="leakyrelu")return jT({inputs:{x:e},backend:r,attrs:{alpha:n}});if(t==="sigmoid")return GT({inputs:{x:e},backend:r});throw new Error(`Activation ${t} has not been implemented for the CPU backend.`)}function He(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{shape:s}=o,i=y.sizeFromShape(n.shape),a=y.inferFromImplicitShape(s,i),l=y.sizeFromShape(a);y.assert(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),t.incRef(n.dataId);let u=t.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,p=u.complexTensorInfos.imag;c.shape=a,p.shape=a}return{dataId:n.dataId,shape:a,dtype:n.dtype}}var P_={kernelName:ws,backendName:"cpu",kernelFunc:He};function JT(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:i,transposeB:a}=o;Q([n,s],"matMul");let l=n.shape.length,u=s.shape.length,c=i?n.shape[l-2]:n.shape[l-1],p=a?s.shape[u-1]:s.shape[u-2],m=i?n.shape[l-1]:n.shape[l-2],f=a?s.shape[u-2]:s.shape[u-1],d=n.shape.slice(0,-2),h=s.shape.slice(0,-2),g=y.sizeFromShape(d),x=y.sizeFromShape(h),C=Or.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,f]);y.assert(c===p,()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${i} and transposeB=${a} must match.`);let S=i?[g,c,m]:[g,m,c],I=a?[x,f,p]:[x,p,f],N=He({inputs:{x:n},backend:t,attrs:{shape:S}}),$=He({inputs:{x:s},backend:t,attrs:{shape:I}}),R=i?N.shape[1]:N.shape[2],F=i?N.shape[2]:N.shape[1],_=a?$.shape[1]:$.shape[2],B=Math.max(g,x),V=t.data.get(N.dataId).values,G=t.data.get($.dataId).values,W=y.computeStrides(N.shape),U=y.computeStrides($.shape),[K,X,H]=i?[W[0],1,W[1]]:[W[0],W[1],1],[Z,J,ee]=a?[1,U[1],U[0]]:[U[1],1,U[0]],le=F*_,ie=te([B,F,_],N.dtype),de=ie.values,ce=t.blockSize;for(let ge=0;ge<B;ge++)for(let Ne=0;Ne<F;Ne+=ce)for(let Fe=0;Fe<_;Fe+=ce)for(let Oe=0;Oe<R;Oe+=ce){let Xe=Math.min(Ne+ce,F),Ze=Math.min(Fe+ce,_),St=Math.min(Oe+ce,R);for(let At=Ne;At<Xe;At++)for(let Bt=Fe;Bt<Ze;Bt++){let Ht=0;for(let Tt=Oe;Tt<St;Tt++){let nr=Math.min(ge,g-1)*K,lr=Math.min(ge,x-1)*ee,al=V[nr+At*X+Tt*H],_r=G[Tt*Z+Bt*J+lr];Ht+=al*_r}de[ge*le+(At*_+Bt)]+=Ht}}return t.disposeIntermediateTensorInfo(N),t.disposeIntermediateTensorInfo($),t.makeTensorInfo(C,ie.dtype,ie.values)}var L_={kernelName:ts,backendName:"cpu",kernelFunc:JT};function xte(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=e,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o,m,f,d,h=[];m=JT({inputs:{a:n,b:s},attrs:{transposeA:l,transposeB:u},backend:t}),i&&(f=Ja({inputs:{a:m,b:i},backend:t}),h.push(m),m=f),c&&(d=lp(t,m,c,a,p),h.push(m),m=d);for(let x of h)t.disposeIntermediateTensorInfo(x);return m}var z_={kernelName:Di,backendName:"cpu",kernelFunc:xte};var yte=$e(pi,r=>Math.acos(r)),B_={kernelName:pi,backendName:"cpu",kernelFunc:yte};var bte=$e(mi,r=>Math.acosh(r)),M_={kernelName:mi,backendName:"cpu",kernelFunc:bte};function Cte(r){let{inputs:e,backend:t}=r,o=e;Q(e,"addN");let n=o.map(a=>t.data.get(a.dataId).values),s=te(o[0].shape,o[0].dtype),i=s.values;for(let a=0;a<o.length;a++){let l=n[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return t.makeTensorInfo(s.shape,s.dtype,s.values)}var V_={kernelName:Qn,backendName:"cpu",kernelFunc:Cte};function wte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;Q(n,"all");let a=y.parseAxisParam(s,n.shape),l=a,u=w.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Pt({inputs:{x:n},backend:t,attrs:{perm:u}}),l=w.getInnerMostAxes(l.length,n.shape.length)),w.assertAxesAreInnerMostDims("all",l,c.shape.length);let[p,m]=w.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),d=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),h=t.data.get(c.dataId).values;for(let x=0;x<d.length;++x){let b=x*f,C=h[b];for(let S=0;S<f;++S){let I=h[b+S];C=C&&I}d[x]=C}u!=null&&t.disposeIntermediateTensorInfo(c);let g=t.makeTensorInfo(p,c.dtype,d);if(i){let x=w.expandShapeToKeepDim(p,a),b=He({inputs:{x:g},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(g),b}return g}var G_={kernelName:Hl,backendName:"cpu",kernelFunc:wte};function Ste(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;Q(n,"any");let a=y.parseAxisParam(s,n.shape),l=a,u=w.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Pt({inputs:{x:n},backend:t,attrs:{perm:u}}),l=w.getInnerMostAxes(l.length,n.shape.length)),w.assertAxesAreInnerMostDims("any",l,c.shape.length);let[p,m]=w.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),d=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),h=t.data.get(c.dataId).values;for(let x=0;x<d.length;++x){let b=x*f,C=h[b];for(let S=0;S<f;++S){let I=h[b+S];C=C||I}d[x]=C}u!=null&&t.disposeIntermediateTensorInfo(c);let g=t.makeTensorInfo(p,c.dtype,d);if(i){let x=w.expandShapeToKeepDim(p,a),b=He({inputs:{x:g},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(g),b}return g}var U_={kernelName:Kl,backendName:"cpu",kernelFunc:Ste};function Ite(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o;Q(n,"argMax");let i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Pt({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],w.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[c,p]=w.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),d=y.sizeFromShape(p),h=t.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*d,b=h[x],C=0;for(let S=0;S<d;++S){let I=h[x+S];I>b&&(b=I,C=S)}f[g]=C}return u.forEach(g=>t.disposeIntermediateTensorInfo(g)),t.makeTensorInfo(c,"int32",f)}var W_={kernelName:Zn,backendName:"cpu",kernelFunc:Ite};function vte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o;Q(n,"argMin");let i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Pt({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],w.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[c,p]=w.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),d=y.sizeFromShape(p),h=t.data.get(l.dataId).values;for(let g=0;g<f.length;++g){let x=g*d,b=h[x],C=0;for(let S=0;S<d;++S){let I=h[x+S];I<b&&(b=I,C=S)}f[g]=C}return u.forEach(g=>t.disposeIntermediateTensorInfo(g)),t.makeTensorInfo(c,"int32",f)}var H_={kernelName:Jn,backendName:"cpu",kernelFunc:vte};var Tte=$e(fi,r=>Math.asin(r)),K_={kernelName:fi,backendName:"cpu",kernelFunc:Tte};var kte=$e(di,r=>Math.asinh(r)),q_={kernelName:di,backendName:"cpu",kernelFunc:kte};var Nte=$e(hi,r=>Math.atan(r)),X_={kernelName:hi,backendName:"cpu",kernelFunc:Nte};var $te=je((r,e)=>Math.atan2(r,e)),Ete=tt(fn,$te),j_={kernelName:fn,backendName:"cpu",kernelFunc:Ete};var Rte=$e(gi,r=>Math.atanh(r)),Y_={kernelName:gi,backendName:"cpu",kernelFunc:Rte};function xf(r,e,t,o,n,s){let i=n.strideHeight,a=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,p=n.effectiveFilterWidth,m=n.padInfo.top,f=n.padInfo.left,d=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=te(n.outShape,t),g=h.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],C=n.outShape[3];for(let S=0;S<n.batchSize;++S){let I=S*x,N=S*o[0];for(let $=0;$<n.inChannels;++$)for(let R=0;R<n.outHeight;++R){let F=R*i-m,_=Math.max(0,F),B=Math.min(n.inHeight,c+F),V=I+R*b;for(let G=0;G<n.outWidth;++G){let W=G*a-f,U=Math.max(0,W),K=Math.min(n.inWidth,p+W),X=d,H=0,Z=0;for(let ee=_;ee<B;ee+=l){let le=N+ee*o[1];for(let ie=U;ie<K;ie+=u){let de=le+ie*o[2],ce=r[de+$];s==="max"&&ce>X?X=ce:s==="avg"&&(H+=ce,Z++)}if(isNaN(X))break}let J=V+G*C+$;g[J]=s==="avg"?H/Z:X}}}return h}function xC(r,e,t,o,n=!1,s=!1){let i=te(o.outShape,"int32"),a=o.strideHeight,l=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,p=o.effectiveFilterHeight,m=o.effectiveFilterWidth,f=o.padInfo.top,d=o.padInfo.left,h=te(e,t,r);for(let g=0;g<o.batchSize;++g)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let C=b*a-f,S=C;for(;S<0;)S+=u;let I=Math.min(o.inHeight,p+C);for(let N=0;N<o.outWidth;++N){let $=N*l-d,R=$;for(;R<0;)R+=c;let F=Math.min(o.inWidth,m+$),_=Number.NEGATIVE_INFINITY,B=-1;for(let V=S;V<I;V+=u){let G=V-C;for(let W=R;W<F;W+=c){let U=W-$,K=h.get(g,V,W,x);K>_&&(_=K,n?B=s?((g*o.inHeight+V)*o.inWidth+W)*o.inChannels+x:(V*o.inWidth+W)*o.inChannels+x:B=G*m+U)}}i.set(B,g,b,N,x)}}return i}function yC(r,e,t,o,n,s){let i=n.strideDepth,a=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,p=n.dilationWidth,m=n.effectiveFilterDepth,f=n.effectiveFilterHeight,d=n.effectiveFilterWidth,h=n.padInfo.front,g=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,C=te(n.outShape,t),S=C.values,I=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],N=n.outShape[2]*n.outShape[3]*n.outShape[4],$=n.outShape[3]*n.outShape[4],R=n.outShape[4];for(let F=0;F<n.batchSize;++F){let _=F*I,B=F*o[0];for(let V=0;V<n.inChannels;++V)for(let G=0;G<n.outDepth;++G){let W=G*i-h,U=W;for(;U<0;)U+=u;let K=Math.min(n.inDepth,m+W),X=_+G*N;for(let H=0;H<n.outHeight;++H){let Z=H*a-g,J=Z;for(;J<0;)J+=c;let ee=Math.min(n.inHeight,f+Z),le=X+H*$;for(let ie=0;ie<n.outWidth;++ie){let de=ie*l-x,ce=de;for(;ce<0;)ce+=p;let ge=Math.min(n.inWidth,d+de),Ne=le+ie*R,Fe=b,Oe=0,Xe=0;for(let St=U;St<K;St+=u){let At=B+St*o[1];for(let Bt=J;Bt<ee;Bt+=c){let Ht=At+Bt*o[2];for(let Tt=ce;Tt<ge;Tt+=p){let nr=Ht+Tt*o[3],lr=r[nr+V];if(s==="max"&&lr>Fe?Fe=lr:s==="avg"&&(Oe+=lr,Xe++),isNaN(Fe))break}if(isNaN(Fe))break}if(isNaN(Fe))break}let Ze=Ne+V;S[Ze]=s==="avg"?Oe/Xe:Fe}}}}return C}function Q_(r,e){let t=te(e.outShape,"int32"),o=e.strideDepth,n=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,a=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,m=e.padInfo.front,f=e.padInfo.top,d=e.padInfo.left;for(let h=0;h<e.batchSize;++h)for(let g=0;g<e.inChannels;++g)for(let x=0;x<e.outDepth;++x){let b=x*o-m,C=b;for(;C<0;)C+=i;let S=Math.min(e.inDepth,u+b);for(let I=0;I<e.outHeight;++I){let N=I*n-f,$=N;for(;$<0;)$+=a;let R=Math.min(e.inHeight,c+N);for(let F=0;F<e.outWidth;++F){let _=F*s-d,B=_;for(;B<0;)B+=l;let V=Math.min(e.inWidth,p+_),G=Number.NEGATIVE_INFINITY,W=-1;for(let U=C;U<S;U+=i){let K=U-b;for(let X=$;X<R;X+=a){let H=X-N;for(let Z=B;Z<V;Z+=l){let J=Z-_,ee=r.get(h,U,X,Z,g);ee>=G&&(G=ee,W=K*c*p+H*c+J)}}}t.set(W,h,x,I,F,g)}}}return t}function Ate(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;Q(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=Vr({inputs:{x:n},backend:t});else{let m=t.data.get(n.dataId).values,f=y.computeStrides(n.shape),d=xf(m,n.shape,n.dtype,f,c,"avg");p=t.makeTensorInfo(c.outShape,n.dtype,d.values)}return p}var Z_={kernelName:es,backendName:"cpu",kernelFunc:Ate};function Dte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Q(n,"avgPool3d");let c=w.computePool3DInfo(n.shape,s,i,1,a,l,u),p=t.data.get(n.dataId).values,m=yC(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"avg");return t.makeTensorInfo(m.shape,"float32",m.values)}var J_={kernelName:na,backendName:"cpu",kernelFunc:Dte};function Fte(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Q([n,s],"avgPool3DGrad");let c=w.computePool3DInfo(s.shape,i,a,1,l,u),p=c.strideDepth,m=c.strideHeight,f=c.strideWidth,d=c.filterDepth,h=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,C=c.dilationWidth,S=c.effectiveFilterDepth,I=c.effectiveFilterHeight,N=c.effectiveFilterWidth,$=S-1-c.padInfo.front,R=N-1-c.padInfo.left,F=I-1-c.padInfo.top,_=te(s.shape,"float32"),B=1/(d*h*g),V=t.bufferSync(n);for(let G=0;G<c.batchSize;++G)for(let W=0;W<c.inChannels;++W)for(let U=0;U<c.inDepth;++U)for(let K=0;K<c.inHeight;++K)for(let X=0;X<c.inWidth;++X){let H=U-$,Z=K-F,J=X-R,ee=0;for(let le=0;le<S;le+=x){let ie=(H+le)/p;if(!(ie<0||ie>=c.outDepth||Math.floor(ie)!==ie))for(let de=0;de<I;de+=b){let ce=(Z+de)/m;if(!(ce<0||ce>=c.outHeight||Math.floor(ce)!==ce))for(let ge=0;ge<N;ge+=C){let Ne=(J+ge)/f;if(Ne<0||Ne>=c.outWidth||Math.floor(Ne)!==Ne)continue;ee+=V.get(G,ie,ce,Ne,W)}}}_.set(ee*B,G,U,K,X,W)}return t.makeTensorInfo(_.shape,_.dtype,_.values)}var eO={kernelName:Xl,backendName:"cpu",kernelFunc:Fte};function _te(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s;Q([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=w.computePool2DInfo(i.shape,a,l,1,u),p=c.strideHeight,m=c.strideWidth,f=c.filterHeight,d=c.filterWidth,h=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,C=b-1-c.padInfo.left,S=x-1-c.padInfo.top,I=te(i.shape,"float32"),N=1/(f*d),$=t.data.get(n.dataId).values,R=te(n.shape,"float32",$);for(let F=0;F<c.batchSize;++F)for(let _=0;_<c.inChannels;++_)for(let B=0;B<c.inHeight;++B)for(let V=0;V<c.inWidth;++V){let G=B-S,W=V-C,U=0;for(let K=0;K<x;K+=h){let X=(G+K)/p;if(!(X<0||X>=c.outHeight||Math.floor(X)!==X))for(let H=0;H<b;H+=g){let Z=(W+H)/m;if(Z<0||Z>=c.outWidth||Math.floor(Z)!==Z)continue;U+=R.get(F,X,Z,_)}}I.set(U*N,F,B,V,_)}return t.makeTensorInfo(I.shape,I.dtype,I.values)}var tO={kernelName:ql,backendName:"cpu",kernelFunc:_te};function Ote(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,scale:s,offset:i,mean:a,variance:l}=e;y.assert(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Q([n,a,l,s,i],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=t.data.get(n.dataId).values,p=t.data.get(a.dataId).values,m=t.data.get(l.dataId).values,f=s?t.data.get(s.dataId).values:new Float32Array([1]),d=i?t.data.get(i.dataId).values:new Float32Array([0]),h=new Float32Array(c.length),g=d.length,x=f.length,b=m.length,C=p.length,S=0,I=0,N=0,$=0;for(let R=0;R<c.length;++R)h[R]=d[S++]+(c[R]-p[I++])*f[N++]/Math.sqrt(m[$++]+u),S>=g&&(S=0),I>=C&&(I=0),N>=x&&(N=0),$>=b&&($=0);return t.makeTensorInfo(n.shape,n.dtype,h)}var rO={kernelName:us,backendName:"cpu",kernelFunc:Ote};function Pte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:i}=o;Q([n],"batchToSpaceND");let a=s.reduce((x,b)=>x*b),l=w.getReshaped(n.shape,s,a),u=w.getPermuted(l.length,s.length),c=w.getReshapedPermuted(n.shape,s,a),p=w.getSliceBeginCoords(i,s.length),m=w.getSliceSize(c,i,s.length),f=He({inputs:{x:n},backend:t,attrs:{shape:l}}),d=Pt({inputs:{x:f},backend:t,attrs:{perm:u}}),h=He({inputs:{x:d},backend:t,attrs:{shape:c}}),g=Js({inputs:{x:h},backend:t,attrs:{begin:p,size:m}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(h),g}var oO={kernelName:rs,backendName:"cpu",kernelFunc:Pte};function Lte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:i}=o,a=t.data.get(n.dataId).values,l=t.data.get(s.dataId).values,u=ff(a,l,s.dtype,s.shape,i);return t.makeTensorInfo([i],s.dtype,u)}var nO={kernelName:jl,backendName:"cpu",kernelFunc:Lte};function zte(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e,s=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,a=w.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return t.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var sO={kernelName:Yl,backendName:"cpu",kernelFunc:zte};var Bte=$e(dn,(r,e)=>{let t=e;return r>t.clipValueMax?t.clipValueMax:r<t.clipValueMin?t.clipValueMin:r}),iO={kernelName:dn,backendName:"cpu",kernelFunc:Bte};var Mte=r=>{let{x:e}=r.inputs,t=r.backend,o=new Float32Array(y.sizeFromShape(e.shape)),n=t.data.get(e.dataId),s=n.complexTensorInfos.real,i=n.complexTensorInfos.imag,a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values;for(let u=0;u<a.length;u++){let c=a[u],p=l[u];o[u]=Math.hypot(c,p)}return t.makeOutput(o,e.shape,"float32")},aO={kernelName:sa,backendName:"cpu",kernelFunc:Mte};function el(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.data.get(o.dataId).complexTensorInfos.imag,s=t.data.get(n.dataId).values;return t.makeTensorInfo(n.shape,n.dtype,s)}var lO={kernelName:ha,backendName:"cpu",kernelFunc:el};function tc(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],i=w.computeOutShape(e.map(h=>h.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let a=e.filter(h=>y.sizeFromShape(h.shape)>0);if(a.length===1)return Vr({inputs:{x:a[0]},backend:t});let l=a.map(h=>h.shape);if(w.assertParamsConsistent(l,s),a[0].dtype==="complex64"){let h=a.map(S=>js({inputs:{input:S},backend:t})),g=a.map(S=>el({inputs:{input:S},backend:t})),x=tc({inputs:h,backend:t,attrs:{axis:s}}),b=tc({inputs:g,backend:t,attrs:{axis:s}}),C=yr({inputs:{real:x,imag:b},backend:t});return h.forEach(S=>t.disposeIntermediateTensorInfo(S)),g.forEach(S=>t.disposeIntermediateTensorInfo(S)),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(b),C}let u=a.map(h=>{let g=y.sizeFromShape(h.shape.slice(s));return He({inputs:{x:h},backend:t,attrs:{shape:[-1,g]}})}),c=u.map(h=>({vals:t.data.get(h.dataId).values,shape:h.shape}));i=w.computeOutShape(u.map(h=>h.shape),1);let p=u[0].shape[0]===1,m=tC(c,i,e[0].dtype,p),f=w.computeOutShape(a.map(h=>h.shape),s),d=t.makeTensorInfo(f,e[0].dtype,m);return u.forEach(h=>t.disposeIntermediateTensorInfo(h)),d}var uO={kernelName:os,backendName:"cpu",kernelFunc:tc};function ek(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o;Q([n,s],"conv2d");let p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f=m.filterHeight,d=m.filterWidth,h=m.dilationHeight,g=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,C=m.dataFormat==="channelsLast",S=new Je(m.outShape,n.dtype),I=y.computeStrides(n.shape),N=y.computeStrides(s.shape),$=I[0],R=C?I[1]:I[2],F=C?I[2]:1,_=C?1:I[1],B=S.strides[0],V=C?S.strides[1]:S.strides[2],G=C?S.strides[2]:1,W=C?1:S.strides[1],U=t.data.get(n.dataId).values,K=t.data.get(s.dataId).values,X=S.values;for(let H=0;H<m.batchSize;++H){let Z=H*$,J=H*B;for(let ee=0;ee<m.outHeight;++ee){let le=J+ee*V,ie=ee*m.strideHeight-b;for(let de=0;de<f;++de){let ce=ie+de*h;if(ce<0||ce>=m.inHeight)continue;let ge=de*N[0],Ne=Z+ce*R;for(let Fe=0;Fe<m.outWidth;++Fe){let Oe=le+Fe*G,Xe=Fe*m.strideWidth-x;for(let Ze=0;Ze<d;++Ze){let St=Xe+Ze*g;if(St<0||St>=m.inWidth)continue;let At=ge+Ze*N[1],Bt=Ne+St*F,Ht=At;for(let Tt=0;Tt<m.inChannels;++Tt){let nr=U[Bt+Tt*_];for(let lr=0;lr<m.outChannels;++lr)X[Oe+lr*W]+=nr*K[Ht+lr];Ht+=m.outChannels}}}}}}return t.makeTensorInfo(S.shape,S.dtype,X)}var cO={kernelName:ns,backendName:"cpu",kernelFunc:ek};function Vte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o;Q([n,s],"conv2dBackpropFilter");let p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),{strideHeight:f,strideWidth:d,filterHeight:h,filterWidth:g}=m,x=m.dataFormat==="channelsLast",b=new Je(m.filterShape,"float32"),C=m.padInfo.left,S=m.padInfo.top,I=t.data.get(n.dataId).values,N=t.data.get(s.dataId).values,$=new Je(n.shape,n.dtype,I),R=new Je(s.shape,s.dtype,N);for(let F=0;F<h;++F){let _=Math.max(0,Math.ceil((S-F)/f)),B=Math.min(m.outHeight,(m.inHeight+S-F)/f);for(let V=0;V<g;++V){let G=Math.max(0,Math.ceil((C-V)/d)),W=Math.min(m.outWidth,(m.inWidth+C-V)/d);for(let U=0;U<m.inChannels;++U)for(let K=0;K<m.outChannels;++K){let X=0;for(let H=0;H<m.batchSize;++H)for(let Z=_;Z<B;++Z){let J=F+Z*f-S;for(let ee=G;ee<W;++ee){let le=V+ee*d-C;x?X+=$.get(H,J,le,U)*R.get(H,Z,ee,K):X+=$.get(H,U,J,le)*R.get(H,K,Z,ee)}}b.set(X,F,V,U,K)}}}return t.makeTensorInfo(b.shape,b.dtype,b.values)}var pO={kernelName:Ql,backendName:"cpu",kernelFunc:Vte};function Gte(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o;Q([n,s],"conv2dBackpropInput");let p=y.computeStrides(s.shape),m=y.computeStrides(n.shape),f=w.convertConv2DDataFormat(u),d=w.computeConv2DInfo(i,s.shape,a,1,l,c,!1,f),h=new Je(d.inShape,"float32"),g=h.values,x=t.data.get(n.dataId).values,b=t.data.get(s.dataId).values,[C,S,I]=p,{batchSize:N,filterHeight:$,filterWidth:R,inChannels:F,inHeight:_,inWidth:B,outChannels:V,outHeight:G,outWidth:W,strideHeight:U,strideWidth:K}=d;f=d.dataFormat;let X=$-1-d.padInfo.top,H=R-1-d.padInfo.left,Z=f==="channelsLast",J=h.strides[0],ee=Z?h.strides[1]:h.strides[2],le=Z?h.strides[2]:1,ie=Z?1:h.strides[1],de=m[0],ce=Z?m[1]:m[2],ge=Z?m[2]:1,Ne=Z?1:m[1];for(let Fe=0;Fe<N;++Fe)for(let Oe=0;Oe<F;++Oe)for(let Xe=0;Xe<_;++Xe){let Ze=Xe-X,St=Math.max(0,Math.ceil(Ze/U)),At=Math.min(G,($+Ze)/U);for(let Bt=0;Bt<B;++Bt){let Ht=Bt-H,Tt=Math.max(0,Math.ceil(Ht/K)),nr=Math.min(W,(R+Ht)/K),lr=0;for(let _r=St;_r<At;++_r){let Ml=_r*U-Ze;for(let an=Tt;an<nr;++an){let yc=an*K-Ht,ui=de*Fe+ce*_r+ge*an,ll=C*($-1-Ml)+S*(R-1-yc)+I*Oe;for(let Vl=0;Vl<V;++Vl){let Gl=x[ui+Ne*Vl],Ul=b[ll+Vl];lr+=Gl*Ul}}}let al=J*Fe+ee*Xe+le*Bt+ie*Oe;g[al]=lr}}return t.makeTensorInfo(h.shape,h.dtype,h.values)}var mO={kernelName:ss,backendName:"cpu",kernelFunc:Gte};function Ute(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l}=o;Q([n,s],"conv3d");let u=w.computeConv3DInfo(n.shape,s.shape,i,l,a),{filterDepth:c,filterHeight:p,filterWidth:m,dilationDepth:f,dilationHeight:d,dilationWidth:h,padInfo:g}=u,x=g.front,b=g.left,C=g.top,S=new Je(u.outShape,n.dtype),I=t.data.get(n.dataId).values,N=t.data.get(s.dataId).values,$=S.values,R=y.computeStrides(n.shape),F=y.computeStrides(s.shape);for(let _=0;_<u.batchSize;++_){let B=_*R[0],V=_*S.strides[0];for(let G=0;G<u.outDepth;++G){let W=V+G*S.strides[1],U=G*u.strideDepth-x;for(let K=0;K<c;++K){let X=U+K*f;if(X<0||X>=u.inDepth)continue;let H=K*F[0],Z=B+X*R[1];for(let J=0;J<u.outHeight;++J){let ee=W+J*S.strides[2],le=J*u.strideHeight-C;for(let ie=0;ie<p;++ie){let de=le+ie*d;if(de<0||de>=u.inHeight)continue;let ce=H+ie*F[1],ge=Z+de*R[2];for(let Ne=0;Ne<u.outWidth;++Ne){let Fe=ee+Ne*u.outChannels,Oe=Ne*u.strideWidth-b;for(let Xe=0;Xe<m;++Xe){let Ze=Oe+Xe*h;if(Ze<0||Ze>=u.inWidth)continue;let St=ce+Xe*F[2],At=ge+Ze*u.inChannels,Bt=St;for(let Ht=0;Ht<u.inChannels;++Ht){let Tt=I[At+Ht];for(let nr=0;nr<u.outChannels;++nr)$[Fe+nr]+=Tt*N[Bt+nr];Bt+=u.outChannels}}}}}}}}return t.makeTensorInfo(S.shape,S.dtype,S.values)}var fO={kernelName:ia,backendName:"cpu",kernelFunc:Ute};function Wte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,pad:a,filterShape:l}=o;Q([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=w.computeConv3DInfo(n.shape,l,i,1,a),m=p.strideDepth,f=p.strideHeight,d=p.strideWidth,h=p.filterDepth,g=p.filterHeight,x=p.filterWidth,b=new Je(p.filterShape,"float32"),C=b.values,[S,I,N,$]=b.strides,R=t.data.get(s.dataId).values,[F,_,B,V]=c,G=t.data.get(n.dataId).values,[W,U,K,X]=u,H=p.padInfo.front,Z=p.padInfo.left,J=p.padInfo.top;for(let ee=0;ee<h;++ee){let le=Math.max(0,Math.ceil((H-ee)/m)),ie=Math.min(p.outDepth,(p.inDepth+H-ee)/m),de=ee*S;for(let ce=0;ce<g;++ce){let ge=Math.max(0,Math.ceil((J-ce)/f)),Ne=Math.min(p.outHeight,(p.inHeight+J-ce)/f),Fe=ce*I+de;for(let Oe=0;Oe<x;++Oe){let Xe=Math.max(0,Math.ceil((Z-Oe)/d)),Ze=Math.min(p.outWidth,(p.inWidth+Z-Oe)/d),St=Oe*N+Fe;for(let At=0;At<p.inChannels;++At){let Bt=At*$+St;for(let Ht=0;Ht<p.outChannels;++Ht){let Tt=0;for(let nr=0;nr<p.batchSize;++nr){let lr=nr*W,al=nr*F;for(let _r=le;_r<ie;++_r){let an=(ee+_r*m-H)*U+lr,yc=_r*_+al;for(let ui=ge;ui<Ne;++ui){let Vl=(ce+ui*f-J)*K+an,Gl=ui*B+yc;for(let Ul=Xe;Ul<Ze;++Ul){let qI=(Oe+Ul*d-Z)*X+Vl,XI=Ul*V+Gl;Tt+=G[qI+At]*R[XI+Ht]}}}}C[Bt+Ht]=Tt}}}}}return t.makeTensorInfo(b.shape,b.dtype,b.values)}var dO={kernelName:Zl,backendName:"cpu",kernelFunc:Wte};function Hte(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{pad:i,strides:a,inputShape:l}=o;Q([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=w.computeConv3DInfo(l,s.shape,a,1,i),m=new Je(p.inShape,"float32"),f=m.values,[d,h,g,x]=m.strides,b=t.data.get(n.dataId).values,[C,S,I,N]=u,$=t.data.get(s.dataId).values,[R,F,_,B]=c,{batchSize:V,filterDepth:G,filterHeight:W,filterWidth:U,inChannels:K,inDepth:X,inHeight:H,inWidth:Z,outChannels:J,outDepth:ee,outHeight:le,outWidth:ie,strideDepth:de,strideHeight:ce,strideWidth:ge}=p,Ne=G-1-p.padInfo.front,Fe=W-1-p.padInfo.top,Oe=U-1-p.padInfo.left;for(let Xe=0;Xe<V;++Xe)for(let Ze=0;Ze<K;++Ze)for(let St=0;St<X;++St){let At=St-Ne,Bt=Math.max(0,Math.ceil(At/de)),Ht=Math.min(ee,(G+At)/de);for(let Tt=0;Tt<H;++Tt){let nr=Tt-Fe,lr=Math.max(0,Math.ceil(nr/ce)),al=Math.min(le,(W+nr)/ce);for(let _r=0;_r<Z;++_r){let Ml=_r-Oe,an=Math.max(0,Math.ceil(Ml/ge)),yc=Math.min(ie,(U+Ml)/ge),ui=0;for(let ll=Bt;ll<Ht;++ll){let Vl=ll*de-At;for(let Gl=lr;Gl<al;++Gl){let Ul=Gl*ce-nr;for(let cd=an;cd<yc;++cd){let qI=cd*ge-Ml,XI=C*Xe+S*ll+I*Gl+N*cd,Fj=R*(G-1-Vl)+F*(W-1-Ul)+_*(U-1-qI)+B*Ze;for(let Qg=0;Qg<J;++Qg){let _j=b[XI+Qg],Oj=$[Fj+Qg];ui+=_j*Oj}}}}f[d*Xe+h*St+g*Tt+x*_r+Ze]=ui}}}return t.makeTensorInfo(m.shape,m.dtype,m.values)}var hO={kernelName:Jl,backendName:"cpu",kernelFunc:Hte};var Kte=$e(hn,r=>Math.cos(r)),gO={kernelName:hn,backendName:"cpu",kernelFunc:Kte};var qte=$e(gn,r=>Math.cosh(r)),xO={kernelName:gn,backendName:"cpu",kernelFunc:qte};function Xte(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:i}=e,{cropSize:a,method:l,extrapolationValue:u}=o,[c,p,m,f]=n.shape,d=s.shape[0],[h,g]=a,x=te([d,h,g,f],"float32"),b=t.data.get(s.dataId).values,C=t.data.get(i.dataId).values,S=t.data.get(n.dataId).values,I=y.computeStrides(n.shape),N=y.computeStrides(x.shape);for(let $=0;$<d;$++){let R=$*4,F=b[R],_=b[R+1],B=b[R+2],V=b[R+3],G=C[$];if(G>=c)continue;let W=h>1?(B-F)*(p-1)/(h-1):0,U=g>1?(V-_)*(m-1)/(g-1):0;for(let K=0;K<h;K++){let X=h>1?F*(p-1)+K*W:.5*(F+B)*(p-1);if(X<0||X>p-1){for(let H=0;H<g;H++)for(let Z=0;Z<f;Z++){let J=Z+H*N[2]+K*N[1]+$*N[0];x.values[J]=u}continue}if(l==="bilinear"){let H=Math.floor(X),Z=Math.ceil(X),J=X-H;for(let ee=0;ee<g;ee++){let le=g>1?_*(m-1)+ee*U:.5*(_+V)*(m-1);if(le<0||le>m-1){for(let ge=0;ge<f;ge++){let Ne=ge+ee*N[2]+K*N[1]+$*N[0];x.values[Ne]=u}continue}let ie=Math.floor(le),de=Math.ceil(le),ce=le-ie;for(let ge=0;ge<f;ge++){let Ne=ge+ie*I[2]+H*I[1]+G*I[0],Fe=S[Ne];Ne=ge+de*I[2]+H*I[1]+G*I[0];let Oe=S[Ne];Ne=ge+ie*I[2]+Z*I[1]+G*I[0];let Xe=S[Ne];Ne=ge+de*I[2]+Z*I[1]+G*I[0];let Ze=S[Ne],St=Fe+(Oe-Fe)*ce,At=Xe+(Ze-Xe)*ce;Ne=ge+ee*N[2]+K*N[1]+$*N[0],x.values[Ne]=St+(At-St)*J}}}else for(let H=0;H<g;++H){let Z=g>1?_*(m-1)+H*U:.5*(_+V)*(m-1);if(Z<0||Z>m-1){for(let le=0;le<f;le++){let ie=le+H*N[2]+K*N[1]+$*N[0];x.values[ie]=u}continue}let J=Math.round(Z),ee=Math.round(X);for(let le=0;le<f;le++){let ie=le+J*I[2]+ee*I[1]+G*I[0],de=le+H*N[2]+K*N[1]+$*N[0];x.values[de]=S[ie]}}}}return t.makeTensorInfo(x.shape,x.dtype,x.values)}var yO={kernelName:la,backendName:"cpu",kernelFunc:Xte};function jte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;Q(n,"cumprod");let l=w.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=Pt({inputs:{x:n},backend:t,attrs:{perm:l}}));let c=w.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Ye(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),p),f=t.data.get(u.dataId).values,d=u.shape[u.shape.length-1],h=a?(x,b)=>x+d-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=d)for(let b=0;b<d;b++){let C=h(x,b);if(b===0)m[C]=i?1:f[C];else{let S=h(x,b-1);m[C]=i?f[S]*m[S]:f[C]*m[S]}}let g=t.makeTensorInfo(u.shape,p,m);if(l!=null){let x=w.getUndoAxesPermutation(l),b=Pt({inputs:{x:g},backend:t,attrs:{perm:x}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(u),b}return g}var bO={kernelName:aa,backendName:"cpu",kernelFunc:jte};function Yte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;Q(n,"cumsum");let l=w.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=Pt({inputs:{x:n},backend:t,attrs:{perm:l}}));let c=w.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Ye(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),p),f=t.data.get(u.dataId).values,d=u.shape[u.shape.length-1],h=a?(x,b)=>x+d-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=d)for(let b=0;b<d;b++){let C=h(x,b);if(b===0)m[C]=i?0:f[C];else{let S=h(x,b-1);m[C]=i?f[S]+m[S]:f[C]+m[S]}}let g=t.makeTensorInfo(u.shape,p,m);if(l!=null){let x=w.getUndoAxesPermutation(l),b=Pt({inputs:{x:g},backend:t,attrs:{perm:x}});return t.disposeIntermediateTensorInfo(g),t.disposeIntermediateTensorInfo(u),b}return g}var CO={kernelName:is,backendName:"cpu",kernelFunc:Yte};function Qte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=t.data.get(n.dataId).values,u=t.data.get(s.dataId).values,c=ff(l,u,s.dtype,s.shape,i);return t.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=t.bufferSync(n),u=t.bufferSync(s),c=eC(l,u,i,a);return t.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var wO={kernelName:eu,backendName:"cpu",kernelFunc:Qte};function Zte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:i}=o;y.assert(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let a=n.shape[0],l=n.shape[1],u=n.shape[2],c=n.shape[3],p=l*s,m=u*s,f=c/(s*s),d=t.data.get(n.dataId).values,h=new Float32Array(a*p*m*f),g=0;for(let x=0;x<a;++x)for(let b=0;b<p;++b){let C=Math.floor(b/s),S=b%s;for(let I=0;I<m;++I){let N=Math.floor(I/s),$=I%s,R=(S*s+$)*f;for(let F=0;F<f;++F){let B=F+R+c*(N+u*(C+l*x));h[g++]=d[B]}}}return t.makeTensorInfo([a,p,m,f],n.dtype,h)}var SO={kernelName:ua,backendName:"cpu",kernelFunc:Zte};function tk(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o;Q([n,s],"depthwiseConv2DNative");let c=y.computeStrides(n.shape),p=y.computeStrides(s.shape),m=l;m==null&&(m=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(i,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${m}'`);let f=w.computeConv2DInfo(n.shape,s.shape,i,m,a,u,!0),{filterHeight:d,filterWidth:h,dilationHeight:g,dilationWidth:x,padInfo:b}=f,C=b.left,S=b.top,I=f.outChannels/f.inChannels,N=new Je(f.outShape,n.dtype),$=t.data.get(n.dataId).values,R=t.data.get(s.dataId).values,F=N.values;for(let _=0;_<f.batchSize;++_){let B=_*c[0],V=_*N.strides[0];for(let G=0;G<f.outHeight;++G){let W=V+G*N.strides[1],U=G*f.strideHeight-S;for(let K=0;K<d;++K){let X=U+K*g;if(X<0||X>=f.inHeight)continue;let H=K*p[0],Z=B+X*c[1];for(let J=0;J<f.outWidth;++J){let ee=W+J*N.strides[2],le=J*f.strideWidth-C;for(let ie=0;ie<h;++ie){let de=le+ie*x;if(de<0||de>=f.inWidth)continue;let ce=H+ie*p[1],ge=Z+de*f.inChannels,Ne=ee,Fe=ce;for(let Oe=0;Oe<f.inChannels;++Oe){let Xe=$[ge+Oe];for(let Ze=0;Ze<I;++Ze)F[Ne+Ze]+=Xe*R[Fe+Ze];Ne+=I,Fe+=I}}}}}}return t.makeTensorInfo(N.shape,N.dtype,N.values)}var IO={kernelName:as,backendName:"cpu",kernelFunc:tk};function Jte(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o;Q([n,s],"depthwiseConv2dNativeBackpropFilter");let p=w.computeConv2DInfo(n.shape,c,i,a,l,u,!0),{strideHeight:m,strideWidth:f,filterHeight:d,filterWidth:h}=p,g=new Je(p.filterShape,"float32"),x=p.padInfo.left,b=p.padInfo.top,C=p.outChannels/p.inChannels,S=t.data.get(n.dataId).values,I=new Je(n.shape,n.dtype,S),N=t.data.get(s.dataId).values,$=new Je(s.shape,s.dtype,N);for(let R=0;R<d;++R){let F=Math.max(0,Math.ceil((b-R)/m)),_=Math.min(p.outHeight,(p.inHeight+b-R)/m);for(let B=0;B<h;++B){let V=Math.max(0,Math.ceil((x-B)/f)),G=Math.min(p.outWidth,(p.inWidth+x-B)/f);for(let W=0;W<p.outChannels;++W){let U=Math.trunc(W/C),K=W%C,X=0;for(let H=0;H<p.batchSize;++H)for(let Z=F;Z<_;++Z){let J=R+Z*m-b;for(let ee=V;ee<G;++ee){let le=B+ee*f-x;X+=I.get(H,J,le,U)*$.get(H,Z,ee,W)}}g.set(X,R,B,U,K)}}}return t.makeTensorInfo(g.shape,g.dtype,g.values)}var vO={kernelName:tu,backendName:"cpu",kernelFunc:Jte};function ere(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o;Q([n,s],"depthwiseConv2DNativeBackpropInput");let p=y.computeStrides(n.shape),m=y.computeStrides(s.shape),f=w.computeConv2DInfo(c,s.shape,i,a,l,u,!0),d=new Je(f.inShape,"float32"),h=d.values,[g,x,b]=d.strides,C=t.data.get(n.dataId).values,[S,I,N]=p,$=t.data.get(s.dataId).values,[R,F,_]=m,{batchSize:B,filterHeight:V,filterWidth:G,inChannels:W,inHeight:U,inWidth:K,outChannels:X,outHeight:H,outWidth:Z,strideHeight:J,strideWidth:ee}=f,le=V-1-f.padInfo.top,ie=G-1-f.padInfo.left,de=X/W;for(let ce=0;ce<B;++ce)for(let ge=0;ge<W;++ge)for(let Ne=0;Ne<U;++Ne){let Fe=Ne-le,Oe=Math.max(0,Math.ceil(Fe/J)),Xe=Math.min(H,(V+Fe)/J);for(let Ze=0;Ze<K;++Ze){let St=Ze-ie,At=Math.max(0,Math.ceil(St/ee)),Bt=Math.min(Z,(G+St)/ee),Ht=0;for(let Tt=Oe;Tt<Xe;++Tt){let nr=Tt*J-Fe;for(let lr=At;lr<Bt;++lr){let al=lr*ee-St,_r=S*ce+I*Tt+N*lr,Ml=R*(V-1-nr)+F*(G-1-al)+_*ge;for(let an=0;an<de;++an){let yc=ge*de+an,ui=C[_r+yc],ll=$[Ml+an];Ht+=ui*ll}}}h[g*ce+x*Ne+b*Ze+ge]=Ht}}return t.makeTensorInfo(d.shape,d.dtype,d.values)}var TO={kernelName:ru,backendName:"cpu",kernelFunc:ere};function tre(r){let{inputs:e,backend:t}=r,{x:o}=e,n=y.sizeFromShape(o.shape),s=t.data.get(o.dataId).values,i=te([n,n],o.dtype),a=i.values;for(let u=0;u<s.length;u++)a[u*n+u]=s[u];let l=[...o.shape,...o.shape];return t.makeTensorInfo(l,i.dtype,i.values)}var kO={kernelName:ou,backendName:"cpu",kernelFunc:tre};var NO={kernelName:ca,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{let{x:o,filter:n}=r,{strides:s,pad:i,dilations:a}=t,l=e,u=l.data.get(o.dataId).values,c=o.shape.length,p=l.data.get(n.dataId).values,m=n.shape.length,{batchSize:f,inHeight:d,inWidth:h,inChannels:g,outHeight:x,outWidth:b,padInfo:C,strideHeight:S,strideWidth:I,filterHeight:N,filterWidth:$,dilationHeight:R,dilationWidth:F,outShape:_}=w.computeDilation2DInfo(o.shape,n.shape,s,i,"NHWC",a),B=y.sizeFromShape(_),V=_.length,G=y.getArrayFromDType(o.dtype,B);for(let U=0;U<f;++U)for(let K=0;K<x;++K){let X=K*S-C.top;for(let H=0;H<b;++H){let Z=H*I-C.left;for(let J=0;J<g;++J){let ee=Number.MIN_SAFE_INTEGER;for(let ie=0;ie<N;++ie){let de=X+ie*R;if(de>=0&&de<d)for(let ce=0;ce<$;++ce){let ge=Z+ce*F;if(ge>=0&&ge<h){let Ne=y.locToIndex([U,de,ge,J],c,y.computeStrides(o.shape)),Fe=y.locToIndex([ie,ce,J],m,y.computeStrides(n.shape)),Oe=u[Ne]+p[Fe];Oe>ee&&(ee=Oe)}}}let le=y.locToIndex([U,K,H,J],V,y.computeStrides(_));G[le]=ee}}}return{dataId:l.write(y.toTypedArray(G,o.dtype),_,o.dtype),shape:_,dtype:o.dtype}}};var $O={kernelName:yd,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=t,u=e,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:d,inChannels:h,outHeight:g,outWidth:x,padInfo:b,strideHeight:C,strideWidth:S,filterHeight:I,filterWidth:N,dilationHeight:$,dilationWidth:R,outShape:F}=w.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===F.length,()=>`Error in ${yd}, dy must have the same rank as output ${F.length}, but got ${s.rank}`);let _=y.toNestedArray(F,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let G=0;G<m;++G)for(let W=0;W<g;++W){let U=W*C-b.top;for(let K=0;K<x;++K){let X=K*S-b.left;for(let H=0;H<h;++H){let Z=Number.MIN_SAFE_INTEGER,J=0,ee=0;for(let le=0;le<I;++le){let ie=U+le*$;if(ie>=0&&ie<f)for(let de=0;de<N;++de){let ce=X+de*R;if(ce>=0&&ce<d){let ge=c[G][ie][ce][H]+p[le][de][H];ge>Z&&(Z=ge,J=le,ee=de)}}}B[J][ee][H]+=_[G][W][K][H]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var EO={kernelName:xd,backendName:"cpu",kernelFunc:({inputs:r,backend:e,attrs:t})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=t,u=e,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:d,inChannels:h,outHeight:g,outWidth:x,padInfo:b,strideHeight:C,strideWidth:S,filterHeight:I,filterWidth:N,dilationHeight:$,dilationWidth:R,outShape:F}=w.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===F.length,()=>`Error in ${xd}, dy must have the same rank as output ${F.length}, but got ${s.rank}`);let _=y.toNestedArray(F,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let G=0;G<m;++G)for(let W=0;W<g;++W){let U=W*C-b.top;for(let K=0;K<x;++K){let X=K*S-b.left;for(let H=0;H<h;++H){let Z=Number.MIN_SAFE_INTEGER,J=U<0?0:U,ee=X<0?0:X;for(let le=0;le<I;++le){let ie=U+le*$;if(ie>=0&&ie<f)for(let de=0;de<N;++de){let ce=X+de*R;if(ce>=0&&ce<d){let ge=c[G][ie][ce][H]+p[le][de][H];ge>Z&&(Z=ge,J=ie,ee=ce)}}}B[G][J][ee][H]+=_[G][W][K][H]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function El(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;Q(n,"sum");let a;n.dtype==="bool"?a=Ys({inputs:{x:n},backend:t,attrs:{dtype:"int32"}}):a=Vr({inputs:{x:n},backend:t});let l=a.shape.length,u=y.parseAxisParam(s,a.shape),c=w.getAxesPermutation(u,l),p=u,m=a;c!=null&&(m=Pt({inputs:{x:a},backend:t,attrs:{perm:c}}),p=w.getInnerMostAxes(p.length,l)),w.assertAxesAreInnerMostDims("sum",p,m.shape.length);let[f,d]=w.computeOutAndReduceShapes(m.shape,p),h=w.upcastType(m.dtype,"int32"),g=pf(t,f,h),x=y.sizeFromShape(d),b=t.data.get(g.dataId).values,C=t.data.get(m.dataId).values;for(let S=0;S<b.length;++S){let I=S*x,N=0;for(let $=0;$<x;++$)N+=C[I+$];b[S]=N}if(i){let S=w.expandShapeToKeepDim(g.shape,u),I=g;g=He({inputs:{x:g},backend:t,attrs:{shape:S}}),t.disposeIntermediateTensorInfo(I)}return t.disposeIntermediateTensorInfo(a),c!=null&&t.disposeIntermediateTensorInfo(m),g}var RO={kernelName:Ts,backendName:"cpu",kernelFunc:El};function rre(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:i,summedDims:a,idDims:l}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=w.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,d=[];for(let h=0;h<p;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(f,l[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=Pt({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),d.push(C));let S=C.shape.slice();for(let I=0;I<b.length;++I)S.splice(b[I],0,1);y.arraysEqual(C.shape,S)||(C=He({inputs:{x:C},backend:t,attrs:{shape:S}}),d.push(C)),m===null?m=C:(m=ap({inputs:{a:C,b:m},backend:t}),d.push(m))}h<p-1&&(u[h]>=0&&(m=El({inputs:{x:m},backend:t,attrs:{axis:u[h]-(i.length-f),keepDims:!1}}),d.push(m)),f--)}for(let h of d)h!==m&&t.disposeIntermediateTensorInfo(h);return m}var AO={kernelName:pa,backendName:"cpu",kernelFunc:rre};function ore(r){let{inputs:e,backend:t}=r,{dy:o,y:n}=e;Q([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),i=t.data.get(n.dataId).values,a=t.data.get(o.dataId).values;for(let l=0;l<i.length;++l){let u=i[l];u>=1?s[l]=a[l]:s[l]=a[l]*(u+1)}return t.makeTensorInfo(n.shape,"float32",s)}var DO={kernelName:nu,backendName:"cpu",kernelFunc:ore};var nre=w.ERF_P,sre=w.ERF_A1,ire=w.ERF_A2,are=w.ERF_A3,lre=w.ERF_A4,ure=w.ERF_A5,cre=$e(yi,r=>{let e=Math.sign(r),t=Math.abs(r),o=1/(1+nre*t);return e*(1-((((ure*o+lre)*o+are)*o+ire)*o+sre)*o*Math.exp(-t*t))}),FO={kernelName:yi,backendName:"cpu",kernelFunc:cre};function yf(r){let{inputs:e,backend:t,attrs:o}=r,{input:n}=e,{dim:s}=o,i=n.shape.length,a=n.shape.slice(),l=s;return s<0&&(y.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),a.splice(l,0,1),He({inputs:{x:n},backend:t,attrs:{shape:a}})}var _O={kernelName:ls,backendName:"cpu",kernelFunc:yf};var pre=je((r,e)=>r/e),pg=tt(xn,pre),mg={kernelName:xn,backendName:"cpu",kernelFunc:pg};function bC(r,e,t){let o=r.shape,n=o[0],s=o[1],i=t.data.get(r.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[n,s],c=y.sizeFromShape(u),p=y.getTypedArrayFromDType("float32",c),m=y.getTypedArrayFromDType("float32",c);for(let g=0;g<n;g++){let x=Js({inputs:{x:a},backend:t,attrs:{begin:[g,0],size:[1,s]}}),b=Js({inputs:{x:l},backend:t,attrs:{begin:[g,0],size:[1,s]}}),C=yr({inputs:{real:x,imag:b},backend:t}),{real:S,imag:I}=mre(C,e,t),N=w.mergeRealAndImagArrays(S,I);for(let $=0;$<s;$++){let R=w.getComplexWithIndex(N,$);p[g*s+$]=R.real,m[g*s+$]=R.imag}t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(b),t.disposeIntermediateTensorInfo(C)}let f=t.makeTensorInfo(u,"float32",p),d=t.makeTensorInfo(u,"float32",m),h=yr({inputs:{real:f,imag:d},backend:t});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),h}function mre(r,e,t){let o=y.sizeFromShape(r.shape),n=t.data.get(r.dataId),s=t.data.get(n.complexTensorInfos.real.dataId).values,i=t.data.get(n.complexTensorInfos.imag.dataId).values;if(fre(o)){let a=rk(s,i,o,e,t),l=[r.shape[0],r.shape[1]];if(e){let u=t.makeTensorInfo(l,"float32",a.real),c=t.makeTensorInfo(l,"float32",a.imag),p=t.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=Vr({inputs:{x:p},backend:t}),f=mg.kernelFunc({inputs:{a:u,b:p},backend:t}),d=mg.kernelFunc({inputs:{a:c,b:m},backend:t}),h=t.data.get(f.dataId).values,g=t.data.get(d.dataId).values;return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),{real:h,imag:g}}return a}else{let a=w.mergeRealAndImagArrays(s,i),l=dre(a,o,e);return w.splitRealAndImagArrays(l)}}function fre(r){return(r&r-1)===0}function rk(r,e,t,o,n){if(t===1)return{real:r,imag:e};let s=w.mergeRealAndImagArrays(r,e),i=t/2,a=w.complexWithEvenIndex(s),l=a.real,u=a.imag,c=[l.length],p=n.makeTensorInfo(c,"float32",l),m=n.makeTensorInfo(c,"float32",u),f=yr({inputs:{real:p,imag:m},backend:n}),d=w.complexWithOddIndex(s),h=d.real,g=d.imag,x=[h.length],b=n.makeTensorInfo(x,"float32",h),C=n.makeTensorInfo(x,"float32",g),S=yr({inputs:{real:b,imag:C},backend:n}),I=rk(l,u,i,o,n),N=I.real,$=I.imag,R=[N.length],F=n.makeTensorInfo(R,"float32",N),_=n.makeTensorInfo(R,"float32",$),B=yr({inputs:{real:F,imag:_},backend:n}),V=rk(h,g,i,o,n),G=V.real,W=V.imag,U=[G.length],K=n.makeTensorInfo(U,"float32",G),X=n.makeTensorInfo(U,"float32",W),H=yr({inputs:{real:K,imag:X},backend:n}),Z=w.exponents(t,o),J=[Z.real.length],ee=n.makeTensorInfo(J,"float32",Z.real),le=n.makeTensorInfo(J,"float32",Z.imag),ie=yr({inputs:{real:ee,imag:le},backend:n}),de=ap({inputs:{a:ie,b:H},backend:n}),ce=Ja({inputs:{a:B,b:de},backend:n}),ge=ug({inputs:{a:B,b:de},backend:n}),Ne=js({inputs:{input:ce},backend:n}),Fe=js({inputs:{input:ge},backend:n}),Oe=el({inputs:{input:ce},backend:n}),Xe=el({inputs:{input:ge},backend:n}),Ze=tc({inputs:[Ne,Fe],backend:n,attrs:{axis:0}}),St=tc({inputs:[Oe,Xe],backend:n,attrs:{axis:0}}),At=n.data.get(Ze.dataId).values,Bt=n.data.get(St.dataId).values;return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo(S),n.disposeIntermediateTensorInfo(F),n.disposeIntermediateTensorInfo(_),n.disposeIntermediateTensorInfo(B),n.disposeIntermediateTensorInfo(K),n.disposeIntermediateTensorInfo(X),n.disposeIntermediateTensorInfo(H),n.disposeIntermediateTensorInfo(ee),n.disposeIntermediateTensorInfo(le),n.disposeIntermediateTensorInfo(ie),n.disposeIntermediateTensorInfo(de),n.disposeIntermediateTensorInfo(ce),n.disposeIntermediateTensorInfo(ge),n.disposeIntermediateTensorInfo(Ne),n.disposeIntermediateTensorInfo(Oe),n.disposeIntermediateTensorInfo(Fe),n.disposeIntermediateTensorInfo(Xe),n.disposeIntermediateTensorInfo(Ze),n.disposeIntermediateTensorInfo(St),{real:At,imag:Bt}}function dre(r,e,t){let o=new Float32Array(e*2);for(let n=0;n<e;n++){let s=0,i=0;for(let a=0;a<e;a++){let l=w.exponent(n*a,e,t),u=w.getComplexWithIndex(r,a);s+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}t&&(s/=e,i/=e),w.assignToTypedArray(o,s,i,n)}return o}function hre(r){let{inputs:e,backend:t}=r,{input:o}=e,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=He({inputs:{x:o},backend:t,attrs:{shape:[i,s]}}),l=bC(a,!1,t),u=He({inputs:{x:l},backend:t,attrs:{shape:o.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(l),u}var OO={kernelName:su,backendName:"cpu",kernelFunc:hre};function fg(r){let{backend:e,attrs:t}=r,{shape:o,value:n,dtype:s}=t,i=s||y.inferDtype(n),a=y.getArrayFromDType(i,y.sizeFromShape(o));return gre(a,n,i),e.makeTensorInfo(o,i,a)}var PO={kernelName:ma,backendName:"cpu",kernelFunc:fg};function gre(r,e,t){r.fill(e)}var LO={kernelName:fa,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,n=t,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[i,a,l,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<i;m++){let f=m*l*a*u;for(let d=0;d<a;d++){let h=d*(l*u);for(let g=0;g<l;g++){let x=g*u;for(let b=0;b<u;b++){let C=Math.round(l-g-1),S=f+h+x+b,I=c[S];if(C>=0&&C<l){let N=C*u,$=f+h+N+b;I=c[$]}s[S]=I}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var xre=je((r,e)=>Math.floor(r/e)),yre=tt(Cn,xre,null,"int32"),zO={kernelName:Cn,backendName:"cpu",kernelFunc:yre};function bre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:d}=o,h=ek({inputs:{x:n,filter:s},backend:t,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=h;if(c==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){let x=He({inputs:{x:i},backend:t,attrs:{shape:[i.shape[0],1,1]}});h=Ja({inputs:{a:h,b:x},backend:t}),t.disposeIntermediateTensorInfo(x)}else h=Ja({inputs:{a:h,b:i},backend:t});t.disposeIntermediateTensorInfo(g)}if(f){let g=h;if(c==="NCHW"&&f==="prelu"&&a.shape.length===1&&a.shape[0]!==1){let x=He({inputs:{x:a},backend:t,attrs:{shape:[a.shape[0],1,1]}});h=lp(t,h,f,x,d),t.disposeIntermediateTensorInfo(x)}else h=lp(t,h,f,a,d);t.disposeIntermediateTensorInfo(g)}return h}var BO={kernelName:Fi,backendName:"cpu",kernelFunc:bre};function Cre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:d}=o,h=tk({inputs:{x:n,filter:s},backend:t,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let g=h;h=Ja({inputs:{a:h,b:i},backend:t}),t.disposeIntermediateTensorInfo(g)}if(f){let g=h;h=lp(t,h,f,a,d),t.disposeIntermediateTensorInfo(g)}return h}var MO={kernelName:_i,backendName:"cpu",kernelFunc:Cre};function wre(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=y.sizeFromShape(o.shape),i=n.shape,a=i[i.length-1],[l,u,c,p]=w.prepareAndValidate(o,n);if(u===0)return t.makeTensorInfo(l,o.dtype,[]);let m=t.data.get(n.dataId).values,f=t.bufferSync(o),d=rC(m,f,o.dtype,u,a,c,p,o.shape,s);return t.makeTensorInfo(l,o.dtype,d.values)}var VO={kernelName:da,backendName:"cpu",kernelFunc:wre};function Sre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:i,batchDims:a}=o;Q([n,s],"gatherV2");let l=y.parseAxisParam(i,n.shape)[0],u=t.data.get(s.dataId).values,c=n.shape[l];for(let S=0;S<u.length;++S){let I=u[S];y.assert(I<=c-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${c-1}]`)}let p=a;a==null&&(p=0);let m=y.sizeFromShape(s.shape),f=w.segment_util.collectGatherOpShapeInfo(n,s,l,p),d=He({inputs:{x:n},backend:t,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),h=He({inputs:{x:s},backend:t,attrs:{shape:[f.batchSize,m/f.batchSize]}}),g=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],x=t.bufferSync(h),b=t.bufferSync(d),C=oC(b,x,g);return t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(h),t.makeTensorInfo(f.outputShape,C.dtype,C.values)}var GO={kernelName:cs,backendName:"cpu",kernelFunc:Sre};function Ire(r){let{inputs:e,backend:t}=r,{input:o}=e,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=He({inputs:{x:o},backend:t,attrs:{shape:[i,s]}}),l=bC(a,!0,t),u=He({inputs:{x:l},backend:t,attrs:{shape:o.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(l),u}var UO={kernelName:iu,backendName:"cpu",kernelFunc:Ire};var vre=$e(bi,r=>Number.isFinite(r)?1:0,"bool"),WO={kernelName:bi,backendName:"cpu",kernelFunc:vre};var Tre=$e(Ci,r=>Math.abs(r)===1/0?1:0,"bool"),HO={kernelName:Ci,backendName:"cpu",kernelFunc:Tre};var kre=$e(Sn,r=>Number.isNaN(r)?1:0,"bool"),KO={kernelName:Sn,backendName:"cpu",kernelFunc:kre};function Nre(r){let{backend:e,attrs:t}=r,{start:o,stop:n,num:s}=t,i=nC(o,n,s);return e.makeTensorInfo([i.length],"float32",i)}var qO={kernelName:au,backendName:"cpu",kernelFunc:Nre};var $re=$e(wi,r=>Math.log1p(r)),XO={kernelName:wi,backendName:"cpu",kernelFunc:$re};var Ere=je((r,e)=>r&&e),Rre=tt(Si,Ere,null,"bool"),jO={kernelName:Si,backendName:"cpu",kernelFunc:Rre};var Are=$e(Ii,r=>r?0:1,"bool"),YO={kernelName:Ii,backendName:"cpu",kernelFunc:Are};var Dre=je((r,e)=>r||e),Fre=tt(cl,Dre,null,"bool"),QO={kernelName:cl,backendName:"cpu",kernelFunc:Fre};function _re(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:i,alpha:a,beta:l}=o;Q(n,"LRN");let u=n.shape[3],c=u-1,p=t.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),f=new Float32Array(m);function d(h){let g=h%u,x=h-g+Math.max(0,g-s),b=h-g+Math.min(g+s,c),C=0;for(;x<=b;x++){let S=p[x];C+=S*S}return C}for(let h=0;h<m;h++){let g=d(h),x=p[h]*Math.pow(i+a*g,-l);f[h]=x}return t.makeTensorInfo(n.shape,n.dtype,f)}var ZO={kernelName:ga,backendName:"cpu",kernelFunc:_re};function Ore(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:i}=e,{depthRadius:a,bias:l,alpha:u,beta:c}=o;Q(i,"LRNGrad");let p=y.sizeFromShape(i.shape),m=i.shape[3],f=t.data.get(i.dataId).values,d=t.data.get(n.dataId).values,h=t.data.get(s.dataId).values,g=new Float32Array(p),x=p;for(let b=0;b<x;b++){let C=b%m,S=b-C+Math.max(0,C-a),I=b-C+Math.min(m,C+a+1),N=0;for(let $=S;$<I;$++)N+=Math.pow(d[$],2);N=u*N+l;for(let $=S;$<I;$++){let R=-2*u*c*d[$]*h[b]/N;b===$&&(R+=Math.pow(N,-c)),R*=f[b],g[$]+=R}}return t.makeTensorInfo(i.shape,n.dtype,g)}var JO={kernelName:lu,backendName:"cpu",kernelFunc:Ore};function ok(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:i}=o,a=t,l=n.shape,u=l.length,c=y.parseAxisParam(s,l),p=c,m=w.getAxesPermutation(p,u),f=a.data.get(n.dataId).values;if(m!=null){let S=new Array(u);for(let I=0;I<S.length;I++)S[I]=l[m[I]];f=df(f,l,n.dtype,m,S),p=w.getInnerMostAxes(p.length,u),l=S}Q(n,"max"),w.assertAxesAreInnerMostDims("max",p,u);let[d,h]=w.computeOutAndReduceShapes(l,p),g=y.sizeFromShape(h),x=sC(f,g,d,n.dtype),b=a.write(x,d,n.dtype),C=d;return i&&(C=w.expandShapeToKeepDim(d,c)),{dataId:b,shape:C,dtype:n.dtype}}var eP={kernelName:ms,backendName:"cpu",kernelFunc:ok};function Pre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;Q(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=Vr({inputs:{x:n},backend:t});else{let m=t.data.get(n.dataId).values,f=y.computeStrides(n.shape),d=xf(m,n.shape,n.dtype,f,c,"max");p=t.makeTensorInfo(c.outShape,n.dtype,d.values)}return p}var tP={kernelName:fs,backendName:"cpu",kernelFunc:Pre};function Lre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Q(n,"maxPool3d");let c=w.computePool3DInfo(n.shape,s,i,1,a,l,u),p=t.data.get(n.dataId).values,m=yC(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"max");return t.makeTensorInfo(m.shape,"float32",m.values)}var rP={kernelName:xa,backendName:"cpu",kernelFunc:Lre};function zre(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Q([n,s],"maxPool3DGrad");let c=w.computePool3DInfo(s.shape,i,a,1,l,u),p=t.bufferSync(s),m=Q_(p,c),f=c.strideDepth,d=c.strideHeight,h=c.strideWidth,g=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,C=c.effectiveFilterDepth,S=c.effectiveFilterHeight,I=c.effectiveFilterWidth,N=C-1-c.padInfo.front,$=I-1-c.padInfo.left,R=S-1-c.padInfo.top,F=te(s.shape,"float32"),_=t.bufferSync(n);for(let B=0;B<c.batchSize;++B)for(let V=0;V<c.inChannels;++V)for(let G=0;G<c.inDepth;++G)for(let W=0;W<c.inHeight;++W)for(let U=0;U<c.inWidth;++U){let K=G-N,X=W-R,H=U-$,Z=0;for(let J=0;J<C;J+=g){let ee=(K+J)/f;if(!(ee<0||ee>=c.outDepth||Math.floor(ee)!==ee))for(let le=0;le<S;le+=x){let ie=(X+le)/d;if(!(ie<0||ie>=c.outHeight||Math.floor(ie)!==ie))for(let de=0;de<I;de+=b){let ce=(H+de)/h;if(ce<0||ce>=c.outWidth||Math.floor(ce)!==ce)continue;let ge=C*S*I-1-m.get(B,ee,ie,ce,V),Ne=J*S*I+le*I+de,Fe=ge===Ne?1:0;if(Fe===0)continue;Z+=_.get(B,ee,ie,ce,V)*Fe}}}F.set(Z,B,G,W,U,V)}return t.makeTensorInfo(F.shape,F.dtype,F.values)}var oP={kernelName:cu,backendName:"cpu",kernelFunc:zre};function Bre(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s,output:i}=e,a=s;Q([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=w.computePool2DInfo(a.shape,l,u,1,c,p),f=t.data.get(a.dataId).values,d=te(m.outShape,a.dtype,xC(f,a.shape,a.dtype,m).values),h=m.strideHeight,g=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,C=m.effectiveFilterHeight,S=m.effectiveFilterWidth,I=S-1-m.padInfo.left,N=C-1-m.padInfo.top,$=te(a.shape,"float32"),R=t.data.get(n.dataId).values,F=te(n.shape,"float32",R);for(let _=0;_<m.batchSize;++_)for(let B=0;B<m.inChannels;++B)for(let V=0;V<m.inHeight;++V)for(let G=0;G<m.inWidth;++G){let W=V-N,U=G-I,K=0;for(let X=0;X<C;X+=x){let H=(W+X)/h;if(!(H<0||H>=m.outHeight||Math.floor(H)!==H))for(let Z=0;Z<S;Z+=b){let J=(U+Z)/g;if(J<0||J>=m.outWidth||Math.floor(J)!==J)continue;let ee=C*S-1-d.get(_,H,J,B),le=X*S+Z,ie=ee===le?1:0;if(ie===0)continue;K+=F.get(_,H,J,B)*ie}}$.set(K,_,V,G,B)}return t.makeTensorInfo($.shape,$.dtype,$.values)}var nP={kernelName:uu,backendName:"cpu",kernelFunc:Bre};function sP(r,e,t,o,n){let s=y.computeStrides(e),i=xf(r,e,t,s,n,"max"),a=xC(r,e,t,n,!0,o);return[i.values,a.values]}var iP={kernelName:pu,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=e,l=t;Q(o,"MaxPoolWithArgmax");let u=l.data.get(o.dataId).values,c=w.computePool2DInfo(o.shape,n,s,[1,1],i),[p,m]=sP(u,o.shape,o.dtype,a,c),f=l.write(p,c.outShape,o.dtype),d=l.write(m,c.outShape,o.dtype);return[{dataId:f,shape:c.outShape,dtype:o.dtype},{dataId:d,shape:c.outShape,dtype:"int32"}]}};function Mre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=y.parseAxisParam(s,n.shape),u=w.computeOutAndReduceShapes(n.shape,a)[1],c=y.sizeFromShape(u),p=[],m=t.makeTensorInfo([],"float32",new Float32Array([c]));p.push(m);let f=Ys({inputs:{x:n},backend:t,attrs:{dtype:"float32"}});p.push(f);let d=pg({inputs:{a:f,b:m},backend:t});p.push(d);let h=El({inputs:{x:d},backend:t,attrs:{axis:s,keepDims:i}});return p.forEach(g=>t.disposeIntermediateTensorInfo(g)),h}var aP={kernelName:ds,backendName:"cpu",kernelFunc:Mre};function Vre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;Q(n,"min");let a=y.parseAxisParam(s,n.shape),l=a,u=w.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=Pt({inputs:{x:n},backend:t,attrs:{perm:u}}),l=w.getInnerMostAxes(l.length,n.shape.length)),w.assertAxesAreInnerMostDims("min",l,c.shape.length);let[p,m]=w.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),d=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),h=t.data.get(c.dataId).values;for(let x=0;x<d.length;++x){let b=x*f,C=h[b];for(let S=0;S<f;++S){let I=h[b+S];(Number.isNaN(I)||I<C)&&(C=I)}d[x]=C}u!=null&&t.disposeIntermediateTensorInfo(c);let g=t.makeTensorInfo(p,c.dtype,d);if(i){let x=w.expandShapeToKeepDim(p,a),b=He({inputs:{x:g},backend:t,attrs:{shape:x}});return t.disposeIntermediateTensorInfo(g),b}return g}var lP={kernelName:hs,backendName:"cpu",kernelFunc:Vre};function Gre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,mode:i}=o;Q(n,"mirrorPad");let a=s.map((C,S)=>C[0]+n.shape[S]+C[1]),l=s.map(C=>C[0]),u=s.map((C,S)=>C[0]+n.shape[S]),c=i==="reflect"?0:1,p=t.data.get(n.dataId).values,m=n.shape.length,f=y.computeStrides(n.shape),d=y.sizeFromShape(a),h=a.length,g=y.computeStrides(a),x=y.getTypedArrayFromDType(n.dtype,d);for(let C=0;C<d;C++){let S=y.indexToLoc(C,h,g);for(let N=0;N<h;N++)S[N]<l[N]?S[N]=l[N]*2-S[N]-c:S[N]>=u[N]&&(S[N]=(u[N]-1)*2-S[N]+c);S=S.map((N,$)=>N-l[$]);let I=y.locToIndex(S,m,f);x[C]=p[I]}return{dataId:t.write(x,a,n.dtype),shape:a,dtype:n.dtype}}var uP={kernelName:gs,backendName:"cpu",kernelFunc:Gre};var Ure=je((r,e)=>{let t=r%e;return r<0&&e<0||r>=0&&e>=0?t:(t+e)%e}),Wre=tt(vi,Ure),cP={kernelName:vi,backendName:"cpu",kernelFunc:Wre};var mP=pd(Dd());function nk(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,i=n.shape.length,a=s;if(a===-1&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);let l=y.parseAxisParam([a],n.shape),u=ok({inputs:{x:n},backend:t,attrs:{reductionIndices:l,keepDims:!1}}),c=w.expandShapeToKeepDim(u.shape,l),p=He({inputs:{x:u},backend:t,attrs:{shape:c}}),m=ug({inputs:{a:n,b:p},backend:t}),f=$T({inputs:{x:m},backend:t}),d=El({inputs:{x:f},backend:t,attrs:{axis:l,keepDims:!1}}),h=He({inputs:{x:d},backend:t,attrs:{shape:c}}),g=pg({inputs:{a:f,b:h},backend:t});return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(h),g}var pP={kernelName:$s,backendName:"cpu",kernelFunc:nk};function Hre(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:i,normalized:a}=o;Q(n,"multinomial");let l=a?n:nk({inputs:{logits:n},backend:t,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=t.data.get(l.dataId).values,m=[u,s],f=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let d=0;d<u;++d){let h=d*c,g=new Float32Array(c-1);g[0]=p[h];for(let C=1;C<g.length;++C)g[C]=g[C-1]+p[h+C];let x=mP.alea(i.toString()),b=d*s;for(let C=0;C<s;++C){let S=x();f[b+C]=g.length;for(let I=0;I<g.length;I++)if(S<g[I]){f[b+C]=I;break}}}return a||t.disposeIntermediateTensorInfo(l),t.makeTensorInfo(m,"int32",f)}var fP={kernelName:mu,backendName:"cpu",kernelFunc:Hre};var Kre=vt.nonMaxSuppressionV3Impl;function qre(r){let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o;Q(n,"NonMaxSuppression");let u=t.data.get(n.dataId).values,c=t.data.get(s.dataId).values,{selectedIndices:p}=Kre(u,c,i,a,l);return t.makeTensorInfo([p.length],"int32",new Int32Array(p))}var dP={kernelName:ya,backendName:"cpu",kernelFunc:qre};var Xre=vt.nonMaxSuppressionV4Impl;function jre(r){let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o;Q(n,"NonMaxSuppressionPadded");let c=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,{selectedIndices:m,validOutputs:f}=Xre(c,p,i,a,l,u);return[t.makeTensorInfo([m.length],"int32",new Int32Array(m)),t.makeTensorInfo([],"int32",new Int32Array([f]))]}var hP={kernelName:fu,backendName:"cpu",kernelFunc:jre};var Yre=vt.nonMaxSuppressionV5Impl;function Qre(r){let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o;Q(n,"NonMaxSuppressionWithScore");let c=t.data.get(n.dataId).values,p=t.data.get(s.dataId).values,m=i,f=a,d=l,h=u,{selectedIndices:g,selectedScores:x}=Yre(c,p,m,f,d,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var gP={kernelName:ba,backendName:"cpu",kernelFunc:Qre};function Zre(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:i,onValue:a,offValue:l}=o;Q(n,"oneHot");let u=y.sizeFromShape(n.shape),c=new Float32Array(u*i);c.fill(l);let p=t.data.get(n.dataId).values;for(let m=0;m<u;++m)p[m]>=0&&p[m]<i&&(c[m*i+p[m]]=a);return t.makeTensorInfo([...n.shape,i],s,c)}var xP={kernelName:Ca,backendName:"cpu",kernelFunc:Zre};function dg(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=js({inputs:{input:o},backend:t}),s=dg({inputs:{x:n},backend:t}),i=el({inputs:{input:o},backend:t}),a=dg({inputs:{x:i},backend:t}),l=yr({inputs:{real:s,imag:a},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(a),l}else return fg({backend:t,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var yP={kernelName:Rs,backendName:"cpu",kernelFunc:dg};function bP(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=js({inputs:{input:o},backend:t}),s=bP({inputs:{x:n},backend:t}),i=el({inputs:{input:o},backend:t}),a=dg({inputs:{x:i},backend:t}),l=yr({inputs:{real:s,imag:a},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(a),l}else return fg({backend:t,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var CP={kernelName:xs,backendName:"cpu",kernelFunc:bP};function sk(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return yf({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,i=e[0].dtype;e.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=e.map(c=>{let p=yf({inputs:{input:c},backend:t,attrs:{dim:n}});return a.push(p),p}),u=tc({inputs:l,backend:t,attrs:{axis:n}});return a.forEach(c=>t.disposeIntermediateTensorInfo(c)),u}var wP={kernelName:ys,backendName:"cpu",kernelFunc:sk};function Jre(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:i}=o;Q(n,"pad");let a=s.map((b,C)=>b[0]+n.shape[C]+b[1]),l=s.map(b=>b[0]),u=t.data.get(n.dataId).values,c=y.sizeFromShape(n.shape),p=n.shape.length,m=y.computeStrides(n.shape),f=y.sizeFromShape(a),d=a.length,h=y.computeStrides(a),g=y.getTypedArrayFromDType(n.dtype,f);i!==0&&g.fill(i);for(let b=0;b<c;b++){let S=y.indexToLoc(b,p,m).map((N,$)=>N+l[$]),I=y.locToIndex(S,d,h);g[I]=u[b]}return{dataId:t.write(g,a,n.dtype),shape:a,dtype:n.dtype}}var CC={kernelName:bs,backendName:"cpu",kernelFunc:Jre};var eoe=je((r,e)=>Math.pow(r,e)),toe=tt(Nn,eoe),SP={kernelName:Nn,backendName:"cpu",kernelFunc:toe};function roe(r){let{inputs:e,backend:t,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=e,{rowPartitionTypes:l}=o,u=t.data.get(n.dataId).values,c=t.data.get(s.dataId).values,p=t.data.get(i.dataId).values,m=a.map(g=>t.data.get(g.dataId).values),f=a.map(g=>g.shape),[d,h]=iC(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return t.makeTensorInfo(d,s.dtype,h)}var IP={kernelName:du,backendName:"cpu",kernelFunc:roe};function ooe(r){let{backend:e,attrs:t}=r,{start:o,stop:n,dtype:s,step:i}=t,a=aC(o,n,i,s);return e.makeTensorInfo([a.length],s,a)}var vP={kernelName:wa,backendName:"cpu",kernelFunc:ooe};var noe=$e(En,r=>1/r),TP={kernelName:En,backendName:"cpu",kernelFunc:noe};function soe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o;Q(n,"resizeBilinear");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,d]=n.shape,h=t.data.get(n.dataId).values,g=new Float32Array(y.sizeFromShape([p,u,c,d])),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],C=0,S=x[0]/b[0],I=x[1]/b[1];for(let N=0;N<p;N++)for(let $=0;$<u;$++){let R;i?R=S*($+.5)-.5:R=S*$;let F=Math.max(0,Math.floor(R)),_=R-F,B=Math.min(m-1,Math.ceil(R)),V=N*l[0]+F*l[1],G=N*l[0]+B*l[1];for(let W=0;W<c;W++){let U;i?U=I*(W+.5)-.5:U=I*W;let K=Math.max(0,Math.floor(U)),X=U-K,H=Math.min(f-1,Math.ceil(U)),Z=V+K*l[2],J=G+K*l[2],ee=V+H*l[2],le=G+H*l[2];for(let ie=0;ie<d;ie++){let de=h[Z+ie],ce=h[J+ie],ge=h[ee+ie],Ne=h[le+ie],Fe=de+(ge-de)*X,Oe=ce+(Ne-ce)*X,Xe=Fe+(Oe-Fe)*_;g[C++]=Xe}}}return t.makeTensorInfo([p,u,c,d],"float32",g)}var kP={kernelName:Is,backendName:"cpu",kernelFunc:soe};function ioe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:i}=o;Q([s,n],"resizeBilinearGrad");let a=y.computeStrides(n.shape),[l,u,c,p]=n.shape,[,m,f]=s.shape,d=new Float32Array(l*u*c*p),h=[i&&m>1?u-1:u,i&&f>1?c-1:c],g=[i&&m>1?m-1:m,i&&f>1?f-1:f],x=h[0]/g[0],b=h[1]/g[1],C=t.data.get(s.dataId).values,S=0;for(let I=0;I<l;I++){let N=I*a[0];for(let $=0;$<m;$++){let R=$*x,F=Math.floor(R),_=Math.min(Math.ceil(R),u-1),B=N+F*a[1],V=N+_*a[1],G=R-F,W=1-G;for(let U=0;U<f;U++){let K=U*b,X=Math.floor(K),H=Math.min(Math.ceil(K),c-1),Z=K-X,J=1-Z,ee=B+X*a[2],le=B+H*a[2],ie=V+X*a[2],de=V+H*a[2],ce=W*J,ge=W*Z,Ne=G*J,Fe=G*Z;for(let Oe=0;Oe<p;Oe++){let Xe=C[S++];d[ee+Oe]+=Xe*ce,d[le+Oe]+=Xe*ge,d[ie+Oe]+=Xe*Ne,d[de+Oe]+=Xe*Fe}}}}return t.makeTensorInfo([l,c,u,p],"float32",d)}var NP={kernelName:gu,backendName:"cpu",kernelFunc:ioe};function aoe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o;Q(n,"resizeNearestNeighbor");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,d]=n.shape,h=t.data.get(n.dataId).values,g=new Float32Array(p*u*c*d),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],C=x[0]/b[0],S=x[1]/b[1],I=0;for(let N=0;N<p;N++){let $=N*l[0];for(let R=0;R<u;R++){let F=i?C*(R+.5):C*R,_=Math.min(m-1,s?Math.round(F):Math.floor(F));i&&(_=Math.max(0,_));let B=$+_*l[1];for(let V=0;V<c;V++){let G=i?S*(V+.5):S*V,W=Math.min(f-1,s?Math.round(G):Math.floor(G));i&&(W=Math.max(0,W));let U=B+W*l[2];for(let K=0;K<d;K++){let X=h[U+K];g[I++]=X}}}}return t.makeTensorInfo([p,u,c,d],n.dtype,g)}var $P={kernelName:Ss,backendName:"cpu",kernelFunc:aoe};function loe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:i}=o;Q([s,n],"resizeNearestNeighborGrad");let a=y.computeStrides(n.shape),l=y.computeStrides(s.shape),[u,c,p,m]=n.shape,[,f,d]=s.shape,h=new Float32Array(u*c*p*m),g=t.data.get(s.dataId).values,x=[i&&f>1?c-1:c,i&&d>1?p-1:p],b=[i&&f>1?f-1:f,i&&d>1?d-1:d],C=x[0]/b[0],S=x[1]/b[1],I=1/C,N=1/S,$=Math.ceil(I)*2+2,R=Math.ceil(N)*2+2;for(let F=0;F<u;F++){let _=F*a[0];for(let B=0;B<c;B++){let V=_+B*a[1],G=Math.floor(B*I),W=Math.floor(G-$/2);for(let U=0;U<p;U++){let K=V+U*a[2],X=Math.floor(U*N),H=Math.floor(X-R/2);for(let Z=0;Z<m;Z++){let J=0;for(let ee=0;ee<$;ee++){let le=ee+W;if(le<0||le>=f)continue;let ie=_+le*l[1],de=le*C,ce=Math.min(c-1,i?Math.round(de):Math.floor(de));if(B===ce)for(let ge=0;ge<R;ge++){let Ne=ge+H;if(Ne<0||Ne>=d)continue;let Fe=ie+Ne*l[2],Oe=Ne*S,Xe=Math.min(p-1,i?Math.round(Oe):Math.floor(Oe));U===Xe&&(J+=g[Fe+Z])}}h[K+Z]=J}}}}return t.makeTensorInfo(n.shape,n.dtype,h)}var EP={kernelName:hu,backendName:"cpu",kernelFunc:loe};function uoe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o;Q(n,"reverse");let i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Vr({inputs:{x:n},backend:t});let l=new Je(n.shape,n.dtype),u=t.bufferSync(n);for(let c=0;c<l.size;c++){let p=l.indexToLoc(c),m=p.slice();a.forEach(f=>m[f]=n.shape[f]-1-m[f]),l.set(u.get(...m),...p)}return t.makeTensorInfo(l.shape,l.dtype,l.values)}var RP={kernelName:Sa,backendName:"cpu",kernelFunc:uoe};var AP={kernelName:Aa,backendName:"cpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=e,a=t,l=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,c,p,m]=o.shape,[f,d]=w.getImageCenter(i,c,p),h=255,g=Math.sin(n),x=Math.cos(n),b=a.data.get(o.dataId).values;for(let S=0;S<u;S++){let I=S*p*c*m;for(let N=0;N<c;N++){let $=N*(p*m);for(let R=0;R<p;R++){let F=R*m;for(let _=0;_<m;_++){let B=[u,N,R,_],V=B[2],G=B[1],W=(V-f)*x-(G-d)*g,U=(V-f)*g+(G-d)*x;W=Math.round(W+f),U=Math.round(U+d);let K=s;if(typeof s!="number"&&(_===3?K=h:K=s[_]),W>=0&&W<p&&U>=0&&U<c){let H=U*(p*m),Z=W*m,J=I+H+Z+_;K=b[J]}let X=I+$+F+_;l[X]=K}}}}return{dataId:a.write(l,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var coe=$e(ki,r=>{let e=Math.floor(r);return r-e<.5?Math.floor(r):r-e>.5?Math.ceil(r):e%2===0?e:e+1}),DP={kernelName:ki,backendName:"cpu",kernelFunc:coe};function poe(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=w.calculateShapes(s,n,i),m=!0,f=t.bufferSync(n),d=t.bufferSync(s),h=$l(f,d,i,p,u,l,a,c,0,m);return t.makeTensorInfo(i,h.dtype,h.values)}var FP={kernelName:Ia,backendName:"cpu",kernelFunc:poe};function moe(r,e){let t=0,o=r.length,n=0;for(;t<o;)n=Math.floor((t+o)/2),r[n]<e?t=n+1:o=n;return o}function foe(r,e){let t=0,o=r.length,n=0;for(;t<o;)n=Math.floor((t+o)/2),r[n]<=e?t=n+1:o=n;return o}function _P(r,e,t,o,n,s){let i=y.getArrayFromDType("int32",t*n);for(let a=0;a<t;++a){let l=r.slice(a*o,(a+1)*o),u=a*n;for(let c=0;c<n;++c)i[u+c]=s==="left"?moe(l,e[c+u]):foe(l,e[c+u])}return i}function doe(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:i}=o,a=t.data.get(n.dataId).values,l=t.data.get(s.dataId).values,u=_P(a,l,n.shape[0],n.shape[1],s.shape[1],i);return t.makeTensorInfo(s.shape,"int32",u)}var OP={kernelName:xu,backendName:"cpu",kernelFunc:doe};function hoe(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e;Q([o,n,s],"select");let i=o.shape.length,a=t.data.get(o.dataId).values,l=t.data.get(n.dataId).values,u=t.data.get(s.dataId).values,c=Ye(n.dtype,s.dtype),p=y.makeZerosTypedArray(y.sizeFromShape(n.shape),c),m=0,f=i===0||i>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let d=0;d<a.length;d++)for(let h=0;h<f;h++)a[d]===1?p[m++]=l[d]:p[m++]=u[d];return t.makeTensorInfo(n.shape,c,p)}var PP={kernelName:vs,backendName:"cpu",kernelFunc:hoe};var goe=w.SELU_SCALEALPHA,xoe=w.SELU_SCALE,yoe=$e(Ni,r=>r>=0?xoe*r:goe*(Math.exp(r)-1)),LP={kernelName:Ni,backendName:"cpu",kernelFunc:yoe};var boe=$e($i,r=>r<0?-1:r>0?1:0),zP={kernelName:$i,backendName:"cpu",kernelFunc:boe};var Coe=$e(Fn,r=>Math.sin(r)),BP={kernelName:Fn,backendName:"cpu",kernelFunc:Coe};var woe=$e(_n,r=>Math.sinh(r)),MP={kernelName:_n,backendName:"cpu",kernelFunc:woe};var Soe=11920928955078125e-23,VP=Math.log(Soe)+2,Ioe=$e(Ei,r=>{let e=r>-VP,t=r<VP,o=Math.exp(r),n;return t?n=o:e?n=r:n=Math.log(1+o),n}),GP={kernelName:Ei,backendName:"cpu",kernelFunc:Ioe};function voe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:i}=o;Q([n],"spaceToBatchND");let a=y.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let N=1+s.length;N<n.shape.length;++N)l.push([0,0]);let u=CC.kernelFunc({inputs:{x:n},backend:t,attrs:{paddings:l,constantValue:0}}),c=w.getReshaped(u.shape,s,a,!1),p=w.getPermuted(c.length,s.length,!1),m=w.getReshapedPermuted(u.shape,s,a,!1),h=He({inputs:{x:u},backend:t,attrs:{shape:c}}),b=Pt({inputs:{x:h},backend:t,attrs:{perm:p}}),I=He({inputs:{x:b},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(b),I}var UP={kernelName:ks,backendName:"cpu",kernelFunc:voe};function Toe(r){let{inputs:e,backend:t}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=e;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=t.data.get(o.dataId).values,l=t.data.get(n.dataId).values,u=t.data.get(s.dataId).values,c=t.data.get(i.dataId).values[0],[p,m,f,d,h]=lC(a,o.shape,o.dtype,l,n.dtype,u,c);return[t.makeTensorInfo(m,o.dtype,p),t.makeTensorInfo([m[0]],n.dtype,f),t.makeTensorInfo([d.length],"bool",new Uint8Array(d.map(g=>Number(g)))),t.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var WP={kernelName:yu,backendName:"cpu",kernelFunc:Toe};function koe(r){let{inputs:e,backend:t}=r,{inputIndices:o,inputShape:n,newShape:s}=e;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(t.data.get(n.dataId).values),a=t.data.get(o.dataId).values,l=Array.from(t.data.get(s.dataId).values),[u,c,p]=uC(a,o.shape,o.dtype,i,l);return[t.makeTensorInfo(c,o.dtype,u),t.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var HP={kernelName:bu,backendName:"cpu",kernelFunc:koe};function Noe(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=t.data.get(o.dataId).values,a=t.data.get(n.dataId).values,l=t.data.get(s.dataId).values,[u,c]=gf(i,o.shape,o.dtype,a,l,!0);return t.makeTensorInfo(c,o.dtype,u)}var KP={kernelName:Cu,backendName:"cpu",kernelFunc:Noe};function $oe(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=t.data.get(o.dataId).values,a=t.data.get(n.dataId).values,l=t.data.get(s.dataId).values,[u,c]=gf(i,o.shape,o.dtype,a,l);return t.makeTensorInfo(c,o.dtype,u)}var qP={kernelName:wu,backendName:"cpu",kernelFunc:$oe};function Eoe(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=e,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=w.calculateShapes(s,n,a),f=!1,d=t.bufferSync(n),h;switch(s.dtype){case"bool":{let g=t.bufferSync(s),x=Boolean(t.data.get(i.dataId).values[0]);h=$l(d,g,a,m,c,u,l,p,x,f);break}case"float32":{let g=t.bufferSync(s),x=t.data.get(i.dataId).values[0];h=$l(d,g,a,m,c,u,l,p,x,f);break}case"int32":{let g=t.bufferSync(s),x=t.data.get(i.dataId).values[0];h=$l(d,g,a,m,c,u,l,p,x,f);break}case"string":{let g=t.bufferSync(s),x=y.decodeString(t.data.get(i.dataId).values[0]);h=$l(d,g,a,m,c,u,l,p,x,f);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return t.makeTensorInfo(a,h.dtype,h.values)}var XP={kernelName:va,backendName:"cpu",kernelFunc:Eoe};function Roe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=w.prepareSplitSize(n,s,a),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return l.map(p=>{let m=[...c];m[a]=p;let f=Js({inputs:{x:n},backend:t,attrs:{begin:u,size:m}});return u[a]+=p,f})}var jP={kernelName:Ns,backendName:"cpu",kernelFunc:Roe};var YP={kernelName:Ta,backendName:"cpu",kernelFunc:({inputs:r,backend:e})=>{let{x:t}=r,o=e;Q(t,"square");let n=o.data.get(t.dataId).values,s=new Float32Array(n.length);for(let a=0;a<n.length;++a){let l=n[a];s[a]=l*l}return{dataId:o.write(s,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}};var Aoe=$e(Ai,(r,e)=>{let t=e;return isNaN(r)?NaN:r>0?1:t.alpha}),QP={kernelName:Ai,backendName:"cpu",kernelFunc:Aoe};function Doe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o;Q(n,"stridedSlice");let{finalShapeSparse:f,finalShape:d,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=rt.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(h)I=He({inputs:{x:n},backend:t,attrs:{shape:d}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let N=rt.computeOutShape(b,C,S),$=Js({inputs:{x:n},backend:t,attrs:{begin:b,size:N}});I=He({inputs:{x:$},backend:t,attrs:{shape:d}}),t.disposeIntermediateTensorInfo($)}else{let N=t.bufferSync(n),$=cC(f,N,S,b);I=t.makeTensorInfo(d,$.dtype,$.values)}return I}var ZP={kernelName:ka,backendName:"cpu",kernelFunc:Doe};function Foe(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=e,m=t.data.get(c.dataId).values,f=t.data.get(p.dataId).values,[d,h]=pC(m,f,n,s,i,a,l,u);return[t.makeTensorInfo([d.length],"string",d),t.makeTensorInfo(p.shape,"int32",h)]}var JP={kernelName:Na,backendName:"cpu",kernelFunc:Foe};function _oe(r){let{inputs:e,backend:t,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=t.data.get(s.dataId).values,l=t.data.get(i.dataId).values[0],[u,c,p]=mC(a,l,n),m=c.length;return[t.makeTensorInfo([m,2],"int32",u),t.makeTensorInfo([m],"string",c),t.makeTensorInfo([2],"int32",new Int32Array(p))]}var eL={kernelName:Su,backendName:"cpu",kernelFunc:_oe};function Ooe(r){let{inputs:e,backend:t,attrs:o}=r,{numBuckets:n}=o,{input:s}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=t.data.get(s.dataId).values,a=fC(i,n);return t.makeTensorInfo(s.shape,"int32",a)}var tL={kernelName:Iu,backendName:"cpu",kernelFunc:Ooe};var Poe=$e(Ri,r=>Math.tan(r)),rL={kernelName:Ri,backendName:"cpu",kernelFunc:Poe};var Loe=$e(On,r=>Math.tanh(r)),oL={kernelName:On,backendName:"cpu",kernelFunc:Loe};function zoe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;Q(n,"tile");let i=dC(t.bufferSync(n),s);return t.makeTensorInfo(i.shape,i.dtype,i.values)}var nL={kernelName:Ko,backendName:"cpu",kernelFunc:zoe};function Boe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:i}=o;Q(n,"topk");let a=t.data.get(n.dataId).values,[l,u]=hC(a,n.shape,n.dtype,s,i);return[t.makeTensorInfo(l.shape,l.dtype,l.values),t.makeTensorInfo(u.shape,u.dtype,u.values)]}var sL={kernelName:$a,backendName:"cpu",kernelFunc:Boe};function Moe(r){let{inputs:e,attrs:t,backend:o}=r,{image:n,transforms:s}=e,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=t,[c,p,m,f]=n.shape,[d,h]=u??[p,m],g=[c,d,h,f],x=y.computeStrides(n.shape),b=x[0],C=x[1],S=x[2],I=y.computeStrides(g),N=I[0],$=I[1],R=I[2],F=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(g));F.fill(l);let _=o.data.get(n.dataId).values,B=o.data.get(s.dataId).values;for(let G=0;G<c;++G){let W=s.shape[0]===1?B:B.subarray(G*8,G*8+8);for(let U=0;U<d;++U)for(let K=0;K<h;++K)for(let X=0;X<f;++X){let H,Z=W[6]*K+W[7]*U+1;if(Z===0)continue;let J=(W[0]*K+W[1]*U+W[2])/Z,ee=(W[3]*K+W[4]*U+W[5])/Z,le=iL(J,m,a),ie=iL(ee,p,a);switch(i){case"nearest":H=Hoe(_,p,m,b,C,S,G,ie,le,X,l);break;case"bilinear":H=Koe(_,p,m,b,C,S,G,ie,le,X,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let de=G*N+U*$+K*R+X;F[de]=H}return o.makeTensorInfo(g,n.dtype,F)}return{dataId:o.write(F,g,n.dtype),shape:n.shape,dtype:n.dtype}}var aL={kernelName:Ea,backendName:"cpu",kernelFunc:Moe};function iL(r,e,t){switch(t){case"reflect":return Voe(r,e);case"wrap":return Goe(r,e);case"nearest":return Woe(r,e);case"constant":default:return Uoe(r,e)}}function Voe(r,e){let t=r;if(t<0)if(e<=1)t=0;else{let o=2*e;t<o&&(t=o*Math.trunc(-t/o)+t),t=t<-e?t+o:-t-1}else if(t>e-1)if(e<=1)t=0;else{let o=2*e;t-=o*Math.trunc(t/o),t>=e&&(t=o-t-1)}return y.clamp(0,t,e-1)}function Goe(r,e){let t=r;if(t<0)if(e<=1)t=0;else{let o=e-1;t+=e*(Math.trunc(-t/o)+1)}else if(t>e-1)if(e<=1)t=0;else{let o=e-1;t-=e*Math.trunc(t/o)}return y.clamp(0,t,e-1)}function Uoe(r,e){return r}function Woe(r,e){return y.clamp(0,r,e-1)}function hg(r,e,t,o,n,s,i,a,l,u,c){let p=i*o+a*n+l*s+u;return 0<=a&&a<e&&0<=l&&l<t?r[p]:c}function Hoe(r,e,t,o,n,s,i,a,l,u,c){let p=Math.round(a),m=Math.round(l);return hg(r,e,t,o,n,s,i,p,m,u,c)}function Koe(r,e,t,o,n,s,i,a,l,u,c){let p=Math.floor(a),m=Math.floor(l),f=p+1,d=m+1,h=(d-l)*hg(r,e,t,o,n,s,i,p,m,u,c)+(l-m)*hg(r,e,t,o,n,s,i,p,d,u,c),g=(d-l)*hg(r,e,t,o,n,s,i,f,m,u,c)+(l-m)*hg(r,e,t,o,n,s,i,f,d,u,c);return(f-a)*h+(a-p)*g}function qoe(r){let{inputs:e,attrs:t,backend:o}=r,{axis:n}=t,{x:s}=e;Q(s,"unique");let i=o.data.get(s.dataId).values,{outputValues:a,outputShape:l,indices:u}=gC(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var lL={kernelName:vu,backendName:"cpu",kernelFunc:qoe};function Xoe(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n.shape.length,a=n.shape[s],l=new Array(i-1),u=0;for(let f=0;f<i;f++)f!==s&&(l[u++]=n.shape[f]);let c=new Array(i).fill(0),p=n.shape.slice();p[s]=1;let m=new Array(a);for(let f=0;f<m.length;f++){c[s]=f;let d=Js({inputs:{x:n},backend:t,attrs:{begin:c,size:p}});m[f]=He({inputs:{x:d},backend:t,attrs:{shape:l}}),t.disposeIntermediateTensorInfo(d)}return m}var uL={kernelName:Es,backendName:"cpu",kernelFunc:Xoe};function joe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,segmentIds:s}=e,{numSegments:i}=o;Q(n,"unsortedSegmentSum");let a=n.shape.length,l=s.shape.length,u=[],c=[],p=a-l,m=s;for(let d=0;d<p;++d){let h=yf({inputs:{input:m},backend:t,attrs:{dim:d+1}});m=h,c.push(h)}for(let d=0;d<i;++d){let h=y.createScalarValue(d,"int32"),g=t.makeTensorInfo([],"int32",h),x=kT({inputs:{a:g,b:m},backend:t}),b=Ys({inputs:{x},backend:t,attrs:{dtype:"float32"}}),C=ap({inputs:{a:b,b:n},backend:t}),S=El({inputs:{x:C},backend:t,attrs:{axis:0,keepDims:!1}});u.push(S),c.push(g),c.push(x),c.push(b),c.push(C),c.push(S)}let f=sk({inputs:u,backend:t,attrs:{axis:0}});return c.forEach(d=>t.disposeIntermediateTensorInfo(d)),f}var cL={kernelName:Ra,backendName:"cpu",kernelFunc:joe};var Yoe=[z_,QF,B_,M_,r_,V_,G_,U_,W_,H_,K_,q_,X_,j_,Y_,Z_,J_,eO,tO,L_,rO,oO,nO,sO,t_,o_,iO,ZF,aO,uO,cO,pO,mO,fO,dO,hO,gO,xO,yO,bO,CO,wO,SO,IO,vO,TO,kO,NO,$O,EO,AO,A_,DO,n_,FO,s_,_O,i_,OO,PO,LO,a_,zO,BO,MO,VO,GO,l_,u_,JF,UO,lO,WO,HO,KO,D_,c_,p_,qO,m_,XO,jO,YO,QO,ZO,JO,eP,f_,tP,rP,oP,nP,iP,aP,lP,d_,uP,cP,fP,h_,g_,dP,hP,gP,x_,xP,CP,wP,CC,SP,F_,b_,IP,vP,e_,mg,TP,__,O_,P_,kP,NP,$P,EP,RP,AP,DP,S_,FP,OP,PP,LP,v_,zP,BP,MP,T_,pP,GP,UP,WP,HP,KP,qP,XP,jP,N_,YP,$_,QP,ZP,JP,eL,tL,E_,RO,rL,oL,nL,sL,aL,y_,lL,uL,cL,yP];for(let r of Yoe)Tu(r);var up={},wC={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function pL(r,e){up[r]=e}function rn(r,e){if(!(r in up)||e!=null){let o=Zoe(r,e);if(o!==null)up[r]=o;else return console.log("Could not get context for WebGL version",r),null}let t=up[r];return t==null||t.isContextLost()?(delete up[r],rn(r)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),up[r])}function Qoe(r){if(typeof OffscreenCanvas<"u"&&r===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function Zoe(r,e){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let t=e??Qoe(r);return t.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete up[r]},!1),D().getBool("SOFTWARE_WEBGL_ENABLED")&&(wC.failIfMajorPerformanceCaveat=!1),r===1?t.getContext("webgl",wC)||t.getContext("experimental-webgl",wC):t.getContext("webgl2",wC)}var rc;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(rc||(rc={}));var Gr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(Gr||(Gr={}));var Ar;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(Ar||(Ar={}));function cp(r,e){return[e,r]}function mL(r,e){return r*e}function gg(r){let e=y.sizeFromShape(r),t=Math.ceil(e/4);return y.sizeToSquarishShape(t)}function tl(r,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(r/2))]}function fL(r,e){let[t,o]=tl(r,e);return t*o*4}function xg(r,e){let t=r,o,n,s,i,a,l,u,c,p,m;return D().getNumber("WEBGL_VERSION")===2?(o=t.R32F,n=t.R16F,s=t.RGBA16F,i=t.RGBA32F,a=t.RED,u=4,c=1,p=t.HALF_FLOAT,m=t.FLOAT,l=t.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=t.RGBA,a=r.RGBA,u=4,c=4,p=e!=null?e.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function Ce(r,e){let t=e();return D().getBool("DEBUG")&&Joe(r),t}function Joe(r){let e=r.getError();if(e!==r.NO_ERROR)throw new Error("WebGL Error: "+rne(r,e))}var ene=596e-10,tne=65504;function dL(r){return!!(D().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||ene<Math.abs(r)&&Math.abs(r)<tne)}function rne(r,e){switch(e){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}function yg(r,e){return Rl(r,()=>r.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function hL(r,e){let t=Rl(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Ce(r,()=>r.shaderSource(t,e)),Ce(r,()=>r.compileShader(t)),r.getShaderParameter(t,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}function gL(r,e){let t=Rl(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Ce(r,()=>r.shaderSource(t,e)),Ce(r,()=>r.compileShader(t)),D().get("ENGINE_COMPILE_ONLY"))return t;if(r.getShaderParameter(t,r.COMPILE_STATUS)===!1)throw ck(e,r.getShaderInfoLog(t)),new Error("Failed to compile fragment shader.");return t}var one=/ERROR: [0-9]+:([0-9]+):/g;function ck(r,e){let t=one.exec(e);if(t==null){console.log(`Couldn't parse line number in error: ${e}`),console.log(r);return}let o=+t[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>y.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(e.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function xL(r){return Rl(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function yL(r,e){if(Ce(r,()=>r.linkProgram(e)),!D().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(e,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function IC(r,e){if(Ce(r,()=>r.validateProgram(e)),r.getProgramParameter(e,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function bL(r,e){let t=Rl(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return Ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),Ce(r,()=>r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW)),t}function CL(r,e){let t=Rl(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return Ce(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t)),Ce(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,e,r.STATIC_DRAW)),t}function wL(r){return Rl(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function SL(r,e){let t=D().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||e<=0){let o=`[${r}x${e}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>t||e>t){let o=`[${r}x${e}]`,n=`[${t}x${t}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function IL(r){return Rl(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function pk(r,e,t,o,n,s,i){let a=r.getAttribLocation(e,t);return a===-1?!1:(Ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),Ce(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),Ce(r,()=>r.enableVertexAttribArray(a)),!0)}function nne(r,e,t){ine(r,t),Ce(r,()=>r.activeTexture(r.TEXTURE0+t)),Ce(r,()=>r.bindTexture(r.TEXTURE_2D,e))}function vL(r,e,t){return Rl(r,()=>r.getUniformLocation(e,t),'uniform "'+t+'" not present in program.')}function TL(r,e,t){return r.getUniformLocation(e,t)}function kL(r,e,t,o){Ce(r,()=>nne(r,e,o)),Ce(r,()=>r.uniform1i(t,o))}function vC(r,e,t){Ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),Ce(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0))}function mk(r,e){Ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),Ce(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function bg(r){let e=r.checkFramebufferStatus(r.FRAMEBUFFER);if(e!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+sne(r,e))}function sne(r,e){switch(e){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}function Rl(r,e,t){let o=Ce(r,()=>e());if(o==null)throw new Error(t);return o}function ine(r,e){let t=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=e+r.TEXTURE0;if(o<r.TEXTURE0||o>t){let n=`[gl.TEXTURE0, gl.TEXTURE${t}]`;throw new Error(`textureUnit must be in ${n}.`)}}function oc(r,e=2){return y.sizeFromShape(r.slice(0,r.length-e))}function nc(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function TC(r){let e=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(e=[oc(r),...nc(r)]),e}function NL(r,e=!1){let t=D().getNumber("WEBGL_MAX_TEXTURE_SIZE");e&&(t=t*2,r=r.map((n,s)=>s>=r.length-2?y.nearestLargerEven(r[s]):r[s]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let o=y.sizeFromShape(r);if(r.length<=1&&o<=t)return[1,o];if(r.length===2&&r[0]<=t&&r[1]<=t)return r;if(r.length===3&&r[0]*r[1]<=t&&r[2]<=t)return[r[0]*r[1],r[2]];if(r.length===3&&r[0]<=t&&r[1]*r[2]<=t)return[r[0],r[1]*r[2]];if(r.length===4&&r[0]*r[1]*r[2]<=t&&r[3]<=t)return[r[0]*r[1]*r[2],r[3]];if(r.length===4&&r[0]<=t&&r[1]*r[2]*r[3]<=t)return[r[0],r[1]*r[2]*r[3]];if(e){let n=oc(r),s=2,i=2;return r.length&&([s,i]=nc(r)),o=n*(s/2)*(i/2),y.sizeToSquarishShape(o).map(a=>a*2)}return y.sizeToSquarishShape(o)}function SC(r){return r%2===0}function pp(r,e){if(r=r.slice(-2),e=e.slice(-2),y.arraysEqual(r,e)||!r.length||!e.length||r[0]===0||r[1]===0||e[0]===0||e[1]===0)return!0;if(r.length!==e.length){let t=r.slice(-1)[0],o=e.slice(-1)[0];if(t===o||SC(t)&&SC(o)&&(r[0]===1||e[0]===1))return!0}return r[1]===e[1]&&SC(r[0])&&SC(e[0])}var ak,lk;function $L(r){if(ak==null){let e=rn(r);ak=e.getParameter(e.MAX_TEXTURE_SIZE)}return ak}function EL(r){if(lk==null){let e=rn(r);lk=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,lk)}function RL(r){if(r===0)return 0;let e,t=rn(r);return Un(t,"EXT_disjoint_timer_query_webgl2")&&r===2?e=2:Un(t,"EXT_disjoint_timer_query")?e=1:e=0,e}function Un(r,e){return r.getExtension(e)!=null}function fk(r){try{if(rn(r)!=null)return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function AL(r){if(r===0)return!1;let e=rn(r);if(r===1){if(!Un(e,"OES_texture_float"))return!1}else if(!Un(e,"EXT_color_buffer_float"))return!1;return uk(e)}function DL(r){if(r===0)return!1;let e=rn(r);if(r===1){if(!Un(e,"OES_texture_float")||!Un(e,"WEBGL_color_buffer_float"))return!1}else{if(Un(e,"EXT_color_buffer_float"))return uk(e);let o="EXT_color_buffer_half_float";if(Un(e,o)){let n=e.getExtension(o);return ane(e,n)}return!1}return uk(e)}function uk(r){let e=xg(r),t=r.createTexture();r.bindTexture(r.TEXTURE_2D,t);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatFloat,o,n,0,e.textureFormatFloat,e.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(t),r.deleteFramebuffer(s),i}function ane(r,e){let t=xg(r,e),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatHalfFloat,n,s,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function FL(r){return r!==2?!1:rn(r).fenceSync!=null}function rl(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGL backend.`)})}var Ee=D();Ee.registerFlag("HAS_WEBGL",()=>Ee.getNumber("WEBGL_VERSION")>0);Ee.registerFlag("WEBGL_VERSION",()=>fk(2)?2:fk(1)?1:0);Ee.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);Ee.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>Ee.get("WEBGL_VERSION")===2);Ee.registerFlag("WEBGL_CPU_FORWARD",()=>!0);Ee.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);Ee.registerFlag("WEBGL_PACK",()=>Ee.getBool("HAS_WEBGL"));Ee.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_CLIP",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_PACK_REDUCE",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_LAZILY_UNPACK",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_CONV_IM2COL",()=>Ee.getBool("WEBGL_PACK"));Ee.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>$L(Ee.getNumber("WEBGL_VERSION")));Ee.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>EL(Ee.getNumber("WEBGL_VERSION")));Ee.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=Ee.getNumber("WEBGL_VERSION");return r===0?0:RL(r)});Ee.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Ee.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Pn.isMobile());Ee.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>AL(Ee.getNumber("WEBGL_VERSION")));Ee.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>Ee.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:Ee.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));Ee.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>DL(Ee.getNumber("WEBGL_VERSION")));Ee.registerFlag("WEBGL_FENCE_API_ENABLED",()=>FL(Ee.getNumber("WEBGL_VERSION")));Ee.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Ee.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);Ee.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});Ee.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Pn.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});Ee.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);Ee.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);Ee.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);Ee.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);Ee.registerFlag("WEBGL_EXP_CONV",()=>!1);Ee.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Ee.getBool("IS_TEST"));function Lt(){let r,e,t,o,n,s,i,a,l,u;return D().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",e="in",t="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",e="attribute",t="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:e,varyingVs:t,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function Xi(r,e,t="index"){let o=y.computeStrides(e);return o.map((n,s)=>{let i=`int ${r[s]} = ${t} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${t} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function mp(r,e,t="index"){let o=y.computeStrides(e);return o.map((n,s)=>{let i=`int ${r[s]} = ${t} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${t} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function lne(r,e){let t=r.length,o=r.map(s=>`${e}[${s}]`),n=new Array(t-1);n[t-2]=o[t-1];for(let s=t-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function _L(r,e,t="index"){let o=r.map((s,i)=>i),n=lne(o,e);return n.map((s,i)=>{let a=`int ${r[i]} = ${t} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${t} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function bf(r){let e=y.computeStrides(r).map(t=>t.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`}function Cf(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var NC=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:OL}=w;function PL(r,e,t){let o=[];if(r.forEach(f=>{let d=y.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${d>1?`[${d}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),t.enableShapeUniforms){let{uniformShape:h}=$C(t.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(h.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),t.enableShapeUniforms){switch(e.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>une(f,e,t.packedInputs,t.enableShapeUniforms)).join(`
`),i=e.texShape,a=Lt(),l=mne(a),u,c,p=hne(a);return e.isPacked?(u=cne(e.logicalShape,i,t.enableShapeUniforms),c=dne(a)):(u=pne(e.logicalShape,i,t.enableShapeUniforms),c=fne(a)),t.packedInputs&&(p+=bne),[p,l,c,n,u,s,t.userCode].join(`
`)}function Sf(r,e=!1){let t=r.shapeInfo.logicalShape;switch(t.length){case 0:return Ane(r,e);case 1:return Fne(r,e);case 2:return One(r,e);case 3:return Lne(r,e);case 4:return Bne(r,e);case 5:return Mne(r);case 6:return Vne(r);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function LL(r,e){switch(r.shapeInfo.logicalShape.length){case 0:return Rne(r);case 1:return Dne(r,e);case 2:return _ne(r,e);case 3:return Pne(r,e);default:return zne(r,e)}}function une(r,e,t=!1,o){let n="";t?n+=LL(r,o):n+=Sf(r,o);let s=r.shapeInfo.logicalShape,i=e.logicalShape;return s.length<=i.length&&(t?n+=Gne(r,e):n+=Une(r,e)),n}function cne(r,e,t){switch(r.length){case 0:return zL();case 1:return Cne(r,e,t);case 2:return $ne(r,e,t);case 3:return Sne(r,e,t);default:return vne(r,e,t)}}function pne(r,e,t){switch(r.length){case 0:return zL();case 1:return wne(r,e,t);case 2:return Ene(r,e,t);case 3:return Ine(r,e,t);case 4:return Tne(r,e,t);case 5:return kne(r,e);case 6:return Nne(r,e);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function mne(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function fne(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function dne(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function hne(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${gne}
    ${xne}
    ${yne}
  `}var gne=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,xne=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,yne=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,bne=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function zL(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function Cne(r,e,t){let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return o[0]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function wne(r,e,t){return e[0]===1?t?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    `:e[1]===1?t?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `}function Sne(r,e,t){if(t)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function Ine(r,e,t){if(t)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${mp(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=Xi(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function vne(r,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function Tne(r,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${mp(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=Xi(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function kne(r,e){let t=Xi(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function Nne(r,e){let t=Xi(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function $ne(r,e,t){let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(y.arraysEqual(r,e))return t?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return t?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function Ene(r,e,t){return y.arraysEqual(r,e)?t?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    `:r[1]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:t?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function fp(r){return`offset${r}`}function Rne(r){let e=r.name,t="get"+e.charAt(0).toUpperCase()+e.slice(1),o=Lt();return`
    vec4 ${t}() {
      return ${o.texture2D}(${e}, halfCR);
    }
  `}function Ane(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${t};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${t}, halfCR);
      }
    `;let i=fp(t);if(e)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${i});
      return sampleTexture(${t}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${t}, uv);
    }
  `}function Dne(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=r.shapeInfo.texShape,s=Lt();if(e)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${t}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${t}, uv);
    }
  `}function Fne(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${If(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;let a=fp(t);return i===1?e?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${t}, uv);
      }
    `:s===1?e?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    `:e?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${a});
      return sampleTexture(${t}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${t}, uv);
    }
  `}function _ne(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=Lt();if(s!=null&&y.arraysEqual(t,s))return e?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(e)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(t[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function One(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(t,s)){if(e)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=y.squeezeShape(t),l=i;if(l.length<t.length){let m=vf(r,l),f=["row","col"];return`
      ${Sf(m,e)}
      float ${n}(int row, int col) {
        return ${n}(${Tf(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${If(r)}
      }
    `;let u=s[0],c=s[1],p=fp(o);return c===1?e?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?e?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:e?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function Pne(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(t[0]===1){let m=t.slice(1),f=[1,2],d=vf(r,m),h=["b","row","col"];return`
        ${LL(d,e)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${Tf(h,f)});
        }
      `}let a=Lt();if(e)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(t[2]/2),p=c*Math.ceil(t[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function Lne(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=t[1]*t[2],i=t[2],{newShape:a,keptDims:l}=y.squeezeShape(t),u=a;if(u.length<t.length){let h=vf(r,u),g=["row","col","depth"];return`
        ${Sf(h,e)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${Tf(g,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${If(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return e?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return e?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let d=fp(o);return e?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * ${s} + col * ${i} + depth + ${d};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${d};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function zne(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=Lt();if(e)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${t}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",d=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let h=2;h<i-1;h++)f=`int b${h}, `+f,m*=s[i-h-1],d=`b${h} * ${m} + `+d;return`
    vec4 ${o}(${f}) {
      int index = ${d};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${t}, uv);
    }
  `}function Bne(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=t[3],i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(t);if(l.length<t.length){let b=vf(r,l),C=["row","col","depth","depth2"];return`
      ${Sf(b,e)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${Tf(C,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${If(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],d=`int stride2 = ${o}Shape[3];`,h=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return e?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${d}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return e?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1]*t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=fp(o);return e?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${d}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function Mne(r){let e=r.shapeInfo.logicalShape,t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=e[4],s=e[3]*n,i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(e);if(l.length<e.length){let h=vf(r,l),g=["row","col","depth","depth2","depth3"];return`
      ${Sf(h)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${Tf(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${If(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]},
               ${e[2]*e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;let d=fp(t);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${d};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${t}, uv);
    }
  `}function Vne(r){let e=r.shapeInfo.logicalShape,t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(e);if(n.length<e.length){let g=vf(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Sf(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${Tf(x,s)});
      }
    `}let i=e[5],a=e[4]*i,l=e[3]*a,u=e[2]*l,c=e[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${If(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],d=m[1];if(d===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${f}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(d===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]*e[4]},
               ${e[2]*e[3]*e[4]},
               ${e[3]*e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${f}.0);
        return sampleTexture(${t}, uv);
      }
    `;let h=fp(t);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${h};
      vec2 uv = uvFromFlat(${f}, ${d}, index);
      return sampleTexture(${t}, uv);
    }
  `}function If(r){let e=r.name,t=y.sizeFromShape(r.shapeInfo.logicalShape);return t<2?`return ${e};`:`
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `}function Gne(r,e){let t=r.name,o=t.charAt(0).toUpperCase()+t.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=e.logicalShape.length,a=OL(r.shapeInfo.logicalShape,e.logicalShape),l=ze(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,C)=>`coords.${p[C+u]}`).join(", ");let f="return outputValue;",h=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(e.logicalShape)===1;if(s===1&&!h&&!x)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(h&&!x)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,C=s-1;a.indexOf(b)>-1&&a.indexOf(C)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(C)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function Une(r,e){let t=r.name,o=t.charAt(0).toUpperCase()+t.slice(1),n="get"+o+"AtOutCoords",s=e.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&y.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${t}, resultUV);
      }
    `;let u=ze(l),c=OL(r.shapeInfo.logicalShape,e.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(h=>`coords.${f[h+p]} = 0;`).join(`
`);let d="";return l<2&&a>0?d="coords":d=r.shapeInfo.logicalShape.map((h,g)=>`coords.${f[g+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${d});
    }
  `}function ze(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function $C(r,e,t){let{newShape:o,keptDims:n}=y.squeezeShape(e),s=e.length,i=r&&s===3&&e[0]===1,a=i?e.slice(1):o,l=!r&&s>1&&!y.arraysEqual(e,t)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:e,keptDims:n}}function vf(r,e){let t=JSON.parse(JSON.stringify(r));return t.shapeInfo.logicalShape=e,t}function Tf(r,e){return e.map(t=>r[t]).join(", ")}function ML(r,e,t,o){let n=t.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:e.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=PL(n,i,e),l=gL(r.gl,a),u=r.createProgram(l);return D().get("ENGINE_COMPILE_ONLY")?{program:e,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:e,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},dk(r,e,u))}function dk(r,e,t){let o={},n={},s={},i=[],a,l,u,c=null,p=null;p=r.getUniformLocation(t,"NAN",!1),D().getNumber("WEBGL_VERSION")===1&&(c=r.getUniformLocation(t,"INFINITY",!1));let m=!1;for(let f=0;f<e.variableNames.length;f++){let d=e.variableNames[f];o[d]=r.getUniformLocation(t,d,m),o[`offset${d}`]=r.getUniformLocation(t,`offset${d}`,m),e.enableShapeUniforms&&(n[`${d}Shape`]=r.getUniformLocation(t,`${d}Shape`,m),s[`${d}TexShape`]=r.getUniformLocation(t,`${d}TexShape`,m))}return e.enableShapeUniforms&&(a=r.getUniformLocation(t,"outShape",m),u=r.getUniformLocation(t,"outShapeStrides",m),l=r.getUniformLocation(t,"outTexShape",m)),e.customUniforms&&e.customUniforms.forEach((f,d)=>{i[d]=r.getUniformLocation(t,f.name,m)}),{uniformLocations:o,customUniformLocations:i,infLoc:c,nanLoc:p,inShapesLocations:n,inTexShapesLocations:s,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}}function BL(r,e){if(r.length!==e.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);r.forEach((t,o)=>{let n=t.logicalShape,s=e[o],i=s.shape;if(!y.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(t.isUniform&&s.isUniform)return;let a=t.texShape,l=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function VL(r,e,t,o,n){e.program.enableShapeUniforms||(BL(e.inShapeInfos,t),BL([e.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(e.webGLProgram),D().getNumber("WEBGL_VERSION")===1&&e.infLoc!==null&&r.gl.uniform1f(e.infLoc,1/0),e.nanLoc!==null&&r.gl.uniform1f(e.nanLoc,NaN),t.forEach((l,u)=>{let c=e.program.variableNames[u],p=e.uniformLocations[c],m=e.uniformLocations[`offset${c}`],f=e.inShapesLocations[`${c}Shape`],d=e.inTexShapesLocations[`${c}TexShape`];if(f){let{uniformShape:h}=$C(e.program.packedInputs,l.shape,l.texData.texShape);switch(h.length){case 1:r.gl.uniform1iv(f,new Int32Array(h));break;case 2:r.gl.uniform2iv(f,new Int32Array(h));break;case 3:r.gl.uniform3iv(f,new Int32Array(h));break;case 4:r.gl.uniform4iv(f,new Int32Array(h));break;default:break}}if(d&&r.gl.uniform2i(d,l.texData.texShape[0],l.texData.texShape[1]),p!=null){if(l.isUniform){if(y.sizeFromShape(l.shape)<2)r.gl.uniform1f(p,l.uniformValues[0]);else{let h=l.uniformValues;h instanceof Float32Array||(h=new Float32Array(h)),r.gl.uniform1fv(p,h)}return}l.texData.slice!=null&&m!=null&&r.gl.uniform1i(m,l.texData.slice.flatOffset),r.setInputMatrixTexture(l.texData.texture.texture,p,u)}});let a=e.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(e.outShapeStridesLocation){let l=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(l));break;default:break}}e.outTexShapeLocation&&r.gl.uniform2i(e.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),e.program.customUniforms&&n&&e.program.customUniforms.forEach((l,u)=>{let c=e.customUniformLocations[u],p=n[u];if(l.type==="float")r.gl.uniform1fv(c,p);else if(l.type==="vec2")r.gl.uniform2fv(c,p);else if(l.type==="vec3")r.gl.uniform3fv(c,p);else if(l.type==="vec4")r.gl.uniform4fv(c,p);else if(l.type==="int")r.gl.uniform1iv(c,p);else if(l.type==="ivec2")r.gl.uniform2iv(c,p);else if(l.type==="ivec3")r.gl.uniform3iv(c,p);else if(l.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${l.type} is not supported yet.`)}),r.executeProgram()}function GL(r,e,t){let o="";e.concat(t).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=$C(r.packedInputs,i.shape,l),m="",f="",d="";if(c.length===1&&r.packedInputs){let I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${I[0]>1}_${I[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let I=y.computeStrides(c);d=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}let h=i.shape.length,g=c.length===2&&y.arraysEqual(i.shape,l),x=y.sizeFromShape(i.shape)===1,b=w.getBroadcastDims(i.shape,t.shape),C=!r.packedInputs&&h===t.shape.length&&y.arraysEqual(l,t.texData.texShape),S=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${h}_${C}_${u?p:""}_${c.length}_${x}_${b}_${g}_${m}_${f}_${d}_${S}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${D().getNumber("WEBGL_VERSION")}`,s}function ht(r){return D().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var EC=class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=rc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=Lt();this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?mp(["r","c","d"],e):Xi(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}};var RC=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=rc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=Lt();this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?mp(["r","c","d"],e):Xi(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}};var AC=class{constructor(e){this.variableNames=["A"],this.outTexUsage=Gr.DOWNLOAD;let t=Lt();this.outputShape=e,this.userCode=`
      ${NC}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}};var DC=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Gr.DOWNLOAD;let t=Lt();this.outputShape=e,this.userCode=`
      ${NC}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}};var FC=class{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=Lt();this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length);let n="result";t&&(n="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?Cf():bf(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${o.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${o.output} = vec4(${n}, 0., 0., 0.);
      }
    `}};var _C=class{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=Lt();this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length);let n="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Cf():bf(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function UL(r){let e=Lt(),t=`${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return hL(r,t)}function WL(r){let e=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return bL(r,e)}function HL(r){let e=new Uint16Array([0,1,2,2,1,3]);return CL(r,e)}function Cg(r,e,t,o,n,s){SL(e,t);let i=wL(r),a=r.TEXTURE_2D;return Ce(r,()=>r.bindTexture(a,i)),Ce(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),Ce(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),Ce(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),Ce(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),D().getNumber("WEBGL_VERSION")===1?Ce(r,()=>r.texImage2D(a,0,o,e,t,0,n,s,null)):Ce(r,()=>r.texStorage2D(a,1,o,e,t)),Ce(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[t,e]}}function hk(r){return r.internalFormatFloat}function KL(r,e,t,o){let[n,s]=cp(e,t);return Cg(r,n,s,hk(o),o.textureFormatFloat,r.FLOAT)}function gk(r){return r.internalFormatHalfFloat}function qL(r,e,t,o){let[n,s]=cp(e,t);return Cg(r,n,s,gk(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function xk(r){return r.downloadTextureFormat}function XL(r,e,t,o){let[n,s]=cp(e,t);return Cg(r,n,s,xk(o),r.RGBA,r.UNSIGNED_BYTE)}function yk(r){return r.internalFormatPackedFloat}function jL(r,e,t,o){let[n,s]=tl(e,t);return Cg(r,n,s,yk(o),r.RGBA,r.FLOAT)}function bk(r){return r.internalFormatPackedHalfFloat}function YL(r,e,t,o){let[n,s]=tl(e,t);return Cg(r,n,s,bk(o),r.RGBA,o.textureTypeHalfFloat)}function QL(r,e,t){return Ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),pk(r,e,"clipSpacePos",t,3,20,0)&&pk(r,e,"uv",t,2,20,12)}function ZL(r,e,t,o,n,s){Ce(r,()=>r.bindTexture(r.TEXTURE_2D,e));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(t*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(t*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),D().getNumber("WEBGL_VERSION")===2?Ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t,o,r.RGBA,a,i)):Ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,t,o,0,r.RGBA,a,i)),Ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function JL(r,e,t){Ce(r,()=>r.bindTexture(r.TEXTURE_2D,e)),t.data instanceof Uint8Array?D().getNumber("WEBGL_VERSION")===2?Ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.width,t.height,r.RGBA,r.UNSIGNED_BYTE,t.data)):Ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,t.width,t.height,0,r.RGBA,r.UNSIGNED_BYTE,t.data)):D().getNumber("WEBGL_VERSION")===2?Ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,t)):Ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t)),Ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function e3(r,e,t,o){let n=r.createBuffer();Ce(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*e*t;return Ce(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),Ce(r,()=>r.readPixels(0,0,t,e,r.RGBA,r.FLOAT,0)),Ce(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function t3(r,e,t){let o=r,n=new Float32Array(t);return o.bindBuffer(o.PIXEL_PACK_BUFFER,e),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function r3(r,e,t,o){let[n,s]=cp(e,t),i=4,a=new Uint8Array(mL(e*t,i));return Ce(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function o3(r,e,t,o,n,s,i,a){let l=r,u=new Float32Array(fL(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function n3(r,e,t){let o=new Float32Array(e*t*4);return Ce(r,()=>r.readPixels(0,0,t,e,r.RGBA,r.FLOAT,o)),o}var kf=class{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let t=D().getNumber("WEBGL_VERSION");e!=null?(this.gl=e,pL(t,e)):this.gl=rn(t);let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),D().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=yg(this.gl,s),Un(this.gl,i))this.textureHalfFloatExtension=yg(this.gl,i);else if(D().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),Un(this.gl,n))this.colorBufferHalfFloatExtension=yg(this.gl,n);else if(D().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",Un(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(Un(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=WL(this.gl),this.indexBuffer=HL(this.gl),this.framebuffer=IL(this.gl),this.textureConfig=xg(this.gl,this.textureHalfFloatExtension)}get debug(){return D().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;Ce(e,()=>e.finish()),Ce(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),Ce(e,()=>e.deleteFramebuffer(this.framebuffer)),Ce(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),Ce(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),Ce(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),KL(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),qL(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),XL(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),JL(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,o,n){this.throwIfDisposed(),ZL(this.gl,e,t,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),YL(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),jL(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(mk(this.gl,this.framebuffer),this.outputTexture=null),Ce(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,o){return this.downloadMatrixDriver(e,()=>r3(this.gl,t,o,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,o,n,s,i){return o3(this.gl,e,t,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return t3(this.gl,e,t)}createBufferFromTexture(e,t,o){this.bindTextureToFrameBuffer(e);let n=e3(this.gl,t,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,o;if(D().getBool("WEBGL_FENCE_API_ENABLED")){let n=e,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},t=s}else D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(t,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:t,isFencePassed:o}}downloadMatrixFromPackedTexture(e,t,o){return this.downloadMatrixDriver(e,()=>n3(this.gl,t,o))}createProgram(e){this.throwIfDisposed();let t=this.gl;this.vertexShader==null&&(this.vertexShader=UL(t));let o=xL(t);return Ce(t,()=>t.attachShader(o,this.vertexShader)),Ce(t,()=>t.attachShader(o,e)),yL(t,o),this.debug&&IC(t,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=QL(t,this.program,this.vertexBuffer)),o}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),e!=null&&Ce(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,this.program!=null&&this.debug&&IC(this.gl,this.program),Ce(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,o=!0){return this.throwIfDisposed(),o?vL(this.gl,e,t):TL(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Ce(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,o){this.throwIfDisposed(),this.throwIfNoProgram(),kL(this.gl,e,t,o)}setOutputMatrixTexture(e,t,o){this.setOutputMatrixTextureDriver(e,o,t)}setOutputPackedMatrixTexture(e,t,o){this.throwIfDisposed();let[n,s]=tl(t,o);this.setOutputMatrixTextureDriver(e,n,s)}setOutputMatrixWriteRegion(e,t,o,n){this.setOutputMatrixWriteRegionDriver(o,e,n,t)}setOutputPackedMatrixWriteRegion(e,t,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&IC(this.gl,this.program),bg(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&this.debugValidate(),Ce(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Ce(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=yg(this.gl,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let t=this.gl,o=this.getQueryTimerExtensionWebGL2();t.endQuery(o.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(t===0)return null;if(t===2){let o=this.gl;return o.getQueryParameter(e,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(e,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(t===0)return!0;if(t===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(e,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(e,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=qne(this.itemsToPoll.map(t=>t.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:o}=this.itemsToPoll[t];o()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),!(this.itemsToPoll.length>1)&&y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),vC(this.gl,e,this.framebuffer),this.debug&&bg(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(vC(this.gl,this.outputTexture,this.framebuffer),this.debug&&bg(this.gl)):mk(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let o=t();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(e,t,o){this.throwIfDisposed();let n=this.gl;vC(n,e,this.framebuffer),this.debug&&bg(n),this.outputTexture=e,Ce(n,()=>n.viewport(0,0,t,o)),Ce(n,()=>n.scissor(0,0,t,o))}setOutputMatrixWriteRegionDriver(e,t,o,n){this.throwIfDisposed(),Ce(this.gl,()=>this.gl.scissor(e,t,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function qne(r){let e=0;for(;e<r.length&&r[e]();++e);return e-1}var{addImpl:s3,bincountImpl:OC,bincountReduceImpl:i3,castImpl:a3,ceilImpl:l3,concatImpl:u3,equalImpl:c3,expImpl:p3,expm1Impl:m3,floorImpl:f3,gatherNdImpl:d3,gatherV2Impl:h3,greaterImpl:g3,greaterEqualImpl:x3,lessImpl:y3,lessEqualImpl:b3,linSpaceImpl:C3,logImpl:w3,maxImpl:S3,maximumImpl:I3,minimumImpl:v3,multiplyImpl:T3,negImpl:k3,notEqualImpl:N3,prodImpl:$3,raggedTensorToTensorImpl:E3,rangeImpl:R3,rsqrtImpl:A3,scatterImpl:D3,sigmoidImpl:F3,simpleAbsImpl:PC,sliceImpl:_3,sparseFillEmptyRowsImpl:O3,sparseReshapeImpl:P3,sparseSegmentReductionImpl:LC,sqrtImpl:L3,stridedSliceImpl:z3,stringNGramsImpl:B3,stringSplitImpl:M3,stringToHashBucketFastImpl:V3,subImpl:G3,tileImpl:U3,topKImpl:W3,transposeImpl:dp,uniqueImpl:H3}=qT;function Ck(r,e){return["x","y","z","w","u","v"].slice(0,e).map(t=>`${r}.${t}`)}function jt(r,e){return e===1?[r]:Ck(r,e)}function K3(r,e){if(r===1)return"rc";let t="";for(let o=0;o<r;o++)t+=e[o],o<r-1&&(t+=",");return t}var zC=class{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=ht(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let t=jt("rc",this.rank),o=ze(this.rank),n=this.getOutOfBoundsCondition(t),s=this.getSetup(t),i=this.getOutput(t);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${e[e.length-1-i]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let o=this.rank-2;o<this.rank;o++)t+=`${e[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(t+="||");return t}getSetup(e){if(this.rank===1)return"";let t=e.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}};var Nf=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${Xne(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Cf():bf(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${o}

        setOutput(result);
      }
    `}};function Xne(r,e){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e?_L(["r","c","d"],"inputShape"):Xi(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var BC=class{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,o){let n=X3(t,o),s=j3(e,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=q3(e,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].shift();return this.usedTextures[s].push(l),l}let a;return n===Ar.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):n===Ar.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):n===Ar.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):n===Ar.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):n===Ar.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(e,t,o,n){if(this.freeTextures==null)return;let s=X3(o,n),i=j3(t,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=q3(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=D().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let e in this.freeTextures)this.freeTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function jne(r,e){let t=r;if(e===t.R32F)return 4;if(e===t.R16F)return 2;if(e===t.RGBA32F)return 16;if(e===r.RGBA)return 16;if(e===t.RGBA16F)return 8;if(e===t.RGBA8)return 4;throw new Error(`Unknown internal format ${e}`)}function q3(r,e,t,o,n){let s=Yne(e,o),i;if(n){let[l,u]=tl(r[0],r[1]);i=l*u}else{let[l,u]=cp(r[0],r[1]);i=l*u}let a=jne(t,s);return i*a}function Yne(r,e){switch(r){case Ar.PACKED_2X2_FLOAT32:return yk(e);case Ar.PACKED_2X2_FLOAT16:return bk(e);case Ar.UNPACKED_FLOAT32:return hk(e);case Ar.UNPACKED_FLOAT16:return gk(e);case Ar.PACKED_4X1_UNSIGNED_BYTE:return xk(e);default:throw new Error(`Unknown physical texture type ${r}`)}}function Qne(r){return D().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?Ar.PACKED_2X2_FLOAT32:Ar.UNPACKED_FLOAT32:r?Ar.PACKED_2X2_FLOAT16:Ar.UNPACKED_FLOAT16}function X3(r,e){if(r===Gr.UPLOAD)return Ar.PACKED_2X2_FLOAT32;if(r===Gr.RENDER||r==null)return Qne(e);if(r===Gr.DOWNLOAD||r===Gr.PIXELS)return Ar.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function j3(r,e,t){return`${r[0]}_${r[1]}_${e}_${t}`}var Qr=class{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},dr="if (isnan(x)) return x;",Y3="return x;",wk="return abs(x);";var Q3="return (x >= 0.0) ? x : (exp(x) - 1.0);",Z3=dr+`
  return (x < 0.0) ? 0.0 : x;
`,J3=dr+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,hp="return x;",ez="return 1.0 / (1.0 + exp(-1.0 * x));";var rz="return x;",oz=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,nz=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,sz=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,iz="return 1.0 / (1.0 + exp(-1.0 * x));",Wn=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var MC=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length);let t=e.length,o=jt("rc",t),n=ze(t),s=K3(t,o),i=o.slice(-2),a=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var Jne=vt.whereImpl,ese=1e-7,tse=1e-4,VC={};function rse(r){return r in VC||(VC[r]={}),VC[r]}var ose=D().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),nse=600;function sse(){return D().global.screen==null?1024:D().global.screen.height*D().global.screen.width*window.devicePixelRatio*nse/1024/1024}var gp=class extends cn{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!D().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(e!=null){if(e instanceof kf)t=e;else{let o=rn(D().getNumber("WEBGL_VERSION"),e);t=new kf(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=rn(D().getNumber("WEBGL_VERSION"));t=new kf(o),this.binaryCache=rse(D().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new BC(this.gpgpu),this.numMBBeforeWarning=sse(),this.texData=new ci(this,sr())}nextDataId(){return gp.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,o){if((D().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||D().getBool("DEBUG"))&&this.checkNumericalProblems(e),o==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:t,dtype:o,values:e,usage:Gr.UPLOAD,refCount:1}),n}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,o,n,s){if(D().getBool("DEBUG")&&this.checkNumericalProblems(t),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:o,dtype:n,values:t,usage:Gr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t=this.texData.get(e),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=t;if(i!=null){let m;l?m=new Wn(a,hp):m=new Qr(a,hp);let f=this.runWebGLProgram(m,[{dataId:e,shape:a,dtype:n}],n),d=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),d}if(o!=null)return this.convertAndCacheOnCPU(e);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=w.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(e,p)}async read(e){if(this.pendingRead.has(e)){let d=this.pendingRead.get(e);return new Promise(h=>d.push(h))}let t=this.texData.get(e),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=t;if(s!=null){let d;l?d=new Wn(n,hp):d=new Qr(n,hp);let h=this.runWebGLProgram(d,[{dataId:e,shape:n,dtype:i}],i),g=this.read(h.dataId);return this.disposeIntermediateTensorInfo(h),g}if(o!=null)return this.convertAndCacheOnCPU(e);if(D().getBool("DEBUG")&&!D().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&D().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&D().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(e);let d=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(d.texture.texture,...gg(n))}this.pendingRead.set(e,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let d=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),h=d[0],g=d[1];p=w.mergeRealAndImagArrays(h,g)}else if(u==null)p=this.getValuesFromTexture(e);else{let d=y.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,d)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let d=this.gpgpu.gl;Ce(d,()=>d.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(e,p),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach(d=>d(m)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&sr().removeDataId(e,this),this.pendingDeletes--),m}readToGPU(e,t={}){let o=this.texData.get(e),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new Wn(s,hp):f=new Qr(s,hp);let d=this.runWebGLProgram(f,[{dataId:e,shape:s,dtype:a}],a),h=this.readToGPU(d,t);return this.disposeIntermediateTensorInfo(d),h}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(e,t.customTexShape),p=sr().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return te(e.shape,e.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return te(e.shape,e.dtype,t)}checkNumericalProblems(e){if(e!=null)for(let t=0;t<e.length;t++){let o=e[t];if(!dL(o))throw D().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(e){let{shape:t,dtype:o,isPacked:n}=this.texData.get(e),s=y.sizeFromShape(t);if(D().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(e),f=this.texData.get(m.dataId),d=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...gg(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),d}let i=D().getBool("WEBGL_PACK")&&n===!0,a=i?TC(t):t,l=i?new DC(a):new AC(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:e}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,e();let s=y.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=y.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=t,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(e){return D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=y.now(),e)}async getQueryTime(e){if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);let t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:o}=this.texData.get(e);return o!=null&&(this.disposeData(o.real.dataId,t),this.disposeData(o.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(e),l=a&&a.origDataId||e,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),t!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(t,n,s,i)));let c=this.texData.get(e);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=ose){return D().getBool("WEBGL_CPU_FORWARD")&&e.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){w.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return Jne(e.shape,t)}packedUnaryOp(e,t,o){let n=new Wn(e.shape,t),s=this.compileAndRun(n,[e],o);return sr().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&e.dtype!=="complex64"){let n=PC(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,n)}if(D().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,wk,e.dtype);let t=new Qr(e.shape,wk),o=this.compileAndRun(t,[e]);return sr().makeTensorFromTensorInfo(o)}makeTensorInfo(e,t,o){let n;if(t==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,e,t)}else n=this.write(o,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t,o){return sr().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,o),this)}unpackTensor(e){let t=new MC(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new zC(e.shape),o=!0;return this.runWebGLProgram(t,[e],e.dtype,null,o)}packedReshape(e,t){let o=[oc(e.shape),...nc(e.shape)],n={dtype:e.dtype,shape:o,dataId:e.dataId},s=[oc(t),...nc(t)],i=new Nf(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],e.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}decode(e,t){let o=this.texData.get(e),{isPacked:n,shape:s,dtype:i}=o;if(t!=null){let m=y.sizeFromShape(s),f=t[0]*t[1]*4;y.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=TC(s),l;n?l=new RC(a):l=new EC(a);let u=!0,c=[t??gg(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:e}],i,c,u,t);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(e,t,o,n,s=!1,i){let a=this.makeTensorInfo(e.outputShape,o),l=this.texData.get(a.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===rc.DENSE){let x=i??gg(e.outputShape);l.texShape=x.map(b=>b*2)}if(e.outTexUsage!=null&&(l.usage=e.outTexUsage),y.sizeFromShape(a.shape)===0)return l.values=y.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=t.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!e.packedInputs&&y.sizeFromShape(x.shape)<=D().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!pp(b.shape,x.shape)){let C=x,S=x.shape;x.shape=b.shape,x=this.packedReshape(x,S),u.push(x),b=this.texData.get(x.dataId),C.shape=S}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=GL(e,c,p),f=this.getAndSaveBinary(m,()=>ML(this.gpgpu,e,c,p)),d=this.activeTimers!=null,h;d&&(h=this.startTimer()),D().get("ENGINE_COMPILE_ONLY")||VL(this.gpgpu,f,c,p,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),d&&(h=this.endTimer(h),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(h)}));let g=D().get("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!D().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let x=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),x}return a}compileAndRun(e,t,o,n,s=!1){return o=o||t[0].dtype,this.runWebGLProgram(e,t,o,n,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(D().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=M(()=>{if(!D().get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=D().getBool("DEBUG");D().set("DEBUG",!1);let t=this.abs(ae(1e-8)).dataSync()[0];if(D().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?ese:tse}uploadToGPU(e){let t=this.texData.get(e),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=t;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let p=t.texShape;if(p==null&&(p=NL(o,l),t.texShape=p),s!=null){let m=TC(o),f,d=p[1],h=p[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!g)&&([d,h]=tl(p[0],p[1])),l?f=new _C(m,g):f=new FC(m,g);let x=g?[h,d]:p,b=this.makeTensorInfo(x,n),C=this.texData.get(b.dataId);g?C.usage=Gr.PIXELS:C.usage=Gr.UPLOAD,C.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),d,h,s);let S=[[h,d]],I=!0,N=this.runWebGLProgram(f,[b],n,S,I),$=this.texData.get(N.dataId);t.texShape=$.texShape,t.isPacked=$.isPacked,t.usage=$.usage,D().get("ENGINE_COMPILE_ONLY")?this.disposeData(N.dataId):(t.texture=$.texture,t.values=null,this.texData.delete(N.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(p,a,n,l);t.texture=m}}convertAndCacheOnCPU(e,t){let o=this.texData.get(e),{dtype:n}=o;return this.releaseGPUData(e),t!=null&&(o.values=ise(t,n)),o.values}acquireTexture(e,t,o,n){if(this.numBytesInGPU+=this.computeBytes(e,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,n)}computeBytes(e,t){return e[0]*e[1]*y.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}else{for(let[,t]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(t),n(!0)}catch(s){throw s}});e.push(o)}return Promise.all(e)}}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Kc(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(ck(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let[,e]of Object.entries(this.binaryCache)){let{uniformLocations:t,customUniformLocations:o,infLoc:n,nanLoc:s,inShapesLocations:i,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=dk(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=o,e.infLoc=n,e.nanLoc=s,e.inShapesLocations=i,e.inTexShapesLocations=a,e.outShapeLocation=l,e.outShapeStridesLocation=u,e.outTexShapeLocation=c}}};gp.nextDataId=0;function ise(r,e){if(e==="float32"||e==="complex64")return r;if(e==="int32"||e==="bool"){let t=e==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<t.length;++o)t[o]=Math.round(r[o]);return t}else throw new Error(`Unknown dtype ${e}`)}Pn.isBrowser()&&Eu("webgl",()=>new gp,2);var GC=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var Hn=class{constructor(e,t,o){this.variableNames=["A","B"],this.outputShape=w.assertAndGetBroadcastShape(t,o),this.enableShapeUniforms=ht(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var sc=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;var ei=class{constructor(e,t,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=w.assertAndGetBroadcastShape(t,o);let s=this.outputShape.length;this.enableShapeUniforms=ht(s);let i="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${ze(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=jt("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function Yt(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var az={kernelName:So,backendName:"webgl",kernelFunc:Yt};function Go(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.makeTensorInfo(o.shape,"complex64"),i=t.texData.get(s.dataId),a=Yt({inputs:{x:o},backend:t}),l=Yt({inputs:{x:n},backend:t});return i.complexTensorInfos={real:a,imag:l},s}var lz={kernelName:xi,backendName:"webgl",kernelFunc:Go};var Sk="return (a < 0.) ? b * a : a;",Ik=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function ase(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o,i=t.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),a=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ei(Ik,n.shape,i.shape):new Hn(Sk,n.shape,i.shape),l=t.runWebGLProgram(a,[n,i],"float32");return t.disposeIntermediateTensorInfo(i),l}var uz={kernelName:ps,backendName:"webgl",kernelFunc:ase};var vk="return (a < 0.) ? b * a : a;",Tk=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function lse(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e,s=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ei(Tk,o.shape,n.shape):new Hn(vk,o.shape,n.shape);return t.runWebGLProgram(s,[o,n],"float32")}var cz={kernelName:Cs,backendName:"webgl",kernelFunc:lse};var ti="if (isnan(x)) return x;",pz=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,mz=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;function ye({opSnippet:r,packedOpSnippet:e,cpuKernelImpl:t,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&t!=null){let p=a.texData.get(i.dataId),m=t(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=D().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&e!=null,c;return u?c=new Wn(i.shape,e):c=new Qr(i.shape,r),a.runWebGLProgram(c,[i],l)}}function nt({opSnippet:r,packedOpSnippet:e,checkOutOfBounds:t=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let d=c.texData.get(l.dataId),h=c.texData.get(u.dataId),[g,x]=[[d.complexTensorInfos.real,h.complexTensorInfos.real],[d.complexTensorInfos.imag,h.complexTensorInfos.imag]].map(C=>{let[S,I]=C,N={dataId:S.dataId,dtype:S.dtype,shape:l.shape},$={dataId:I.dataId,dtype:I.dtype,shape:u.shape},R=new Hn(r,l.shape,u.shape);return c.runWebGLProgram(R,[N,$],Ye(S.dtype,I.dtype))}),b=Go({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),b}let p=s||Ye(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let d=c.texData.get(l.dataId).values,h=c.texData.get(u.dataId).values,g=l.dtype==="string"?w.fromUint8ToStringArray(d):d,x=l.dtype==="string"?w.fromUint8ToStringArray(h):h,[b,C]=n(l.shape,u.shape,g,x,p),S=c.makeTensorInfo(C,p),I=c.texData.get(S.dataId);return I.values=b,S}let m=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&e!=null,f;return m?f=new ei(e,l.shape,u.shape,t):f=new Hn(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function Al(r,e=!1){if(r==="linear")return e?rz:Y3;if(r==="relu")return e?nz:Z3;if(r==="elu")return e?oz:Q3;if(r==="relu6")return e?sz:J3;if(r==="prelu")return e?Tk:vk;if(r==="leakyrelu")return e?Ik:Sk;if(r==="sigmoid")return e?iz:ez;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var $f=class{constructor(e,t,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=ht(this.outputShape.length);let c=n?e[1]:e[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",d=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";a&&(l?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:g=`vec4 activation(vec4 x) {
          ${a}
        }`,x="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let C="rc.x",S="rc.x";e[0]<t[0]?C=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(S=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${C};
          int batchB = ${S};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${d[0]} * ${h[0]});
          result += (${d[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var kk={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},wg=class{constructor(e,t,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=w.assertAndGetBroadcastShape(t,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var fz="return a * b;";function Sg(r){let{inputs:e,backend:t}=r,{a:o,b:n}=e,s=w.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=t.texData.get(o.dataId),l=t.texData.get(n.dataId),u=new wg(kk.REAL,o.shape,n.shape),c=new wg(kk.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=t.runWebGLProgram(u,p,"float32"),f=t.runWebGLProgram(c,p,"float32"),d=Go({inputs:{real:m,imag:f},backend:t});return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),d}if(t.shouldExecuteOnCPU([o,n])){let a=t.texData.get(o.dataId),l=t.texData.get(n.dataId),[u,c]=T3(o.shape,n.shape,a.values,l.values,s),p=t.makeTensorInfo(c,s),m=t.texData.get(p.dataId);return m.values=u,p}let i;return D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new ei(fz,o.shape,n.shape):i=new Hn(fz,o.shape,n.shape),t.runWebGLProgram(i,[o,n],s)}var dz={kernelName:ko,backendName:"webgl",kernelFunc:Sg};function hz(r,e,t){let o=[oc(r.shape),...nc(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[oc(e),...nc(e)],i=new Nf(s,o),a=!0,l=[o],u=t.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}function re(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{shape:s}=o,i=t,a=y.sizeFromShape(n.shape),l=y.inferFromImplicitShape(s,a),u=y.sizeFromShape(l);y.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!pp(n.shape,l)&&!(c.texture!==null&&pp(c.shape,l))?hz(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var gz={kernelName:ws,backendName:"webgl",kernelFunc:re};var Ig=class{constructor(e,t){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=e;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(t!=null){let p=1/t;u=`sumValue += dot(values * ${y.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var UC=class{constructor(e,t){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=e;this.outputShape=[n,i];let a="0.0",l="";t==="prod"?a="1.0":t==="min"?(a="1.0 / 1e-20",l="min"):t==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="sum"?u="sumValue":t==="prod"?u="prodValue":t==="all"?u="allValue":t==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${t==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${t==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${t==="min"} || ${t==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";t==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):t==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let d="";s%o>0&&(d=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function cse(r){let e=[];for(;e.length===0||e[e.length-1].outSize!==1;){let t=e.length?e[e.length-1].outSize:r[1],o=w.computeOptimalWindowSize(t);e.push({inSize:t,windowSize:o,outSize:Math.ceil(t/o)})}return e}function on(r,e,t,o){let n=cse(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;t==="mean"?c=i===0?new Ig({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new Ig({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new UC({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},t),p=s,s=o.runWebGLProgram(c,[s],e),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var WC=class{constructor(e,t){this.variableNames=["A"];let o=new Array(e.length);for(let i=0;i<o.length;i++)o[i]=e[t[i]];this.outputShape=o,this.rank=o.length;let n=ze(this.rank),s=pse(t);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function pse(r){let e=r.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);let t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(e);for(let n=0;n<r.length;n++)o[r[n]]=t[n];return o.join()}var HC=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(e.length);for(let c=0;c<o.length;c++)o[c]=e[t[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=ze(this.rank),s=Ck("rc",this.rank),i=new Array(this.rank);for(let c=0;c<t.length;c++)i[t[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function ic(r,e,t){let o=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new HC(r.shape,e):new WC(r.shape,e);return t.runWebGLProgram(o,[r],r.dtype)}function xz(r,e,t,o){let n=e,s=r.shape.length,i=y.parseAxisParam(n,r.shape),a=i,l=w.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=ic(r,l,o),a=w.getInnerMostAxes(a.length,s)),w.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=w.computeOutAndReduceShapes(c.shape,a),f=p;t&&(f=w.expandShapeToKeepDim(p,i));let d=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/d,x=re({inputs:{x:c},attrs:{shape:[g,d]},backend:o}),b=Do(r.dtype),C=on(x,b,"sum",o),S=re({inputs:{x:C},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(C),u&&o.disposeIntermediateTensorInfo(c),S}function xp(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;return xz(n,s,i,t)}var yz={kernelName:Ts,backendName:"webgl",kernelFunc:xp};function Et(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{perm:s}=o,i=t,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=dp(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=ic(n,s,i);return u}var bz={kernelName:qo,backendName:"webgl",kernelFunc:Et};var Nk=1e3;function yp({a:r,b:e,transposeA:t,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=e.shape.length,p=t?r.shape[u-2]:r.shape[u-1],m=o?e.shape[c-1]:e.shape[c-2],f=t?r.shape[u-1]:r.shape[u-2],d=o?e.shape[c-2]:e.shape[c-1],h=r.shape.slice(0,-2),g=e.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=Or.assertAndGetBroadcastShape(r.shape.slice(0,-2),e.shape.slice(0,-2)).concat([f,d]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${o} must match.`);let I=t?[x,p,f]:[x,f,p],N=o?[b,d,m]:[b,m,d],$=re({inputs:{x:r},backend:n,attrs:{shape:I}}),R=re({inputs:{x:e},backend:n,attrs:{shape:N}}),F=[$,R],_=Math.max(x,b),B=t?$.shape[1]:$.shape[2],V=s!=null,G=i!=null,W=l==="leakyrelu",U=l!=null?Al(l,!0):null,K=V||G||W||U!=null,X;if((f===1||d===1)&&B>Nk&&K===!1){let Z=$,J=R;t&&(Z=Et({inputs:{x:$},backend:n,attrs:{perm:[0,2,1]}}),F.push(Z)),o&&(J=Et({inputs:{x:R},backend:n,attrs:{perm:[0,2,1]}}),F.push(J));let ee=d!==1,le=d===1,ie=Z;ee&&(ie=re({inputs:{x:Z},backend:n,attrs:{shape:[_,B,1]}}),F.push(ie));let de=d===1?2:1,ce=J;le&&(ce=re({inputs:{x:J},backend:n,attrs:{shape:[_,1,B]}}),F.push(ce));let ge=Sg({inputs:{a:ie,b:ce},backend:n});X=xp({inputs:{x:ge},backend:n,attrs:{axis:de,keepDims:!0}}),F.push(ge)}else{let Z=Ye(r.dtype,e.dtype),J=new $f(I,N,[_,f,d],t,o,V,U,G,W),ee=[$,R];if(s!=null&&ee.push(s),G&&ee.push(i),W){let le=n.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));ee.push(le),F.push(le)}X=n.runWebGLProgram(J,ee,Z)}let H=re({inputs:{x:X},backend:n,attrs:{shape:S}});F.push(X);for(let Z of F)n.disposeIntermediateTensorInfo(Z);return H}function mse(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=e,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return yp({a:n,b:s,transposeA:l,transposeB:u,backend:t,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var Cz={kernelName:Di,backendName:"webgl",kernelFunc:mse};var wz="return abs(x);";function fse(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=t.texData.get(o.dataId),i=PC(s.values);return t.makeTensorInfo(o.shape,o.dtype,i)}let n;return D().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Wn(o.shape,wz):n=new Qr(o.shape,wz),t.runWebGLProgram(n,[o],o.dtype)}var Sz={kernelName:mn,backendName:"webgl",kernelFunc:fse};var dse=dr+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,hse=ye({opSnippet:dse}),Iz={kernelName:pi,backendName:"webgl",kernelFunc:hse};var gse=dr+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,xse=ye({opSnippet:gse}),vz={kernelName:mi,backendName:"webgl",kernelFunc:xse};var Tz="return a + b;",yse=nt({opSnippet:Tz,packedOpSnippet:Tz,supportsComplex:!0,cpuKernelImpl:s3}),kz={kernelName:Wr,backendName:"webgl",kernelFunc:yse};var KC=class{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var qC=class{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function XC(r){let{inputs:e,backend:t}=r,o=e;if(o.length===1)return Yt({inputs:{x:o[0]},backend:t});if(o.length>D().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=XC({inputs:o.slice(0,l),backend:t}),c=XC({inputs:o.slice(l),backend:t});return XC({inputs:[u,c],backend:t})}let n=o.map(l=>l.dtype).reduce((l,u)=>Ye(l,u)),s=o.map(l=>l.shape),a=D().getBool("WEBGL_PACK")?new qC(o[0].shape,s):new KC(o[0].shape,s);return t.runWebGLProgram(a,o,n)}var Nz={kernelName:Qn,backendName:"webgl",kernelFunc:XC};function bse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=n;c!=null&&(p=Et({inputs:{x:n},backend:t,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,a)),w.assertAxesAreInnerMostDims("all",u,a);let[m,f]=w.computeOutAndReduceShapes(p.shape,u),d=y.sizeFromShape(f),h=re({inputs:{x:p},backend:t,attrs:{shape:[-1,d]}}),g=on(h,h.dtype,"all",t),x;if(i){let b=w.expandShapeToKeepDim(m,l);x=re({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=re({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),c!=null&&t.disposeIntermediateTensorInfo(p),x}var $z={kernelName:Hl,backendName:"webgl",kernelFunc:bse};function Cse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=n;c!=null&&(p=Et({inputs:{x:n},backend:t,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,a)),w.assertAxesAreInnerMostDims("any",u,a);let[m,f]=w.computeOutAndReduceShapes(p.shape,u),d=y.sizeFromShape(f),h=re({inputs:{x:p},backend:t,attrs:{shape:[-1,d]}}),g=on(h,h.dtype,"any",t),x;if(i){let b=w.expandShapeToKeepDim(m,l);x=re({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=re({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),c!=null&&t.disposeIntermediateTensorInfo(p),x}var Ez={kernelName:Kl,backendName:"webgl",kernelFunc:Cse};var jC=class{constructor(e,t,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=e;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=t==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var YC=class{constructor(e,t,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(e.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=e[e.length-1],i=Math.ceil(s/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=ze(l),c=jt("coords",l),p,m;if(i===1){m=l+1;let R=ze(m);p=`
        ${R} sourceLocR = ${R}(${c.join()}, 0);
        ++${c[l-1]};
        ${R} sourceLocG = ${R}(${c.join()}, 0);
        ++${c[l-2]};
        ${R} sourceLocA = ${R}(${c.join()}, 0);
        --${c[l-1]};
        ${R} sourceLocB = ${R}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),d="."+f[m-1],h=f.map(R=>"int "+R),g=jt("sourceLocR",m-1).concat("inIdx.r"),x=jt("sourceLocG",m-1).concat("inIdx.g"),b=jt("sourceLocB",m-1).concat("inIdx.b"),C=jt("sourceLocA",m-1).concat("inIdx.a"),S=o==="max"?"greaterThan":"lessThan",I=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${C.join()})));`,N=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`,$=n?"":`
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${h.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${$}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},
          sourceLocB${d}, sourceLocA${d}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${N};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${N};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${S}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function Rz(r,e,t,o=null){let n=e.shape[0],s=e.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=w.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new jC(a,t,o==null),u=[e];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=Rz(r,e,t,c);return r.disposeIntermediateTensorInfo(c),p}function Az(r,e,t,o=null){let n=o!=null?o.shape:e.shape,s=n[n.length-1],i=w.computeOptimalWindowSize(s),a=new YC(n,i,t,o==null),l=o==null?[e]:[e,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===e.shape.length){let c=Az(r,e,t,u);return r.disposeIntermediateTensorInfo(u),c}return u}function QC(r,e,t,o){let n=[t];if(w.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,e.shape.length),!D().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){let s=[],i=r.texData.get(e.dataId),a=i!==null&&i.isPacked,l=e;a&&(l=r.unpackTensor(e),s.push(l));let[u,c]=w.computeOutAndReduceShapes(l.shape,n),p=y.sizeFromShape(c),m=re({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=Rz(r,m,o);s.push(f);let d=re({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(h=>r.disposeIntermediateTensorInfo(h)),d}return Az(r,e,o)}function wse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Et({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),w.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=QC(t,l,i[0],"max");return u.forEach(p=>t.disposeIntermediateTensorInfo(p)),c}var Dz={kernelName:Zn,backendName:"webgl",kernelFunc:wse};function Sse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Et({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),w.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=QC(t,l,i[0],"min");return u.forEach(p=>t.disposeIntermediateTensorInfo(p)),c}var Fz={kernelName:Jn,backendName:"webgl",kernelFunc:Sse};var Ise=dr+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,vse=ye({opSnippet:Ise}),_z={kernelName:fi,backendName:"webgl",kernelFunc:vse};var Tse=dr+"return log(x + sqrt(x * x + 1.0));",kse=ye({opSnippet:Tse}),Oz={kernelName:di,backendName:"webgl",kernelFunc:kse};var Nse=dr+`
  return atan(x);
`,$se=ye({opSnippet:Nse}),Pz={kernelName:hi,backendName:"webgl",kernelFunc:$se};var Ese=pz+`
  return atan(a, b);
`,Rse=`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+mz+`
  return result;
`,Ase=nt({opSnippet:Ese,packedOpSnippet:Rse}),Lz={kernelName:fn,backendName:"webgl",kernelFunc:Ase};var Dse=dr+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,Fse=ye({opSnippet:Dse}),zz={kernelName:gi,backendName:"webgl",kernelFunc:Fse};var ji=class{constructor(e,t,o,n=!1,s=!1){if(this.variableNames=["x"],t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=e.filterWidth,a=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,p=e.effectiveFilterHeight,m=e.effectiveFilterWidth,f=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;let h=t==="avg",g=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,x=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,b="0.0";if(h||(b="-1.0 / 1e-20"),o){let R=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${d});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let C="max",S=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(S="avgValue / count");let I=Math.floor(i/4)*4,N=i%4,$=`
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${d});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${$}
          }

          int xC = xCCorner + ${I};
          if (${N===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${N===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${N===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${$}
          }
        }
        setOutput(${S});
      }
    `}},ac=class{constructor(e,t,o,n=!1,s=!1){if(this.variableNames=["x"],t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=e.filterWidth,a=e.strideDepth,l=e.strideHeight,u=e.strideWidth,c=e.dilationDepth,p=e.dilationHeight,m=e.dilationWidth,f=e.effectiveFilterDepth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,g=e.padInfo.front,x=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;let C=t==="avg",S="0.0";if(C||(S="-1.0 / 1e-20"),o){let _=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${d};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${_} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let I="max",N=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(N="avgValue / count");let $=Math.floor(i/4)*4,R=i%4,F=`
      if (${C}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${S};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${S});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${$}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${F}
            }

            int xC = xCCorner + ${$};
            if (${R===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${F}
            } else if (${R===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${F}
            } else if (${R===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${F}
            }
          }
          setOutput(${N});
        }
      }
    `}};function _se(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;rl(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Yt({inputs:{x:n},backend:t});let p=new ji(c,"avg",!1);return t.runWebGLProgram(p,[n],"float32")}var Bz={kernelName:es,backendName:"webgl",kernelFunc:_se};function Ose(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=w.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new ac(p,"avg",!1);return t.runWebGLProgram(m,[n],"float32")}var Mz={kernelName:na,backendName:"webgl",kernelFunc:Ose};var ZC=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=l-1-e.padInfo.top,p=u-1-e.padInfo.left,m=1/(t*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},JC=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,o=e.filterHeight,n=e.filterWidth,s=e.strideDepth,i=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,p=e.effectiveFilterDepth,m=e.effectiveFilterHeight,f=e.effectiveFilterWidth,d=p-1-e.padInfo.front,h=m-1-e.padInfo.top,g=f-1-e.padInfo.left,x=1/(t*o*n);this.userCode=`
      const ivec3 pads = ivec3(${d}, ${h}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Pse(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=w.computePool3DInfo(i.shape,a,l,p,u,c),f=new JC(m);return t.runWebGLProgram(f,[n],i.dtype)}var Vz={kernelName:Xl,backendName:"webgl",kernelFunc:Pse};function Lse(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s;rl([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=w.computePool2DInfo(i.shape,a,l,1,u),p=new ZC(c);return t.runWebGLProgram(p,[n],i.dtype)}var Gz={kernelName:ql,backendName:"webgl",kernelFunc:Lse};function zse(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:i,transposeB:a}=o;return yp({a:n,b:s,transposeA:i,transposeB:a,backend:t})}var Uz={kernelName:ts,backendName:"webgl",kernelFunc:zse};var ew=class{constructor(e,t,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(e,t),w.assertAndGetBroadcastShape(e,o);let a="0.0";n!=null&&(w.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(w.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var tw=class{constructor(e,t,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(e,t),w.assertAndGetBroadcastShape(e,o);let a="vec4(0.0)";n!=null&&(w.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(w.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var Bse=({inputs:r,backend:e,attrs:t})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=t;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=D().getBool("WEBGL_PACK_NORMALIZATION")?new tw(o.shape,n.shape,s.shape,c,p,l):new ew(o.shape,n.shape,s.shape,c,p,l);return e.runWebGLProgram(m,u,u[0].dtype)},Wz={kernelName:us,backendName:"webgl",kernelFunc:Bse};var rw=class{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let t=ze(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=Mse(this.rank),n,s=e.map((i,a)=>`sourceLoc.${$k[a]} = start[${a}] + coords.${$k[a]};`);n=`
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},$k=["x","y","z","w","u","v"];function Mse(r){if(r===1)return"sourceLoc";if(r<=6)return $k.slice(0,r).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var ow=class{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=ze(this.rank),o=jt("coords",this.rank),n=jt("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${e[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${e[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${e[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((c,p)=>`start[${p}]`).join()});`:e.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function Vse(r,e,t,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(t,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=t,i.dtype=r.dtype;let a=rt.computeFlatOffset(e,y.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function Yi(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:i}=o,[a,l]=rt.parseSliceParams(n,s,i);if(rt.assertParamsValid(n,a,l),y.sizeFromShape(l)===0)return t.makeTensorInfo(l,n.dtype,[]);if(t.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=t.texData.get(n.dataId),m=_3(p.values,a,l,n.shape,n.dtype);return t.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=t.texData.get(n.dataId),c=rt.isSliceContinous(n.shape,a,l);if(u||!c){let p=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ow(l):new rw(l),m=[a];return t.runWebGLProgram(p,[n],n.dtype,m)}return t.uploadToGPU(n.dataId),Vse(n,a,l,t)}var Hz={kernelName:Dn,backendName:"webgl",kernelFunc:Yi};var Gse=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,C)=>b*C),l=w.getReshaped(n.shape,s,a),u=w.getPermuted(l.length,s.length),c=w.getReshapedPermuted(n.shape,s,a),p=w.getSliceBeginCoords(i,s.length),m=w.getSliceSize(c,i,s.length),f=[],d=re({inputs:{x:n},backend:t,attrs:{shape:l}}),h=Et({inputs:{x:d},backend:t,attrs:{perm:u}}),g=re({inputs:{x:h},backend:t,attrs:{shape:c}}),x=Yi({inputs:{x:g},backend:t,attrs:{begin:p,size:m}});return f.push(d),f.push(h),f.push(g),f.forEach(b=>t.disposeIntermediateTensorInfo(b)),x},Kz={kernelName:rs,backendName:"webgl",kernelFunc:Gse};function Use(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:i}=o,a=t.readSync(n.dataId),l=t.readSync(s.dataId),u=OC(a,l,s.dtype,s.shape,i);return t.makeTensorInfo([i],s.dtype,u)}var qz={kernelName:jl,backendName:"webgl",kernelFunc:Use};function Wse(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e,s=t.readSync(o.dataId),i=t.readSync(n.dataId),a=w.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return t.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var Xz={kernelName:Yl,backendName:"webgl",kernelFunc:Wse};var Hse="return float(a != b);",Ek=nt({opSnippet:Hse,cpuKernelImpl:N3,dtype:"bool"}),jz={kernelName:kn,backendName:"webgl",kernelFunc:Ek};function Dl(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.texData.get(o.dataId);return Yt({inputs:{x:n.complexTensorInfos.real},backend:t})}var Yz={kernelName:Ti,backendName:"webgl",kernelFunc:Dl};var Kse="return float(int(x));";function Qz(r,e){let t=new Qr(r.shape,Kse),o=e.runWebGLProgram(t,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function Rk(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Yt({inputs:{x:n},backend:t});let i=it(n.shape),a=Rk({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),l=Go({inputs:{real:a,imag:i},backend:t});return i.dispose(),t.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=Dl({inputs:{input:n},backend:t}),a=Rk({inputs:{x:i},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(i),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=Yt({inputs:{x:n},backend:t});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(t.shouldExecuteOnCPU([n])){let i=t.texData.get(n.dataId).values,[a,l,u]=a3(i,n.shape,n.dtype,s);return t.makeTensorInfo(a,l,u)}if(s==="int32")return Qz(n,t);if(s==="bool"){let i=t.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=Ek({inputs:{a:n,b:i},backend:t});return t.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var Zz={kernelName:go,backendName:"webgl",kernelFunc:Rk};var Jz="return ceil(x);",qse=ye({opSnippet:Jz,packedOpSnippet:Jz,cpuKernelImpl:l3}),eB={kernelName:xo,backendName:"webgl",kernelFunc:qse};var nw=class{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var sw=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function Xse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{clipValueMin:s,clipValueMax:i}=o,a;D().getBool("WEBGL_PACK_CLIP")?a=new sw(n.shape):a=new nw(n.shape);let l=[[s],[i]];return t.runWebGLProgram(a,[n],n.dtype,l)}var tB={kernelName:dn,backendName:"webgl",kernelFunc:Xse};var iw=class{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function rB(r,e){return{dataId:e.dataId,dtype:e.dtype,shape:r.shape}}function jse(r){let{inputs:e,backend:t}=r,{x:o}=e,n=t.texData.get(o.dataId),s=new iw(o.shape),i=[rB(o,n.complexTensorInfos.real),rB(o,n.complexTensorInfos.imag)];return t.runWebGLProgram(s,i,i[0].dtype)}var oB={kernelName:sa,backendName:"webgl",kernelFunc:jse};var aw=class{constructor(e){this.outputShape=[],this.outputShape=w.computeOutShape(e,1),this.variableNames=e.map((i,a)=>`T${a}`);let t=new Array(e.length-1);t[0]=e[0][1];for(let i=1;i<t.length;i++)t[i]=t[i-1]+e[i][1];let o=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<t.length;i++){let a=t[i-1];o.push(`else if (yC < ${t[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=t.length,s=t[t.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var uw=class{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=w.computeOutShape(e,t);let o=this.outputShape,n=o.length,s=ze(n),i=jt("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=e.map((h,g)=>`T${g}`);let l=new Array(e.length-1);l[0]=e[0][t];for(let h=1;h<l.length;h++)l[h]=l[h-1]+e[h][t];let u=a[t],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let h=1;h<l.length;h++){let g=l[h-1];m+=`
        if (${u} < ${l[h]}  && ${u} >= ${l[h-1]}) {
          return getChannel(
            getT${h}(${lw(a,u,g)}),
            vec2(${lw(c,u,g)}));
        }`}let f=l.length,d=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${lw(a,u,d)}),
          vec2(${lw(c,u,d)}));`,this.userCode=`
      float getValue(${a.map(h=>"int "+h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function lw(r,e,t){let o=r.indexOf(e);return r.map((s,i)=>i===o?`${s} - ${t}`:s).join()}function bp(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.texData.get(o.dataId);return Yt({inputs:{x:n.complexTensorInfos.imag},backend:t})}var nB={kernelName:ha,backendName:"webgl",kernelFunc:bp};function Ef(r,e,t){let o=r[0].dtype;if(o==="complex64"){let p=r.map(g=>Dl({inputs:{input:g},backend:t})),m=r.map(g=>bp({inputs:{input:g},backend:t})),f=Ef(p,e,t),d=Ef(m,e,t),h=Go({inputs:{real:f,imag:d},backend:t});return p.forEach(g=>t.disposeIntermediateTensorInfo(g)),m.forEach(g=>t.disposeIntermediateTensorInfo(g)),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),h}let n=t.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let p=r.map(b=>{let C=y.sizeFromShape(b.shape.slice(e));return re({inputs:{x:b},backend:t,attrs:{shape:[-1,C]}})}),m=p.map(b=>({vals:t.readSync(b.dataId),shape:b.shape})),f=w.computeOutShape(p.map(b=>b.shape),1),d=p[0].shape[0]===1,h=u3(m,f,o,d),g=w.computeOutShape(r.map(b=>b.shape),e),x=t.makeTensorInfo(g,o,h);return p.forEach(b=>t.disposeIntermediateTensorInfo(b)),x}let s=D().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>s){let p=[];for(let f=0;f<r.length;f+=s){let d=r.slice(f,f+s);p.push(Ef(d,e,t))}let m=Ef(p,e,t);for(let f of p)t.disposeIntermediateTensorInfo(f);return m}if(D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){let p=new uw(r.map(m=>m.shape),e);return t.runWebGLProgram(p,r,o)}let{tensors2D:i,outShape:a}=Yse(r,e,t),l=new aw(i.map(p=>p.shape)),u=t.runWebGLProgram(l,i,o);i.forEach(p=>t.disposeIntermediateTensorInfo(p));let c=re({inputs:{x:u},attrs:{shape:a},backend:t});return t.disposeIntermediateTensorInfo(u),c}function Yse(r,e,t){let o=w.computeOutShape(r.map(s=>s.shape),e);return{tensors2D:r.map(s=>re({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(e))]},backend:t})),outShape:o}}function Ak(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],i=w.computeOutShape(e.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let a=e.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return Yt({inputs:{x:a[0]},backend:t});let l=a.map(u=>u.shape);return w.assertParamsConsistent(l,s),Ef(a,s,t)}var sB={kernelName:os,backendName:"webgl",kernelFunc:Ak};var Rf=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let i=e.padInfo.top,a=e.padInfo.left,l=e.strideHeight,u=e.strideWidth,c=e.dilationHeight,p=e.dilationWidth,m=e.filterHeight,f=e.filterWidth,d=Math.floor(e.inChannels/4)*4,h=e.inChannels%4,g=e.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,C=g?3:1,S="",I="";o&&(n?S=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?S=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:S=`
          float activation(float x) {
            ${o}
          }
        `,I="result = activation(result);");let N=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${S}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${C}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${d}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${d}) *
                    getW(wR, wC, ${d}, d2);
              } else {
                dotProd +=
                    getX(batch, ${d}, xR, xC) *
                    getW(wR, wC, ${d}, d2);
              }

            } else if (${h===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${d}, d2),
                getW(wR, wC, ${d} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${d}),
                  getX(batch, xR, xC, ${d} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${d}, xR, xC),
                  getX(batch, ${d} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${d}, d2),
                getW(wR, wC, ${d} + 1, d2),
                getW(wR, wC, ${d} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${d}),
                  getX(batch, xR, xC, ${d} + 1),
                  getX(batch, xR, xC, ${d} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${d}, xR, xC),
                  getX(batch, ${d} + 1, xR, xC),
                  getX(batch, ${d} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${N}
        ${I}
        setOutput(result);
      }
    `}},cw=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,o=e.padInfo.top,n=e.padInfo.left,s=e.strideDepth,i=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,p=e.filterDepth,m=e.filterHeight,f=e.filterWidth,d=Math.floor(e.inChannels/4)*4,h=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${t}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${d}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${d}) *
                  getW(wF, wR, wC, ${d}, d2);
              } else if (${h===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${d}),
                  getX(batch, xF, xR, xC, ${d} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${d}, d2),
                  getW(wF, wR, wC, ${d} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${d}),
                  getX(batch, xF, xR, xC, ${d} + 1),
                  getX(batch, xF, xR, xC, ${d} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${d}, d2),
                  getW(wF, wR, wC, ${d} + 1, d2),
                  getW(wF, wR, wC, ${d} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var Af=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ht(this.outputShape.length);let i=e.padInfo.left,a=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,p=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<c;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let g=0;g<c;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(p+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*l};
           `,a===1){if(x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,l===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=i%2===0?y.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,l>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let f="",d="";o&&(n?f=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?f=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:f=`vec4 activation(vec4 x) {
           ${o}
         }`,d="result = activation(result);");let h=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${f}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${h}
         ${d}
         setOutput(result);
       }
     `}};var pw=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=ht(this.outputShape.length);let{dataFormat:o}=t,n=Lt(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function mw(r,e){let t=r.length;return t>=3?e?[...r.slice(0,-3),r[t-3]*r[t-2],r[t-1]]:[...r.slice(0,-3),r[t-3],r[t-2]*r[t-1]]:!e&&t===1&&r[0]>1?[r[0],1]:null}function fw({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=t.inChannels,p=l[0]*l[1]*l[2],m=t.outChannels,f=t.dataFormat==="channelsLast",d=!1,h=!1,g,x=[];if(s!=null){let S=mw(s.shape,f);S!=null&&(s=re({inputs:{x:s},backend:o,attrs:{shape:S}}),x.push(s))}if(n!=null){let S=mw(n.shape,f);S!=null&&(n=re({inputs:{x:n},backend:o,attrs:{shape:S}}),x.push(n))}if(!((p===1||m===1)&&c>Nk)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),l.slice(-3))){let S=l[0]*l[1]*(l[2]+1),I={dataId:r.dataId,shape:[1,S,t.inChannels],dtype:r.dtype},N=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(pp(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);let $=re({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}});x.push($);let R=yp({a:I,b:$,backend:o,transposeA:d,transposeB:h,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),F=o.texData.get(R.dataId);y.assert(F.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=N,F.shape=t.outShape,g=Yt({inputs:{x:R},backend:o}),g.shape=t.outShape,x.push(R)}else{let S=t.outHeight*t.outWidth,I=re({inputs:{x:r},backend:o,attrs:{shape:f?[t.batchSize,S,t.inChannels]:[t.batchSize,t.inChannels,S]}}),N=re({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}}),$=yp({a:f?I:N,b:f?N:I,transposeA:!f,transposeB:h,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});g=re({inputs:{x:$},backend:o,attrs:{shape:t.outShape}}),x.push(I),x.push(N),x.push($)}for(let S of x)o.disposeIntermediateTensorInfo(S);return g}function dw({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=t,d=f==="channelsLast",h=l*u*c,g=m*p,x=[t.batchSize,h,g],b=!0,C=!1,S=[];if(s!=null){let H=mw(s.shape,d);H!=null&&(s=re({inputs:{x:s},backend:o,attrs:{shape:H}}),S.push(s))}if(n!=null){let H=mw(n.shape,d);H!=null&&(n=re({inputs:{x:n},backend:o,attrs:{shape:H}}),S.push(n))}let I=re({inputs:{x:e},backend:o,attrs:{shape:[1,h,y.sizeFromShape(e.shape)/h]}});S.push(I);let N=new pw(x,t),$=[r.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],R=o.runWebGLProgram(N,[r],"float32",$),F=re({inputs:{x:R},backend:o,attrs:{shape:x}});S.push(R),S.push(F);let _=n!=null,B=s!=null,V=a==="leakyrelu",G=a?Al(a,!0):null,W=new $f(d?F.shape:I.shape,d?I.shape:F.shape,d?[t.batchSize,g,t.outChannels]:[t.batchSize,t.outChannels,g],b,C,_,G,B,V),U=d?[F,I]:[I,F];if(n&&U.push(n),B&&U.push(s),V){let H=o.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));U.push(H),S.push(H)}let K=o.runWebGLProgram(W,U,"float32"),X=re({inputs:{x:K},backend:o,attrs:{shape:t.outShape}});S.push(K);for(let H of S)o.disposeIntermediateTensorInfo(H);return X}function Qse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=fw({x:n,filter:s,convInfo:m,backend:t});else if(m.strideWidth<=2&&p==="channelsLast"&&D().getBool("WEBGL_EXP_CONV")){let h=new Af(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];f=t.runWebGLProgram(h,[n,s],"float32",g)}else if(D().getBool("WEBGL_CONV_IM2COL"))f=dw({x:n,filter:s,convInfo:m,backend:t});else{let h=new Rf(m);f=t.runWebGLProgram(h,[n,s],"float32")}let d=re({inputs:{x:f},backend:t,attrs:{shape:m.outShape}});return t.disposeIntermediateTensorInfo(f),d}var iB={kernelName:ns,backendName:"webgl",kernelFunc:Qse};var hw=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,o=e.strideWidth,n=e.padInfo.top,s=e.padInfo.left,i=e.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},gw=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,i=e.dataFormat==="channelsLast",a=t-1-e.padInfo.top,l=o-1-e.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},xw=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,o=e.strideHeight,n=e.strideWidth,s=e.padInfo.front,i=e.padInfo.top,a=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${s};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},yw=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,o=e.filterHeight,n=e.filterWidth,s=e.strideDepth,i=e.strideHeight,a=e.strideWidth,l=t-1-e.padInfo.front,u=o-1-e.padInfo.top,c=n-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Zse(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new hw(m);return t.runWebGLProgram(f,[n,s],"float32")}var aB={kernelName:Ql,backendName:"webgl",kernelFunc:Zse};function Jse(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=w.convertConv2DDataFormat(u),m=w.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=new gw(m);return t.runWebGLProgram(f,[n,s],"float32")}var lB={kernelName:ss,backendName:"webgl",kernelFunc:Jse};function eie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l}=o,u=w.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new cw(u);return t.runWebGLProgram(c,[n,s],"float32")}var uB={kernelName:ia,backendName:"webgl",kernelFunc:eie};function tie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,pad:a,filterShape:l}=o,u=w.computeConv3DInfo(n.shape,l,i,1,a),c=new xw(u);return t.runWebGLProgram(c,[n,s],"float32")}var cB={kernelName:Zl,backendName:"webgl",kernelFunc:tie};function rie(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{pad:i,strides:a,inputShape:l}=o,u=w.computeConv3DInfo(l,s.shape,a,1,i),c=new yw(u);return t.runWebGLProgram(c,[n,s],"float32")}var pB={kernelName:Jl,backendName:"webgl",kernelFunc:rie};var oie=ti+`
  return cos(x);
`,nie=ye({opSnippet:oie}),mB={kernelName:hn,backendName:"webgl",kernelFunc:nie};var sie=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,iie=ye({opSnippet:sie}),fB={kernelName:gn,backendName:"webgl",kernelFunc:iie};var bw=class{constructor(e,t,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=e,[c]=t,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[d,h]=[`${a-1}.0`,`${l-1}.0`],[g,x,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[C,S,I]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${h} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${h}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${C});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${S};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var aie=r=>{let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:i}=e,{cropSize:a,method:l,extrapolationValue:u}=o,c=new bw(n.shape,s.shape,a,l,u);return t.runWebGLProgram(c,[n,s,i],"float32")},dB={kernelName:la,backendName:"webgl",kernelFunc:aie};var Cp;(function(r){r.Prod="*",r.Sum="+"})(Cp||(Cp={}));var vg=class{constructor(e,t,o,n){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===Cp.Prod?"1.0":"0.0",a=o?i:`getX(${hB(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${ze(s)} coords = getOutputCoords();
        int end = ${gB(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${gB(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${hB(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function hB(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.x, ${e}.y`;if(r===3)return`${e}.x, ${e}.y, ${e}.z`;if(r===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function gB(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.y`;if(r===3)return`${e}.z`;if(r===4)return`${e}.w`;throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function Cw(r,e,t,o,n,s){let i=e.shape.length,a=w.getAxesPermutation([o],i),l=e;a!=null&&(l=Et({inputs:{x:e},backend:t,attrs:{perm:a}}));let u=w.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=Yt({inputs:{x:l},backend:t});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new vg(r,l.shape,!1,s),d=[[m]],h=p;p=t.runWebGLProgram(f,[p],p.dtype,d),t.disposeIntermediateTensorInfo(h)}if(n){let m=new vg(r,l.shape,n,s),f=p;p=t.runWebGLProgram(m,[p],p.dtype),t.disposeIntermediateTensorInfo(f)}if(a!=null){let m=w.getUndoAxesPermutation(a),f=Et({inputs:{x:p},backend:t,attrs:{perm:m}});return t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(l),f}return p}function lie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;return Cw(Cp.Prod,n,t,s,i,a)}var xB={kernelName:aa,backendName:"webgl",kernelFunc:lie};function uie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;return Cw(Cp.Sum,n,t,s,i,a)}var yB={kernelName:is,backendName:"webgl",kernelFunc:uie};function cie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=t.readSync(n.dataId),u=t.readSync(s.dataId),c=OC(l,u,s.dtype,s.shape,i);return t.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=t.bufferSync(n),u=t.bufferSync(s),c=i3(l,u,i,a);return t.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var bB={kernelName:eu,backendName:"webgl",kernelFunc:cie};var ww=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function pie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),d=i==="NHWC"?[a,p,m,f]:[a,f,p,m],h=new ww(d,s,i);return t.runWebGLProgram(h,[n],n.dtype)}var CB={kernelName:ua,backendName:"webgl",kernelFunc:pie};var Df=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ht(this.outputShape.length);let i=e.filterHeight,a=e.filterWidth,l=e.outChannels/e.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var Ff=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ht(this.outputShape.length);let i=e.outChannels/e.inChannels,a=e.padInfo.left,l=e.strideWidth,u=e.dilationWidth,c=e.filterHeight,p=e.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<p;x++)f+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<p;x++)f+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let C=a%2===0?y.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${C};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:f+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):C===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${C};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let d="",h="";o&&(n?d=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?d=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:d=`vec4 activation(vec4 x) {
          ${o}
        }`,h="result = activation(result);");let g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${d}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `}};function mie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=w.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;D().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new Ff(p):m=new Df(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return t.runWebGLProgram(m,[n,s],"float32",f)}var wB={kernelName:as,backendName:"webgl",kernelFunc:mie};var Sw=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,o=e.strideWidth,n=e.padInfo.top,s=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Iw=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,i=t-1-e.padInfo.top,a=o-1-e.padInfo.left,l=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function fie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=w.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new Sw(p);return t.runWebGLProgram(m,[n,s],"float32")}var SB={kernelName:tu,backendName:"webgl",kernelFunc:fie};function die(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=w.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new Iw(p);return t.runWebGLProgram(m,[n,s],"float32")}var IB={kernelName:ru,backendName:"webgl",kernelFunc:die};var vw=class{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function hie(r){let{inputs:e,backend:t}=r,{x:o}=e,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),i=re({inputs:{x:o},backend:t,attrs:{shape:[s]}}),a=new vw(s),l=t.runWebGLProgram(a,[i],i.dtype),u=re({inputs:{x:l},backend:t,attrs:{shape:n}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),u}var vB={kernelName:ou,backendName:"webgl",kernelFunc:hie};var Tw=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=e,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function gie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l}=o,u=w.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new Tw(u);c=t.runWebGLProgram(p,[n,s],"float32");let m=re({inputs:{x:c},backend:t,attrs:{shape:u.outShape}});return t.disposeIntermediateTensorInfo(c),m}var TB={kernelName:ca,backendName:"webgl",kernelFunc:gie};function xie(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:i,summedDims:a,idDims:l}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=w.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,d=[];for(let h=0;h<p;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(f,l[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=Et({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),d.push(C));let S=C.shape.slice();for(let I=0;I<b.length;++I)S.splice(b[I],0,1);y.arraysEqual(C.shape,S)||(C=re({inputs:{x:C},backend:t,attrs:{shape:S}}),d.push(C)),m===null?m=C:(m=Sg({inputs:{a:C,b:m},backend:t}),d.push(m))}h<p-1&&(u[h]>=0&&(m=xp({inputs:{x:m},backend:t,attrs:{axis:u[h]-(i.length-f),keepDims:!1}}),d.push(m)),f--)}for(let h of d)h!==m&&t.disposeIntermediateTensorInfo(h);return m}var kB={kernelName:pa,backendName:"webgl",kernelFunc:xie};var yie="return (x >= 0.0) ? x : (exp(x) - 1.0);",bie=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,Cie=ye({opSnippet:yie,packedOpSnippet:bie}),NB={kernelName:yn,backendName:"webgl",kernelFunc:Cie};var wie="return (b >= 1.0) ? a : a * (b + 1.0);",Sie=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,Iie=r=>{let{inputs:e,backend:t}=r,{dy:o,y:n}=e,s=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ei(Sie,o.shape,n.shape):new Hn(wie,o.shape,n.shape);return t.runWebGLProgram(s,[o,n],o.dtype)},$B={kernelName:nu,backendName:"webgl",kernelFunc:Iie};var vie=`
  return vec4(equal(a, b));
`,Tie="return float(a == b);",kie=nt({opSnippet:Tie,packedOpSnippet:vie,dtype:"bool",cpuKernelImpl:c3}),EB={kernelName:bn,backendName:"webgl",kernelFunc:kie};var Nie=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${w.ERF_P};
  float a1 = ${w.ERF_A1};
  float a2 = ${w.ERF_A2};
  float a3 = ${w.ERF_A3};
  float a4 = ${w.ERF_A4};
  float a5 = ${w.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,$ie=ye({opSnippet:Nie}),RB={kernelName:yi,backendName:"webgl",kernelFunc:$ie};var Eie=ti+`
  return exp(x);
`,Rie=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Dk=ye({opSnippet:Eie,packedOpSnippet:Rie,cpuKernelImpl:p3,dtype:"float32"}),AB={kernelName:yo,backendName:"webgl",kernelFunc:Dk};function kw(r){let{inputs:e,attrs:t,backend:o}=r,{dim:n}=t,{input:s}=e,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),re({inputs:{x:s},backend:o,attrs:{shape:a}})}var DB={kernelName:ls,backendName:"webgl",kernelFunc:kw};var FB="return exp(x) - 1.0;",Aie=ye({opSnippet:FB,packedOpSnippet:FB,cpuKernelImpl:m3}),_B={kernelName:bo,backendName:"webgl",kernelFunc:Aie};var Tg=class{constructor(e,t,o){this.variableNames=["real","imag"];let n=t[1];this.outputShape=t;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(e==="real")a="return real * expR - imag * expI;";else if(e==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function Nw(r,e,t){let o=t.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=re({inputs:{x:r},backend:t,attrs:{shape:[i,s]}}),l=a.shape,u=new Tg("real",l,e),c=new Tg("imag",l,e),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=t.runWebGLProgram(u,p,"float32"),f=t.runWebGLProgram(c,p,"float32"),d=Go({inputs:{real:m,imag:f},backend:t});t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f);let h=re({inputs:{x:d},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(d),h}function Die(r){let{inputs:e,backend:t}=r,{input:o}=e;return Nw(o,!1,t)}var OB={kernelName:su,backendName:"webgl",kernelFunc:Die};var $w=class{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Fl(r){let{backend:e,attrs:t}=r,{shape:o,value:n}=t,{dtype:s}=t;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),e.makeTensorInfo(o,s,i)}else{let i=new $w(o,n),a=[[n]];return e.runWebGLProgram(i,[],s,a)}}var PB={kernelName:ma,backendName:"webgl",kernelFunc:Fl};var Ew=class{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var LB={kernelName:fa,backendName:"webgl",kernelFunc:({inputs:r,backend:e})=>{let{image:t}=r,o=e,n=new Ew(t.shape);return o.runWebGLProgram(n,[t],t.dtype)}};var zB="return floor(x);",Fie=ye({opSnippet:zB,packedOpSnippet:zB,cpuKernelImpl:f3}),BB={kernelName:Co,backendName:"webgl",kernelFunc:Fie};var _ie=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,Oie=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,Pie=nt({opSnippet:_ie,packedOpSnippet:Oie,dtype:"int32"}),MB={kernelName:Cn,backendName:"webgl",kernelFunc:Pie};var Rw=class{constructor(e){this.variableNames=["A"];let t=Lt(),[o,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var Aw=class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=Lt(),[o,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}};var VB={kernelName:pl,backendName:"webgl",kernelFunc:Lie},_f,Fk=D().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function Lie(r){let{inputs:e,backend:t,attrs:o}=r,{pixels:n}=e,{numChannels:s}=o,i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];if(a||i){let h=D().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(_f==null||h!==Fk)&&(Fk=h,_f=document.createElement("canvas").getContext("2d",{willReadFrequently:Fk})),_f.canvas.width=l,_f.canvas.height=u,_f.drawImage(n,0,0,l,u),n=_f.canvas}let m=t.makeTensorInfo(c,"int32");t.texData.get(m.dataId).usage=Gr.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(m.dataId),n);let f=D().getBool("WEBGL_PACK")?new Aw(p):new Rw(p),d=t.runWebGLProgram(f,[m],"int32");return t.disposeData(m.dataId),d}function zie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:d}=o,h=w.convertConv2DDataFormat(c),g=w.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,h),x,b=[],C=i!=null,S=a!=null,I=f==="leakyrelu",N=()=>{let R=[n,s],F=(_,B)=>{if(B==="NCHW"&&_.shape.length===1&&_.shape[0]!==1){let V=re({inputs:{x:_},backend:t,attrs:{shape:[_.shape[0],1,1]}});return b.push(V),V}return _};if(C&&R.push(F(i,c)),S&&R.push(F(a,c)),I){let _=t.makeTensorInfo([],"float32",y.createScalarValue(d,"float32"));R.push(_),b.push(_)}return R};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=fw({x:n,filter:s,convInfo:g,backend:t,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:d});else if(g.strideWidth<=2&&h==="channelsLast"&&D().getBool("WEBGL_EXP_CONV")){let R=f?Al(f,!0):null,F=new Af(g,C,R,S,I),_=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],B=N();x=t.runWebGLProgram(F,B,"float32",_)}else if(D().getBool("WEBGL_CONV_IM2COL"))x=dw({x:n,filter:s,convInfo:g,backend:t,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:d});else{let R=f?Al(f,!1):null,F=new Rf(g,C,R,S,I),_=N();x=t.runWebGLProgram(F,_,"float32")}let $=re({inputs:{x},backend:t,attrs:{shape:g.outShape}});return b.push(x),b.forEach(R=>t.disposeIntermediateTensorInfo(R)),$}var GB={kernelName:Fi,backendName:"webgl",kernelFunc:zie};function Bie(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,d=[],h=c;h==null&&(h=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(l,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${h}'`);let g=w.computeConv2DInfo(n.shape,s.shape,l,h,u,p,!0),x=D().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Al(m,x):null,C=[n,s],S=i!=null,I=a!=null,N=m==="leakyrelu";if(S&&C.push(i),I&&C.push(a),N){let _=t.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));C.push(_),d.push(_)}let $;x?$=new Ff(g,S,b,I,N):$=new Df(g,S,b,I,N);let R=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],F=t.runWebGLProgram($,C,"float32",R);return d.forEach(_=>t.disposeIntermediateTensorInfo(_)),F}var UB={kernelName:_i,backendName:"webgl",kernelFunc:Bie};var Dw=class{constructor(e,t,o,n){this.sliceDim=e,this.strides=t,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=ze(t.length),i=ze(o.length),a=this.sliceDim>1?"strides[j]":"strides",l=ze(n.length),u=n.length>1?"paramsShape[j]":"paramsShape";this.userCode=`
        ${s} strides = ${s}(${this.strides});
        ${l} paramsShape = ${l}(${this.paramsShape});
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            out_of_bounds = out_of_bounds || index < 0;
            out_of_bounds = out_of_bounds || index >= ${u};
            flattenIndex += index * ${a};
          }
          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function Mie(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=w.prepareAndValidate(o,n),m=re({inputs:{x:n},backend:t,attrs:{shape:[u,i]}}),f=re({inputs:{x:o},backend:t,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(t.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=t.readSync(n.dataId),b=t.bufferSync(o),C=d3(x,b,o.dtype,u,i,c,p,o.shape,a);return t.makeTensorInfo(l,o.dtype,C.values)}let d=new Dw(i,p,[u,c],o.shape),h=t.runWebGLProgram(d,[f,m],f.dtype),g=re({inputs:{x:h},backend:t,attrs:{shape:l}});return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(h),g}var WB={kernelName:da,backendName:"webgl",kernelFunc:Mie};var Fw=class{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let o=ze(this.rank),n=Vie(e,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function Vie(r,e){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${t[n]}`);return o.join()}function _k(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0];if(D().get("DEBUG")){let b=t.readSync(s.dataId),C=n.shape[l];for(let S=0;S<b.length;++S){let I=b[S];y.assert(I<=C-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${C-1}]`)}}let u=w.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=re({inputs:{x:n},backend:t,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=re({inputs:{x:s},backend:t,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let d=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(t.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=t.bufferSync(f),C=t.bufferSync(m),S=h3(C,b,d);return p.forEach(I=>t.disposeIntermediateTensorInfo(I)),t.makeTensorInfo(u.outputShape,S.dtype,S.values)}let h=new Fw(m.shape,d),g=t.runWebGLProgram(h,[m,f],m.dtype);p.push(g);let x=re({inputs:{x:g},backend:t,attrs:{shape:u.outputShape}});return p.forEach(b=>t.disposeIntermediateTensorInfo(b)),x}var HB={kernelName:cs,backendName:"webgl",kernelFunc:_k};var Gie="return float(a > b);",Uie=`
  return vec4(greaterThan(a, b));
`,Wie=nt({opSnippet:Gie,packedOpSnippet:Uie,cpuKernelImpl:g3,dtype:"bool"}),KB={kernelName:wn,backendName:"webgl",kernelFunc:Wie};var Hie="return float(a >= b);",Kie=`
  return vec4(greaterThanEqual(a, b));
`,qie=nt({opSnippet:Hie,packedOpSnippet:Kie,dtype:"bool",cpuKernelImpl:x3}),qB={kernelName:wo,backendName:"webgl",kernelFunc:qie};function Xie(r){let{inputs:e,backend:t}=r,{input:o}=e;return Nw(o,!0,t)}var XB={kernelName:iu,backendName:"webgl",kernelFunc:Xie};var jie="return float(!isnan(x) && !isinf(x));",Yie=ye({opSnippet:jie,dtype:"bool"}),jB={kernelName:bi,backendName:"webgl",kernelFunc:Yie};var Qie="return float(isinf(x));",Zie=ye({opSnippet:Qie,dtype:"bool"}),YB={kernelName:Ci,backendName:"webgl",kernelFunc:Zie};var Jie="return float(isnan(x));",eae=ye({opSnippet:Jie,dtype:"bool"}),QB={kernelName:Sn,backendName:"webgl",kernelFunc:eae};var tae="return float(a < b);",rae=`
  return vec4(lessThan(a, b));
`,oae=nt({opSnippet:tae,packedOpSnippet:rae,cpuKernelImpl:y3,dtype:"bool"}),ZB={kernelName:In,backendName:"webgl",kernelFunc:oae};var nae="return float(a <= b);",sae=`
  return vec4(lessThanEqual(a, b));
`,iae=nt({opSnippet:nae,packedOpSnippet:sae,cpuKernelImpl:b3,dtype:"bool"}),JB={kernelName:vn,backendName:"webgl",kernelFunc:iae};function aae(r){let{backend:e,attrs:t}=r,{start:o,stop:n,num:s}=t,i=C3(o,n,s);return e.makeTensorInfo([i.length],"float32",i)}var eM={kernelName:au,backendName:"webgl",kernelFunc:aae};var lae=ti+`
  return x < 0.0 ? 0./0. : log(x);
`,uae=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,cae=ye({opSnippet:lae,packedOpSnippet:uae,cpuKernelImpl:w3}),tM={kernelName:Io,backendName:"webgl",kernelFunc:cae};var pae=ti+`
  return log(1.0 + x);
`,mae=ye({opSnippet:pae}),rM={kernelName:wi,backendName:"webgl",kernelFunc:mae};var fae="return float(a >= 1.0 && b >= 1.0);",dae=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,hae=nt({opSnippet:fae,packedOpSnippet:dae,dtype:"bool"}),oM={kernelName:Si,backendName:"webgl",kernelFunc:hae};var gae="return float(!(x >= 1.0));",xae=ye({opSnippet:gae}),nM={kernelName:Ii,backendName:"webgl",kernelFunc:xae};var yae="return float(a >= 1.0 || b >= 1.0);",bae=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,Cae=nt({opSnippet:yae,packedOpSnippet:bae,dtype:"bool"}),sM={kernelName:cl,backendName:"webgl",kernelFunc:Cae};var _w=class{constructor(e,t,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=t,a=e[3]-1;this.outputShape=e;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var Ow=class{constructor(e,t,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=t,a=e[3]-1;this.outputShape=e;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var wae=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=D().getBool("WEBGL_PACK_NORMALIZATION")?new Ow(n.shape,s,i,a,l):new _w(n.shape,s,i,a,l);return t.runWebGLProgram(u,[n],n.dtype)},iM={kernelName:ga,backendName:"webgl",kernelFunc:wae};var Pw=class{constructor(e,t,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var Sae=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:i}=e,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new Pw(n.shape,a,l,u,c);return t.runWebGLProgram(p,[n,s,i],n.dtype)},aM={kernelName:lu,backendName:"webgl",kernelFunc:Sae};function lM(r,e,t,o){let n=y.sizeFromShape(e),i=y.sizeFromShape(r.shape)/n,a=re({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=on(a,r.dtype,"max",o),u=re({inputs:{x:l},attrs:{shape:t},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function Ok(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=c!=null,m=t.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let C=t.texData.get(f.dataId).values,S=new Array(a);for(let $=0;$<S.length;$++)S[$]=n.shape[c[$]];let I=dp(C,n.shape,n.dtype,c,S);f=t.makeTensorInfo(S,n.dtype);let N=t.texData.get(f.dataId);N.values=I}else f=ic(n,c,t);u=w.getInnerMostAxes(u.length,a)}w.assertAxesAreInnerMostDims("max",u,a);let[d,h]=w.computeOutAndReduceShapes(f.shape,u),g=d;i&&(g=w.expandShapeToKeepDim(d,l));let x;if(m){let C=t.texData.get(f.dataId).values,S=S3(C,y.sizeFromShape(h),g,n.dtype);x=t.makeTensorInfo(g,n.dtype);let I=t.texData.get(x.dataId);I.values=S}else x=lM(f,h,g,t);return p&&t.disposeIntermediateTensorInfo(f),x}var uM={kernelName:ms,backendName:"webgl",kernelFunc:Ok};var Iae=GC+`
  return max(a, b);
`,vae=`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+sc+`
  return result;
`,Tae=nt({opSnippet:Iae,packedOpSnippet:vae,cpuKernelImpl:I3}),cM={kernelName:vo,backendName:"webgl",kernelFunc:Tae};function kae(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;rl(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Yt({inputs:{x:n},backend:t});let p=new ji(c,"max",!1);return t.runWebGLProgram(p,[n],n.dtype)}var pM={kernelName:fs,backendName:"webgl",kernelFunc:kae};function Nae(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=w.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new ac(p,"max",!1);return t.runWebGLProgram(m,[n],n.dtype)}var mM={kernelName:xa,backendName:"webgl",kernelFunc:Nae};var Lw=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,o=e.strideWidth,n=e.dilationHeight,s=e.effectiveFilterHeight,i=e.effectiveFilterWidth,a=s-1-e.padInfo.top,l=i-1-e.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},zw=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,o=e.strideHeight,n=e.strideWidth,s=e.dilationDepth,i=e.dilationHeight,a=e.dilationWidth,l=e.effectiveFilterDepth,u=e.effectiveFilterHeight,c=e.effectiveFilterWidth,p=l-1-e.padInfo.front,m=u-1-e.padInfo.top,f=c-1-e.padInfo.left,d=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${d} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function $ae(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=w.computePool3DInfo(i.shape,a,l,p,u,c),f=new ac(m,"max",!0),d=t.runWebGLProgram(f,[i],i.dtype),h=new zw(m),g=t.runWebGLProgram(h,[n,d],i.dtype);return t.disposeIntermediateTensorInfo(d),g}var fM={kernelName:cu,backendName:"webgl",kernelFunc:$ae};function Eae(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s,output:i}=e,a=s;rl([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=w.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,d=new ji(m,"max",f),h=t.runWebGLProgram(d,[a],a.dtype),g=new Lw(m),x=t.runWebGLProgram(g,[n,h],a.dtype);return t.disposeIntermediateTensorInfo(h),x}var dM={kernelName:uu,backendName:"webgl",kernelFunc:Eae};function hM(r,e,t,o){let n=new ji(t,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new ji(t,"max",!0,!0,e);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var gM={kernelName:pu,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=e,l=t;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(w.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=w.computePool2DInfo(o.shape,n,s,u,i),[p,m]=hM(o,a,c,l);return[p,m]}};function xM(r,e,t,o){let n=y.sizeFromShape(e),i=y.sizeFromShape(r.shape)/n,a=re({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=on(a,"float32","mean",o),u=re({inputs:{x:l},attrs:{shape:t},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var yM={kernelName:ds,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{keepDims:n,axis:s}=e,i=t,a=o.shape.length,l=y.parseAxisParam(s,o.shape),u=l,c=w.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],d=o;if(p){if(m){let S=i.texData.get(d.dataId).values,I=new Array(a);for(let R=0;R<I.length;R++)I[R]=o.shape[c[R]];let N=dp(S,o.shape,o.dtype,c,I);d=i.makeTensorInfo(I,o.dtype);let $=i.texData.get(d.dataId);$.values=N}else d=ic(o,c,i);f.push(d),u=w.getInnerMostAxes(u.length,a)}w.assertAxesAreInnerMostDims("sum",u,a);let[h,g]=w.computeOutAndReduceShapes(d.shape,u),x=h;n&&(x=w.expandShapeToKeepDim(h,l));let b=xM(d,g,x,i);for(let C of f)i.disposeIntermediateTensorInfo(C);return b}};function Rae(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=n;c!=null&&(p=Et({inputs:{x:n},backend:t,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,n.shape.length)),w.assertAxesAreInnerMostDims("min",u,a);let[m,f]=w.computeOutAndReduceShapes(p.shape,u),d=y.sizeFromShape(f),h=re({inputs:{x:p},backend:t,attrs:{shape:[-1,d]}}),g=on(h,h.dtype,"min",t),x;if(i){let b=w.expandShapeToKeepDim(m,l);x=re({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=re({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),c!=null&&t.disposeIntermediateTensorInfo(p),x}var bM={kernelName:hs,backendName:"webgl",kernelFunc:Rae};var Aae=GC+`
  return min(a, b);
`,Dae=`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+sc+`
  return result;
`,Fae=nt({opSnippet:Aae,packedOpSnippet:Dae,cpuKernelImpl:v3}),CM={kernelName:To,backendName:"webgl",kernelFunc:Fae};var Bw=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=t.map((c,p)=>c[0]+e[p]+c[1]);let n=e.length,s=ze(n),i=t.map(c=>c[0]).join(","),a=t.map((c,p)=>c[0]+e[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var Mw=class{constructor(e,t,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((d,h)=>d[0]+e[h]+d[1]);let n=e.length,s=ze(n),i=t.map(d=>d[0]).join(","),a=t.map((d,h)=>d[0]+e[h]).join(","),l=jt("rc",n),u=jt("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let d=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${d}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${d}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let d=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${d}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${d}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${d}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${d}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var _ae=({inputs:r,backend:e,attrs:t})=>{let{x:o}=r,{paddings:n,mode:s}=t,i=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Mw(o.shape,n,s):new Bw(o.shape,n,s);return e.runWebGLProgram(i,[o],o.dtype)},wM={kernelName:gs,backendName:"webgl",kernelFunc:_ae};var Oae=`if (b == 0.0) return NAN;
  return mod(a, b);`,Pae=`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  `+sc+`
  return result;
`,Lae=nt({opSnippet:Oae,packedOpSnippet:Pae}),SM={kernelName:vi,backendName:"webgl",kernelFunc:Lae};var Vw=class{constructor(e,t,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}};var zae=`
if (a == b) {
  return 1.0;
};
return a / b;`,Bae=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,Pk=nt({opSnippet:zae,packedOpSnippet:Bae,checkOutOfBounds:!0}),IM={kernelName:xn,backendName:"webgl",kernelFunc:Pk};var vM="return a - b;",Lk=nt({opSnippet:vM,packedOpSnippet:vM,supportsComplex:!0,cpuKernelImpl:G3}),TM={kernelName:Ao,backendName:"webgl",kernelFunc:Lk};function zk(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=Ok({inputs:{x:n},backend:t,attrs:{reductionIndices:i,keepDims:!1}}),l=w.expandShapeToKeepDim(a.shape,i),u=re({inputs:{x:a},backend:t,attrs:{shape:l}}),c=Lk({inputs:{a:n,b:u},backend:t}),p=Dk({inputs:{x:c},backend:t}),m=xp({inputs:{x:p},backend:t,attrs:{axis:i,keepDims:!1}}),f=re({inputs:{x:m},backend:t,attrs:{shape:l}}),d=Pk({inputs:{a:p,b:f},backend:t});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),d}var kM={kernelName:$s,backendName:"webgl",kernelFunc:zk};function Mae(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:i,normalized:a}=o,l=a?n:zk({inputs:{logits:n},backend:t,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new Vw(u,c,s),m=[[i]],f=t.runWebGLProgram(p,[l],"int32",m);return a||t.disposeIntermediateTensorInfo(l),f}var NM={kernelName:mu,backendName:"webgl",kernelFunc:Mae};var Vae=dr+`
  return -x;
`,Gae=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function Uae(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])){let s=t.texData.get(o.dataId),[i,a]=k3(s.values,o.shape,o.dtype);return t.makeTensorInfo(a,o.dtype,i)}let n;return D().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Wn(o.shape,Gae):n=new Qr(o.shape,Vae),t.runWebGLProgram(n,[o],o.dtype)}var $M={kernelName:Tn,backendName:"webgl",kernelFunc:Uae};var Wae=vt.nonMaxSuppressionV3Impl;function Hae(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=t.readSync(n.dataId),c=t.readSync(s.dataId),{selectedIndices:p}=Wae(u,c,i,a,l);return t.makeTensorInfo([p.length],"int32",new Int32Array(p))}var EM={kernelName:ya,backendName:"webgl",kernelFunc:Hae};var Kae=vt.nonMaxSuppressionV4Impl;function qae(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=t.readSync(n.dataId),p=t.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=Kae(c,p,i,a,l,u);return[t.makeTensorInfo([m.length],"int32",new Int32Array(m)),t.makeTensorInfo([],"int32",new Int32Array([f]))]}var RM={kernelName:fu,backendName:"webgl",kernelFunc:qae};var Xae=vt.nonMaxSuppressionV5Impl;function jae(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=t.readSync(n.dataId),p=t.readSync(s.dataId),m=i,f=a,d=l,h=u,{selectedIndices:g,selectedScores:x}=Xae(c,p,m,f,d,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var AM={kernelName:ba,backendName:"webgl",kernelFunc:jae};var Gw=class{constructor(e,t,o,n){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var Yae=r=>{let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:i,onValue:a,offValue:l}=o,u=y.sizeFromShape(n.shape),c=new Gw(u,i,a,l),p=re({inputs:{x:n},backend:t,attrs:{shape:[u]}}),m=t.runWebGLProgram(c,[p],s);t.disposeIntermediateTensorInfo(p);let f=[...n.shape,i],d=re({inputs:{x:m},backend:t,attrs:{shape:f}});return t.disposeIntermediateTensorInfo(m),d},DM={kernelName:Ca,backendName:"webgl",kernelFunc:Yae};function kg(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="complex64"){let n=Dl({inputs:{input:o},backend:t}),s=kg({inputs:{x:n},backend:t}),i=bp({inputs:{input:o},backend:t}),a=kg({inputs:{x:i},backend:t}),l=Go({inputs:{real:s,imag:a},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(a),l}else return Fl({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:t})}var FM={kernelName:Rs,backendName:"webgl",kernelFunc:kg};function _M(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Dl({inputs:{input:o},backend:t}),s=_M({inputs:{x:n},backend:t}),i=bp({inputs:{input:o},backend:t}),a=kg({inputs:{x:i},backend:t}),l=Go({inputs:{real:s,imag:a},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(a),l}else return Fl({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:t})}var OM={kernelName:xs,backendName:"webgl",kernelFunc:_M};function Qae(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return kw({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,i=e[0].dtype;e.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=e.map(c=>{let p=kw({inputs:{input:c},backend:t,attrs:{dim:n}});return a.push(p),p}),u=Ak({inputs:l,backend:t,attrs:{axis:n}});return a.forEach(c=>t.disposeIntermediateTensorInfo(c)),u}var PM={kernelName:ys,backendName:"webgl",kernelFunc:Qae};var Uw=class{constructor(e,t,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((u,c)=>u[0]+e[c]+u[1]);let n=e.length,s=ze(n),i=t.map(u=>u[0]).join(","),a=t.map((u,c)=>u[0]+e[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var Ww=class{constructor(e,t,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((h,g)=>h[0]+e[g]+h[1]);let n=e.length,s=ze(n),i=t.map(h=>h[0]).join(","),a=t.map((h,g)=>h[0]+e[g]).join(","),l=jt("rc",n),u=jt("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="";for(let h=0,g=n===1?2:4;h<g;h++)d+=`
        ${m[h]}
        if (${f}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${p});
        }
      `;d+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}};var Bk=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:i}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Fl({backend:t,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ww(n.shape,s,i):new Uw(n.shape,s,i),l=[[i]];return t.runWebGLProgram(a,[n],n.dtype,l)},LM={kernelName:bs,backendName:"webgl",kernelFunc:Bk};var Zae=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,Jae=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  `+sc+`
  return result;
`,ele=nt({opSnippet:Zae,packedOpSnippet:Jae}),zM={kernelName:Nn,backendName:"webgl",kernelFunc:ele};function tle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=y.parseAxisParam(s,n.shape),c=u,p=w.getAxesPermutation(c,a),m=n;p!=null&&(m=Et({inputs:{x:n},backend:t,attrs:{perm:p}}),c=w.getInnerMostAxes(c.length,a),l.push(m)),w.assertAxesAreInnerMostDims("prod",c,a);let f;if(t.shouldExecuteOnCPU([m])){let d=t.texData.get(m.dataId).values,{outVals:h,outShape:g,outDtype:x}=$3(m.shape,m.dtype,d,c);f=t.makeTensorInfo(g,x,h)}else{let[d,h]=w.computeOutAndReduceShapes(m.shape,c),g=y.sizeFromShape(h),x=re({inputs:{x:m},backend:t,attrs:{shape:[-1,g]}}),b=Do(n.dtype),C=on(x,b,"prod",t);f=re({inputs:{x:C},backend:t,attrs:{shape:d}}),l.push(x),l.push(C)}if(i){l.push(f);let d=w.expandShapeToKeepDim(f.shape,u);f=re({inputs:{x:f},backend:t,attrs:{shape:d}})}return l.forEach(d=>t.disposeIntermediateTensorInfo(d)),f}var BM={kernelName:$n,backendName:"webgl",kernelFunc:tle};function rle(r){let{inputs:e,backend:t,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=e,{rowPartitionTypes:l}=o,u=t.readSync(n.dataId),c=t.readSync(s.dataId),p=t.readSync(i.dataId),m=a.map(g=>t.readSync(g.dataId)),f=a.map(g=>g.shape),[d,h]=E3(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return t.makeTensorInfo(d,s.dtype,h)}var MM={kernelName:du,backendName:"webgl",kernelFunc:rle};var Mk=r=>{let{backend:e,attrs:t}=r,{start:o,stop:n,step:s,dtype:i}=t,a=R3(o,n,s,i);return e.makeTensorInfo([a.length],i,a)},VM={kernelName:wa,backendName:"webgl",kernelFunc:Mk};var ole="return 1.0 / x;",nle=ye({opSnippet:ole}),GM={kernelName:En,backendName:"webgl",kernelFunc:nle};var sle=dr+`
  return (x < 0.0) ? 0.0 : x;
`,ile=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,ale=ye({opSnippet:sle,packedOpSnippet:ile}),UM={kernelName:Rn,backendName:"webgl",kernelFunc:ale};var lle=dr+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,ule=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cle=ye({opSnippet:lle,packedOpSnippet:ule}),WM={kernelName:An,backendName:"webgl",kernelFunc:cle};var Hw=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var Kw=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function ple(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=D().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Kw(n.shape,l,u,s,i):new Hw(n.shape,l,u,s,i);return t.runWebGLProgram(c,[n],"float32")}var HM={kernelName:Is,backendName:"webgl",kernelFunc:ple};var qw=class{constructor(e,t,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,s]=t,[,i,a]=e,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,d=Math.ceil(m)*2+2,h=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${d});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function mle(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:i}=o,a=new qw(s.shape,n.shape,i);return t.runWebGLProgram(a,[s],s.dtype)}var KM={kernelName:gu,backendName:"webgl",kernelFunc:mle};var Xw=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var jw=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function fle(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=D().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new jw(n.shape,l,u,s,i):new Xw(n.shape,l,u,s,i);return t.runWebGLProgram(c,[n],n.dtype)}var qM={kernelName:Ss,backendName:"webgl",kernelFunc:fle};var Yw=class{constructor(e,t,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,s]=t,[,i,a]=e,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,d=Math.ceil(m)*2+2,h=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${d});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function dle(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:i}=o,a=new Yw(s.shape,n.shape,i);return t.runWebGLProgram(a,[s],s.dtype)}var XM={kernelName:hu,backendName:"webgl",kernelFunc:dle};var Qw=class{constructor(e,t){this.variableNames=["x"];let o=e.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=e,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let n=a=>t.indexOf(a)!==-1&&e[a]!==1?`${e[a]} - coords[${a}] - 1`:`coords[${a}]`,s=e.map((a,l)=>n(l)).join(","),i=ze(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var Zw=class{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=e.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=e;let n=jt("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=ze(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(d){return m(d)}function u(d){return d[o-1]="("+d[o-1]+" + 1)",m(d)}function c(d){return d[o-2]="("+d[o-2]+" + 1)",m(d)}function p(d){return d[o-1]="("+d[o-1]+" + 1)",d[o-2]="("+d[o-2]+" + 1)",m(d)}function m(d){let h=e.map((b,C)=>f(C,d)),g=h.join(","),x=h.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function f(d,h){return t.indexOf(d)!==-1&&e[d]!==1?`${e[d]} - ${h[d]} - 1`:`${h[d]}`}}};function hle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o,i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Yt({inputs:{x:n},backend:t});let l=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Zw(n.shape,a):new Qw(n.shape,a);return t.runWebGLProgram(l,[n],n.dtype)}var jM={kernelName:Sa,backendName:"webgl",kernelFunc:hle};var Jw=class{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=e[1],n=e[2];this.outputShape=e;let s="";typeof t=="number"?s=`float outputValue = ${t.toFixed(2)};`:s=`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var YM={kernelName:Aa,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=e,a=t,l=new Jw(o.shape,s),[u,c]=w.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var gle=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,xle=ye({opSnippet:gle}),QM={kernelName:ki,backendName:"webgl",kernelFunc:xle};var yle="return inversesqrt(x);",ble=ye({opSnippet:yle,cpuKernelImpl:A3}),ZM={kernelName:No,backendName:"webgl",kernelFunc:ble};var Of=class{constructor(e,t,o,n,s,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=ze(s.length),u=ze(i.length),c="";o===1?c="i":o===2&&(c="i, j");let p=`getIndices(${c})`,m="";n===1?m="i":n===2&&(m="i, coords[1]");let f=`getUpdates(${m})`,d=t>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${d};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}};function Cle(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=w.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return t.makeTensorInfo(i,n.dtype);let f=re({inputs:{x:n},backend:t,attrs:{shape:[l,a]}}),d=re({inputs:{x:s},backend:t,attrs:{shape:[l,u]}}),h=t.makeTensorInfo([],"float32",new Float32Array([0])),g=new Of(l,a,f.shape.length,d.shape.length,c,m),x=t.runWebGLProgram(g,[d,f,h],d.dtype),b=re({inputs:{x},backend:t,attrs:{shape:i}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(h),b}var JM={kernelName:Ia,backendName:"webgl",kernelFunc:Cle};var e0=class{constructor(e,t,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=D().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function wle(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:i}=o,a=new e0(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return t.runWebGLProgram(a,[n,s],"int32",l)}var eV={kernelName:xu,backendName:"webgl",kernelFunc:wle};var t0=class{constructor(e,t,o){this.variableNames=["c","a","b"],this.outputShape=t;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<t.length;c++)u.push(`${a[c]}`),c<e&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=ze(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function Sle(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e,i=new t0(o.shape.length,n.shape,n.shape.length);return t.runWebGLProgram(i,[o,n,s],Ye(n.dtype,s.dtype))}var tV={kernelName:vs,backendName:"webgl",kernelFunc:Sle};var Ile=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${w.SELU_SCALEALPHA};
  float scale = ${w.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,vle=ye({opSnippet:Ile}),rV={kernelName:Ni,backendName:"webgl",kernelFunc:vle};var Tle=ti+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,kle=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Nle=ye({opSnippet:Tle,packedOpSnippet:kle,cpuKernelImpl:F3}),oV={kernelName:$o,backendName:"webgl",kernelFunc:Nle};var $le=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,Ele=ye({opSnippet:$le}),nV={kernelName:$i,backendName:"webgl",kernelFunc:Ele};var Rle=ti+`
  return sin(x);
`,Ale=ye({opSnippet:Rle}),sV={kernelName:Fn,backendName:"webgl",kernelFunc:Ale};var Dle=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,Fle=ye({opSnippet:Dle}),iV={kernelName:_n,backendName:"webgl",kernelFunc:Fle};var _le=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,Ole=ye({opSnippet:_le}),aV={kernelName:Ei,backendName:"webgl",kernelFunc:Ole};var Ple=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=Bk({inputs:{x:n},backend:t,attrs:{paddings:l,constantValue:0}}),p=w.getReshaped(c.shape,s,a,!1),m=w.getPermuted(p.length,s.length,!1),f=w.getReshapedPermuted(c.shape,s,a,!1),d=re({inputs:{x:c},backend:t,attrs:{shape:p}}),h=Et({inputs:{x:d},backend:t,attrs:{perm:m}}),g=re({inputs:{x:h},backend:t,attrs:{shape:f}});return u.push(c),u.push(d),u.push(h),u.forEach(x=>t.disposeIntermediateTensorInfo(x)),g},lV={kernelName:ks,backendName:"webgl",kernelFunc:Ple};function Lle(r){let{inputs:e,backend:t}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=e;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=t.readSync(o.dataId),l=t.readSync(n.dataId),u=t.readSync(s.dataId),c=t.readSync(i.dataId)[0],[p,m,f,d,h]=O3(a,o.shape,o.dtype,l,n.dtype,u,c);return[t.makeTensorInfo(m,o.dtype,p),t.makeTensorInfo([m[0]],n.dtype,f),t.makeTensorInfo([d.length],"bool",new Uint8Array(d.map(g=>Number(g)))),t.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var uV={kernelName:yu,backendName:"webgl",kernelFunc:Lle};function zle(r){let{inputs:e,backend:t}=r,{inputIndices:o,inputShape:n,newShape:s}=e;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(t.readSync(n.dataId)),a=t.readSync(o.dataId),l=Array.from(t.readSync(s.dataId)),[u,c,p]=P3(a,o.shape,o.dtype,i,l);return[t.makeTensorInfo(c,o.dtype,u),t.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var cV={kernelName:bu,backendName:"webgl",kernelFunc:zle};function Ble(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=t.readSync(o.dataId),a=t.readSync(n.dataId),l=t.readSync(s.dataId),[u,c]=LC(i,o.shape,o.dtype,a,l,!0);return t.makeTensorInfo(c,o.dtype,u)}var pV={kernelName:Cu,backendName:"webgl",kernelFunc:Ble};function Mle(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=t.readSync(o.dataId),a=t.readSync(n.dataId),l=t.readSync(s.dataId),[u,c]=LC(i,o.shape,o.dtype,a,l);return t.makeTensorInfo(c,o.dtype,u)}var mV={kernelName:wu,backendName:"webgl",kernelFunc:Mle};function Vle(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=e,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=w.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let x=t.bufferSync(n),b=t.bufferSync(s),C=y.decodeString(t.readSync(i.dataId)[0]),S=D3(x,b,a,m,c,u,l,p,C,f);return t.makeTensorInfo(a,S.dtype,S.values)}let d=new Of(u,l,n.shape.length,s.shape.length,p,[m,1],f),h=t.runWebGLProgram(d,[s,n,i],s.dtype),g=re({inputs:{x:h},backend:t,attrs:{shape:a}});return t.disposeIntermediateTensorInfo(h),g}var fV={kernelName:va,backendName:"webgl",kernelFunc:Vle};function Gle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=w.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let d=Yi({inputs:{x:n},backend:t,attrs:{begin:c,size:f}});return c[a]+=m,d})}var dV={kernelName:Ns,backendName:"webgl",kernelFunc:Gle};var hV="return sqrt(x);",Ule=ye({opSnippet:hV,packedOpSnippet:hV,cpuKernelImpl:L3}),gV={kernelName:Eo,backendName:"webgl",kernelFunc:Ule};var Wle="return x * x;",Hle=ye({opSnippet:Wle}),xV={kernelName:Ta,backendName:"webgl",kernelFunc:Hle};var yV="return (a - b) * (a - b);",Kle=nt({opSnippet:yV,packedOpSnippet:yV}),bV={kernelName:Ro,backendName:"webgl",kernelFunc:Kle};function qle({inputs:r,attrs:e,backend:t}){let{x:o}=r,n=dr+`
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `,s=new Qr(o.shape,n);return t.runWebGLProgram(s,[o],o.dtype)}var CV={kernelName:Ai,backendName:"webgl",kernelFunc:qle};var r0=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=ze(o.length),i=ze(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${e});
      ${s} strides = ${s}(${t});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function Xle(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:d,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=rt.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(h)I=re({inputs:{x:n},backend:t,attrs:{shape:d}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let $=rt.computeOutShape(b,C,S),R=Yi({inputs:{x:n},backend:t,attrs:{begin:b,size:$}});I=re({inputs:{x:R},backend:t,attrs:{shape:d}}),t.disposeIntermediateTensorInfo(R)}else if(t.shouldExecuteOnCPU([n])){let R=t.readSync(n.dataId),F=te(n.shape,n.dtype,R),_=z3(f,F,S,b);I=t.makeTensorInfo(d,n.dtype,_.values)}else{let R=new r0(b,S,f);I=t.runWebGLProgram(R,[n],n.dtype)}let N=re({inputs:{x:I},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(I),N}var wV={kernelName:ka,backendName:"webgl",kernelFunc:Xle};function jle(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=e,m=t.readSync(c.dataId),f=t.readSync(p.dataId),[d,h]=B3(m,f,n,s,i,a,l,u);return[t.makeTensorInfo([d.length],"string",d),t.makeTensorInfo(p.shape,"int32",h)]}var SV={kernelName:Na,backendName:"webgl",kernelFunc:jle};function Yle(r){let{inputs:e,backend:t,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=t.readSync(s.dataId),l=t.readSync(i.dataId)[0],[u,c,p]=M3(a,l,n),m=c.length;return[t.makeTensorInfo([m,2],"int32",u),t.makeTensorInfo([m],"string",c),t.makeTensorInfo([2],"int32",new Int32Array(p))]}var IV={kernelName:Su,backendName:"webgl",kernelFunc:Yle};function Qle(r){let{inputs:e,backend:t,attrs:o}=r,{numBuckets:n}=o,{input:s}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=t.readSync(s.dataId),a=V3(i,n);return t.makeTensorInfo(s.shape,"int32",a)}var vV={kernelName:Iu,backendName:"webgl",kernelFunc:Qle};var Zle="return tan(x);",Jle=ye({opSnippet:Zle}),TV={kernelName:Ri,backendName:"webgl",kernelFunc:Jle};var eue=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,tue=ye({opSnippet:eue}),kV={kernelName:On,backendName:"webgl",kernelFunc:tue};var o0=class{constructor(e,t){this.variableNames=["A"];let o=new Array(e.length);for(let i=0;i<o.length;i++)o[i]=e[i]*t[i];this.outputShape=o,this.rank=o.length;let n=ze(this.rank),s=rue(e);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function rue(r){let e=r.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(e===1)return`imod(resRC, ${r[0]})`;let t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${t[n]}, ${r[n]})`);return o.join()}function Vk(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=t.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=te(n.shape,n.dtype,u),p=U3(c,s);return t.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new o0(n.shape,s);return t.runWebGLProgram(i,[n],n.dtype)}var NV={kernelName:Ko,backendName:"webgl",kernelFunc:Vk};var n0=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},s0=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function wp(r,e){e!==null&&r.disposeIntermediateTensorInfo(e)}function $V(r){let e=1;for(;e<r;)e*=2;return e}function oue(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:i}=o,a=D().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=D().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(t.shouldExecuteOnCPU([n])||c<a||s>l){let _=t.readSync(n.dataId),[B,V]=W3(_,u,n.dtype,s,i);return[t.makeTensorInfo(B.shape,B.dtype,B.values),t.makeTensorInfo(V.shape,V.dtype,V.values)]}if(s===0)return u[u.length-1]=0,[t.makeTensorInfo(u,n.dtype,[]),t.makeTensorInfo(u,"int32",[])];if(c===1)return[n,Fl({attrs:{shape:u,dtype:"int32",value:0},backend:t})];let p=t.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?t.unpackTensor(n):n,h=y.sizeFromShape(u)/c,g=re({inputs:{x:f},attrs:{shape:[h,c]},backend:t});m&&wp(t,f);let x=$V(s),b=$V(c),C=null,S=()=>C===null?[g,g]:[g,C],I=(_,B,V)=>{let G=S(),W=new n0(V),K=[[c],[C===null?1:0],[Number.NEGATIVE_INFINITY],[_],[B]],X=C;C=t.runWebGLProgram(W,G,"int32",K),wp(t,X)};for(let _=1;_<x;_*=2){let B=_*2;for(let V=_;V>=1;V/=2)I(B,V,[h,b])}for(let _=b;_>x;_/=2){let B=S(),V=new s0([h,_/2]),W=[[c],[C===null?1:0],[x]],U=C;C=t.runWebGLProgram(V,B,"int32",W),wp(t,U);let K=x/2,X=K*2;for(let H=K;H>=1;H/=2)I(X,H,C.shape)}let N=C;C=Yi({inputs:{x:C},backend:t,attrs:{begin:0,size:[h,s]}}),wp(t,N);let $=_k({inputs:{x:g,indices:C},backend:t,attrs:{axis:1,batchDims:1}});wp(t,g);let R=u.slice(0,-1);R.push(s),N=C,C=re({inputs:{x:C},attrs:{shape:R},backend:t}),wp(t,N);let F=$;return $=re({inputs:{x:$},attrs:{shape:R},backend:t}),wp(t,F),[$,C]}var EV={kernelName:$a,backendName:"webgl",kernelFunc:oue};var i0=class{constructor(e,t,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function nue(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,transforms:s}=e,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[d,h]=u??[p,m],g=[c,d,h,f],x=new i0(p,m,i,a,l,g);return t.runWebGLProgram(x,[n,s],"float32")}var RV={kernelName:Ea,backendName:"webgl",kernelFunc:nue};function sue(r){let{inputs:e,attrs:t,backend:o}=r,{axis:n}=t,{x:s}=e;rl(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=H3(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var AV={kernelName:vu,backendName:"webgl",kernelFunc:sue};function iue(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let h=0;h<a;h++)h!==s&&(u[c++]=i.shape[h]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let d=new Array(l);for(let h=0;h<d.length;h++){m[s]=h;let g=Yi({inputs:{x:i},backend:t,attrs:{begin:m,size:f}}),x=re({inputs:{x:g},backend:t,attrs:{shape:u}});d[h]=x,p.push(g)}return p.forEach(h=>t.disposeIntermediateTensorInfo(h)),d}var DV={kernelName:Es,backendName:"webgl",kernelFunc:iue};var a0=class{constructor(e,t){this.variableNames=["x","segmentIds"];let o=e.windowSize,n=e.batchSize,s=e.inSize,i=e.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let d="";s%o>0&&(d=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${d}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function aue(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,segmentIds:s}=e,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=w.getAxesPermutation([u],a),p=n;c!=null&&(p=Et({inputs:{x:n},backend:t,attrs:{perm:c}}),l.push(p),u=w.getInnerMostAxes(1,a)[0]);let m=w.segment_util.computeOutShape(p.shape,u,i),f=y.sizeFromShape([p.shape[u]]),d=re({inputs:{x:p},backend:t,attrs:{shape:[-1,f]}});l.push(d);let h=Do(n.dtype),g=(S,I,N,$,R)=>{let F=S.shape[0],_=S.shape[1],B=w.segment_util.segOpComputeOptimalWindowSize(_,R),V={windowSize:B,inSize:_,batchSize:F,numSegments:R},G=new a0(V,I),W=t.compileAndRun(G,[S,N],$);if(l.push(W),W.shape[1]===R)return W;let U=Mk({backend:t,attrs:{start:0,stop:R,step:1,dtype:"float32"}}),K=Vk({inputs:{x:U},backend:t,attrs:{reps:[_/B]}});return l.push(U),l.push(K),g(W,I,K,$,R)},x=g(d,"unsortedSegmentSum",s,h,i),b=re({inputs:{x},backend:t,attrs:{shape:m}}),C=b;if(c!=null){l.push(b);let S=w.getUndoAxesPermutation(c);C=Et({inputs:{x:C},backend:t,attrs:{perm:S}})}return l.forEach(S=>t.disposeIntermediateTensorInfo(S)),C}var FV={kernelName:Ra,backendName:"webgl",kernelFunc:aue};var lue=[Cz,Sz,Iz,vz,kz,Nz,$z,Ez,Dz,Fz,_z,Oz,Pz,Lz,zz,Bz,Mz,Vz,Gz,Uz,Wz,Kz,qz,Xz,Zz,eB,tB,lz,oB,sB,iB,aB,lB,uB,cB,pB,mB,fB,dB,xB,yB,bB,CB,wB,SB,IB,vB,TB,kB,NB,$B,EB,RB,AB,DB,_B,OB,PB,LB,BB,MB,VB,GB,UB,WB,HB,KB,qB,az,XB,nB,jB,YB,QB,uz,ZB,JB,eM,tM,rM,oM,nM,sM,iM,aM,uM,cM,pM,mM,fM,dM,gM,yM,bM,CM,wM,SM,NM,dz,$M,EM,RM,AM,jz,DM,OM,PM,LM,zM,cz,BM,MM,VM,Yz,IM,GM,UM,WM,gz,HM,KM,qM,XM,jM,YM,QM,ZM,JM,eV,tV,rV,oV,nV,sV,iV,Hz,kM,aV,lV,uV,cV,pV,mV,fV,dV,gV,xV,bV,CV,wV,SV,IV,vV,TM,yz,TV,kV,NV,EV,RV,bz,AV,DV,FV,FM];for(let r of lue)Tu(r);var Sp={},l0={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function _V(r,e){Sp[r]=e}function nn(r,e){if(!(r in Sp)||e!=null){let o=pue(r,e);if(o!==null)Sp[r]=o;else return console.log("Could not get context for WebGL version",r),null}let t=Sp[r];return t==null||t.isContextLost()?(delete Sp[r],nn(r)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),Sp[r])}function cue(r){if(typeof OffscreenCanvas<"u"&&r===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function pue(r,e){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let t=e??cue(r);return t.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete Sp[r]},!1),D().getBool("SOFTWARE_WEBGL_ENABLED")&&(l0.failIfMajorPerformanceCaveat=!1),r===1?t.getContext("webgl",l0)||t.getContext("experimental-webgl",l0):t.getContext("webgl2",l0)}var lc;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(lc||(lc={}));var Ur;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(Ur||(Ur={}));var Dr;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(Dr||(Dr={}));function Ip(r,e){return[e,r]}function OV(r,e){return r*e}function Ng(r){let e=y.sizeFromShape(r),t=Math.ceil(e/4);return y.sizeToSquarishShape(t)}function ol(r,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(r/2))]}function PV(r,e){let[t,o]=ol(r,e);return t*o*4}function $g(r,e){let t=r,o,n,s,i,a,l,u,c,p,m;return D().getNumber("WEBGL_VERSION")===2?(o=t.R32F,n=t.R16F,s=t.RGBA16F,i=t.RGBA32F,a=t.RED,u=4,c=1,p=t.HALF_FLOAT,m=t.FLOAT,l=t.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=t.RGBA,a=r.RGBA,u=4,c=4,p=e!=null?e.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function we(r,e){let t=e();return D().getBool("DEBUG")&&mue(r),t}function mue(r){let e=r.getError();if(e!==r.NO_ERROR)throw new Error("WebGL Error: "+hue(r,e))}var fue=596e-10,due=65504;function LV(r){return!!(D().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||fue<Math.abs(r)&&Math.abs(r)<due)}function hue(r,e){switch(e){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}function Eg(r,e){return _l(r,()=>r.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function zV(r,e){let t=_l(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(we(r,()=>r.shaderSource(t,e)),we(r,()=>r.compileShader(t)),r.getShaderParameter(t,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(t)),new Error("Failed to compile vertex shader.");return t}function BV(r,e){let t=_l(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(we(r,()=>r.shaderSource(t,e)),we(r,()=>r.compileShader(t)),D().get("ENGINE_COMPILE_ONLY"))return t;if(r.getShaderParameter(t,r.COMPILE_STATUS)===!1)throw Kk(e,r.getShaderInfoLog(t)),new Error("Failed to compile fragment shader.");return t}var gue=/ERROR: [0-9]+:([0-9]+):/g;function Kk(r,e){let t=gue.exec(e);if(t==null){console.log(`Couldn't parse line number in error: ${e}`),console.log(r);return}let o=+t[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>y.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(e.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function MV(r){return _l(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function VV(r,e){if(we(r,()=>r.linkProgram(e)),!D().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(e,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function c0(r,e){if(we(r,()=>r.validateProgram(e)),r.getProgramParameter(e,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function GV(r,e){let t=_l(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return we(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),we(r,()=>r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW)),t}function UV(r,e){let t=_l(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return we(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t)),we(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,e,r.STATIC_DRAW)),t}function WV(r){return _l(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function HV(r,e){let t=D().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||e<=0){let o=`[${r}x${e}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>t||e>t){let o=`[${r}x${e}]`,n=`[${t}x${t}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function KV(r){return _l(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function qk(r,e,t,o,n,s,i){let a=r.getAttribLocation(e,t);return a===-1?!1:(we(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),we(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),we(r,()=>r.enableVertexAttribArray(a)),!0)}function xue(r,e,t){bue(r,t),we(r,()=>r.activeTexture(r.TEXTURE0+t)),we(r,()=>r.bindTexture(r.TEXTURE_2D,e))}function qV(r,e,t){return _l(r,()=>r.getUniformLocation(e,t),'uniform "'+t+'" not present in program.')}function XV(r,e,t){return r.getUniformLocation(e,t)}function jV(r,e,t,o){we(r,()=>xue(r,e,o)),we(r,()=>r.uniform1i(t,o))}function p0(r,e,t){we(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),we(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0))}function Xk(r,e){we(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),we(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function Rg(r){let e=r.checkFramebufferStatus(r.FRAMEBUFFER);if(e!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+yue(r,e))}function yue(r,e){switch(e){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}function _l(r,e,t){let o=we(r,()=>e());if(o==null)throw new Error(t);return o}function bue(r,e){let t=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=e+r.TEXTURE0;if(o<r.TEXTURE0||o>t){let n=`[gl.TEXTURE0, gl.TEXTURE${t}]`;throw new Error(`textureUnit must be in ${n}.`)}}function uc(r,e=2){return y.sizeFromShape(r.slice(0,r.length-e))}function cc(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function m0(r){let e=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(e=[uc(r),...cc(r)]),e}function YV(r,e=!1){let t=D().getNumber("WEBGL_MAX_TEXTURE_SIZE");e&&(t=t*2,r=r.map((n,s)=>s>=r.length-2?y.nearestLargerEven(r[s]):r[s]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let o=y.sizeFromShape(r);if(r.length<=1&&o<=t)return[1,o];if(r.length===2&&r[0]<=t&&r[1]<=t)return r;if(r.length===3&&r[0]*r[1]<=t&&r[2]<=t)return[r[0]*r[1],r[2]];if(r.length===3&&r[0]<=t&&r[1]*r[2]<=t)return[r[0],r[1]*r[2]];if(r.length===4&&r[0]*r[1]*r[2]<=t&&r[3]<=t)return[r[0]*r[1]*r[2],r[3]];if(r.length===4&&r[0]<=t&&r[1]*r[2]*r[3]<=t)return[r[0],r[1]*r[2]*r[3]];if(e){let n=uc(r),s=2,i=2;return r.length&&([s,i]=cc(r)),o=n*(s/2)*(i/2),y.sizeToSquarishShape(o).map(a=>a*2)}return y.sizeToSquarishShape(o)}function u0(r){return r%2===0}function vp(r,e){if(r=r.slice(-2),e=e.slice(-2),y.arraysEqual(r,e)||!r.length||!e.length||r[0]===0||r[1]===0||e[0]===0||e[1]===0)return!0;if(r.length!==e.length){let t=r.slice(-1)[0],o=e.slice(-1)[0];if(t===o||u0(t)&&u0(o)&&(r[0]===1||e[0]===1))return!0}return r[1]===e[1]&&u0(r[0])&&u0(e[0])}var Uk,Wk;function QV(r){if(Uk==null){let e=nn(r);Uk=e.getParameter(e.MAX_TEXTURE_SIZE)}return Uk}function ZV(r){if(Wk==null){let e=nn(r);Wk=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Wk)}function JV(r){if(r===0)return 0;let e,t=nn(r);return Kn(t,"EXT_disjoint_timer_query_webgl2")&&r===2?e=2:Kn(t,"EXT_disjoint_timer_query")?e=1:e=0,e}function Kn(r,e){return r.getExtension(e)!=null}function jk(r){try{if(nn(r)!=null)return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function eG(r){if(r===0)return!1;let e=nn(r);if(r===1){if(!Kn(e,"OES_texture_float"))return!1}else if(!Kn(e,"EXT_color_buffer_float"))return!1;return Hk(e)}function tG(r){if(r===0)return!1;let e=nn(r);if(r===1){if(!Kn(e,"OES_texture_float")||!Kn(e,"WEBGL_color_buffer_float"))return!1}else{if(Kn(e,"EXT_color_buffer_float"))return Hk(e);let o="EXT_color_buffer_half_float";if(Kn(e,o)){let n=e.getExtension(o);return Cue(e,n)}return!1}return Hk(e)}function Hk(r){let e=$g(r),t=r.createTexture();r.bindTexture(r.TEXTURE_2D,t);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatFloat,o,n,0,e.textureFormatFloat,e.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(t),r.deleteFramebuffer(s),i}function Cue(r,e){let t=$g(r,e),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatHalfFloat,n,s,0,t.textureFormatFloat,t.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function rG(r){return r!==2?!1:nn(r).fenceSync!=null}function nl(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the WebGL backend.`)})}var Re=D();Re.registerFlag("HAS_WEBGL",()=>Re.getNumber("WEBGL_VERSION")>0);Re.registerFlag("WEBGL_VERSION",()=>jk(2)?2:jk(1)?1:0);Re.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);Re.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>Re.get("WEBGL_VERSION")===2);Re.registerFlag("WEBGL_CPU_FORWARD",()=>!0);Re.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);Re.registerFlag("WEBGL_PACK",()=>Re.getBool("HAS_WEBGL"));Re.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_CLIP",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_PACK_REDUCE",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_LAZILY_UNPACK",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_CONV_IM2COL",()=>Re.getBool("WEBGL_PACK"));Re.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>QV(Re.getNumber("WEBGL_VERSION")));Re.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>ZV(Re.getNumber("WEBGL_VERSION")));Re.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=Re.getNumber("WEBGL_VERSION");return r===0?0:JV(r)});Re.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Re.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Pn.isMobile());Re.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>eG(Re.getNumber("WEBGL_VERSION")));Re.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>Re.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:Re.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));Re.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>tG(Re.getNumber("WEBGL_VERSION")));Re.registerFlag("WEBGL_FENCE_API_ENABLED",()=>rG(Re.getNumber("WEBGL_VERSION")));Re.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Re.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);Re.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});Re.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Pn.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});Re.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);Re.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);Re.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);Re.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);Re.registerFlag("WEBGL_EXP_CONV",()=>!1);Re.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Re.getBool("IS_TEST"));function zt(){let r,e,t,o,n,s,i,a,l,u;return D().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",e="in",t="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `,l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",e="attribute",t="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:e,varyingVs:t,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function Qi(r,e,t="index"){let o=y.computeStrides(e);return o.map((n,s)=>{let i=`int ${r[s]} = ${t} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${t} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function Tp(r,e,t="index"){let o=y.computeStrides(e);return o.map((n,s)=>{let i=`int ${r[s]} = ${t} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${t} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function wue(r,e){let t=r.length,o=r.map(s=>`${e}[${s}]`),n=new Array(t-1);n[t-2]=o[t-1];for(let s=t-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function oG(r,e,t="index"){let o=r.map((s,i)=>i),n=wue(o,e);return n.map((s,i)=>{let a=`int ${r[i]} = ${t} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${t} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function Pf(r){let e=y.computeStrides(r).map(t=>t.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`}function Lf(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var d0=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:nG}=w;function sG(r,e,t){let o=[];if(r.forEach(f=>{let d=y.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${d>1?`[${d}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),t.enableShapeUniforms){let{uniformShape:h}=h0(t.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(h.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),t.enableShapeUniforms){switch(e.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}t.customUniforms&&t.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>Sue(f,e,t.packedInputs,t.enableShapeUniforms)).join(`
`),i=e.texShape,a=zt(),l=Tue(a),u,c,p=$ue(a);return e.isPacked?(u=Iue(e.logicalShape,i,t.enableShapeUniforms),c=Nue(a)):(u=vue(e.logicalShape,i,t.enableShapeUniforms),c=kue(a)),t.packedInputs&&(p+=Due),[p,l,c,n,u,s,t.userCode].join(`
`)}function Bf(r,e=!1){let t=r.shapeInfo.logicalShape;switch(t.length){case 0:return Wue(r,e);case 1:return Kue(r,e);case 2:return Xue(r,e);case 3:return Yue(r,e);case 4:return Zue(r,e);case 5:return Jue(r);case 6:return ece(r);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function iG(r,e){switch(r.shapeInfo.logicalShape.length){case 0:return Uue(r);case 1:return Hue(r,e);case 2:return que(r,e);case 3:return jue(r,e);default:return Que(r,e)}}function Sue(r,e,t=!1,o){let n="";t?n+=iG(r,o):n+=Bf(r,o);let s=r.shapeInfo.logicalShape,i=e.logicalShape;return s.length<=i.length&&(t?n+=tce(r,e):n+=rce(r,e)),n}function Iue(r,e,t){switch(r.length){case 0:return aG();case 1:return Fue(r,e,t);case 2:return Vue(r,e,t);case 3:return Oue(r,e,t);default:return Lue(r,e,t)}}function vue(r,e,t){switch(r.length){case 0:return aG();case 1:return _ue(r,e,t);case 2:return Gue(r,e,t);case 3:return Pue(r,e,t);case 4:return zue(r,e,t);case 5:return Bue(r,e);case 6:return Mue(r,e);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function Tue(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function kue(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function Nue(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function $ue(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${Eue}
    ${Rue}
    ${Aue}
  `}var Eue=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Rue=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Aue=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Due=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function aG(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function Fue(r,e,t){let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return o[0]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?t?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function _ue(r,e,t){return e[0]===1?t?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    `:e[1]===1?t?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    `:t?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `}function Oue(r,e,t){if(t)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function Pue(r,e,t){if(t)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Tp(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=Qi(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function Lue(r,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function zue(r,e,t){if(t)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Tp(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=Qi(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function Bue(r,e){let t=Qi(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function Mue(r,e){let t=Qi(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function Vue(r,e,t){let o=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(y.arraysEqual(r,e))return t?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return t?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function Gue(r,e,t){return y.arraysEqual(r,e)?t?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    `:r[1]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?t?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:t?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function kp(r){return`offset${r}`}function Uue(r){let e=r.name,t="get"+e.charAt(0).toUpperCase()+e.slice(1),o=zt();return`
    vec4 ${t}() {
      return ${o.texture2D}(${e}, halfCR);
    }
  `}function Wue(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${t};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${t}, halfCR);
      }
    `;let i=kp(t);if(e)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${i});
      return sampleTexture(${t}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${t}, uv);
    }
  `}function Hue(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=r.shapeInfo.texShape,s=zt();if(e)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${t}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${t}, uv);
    }
  `}function Kue(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${Mf(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;let a=kp(t);return i===1?e?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${t}, uv);
      }
    `:s===1?e?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    `:e?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${a});
      return sampleTexture(${t}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${t}, uv);
    }
  `}function que(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=zt();if(s!=null&&y.arraysEqual(t,s))return e?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(e)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(t[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function Xue(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(t,s)){if(e)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=y.squeezeShape(t),l=i;if(l.length<t.length){let m=Vf(r,l),f=["row","col"];return`
      ${Bf(m,e)}
      float ${n}(int row, int col) {
        return ${n}(${Gf(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${Mf(r)}
      }
    `;let u=s[0],c=s[1],p=kp(o);return c===1?e?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?e?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:e?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function jue(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(t[0]===1){let m=t.slice(1),f=[1,2],d=Vf(r,m),h=["b","row","col"];return`
        ${iG(d,e)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${Gf(h,f)});
        }
      `}let a=zt();if(e)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(t[2]/2),p=c*Math.ceil(t[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function Yue(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=t[1]*t[2],i=t[2],{newShape:a,keptDims:l}=y.squeezeShape(t),u=a;if(u.length<t.length){let h=Vf(r,u),g=["row","col","depth"];return`
        ${Bf(h,e)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${Gf(g,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${Mf(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return e?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return e?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let d=kp(o);return e?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * ${s} + col * ${i} + depth + ${d};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${d};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function Que(r,e){let t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=zt();if(e)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${t}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",d=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let h=2;h<i-1;h++)f=`int b${h}, `+f,m*=s[i-h-1],d=`b${h} * ${m} + `+d;return`
    vec4 ${o}(${f}) {
      int index = ${d};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${t}, uv);
    }
  `}function Zue(r,e){let t=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=t[3],i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(t);if(l.length<t.length){let b=Vf(r,l),C=["row","col","depth","depth2"];return`
      ${Bf(b,e)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${Gf(C,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${Mf(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],d=`int stride2 = ${o}Shape[3];`,h=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return e?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${d}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return e?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1]*t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=kp(o);return e?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${d}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function Jue(r){let e=r.shapeInfo.logicalShape,t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),n=e[4],s=e[3]*n,i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(e);if(l.length<e.length){let h=Vf(r,l),g=["row","col","depth","depth2","depth3"];return`
      ${Bf(h)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${Gf(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${Mf(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]},
               ${e[2]*e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${t}, uv);
      }
    `;let d=kp(t);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${d};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${t}, uv);
    }
  `}function ece(r){let e=r.shapeInfo.logicalShape,t=r.name,o="get"+t.charAt(0).toUpperCase()+t.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(e);if(n.length<e.length){let g=Vf(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Bf(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${Gf(x,s)});
      }
    `}let i=e[5],a=e[4]*i,l=e[3]*a,u=e[2]*l,c=e[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Mf(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],d=m[1];if(d===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${f}.0);
        return sampleTexture(${t}, uv);
      }
    `;if(d===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1]*e[2]*e[3]*e[4]},
               ${e[2]*e[3]*e[4]},
               ${e[3]*e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${f}.0);
        return sampleTexture(${t}, uv);
      }
    `;let h=kp(t);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${h};
      vec2 uv = uvFromFlat(${f}, ${d}, index);
      return sampleTexture(${t}, uv);
    }
  `}function Mf(r){let e=r.name,t=y.sizeFromShape(r.shapeInfo.logicalShape);return t<2?`return ${e};`:`
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `}function tce(r,e){let t=r.name,o=t.charAt(0).toUpperCase()+t.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=e.logicalShape.length,a=nG(r.shapeInfo.logicalShape,e.logicalShape),l=Be(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,C)=>`coords.${p[C+u]}`).join(", ");let f="return outputValue;",h=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(e.logicalShape)===1;if(s===1&&!h&&!x)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(h&&!x)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,C=s-1;a.indexOf(b)>-1&&a.indexOf(C)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(C)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function rce(r,e){let t=r.name,o=t.charAt(0).toUpperCase()+t.slice(1),n="get"+o+"AtOutCoords",s=e.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&y.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${t}, resultUV);
      }
    `;let u=Be(l),c=nG(r.shapeInfo.logicalShape,e.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(h=>`coords.${f[h+p]} = 0;`).join(`
`);let d="";return l<2&&a>0?d="coords":d=r.shapeInfo.logicalShape.map((h,g)=>`coords.${f[g+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${d});
    }
  `}function Be(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function h0(r,e,t){let{newShape:o,keptDims:n}=y.squeezeShape(e),s=e.length,i=r&&s===3&&e[0]===1,a=i?e.slice(1):o,l=!r&&s>1&&!y.arraysEqual(e,t)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:e,keptDims:n}}function Vf(r,e){let t=JSON.parse(JSON.stringify(r));return t.shapeInfo.logicalShape=e,t}function Gf(r,e){return e.map(t=>r[t]).join(", ")}function uG(r,e,t,o){let n=t.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:e.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=sG(n,i,e),l=BV(r.gl,a),u=r.createProgram(l);return D().get("ENGINE_COMPILE_ONLY")?{program:e,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:e,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},Yk(r,e,u))}function Yk(r,e,t){let o={},n={},s={},i=[],a,l,u,c=null,p=null;p=r.getUniformLocation(t,"NAN",!1),D().getNumber("WEBGL_VERSION")===1&&(c=r.getUniformLocation(t,"INFINITY",!1));let m=!1;for(let f=0;f<e.variableNames.length;f++){let d=e.variableNames[f];o[d]=r.getUniformLocation(t,d,m),o[`offset${d}`]=r.getUniformLocation(t,`offset${d}`,m),e.enableShapeUniforms&&(n[`${d}Shape`]=r.getUniformLocation(t,`${d}Shape`,m),s[`${d}TexShape`]=r.getUniformLocation(t,`${d}TexShape`,m))}return e.enableShapeUniforms&&(a=r.getUniformLocation(t,"outShape",m),u=r.getUniformLocation(t,"outShapeStrides",m),l=r.getUniformLocation(t,"outTexShape",m)),e.customUniforms&&e.customUniforms.forEach((f,d)=>{i[d]=r.getUniformLocation(t,f.name,m)}),{uniformLocations:o,customUniformLocations:i,infLoc:c,nanLoc:p,inShapesLocations:n,inTexShapesLocations:s,outShapeLocation:a,outShapeStridesLocation:u,outTexShapeLocation:l}}function lG(r,e){if(r.length!==e.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);r.forEach((t,o)=>{let n=t.logicalShape,s=e[o],i=s.shape;if(!y.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(t.isUniform&&s.isUniform)return;let a=t.texShape,l=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function cG(r,e,t,o,n){e.program.enableShapeUniforms||(lG(e.inShapeInfos,t),lG([e.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(e.webGLProgram),D().getNumber("WEBGL_VERSION")===1&&e.infLoc!==null&&r.gl.uniform1f(e.infLoc,1/0),e.nanLoc!==null&&r.gl.uniform1f(e.nanLoc,NaN),t.forEach((l,u)=>{let c=e.program.variableNames[u],p=e.uniformLocations[c],m=e.uniformLocations[`offset${c}`],f=e.inShapesLocations[`${c}Shape`],d=e.inTexShapesLocations[`${c}TexShape`];if(f){let{uniformShape:h}=h0(e.program.packedInputs,l.shape,l.texData.texShape);switch(h.length){case 1:r.gl.uniform1iv(f,new Int32Array(h));break;case 2:r.gl.uniform2iv(f,new Int32Array(h));break;case 3:r.gl.uniform3iv(f,new Int32Array(h));break;case 4:r.gl.uniform4iv(f,new Int32Array(h));break;default:break}}if(d&&r.gl.uniform2i(d,l.texData.texShape[0],l.texData.texShape[1]),p!=null){if(l.isUniform){if(y.sizeFromShape(l.shape)<2)r.gl.uniform1f(p,l.uniformValues[0]);else{let h=l.uniformValues;h instanceof Float32Array||(h=new Float32Array(h)),r.gl.uniform1fv(p,h)}return}l.texData.slice!=null&&m!=null&&r.gl.uniform1i(m,l.texData.slice.flatOffset),r.setInputMatrixTexture(l.texData.texture.texture,p,u)}});let a=e.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(e.outShapeStridesLocation){let l=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(l));break;default:break}}e.outTexShapeLocation&&r.gl.uniform2i(e.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),e.program.customUniforms&&n&&e.program.customUniforms.forEach((l,u)=>{let c=e.customUniformLocations[u],p=n[u];if(l.type==="float")r.gl.uniform1fv(c,p);else if(l.type==="vec2")r.gl.uniform2fv(c,p);else if(l.type==="vec3")r.gl.uniform3fv(c,p);else if(l.type==="vec4")r.gl.uniform4fv(c,p);else if(l.type==="int")r.gl.uniform1iv(c,p);else if(l.type==="ivec2")r.gl.uniform2iv(c,p);else if(l.type==="ivec3")r.gl.uniform3iv(c,p);else if(l.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${l.type} is not supported yet.`)}),r.executeProgram()}function pG(r,e,t){let o="";e.concat(t).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=h0(r.packedInputs,i.shape,l),m="",f="",d="";if(c.length===1&&r.packedInputs){let I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${I[0]>1}_${I[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let I=y.computeStrides(c);d=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}let h=i.shape.length,g=c.length===2&&y.arraysEqual(i.shape,l),x=y.sizeFromShape(i.shape)===1,b=w.getBroadcastDims(i.shape,t.shape),C=!r.packedInputs&&h===t.shape.length&&y.arraysEqual(l,t.texData.texShape),S=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${h}_${C}_${u?p:""}_${c.length}_${x}_${b}_${g}_${m}_${f}_${d}_${S}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${D().getNumber("WEBGL_VERSION")}`,s}function gt(r){return D().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var g0=class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=lc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=zt();this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Tp(["r","c","d"],e):Qi(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}};var x0=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=lc.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=zt();this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Tp(["r","c","d"],e):Qi(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}};var y0=class{constructor(e){this.variableNames=["A"],this.outTexUsage=Ur.DOWNLOAD;let t=zt();this.outputShape=e,this.userCode=`
      ${d0}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}};var b0=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ur.DOWNLOAD;let t=zt();this.outputShape=e,this.userCode=`
      ${d0}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}};var C0=class{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=zt();this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length);let n="result";t&&(n="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?Lf():Pf(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${o.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${o.output} = vec4(${n}, 0., 0., 0.);
      }
    `}};var w0=class{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=zt();this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length);let n="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Lf():Pf(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function mG(r){let e=zt(),t=`${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return zV(r,t)}function fG(r){let e=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return GV(r,e)}function dG(r){let e=new Uint16Array([0,1,2,2,1,3]);return UV(r,e)}function Ag(r,e,t,o,n,s){HV(e,t);let i=WV(r),a=r.TEXTURE_2D;return we(r,()=>r.bindTexture(a,i)),we(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),we(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),we(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),we(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),D().getNumber("WEBGL_VERSION")===1?we(r,()=>r.texImage2D(a,0,o,e,t,0,n,s,null)):we(r,()=>r.texStorage2D(a,1,o,e,t)),we(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[t,e]}}function Qk(r){return r.internalFormatFloat}function hG(r,e,t,o){let[n,s]=Ip(e,t);return Ag(r,n,s,Qk(o),o.textureFormatFloat,r.FLOAT)}function Zk(r){return r.internalFormatHalfFloat}function gG(r,e,t,o){let[n,s]=Ip(e,t);return Ag(r,n,s,Zk(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function Jk(r){return r.downloadTextureFormat}function xG(r,e,t,o){let[n,s]=Ip(e,t);return Ag(r,n,s,Jk(o),r.RGBA,r.UNSIGNED_BYTE)}function eN(r){return r.internalFormatPackedFloat}function yG(r,e,t,o){let[n,s]=ol(e,t);return Ag(r,n,s,eN(o),r.RGBA,r.FLOAT)}function tN(r){return r.internalFormatPackedHalfFloat}function bG(r,e,t,o){let[n,s]=ol(e,t);return Ag(r,n,s,tN(o),r.RGBA,o.textureTypeHalfFloat)}function CG(r,e,t){return we(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),qk(r,e,"clipSpacePos",t,3,20,0)&&qk(r,e,"uv",t,2,20,12)}function wG(r,e,t,o,n,s){we(r,()=>r.bindTexture(r.TEXTURE_2D,e));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(t*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(t*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),D().getNumber("WEBGL_VERSION")===2?we(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t,o,r.RGBA,a,i)):we(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,t,o,0,r.RGBA,a,i)),we(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function SG(r,e,t){we(r,()=>r.bindTexture(r.TEXTURE_2D,e)),t.data instanceof Uint8Array?D().getNumber("WEBGL_VERSION")===2?we(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.width,t.height,r.RGBA,r.UNSIGNED_BYTE,t.data)):we(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,t.width,t.height,0,r.RGBA,r.UNSIGNED_BYTE,t.data)):D().getNumber("WEBGL_VERSION")===2?we(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,t)):we(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t)),we(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function IG(r,e,t,o){let n=r.createBuffer();we(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*e*t;return we(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),we(r,()=>r.readPixels(0,0,t,e,r.RGBA,r.FLOAT,0)),we(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function vG(r,e,t){let o=r,n=new Float32Array(t);return o.bindBuffer(o.PIXEL_PACK_BUFFER,e),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function TG(r,e,t,o){let[n,s]=Ip(e,t),i=4,a=new Uint8Array(OV(e*t,i));return we(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function kG(r,e,t,o,n,s,i,a){let l=r,u=new Float32Array(PV(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function NG(r,e,t){let o=new Float32Array(e*t*4);return we(r,()=>r.readPixels(0,0,t,e,r.RGBA,r.FLOAT,o)),o}var Uf=class{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let t=D().getNumber("WEBGL_VERSION");e!=null?(this.gl=e,_V(t,e)):this.gl=nn(t);let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),D().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=Eg(this.gl,s),Kn(this.gl,i))this.textureHalfFloatExtension=Eg(this.gl,i);else if(D().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),Kn(this.gl,n))this.colorBufferHalfFloatExtension=Eg(this.gl,n);else if(D().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",Kn(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(Kn(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=fG(this.gl),this.indexBuffer=dG(this.gl),this.framebuffer=KV(this.gl),this.textureConfig=$g(this.gl,this.textureHalfFloatExtension)}get debug(){return D().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;we(e,()=>e.finish()),we(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),we(e,()=>e.deleteFramebuffer(this.framebuffer)),we(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),we(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),we(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),hG(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),gG(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),xG(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),SG(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,o,n){this.throwIfDisposed(),wG(this.gl,e,t,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),bG(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),yG(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Xk(this.gl,this.framebuffer),this.outputTexture=null),we(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,o){return this.downloadMatrixDriver(e,()=>TG(this.gl,t,o,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,o,n,s,i){return kG(this.gl,e,t,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return vG(this.gl,e,t)}createBufferFromTexture(e,t,o){this.bindTextureToFrameBuffer(e);let n=IG(this.gl,t,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,o;if(D().getBool("WEBGL_FENCE_API_ENABLED")){let n=e,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},t=s}else D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(t,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:t,isFencePassed:o}}downloadMatrixFromPackedTexture(e,t,o){return this.downloadMatrixDriver(e,()=>NG(this.gl,t,o))}createProgram(e){this.throwIfDisposed();let t=this.gl;this.vertexShader==null&&(this.vertexShader=mG(t));let o=MV(t);return we(t,()=>t.attachShader(o,this.vertexShader)),we(t,()=>t.attachShader(o,e)),VV(t,o),this.debug&&c0(t,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=CG(t,this.program,this.vertexBuffer)),o}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),e!=null&&we(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,this.program!=null&&this.debug&&c0(this.gl,this.program),we(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,o=!0){return this.throwIfDisposed(),o?qV(this.gl,e,t):XV(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),we(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,o){this.throwIfDisposed(),this.throwIfNoProgram(),jV(this.gl,e,t,o)}setOutputMatrixTexture(e,t,o){this.setOutputMatrixTextureDriver(e,o,t)}setOutputPackedMatrixTexture(e,t,o){this.throwIfDisposed();let[n,s]=ol(t,o);this.setOutputMatrixTextureDriver(e,n,s)}setOutputMatrixWriteRegion(e,t,o,n){this.setOutputMatrixWriteRegionDriver(o,e,n,t)}setOutputPackedMatrixWriteRegion(e,t,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&c0(this.gl,this.program),Rg(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&this.debugValidate(),we(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),we(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=Eg(this.gl,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let t=this.gl,o=this.getQueryTimerExtensionWebGL2();t.endQuery(o.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(t===0)return null;if(t===2){let o=this.gl;return o.getQueryParameter(e,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(e,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(t===0)return!0;if(t===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(e,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(e,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=ice(this.itemsToPoll.map(t=>t.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:o}=this.itemsToPoll[t];o()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),!(this.itemsToPoll.length>1)&&y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),p0(this.gl,e,this.framebuffer),this.debug&&Rg(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(p0(this.gl,this.outputTexture,this.framebuffer),this.debug&&Rg(this.gl)):Xk(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let o=t();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(e,t,o){this.throwIfDisposed();let n=this.gl;p0(n,e,this.framebuffer),this.debug&&Rg(n),this.outputTexture=e,we(n,()=>n.viewport(0,0,t,o)),we(n,()=>n.scissor(0,0,t,o))}setOutputMatrixWriteRegionDriver(e,t,o,n){this.throwIfDisposed(),we(this.gl,()=>this.gl.scissor(e,t,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function ice(r){let e=0;for(;e<r.length&&r[e]();++e);return e-1}var Pg={};lt(Pg,{addImpl:()=>nN,bincountImpl:()=>RG,bincountReduceImpl:()=>AG,castImpl:()=>oN,ceilImpl:()=>sN,concatImpl:()=>DG,equalImpl:()=>iN,expImpl:()=>aN,expm1Impl:()=>lN,floorImpl:()=>uN,gatherNdImpl:()=>FG,gatherV2Impl:()=>_G,greaterEqualImpl:()=>pN,greaterImpl:()=>cN,lessEqualImpl:()=>fN,lessImpl:()=>mN,linSpaceImpl:()=>OG,logImpl:()=>dN,maxImpl:()=>PG,maximumImpl:()=>hN,minimumImpl:()=>gN,multiplyImpl:()=>_g,negImpl:()=>LG,notEqualImpl:()=>xN,prodImpl:()=>BG,raggedTensorToTensorImpl:()=>GG,rangeImpl:()=>UG,rsqrtImpl:()=>yN,scatterImpl:()=>WG,sigmoidImpl:()=>HG,simpleAbsImpl:()=>$G,sliceImpl:()=>KG,sparseFillEmptyRowsImpl:()=>qG,sparseReshapeImpl:()=>XG,sparseSegmentReductionImpl:()=>jG,sqrtImpl:()=>YG,squaredDifferenceImpl:()=>bN,stridedSliceImpl:()=>QG,stringNGramsImpl:()=>ZG,stringSplitImpl:()=>JG,stringToHashBucketFastImpl:()=>eU,subImpl:()=>wN,tileImpl:()=>tU,topKImpl:()=>oU,transposeImpl:()=>zG,uniqueImpl:()=>nU});function Dg(r,e){Array.isArray(r)||(r=[r]),r.forEach(t=>{t!=null&&y.assert(t.dtype!=="complex64",()=>`${e} does not support complex64 tensors in the CPU backend.`)})}function $G(r){let e=new Float32Array(r.length);for(let t=0;t<r.length;++t)e[t]=Math.abs(r[t]);return e}function Ut(r){return(e,t,o,n,s)=>{let i=w.assertAndGetBroadcastShape(e,t),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=e.length,m=t.length,f=y.computeStrides(e),d=y.computeStrides(t),h=w.getBroadcastDims(e,i),g=w.getBroadcastDims(t,i);if(h.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),C=b.slice(-p);h.forEach($=>C[$]=0);let S=y.locToIndex(C,p,f),I=b.slice(-m);g.forEach($=>I[$]=0);let N=y.locToIndex(I,m,d);c[x]=r(o[S],n[N])}return[c,i]}}function Wf(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.data.get(o.dataId).values,i=t.data.get(n.dataId).values,a=t.makeTensorInfo(o.shape,"complex64"),l=t.data.get(a.dataId);return l.complexTensorInfos={real:t.makeTensorInfo(o.shape,"float32",s),imag:t.makeTensorInfo(n.shape,"float32",i)},a}function S0(r,e,t="float32"){if(t==="complex64"){let n=S0(r,e,"float32"),s=S0(r,e,"float32");return Wf({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(e),t);return r.makeTensorInfo(e,t,o)}function rN(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function EG(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.data.get(o.dataId).complexTensorInfos.real,s=t.data.get(n.dataId).values;return t.makeTensorInfo(n.shape,n.dtype,s)}function oN(r,e,t,o){if(o==="int32"){let n=Int32Array.from(r);return[e,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],t),[s,i]=Ut((a,l)=>a!==l?1:0)(e,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${t} to ${o}`)}function Fg(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return rN({inputs:{x:n},backend:t});let c=S0(t,n.shape,n.dtype),p=Fg({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),m=Wf({inputs:{real:p,imag:c},backend:t});return t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=EG({inputs:{input:n},backend:t}),p=Fg({inputs:{x:c},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=rN({inputs:{x:n},backend:t});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=t.data.get(n.dataId).values,[a,l,u]=oN(i,n.shape,n.dtype,s);return t.makeTensorInfo(a,l,u)}function or(r,e,t,o){return t==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Dg([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?w.fromUint8ToStringArray(u):u,m=i.dtype==="string"?w.fromUint8ToStringArray(c):c,f=o||i.dtype,[d,h]=e(i.shape,a.shape,p,m,f);return l.makeTensorInfo(h,f,d)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=Fg({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,d=l.data.get(m.dataId).values,h=Fg({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(h.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,C=l.data.get(x.dataId).values,S=l.data.get(b.dataId).values,[I,N,$]=t(i.shape,a.shape,f,d,C,S),R=l.makeTensorInfo($,"float32",I),F=l.makeTensorInfo($,"float32",N),_=Wf({inputs:{real:R,imag:F},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(h),l.disposeIntermediateTensorInfo(R),l.disposeIntermediateTensorInfo(F),_}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=e(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function Hf(r){return(e,t,o,n,s,i)=>{let a=w.assertAndGetBroadcastShape(e,t),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=w.getBroadcastDims(e,a),d=w.getBroadcastDims(t,a),h=w.mergeRealAndImagArrays(o,n),g=w.mergeRealAndImagArrays(s,i),x=e.length,b=y.computeStrides(e),C=t.length,S=y.computeStrides(t);if(f.length+d.length===0)for(let I=0;I<p.length;I++){let N=I%h.length,$=I%g.length,R=r(h[N*2],h[N*2+1],g[$*2],g[$*2+1]);p[I]=R.real,m[I]=R.imag}else for(let I=0;I<p.length;I++){let N=y.indexToLoc(I,u,c),$=N.slice(-x);f.forEach(V=>$[V]=0);let R=y.locToIndex($,x,b),F=N.slice(-C);d.forEach(V=>F[V]=0);let _=y.locToIndex(F,C,S),B=r(h[R*2],h[R*2+1],g[_*2],g[_*2+1]);p[I]=B.real,m[I]=B.imag}return[p,m,a]}}var nN=Ut((r,e)=>r+e),ace=Hf((r,e,t,o)=>({real:r+t,imag:e+o})),hYt=or(Wr,nN,ace);function RG(r,e,t,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,t);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=e[a]:i[l]+=1)}return i}function AG(r,e,t,o=!1){let n=r.shape[0],s=r.shape[1],i=te([n,t],e.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=t||(o?i.set(1,a,u):e.size>0?i.set(i.get(a,u)+e.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}function po(r){return(e,t,o)=>{let n=y.getTypedArrayFromDType(t,e.length);for(let s=0;s<e.length;++s)n[s]=r(e[s],o);return n}}function I0(r,e,t){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Dg(i,r),i.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=y.sizeFromShape(i.shape),c=t||i.dtype,p=y.getArrayFromDType(c,u);for(let m=0;m<u;++m)p[m]=e(l[m],n);return a.makeTensorInfo(i.shape,c,p)}}function ri(r,e,t){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;if(Dg(i,r),i.dtype==="string"||t==="string")throw new Error("unaryKernelFunc does not support string input/output");let a=s,l=a.data.get(i.dataId).values,u=t||i.dtype,c=e(l,u,n);return a.makeTensorInfo(i.shape,u,c)}}var sN=po(r=>Math.ceil(r)),NYt=ri(xo,sN);function DG(r,e,t,o){let n=y.getArrayFromDType(t,y.sizeFromShape(e));if(o&&t!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=t==="string"?w.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*e[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var iN=Ut((r,e)=>r===e?1:0),_Yt=or(bn,iN,null,"bool");var aN=po(r=>Math.exp(r)),BYt=ri(yo,aN,"float32");var lN=po(r=>Math.expm1(r)),WYt=ri(bo,lN);var uN=po(r=>Math.floor(r)),jYt=ri(Co,uN);function FG(r,e,t,o,n,s,i,a,l){let u=te([o,s],t);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let d=r[c*n+f];m+=d*i[f],p.push(d)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=e.get(...e.indexToLoc(m*s+f))}return u}function _G(r,e,t){let o=te(t,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=e.locToIndex([a,l]);i[2]=e.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var cN=Ut((r,e)=>r>e?1:0),n8t=or(wn,cN,null,"bool");var pN=Ut((r,e)=>r>=e?1:0),u8t=or(wo,pN,null,"bool");var mN=Ut((r,e)=>r<e?1:0),d8t=or(In,mN,null,"bool");var fN=Ut((r,e)=>r<=e?1:0),b8t=or(vn,fN,null,"bool");function OG(r,e,t){let o=(e-r)/(t-1),n=y.makeZerosTypedArray(t,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var dN=po(r=>Math.log(r)),k8t=ri(Io,dN);function PG(r,e,t,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(t));for(let s=0;s<n.length;++s){let i=s*e,a=r[i];for(let l=0;l<e;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var hN=Ut((r,e)=>Math.max(r,e)),F8t=or(vo,hN);var gN=Ut((r,e)=>Math.min(r,e)),z8t=or(To,gN);var _g=Ut((r,e)=>r*e),lce=Hf((r,e,t,o)=>({real:r*t-e*o,imag:r*o+e*t})),U8t=or(ko,_g,lce);function LG(r,e,t){let o=y.createScalarValue(-1,t);return _g([],e,o,r,t)}var xN=Ut((r,e)=>r!==e?1:0),Q8t=or(kn,xN,null,"bool");function zG(r,e,t,o,n){let s=e.length,i=y.sizeFromShape(e),a=y.computeStrides(e),l=y.computeStrides(n),u=y.getTypedArrayFromDType(t,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let d=0;d<m.length;d++)m[d]=p[o[d]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function BG(r,e,t,o){let[n,s]=w.computeOutAndReduceShapes(r,o),i=Ye(e,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=t[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}var oi=w.RowPartitionType,Kf=class{constructor(e,t,o,n,s,i,a,l,u,c){this.shape=e,this.shapeShape=t,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=w.getRowPartitionTypesHelper(c),this.raggedRank=w.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===oi.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===oi.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case oi.VALUE_ROWIDS:return Kf.getMaxWidthValueRowID(t);case oi.ROW_SPLITS:return Kf.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${oi[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(t===0||t===1)return 0;let o=0;for(let n=0;n<t-1;++n){let s=e[n+1]-e[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(e){let t=e.length;if(t===0)return 0;let o=0,n=e[0],s=0;for(let i=1;i<t;++i){let a=e[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(t-o,s)}tensorShapeFromTensor(e,t,o=!0){if(t.length===0){if(e[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return VG(e,o)}calculateOutputSize(e){let t=this.valuesShape,o=this.defaultValueShape;w.validateDefaultValueShape(o,t);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=w.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);i[0]<0&&(i[0]=e);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(e,t,o){let n=Math.min(e,o),s=[],i=0;for(let a=0;a<n;++a,i+=t)s.push(i);for(let a=n;a<e;++a)s.push(-1);return y.assert(s.length===e,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(e,t,o,n){let s=e.length,i=[];for(let a=0;a<s-1;++a){let l=e[a+1]-e[a],u=Math.min(n,l),c=t[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==e[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,o,n){let s=e.length,i=[];if(s===0)return[];let a=0,l=e[0];if(l>=t.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${t.length}`);let u=t[l];i.push(u);for(let c=1;c<s;++c){let p=e[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=t.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${t.length}`);u=t[p]}i.push(u)}if(i.length!==e.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(e,t,o,n){let s=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case oi.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,o,n);case oi.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,o,n);default:throw new Error(`Unsupported partition type: ${oi[i]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case oi.FIRST_DIM_SIZE:return e[0];case oi.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case oi.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${oi[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let t=this.getFirstDimensionSize(),o=this.calculateOutputSize(t),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=VG(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(t,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(e,t,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(e+1);let l=y.sizeFromShape(a),u=t.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let d=this.defaultValueShape;M(()=>{let h=O(c,d);c=Os(h,a).dataSync()})}let p=0,m=0,f=0;for(let d=0;d<=u;++d){let h=d<u?t[d]:-1;if(h===f){++f;continue}if(m<f){let g=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;MG(x,g,b)}if(d>=u){let g=o.length;h=Math.floor(g/l)}if(h>f)if(this.defaultValue.length===1)i.subarray(f*l,h*l).fill(this.defaultValue[0]),f=h;else for(;h>f;){let g=i.slice(f*l);MG(g,c,l),++f}h<0?(p=d+1,m=f):(p=d,m=f,f=m+1)}}};function MG(r,e,t){for(let o=0;o<t;o++)r[o]=e[o]}function VG(r,e){let t=[];for(let o of r){if(o<0){if(!e)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}t.push(o)}return t}function GG(r,e,t,o,n,s,i,a,l,u){return new Kf(r,e,t,o,n,s,i,a,l,u).compute()}function UG(r,e,t,o){let n=r===e,s=r<e&&t<0,i=e<r&&t>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((e-r)/t)),l=y.makeZerosTypedArray(a,o);e<r&&t===1&&(t=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+t;return l}var yN=po(r=>1/Math.sqrt(r)),cQt=ri(No,yN);function WG(r,e,t,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=e.values;if(o===0)return te(t,e.dtype);let f=te(c,e.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let d=0;d<s;d++){let h=[],g=0;for(let x=0;x<i;x++){let b=p[d*i+x];h.push(b),g+=b*a[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${h} does not index into ${t}`);for(let x=0;x<n;x++)u?f.values[g*n+x]+=m[d*n+x]:f.values[g*n+x]=e.rank===0?m[0]:m[d*n+x]}return f}var HG=po(r=>1/(1+Math.exp(-r))),xQt=I0($o,r=>1/(1+Math.exp(-r)));function KG(r,e,t,o,n){let s=rt.isSliceContinous(o,e,t),i=y.sizeFromShape(t),a=y.computeStrides(o);if(s){let p=rt.computeFlatOffset(e,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?w.fromUint8ToStringArray(r):r,u=te(o,n,l),c=te(t,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((d,h)=>d+e[h]);c.set(u.get(...f),...m)}return n==="string"?w.fromStringArrayToUint8(c.values):c.values}function qG(r,e,t,o,n,s,i){let a=e[0],l=s[0],u=new Array(l),c=new Array(a),p=e[1];if(l===0){if(a!==0)throw new Error(w.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let g=y.getArrayFromDType(t,0),x=y.getArrayFromDType(n,0);return[g,[0,p],x,u,c]}let m=!0,f=0,d=new Array(l).fill(0);for(let g=0;g<a;++g){let x=r[g*p];if(x<0)throw new Error(w.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=l)throw new Error(w.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,l));++d[x],m=m&&x>=f,f=x}let h=!0;for(let g=0;g<l;++g){let x=d[g]===0;u[g]=x,h=h&&!x,d[g]=Math.max(d[g],1),g>0&&(d[g]+=d[g-1])}if(h&&m){let g=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[g,[a,p],x,u,c]}else{let g=d[l-1],x=y.getArrayFromDType(t,g*p),b=y.getArrayFromDType(n,g),C=new Array(l).fill(0);for(let S=0;S<a;++S){let I=r[S*p],N=C[I],$=(I===0?0:d[I-1])+N;C[I]++;for(let R=0;R<p;++R)x[$*p+R]=r[S*p+R];b[$]=o[S],c[S]=$}for(let S=0;S<l;++S)if(C[S]===0){let N=S===0?0:d[S-1];x[N*p+0]=S;for(let $=1;$<p;++$)x[N*p+$]=0;b[N]=i}return[x,[g,p],b,u,c]}}function XG(r,e,t,o,n){let s=y.sizeFromShape(o),i=e[0],a=n.length,l=[],u=1,c=-1;for(let g=0;g<a;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(w.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,l.push(1)}else{if(x<0)throw new Error(w.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(w.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(w.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=g}if(y.sizeFromShape(l)!==s)throw new Error(w.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let g=m-2;g>=0;--g)f[g]=f[g+1]*o[g+1]}let d=[];if(a>0){d[a-1]=1;for(let g=a-2;g>=0;--g)d[g]=d[g+1]*l[g+1]}let h=y.getArrayFromDType(t,i*a);for(let g=0;g<i;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*f[b];for(let b=0;b<a;++b)h[g*a+b]=Math.trunc(x/d[b]),x%=d[b]}return[h,[i,a],l]}function jG(r,e,t,o,n,s=!1,i=0){let a=o.length,l=[e[0],r.length/e[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=e.slice();m[0]=p;let f=m.reduce((C,S)=>C*S,1),d=y.getArrayFromDType(t,f);if(a===0)return p>0&&d.fill(i),[d,m];if(p<=0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let h=0,g=1,x=0,b=n[h];for(;;){let C=0;if(g<a){if(C=n[g],b===C){++g;continue}if(b>=C)throw new Error(w.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(w.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&d.fill(i,x*u,b*u);for(let S=h;S<g;++S){let I=o[S];if(I<0||I>=l[0])throw new Error(w.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(S,o[S],l[0]));for(let N=0;N<u;N++)d[b*u+N]+=r[I*u+N]}if(s)for(let S=0;S<u;S++)d[b*u+S]/=g-h;if(h=g,++g,x=b+1,b=C,g>a)break}return x<p&&d.fill(i,x*u,p*u),[d,m]}var YG=po(r=>Math.sqrt(r)),RQt=I0(Eo,r=>Math.sqrt(r));var bN=Ut((r,e)=>{let t=r-e;return t*t}),OQt=or(Ro,bN);function QG(r,e,t,o){let n=te(r,e.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*t[l]+o[l];n.set(e.get(...a),...i)}return n}var CN=class{constructor(e,t,o,n,s,i){this.separator=y.encodeString(e),this.nGramWidths=t,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let o=this.getPadWidth(t);return Math.max(0,e+2*o-t+1)}createNGrams(e,t,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=t+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=e[m+b].length;f+=c*this.rightPad.length,f+=(u+c+p-1)*this.separator.length,o[n+a]=new Uint8Array(f);let h=o[n+a],g=0,x=b=>b.forEach(C=>h[g++]=C);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(e[m+b]),x(this.separator);if(p>0){x(e[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(e,t){let o=e.length,n=t.length;if(n>0){let l=t[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=t[u]>=l;if(c=c&&t[u]<=o,!c)throw new Error(`Invalid split value ${t[u]}, must be in [${l}, ${o}]`);l=t[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=t[l]-t[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=t[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=t[l+1]-t[l],f=this.getNumNGrams(m,p);this.createNGrams(e,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=t[l+1]-t[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(e,u,a,c,f,m)}}return[a,i]}};function ZG(r,e,t,o,n,s,i,a){return new CN(t,o,n,s,i,a).compute(r,e)}function uce(r,e,t,o){if(!r.length)return;if(e.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(e.length===1){let s=e[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!t||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!t||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||e.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!t||i.length!==0)&&o.push(i),n=s+1}}function JG(r,e,t){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;uce(r[m],e,t,n);let d=n.length-f;a[m]=d,s+=d,i=Math.max(i,d)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function eU(r,e){let t=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)t[o]=y.fingerPrint64(r[o]).modulo(e).getLowBitsUnsigned();return t}var wN=Ut((r,e)=>r-e),cce=Hf((r,e,t,o)=>({real:r-t,imag:e-o})),XQt=or(Ao,wN,cce);function tU(r,e){let t=new Array(r.rank);for(let n=0;n<t.length;n++)t[n]=r.shape[n]*e[n];let o=te(t,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var Og=(r,e)=>{let t=e.value-r.value;return t===0?r.index-e.index:t};function rU(r,e,t=0,o=r.length-1){for(;o>t;){if(o-t>600){let a=o-t+1,l=e-t+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(t,Math.floor(e-l*c/a+p)),f=Math.min(o,Math.floor(e+(a-l)*c/a+p));rU(r,e,m,f)}let n=r[e],s=t,i=o;for(y.swap(r,t,e),Og(r[o],n)>0&&y.swap(r,t,o);s<i;){for(y.swap(r,s,i),s++,i--;Og(r[s],n)<0;)s=s+1;for(;Og(r[i],n)>0;)i=i-1}Og(r[t],n)===0?y.swap(r,t,i):(i=i+1,y.swap(r,i,o)),i<=e&&(t=i+1),e<=i&&(o=i-1)}}function oU(r,e,t,o,n){let s=e[e.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(t,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),d=new Array(f.length);f.forEach((b,C)=>d[C]={value:b,index:C}),o<d.length&&(rU(d,o),d=d.slice(0,o)),n&&d.sort(Og);let h=p*o,g=l.subarray(h,h+o),x=u.subarray(h,h+o);for(let b=0;b<o;b++)g[b]=d[b].value,x[b]=d[b].index}let c=e.slice();return c[c.length-1]=o,[te(c,t,l),te(c,"int32",u)]}function nU(r,e,t,o){let n=y.parseAxisParam(e,t)[0],s=[1,t[0],1];for(let d=0;d<n;d++)s[0]*=t[d];s[1]=t[n];for(let d=n+1;d<t.length;d++)s[2]*=t[d];let i={},a=new Int32Array(t[n]),l=new Je(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let d=0;d<t[n];d++){let h;if(c)h=r[d].toString();else{let g=[];for(let x=0;x<s[0];x++)for(let b=0;b<s[2];b++)g.push(l.get(x,d,b));h=g.join(",")}if(i[h]!==void 0)a[d]=i[h];else{let g=Object.keys(i).length;i[h]=g,a[d]=g,u.push(d)}}let p=s.slice();p[1]=Object.keys(i).length;let m=new Je(p,o);u.forEach((d,h)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(l.get(g,d,x),g,h,x)});let f=t.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}var{addImpl:sU,bincountImpl:v0,bincountReduceImpl:iU,castImpl:aU,ceilImpl:lU,concatImpl:uU,equalImpl:cU,expImpl:pU,expm1Impl:mU,floorImpl:fU,gatherNdImpl:dU,gatherV2Impl:hU,greaterImpl:gU,greaterEqualImpl:xU,lessImpl:yU,lessEqualImpl:bU,linSpaceImpl:CU,logImpl:wU,maxImpl:SU,maximumImpl:IU,minimumImpl:vU,multiplyImpl:TU,negImpl:kU,notEqualImpl:NU,prodImpl:$U,raggedTensorToTensorImpl:EU,rangeImpl:RU,rsqrtImpl:AU,scatterImpl:DU,sigmoidImpl:FU,simpleAbsImpl:T0,sliceImpl:_U,sparseFillEmptyRowsImpl:OU,sparseReshapeImpl:PU,sparseSegmentReductionImpl:k0,sqrtImpl:LU,stridedSliceImpl:zU,stringNGramsImpl:BU,stringSplitImpl:MU,stringToHashBucketFastImpl:VU,subImpl:GU,tileImpl:UU,topKImpl:WU,transposeImpl:Np,uniqueImpl:HU}=Pg;function SN(r,e){return["x","y","z","w","u","v"].slice(0,e).map(t=>`${r}.${t}`)}function Qt(r,e){return e===1?[r]:SN(r,e)}function KU(r,e){if(r===1)return"rc";let t="";for(let o=0;o<r;o++)t+=e[o],o<r-1&&(t+=",");return t}var N0=class{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=gt(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let t=Qt("rc",this.rank),o=Be(this.rank),n=this.getOutOfBoundsCondition(t),s=this.getSetup(t),i=this.getOutput(t);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${e[e.length-1-i]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let o=this.rank-2;o<this.rank;o++)t+=`${e[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(t+="||");return t}getSetup(e){if(this.rank===1)return"";let t=e.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}};var qf=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${pce(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Lf():Pf(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${o}

        setOutput(result);
      }
    `}};function pce(r,e){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e?oG(["r","c","d"],"inputShape"):Qi(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var $0=class{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,o){let n=XU(t,o),s=jU(e,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=qU(e,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].shift();return this.usedTextures[s].push(l),l}let a;return n===Dr.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):n===Dr.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):n===Dr.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):n===Dr.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):n===Dr.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(e,t,o,n){if(this.freeTextures==null)return;let s=XU(o,n),i=jU(t,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=qU(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=D().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let e in this.freeTextures)this.freeTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function mce(r,e){let t=r;if(e===t.R32F)return 4;if(e===t.R16F)return 2;if(e===t.RGBA32F)return 16;if(e===r.RGBA)return 16;if(e===t.RGBA16F)return 8;if(e===t.RGBA8)return 4;throw new Error(`Unknown internal format ${e}`)}function qU(r,e,t,o,n){let s=fce(e,o),i;if(n){let[l,u]=ol(r[0],r[1]);i=l*u}else{let[l,u]=Ip(r[0],r[1]);i=l*u}let a=mce(t,s);return i*a}function fce(r,e){switch(r){case Dr.PACKED_2X2_FLOAT32:return eN(e);case Dr.PACKED_2X2_FLOAT16:return tN(e);case Dr.UNPACKED_FLOAT32:return Qk(e);case Dr.UNPACKED_FLOAT16:return Zk(e);case Dr.PACKED_4X1_UNSIGNED_BYTE:return Jk(e);default:throw new Error(`Unknown physical texture type ${r}`)}}function dce(r){return D().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?Dr.PACKED_2X2_FLOAT32:Dr.UNPACKED_FLOAT32:r?Dr.PACKED_2X2_FLOAT16:Dr.UNPACKED_FLOAT16}function XU(r,e){if(r===Ur.UPLOAD)return Dr.PACKED_2X2_FLOAT32;if(r===Ur.RENDER||r==null)return dce(e);if(r===Ur.DOWNLOAD||r===Ur.PIXELS)return Dr.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function jU(r,e,t){return`${r[0]}_${r[1]}_${e}_${t}`}var Zr=class{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},hr="if (isnan(x)) return x;",YU="return x;",IN="return abs(x);";var QU="return (x >= 0.0) ? x : (exp(x) - 1.0);",ZU=hr+`
  return (x < 0.0) ? 0.0 : x;
`,JU=hr+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,$p="return x;",eW="return 1.0 / (1.0 + exp(-1.0 * x));";var rW="return x;",oW=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,nW=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,sW=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,iW="return 1.0 / (1.0 + exp(-1.0 * x));",qn=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var E0=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length);let t=e.length,o=Qt("rc",t),n=Be(t),s=KU(t,o),i=o.slice(-2),a=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var gce=vt.whereImpl,xce=1e-7,yce=1e-4,R0={};function bce(r){return r in R0||(R0[r]={}),R0[r]}var Cce=D().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),wce=600;function Sce(){return D().global.screen==null?1024:D().global.screen.height*D().global.screen.width*window.devicePixelRatio*wce/1024/1024}var Ep=class extends cn{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!D().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(e!=null){if(e instanceof Uf)t=e;else{let o=nn(D().getNumber("WEBGL_VERSION"),e);t=new Uf(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=nn(D().getNumber("WEBGL_VERSION"));t=new Uf(o),this.binaryCache=bce(D().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new $0(this.gpgpu),this.numMBBeforeWarning=Sce(),this.texData=new ci(this,sr())}nextDataId(){return Ep.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,o){if((D().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||D().getBool("DEBUG"))&&this.checkNumericalProblems(e),o==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:t,dtype:o,values:e,usage:Ur.UPLOAD,refCount:1}),n}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,o,n,s){if(D().getBool("DEBUG")&&this.checkNumericalProblems(t),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:o,dtype:n,values:t,usage:Ur.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t=this.texData.get(e),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=t;if(i!=null){let m;l?m=new qn(a,$p):m=new Zr(a,$p);let f=this.runWebGLProgram(m,[{dataId:e,shape:a,dtype:n}],n),d=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),d}if(o!=null)return this.convertAndCacheOnCPU(e);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=w.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(e,p)}async read(e){if(this.pendingRead.has(e)){let d=this.pendingRead.get(e);return new Promise(h=>d.push(h))}let t=this.texData.get(e),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=t;if(s!=null){let d;l?d=new qn(n,$p):d=new Zr(n,$p);let h=this.runWebGLProgram(d,[{dataId:e,shape:n,dtype:i}],i),g=this.read(h.dataId);return this.disposeIntermediateTensorInfo(h),g}if(o!=null)return this.convertAndCacheOnCPU(e);if(D().getBool("DEBUG")&&!D().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&D().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&D().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(e);let d=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(d.texture.texture,...Ng(n))}this.pendingRead.set(e,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let d=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),h=d[0],g=d[1];p=w.mergeRealAndImagArrays(h,g)}else if(u==null)p=this.getValuesFromTexture(e);else{let d=y.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,d)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let d=this.gpgpu.gl;we(d,()=>d.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(e,p),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach(d=>d(m)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&sr().removeDataId(e,this),this.pendingDeletes--),m}readToGPU(e,t={}){let o=this.texData.get(e),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new qn(s,$p):f=new Zr(s,$p);let d=this.runWebGLProgram(f,[{dataId:e,shape:s,dtype:a}],a),h=this.readToGPU(d,t);return this.disposeIntermediateTensorInfo(d),h}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(e,t.customTexShape),p=sr().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return te(e.shape,e.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return te(e.shape,e.dtype,t)}checkNumericalProblems(e){if(e!=null)for(let t=0;t<e.length;t++){let o=e[t];if(!LV(o))throw D().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(e){let{shape:t,dtype:o,isPacked:n}=this.texData.get(e),s=y.sizeFromShape(t);if(D().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(e),f=this.texData.get(m.dataId),d=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Ng(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),d}let i=D().getBool("WEBGL_PACK")&&n===!0,a=i?m0(t):t,l=i?new b0(a):new y0(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:e}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,e();let s=y.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=y.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=t,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(e){return D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=y.now(),e)}async getQueryTime(e){if(D().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);let t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:o}=this.texData.get(e);return o!=null&&(this.disposeData(o.real.dataId,t),this.disposeData(o.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(e),l=a&&a.origDataId||e,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),t!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(t,n,s,i)));let c=this.texData.get(e);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Cce){return D().getBool("WEBGL_CPU_FORWARD")&&e.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){w.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return gce(e.shape,t)}packedUnaryOp(e,t,o){let n=new qn(e.shape,t),s=this.compileAndRun(n,[e],o);return sr().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&e.dtype!=="complex64"){let n=T0(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,n)}if(D().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,IN,e.dtype);let t=new Zr(e.shape,IN),o=this.compileAndRun(t,[e]);return sr().makeTensorFromTensorInfo(o)}makeTensorInfo(e,t,o){let n;if(t==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,e,t)}else n=this.write(o,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t,o){return sr().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,o),this)}unpackTensor(e){let t=new E0(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new N0(e.shape),o=!0;return this.runWebGLProgram(t,[e],e.dtype,null,o)}packedReshape(e,t){let o=[uc(e.shape),...cc(e.shape)],n={dtype:e.dtype,shape:o,dataId:e.dataId},s=[uc(t),...cc(t)],i=new qf(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],e.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}decode(e,t){let o=this.texData.get(e),{isPacked:n,shape:s,dtype:i}=o;if(t!=null){let m=y.sizeFromShape(s),f=t[0]*t[1]*4;y.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=m0(s),l;n?l=new x0(a):l=new g0(a);let u=!0,c=[t??Ng(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:e}],i,c,u,t);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(e,t,o,n,s=!1,i){let a=this.makeTensorInfo(e.outputShape,o),l=this.texData.get(a.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===lc.DENSE){let x=i??Ng(e.outputShape);l.texShape=x.map(b=>b*2)}if(e.outTexUsage!=null&&(l.usage=e.outTexUsage),y.sizeFromShape(a.shape)===0)return l.values=y.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=t.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!e.packedInputs&&y.sizeFromShape(x.shape)<=D().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!vp(b.shape,x.shape)){let C=x,S=x.shape;x.shape=b.shape,x=this.packedReshape(x,S),u.push(x),b=this.texData.get(x.dataId),C.shape=S}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=pG(e,c,p),f=this.getAndSaveBinary(m,()=>uG(this.gpgpu,e,c,p)),d=this.activeTimers!=null,h;d&&(h=this.startTimer()),D().get("ENGINE_COMPILE_ONLY")||cG(this.gpgpu,f,c,p,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),d&&(h=this.endTimer(h),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(h)}));let g=D().get("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!D().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let x=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),x}return a}compileAndRun(e,t,o,n,s=!1){return o=o||t[0].dtype,this.runWebGLProgram(e,t,o,n,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(D().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=M(()=>{if(!D().get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=D().getBool("DEBUG");D().set("DEBUG",!1);let t=this.abs(ae(1e-8)).dataSync()[0];if(D().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?xce:yce}uploadToGPU(e){let t=this.texData.get(e),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=t;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let p=t.texShape;if(p==null&&(p=YV(o,l),t.texShape=p),s!=null){let m=m0(o),f,d=p[1],h=p[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!g)&&([d,h]=ol(p[0],p[1])),l?f=new w0(m,g):f=new C0(m,g);let x=g?[h,d]:p,b=this.makeTensorInfo(x,n),C=this.texData.get(b.dataId);g?C.usage=Ur.PIXELS:C.usage=Ur.UPLOAD,C.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),d,h,s);let S=[[h,d]],I=!0,N=this.runWebGLProgram(f,[b],n,S,I),$=this.texData.get(N.dataId);t.texShape=$.texShape,t.isPacked=$.isPacked,t.usage=$.usage,D().get("ENGINE_COMPILE_ONLY")?this.disposeData(N.dataId):(t.texture=$.texture,t.values=null,this.texData.delete(N.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(p,a,n,l);t.texture=m}}convertAndCacheOnCPU(e,t){let o=this.texData.get(e),{dtype:n}=o;return this.releaseGPUData(e),t!=null&&(o.values=Ice(t,n)),o.values}acquireTexture(e,t,o,n){if(this.numBytesInGPU+=this.computeBytes(e,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,n)}computeBytes(e,t){return e[0]*e[1]*y.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}else{for(let[,t]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(t),n(!0)}catch(s){throw s}});e.push(o)}return Promise.all(e)}}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Kc(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(Kk(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let[,e]of Object.entries(this.binaryCache)){let{uniformLocations:t,customUniformLocations:o,infLoc:n,nanLoc:s,inShapesLocations:i,inTexShapesLocations:a,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=Yk(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=o,e.infLoc=n,e.nanLoc=s,e.inShapesLocations=i,e.inTexShapesLocations=a,e.outShapeLocation=l,e.outShapeStridesLocation=u,e.outTexShapeLocation=c}}};Ep.nextDataId=0;function Ice(r,e){if(e==="float32"||e==="complex64")return r;if(e==="int32"||e==="bool"){let t=e==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<t.length;++o)t[o]=Math.round(r[o]);return t}else throw new Error(`Unknown dtype ${e}`)}Pn.isBrowser()&&Eu("webgl",()=>new Ep,2);var A0=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var Xn=class{constructor(e,t,o){this.variableNames=["A","B"],this.outputShape=w.assertAndGetBroadcastShape(t,o),this.enableShapeUniforms=gt(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var pc=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;var ni=class{constructor(e,t,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=w.assertAndGetBroadcastShape(t,o);let s=this.outputShape.length;this.enableShapeUniforms=gt(s);let i="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${Be(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=Qt("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function Zt(r){let{inputs:e,backend:t}=r,{x:o}=e;return t.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var aW={kernelName:So,backendName:"webgl",kernelFunc:Zt};function Uo(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.makeTensorInfo(o.shape,"complex64"),i=t.texData.get(s.dataId),a=Zt({inputs:{x:o},backend:t}),l=Zt({inputs:{x:n},backend:t});return i.complexTensorInfos={real:a,imag:l},s}var lW={kernelName:xi,backendName:"webgl",kernelFunc:Uo};var vN="return (a < 0.) ? b * a : a;",TN=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function vce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o,i=t.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),a=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ni(TN,n.shape,i.shape):new Xn(vN,n.shape,i.shape),l=t.runWebGLProgram(a,[n,i],"float32");return t.disposeIntermediateTensorInfo(i),l}var uW={kernelName:ps,backendName:"webgl",kernelFunc:vce};var kN="return (a < 0.) ? b * a : a;",NN=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function Tce(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e,s=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ni(NN,o.shape,n.shape):new Xn(kN,o.shape,n.shape);return t.runWebGLProgram(s,[o,n],"float32")}var cW={kernelName:Cs,backendName:"webgl",kernelFunc:Tce};var si="if (isnan(x)) return x;",pW=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,mW=`
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;function be({opSnippet:r,packedOpSnippet:e,cpuKernelImpl:t,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&t!=null){let p=a.texData.get(i.dataId),m=t(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=D().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&e!=null,c;return u?c=new qn(i.shape,e):c=new Zr(i.shape,r),a.runWebGLProgram(c,[i],l)}}function st({opSnippet:r,packedOpSnippet:e,checkOutOfBounds:t=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let d=c.texData.get(l.dataId),h=c.texData.get(u.dataId),[g,x]=[[d.complexTensorInfos.real,h.complexTensorInfos.real],[d.complexTensorInfos.imag,h.complexTensorInfos.imag]].map(C=>{let[S,I]=C,N={dataId:S.dataId,dtype:S.dtype,shape:l.shape},$={dataId:I.dataId,dtype:I.dtype,shape:u.shape},R=new Xn(r,l.shape,u.shape);return c.runWebGLProgram(R,[N,$],Ye(S.dtype,I.dtype))}),b=Uo({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),b}let p=s||Ye(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let d=c.texData.get(l.dataId).values,h=c.texData.get(u.dataId).values,g=l.dtype==="string"?w.fromUint8ToStringArray(d):d,x=l.dtype==="string"?w.fromUint8ToStringArray(h):h,[b,C]=n(l.shape,u.shape,g,x,p),S=c.makeTensorInfo(C,p),I=c.texData.get(S.dataId);return I.values=b,S}let m=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&e!=null,f;return m?f=new ni(e,l.shape,u.shape,t):f=new Xn(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function Ol(r,e=!1){if(r==="linear")return e?rW:YU;if(r==="relu")return e?nW:ZU;if(r==="elu")return e?oW:QU;if(r==="relu6")return e?sW:JU;if(r==="prelu")return e?NN:kN;if(r==="leakyrelu")return e?TN:vN;if(r==="sigmoid")return e?iW:eW;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Xf=class{constructor(e,t,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=gt(this.outputShape.length);let c=n?e[1]:e[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",d=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";a&&(l?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:g=`vec4 activation(vec4 x) {
          ${a}
        }`,x="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let C="rc.x",S="rc.x";e[0]<t[0]?C=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(S=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${p}; i++) {
          int batchA = ${C};
          int batchB = ${S};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${d[0]} * ${h[0]});
          result += (${d[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var $N={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},Lg=class{constructor(e,t,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=w.assertAndGetBroadcastShape(t,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var fW="return a * b;";function zg(r){let{inputs:e,backend:t}=r,{a:o,b:n}=e,s=w.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=t.texData.get(o.dataId),l=t.texData.get(n.dataId),u=new Lg($N.REAL,o.shape,n.shape),c=new Lg($N.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=t.runWebGLProgram(u,p,"float32"),f=t.runWebGLProgram(c,p,"float32"),d=Uo({inputs:{real:m,imag:f},backend:t});return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),d}if(t.shouldExecuteOnCPU([o,n])){let a=t.texData.get(o.dataId),l=t.texData.get(n.dataId),[u,c]=TU(o.shape,n.shape,a.values,l.values,s),p=t.makeTensorInfo(c,s),m=t.texData.get(p.dataId);return m.values=u,p}let i;return D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new ni(fW,o.shape,n.shape):i=new Xn(fW,o.shape,n.shape),t.runWebGLProgram(i,[o,n],s)}var dW={kernelName:ko,backendName:"webgl",kernelFunc:zg};function hW(r,e,t){let o=[uc(r.shape),...cc(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[uc(e),...cc(e)],i=new qf(s,o),a=!0,l=[o],u=t.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}function oe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{shape:s}=o,i=t,a=y.sizeFromShape(n.shape),l=y.inferFromImplicitShape(s,a),u=y.sizeFromShape(l);y.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!vp(n.shape,l)&&!(c.texture!==null&&vp(c.shape,l))?hW(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var gW={kernelName:ws,backendName:"webgl",kernelFunc:oe};var Bg=class{constructor(e,t){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=e;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(t!=null){let p=1/t;u=`sumValue += dot(values * ${y.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var D0=class{constructor(e,t){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=e;this.outputShape=[n,i];let a="0.0",l="";t==="prod"?a="1.0":t==="min"?(a="1.0 / 1e-20",l="min"):t==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="sum"?u="sumValue":t==="prod"?u="prodValue":t==="all"?u="allValue":t==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${t==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${t==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${t==="min"} || ${t==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";t==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):t==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let d="";s%o>0&&(d=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function Nce(r){let e=[];for(;e.length===0||e[e.length-1].outSize!==1;){let t=e.length?e[e.length-1].outSize:r[1],o=w.computeOptimalWindowSize(t);e.push({inSize:t,windowSize:o,outSize:Math.ceil(t/o)})}return e}function sn(r,e,t,o){let n=Nce(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;t==="mean"?c=i===0?new Bg({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new Bg({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new D0({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},t),p=s,s=o.runWebGLProgram(c,[s],e),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var F0=class{constructor(e,t){this.variableNames=["A"];let o=new Array(e.length);for(let i=0;i<o.length;i++)o[i]=e[t[i]];this.outputShape=o,this.rank=o.length;let n=Be(this.rank),s=$ce(t);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function $ce(r){let e=r.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);let t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(e);for(let n=0;n<r.length;n++)o[r[n]]=t[n];return o.join()}var _0=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(e.length);for(let c=0;c<o.length;c++)o[c]=e[t[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=Be(this.rank),s=SN("rc",this.rank),i=new Array(this.rank);for(let c=0;c<t.length;c++)i[t[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function mc(r,e,t){let o=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _0(r.shape,e):new F0(r.shape,e);return t.runWebGLProgram(o,[r],r.dtype)}function xW(r,e,t,o){let n=e,s=r.shape.length,i=y.parseAxisParam(n,r.shape),a=i,l=w.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=mc(r,l,o),a=w.getInnerMostAxes(a.length,s)),w.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=w.computeOutAndReduceShapes(c.shape,a),f=p;t&&(f=w.expandShapeToKeepDim(p,i));let d=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/d,x=oe({inputs:{x:c},attrs:{shape:[g,d]},backend:o}),b=Do(r.dtype),C=sn(x,b,"sum",o),S=oe({inputs:{x:C},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(C),u&&o.disposeIntermediateTensorInfo(c),S}function Rp(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;return xW(n,s,i,t)}var yW={kernelName:Ts,backendName:"webgl",kernelFunc:Rp};function Rt(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{perm:s}=o,i=t,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=Np(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=mc(n,s,i);return u}var bW={kernelName:qo,backendName:"webgl",kernelFunc:Rt};var EN=1e3;function Ap({a:r,b:e,transposeA:t,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=e.shape.length,p=t?r.shape[u-2]:r.shape[u-1],m=o?e.shape[c-1]:e.shape[c-2],f=t?r.shape[u-1]:r.shape[u-2],d=o?e.shape[c-2]:e.shape[c-1],h=r.shape.slice(0,-2),g=e.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=Or.assertAndGetBroadcastShape(r.shape.slice(0,-2),e.shape.slice(0,-2)).concat([f,d]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${o} must match.`);let I=t?[x,p,f]:[x,f,p],N=o?[b,d,m]:[b,m,d],$=oe({inputs:{x:r},backend:n,attrs:{shape:I}}),R=oe({inputs:{x:e},backend:n,attrs:{shape:N}}),F=[$,R],_=Math.max(x,b),B=t?$.shape[1]:$.shape[2],V=s!=null,G=i!=null,W=l==="leakyrelu",U=l!=null?Ol(l,!0):null,K=V||G||W||U!=null,X;if((f===1||d===1)&&B>EN&&K===!1){let Z=$,J=R;t&&(Z=Rt({inputs:{x:$},backend:n,attrs:{perm:[0,2,1]}}),F.push(Z)),o&&(J=Rt({inputs:{x:R},backend:n,attrs:{perm:[0,2,1]}}),F.push(J));let ee=d!==1,le=d===1,ie=Z;ee&&(ie=oe({inputs:{x:Z},backend:n,attrs:{shape:[_,B,1]}}),F.push(ie));let de=d===1?2:1,ce=J;le&&(ce=oe({inputs:{x:J},backend:n,attrs:{shape:[_,1,B]}}),F.push(ce));let ge=zg({inputs:{a:ie,b:ce},backend:n});X=Rp({inputs:{x:ge},backend:n,attrs:{axis:de,keepDims:!0}}),F.push(ge)}else{let Z=Ye(r.dtype,e.dtype),J=new Xf(I,N,[_,f,d],t,o,V,U,G,W),ee=[$,R];if(s!=null&&ee.push(s),G&&ee.push(i),W){let le=n.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));ee.push(le),F.push(le)}X=n.runWebGLProgram(J,ee,Z)}let H=oe({inputs:{x:X},backend:n,attrs:{shape:S}});F.push(X);for(let Z of F)n.disposeIntermediateTensorInfo(Z);return H}function Ece(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=e,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return Ap({a:n,b:s,transposeA:l,transposeB:u,backend:t,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var CW={kernelName:Di,backendName:"webgl",kernelFunc:Ece};var wW="return abs(x);";function Rce(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=t.texData.get(o.dataId),i=T0(s.values);return t.makeTensorInfo(o.shape,o.dtype,i)}let n;return D().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new qn(o.shape,wW):n=new Zr(o.shape,wW),t.runWebGLProgram(n,[o],o.dtype)}var SW={kernelName:mn,backendName:"webgl",kernelFunc:Rce};var Ace=hr+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,Dce=be({opSnippet:Ace}),IW={kernelName:pi,backendName:"webgl",kernelFunc:Dce};var Fce=hr+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,_ce=be({opSnippet:Fce}),vW={kernelName:mi,backendName:"webgl",kernelFunc:_ce};var TW="return a + b;",Oce=st({opSnippet:TW,packedOpSnippet:TW,supportsComplex:!0,cpuKernelImpl:sU}),kW={kernelName:Wr,backendName:"webgl",kernelFunc:Oce};var O0=class{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var P0=class{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function L0(r){let{inputs:e,backend:t}=r,o=e;if(o.length===1)return Zt({inputs:{x:o[0]},backend:t});if(o.length>D().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=L0({inputs:o.slice(0,l),backend:t}),c=L0({inputs:o.slice(l),backend:t});return L0({inputs:[u,c],backend:t})}let n=o.map(l=>l.dtype).reduce((l,u)=>Ye(l,u)),s=o.map(l=>l.shape),a=D().getBool("WEBGL_PACK")?new P0(o[0].shape,s):new O0(o[0].shape,s);return t.runWebGLProgram(a,o,n)}var NW={kernelName:Qn,backendName:"webgl",kernelFunc:L0};function Pce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=n;c!=null&&(p=Rt({inputs:{x:n},backend:t,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,a)),w.assertAxesAreInnerMostDims("all",u,a);let[m,f]=w.computeOutAndReduceShapes(p.shape,u),d=y.sizeFromShape(f),h=oe({inputs:{x:p},backend:t,attrs:{shape:[-1,d]}}),g=sn(h,h.dtype,"all",t),x;if(i){let b=w.expandShapeToKeepDim(m,l);x=oe({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=oe({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),c!=null&&t.disposeIntermediateTensorInfo(p),x}var $W={kernelName:Hl,backendName:"webgl",kernelFunc:Pce};function Lce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=n;c!=null&&(p=Rt({inputs:{x:n},backend:t,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,a)),w.assertAxesAreInnerMostDims("any",u,a);let[m,f]=w.computeOutAndReduceShapes(p.shape,u),d=y.sizeFromShape(f),h=oe({inputs:{x:p},backend:t,attrs:{shape:[-1,d]}}),g=sn(h,h.dtype,"any",t),x;if(i){let b=w.expandShapeToKeepDim(m,l);x=oe({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=oe({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),c!=null&&t.disposeIntermediateTensorInfo(p),x}var EW={kernelName:Kl,backendName:"webgl",kernelFunc:Lce};var z0=class{constructor(e,t,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=e;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=t==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var B0=class{constructor(e,t,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(e.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=e[e.length-1],i=Math.ceil(s/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=Be(l),c=Qt("coords",l),p,m;if(i===1){m=l+1;let R=Be(m);p=`
        ${R} sourceLocR = ${R}(${c.join()}, 0);
        ++${c[l-1]};
        ${R} sourceLocG = ${R}(${c.join()}, 0);
        ++${c[l-2]};
        ${R} sourceLocA = ${R}(${c.join()}, 0);
        --${c[l-1]};
        ${R} sourceLocB = ${R}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),d="."+f[m-1],h=f.map(R=>"int "+R),g=Qt("sourceLocR",m-1).concat("inIdx.r"),x=Qt("sourceLocG",m-1).concat("inIdx.g"),b=Qt("sourceLocB",m-1).concat("inIdx.b"),C=Qt("sourceLocA",m-1).concat("inIdx.a"),S=o==="max"?"greaterThan":"lessThan",I=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${C.join()})));`,N=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`,$=n?"":`
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${h.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${$}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},
          sourceLocB${d}, sourceLocA${d}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${N};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${N};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${S}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function RW(r,e,t,o=null){let n=e.shape[0],s=e.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=w.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new z0(a,t,o==null),u=[e];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=RW(r,e,t,c);return r.disposeIntermediateTensorInfo(c),p}function AW(r,e,t,o=null){let n=o!=null?o.shape:e.shape,s=n[n.length-1],i=w.computeOptimalWindowSize(s),a=new B0(n,i,t,o==null),l=o==null?[e]:[e,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===e.shape.length){let c=AW(r,e,t,u);return r.disposeIntermediateTensorInfo(u),c}return u}function M0(r,e,t,o){let n=[t];if(w.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,e.shape.length),!D().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){let s=[],i=r.texData.get(e.dataId),a=i!==null&&i.isPacked,l=e;a&&(l=r.unpackTensor(e),s.push(l));let[u,c]=w.computeOutAndReduceShapes(l.shape,n),p=y.sizeFromShape(c),m=oe({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=RW(r,m,o);s.push(f);let d=oe({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(h=>r.disposeIntermediateTensorInfo(h)),d}return AW(r,e,o)}function zce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Rt({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),w.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=M0(t,l,i[0],"max");return u.forEach(p=>t.disposeIntermediateTensorInfo(p)),c}var DW={kernelName:Zn,backendName:"webgl",kernelFunc:zce};function Bce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=Rt({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),w.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=M0(t,l,i[0],"min");return u.forEach(p=>t.disposeIntermediateTensorInfo(p)),c}var FW={kernelName:Jn,backendName:"webgl",kernelFunc:Bce};var Mce=hr+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,Vce=be({opSnippet:Mce}),_W={kernelName:fi,backendName:"webgl",kernelFunc:Vce};var Gce=hr+"return log(x + sqrt(x * x + 1.0));",Uce=be({opSnippet:Gce}),OW={kernelName:di,backendName:"webgl",kernelFunc:Uce};var Wce=hr+`
  return atan(x);
`,Hce=be({opSnippet:Wce}),PW={kernelName:hi,backendName:"webgl",kernelFunc:Hce};var Kce=pW+`
  return atan(a, b);
`,qce=`
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+mW+`
  return result;
`,Xce=st({opSnippet:Kce,packedOpSnippet:qce}),LW={kernelName:fn,backendName:"webgl",kernelFunc:Xce};var jce=hr+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,Yce=be({opSnippet:jce}),zW={kernelName:gi,backendName:"webgl",kernelFunc:Yce};var Zi=class{constructor(e,t,o,n=!1,s=!1){if(this.variableNames=["x"],t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=e.filterWidth,a=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,p=e.effectiveFilterHeight,m=e.effectiveFilterWidth,f=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;let h=t==="avg",g=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,x=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,b="0.0";if(h||(b="-1.0 / 1e-20"),o){let R=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${d});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let C="max",S=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(S="avgValue / count");let I=Math.floor(i/4)*4,N=i%4,$=`
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${d});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${$}
          }

          int xC = xCCorner + ${I};
          if (${N===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${N===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${N===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${$}
          }
        }
        setOutput(${S});
      }
    `}},fc=class{constructor(e,t,o,n=!1,s=!1){if(this.variableNames=["x"],t==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=e.filterWidth,a=e.strideDepth,l=e.strideHeight,u=e.strideWidth,c=e.dilationDepth,p=e.dilationHeight,m=e.dilationWidth,f=e.effectiveFilterDepth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,g=e.padInfo.front,x=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;let C=t==="avg",S="0.0";if(C||(S="-1.0 / 1e-20"),o){let _=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${d};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${_} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let I="max",N=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;t==="avg"&&(N="avgValue / count");let $=Math.floor(i/4)*4,R=i%4,F=`
      if (${C}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${S};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${S});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${$}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${F}
            }

            int xC = xCCorner + ${$};
            if (${R===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${F}
            } else if (${R===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${F}
            } else if (${R===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${F}
            }
          }
          setOutput(${N});
        }
      }
    `}};function Qce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;nl(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Zt({inputs:{x:n},backend:t});let p=new Zi(c,"avg",!1);return t.runWebGLProgram(p,[n],"float32")}var BW={kernelName:es,backendName:"webgl",kernelFunc:Qce};function Zce(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=w.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new fc(p,"avg",!1);return t.runWebGLProgram(m,[n],"float32")}var MW={kernelName:na,backendName:"webgl",kernelFunc:Zce};var V0=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=l-1-e.padInfo.top,p=u-1-e.padInfo.left,m=1/(t*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},G0=class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,o=e.filterHeight,n=e.filterWidth,s=e.strideDepth,i=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,p=e.effectiveFilterDepth,m=e.effectiveFilterHeight,f=e.effectiveFilterWidth,d=p-1-e.padInfo.front,h=m-1-e.padInfo.top,g=f-1-e.padInfo.left,x=1/(t*o*n);this.userCode=`
      const ivec3 pads = ivec3(${d}, ${h}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Jce(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=w.computePool3DInfo(i.shape,a,l,p,u,c),f=new G0(m);return t.runWebGLProgram(f,[n],i.dtype)}var VW={kernelName:Xl,backendName:"webgl",kernelFunc:Jce};function epe(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s;nl([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=w.computePool2DInfo(i.shape,a,l,1,u),p=new V0(c);return t.runWebGLProgram(p,[n],i.dtype)}var GW={kernelName:ql,backendName:"webgl",kernelFunc:epe};function tpe(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:i,transposeB:a}=o;return Ap({a:n,b:s,transposeA:i,transposeB:a,backend:t})}var UW={kernelName:ts,backendName:"webgl",kernelFunc:tpe};var U0=class{constructor(e,t,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(e,t),w.assertAndGetBroadcastShape(e,o);let a="0.0";n!=null&&(w.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(w.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var W0=class{constructor(e,t,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(e,t),w.assertAndGetBroadcastShape(e,o);let a="vec4(0.0)";n!=null&&(w.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(w.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var rpe=({inputs:r,backend:e,attrs:t})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=t;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=D().getBool("WEBGL_PACK_NORMALIZATION")?new W0(o.shape,n.shape,s.shape,c,p,l):new U0(o.shape,n.shape,s.shape,c,p,l);return e.runWebGLProgram(m,u,u[0].dtype)},WW={kernelName:us,backendName:"webgl",kernelFunc:rpe};var H0=class{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let t=Be(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=ope(this.rank),n,s=e.map((i,a)=>`sourceLoc.${RN[a]} = start[${a}] + coords.${RN[a]};`);n=`
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},RN=["x","y","z","w","u","v"];function ope(r){if(r===1)return"sourceLoc";if(r<=6)return RN.slice(0,r).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var K0=class{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=Be(this.rank),o=Qt("coords",this.rank),n=Qt("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${e[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${e[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${e[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((c,p)=>`start[${p}]`).join()});`:e.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function npe(r,e,t,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(t,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=t,i.dtype=r.dtype;let a=rt.computeFlatOffset(e,y.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function Ji(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:i}=o,[a,l]=rt.parseSliceParams(n,s,i);if(rt.assertParamsValid(n,a,l),y.sizeFromShape(l)===0)return t.makeTensorInfo(l,n.dtype,[]);if(t.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=t.texData.get(n.dataId),m=_U(p.values,a,l,n.shape,n.dtype);return t.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=t.texData.get(n.dataId),c=rt.isSliceContinous(n.shape,a,l);if(u||!c){let p=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new K0(l):new H0(l),m=[a];return t.runWebGLProgram(p,[n],n.dtype,m)}return t.uploadToGPU(n.dataId),npe(n,a,l,t)}var HW={kernelName:Dn,backendName:"webgl",kernelFunc:Ji};var spe=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,C)=>b*C),l=w.getReshaped(n.shape,s,a),u=w.getPermuted(l.length,s.length),c=w.getReshapedPermuted(n.shape,s,a),p=w.getSliceBeginCoords(i,s.length),m=w.getSliceSize(c,i,s.length),f=[],d=oe({inputs:{x:n},backend:t,attrs:{shape:l}}),h=Rt({inputs:{x:d},backend:t,attrs:{perm:u}}),g=oe({inputs:{x:h},backend:t,attrs:{shape:c}}),x=Ji({inputs:{x:g},backend:t,attrs:{begin:p,size:m}});return f.push(d),f.push(h),f.push(g),f.forEach(b=>t.disposeIntermediateTensorInfo(b)),x},KW={kernelName:rs,backendName:"webgl",kernelFunc:spe};function ipe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:i}=o,a=t.readSync(n.dataId),l=t.readSync(s.dataId),u=v0(a,l,s.dtype,s.shape,i);return t.makeTensorInfo([i],s.dtype,u)}var qW={kernelName:jl,backendName:"webgl",kernelFunc:ipe};function ape(r){let{inputs:e,backend:t}=r,{s0:o,s1:n}=e,s=t.readSync(o.dataId),i=t.readSync(n.dataId),a=w.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return t.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var XW={kernelName:Yl,backendName:"webgl",kernelFunc:ape};var lpe="return float(a != b);",AN=st({opSnippet:lpe,cpuKernelImpl:NU,dtype:"bool"}),jW={kernelName:kn,backendName:"webgl",kernelFunc:AN};function Pl(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.texData.get(o.dataId);return Zt({inputs:{x:n.complexTensorInfos.real},backend:t})}var YW={kernelName:Ti,backendName:"webgl",kernelFunc:Pl};var upe="return float(int(x));";function QW(r,e){let t=new Zr(r.shape,upe),o=e.runWebGLProgram(t,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function DN(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Zt({inputs:{x:n},backend:t});let i=it(n.shape),a=DN({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),l=Uo({inputs:{real:a,imag:i},backend:t});return i.dispose(),t.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=Pl({inputs:{input:n},backend:t}),a=DN({inputs:{x:i},backend:t,attrs:{dtype:s}});return t.disposeIntermediateTensorInfo(i),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=Zt({inputs:{x:n},backend:t});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(t.shouldExecuteOnCPU([n])){let i=t.texData.get(n.dataId).values,[a,l,u]=aU(i,n.shape,n.dtype,s);return t.makeTensorInfo(a,l,u)}if(s==="int32")return QW(n,t);if(s==="bool"){let i=t.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=AN({inputs:{a:n,b:i},backend:t});return t.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var ZW={kernelName:go,backendName:"webgl",kernelFunc:DN};var JW="return ceil(x);",cpe=be({opSnippet:JW,packedOpSnippet:JW,cpuKernelImpl:lU}),e4={kernelName:xo,backendName:"webgl",kernelFunc:cpe};var q0=class{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var X0=class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function ppe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{clipValueMin:s,clipValueMax:i}=o,a;D().getBool("WEBGL_PACK_CLIP")?a=new X0(n.shape):a=new q0(n.shape);let l=[[s],[i]];return t.runWebGLProgram(a,[n],n.dtype,l)}var t4={kernelName:dn,backendName:"webgl",kernelFunc:ppe};var j0=class{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function r4(r,e){return{dataId:e.dataId,dtype:e.dtype,shape:r.shape}}function mpe(r){let{inputs:e,backend:t}=r,{x:o}=e,n=t.texData.get(o.dataId),s=new j0(o.shape),i=[r4(o,n.complexTensorInfos.real),r4(o,n.complexTensorInfos.imag)];return t.runWebGLProgram(s,i,i[0].dtype)}var o4={kernelName:sa,backendName:"webgl",kernelFunc:mpe};var Y0=class{constructor(e){this.outputShape=[],this.outputShape=w.computeOutShape(e,1),this.variableNames=e.map((i,a)=>`T${a}`);let t=new Array(e.length-1);t[0]=e[0][1];for(let i=1;i<t.length;i++)t[i]=t[i-1]+e[i][1];let o=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<t.length;i++){let a=t[i-1];o.push(`else if (yC < ${t[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=t.length,s=t[t.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var Z0=class{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=w.computeOutShape(e,t);let o=this.outputShape,n=o.length,s=Be(n),i=Qt("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=e.map((h,g)=>`T${g}`);let l=new Array(e.length-1);l[0]=e[0][t];for(let h=1;h<l.length;h++)l[h]=l[h-1]+e[h][t];let u=a[t],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let h=1;h<l.length;h++){let g=l[h-1];m+=`
        if (${u} < ${l[h]}  && ${u} >= ${l[h-1]}) {
          return getChannel(
            getT${h}(${Q0(a,u,g)}),
            vec2(${Q0(c,u,g)}));
        }`}let f=l.length,d=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${Q0(a,u,d)}),
          vec2(${Q0(c,u,d)}));`,this.userCode=`
      float getValue(${a.map(h=>"int "+h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function Q0(r,e,t){let o=r.indexOf(e);return r.map((s,i)=>i===o?`${s} - ${t}`:s).join()}function Dp(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.texData.get(o.dataId);return Zt({inputs:{x:n.complexTensorInfos.imag},backend:t})}var n4={kernelName:ha,backendName:"webgl",kernelFunc:Dp};function jf(r,e,t){let o=r[0].dtype;if(o==="complex64"){let p=r.map(g=>Pl({inputs:{input:g},backend:t})),m=r.map(g=>Dp({inputs:{input:g},backend:t})),f=jf(p,e,t),d=jf(m,e,t),h=Uo({inputs:{real:f,imag:d},backend:t});return p.forEach(g=>t.disposeIntermediateTensorInfo(g)),m.forEach(g=>t.disposeIntermediateTensorInfo(g)),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),h}let n=t.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let p=r.map(b=>{let C=y.sizeFromShape(b.shape.slice(e));return oe({inputs:{x:b},backend:t,attrs:{shape:[-1,C]}})}),m=p.map(b=>({vals:t.readSync(b.dataId),shape:b.shape})),f=w.computeOutShape(p.map(b=>b.shape),1),d=p[0].shape[0]===1,h=uU(m,f,o,d),g=w.computeOutShape(r.map(b=>b.shape),e),x=t.makeTensorInfo(g,o,h);return p.forEach(b=>t.disposeIntermediateTensorInfo(b)),x}let s=D().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>s){let p=[];for(let f=0;f<r.length;f+=s){let d=r.slice(f,f+s);p.push(jf(d,e,t))}let m=jf(p,e,t);for(let f of p)t.disposeIntermediateTensorInfo(f);return m}if(D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1){let p=new Z0(r.map(m=>m.shape),e);return t.runWebGLProgram(p,r,o)}let{tensors2D:i,outShape:a}=fpe(r,e,t),l=new Y0(i.map(p=>p.shape)),u=t.runWebGLProgram(l,i,o);i.forEach(p=>t.disposeIntermediateTensorInfo(p));let c=oe({inputs:{x:u},attrs:{shape:a},backend:t});return t.disposeIntermediateTensorInfo(u),c}function fpe(r,e,t){let o=w.computeOutShape(r.map(s=>s.shape),e);return{tensors2D:r.map(s=>oe({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(e))]},backend:t})),outShape:o}}function FN(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],i=w.computeOutShape(e.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let a=e.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return Zt({inputs:{x:a[0]},backend:t});let l=a.map(u=>u.shape);return w.assertParamsConsistent(l,s),jf(a,s,t)}var s4={kernelName:os,backendName:"webgl",kernelFunc:FN};var Yf=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let i=e.padInfo.top,a=e.padInfo.left,l=e.strideHeight,u=e.strideWidth,c=e.dilationHeight,p=e.dilationWidth,m=e.filterHeight,f=e.filterWidth,d=Math.floor(e.inChannels/4)*4,h=e.inChannels%4,g=e.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,C=g?3:1,S="",I="";o&&(n?S=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?S=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:S=`
          float activation(float x) {
            ${o}
          }
        `,I="result = activation(result);");let N=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${S}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${C}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${d}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${d}) *
                    getW(wR, wC, ${d}, d2);
              } else {
                dotProd +=
                    getX(batch, ${d}, xR, xC) *
                    getW(wR, wC, ${d}, d2);
              }

            } else if (${h===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${d}, d2),
                getW(wR, wC, ${d} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${d}),
                  getX(batch, xR, xC, ${d} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${d}, xR, xC),
                  getX(batch, ${d} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${d}, d2),
                getW(wR, wC, ${d} + 1, d2),
                getW(wR, wC, ${d} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${d}),
                  getX(batch, xR, xC, ${d} + 1),
                  getX(batch, xR, xC, ${d} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${d}, xR, xC),
                  getX(batch, ${d} + 1, xR, xC),
                  getX(batch, ${d} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${N}
        ${I}
        setOutput(result);
      }
    `}},J0=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,o=e.padInfo.top,n=e.padInfo.left,s=e.strideDepth,i=e.strideHeight,a=e.strideWidth,l=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,p=e.filterDepth,m=e.filterHeight,f=e.filterWidth,d=Math.floor(e.inChannels/4)*4,h=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${t}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${d}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${d}) *
                  getW(wF, wR, wC, ${d}, d2);
              } else if (${h===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${d}),
                  getX(batch, xF, xR, xC, ${d} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${d}, d2),
                  getW(wF, wR, wC, ${d} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${d}),
                  getX(batch, xF, xR, xC, ${d} + 1),
                  getX(batch, xF, xR, xC, ${d} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${d}, d2),
                  getW(wF, wR, wC, ${d} + 1, d2),
                  getW(wF, wR, wC, ${d} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var Qf=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=gt(this.outputShape.length);let i=e.padInfo.left,a=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,p=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<c;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let g=0;g<c;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(p+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*l};
           `,a===1){if(x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,l===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=i%2===0?y.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,l>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let f="",d="";o&&(n?f=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?f=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:f=`vec4 activation(vec4 x) {
           ${o}
         }`,d="result = activation(result);");let h=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${f}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${h}
         ${d}
         setOutput(result);
       }
     `}};var eS=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=gt(this.outputShape.length);let{dataFormat:o}=t,n=zt(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function tS(r,e){let t=r.length;return t>=3?e?[...r.slice(0,-3),r[t-3]*r[t-2],r[t-1]]:[...r.slice(0,-3),r[t-3],r[t-2]*r[t-1]]:!e&&t===1&&r[0]>1?[r[0],1]:null}function rS({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=t.inChannels,p=l[0]*l[1]*l[2],m=t.outChannels,f=t.dataFormat==="channelsLast",d=!1,h=!1,g,x=[];if(s!=null){let S=tS(s.shape,f);S!=null&&(s=oe({inputs:{x:s},backend:o,attrs:{shape:S}}),x.push(s))}if(n!=null){let S=tS(n.shape,f);S!=null&&(n=oe({inputs:{x:n},backend:o,attrs:{shape:S}}),x.push(n))}if(!((p===1||m===1)&&c>EN)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),l.slice(-3))){let S=l[0]*l[1]*(l[2]+1),I={dataId:r.dataId,shape:[1,S,t.inChannels],dtype:r.dtype},N=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(vp(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);let $=oe({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}});x.push($);let R=Ap({a:I,b:$,backend:o,transposeA:d,transposeB:h,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),F=o.texData.get(R.dataId);y.assert(F.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=N,F.shape=t.outShape,g=Zt({inputs:{x:R},backend:o}),g.shape=t.outShape,x.push(R)}else{let S=t.outHeight*t.outWidth,I=oe({inputs:{x:r},backend:o,attrs:{shape:f?[t.batchSize,S,t.inChannels]:[t.batchSize,t.inChannels,S]}}),N=oe({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}}),$=Ap({a:f?I:N,b:f?N:I,transposeA:!f,transposeB:h,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});g=oe({inputs:{x:$},backend:o,attrs:{shape:t.outShape}}),x.push(I),x.push(N),x.push($)}for(let S of x)o.disposeIntermediateTensorInfo(S);return g}function oS({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=t,d=f==="channelsLast",h=l*u*c,g=m*p,x=[t.batchSize,h,g],b=!0,C=!1,S=[];if(s!=null){let H=tS(s.shape,d);H!=null&&(s=oe({inputs:{x:s},backend:o,attrs:{shape:H}}),S.push(s))}if(n!=null){let H=tS(n.shape,d);H!=null&&(n=oe({inputs:{x:n},backend:o,attrs:{shape:H}}),S.push(n))}let I=oe({inputs:{x:e},backend:o,attrs:{shape:[1,h,y.sizeFromShape(e.shape)/h]}});S.push(I);let N=new eS(x,t),$=[r.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],R=o.runWebGLProgram(N,[r],"float32",$),F=oe({inputs:{x:R},backend:o,attrs:{shape:x}});S.push(R),S.push(F);let _=n!=null,B=s!=null,V=a==="leakyrelu",G=a?Ol(a,!0):null,W=new Xf(d?F.shape:I.shape,d?I.shape:F.shape,d?[t.batchSize,g,t.outChannels]:[t.batchSize,t.outChannels,g],b,C,_,G,B,V),U=d?[F,I]:[I,F];if(n&&U.push(n),B&&U.push(s),V){let H=o.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));U.push(H),S.push(H)}let K=o.runWebGLProgram(W,U,"float32"),X=oe({inputs:{x:K},backend:o,attrs:{shape:t.outShape}});S.push(K);for(let H of S)o.disposeIntermediateTensorInfo(H);return X}function dpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=rS({x:n,filter:s,convInfo:m,backend:t});else if(m.strideWidth<=2&&p==="channelsLast"&&D().getBool("WEBGL_EXP_CONV")){let h=new Qf(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];f=t.runWebGLProgram(h,[n,s],"float32",g)}else if(D().getBool("WEBGL_CONV_IM2COL"))f=oS({x:n,filter:s,convInfo:m,backend:t});else{let h=new Yf(m);f=t.runWebGLProgram(h,[n,s],"float32")}let d=oe({inputs:{x:f},backend:t,attrs:{shape:m.outShape}});return t.disposeIntermediateTensorInfo(f),d}var i4={kernelName:ns,backendName:"webgl",kernelFunc:dpe};var nS=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,o=e.strideWidth,n=e.padInfo.top,s=e.padInfo.left,i=e.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},sS=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,i=e.dataFormat==="channelsLast",a=t-1-e.padInfo.top,l=o-1-e.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},iS=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,o=e.strideHeight,n=e.strideWidth,s=e.padInfo.front,i=e.padInfo.top,a=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${s};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},aS=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,o=e.filterHeight,n=e.filterWidth,s=e.strideDepth,i=e.strideHeight,a=e.strideWidth,l=t-1-e.padInfo.front,u=o-1-e.padInfo.top,c=n-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function hpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new nS(m);return t.runWebGLProgram(f,[n,s],"float32")}var a4={kernelName:Ql,backendName:"webgl",kernelFunc:hpe};function gpe(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=w.convertConv2DDataFormat(u),m=w.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=new sS(m);return t.runWebGLProgram(f,[n,s],"float32")}var l4={kernelName:ss,backendName:"webgl",kernelFunc:gpe};function xpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l}=o,u=w.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new J0(u);return t.runWebGLProgram(c,[n,s],"float32")}var u4={kernelName:ia,backendName:"webgl",kernelFunc:xpe};function ype(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,pad:a,filterShape:l}=o,u=w.computeConv3DInfo(n.shape,l,i,1,a),c=new iS(u);return t.runWebGLProgram(c,[n,s],"float32")}var c4={kernelName:Zl,backendName:"webgl",kernelFunc:ype};function bpe(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{pad:i,strides:a,inputShape:l}=o,u=w.computeConv3DInfo(l,s.shape,a,1,i),c=new aS(u);return t.runWebGLProgram(c,[n,s],"float32")}var p4={kernelName:Jl,backendName:"webgl",kernelFunc:bpe};var Cpe=si+`
  return cos(x);
`,wpe=be({opSnippet:Cpe}),m4={kernelName:hn,backendName:"webgl",kernelFunc:wpe};var Spe=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,Ipe=be({opSnippet:Spe}),f4={kernelName:gn,backendName:"webgl",kernelFunc:Ipe};var lS=class{constructor(e,t,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=e,[c]=t,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[d,h]=[`${a-1}.0`,`${l-1}.0`],[g,x,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[C,S,I]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${h} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${h}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${C});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${S};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var vpe=r=>{let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:i}=e,{cropSize:a,method:l,extrapolationValue:u}=o,c=new lS(n.shape,s.shape,a,l,u);return t.runWebGLProgram(c,[n,s,i],"float32")},d4={kernelName:la,backendName:"webgl",kernelFunc:vpe};var Fp;(function(r){r.Prod="*",r.Sum="+"})(Fp||(Fp={}));var Mg=class{constructor(e,t,o,n){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===Fp.Prod?"1.0":"0.0",a=o?i:`getX(${h4(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Be(s)} coords = getOutputCoords();
        int end = ${g4(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${g4(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${h4(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function h4(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.x, ${e}.y`;if(r===3)return`${e}.x, ${e}.y, ${e}.z`;if(r===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function g4(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.y`;if(r===3)return`${e}.z`;if(r===4)return`${e}.w`;throw new Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function uS(r,e,t,o,n,s){let i=e.shape.length,a=w.getAxesPermutation([o],i),l=e;a!=null&&(l=Rt({inputs:{x:e},backend:t,attrs:{perm:a}}));let u=w.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=Zt({inputs:{x:l},backend:t});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new Mg(r,l.shape,!1,s),d=[[m]],h=p;p=t.runWebGLProgram(f,[p],p.dtype,d),t.disposeIntermediateTensorInfo(h)}if(n){let m=new Mg(r,l.shape,n,s),f=p;p=t.runWebGLProgram(m,[p],p.dtype),t.disposeIntermediateTensorInfo(f)}if(a!=null){let m=w.getUndoAxesPermutation(a),f=Rt({inputs:{x:p},backend:t,attrs:{perm:m}});return t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(l),f}return p}function Tpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;return uS(Fp.Prod,n,t,s,i,a)}var x4={kernelName:aa,backendName:"webgl",kernelFunc:Tpe};function kpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;return uS(Fp.Sum,n,t,s,i,a)}var y4={kernelName:is,backendName:"webgl",kernelFunc:kpe};function Npe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,weights:s}=e,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=t.readSync(n.dataId),u=t.readSync(s.dataId),c=v0(l,u,s.dtype,s.shape,i);return t.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=t.bufferSync(n),u=t.bufferSync(s),c=iU(l,u,i,a);return t.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var b4={kernelName:eu,backendName:"webgl",kernelFunc:Npe};var cS=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function $pe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),d=i==="NHWC"?[a,p,m,f]:[a,f,p,m],h=new cS(d,s,i);return t.runWebGLProgram(h,[n],n.dtype)}var C4={kernelName:ua,backendName:"webgl",kernelFunc:$pe};var Zf=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=gt(this.outputShape.length);let i=e.filterHeight,a=e.filterWidth,l=e.outChannels/e.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var Jf=class{constructor(e,t=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=gt(this.outputShape.length);let i=e.outChannels/e.inChannels,a=e.padInfo.left,l=e.strideWidth,u=e.dilationWidth,c=e.filterHeight,p=e.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<p;x++)f+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<p;x++)f+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let C=a%2===0?y.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${C};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:f+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):C===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${C};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let d="",h="";o&&(n?d=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?d=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:d=`vec4 activation(vec4 x) {
          ${o}
        }`,h="result = activation(result);");let g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${d}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `}};function Epe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=w.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;D().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new Jf(p):m=new Zf(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return t.runWebGLProgram(m,[n,s],"float32",f)}var w4={kernelName:as,backendName:"webgl",kernelFunc:Epe};var pS=class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,o=e.strideWidth,n=e.padInfo.top,s=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},mS=class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,o=e.filterWidth,n=e.strideHeight,s=e.strideWidth,i=t-1-e.padInfo.top,a=o-1-e.padInfo.left,l=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Rpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,dy:s}=e,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=w.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new pS(p);return t.runWebGLProgram(m,[n,s],"float32")}var S4={kernelName:tu,backendName:"webgl",kernelFunc:Rpe};function Ape(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=w.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new mS(p);return t.runWebGLProgram(m,[n,s],"float32")}var I4={kernelName:ru,backendName:"webgl",kernelFunc:Ape};var fS=class{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function Dpe(r){let{inputs:e,backend:t}=r,{x:o}=e,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),i=oe({inputs:{x:o},backend:t,attrs:{shape:[s]}}),a=new fS(s),l=t.runWebGLProgram(a,[i],i.dtype),u=oe({inputs:{x:l},backend:t,attrs:{shape:n}});return t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(l),u}var v4={kernelName:ou,backendName:"webgl",kernelFunc:Dpe};var dS=class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=e,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function Fpe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dilations:l}=o,u=w.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new dS(u);c=t.runWebGLProgram(p,[n,s],"float32");let m=oe({inputs:{x:c},backend:t,attrs:{shape:u.outShape}});return t.disposeIntermediateTensorInfo(c),m}var T4={kernelName:ca,backendName:"webgl",kernelFunc:Fpe};function _pe(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:i,summedDims:a,idDims:l}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=w.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,d=[];for(let h=0;h<p;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(f,l[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=Rt({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),d.push(C));let S=C.shape.slice();for(let I=0;I<b.length;++I)S.splice(b[I],0,1);y.arraysEqual(C.shape,S)||(C=oe({inputs:{x:C},backend:t,attrs:{shape:S}}),d.push(C)),m===null?m=C:(m=zg({inputs:{a:C,b:m},backend:t}),d.push(m))}h<p-1&&(u[h]>=0&&(m=Rp({inputs:{x:m},backend:t,attrs:{axis:u[h]-(i.length-f),keepDims:!1}}),d.push(m)),f--)}for(let h of d)h!==m&&t.disposeIntermediateTensorInfo(h);return m}var k4={kernelName:pa,backendName:"webgl",kernelFunc:_pe};var Ope="return (x >= 0.0) ? x : (exp(x) - 1.0);",Ppe=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,Lpe=be({opSnippet:Ope,packedOpSnippet:Ppe}),N4={kernelName:yn,backendName:"webgl",kernelFunc:Lpe};var zpe="return (b >= 1.0) ? a : a * (b + 1.0);",Bpe=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,Mpe=r=>{let{inputs:e,backend:t}=r,{dy:o,y:n}=e,s=D().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ni(Bpe,o.shape,n.shape):new Xn(zpe,o.shape,n.shape);return t.runWebGLProgram(s,[o,n],o.dtype)},$4={kernelName:nu,backendName:"webgl",kernelFunc:Mpe};var Vpe=`
  return vec4(equal(a, b));
`,Gpe="return float(a == b);",Upe=st({opSnippet:Gpe,packedOpSnippet:Vpe,dtype:"bool",cpuKernelImpl:cU}),E4={kernelName:bn,backendName:"webgl",kernelFunc:Upe};var Wpe=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${w.ERF_P};
  float a1 = ${w.ERF_A1};
  float a2 = ${w.ERF_A2};
  float a3 = ${w.ERF_A3};
  float a4 = ${w.ERF_A4};
  float a5 = ${w.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,Hpe=be({opSnippet:Wpe}),R4={kernelName:yi,backendName:"webgl",kernelFunc:Hpe};var Kpe=si+`
  return exp(x);
`,qpe=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,_N=be({opSnippet:Kpe,packedOpSnippet:qpe,cpuKernelImpl:pU,dtype:"float32"}),A4={kernelName:yo,backendName:"webgl",kernelFunc:_N};function hS(r){let{inputs:e,attrs:t,backend:o}=r,{dim:n}=t,{input:s}=e,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),oe({inputs:{x:s},backend:o,attrs:{shape:a}})}var D4={kernelName:ls,backendName:"webgl",kernelFunc:hS};var F4="return exp(x) - 1.0;",Xpe=be({opSnippet:F4,packedOpSnippet:F4,cpuKernelImpl:mU}),_4={kernelName:bo,backendName:"webgl",kernelFunc:Xpe};var Vg=class{constructor(e,t,o){this.variableNames=["real","imag"];let n=t[1];this.outputShape=t;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(e==="real")a="return real * expR - imag * expI;";else if(e==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function gS(r,e,t){let o=t.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=oe({inputs:{x:r},backend:t,attrs:{shape:[i,s]}}),l=a.shape,u=new Vg("real",l,e),c=new Vg("imag",l,e),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=t.runWebGLProgram(u,p,"float32"),f=t.runWebGLProgram(c,p,"float32"),d=Uo({inputs:{real:m,imag:f},backend:t});t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f);let h=oe({inputs:{x:d},backend:t,attrs:{shape:r.shape}});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(d),h}function jpe(r){let{inputs:e,backend:t}=r,{input:o}=e;return gS(o,!1,t)}var O4={kernelName:su,backendName:"webgl",kernelFunc:jpe};var xS=class{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Ll(r){let{backend:e,attrs:t}=r,{shape:o,value:n}=t,{dtype:s}=t;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),e.makeTensorInfo(o,s,i)}else{let i=new xS(o,n),a=[[n]];return e.runWebGLProgram(i,[],s,a)}}var P4={kernelName:ma,backendName:"webgl",kernelFunc:Ll};var yS=class{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var L4={kernelName:fa,backendName:"webgl",kernelFunc:({inputs:r,backend:e})=>{let{image:t}=r,o=e,n=new yS(t.shape);return o.runWebGLProgram(n,[t],t.dtype)}};var z4="return floor(x);",Ype=be({opSnippet:z4,packedOpSnippet:z4,cpuKernelImpl:fU}),B4={kernelName:Co,backendName:"webgl",kernelFunc:Ype};var Qpe=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,Zpe=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,Jpe=st({opSnippet:Qpe,packedOpSnippet:Zpe,dtype:"int32"}),M4={kernelName:Cn,backendName:"webgl",kernelFunc:Jpe};var bS=class{constructor(e){this.variableNames=["A"];let t=zt(),[o,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var CS=class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=zt(),[o,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}};var V4={kernelName:pl,backendName:"webgl",kernelFunc:eme},ed,ON=D().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function eme(r){let{inputs:e,backend:t,attrs:o}=r,{pixels:n}=e,{numChannels:s}=o,i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];if(a||i){let h=D().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(ed==null||h!==ON)&&(ON=h,ed=document.createElement("canvas").getContext("2d",{willReadFrequently:ON})),ed.canvas.width=l,ed.canvas.height=u,ed.drawImage(n,0,0,l,u),n=ed.canvas}let m=t.makeTensorInfo(c,"int32");t.texData.get(m.dataId).usage=Ur.PIXELS,t.gpgpu.uploadPixelDataToTexture(t.getTexture(m.dataId),n);let f=D().getBool("WEBGL_PACK")?new CS(p):new bS(p),d=t.runWebGLProgram(f,[m],"int32");return t.disposeData(m.dataId),d}function tme(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:d}=o,h=w.convertConv2DDataFormat(c),g=w.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,h),x,b=[],C=i!=null,S=a!=null,I=f==="leakyrelu",N=()=>{let R=[n,s],F=(_,B)=>{if(B==="NCHW"&&_.shape.length===1&&_.shape[0]!==1){let V=oe({inputs:{x:_},backend:t,attrs:{shape:[_.shape[0],1,1]}});return b.push(V),V}return _};if(C&&R.push(F(i,c)),S&&R.push(F(a,c)),I){let _=t.makeTensorInfo([],"float32",y.createScalarValue(d,"float32"));R.push(_),b.push(_)}return R};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=rS({x:n,filter:s,convInfo:g,backend:t,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:d});else if(g.strideWidth<=2&&h==="channelsLast"&&D().getBool("WEBGL_EXP_CONV")){let R=f?Ol(f,!0):null,F=new Qf(g,C,R,S,I),_=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],B=N();x=t.runWebGLProgram(F,B,"float32",_)}else if(D().getBool("WEBGL_CONV_IM2COL"))x=oS({x:n,filter:s,convInfo:g,backend:t,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:d});else{let R=f?Ol(f,!1):null,F=new Yf(g,C,R,S,I),_=N();x=t.runWebGLProgram(F,_,"float32")}let $=oe({inputs:{x},backend:t,attrs:{shape:g.outShape}});return b.push(x),b.forEach(R=>t.disposeIntermediateTensorInfo(R)),$}var G4={kernelName:Fi,backendName:"webgl",kernelFunc:tme};function rme(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,d=[],h=c;h==null&&(h=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(l,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${h}'`);let g=w.computeConv2DInfo(n.shape,s.shape,l,h,u,p,!0),x=D().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Ol(m,x):null,C=[n,s],S=i!=null,I=a!=null,N=m==="leakyrelu";if(S&&C.push(i),I&&C.push(a),N){let _=t.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));C.push(_),d.push(_)}let $;x?$=new Jf(g,S,b,I,N):$=new Zf(g,S,b,I,N);let R=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],F=t.runWebGLProgram($,C,"float32",R);return d.forEach(_=>t.disposeIntermediateTensorInfo(_)),F}var U4={kernelName:_i,backendName:"webgl",kernelFunc:rme};var wS=class{constructor(e,t,o,n){this.sliceDim=e,this.strides=t,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=Be(t.length),i=Be(o.length),a=this.sliceDim>1?"strides[j]":"strides",l=Be(n.length),u=n.length>1?"paramsShape[j]":"paramsShape";this.userCode=`
        ${s} strides = ${s}(${this.strides});
        ${l} paramsShape = ${l}(${this.paramsShape});
         void main() {
          ${i} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            out_of_bounds = out_of_bounds || index < 0;
            out_of_bounds = out_of_bounds || index >= ${u};
            flattenIndex += index * ${a};
          }
          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function ome(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=w.prepareAndValidate(o,n),m=oe({inputs:{x:n},backend:t,attrs:{shape:[u,i]}}),f=oe({inputs:{x:o},backend:t,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(t.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=t.readSync(n.dataId),b=t.bufferSync(o),C=dU(x,b,o.dtype,u,i,c,p,o.shape,a);return t.makeTensorInfo(l,o.dtype,C.values)}let d=new wS(i,p,[u,c],o.shape),h=t.runWebGLProgram(d,[f,m],f.dtype),g=oe({inputs:{x:h},backend:t,attrs:{shape:l}});return t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(h),g}var W4={kernelName:da,backendName:"webgl",kernelFunc:ome};var SS=class{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let o=Be(this.rank),n=nme(e,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function nme(r,e){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${t[n]}`);return o.join()}function PN(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0];if(D().get("DEBUG")){let b=t.readSync(s.dataId),C=n.shape[l];for(let S=0;S<b.length;++S){let I=b[S];y.assert(I<=C-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${C-1}]`)}}let u=w.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=oe({inputs:{x:n},backend:t,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=oe({inputs:{x:s},backend:t,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let d=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(t.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=t.bufferSync(f),C=t.bufferSync(m),S=hU(C,b,d);return p.forEach(I=>t.disposeIntermediateTensorInfo(I)),t.makeTensorInfo(u.outputShape,S.dtype,S.values)}let h=new SS(m.shape,d),g=t.runWebGLProgram(h,[m,f],m.dtype);p.push(g);let x=oe({inputs:{x:g},backend:t,attrs:{shape:u.outputShape}});return p.forEach(b=>t.disposeIntermediateTensorInfo(b)),x}var H4={kernelName:cs,backendName:"webgl",kernelFunc:PN};var sme="return float(a > b);",ime=`
  return vec4(greaterThan(a, b));
`,ame=st({opSnippet:sme,packedOpSnippet:ime,cpuKernelImpl:gU,dtype:"bool"}),K4={kernelName:wn,backendName:"webgl",kernelFunc:ame};var lme="return float(a >= b);",ume=`
  return vec4(greaterThanEqual(a, b));
`,cme=st({opSnippet:lme,packedOpSnippet:ume,dtype:"bool",cpuKernelImpl:xU}),q4={kernelName:wo,backendName:"webgl",kernelFunc:cme};function pme(r){let{inputs:e,backend:t}=r,{input:o}=e;return gS(o,!0,t)}var X4={kernelName:iu,backendName:"webgl",kernelFunc:pme};var mme="return float(!isnan(x) && !isinf(x));",fme=be({opSnippet:mme,dtype:"bool"}),j4={kernelName:bi,backendName:"webgl",kernelFunc:fme};var dme="return float(isinf(x));",hme=be({opSnippet:dme,dtype:"bool"}),Y4={kernelName:Ci,backendName:"webgl",kernelFunc:hme};var gme="return float(isnan(x));",xme=be({opSnippet:gme,dtype:"bool"}),Q4={kernelName:Sn,backendName:"webgl",kernelFunc:xme};var yme="return float(a < b);",bme=`
  return vec4(lessThan(a, b));
`,Cme=st({opSnippet:yme,packedOpSnippet:bme,cpuKernelImpl:yU,dtype:"bool"}),Z4={kernelName:In,backendName:"webgl",kernelFunc:Cme};var wme="return float(a <= b);",Sme=`
  return vec4(lessThanEqual(a, b));
`,Ime=st({opSnippet:wme,packedOpSnippet:Sme,cpuKernelImpl:bU,dtype:"bool"}),J4={kernelName:vn,backendName:"webgl",kernelFunc:Ime};function vme(r){let{backend:e,attrs:t}=r,{start:o,stop:n,num:s}=t,i=CU(o,n,s);return e.makeTensorInfo([i.length],"float32",i)}var eH={kernelName:au,backendName:"webgl",kernelFunc:vme};var Tme=si+`
  return x < 0.0 ? 0./0. : log(x);
`,kme=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,Nme=be({opSnippet:Tme,packedOpSnippet:kme,cpuKernelImpl:wU}),tH={kernelName:Io,backendName:"webgl",kernelFunc:Nme};var $me=si+`
  return log(1.0 + x);
`,Eme=be({opSnippet:$me}),rH={kernelName:wi,backendName:"webgl",kernelFunc:Eme};var Rme="return float(a >= 1.0 && b >= 1.0);",Ame=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,Dme=st({opSnippet:Rme,packedOpSnippet:Ame,dtype:"bool"}),oH={kernelName:Si,backendName:"webgl",kernelFunc:Dme};var Fme="return float(!(x >= 1.0));",_me=be({opSnippet:Fme}),nH={kernelName:Ii,backendName:"webgl",kernelFunc:_me};var Ome="return float(a >= 1.0 || b >= 1.0);",Pme=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,Lme=st({opSnippet:Ome,packedOpSnippet:Pme,dtype:"bool"}),sH={kernelName:cl,backendName:"webgl",kernelFunc:Lme};var IS=class{constructor(e,t,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=t,a=e[3]-1;this.outputShape=e;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var vS=class{constructor(e,t,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=t,a=e[3]-1;this.outputShape=e;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var zme=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=D().getBool("WEBGL_PACK_NORMALIZATION")?new vS(n.shape,s,i,a,l):new IS(n.shape,s,i,a,l);return t.runWebGLProgram(u,[n],n.dtype)},iH={kernelName:ga,backendName:"webgl",kernelFunc:zme};var TS=class{constructor(e,t,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var Bme=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n,y:s,dy:i}=e,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new TS(n.shape,a,l,u,c);return t.runWebGLProgram(p,[n,s,i],n.dtype)},aH={kernelName:lu,backendName:"webgl",kernelFunc:Bme};function lH(r,e,t,o){let n=y.sizeFromShape(e),i=y.sizeFromShape(r.shape)/n,a=oe({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=sn(a,r.dtype,"max",o),u=oe({inputs:{x:l},attrs:{shape:t},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function LN(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=c!=null,m=t.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let C=t.texData.get(f.dataId).values,S=new Array(a);for(let $=0;$<S.length;$++)S[$]=n.shape[c[$]];let I=Np(C,n.shape,n.dtype,c,S);f=t.makeTensorInfo(S,n.dtype);let N=t.texData.get(f.dataId);N.values=I}else f=mc(n,c,t);u=w.getInnerMostAxes(u.length,a)}w.assertAxesAreInnerMostDims("max",u,a);let[d,h]=w.computeOutAndReduceShapes(f.shape,u),g=d;i&&(g=w.expandShapeToKeepDim(d,l));let x;if(m){let C=t.texData.get(f.dataId).values,S=SU(C,y.sizeFromShape(h),g,n.dtype);x=t.makeTensorInfo(g,n.dtype);let I=t.texData.get(x.dataId);I.values=S}else x=lH(f,h,g,t);return p&&t.disposeIntermediateTensorInfo(f),x}var uH={kernelName:ms,backendName:"webgl",kernelFunc:LN};var Mme=A0+`
  return max(a, b);
`,Vme=`
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+pc+`
  return result;
`,Gme=st({opSnippet:Mme,packedOpSnippet:Vme,cpuKernelImpl:IU}),cH={kernelName:vo,backendName:"webgl",kernelFunc:Gme};function Ume(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e;nl(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return Zt({inputs:{x:n},backend:t});let p=new Zi(c,"max",!1);return t.runWebGLProgram(p,[n],n.dtype)}var pH={kernelName:fs,backendName:"webgl",kernelFunc:Ume};function Wme(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=w.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new fc(p,"max",!1);return t.runWebGLProgram(m,[n],n.dtype)}var mH={kernelName:xa,backendName:"webgl",kernelFunc:Wme};var kS=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,o=e.strideWidth,n=e.dilationHeight,s=e.effectiveFilterHeight,i=e.effectiveFilterWidth,a=s-1-e.padInfo.top,l=i-1-e.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},NS=class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,o=e.strideHeight,n=e.strideWidth,s=e.dilationDepth,i=e.dilationHeight,a=e.dilationWidth,l=e.effectiveFilterDepth,u=e.effectiveFilterHeight,c=e.effectiveFilterWidth,p=l-1-e.padInfo.front,m=u-1-e.padInfo.top,f=c-1-e.padInfo.left,d=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${d} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Hme(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s}=e,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=w.computePool3DInfo(i.shape,a,l,p,u,c),f=new fc(m,"max",!0),d=t.runWebGLProgram(f,[i],i.dtype),h=new NS(m),g=t.runWebGLProgram(h,[n,d],i.dtype);return t.disposeIntermediateTensorInfo(d),g}var fH={kernelName:cu,backendName:"webgl",kernelFunc:Hme};function Kme(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,input:s,output:i}=e,a=s;nl([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=w.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,d=new Zi(m,"max",f),h=t.runWebGLProgram(d,[a],a.dtype),g=new kS(m),x=t.runWebGLProgram(g,[n,h],a.dtype);return t.disposeIntermediateTensorInfo(h),x}var dH={kernelName:uu,backendName:"webgl",kernelFunc:Kme};function hH(r,e,t,o){let n=new Zi(t,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new Zi(t,"max",!0,!0,e);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var gH={kernelName:pu,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=e,l=t;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(w.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=w.computePool2DInfo(o.shape,n,s,u,i),[p,m]=hH(o,a,c,l);return[p,m]}};function xH(r,e,t,o){let n=y.sizeFromShape(e),i=y.sizeFromShape(r.shape)/n,a=oe({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=sn(a,"float32","mean",o),u=oe({inputs:{x:l},attrs:{shape:t},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var yH={kernelName:ds,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{keepDims:n,axis:s}=e,i=t,a=o.shape.length,l=y.parseAxisParam(s,o.shape),u=l,c=w.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],d=o;if(p){if(m){let S=i.texData.get(d.dataId).values,I=new Array(a);for(let R=0;R<I.length;R++)I[R]=o.shape[c[R]];let N=Np(S,o.shape,o.dtype,c,I);d=i.makeTensorInfo(I,o.dtype);let $=i.texData.get(d.dataId);$.values=N}else d=mc(o,c,i);f.push(d),u=w.getInnerMostAxes(u.length,a)}w.assertAxesAreInnerMostDims("sum",u,a);let[h,g]=w.computeOutAndReduceShapes(d.shape,u),x=h;n&&(x=w.expandShapeToKeepDim(h,l));let b=xH(d,g,x,i);for(let C of f)i.disposeIntermediateTensorInfo(C);return b}};function qme(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=w.getAxesPermutation(u,a),p=n;c!=null&&(p=Rt({inputs:{x:n},backend:t,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,n.shape.length)),w.assertAxesAreInnerMostDims("min",u,a);let[m,f]=w.computeOutAndReduceShapes(p.shape,u),d=y.sizeFromShape(f),h=oe({inputs:{x:p},backend:t,attrs:{shape:[-1,d]}}),g=sn(h,h.dtype,"min",t),x;if(i){let b=w.expandShapeToKeepDim(m,l);x=oe({inputs:{x:g},backend:t,attrs:{shape:b}})}else x=oe({inputs:{x:g},backend:t,attrs:{shape:m}});return t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(g),c!=null&&t.disposeIntermediateTensorInfo(p),x}var bH={kernelName:hs,backendName:"webgl",kernelFunc:qme};var Xme=A0+`
  return min(a, b);
`,jme=`
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  `+pc+`
  return result;
`,Yme=st({opSnippet:Xme,packedOpSnippet:jme,cpuKernelImpl:vU}),CH={kernelName:To,backendName:"webgl",kernelFunc:Yme};var $S=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=t.map((c,p)=>c[0]+e[p]+c[1]);let n=e.length,s=Be(n),i=t.map(c=>c[0]).join(","),a=t.map((c,p)=>c[0]+e[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var ES=class{constructor(e,t,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((d,h)=>d[0]+e[h]+d[1]);let n=e.length,s=Be(n),i=t.map(d=>d[0]).join(","),a=t.map((d,h)=>d[0]+e[h]).join(","),l=Qt("rc",n),u=Qt("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let d=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${d}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${d}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let d=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${d}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${d}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${d}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${d}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var Qme=({inputs:r,backend:e,attrs:t})=>{let{x:o}=r,{paddings:n,mode:s}=t,i=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ES(o.shape,n,s):new $S(o.shape,n,s);return e.runWebGLProgram(i,[o],o.dtype)},wH={kernelName:gs,backendName:"webgl",kernelFunc:Qme};var Zme=`if (b == 0.0) return NAN;
  return mod(a, b);`,Jme=`
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  `+pc+`
  return result;
`,efe=st({opSnippet:Zme,packedOpSnippet:Jme}),SH={kernelName:vi,backendName:"webgl",kernelFunc:efe};var RS=class{constructor(e,t,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}};var tfe=`
if (a == b) {
  return 1.0;
};
return a / b;`,rfe=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,zN=st({opSnippet:tfe,packedOpSnippet:rfe,checkOutOfBounds:!0}),IH={kernelName:xn,backendName:"webgl",kernelFunc:zN};var vH="return a - b;",BN=st({opSnippet:vH,packedOpSnippet:vH,supportsComplex:!0,cpuKernelImpl:GU}),TH={kernelName:Ao,backendName:"webgl",kernelFunc:BN};function MN(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=LN({inputs:{x:n},backend:t,attrs:{reductionIndices:i,keepDims:!1}}),l=w.expandShapeToKeepDim(a.shape,i),u=oe({inputs:{x:a},backend:t,attrs:{shape:l}}),c=BN({inputs:{a:n,b:u},backend:t}),p=_N({inputs:{x:c},backend:t}),m=Rp({inputs:{x:p},backend:t,attrs:{axis:i,keepDims:!1}}),f=oe({inputs:{x:m},backend:t,attrs:{shape:l}}),d=zN({inputs:{a:p,b:f},backend:t});return t.disposeIntermediateTensorInfo(a),t.disposeIntermediateTensorInfo(u),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(p),t.disposeIntermediateTensorInfo(m),t.disposeIntermediateTensorInfo(f),d}var kH={kernelName:$s,backendName:"webgl",kernelFunc:MN};function ofe(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{numSamples:s,seed:i,normalized:a}=o,l=a?n:MN({inputs:{logits:n},backend:t,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new RS(u,c,s),m=[[i]],f=t.runWebGLProgram(p,[l],"int32",m);return a||t.disposeIntermediateTensorInfo(l),f}var NH={kernelName:mu,backendName:"webgl",kernelFunc:ofe};var nfe=hr+`
  return -x;
`,sfe=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function ife(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])){let s=t.texData.get(o.dataId),[i,a]=kU(s.values,o.shape,o.dtype);return t.makeTensorInfo(a,o.dtype,i)}let n;return D().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new qn(o.shape,sfe):n=new Zr(o.shape,nfe),t.runWebGLProgram(n,[o],o.dtype)}var $H={kernelName:Tn,backendName:"webgl",kernelFunc:ife};var afe=vt.nonMaxSuppressionV3Impl;function lfe(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=t.readSync(n.dataId),c=t.readSync(s.dataId),{selectedIndices:p}=afe(u,c,i,a,l);return t.makeTensorInfo([p.length],"int32",new Int32Array(p))}var EH={kernelName:ya,backendName:"webgl",kernelFunc:lfe};var ufe=vt.nonMaxSuppressionV4Impl;function cfe(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=t.readSync(n.dataId),p=t.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=ufe(c,p,i,a,l,u);return[t.makeTensorInfo([m.length],"int32",new Int32Array(m)),t.makeTensorInfo([],"int32",new Int32Array([f]))]}var RH={kernelName:fu,backendName:"webgl",kernelFunc:cfe};var pfe=vt.nonMaxSuppressionV5Impl;function mfe(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=t.readSync(n.dataId),p=t.readSync(s.dataId),m=i,f=a,d=l,h=u,{selectedIndices:g,selectedScores:x}=pfe(c,p,m,f,d,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var AH={kernelName:ba,backendName:"webgl",kernelFunc:mfe};var AS=class{constructor(e,t,o,n){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var ffe=r=>{let{inputs:e,backend:t,attrs:o}=r,{indices:n}=e,{dtype:s,depth:i,onValue:a,offValue:l}=o,u=y.sizeFromShape(n.shape),c=new AS(u,i,a,l),p=oe({inputs:{x:n},backend:t,attrs:{shape:[u]}}),m=t.runWebGLProgram(c,[p],s);t.disposeIntermediateTensorInfo(p);let f=[...n.shape,i],d=oe({inputs:{x:m},backend:t,attrs:{shape:f}});return t.disposeIntermediateTensorInfo(m),d},DH={kernelName:Ca,backendName:"webgl",kernelFunc:ffe};function Gg(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="complex64"){let n=Pl({inputs:{input:o},backend:t}),s=Gg({inputs:{x:n},backend:t}),i=Dp({inputs:{input:o},backend:t}),a=Gg({inputs:{x:i},backend:t}),l=Uo({inputs:{real:s,imag:a},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(a),l}else return Ll({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:t})}var FH={kernelName:Rs,backendName:"webgl",kernelFunc:Gg};function _H(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Pl({inputs:{input:o},backend:t}),s=_H({inputs:{x:n},backend:t}),i=Dp({inputs:{input:o},backend:t}),a=Gg({inputs:{x:i},backend:t}),l=Uo({inputs:{real:s,imag:a},backend:t});return t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(s),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(a),l}else return Ll({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:t})}var OH={kernelName:xs,backendName:"webgl",kernelFunc:_H};function dfe(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return hS({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,i=e[0].dtype;e.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=e.map(c=>{let p=hS({inputs:{input:c},backend:t,attrs:{dim:n}});return a.push(p),p}),u=FN({inputs:l,backend:t,attrs:{axis:n}});return a.forEach(c=>t.disposeIntermediateTensorInfo(c)),u}var PH={kernelName:ys,backendName:"webgl",kernelFunc:dfe};var DS=class{constructor(e,t,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((u,c)=>u[0]+e[c]+u[1]);let n=e.length,s=Be(n),i=t.map(u=>u[0]).join(","),a=t.map((u,c)=>u[0]+e[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var FS=class{constructor(e,t,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((h,g)=>h[0]+e[g]+h[1]);let n=e.length,s=Be(n),i=t.map(h=>h[0]).join(","),a=t.map((h,g)=>h[0]+e[g]).join(","),l=Qt("rc",n),u=Qt("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="";for(let h=0,g=n===1?2:4;h<g;h++)d+=`
        ${m[h]}
        if (${f}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${p});
        }
      `;d+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}};var VN=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:i}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return Ll({backend:t,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new FS(n.shape,s,i):new DS(n.shape,s,i),l=[[i]];return t.runWebGLProgram(a,[n],n.dtype,l)},LH={kernelName:bs,backendName:"webgl",kernelFunc:VN};var hfe=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,gfe=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  `+pc+`
  return result;
`,xfe=st({opSnippet:hfe,packedOpSnippet:gfe}),zH={kernelName:Nn,backendName:"webgl",kernelFunc:xfe};function yfe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=y.parseAxisParam(s,n.shape),c=u,p=w.getAxesPermutation(c,a),m=n;p!=null&&(m=Rt({inputs:{x:n},backend:t,attrs:{perm:p}}),c=w.getInnerMostAxes(c.length,a),l.push(m)),w.assertAxesAreInnerMostDims("prod",c,a);let f;if(t.shouldExecuteOnCPU([m])){let d=t.texData.get(m.dataId).values,{outVals:h,outShape:g,outDtype:x}=$U(m.shape,m.dtype,d,c);f=t.makeTensorInfo(g,x,h)}else{let[d,h]=w.computeOutAndReduceShapes(m.shape,c),g=y.sizeFromShape(h),x=oe({inputs:{x:m},backend:t,attrs:{shape:[-1,g]}}),b=Do(n.dtype),C=sn(x,b,"prod",t);f=oe({inputs:{x:C},backend:t,attrs:{shape:d}}),l.push(x),l.push(C)}if(i){l.push(f);let d=w.expandShapeToKeepDim(f.shape,u);f=oe({inputs:{x:f},backend:t,attrs:{shape:d}})}return l.forEach(d=>t.disposeIntermediateTensorInfo(d)),f}var BH={kernelName:$n,backendName:"webgl",kernelFunc:yfe};function bfe(r){let{inputs:e,backend:t,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=e,{rowPartitionTypes:l}=o,u=t.readSync(n.dataId),c=t.readSync(s.dataId),p=t.readSync(i.dataId),m=a.map(g=>t.readSync(g.dataId)),f=a.map(g=>g.shape),[d,h]=EU(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return t.makeTensorInfo(d,s.dtype,h)}var MH={kernelName:du,backendName:"webgl",kernelFunc:bfe};var GN=r=>{let{backend:e,attrs:t}=r,{start:o,stop:n,step:s,dtype:i}=t,a=RU(o,n,s,i);return e.makeTensorInfo([a.length],i,a)},VH={kernelName:wa,backendName:"webgl",kernelFunc:GN};var Cfe="return 1.0 / x;",wfe=be({opSnippet:Cfe}),GH={kernelName:En,backendName:"webgl",kernelFunc:wfe};var Sfe=hr+`
  return (x < 0.0) ? 0.0 : x;
`,Ife=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,vfe=be({opSnippet:Sfe,packedOpSnippet:Ife}),UH={kernelName:Rn,backendName:"webgl",kernelFunc:vfe};var Tfe=hr+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,kfe=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Nfe=be({opSnippet:Tfe,packedOpSnippet:kfe}),WH={kernelName:An,backendName:"webgl",kernelFunc:Nfe};var _S=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var OS=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function $fe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=D().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new OS(n.shape,l,u,s,i):new _S(n.shape,l,u,s,i);return t.runWebGLProgram(c,[n],"float32")}var HH={kernelName:Is,backendName:"webgl",kernelFunc:$fe};var PS=class{constructor(e,t,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,s]=t,[,i,a]=e,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,d=Math.ceil(m)*2+2,h=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${d});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function Efe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:i}=o,a=new PS(s.shape,n.shape,i);return t.runWebGLProgram(a,[s],s.dtype)}var KH={kernelName:gu,backendName:"webgl",kernelFunc:Efe};var LS=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var zS=class{constructor(e,t,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=e;this.outputShape=[i,t,o,u];let c=[n&&t>1?a-1:a,n&&o>1?l-1:l],p=[n&&t>1?t-1:t,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function Rfe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=D().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new zS(n.shape,l,u,s,i):new LS(n.shape,l,u,s,i);return t.runWebGLProgram(c,[n],n.dtype)}var qH={kernelName:Ss,backendName:"webgl",kernelFunc:Rfe};var BS=class{constructor(e,t,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,s]=t,[,i,a]=e,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,d=Math.ceil(m)*2+2,h=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${d});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function Afe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n,dy:s}=e,{alignCorners:i}=o,a=new BS(s.shape,n.shape,i);return t.runWebGLProgram(a,[s],s.dtype)}var XH={kernelName:hu,backendName:"webgl",kernelFunc:Afe};var MS=class{constructor(e,t){this.variableNames=["x"];let o=e.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=e,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let n=a=>t.indexOf(a)!==-1&&e[a]!==1?`${e[a]} - coords[${a}] - 1`:`coords[${a}]`,s=e.map((a,l)=>n(l)).join(","),i=Be(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var VS=class{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=e.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=e;let n=Qt("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=Be(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(d){return m(d)}function u(d){return d[o-1]="("+d[o-1]+" + 1)",m(d)}function c(d){return d[o-2]="("+d[o-2]+" + 1)",m(d)}function p(d){return d[o-1]="("+d[o-1]+" + 1)",d[o-2]="("+d[o-2]+" + 1)",m(d)}function m(d){let h=e.map((b,C)=>f(C,d)),g=h.join(","),x=h.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function f(d,h){return t.indexOf(d)!==-1&&e[d]!==1?`${e[d]} - ${h[d]} - 1`:`${h[d]}`}}};function Dfe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dims:s}=o,i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return Zt({inputs:{x:n},backend:t});let l=D().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new VS(n.shape,a):new MS(n.shape,a);return t.runWebGLProgram(l,[n],n.dtype)}var jH={kernelName:Sa,backendName:"webgl",kernelFunc:Dfe};var GS=class{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=e[1],n=e[2];this.outputShape=e;let s="";typeof t=="number"?s=`float outputValue = ${t.toFixed(2)};`:s=`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var YH={kernelName:Aa,backendName:"webgl",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=e,a=t,l=new GS(o.shape,s),[u,c]=w.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var Ffe=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,_fe=be({opSnippet:Ffe}),QH={kernelName:ki,backendName:"webgl",kernelFunc:_fe};var Ofe="return inversesqrt(x);",Pfe=be({opSnippet:Ofe,cpuKernelImpl:AU}),ZH={kernelName:No,backendName:"webgl",kernelFunc:Pfe};var td=class{constructor(e,t,o,n,s,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=Be(s.length),u=Be(i.length),c="";o===1?c="i":o===2&&(c="i, j");let p=`getIndices(${c})`,m="";n===1?m="i":n===2&&(m="i, coords[1]");let f=`getUpdates(${m})`,d=t>1?"strides[j]":"strides";this.userCode=`
        ${l} strides = ${l}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${d};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}};function Lfe(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=w.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return t.makeTensorInfo(i,n.dtype);let f=oe({inputs:{x:n},backend:t,attrs:{shape:[l,a]}}),d=oe({inputs:{x:s},backend:t,attrs:{shape:[l,u]}}),h=t.makeTensorInfo([],"float32",new Float32Array([0])),g=new td(l,a,f.shape.length,d.shape.length,c,m),x=t.runWebGLProgram(g,[d,f,h],d.dtype),b=oe({inputs:{x},backend:t,attrs:{shape:i}});return t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(d),t.disposeIntermediateTensorInfo(x),t.disposeIntermediateTensorInfo(h),b}var JH={kernelName:Ia,backendName:"webgl",kernelFunc:Lfe};var US=class{constructor(e,t,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=D().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function zfe(r){let{inputs:e,backend:t,attrs:o}=r,{sortedSequence:n,values:s}=e,{side:i}=o,a=new US(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return t.runWebGLProgram(a,[n,s],"int32",l)}var eK={kernelName:xu,backendName:"webgl",kernelFunc:zfe};var WS=class{constructor(e,t,o){this.variableNames=["c","a","b"],this.outputShape=t;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<t.length;c++)u.push(`${a[c]}`),c<e&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=Be(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function Bfe(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e,i=new WS(o.shape.length,n.shape,n.shape.length);return t.runWebGLProgram(i,[o,n,s],Ye(n.dtype,s.dtype))}var tK={kernelName:vs,backendName:"webgl",kernelFunc:Bfe};var Mfe=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${w.SELU_SCALEALPHA};
  float scale = ${w.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,Vfe=be({opSnippet:Mfe}),rK={kernelName:Ni,backendName:"webgl",kernelFunc:Vfe};var Gfe=si+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,Ufe=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Wfe=be({opSnippet:Gfe,packedOpSnippet:Ufe,cpuKernelImpl:FU}),oK={kernelName:$o,backendName:"webgl",kernelFunc:Wfe};var Hfe=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,Kfe=be({opSnippet:Hfe}),nK={kernelName:$i,backendName:"webgl",kernelFunc:Kfe};var qfe=si+`
  return sin(x);
`,Xfe=be({opSnippet:qfe}),sK={kernelName:Fn,backendName:"webgl",kernelFunc:Xfe};var jfe=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,Yfe=be({opSnippet:jfe}),iK={kernelName:_n,backendName:"webgl",kernelFunc:Yfe};var Qfe=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,Zfe=be({opSnippet:Qfe}),aK={kernelName:Ei,backendName:"webgl",kernelFunc:Zfe};var Jfe=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=VN({inputs:{x:n},backend:t,attrs:{paddings:l,constantValue:0}}),p=w.getReshaped(c.shape,s,a,!1),m=w.getPermuted(p.length,s.length,!1),f=w.getReshapedPermuted(c.shape,s,a,!1),d=oe({inputs:{x:c},backend:t,attrs:{shape:p}}),h=Rt({inputs:{x:d},backend:t,attrs:{perm:m}}),g=oe({inputs:{x:h},backend:t,attrs:{shape:f}});return u.push(c),u.push(d),u.push(h),u.forEach(x=>t.disposeIntermediateTensorInfo(x)),g},lK={kernelName:ks,backendName:"webgl",kernelFunc:Jfe};function ede(r){let{inputs:e,backend:t}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=e;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=t.readSync(o.dataId),l=t.readSync(n.dataId),u=t.readSync(s.dataId),c=t.readSync(i.dataId)[0],[p,m,f,d,h]=OU(a,o.shape,o.dtype,l,n.dtype,u,c);return[t.makeTensorInfo(m,o.dtype,p),t.makeTensorInfo([m[0]],n.dtype,f),t.makeTensorInfo([d.length],"bool",new Uint8Array(d.map(g=>Number(g)))),t.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var uK={kernelName:yu,backendName:"webgl",kernelFunc:ede};function tde(r){let{inputs:e,backend:t}=r,{inputIndices:o,inputShape:n,newShape:s}=e;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(t.readSync(n.dataId)),a=t.readSync(o.dataId),l=Array.from(t.readSync(s.dataId)),[u,c,p]=PU(a,o.shape,o.dtype,i,l);return[t.makeTensorInfo(c,o.dtype,u),t.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var cK={kernelName:bu,backendName:"webgl",kernelFunc:tde};function rde(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=t.readSync(o.dataId),a=t.readSync(n.dataId),l=t.readSync(s.dataId),[u,c]=k0(i,o.shape,o.dtype,a,l,!0);return t.makeTensorInfo(c,o.dtype,u)}var pK={kernelName:Cu,backendName:"webgl",kernelFunc:rde};function ode(r){let{inputs:e,backend:t}=r,{data:o,indices:n,segmentIds:s}=e;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=t.readSync(o.dataId),a=t.readSync(n.dataId),l=t.readSync(s.dataId),[u,c]=k0(i,o.shape,o.dtype,a,l);return t.makeTensorInfo(c,o.dtype,u)}var mK={kernelName:wu,backendName:"webgl",kernelFunc:ode};function nde(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=e,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=w.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let x=t.bufferSync(n),b=t.bufferSync(s),C=y.decodeString(t.readSync(i.dataId)[0]),S=DU(x,b,a,m,c,u,l,p,C,f);return t.makeTensorInfo(a,S.dtype,S.values)}let d=new td(u,l,n.shape.length,s.shape.length,p,[m,1],f),h=t.runWebGLProgram(d,[s,n,i],s.dtype),g=oe({inputs:{x:h},backend:t,attrs:{shape:a}});return t.disposeIntermediateTensorInfo(h),g}var fK={kernelName:va,backendName:"webgl",kernelFunc:nde};function sde(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=w.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let d=Ji({inputs:{x:n},backend:t,attrs:{begin:c,size:f}});return c[a]+=m,d})}var dK={kernelName:Ns,backendName:"webgl",kernelFunc:sde};var hK="return sqrt(x);",ide=be({opSnippet:hK,packedOpSnippet:hK,cpuKernelImpl:LU}),gK={kernelName:Eo,backendName:"webgl",kernelFunc:ide};var ade="return x * x;",lde=be({opSnippet:ade}),xK={kernelName:Ta,backendName:"webgl",kernelFunc:lde};var yK="return (a - b) * (a - b);",ude=st({opSnippet:yK,packedOpSnippet:yK}),bK={kernelName:Ro,backendName:"webgl",kernelFunc:ude};function cde({inputs:r,attrs:e,backend:t}){let{x:o}=r,n=hr+`
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `,s=new Zr(o.shape,n);return t.runWebGLProgram(s,[o],o.dtype)}var CK={kernelName:Ai,backendName:"webgl",kernelFunc:cde};var HS=class{constructor(e,t,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=Be(o.length),i=Be(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${e});
      ${s} strides = ${s}(${t});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function pde(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:d,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=rt.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(h)I=oe({inputs:{x:n},backend:t,attrs:{shape:d}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let $=rt.computeOutShape(b,C,S),R=Ji({inputs:{x:n},backend:t,attrs:{begin:b,size:$}});I=oe({inputs:{x:R},backend:t,attrs:{shape:d}}),t.disposeIntermediateTensorInfo(R)}else if(t.shouldExecuteOnCPU([n])){let R=t.readSync(n.dataId),F=te(n.shape,n.dtype,R),_=zU(f,F,S,b);I=t.makeTensorInfo(d,n.dtype,_.values)}else{let R=new HS(b,S,f);I=t.runWebGLProgram(R,[n],n.dtype)}let N=oe({inputs:{x:I},backend:t,attrs:{shape:d}});return t.disposeIntermediateTensorInfo(I),N}var wK={kernelName:ka,backendName:"webgl",kernelFunc:pde};function mde(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=e,m=t.readSync(c.dataId),f=t.readSync(p.dataId),[d,h]=BU(m,f,n,s,i,a,l,u);return[t.makeTensorInfo([d.length],"string",d),t.makeTensorInfo(p.shape,"int32",h)]}var SK={kernelName:Na,backendName:"webgl",kernelFunc:mde};function fde(r){let{inputs:e,backend:t,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=t.readSync(s.dataId),l=t.readSync(i.dataId)[0],[u,c,p]=MU(a,l,n),m=c.length;return[t.makeTensorInfo([m,2],"int32",u),t.makeTensorInfo([m],"string",c),t.makeTensorInfo([2],"int32",new Int32Array(p))]}var IK={kernelName:Su,backendName:"webgl",kernelFunc:fde};function dde(r){let{inputs:e,backend:t,attrs:o}=r,{numBuckets:n}=o,{input:s}=e;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=t.readSync(s.dataId),a=VU(i,n);return t.makeTensorInfo(s.shape,"int32",a)}var vK={kernelName:Iu,backendName:"webgl",kernelFunc:dde};var hde="return tan(x);",gde=be({opSnippet:hde}),TK={kernelName:Ri,backendName:"webgl",kernelFunc:gde};var xde=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,yde=be({opSnippet:xde}),kK={kernelName:On,backendName:"webgl",kernelFunc:yde};var KS=class{constructor(e,t){this.variableNames=["A"];let o=new Array(e.length);for(let i=0;i<o.length;i++)o[i]=e[i]*t[i];this.outputShape=o,this.rank=o.length;let n=Be(this.rank),s=bde(e);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function bde(r){let e=r.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(e===1)return`imod(resRC, ${r[0]})`;let t=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${t[n]}, ${r[n]})`);return o.join()}function UN(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=t.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=te(n.shape,n.dtype,u),p=UU(c,s);return t.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new KS(n.shape,s);return t.runWebGLProgram(i,[n],n.dtype)}var NK={kernelName:Ko,backendName:"webgl",kernelFunc:UN};var qS=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},XS=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function _p(r,e){e!==null&&r.disposeIntermediateTensorInfo(e)}function $K(r){let e=1;for(;e<r;)e*=2;return e}function Cde(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:i}=o,a=D().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=D().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(t.shouldExecuteOnCPU([n])||c<a||s>l){let _=t.readSync(n.dataId),[B,V]=WU(_,u,n.dtype,s,i);return[t.makeTensorInfo(B.shape,B.dtype,B.values),t.makeTensorInfo(V.shape,V.dtype,V.values)]}if(s===0)return u[u.length-1]=0,[t.makeTensorInfo(u,n.dtype,[]),t.makeTensorInfo(u,"int32",[])];if(c===1)return[n,Ll({attrs:{shape:u,dtype:"int32",value:0},backend:t})];let p=t.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?t.unpackTensor(n):n,h=y.sizeFromShape(u)/c,g=oe({inputs:{x:f},attrs:{shape:[h,c]},backend:t});m&&_p(t,f);let x=$K(s),b=$K(c),C=null,S=()=>C===null?[g,g]:[g,C],I=(_,B,V)=>{let G=S(),W=new qS(V),K=[[c],[C===null?1:0],[Number.NEGATIVE_INFINITY],[_],[B]],X=C;C=t.runWebGLProgram(W,G,"int32",K),_p(t,X)};for(let _=1;_<x;_*=2){let B=_*2;for(let V=_;V>=1;V/=2)I(B,V,[h,b])}for(let _=b;_>x;_/=2){let B=S(),V=new XS([h,_/2]),W=[[c],[C===null?1:0],[x]],U=C;C=t.runWebGLProgram(V,B,"int32",W),_p(t,U);let K=x/2,X=K*2;for(let H=K;H>=1;H/=2)I(X,H,C.shape)}let N=C;C=Ji({inputs:{x:C},backend:t,attrs:{begin:0,size:[h,s]}}),_p(t,N);let $=PN({inputs:{x:g,indices:C},backend:t,attrs:{axis:1,batchDims:1}});_p(t,g);let R=u.slice(0,-1);R.push(s),N=C,C=oe({inputs:{x:C},attrs:{shape:R},backend:t}),_p(t,N);let F=$;return $=oe({inputs:{x:$},attrs:{shape:R},backend:t}),_p(t,F),[$,C]}var EK={kernelName:$a,backendName:"webgl",kernelFunc:Cde};var jS=class{constructor(e,t,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function wde(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,transforms:s}=e,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[d,h]=u??[p,m],g=[c,d,h,f],x=new jS(p,m,i,a,l,g);return t.runWebGLProgram(x,[n,s],"float32")}var RK={kernelName:Ea,backendName:"webgl",kernelFunc:wde};function Sde(r){let{inputs:e,attrs:t,backend:o}=r,{axis:n}=t,{x:s}=e;nl(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=HU(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var AK={kernelName:vu,backendName:"webgl",kernelFunc:Sde};function Ide(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let h=0;h<a;h++)h!==s&&(u[c++]=i.shape[h]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let d=new Array(l);for(let h=0;h<d.length;h++){m[s]=h;let g=Ji({inputs:{x:i},backend:t,attrs:{begin:m,size:f}}),x=oe({inputs:{x:g},backend:t,attrs:{shape:u}});d[h]=x,p.push(g)}return p.forEach(h=>t.disposeIntermediateTensorInfo(h)),d}var DK={kernelName:Es,backendName:"webgl",kernelFunc:Ide};var YS=class{constructor(e,t){this.variableNames=["x","segmentIds"];let o=e.windowSize,n=e.batchSize,s=e.inSize,i=e.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let d="";s%o>0&&(d=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${d}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function vde(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,segmentIds:s}=e,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=w.getAxesPermutation([u],a),p=n;c!=null&&(p=Rt({inputs:{x:n},backend:t,attrs:{perm:c}}),l.push(p),u=w.getInnerMostAxes(1,a)[0]);let m=w.segment_util.computeOutShape(p.shape,u,i),f=y.sizeFromShape([p.shape[u]]),d=oe({inputs:{x:p},backend:t,attrs:{shape:[-1,f]}});l.push(d);let h=Do(n.dtype),g=(S,I,N,$,R)=>{let F=S.shape[0],_=S.shape[1],B=w.segment_util.segOpComputeOptimalWindowSize(_,R),V={windowSize:B,inSize:_,batchSize:F,numSegments:R},G=new YS(V,I),W=t.compileAndRun(G,[S,N],$);if(l.push(W),W.shape[1]===R)return W;let U=GN({backend:t,attrs:{start:0,stop:R,step:1,dtype:"float32"}}),K=UN({inputs:{x:U},backend:t,attrs:{reps:[_/B]}});return l.push(U),l.push(K),g(W,I,K,$,R)},x=g(d,"unsortedSegmentSum",s,h,i),b=oe({inputs:{x},backend:t,attrs:{shape:m}}),C=b;if(c!=null){l.push(b);let S=w.getUndoAxesPermutation(c);C=Rt({inputs:{x:C},backend:t,attrs:{perm:S}})}return l.forEach(S=>t.disposeIntermediateTensorInfo(S)),C}var FK={kernelName:Ra,backendName:"webgl",kernelFunc:vde};var Tde=[CW,SW,IW,vW,kW,NW,$W,EW,DW,FW,_W,OW,PW,LW,zW,BW,MW,VW,GW,UW,WW,KW,qW,XW,ZW,e4,t4,lW,o4,s4,i4,a4,l4,u4,c4,p4,m4,f4,d4,x4,y4,b4,C4,w4,S4,I4,v4,T4,k4,N4,$4,E4,R4,A4,D4,_4,O4,P4,L4,B4,M4,V4,G4,U4,W4,H4,K4,q4,aW,X4,n4,j4,Y4,Q4,uW,Z4,J4,eH,tH,rH,oH,nH,sH,iH,aH,uH,cH,pH,mH,fH,dH,gH,yH,bH,CH,wH,SH,NH,dW,$H,EH,RH,AH,jW,DH,OH,PH,LH,zH,cW,BH,MH,VH,YW,IH,GH,UH,WH,gW,HH,KH,qH,XH,jH,YH,QH,ZH,JH,eK,tK,rK,oK,nK,sK,iK,HW,kH,aK,lK,uK,cK,pK,mK,fK,dK,gK,xK,bK,CK,wK,SK,IK,vK,TH,yW,TK,kK,NK,EK,RK,bW,AK,DK,FK,FH];for(let r of Tde)Tu(r);var dc=D();dc.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15);dc.registerFlag("WEBGPU_CPU_FORWARD",()=>!0);dc.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1);dc.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!1);dc.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1);dc.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3);dc.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1);dc.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0);var QS=class{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireUploadBuffer(e,t){return this.acquireBuffer(e,t,!0)}acquireBuffer(e,t,o=!1){let n=_K(e,t);if(this.freeBuffers.has(n)||this.freeBuffers.set(n,[]),this.usedBuffers.has(n)||this.usedBuffers.set(n,[]),this.numBytesUsed+=e,this.numUsedBuffers++,this.freeBuffers.get(n).length>0){this.numFreeBuffers--;let i=this.freeBuffers.get(n).shift();return this.usedBuffers.get(n).push(i),i}this.numBytesAllocated+=e;let s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:o});return this.usedBuffers.get(n).push(s),s}releaseBuffer(e,t,o){if(this.freeBuffers.size===0)return;let n=_K(t,o);this.freeBuffers.has(n)||this.freeBuffers.set(n,[]),this.freeBuffers.get(n).push(e),this.numFreeBuffers++,this.numUsedBuffers--;let s=this.usedBuffers.get(n),i=s.indexOf(e);if(i<0)throw new Error("Cannot release a buffer that was never provided by this buffer manager");s.splice(i,1),this.numBytesUsed-=t}releaseUploadBuffer(e,t,o){e.mapAsync(GPUMapMode.WRITE).then(()=>{this.releaseBuffer(e,t,o)},n=>{})}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function _K(r,e){return`${r}_${e}`}var ZS=class{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,o,n){let s=PK(o),i=e*t*s,a=OK(e,t,o,n);if(this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.usedTextures.has(a)||this.usedTextures.set(a,[]),this.numBytesUsed+=i,this.numUsedTextures++,this.freeTextures.get(a).length>0){this.numFreeTextures--;let u=this.freeTextures.get(a).shift();return this.usedTextures.get(a).push(u),u}this.numBytesAllocated+=i;let l=this.device.createTexture({size:[e,t],format:o,usage:n});return this.usedTextures.get(a).push(l),l}releaseTexture(e,t,o,n,s){if(this.freeTextures.size===0)return;let i=OK(t,o,n,s);this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.freeTextures.get(i).push(e),this.numFreeTextures++,this.numUsedTextures--;let a=this.usedTextures.get(i),l=a.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(l,1);let u=PK(n),c=t*o*u;this.numBytesUsed-=c}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(o=>{o.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function OK(r,e,t,o){return`${r}_${e}_${t}_${o}`}function PK(r){if(r==="rgba8unorm")return 16;throw new Error(`${r} is not supported!`)}function LK(r,e){if(Math.max(...r)>3)throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");let t=r.length,o=r.map(s=>`${e}[${s}]`),n=new Array(t-1);n[t-2]=o[t-1];for(let s=t-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}var MK=(r,e,t,o)=>{let n={dtype:o.dtype,shape:o.shape},s=kde(t,n,e),i=r.createShaderModule({code:s,label:e.constructor.name});return r.createComputePipeline({compute:{module:i,entryPoint:"_start"},label:e.constructor.name,layout:"auto"})};function Jt(r){if(r<=1)return"i32";if(r===2)return"vec2<i32>";if(r===3)return"vec3<i32>";if(r===4)return"vec4<i32>";if(r===5)return"vec5";if(r===6)return"vec6";throw Error(`GPU for rank ${r} is not yet supported`)}function ii(r){if(r===0)return"x";if(r===1)return"y";if(r===2)return"z";if(r===3)return"w";if(r===4)return"u";if(r===5)return"v";throw Error(`Index ${r} is not yet supported`)}function fe(...r){let e;switch(r.length){case 0:e=`
        ${hc()}
        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                  @builtin(global_invocation_id) GlobalId : vec3<u32>,
                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
          localId = LocalId;
          globalId = GlobalId;
          numWorkgroups = NumWorkgroups;
          main();
        }

        fn main()
      `;break;case 1:e=`
        ${hc()}
        fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                  @builtin(global_invocation_id) GlobalId : vec3<u32>,
                  @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
          localId = LocalId;
          globalId = GlobalId;
          numWorkgroups = NumWorkgroups;
          main(getGlobalIndex());
        }

        fn main(${r[0]} : i32)
      `;break;default:throw Error("Unreachable")}return e}function hc(){return`
  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
`}function kde(r,e,t){let o=[];if(o.push(`
      const workGroupSizeX = ${t.workGroupSize[0]}u;
      const workGroupSizeY = ${t.workGroupSize[1]}u;
      const workGroupSizeZ = ${t.workGroupSize[2]}u;

      var<private> localId: vec3<u32>;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${GK(t)?"  return i32(globalId.x);":`  let localInvocationIndex = localId.z * workGroupSizeX * workGroupSizeY +
                   localId.y * workGroupSizeX + localId.x;
               let workGroupID = (globalId - localId)/vec3<u32>(
                   workGroupSizeX, workGroupSizeY, workGroupSizeZ);

               return i32((workGroupID.z * numWorkgroups.x * numWorkgroups.y +
                   workGroupID.y * numWorkgroups.x + workGroupID.x) *
                   (workGroupSizeX * workGroupSizeY * workGroupSizeZ) +
                   localInvocationIndex);
        `}
      }
    `),t.isFromPixels)return o.push(`
        struct Uniform {
          size            : i32,
          numChannels     : i32,
          outShapeStrides : vec2<i32>,
        };

        @group(0) @binding(0) var<storage, read_write> result: array<${rd(e.dtype,t.isVec4)}>;
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `),[zK,o.join(`
`),BK(e.shape),t.getUserCode()].join(`
`);let n="struct Uniforms { NAN : f32, ";t.variableNames.forEach((m,f)=>{let d=Jt(r[f].shape.length);n+=`${m.charAt(0).toLowerCase()+m.slice(1)}Shape : ${d}, `}),n+=`outShape : ${Jt(e.shape.length)}, `;let i=e.shape.length-1;n+=`
         outShapeStrides: ${Jt(i)}, `,t.size&&(n+="size : i32, "),t.uniforms&&(n+=t.uniforms),n+="};",n=Fde(n),o.push(n),t.atomic?o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${rd(e.dtype,t.isVec4)}>;
    `),t.variableNames.forEach((m,f)=>{o.push(`
      @group(0) @binding(${1+f}) var<storage, read> ${m}: array<${t.variableTypes?t.variableTypes[f]:rd(r[f].dtype,t.isVec4)}>;
        `)}),n!==""&&o.push(`
      @group(0) @binding(${1+t.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let l=Rde(e.shape,t.dispatchLayout),u=[zK,o.join(`
`),BK(e.shape),l,Ade(e.shape.length)];t.atomic||u.push(Dde(e.shape,e.dtype,t.isVec4));let c=r.map((m,f)=>Ede(m,e.shape,t.variableTypes?t.variableTypes[f]==="vec4<f32>":t.isVec4,t.dispatchLayout.x.length===e.shape.length)).join(`
`);return u.push(c),u.push(t.getUserCode()),u.join(`
`)}function VK(r,e,t,o){let n=r.shaderKey;if(r.isFromPixels)return n;let s=t.map(c=>c.dtype).concat(o.dtype),i=t.map(c=>w.getBroadcastDims(c.shape,o.shape)),a=t.map(c=>y.arraysEqual(c.shape,o.shape)).join("_"),l=i.map(c=>c.join("_")).join(";"),u=GK(r)?"flatDispatch":"";return n+="_"+(r.workGroupSize?r.workGroupSize.join(","):"")+e.map(c=>c.length).join(",")+s.join(",")+r.variableNames.join(",")+l+a+u,n}var zK=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  fn idiv(a: i32, b: i32, sign: f32) -> i32 {
    var res: i32 = a / b;
    let modulo: i32 = a % b;
    if (sign < 0. && modulo != 0) {
      res = res - 1;
    }
    return res;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    return vec4<bool>(isnan(val[0]), isnan(val[1]), isnan(val[2]), isnan(val[3]));
  }
`;function BK(r){let e=r.length;if(e<=1)return"fn getCoordsFromIndex(index : i32) -> i32 { return index; }";let t=y.computeStrides(r),o=Jt(e),n=[];for(let i=0;i<e;i++)n.push(`d${i}`);if(t.length===1)return`    fn getCoordsFromIndex(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;
      return vec2<i32>(d0, d1);
    }`;let s;return s="var index2 = index;"+t.map((i,a)=>{let l=`let ${n[a]} = index2 / uniforms.outShapeStrides.${ii(a)}`,u=a===t.length-1?`let ${n[a+1]} = index2 - ${n[a]} * uniforms.outShapeStrides.${ii(a)}`:`index2 = index2 - ${n[a]} * uniforms.outShapeStrides.${ii(a)}`;return`${l}; ${u};`}).join(""),`
    fn getCoordsFromIndex(index : i32) -> ${o} {
      ${s}
      return ${o}(${n.join(",")});
    }
  `}function Nde(r,e){let t=r.name,o=r.shape.length,n=Jt(o),s="get"+t.charAt(0).toUpperCase()+t.slice(1),i=["d0","d1","d2","d3","d4","d5"].slice(0,o),a=i.map(c=>`${c} : i32`).join(", ");if(o<1)return e?`
        fn ${s}() -> vec4<f32> {
          return vec4<f32>(${t}[0]);
        }
      `:`
      fn ${s}() ->f32 {
        return f32(${t}[0]);
      }
    `;let l=`uniforms.${t.charAt(0).toLowerCase()+t.slice(1)}Shape`,u=`${o}D`;return o===0&&(u="1D"),e?`
      fn ${s}(${a}) -> vec4<f32> {
        return vec4<f32>(${t}[getIndexFromCoords${u}(${n}(${i.join(",")}),
          ${l}) / 4]);
      }
      `:`
    fn ${s}(${a}) -> f32 {
      return f32(${t}[getIndexFromCoords${u}(${n}(${i.join(",")}),
        ${l})]);
    }
   `}function $de(r,e,t,o){let n=r.name,s=n.charAt(0).toUpperCase()+n.slice(1),i="get"+s+"ByOutput",a=r.shape.length,l=e.length,u=Jt(l);if(y.arraysEqual(r.shape,e)&&o)return t?`
      fn ${i}Index(globalIndex : i32) -> vec4<f32> {
        return vec4<f32>(${n}[globalIndex]);
      }

      fn ${i}Coords(coords : ${u}) -> vec4<f32> {
        return vec4<f32>(${n}[${l>1?"getOutputIndexFromCoords(coords)":"coords"} / 4]);
      }
      `:`
    fn ${i}Index(globalIndex : i32) -> f32 {
      return f32(${n}[globalIndex]);
    }

    fn ${i}Coords(coords : ${u}) -> f32 {
      return f32(${n}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}]);
    }
    `;let c=w.getBroadcastDims(r.shape,e),p=l-a,m="";if(a===0)return t?`
    fn ${i}Index(globalIndex : i32) -> vec4<f32> {
      return get${s}();
    }

    fn ${i}Coords(coords : ${u}) -> vec4<f32> {
      return get${s}();
    }
  `:`
    fn ${i}Index(globalIndex : i32) -> f32{
      return get${s}();
    }

    fn ${i}Coords(coords : ${u}) -> f32{
      return get${s}();
    }
  `;l<2&&c.length>=1?m="coords = 0;":m=c.map(g=>`coords.${ii(g+p)} = 0;`).join(`
`);let f="";if(l<2&&a>0)f="coords";else if(l>1){let g=Jt(a),x=r.shape.map((b,C)=>`coords.${ii(C+p)}`).join(", ");f=`${g}(${x})`}else f="coords";let d=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`,h=`${a}D`;return t?`
    fn ${i}Index(globalIndex : i32) -> vec4<f32> {
      var coords = getCoordsFromIndex(globalIndex);
      ${m}
      return ${n}[getIndexFromCoords${h}(${f}, ${d}) / 4];
    }

    fn ${i}Coords(coordsIn : ${u}) -> vec4<f32> {
      var coords = coordsIn;
      ${m}
      return ${n}[getIndexFromCoords${h}(${f}, ${d}) / 4];
    }
  `:`
  fn ${i}Index(globalIndex : i32) -> f32 {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return f32(${n}[getIndexFromCoords${h}(${f}, ${d})]);
  }

  fn ${i}Coords(coordsIn : ${u}) -> f32 {
    var coords = coordsIn;
    ${m}
    return f32(${n}[getIndexFromCoords${h}(${f}, ${d})]);
  }
`}function Ede(r,e,t,o){let n=Nde(r,t);return r.shape.length<=e.length&&(n+=$de(r,e,t,o)),n}function Rde(r,e){let{x:t,y:o=[],z:n=[]}=e,s=r.length;if(t.length===s)return`fn getOutputCoords() -> ${Jt(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;let i="",a=[t,o,n],l=0;for(let m=0;m<a.length;m++){let f=a[m];if(f.length!==0)if(l+=f.length,f.length===1)i+=`let d${f[0]} = i32(globalId[${m}]);`;else{let d=LK(f,"uniforms.outShape");i+=`var index${m} = i32(globalId[${m}]);`;for(let h=0;h<d.length;h++)i+=`let d${f[h]} = index${m} / ${d[h]};`,h===d.length-1?i+=`let d${f[h+1]} = index${m} - d${f[h]} * ${d[h]};`:i+=`index${m} = index${m} - d${f[h]} * ${d[h]};`}}let u=[];for(let m=0;m<l;m++)u.push(`d${m}`);let c=Jt(l),p=`fn getOutputCoords() -> ${c} {
  ${i}
`;return u.length===0?p+=`return ${c}(0); }`:p+=`return ${c}(${u.join(",")}); }`,p}function Ade(r){let e="";switch(r){case 0:case 1:e+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:e+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:e+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:e+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:e+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:e+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:y.assert(!1,()=>`Unsupported ${r}D shape`);break}return e}function GK(r){return r.dispatch[1]===1&&r.dispatch[2]===1}function rd(r,e){return r==="float32"?e?"vec4<f32>":"f32":r==="int32"||r==="bool"?e?"vec4<i32>":"i32":r}function Dde(r,e,t){let o=r.length,n=rd(e,t),s;if(t?s=`fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {
      result[flatIndex] = ${n}(value);
    }`:s=`fn setOutputAtIndex(flatIndex : i32, value : f32) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {
      result[flatIndex] = ${n}(value);
    }`,o>=2){let i=["d0","d1","d2","d3","d4","d5"].slice(0,o),a=Jt(o);t?s+=`
      fn setOutputAtCoords(${i.map(l=>`${l} : i32`).join(", ")}, value : vec4<f32>) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndex(flatIndex / 4, value);
      }
      fn setOutputAtCoordsI32(${i.map(l=>`${l} : i32`).join(", ")}, value : vec4<i32>) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex / 4, value);
      }
    `:s+=`
      fn setOutputAtCoords(${i.map(l=>`${l} : i32`).join(", ")}, value : f32) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndex(flatIndex, value);
      }
      fn setOutputAtCoordsI32(${i.map(l=>`${l} : i32`).join(", ")}, value : i32) {
        let flatIndex = getOutputIndexFromCoords(${a}(${i.join(", ")}));
        setOutputAtIndexI32(flatIndex, value);
      }
    `}return s}function Fde(r){let e=/(\w+)\s*:\s*vec(5|6)/g;r=r.replace(e,o=>"@align(16) "+o);let t=/vec(5|6)\s*,\s*(\w+)/g;return r=r.replace(t,(o,n,s)=>`vec${n}, @align(16) ${s}`),r}var Op=r=>{let e=1;for(let t=0;t<r.length;t++)e*=r[t];return e};function pe(r,e,t=[1,1,1],o=[1,1,1]){let[n,s,i]=[Math.ceil(Op(r.x.map(a=>e[a]))/(t[0]*o[0])),r.y?Math.ceil(Op(r.y.map(a=>e[a]))/(t[1]*o[1])):1,r.z?Math.ceil(Op(r.z.map(a=>e[a]))/(t[2]*o[2])):1];return[n,s,i]}function UK(r,e,t,o=!1){let n=[8,8,1],s=[4,4,1];return o||(r<=8&&(s[1]=1),e<=16&&t<=16&&(n[0]=4)),{workGroupSize:n,elementsPerThread:s}}function JS(r,e,t=!1){if(t)return[8,8,1];let o=Op(r.x.map(s=>e[s])),n=Op(r.y.map(s=>e[s]));return o<=4?[4,16,1]:n<=4?[16,4,1]:[16,16,1]}function eI(r,e,t=!1){if(t)return[4,4,1];let o=Op(r.x.map(s=>e[s])),n=Op(r.y.map(s=>e[s]));return o<=4?[1,2,1]:n<=4?[2,1,1]:[2,2,1]}function xe(r){return{x:r.map((e,t)=>t)}}function WK(r){if(r==="float32"||r==="int32"||r==="bool"||r==="string")return 4;if(r==="complex64")return 8;throw new Error(`Unknown dtype ${r}`)}function HK(r,e){if(e==="float32")return new Float32Array(r);if(e==="int32")return new Int32Array(r);if(e==="bool"||e==="string")return Uint8Array.from(new Int32Array(r));throw new Error(`Unknown dtype ${e}`)}function tI(){return(typeof window<"u"||typeof WorkerGlobalScope<"u")&&!!navigator.gpu}var ea;(function(r){r[r.MatMulReduceProgram=0]="MatMulReduceProgram",r[r.MatMulSplitKProgram=1]="MatMulSplitKProgram",r[r.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",r[r.MatMulPackedProgram=3]="MatMulPackedProgram",r[r.MatMulMax=4]="MatMulMax"})(ea||(ea={}));var Ode=D().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),Pde=(r,e)=>{let t=r.limits.maxComputeWorkgroupsPerDimension,o=e.dispatchLayout,n=e.dispatch;if(n.every(i=>i<=t))return n;y.assert(n[0]>t&&o.y===void 0&&o.z===void 0,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let s=Math.ceil(Math.sqrt(n[0]));return s>t?(s=Math.ceil(Math.cbrt(n[0])),y.assert(s<=t,()=>"Total dispatch size exceeds WebGPU maximum."),[s,s,s]):[s,s,1]},gc=class extends cn{constructor(e){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchNumberInEncoder=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,!tI())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.currentCommandEncoder=null,this.currentComputePass=null,this.supportTimeQuery=e.features.has("timestamp-query"),this.bufferManager=new QS(this.device),this.textureManager=new ZS(this.device),this.tensorMap=new ci(this,sr()),this.supportTimeQuery&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2})),D().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}nextDataId(){return gc.nextDataId++}floatPrecision(){return 32}defaultGpuBufferUsage(){return GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}disposeData(e,t=!1){if(this.tensorDataPendingDisposal.indexOf(e)>=0)return!1;if(!this.tensorMap.has(e))return!0;let o=this.tensorMap.get(e);if(this.decRef(e),!t&&o.refCount>0)return!1;if(this.commandQueueOwnedIds.has(e))return this.tensorDataPendingDisposal.push(e),!1;let{complexTensorInfos:n}=this.tensorMap.get(e);return n!=null&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.releaseResource(e),this.tensorMap.delete(e),!0}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){let t=this.tensorMap.get(e);if(!(!t||!t.resourceInfo)){if("texture"in t.resourceInfo){let o=t.resourceInfo;o.texture instanceof GPUTexture&&this.textureManager.releaseTexture(o.texture,o.width,o.height,o.format,o.usage),o.texture=null}else{let o=t.resourceInfo;this.bufferManager.releaseBuffer(o.buffer,o.size,o.usage),o.buffer=null}t.resourceInfo=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){let t=this.tensorMap.get(e);t.refCount++}decRef(e){if(this.tensorMap.has(e)){let t=this.tensorMap.get(e);t.refCount--}}write(e,t,o){if(o==="complex64"&&e!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:o,shape:t,values:e,refCount:1}),n}move(e,t,o,n,s){if(n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:n,shape:o,values:t,refCount:s})}submitQueue(){this.ensureComputePassEnded(),this.queue.submit([this.currentCommandEncoder.finish()]),this.currentCommandEncoder=null,this.dispatchNumberInEncoder=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e.buffer,e.size,e.usage)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseUploadBuffer(e.buffer,e.size,e.usage)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.currentCommandEncoder||(this.currentCommandEncoder=this.device.createCommandEncoder())}ensureComputePassEnded(){this.currentComputePass&&(this.currentComputePass.end(),this.currentComputePass=null)}getComputePass(){return this.currentComputePass||(this.currentComputePass=this.currentCommandEncoder.beginComputePass()),this.currentComputePass}async getBufferData(e,t){let o=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,o,0,t),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=o.getMappedRange().slice(0);return o.unmap(),o!=null&&this.bufferManager.releaseBuffer(o,t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ),D().getBool("WEBGPU_USE_PROFILE_TOOL")&&(y.assert(this.dummyContext!==void 0,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(e,t){let o=this.tensorMap.get(e);return this.releaseResource(e),o.values=t,o.values}readSync(e){let t=this.tensorMap.get(e),{values:o}=t;if(o==null)throw new Error("WebGPU readSync is only available for CPU-resident tensors.");return o}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);let t=this.tensorMap.get(e),{values:o}=t;if(o!=null)return this.convertAndCacheOnCPU(e,o);let n;if(t.dtype==="complex64"){let s=await Promise.all([this.read(t.complexTensorInfos.real.dataId),this.read(t.complexTensorInfos.imag.dataId)]),i=s[0],a=s[1];n=w.mergeRealAndImagArrays(i,a)}else{let s=t.resourceInfo,i=await this.getBufferData(s.buffer,s.size);n=HK(i,t.dtype)}return this.convertAndCacheOnCPU(e,n),n}readToGPU(e){let t=this.tensorMap.get(e),{values:o,dtype:n,shape:s,resourceInfo:i}=t;if(n==="complex64")throw new Error("Does not support reading buffer for complex64 dtype.");if(i==null)throw o!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let a=i.size,l=this.bufferManager.acquireBuffer(a,i.usage);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(i.buffer,0,l,0,a),this.submitQueue();let u=this.makeTensorInfo(s,n),c=sr().makeTensorFromTensorInfo(u),p=this.tensorMap.get(u.dataId);return p.resourceInfo={size:a,usage:this.defaultGpuBufferUsage(),buffer:l},{tensorRef:c,buffer:l,bufSize:a}}bufferSync(e){let t=this.readSync(e.dataId);if(e.dtype==="string")try{let o=t.map(n=>y.decodeString(n));return te(e.shape,e.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return te(e.shape,e.dtype,t)}async time(e){this.supportTimeQuery||console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled. Using performance.now is not workable for webgpu since it doesn't support synchronous data read from GPU.");let t=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,e();let s=y.flatten(this.activeTimers.map(u=>u.query)).filter(u=>u!=null),i=y.flatten(this.activeTimers.map(u=>u.name)).filter(u=>u!=null);this.activeTimers=t,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},l=await Promise.all(s);return a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,a}makeTensorInfo(e,t,o){return t==="string"&&o!=null&&o.length>0&&y.isString(o[0])&&(o=o.map(s=>y.encodeString(s))),{dataId:this.write(o,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;let t=this.tensorMap.get(e.dataId);if("texture"in t.resourceInfo){let n=t.resourceInfo;return n.texture instanceof GPUExternalTexture?n.texture:n.texture.createView()}let o=t.resourceInfo;return{offset:0,size:o.size,buffer:o.buffer}}async getQueryTime(e){return this.supportTimeQuery?this.getTimeFromQuerySet(e):0}uploadToGPU(e){let t=this.tensorMap.get(e);if(t.resourceInfo)return;let o=WK(t.dtype)*y.sizeFromShape(t.shape),n=this.bufferManager.acquireBuffer(o,this.defaultGpuBufferUsage());if(t.resourceInfo={size:o,usage:this.defaultGpuBufferUsage(),buffer:n},t.values){let s=this.bufferManager.acquireUploadBuffer(o,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC),i=s.getMappedRange();t.dtype==="int32"||t.dtype==="bool"?new Int32Array(i).set(t.values):new Float32Array(i).set(t.values),s.unmap(),this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(s,0,n,0,o);let a={size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,buffer:s};this.stagingPendingDisposal.push(a)}}makeUniforms(e){let t=0,o=0,n=[];e.forEach(l=>{l.data.length===0&&(l.data=[1]);let u;switch(l.data.length){case 1:u=4;break;case 2:u=8;break;case 3:u=16;break;case 4:u=16;break;case 5:u=16;break;case 6:u=16;break;default:y.assert(!1,()=>`Unsupported ${l.data.length}D shape`)}(o===5||o===6)&&(u=16),t=Math.ceil(t/u)*u,o=l.data.length,n.push(t),t+=l.data.length*4});let s=new ArrayBuffer(t);e.forEach((l,u)=>{let c=n[u];l.type==="int32"?new Int32Array(s,c,l.data.length).set(l.data):l.type==="uint32"?new Uint32Array(s,c,l.data.length).set(l.data):new Float32Array(s,c,l.data.length).set(l.data)});let i=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.queue.writeBuffer(i,0,s,0,t);let a={size:t,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,buffer:i};return this.uniformPendingDisposal.push(a),{offset:0,size:t,buffer:i}}runWebGPUProgram(e,t,o,n,s){if(s||(s=this.makeTensorInfo(e.outputShape,o)),y.sizeFromShape(s.shape)===0)return this.tensorMap.get(s.dataId).values=y.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),e.dispatch=Pde(this.device,e);let i=[],a=[];if(!e.isFromPixels){i.push({type:"float32",data:[NaN]}),a=t.concat(s).map(x=>x.shape);let h="int32";a.map(x=>{i.push({type:h,data:x})});let g=y.computeStrides(s.shape);if(i.push({type:h,data:g}),e.size){let x=y.sizeFromShape(e.outputShape);i.push({type:h,data:[e.isVec4?x/4:x]})}}let l=t.map((h,g)=>{if(h.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(h.dataId),{dtype:this.tensorMap.get(h.dataId).dtype,shape:h.shape,name:e.variableNames[g]}}),u=VK(e,a,l,s),c;u in this.pipelineCache?c=this.pipelineCache[u]:(c=MK(this.device,e,l,s),this.pipelineCache[u]=c),n&&(i=[...i,...n]);let p=[this.tensorToBinding(s),...t.map(h=>this.tensorToBinding(h)),this.makeUniforms(i)],m=this.device.createBindGroup({layout:c.getBindGroupLayout(0),entries:p.map((h,g)=>({binding:g,resource:h}))});this.ensureCommandEncoderReady();let f=this.getComputePass(),d=this.activeTimers!=null;return d&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,0),f.setPipeline(c),f.setBindGroup(0,m),f.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),d&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,1),this.dispatchNumberInEncoder++,t.forEach(h=>{this.commandQueueOwnedIds.add(h.dataId)}),this.commandQueueOwnedIds.add(s.dataId),D().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchNumberInEncoder&&this.submitQueue(),d&&this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(this.querySet)}),s}async getTimeFromQuerySet(e){let t=this.bufferManager.acquireBuffer(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),o=this.bufferManager.acquireBuffer(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.resolveQuerySet(e,0,2,t,0),this.currentCommandEncoder.copyBufferToBuffer(t,0,o,0,16),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=new BigUint64Array(o.getMappedRange()),s=Number(n[1]-n[0]);return o.unmap(),this.bufferManager.releaseBuffer(o,16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST),this.bufferManager.releaseBuffer(t,16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),s/1e6}shouldExecuteOnCPU(e,t=Ode){return D().getBool("WEBGPU_CPU_FORWARD")&&e.every(o=>this.tensorMap.get(o.dataId).resourceInfo==null&&y.sizeFromShape(o.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}};gc.nextDataId=0;tI()&&Eu("webgpu",async()=>{D().set("CHECK_COMPUTATION_FOR_ERRORS",!1);let r={powerPreference:D().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},e=await navigator.gpu.requestAdapter(r),t=e.limits,o={},n=e.features.has("timestamp-query");o.requiredLimits={maxComputeWorkgroupStorageSize:t.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.maxStorageBufferBindingSize},n&&(o.requiredFeatures=["timestamp-query"]);let s=await e.requestDevice(o);return new gc(s)},3);var Te;(function(r){r[r.MUL=0]="MUL",r[r.ADD=1]="ADD",r[r.ATAN2=2]="ATAN2",r[r.SUB=3]="SUB",r[r.DIV=4]="DIV",r[r.EQUAL=5]="EQUAL",r[r.GREATER=6]="GREATER",r[r.GREATER_EQUAL=7]="GREATER_EQUAL",r[r.LESS=8]="LESS",r[r.LESS_EQUAL=9]="LESS_EQUAL",r[r.LOGICAL_AND=10]="LOGICAL_AND",r[r.NOT_EQUAL=11]="NOT_EQUAL",r[r.SQUARED_DIFFERENCE=12]="SQUARED_DIFFERENCE",r[r.INT_DIV=13]="INT_DIV",r[r.POW=14]="POW",r[r.PRELU=15]="PRELU",r[r.MAX=16]="MAX",r[r.MIN=17]="MIN",r[r.COMPLEX_MULTIPLY_REAL=18]="COMPLEX_MULTIPLY_REAL",r[r.COMPLEX_MULTIPLY_IMAG=19]="COMPLEX_MULTIPLY_IMAG"})(Te||(Te={}));var Lde=`
  if (isnan(a)) { return a; }
  if (isnan(b)) { return b; }
  `,qK=`
  if (isNaN.r) {
    resultTemp.r = valueForNaN;
  }
  if (isNaN.g) {
    resultTemp.g = valueForNaN;
  }
  if (isNaN.b) {
    resultTemp.b = valueForNaN;
  }
  if (isNaN.a) {
    resultTemp.a = valueForNaN;
  }
  `,XK=`
  let isNaN = isnanVec4(a) | isnanVec4(b);
  ${qK}
  `,zde="return a + b;",Bde="return areal * breal - aimag * bimag;",Mde="return areal * bimag + aimag * breal;",Vde="return a / b;",Gde="return a * b;",Ude="return (a - b) * (a - b);",Wde="return a - b;",Hde="return f32(a == b);",Kde="return vec4<f32>(a == b);",qde="return f32(a > b);",Xde="return vec4<f32>(a > b);",jde="return f32(a >= b);",Yde="return vec4<f32>(a >= b);",Qde="return f32(a < b);",Zde="return vec4<f32>(a < b);",Jde="return f32(a <= b);",ehe="return vec4<f32>(a <= b);",the="return f32(f32(a) >= 1.0 && f32(b) >= 1.0);",rhe=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,ohe=`
  let s = sign(a) * sign(b);
  let ia = i32(round(a));
  let ib = i32(round(b));
  return f32(idiv(ia, ib, s));
  `,nhe=`
  let ia = vec4<i32>(round(a));
  let ib = vec4<i32>(round(b));
  let cond = ib != vec4<i32>(0);
  var resultTemp = vec4<i32>(0);
  let s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    resultTemp[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    resultTemp[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    resultTemp[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    resultTemp[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4<f32>(resultTemp);
  `,she=`
  if (isnan(a) || isnan(b)) {
    return 1.0;
  }
  return f32(a != b);
`,ihe=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
  ${XK}

  return resultTemp;
`,ahe=`
  if(a < 0.0 && floor(b) < b) {
    return uniforms.NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  if (round(abs(b) % 2.0) != 1.0) {
    return pow(abs(a), b);
  }
  return sign(a) * pow(abs(a), b);
  `,lhe=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = a < vec4<f32>(0.0) & floor(b) < b;
  let valueForNaN = uniforms.NAN;
  ${qK}
  return resultTemp;
  `,uhe="if (a < 0.0) { return b * a; }  return a;",che=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
  `;function WN(r,e,t="uniforms.NAN"){let o=e?XK:Lde;return e?`
    let valueForNaN = ${t};
    var resultTemp = vec4<f32>(${r}(a, b));
    `+o+`
    return resultTemp;
  `:o+`
    return ${r}(a, b);
  `}function Pp(r,e){switch(r){case Te.MUL:return Gde;case Te.ADD:return zde;case Te.ATAN2:return WN("atan2",e);case Te.SUB:return Wde;case Te.DIV:return Vde;case Te.EQUAL:return e?Kde:Hde;case Te.GREATER:return e?Xde:qde;case Te.GREATER_EQUAL:return e?Yde:jde;case Te.LESS:return e?Zde:Qde;case Te.LESS_EQUAL:return e?ehe:Jde;case Te.LOGICAL_AND:return e?rhe:the;case Te.NOT_EQUAL:return e?ihe:she;case Te.SQUARED_DIFFERENCE:return Ude;case Te.INT_DIV:return e?nhe:ohe;case Te.PRELU:return e?che:uhe;case Te.MAX:return WN("max",e);case Te.MIN:return WN("min",e);case Te.POW:return e?lhe:ahe;case Te.COMPLEX_MULTIPLY_REAL:return Bde;case Te.COMPLEX_MULTIPLY_IMAG:return Mde;default:throw new Error(`BinaryType ${r} is not implemented!`)}}var me;(function(r){r[r.ABS=0]="ABS",r[r.CEIL=1]="CEIL",r[r.COS=2]="COS",r[r.COSH=3]="COSH",r[r.ELU=4]="ELU",r[r.EXP=5]="EXP",r[r.EXPM1=6]="EXPM1",r[r.FLOOR=7]="FLOOR",r[r.IS_NAN=8]="IS_NAN",r[r.LINEAR=9]="LINEAR",r[r.LOG=10]="LOG",r[r.LOGICAL_NOT=11]="LOGICAL_NOT",r[r.NEG=12]="NEG",r[r.RELU=13]="RELU",r[r.RELU6=14]="RELU6",r[r.LEAKYRELU=15]="LEAKYRELU",r[r.RECIPROCAL=16]="RECIPROCAL",r[r.RSQRT=17]="RSQRT",r[r.SIN=18]="SIN",r[r.SINH=19]="SINH",r[r.SIGMOID=20]="SIGMOID",r[r.SQRT=21]="SQRT",r[r.SQUARE=22]="SQUARE",r[r.TANH=23]="TANH",r[r.TO_INT=24]="TO_INT"})(me||(me={}));var phe="return abs(a);",mhe="return ceil(a);",fhe="return cos(a);",dhe=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,hhe="return exp(a) - 1.0;",ghe="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",xhe=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,yhe="return exp(a);",bhe="return floor(a);",Che="return f32(isnan(a));",whe="return a;",She=`if (a < 0.0) { return 1.0/0.0; }
  return log(a);`,Ihe="return f32(!(a >= 1.0));",vhe="return -a;",The="if (a < 0.0) { return uniforms.alpha * a; } return a;",khe=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,Nhe="return 1.0 / a;",$he="return select(a, 0.0, a < 0.0);",Ehe="return clamp(a, 0.0, 6.0);",Rhe="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",Ahe=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,Dhe="return 1.0/sqrt(a);",Fhe="return 1.0 / (1.0 + exp(-1.0 * a));",_he="return sin(a);",Ohe=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,Phe="return sqrt(a);",Lhe="return a * a;",zhe=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`,Bhe="return f32(i32((a)));";function zl(r,e){switch(r){case me.ABS:return phe;case me.COS:return fhe;case me.COSH:return dhe;case me.CEIL:return mhe;case me.ELU:return e?xhe:ghe;case me.EXP:return yhe;case me.EXPM1:return hhe;case me.FLOOR:return bhe;case me.IS_NAN:return Che;case me.LINEAR:return whe;case me.LOG:return She;case me.LOGICAL_NOT:return Ihe;case me.NEG:return vhe;case me.LEAKYRELU:return e?khe:The;case me.RECIPROCAL:return Nhe;case me.RELU:return e?Ahe:$he;case me.RELU6:return e?Rhe:Ehe;case me.RSQRT:return Dhe;case me.SIGMOID:return Fhe;case me.SIN:return _he;case me.SINH:return Ohe;case me.SQRT:return Phe;case me.SQUARE:return Lhe;case me.TANH:return zhe;case me.TO_INT:return Bhe;default:throw new Error(`BinaryType ${r} is not implemented!`)}}var Wt=r=>{switch(r){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(`${r}-component is not supported.`)}};function mo(r,e=!1,t=!1,o=3){if(r===null)return"";let n="";if(r==="linear")n=zl(me.LINEAR);else if(r==="relu")n=zl(me.RELU,t);else if(r==="elu")n=zl(me.ELU,t);else if(r==="relu6")n=zl(me.RELU6,t);else if(r==="prelu")n=Pp(Te.PRELU,t);else if(r==="sigmoid")n=zl(me.SIGMOID,t);else if(r==="leakyrelu")n=zl(me.LEAKYRELU,t);else throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);let i=Wt(t?4:1),a="";return e?a=`
      fn activation(a : ${i}, coords : vec${o}<i32>) -> ${i} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }`:a=`
      fn activation(a : ${i}, coords : vec${o}<i32>) -> ${i} {
        ${n}
      }`,a}function ai(r,e){return`
      ${r?"value = value + getBiasByOutputCoords(coords);":""}
      ${e?"value = activation(value, coords);":""}
      `}function HN(r,e,t,o,n=!1,s=!1,i=!1,a=1){y.assert(t&&a===1||!t,()=>`transposeA ${t} is not compatible with component size ${a}`);let l=`
      let batch = ${r?"0":"batchIn"};
      let batchASize = uniforms.aShape[1] * uniforms.aShape[2];
      ${t?`value = A[(batch * batchASize + col * uniforms.aShape[2] + row) / ${a}];`:`value = A[(batch * batchASize + row * uniforms.aShape[2] + col) / ${a}];`}

    `,u;return o===!1?u=`value = B[(batch * batchBSize + row * uniforms.bShape[2] + col) / ${a}];`:u=`value = B[(batch * batchBSize + col * uniforms.bShape[2] + row) / ${a}];`,`
  fn mm_readA(batchIn: i32, row: i32, colIn: i32) -> ${Wt(a)} {
    var value = ${Wt(a)}(0.0);
    let col = colIn * ${a};
    ${n&&i?l:`
    ${t?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${l}
    }
    `}
    return value;
  }

  fn mm_readB(batchIn: i32, row: i32, colIn: i32) -> ${Wt(a)} {
    let col = colIn * ${a};
    let batch = ${e?"0":"batchIn"};
    let batchBSize = uniforms.bShape[1] * uniforms.bShape[2];
    var value = ${Wt(a)}(0.0);
    ${u}
    return value;
  }
  `}function Ug(r,e,t,o,n,s,i=!1,a=!1,l=!1,u=1){return`
  ${HN(t,o,n,s,i,a,l,u)}
  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Wt(u)}) {
    let col = colIn * ${u};
    ${i&&a?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${ai(r,e)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}var Mhe=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / InnerElementSize + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / InnerElementSize + inputCol);
        `,Vhe=(r,e)=>r?`
        let ACached0 = mm_Asub[k * InnerElementSize][localRow];
        let ACached1 = mm_Asub[k * InnerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * InnerElementSize + 2][localRow];
        ${e===3?"":"let ACached3 = mm_Asub[k * InnerElementSize + 3][localRow];"}
        for (var i = 0; i < RowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${e===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < RowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${e===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`;function Lp(r,e,t=!1,o=32,n=!1,s=32,i=!1){let a=e[1]*r[1],l=e[0]*r[0],u=t?a:o,c=t?o:a,p=u/e[0],m=o/e[1];return y.assert((t&&p===4&&r[1]===4||!t&&(p===3||p===4))&&u%e[0]===0&&o%e[1]===0&&r[0]===4,()=>`If transposeA ${t} is true, innerElementSize ${p} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${p} must be 3 or 4.
      tileAWidth ${u} must be divisible by workGroupSize[0]${e[0]}. tileInner ${o} must be divisible by workGroupSize[1] ${e[1]}. ColPerThread ${r[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${u/p}>, ${c}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${l/r[0]}>, ${o}>;

  const RowPerThread = ${r[1]};
  const ColPerThread = ${r[0]};
  const InnerElementSize = ${p};
  const TileInner = ${o};

  @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
  fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
            @builtin(global_invocation_id) GlobalId : vec3<u32>,
            @builtin(num_workgroups) NumWorkgroups: vec3<u32>,
            @builtin(workgroup_id) workgroupId: vec3<u32>) {
    localId = LocalId;
    globalId = GlobalId;
    numWorkgroups = NumWorkgroups;

    let localRow = i32(localId.y);
    let tileRow = ${i?"0":"localRow * RowPerThread"};
    let tileCol = i32(localId.x);

    let globalRow = ${i?"0":"i32(globalId.y) * RowPerThread"};
    let globalCol = i32(globalId.x);
    let batch = ${n?"0":"i32(globalId.z)"};
    let globalRowStart = i32(workgroupId.y) * ${a};

    let numTiles = ${n?`${Math.ceil(s/o)}`:"(uniforms.dimInner - 1) / TileInner + 1"};
    var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

    var acc: array<vec4<f32>, RowPerThread>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${Mhe(t)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);
        }
        kStart = kStart + TileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileInner / InnerElementSize; k = k + 1) {
            let BCached0 = mm_Bsub[k * InnerElementSize][tileCol];
            let BCached1 = mm_Bsub[k * InnerElementSize + 1][tileCol];
            let BCached2 = mm_Bsub[k * InnerElementSize + 2][tileCol];
            ${p===3?"":"let BCached3 = mm_Bsub[k * InnerElementSize + 3][tileCol];"}

            ${Vhe(t,p)}
        }

        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}var Ghe=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,Uhe=r=>r?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function zp(r,e,t=!1,o=32,n=!1,s=32){let i=r[1]*e[1],a=r[0]*e[0],l=t?i:o,u=t?o:i;y.assert(u%e[1]===0&&l%e[0]===0&&o%e[1]===0,()=>`tileAHight ${u} must be divisible by workGroupSize[1]${e[1]}, tileAWidth ${l} must be divisible by workGroupSize[0]${e[0]}, tileInner ${o} must be divisible by workGroupSize[1]${e[1]}`);let c=u/e[1],p=l/e[0],m=o/e[1];return`
    var<workgroup> mm_Asub : array<array<f32, ${l}>, ${u}>;
    var<workgroup> mm_Bsub : array<array<f32, ${a}>, ${o}>;
    const RowPerThread = ${r[1]};
    const ColPerThread = ${r[0]};
    const TileInner = ${o};

    @compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)
    fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
              @builtin(global_invocation_id) GlobalId : vec3<u32>,
              @builtin(num_workgroups) NumWorkgroups: vec3<u32>,
              @builtin(workgroup_id) workgroupId: vec3<u32>) {
      localId = LocalId;
      globalId = GlobalId;
      numWorkgroups = NumWorkgroups;

      let tileRow = i32(localId.y) * RowPerThread;
      let tileCol = i32(localId.x) * ColPerThread;

      let globalRow = i32(globalId.y) * RowPerThread;
      let globalCol = i32(globalId.x) * ColPerThread;
      let batch = ${n?"0":"i32(globalId.z)"};
      let globalRowStart = i32(workgroupId.y) * ${i};

      let numTiles = ${n?`${Math.ceil(s/o)}`:"(uniforms.dimInner - 1) / TileInner + 1"};
      var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

      var acc : array<array<f32, ColPerThread>, RowPerThread>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
          acc[innerRow][innerCol] = 0.0;
        }
      }

      let tileRowA = i32(localId.y) * ${c};
      let tileColA = i32(localId.x) * ${p};
      let tileRowB = i32(localId.y) * ${m};
      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${c}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ${p}; innerCol = innerCol + 1) {
            let inputRow = tileRowA + innerRow;
            let inputCol = tileColA + innerCol;
            ${Ghe(t)}
          }
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
          for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol + innerCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch,
              kStart + inputRow,
              globalCol + innerCol);
          }
        }
        kStart = kStart + TileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ColPerThread>;
        for (var k = 0; k < TileInner; k = k + 1) {
          for (var inner = 0; inner < ColPerThread; inner = inner + 1) {
            BCached[inner] = mm_Bsub[k][tileCol + inner];
          }

          for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
            ${Uhe(t)}
            for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
              acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
            }
          }
        }

        workgroupBarrier();
      }

      for (var innerRow = 0; innerRow < RowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < ColPerThread; innerCol = innerCol + 1) {
          mm_write(batch, globalRow + innerRow, globalCol + innerCol,
              acc[innerRow][innerCol]);
        }
      }
    }
  `}var Whe=r=>r?`
      mm_readA(batch, colA, globalRow),
      mm_readA(batch, colA + 1, globalRow),
      mm_readA(batch, colA + 2, globalRow),
      mm_readA(batch, colA + 3, globalRow)
  `:`
      mm_readA(batch, globalRow, colA),
      mm_readA(batch, globalRow, colA + 1),
      mm_readA(batch, globalRow, colA + 2),
      mm_readA(batch, globalRow, colA + 3)
  `;function Hhe(r,e=!1){return y.assert(r[1]===1&&r[2]===1,()=>`A linear work group size is required. But got ${r}.`),`
    const TileSize = ${r[0]*4};
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${fe()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / TileSize + 1;
      let batch = i32(globalId.z);
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        let colA = t * TileSize + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${Whe(e)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < TileSize / 4; k = k + 1) {
          let rowB = t * TileSize + k * 4;
          let BCached = vec4<f32>(mm_readB(batch, rowB, globalCol),
                              mm_readB(batch, rowB + 1, globalCol),
                              mm_readB(batch, rowB + 2, globalCol),
                              mm_readB(batch, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}var rI=class{constructor(e,t,o,n,s=!1,i=!1,a=null,l=null,u=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};let c=s?e[1]:e[2];if(this.isVec4=(c%4===0&&!s||t[1]%4===0&&s)&&t[2]%4===0&&!i,this.isVectorA=t[1]===1&&!s,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workGroupSize=[32,1,1];else{let f=UK(t[1],c,t[2],s);this.workGroupSize=f.workGroupSize,this.elementsPerThread=f.elementsPerThread}this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread);let p=a!=null,m=u!=null;p&&this.variableNames.push("bias"),m&&this.variableNames.push("preluActivationWeights"),this.transposeA=s,this.transposeB=i,this.addBias=p,this.activation=l,this.hasPreluActivationWeights=m,this.batchAEqualOne=o,this.batchBEqualOne=n,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],c),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${s}_${i}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getShapeFit(e,t,o){let n=this.workGroupSize[1]*this.elementsPerThread[1],s=this.workGroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=this.workGroupSize[0]*4:this.tileInner=s;let i=e%n===0,a=t%s===0,l=o%this.tileInner===0;return[i,a,l]}getUserCode(){return`
      ${mo(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${Ug(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?Lp(this.elementsPerThread,this.workGroupSize,this.transposeA,this.tileInner,!1,null,this.isVectorA):this.isVectorA?Hhe(this.workGroupSize,this.transposeA):zp(this.elementsPerThread,this.workGroupSize,this.transposeA,this.tileInner)}
    `}};function Khe(){return`
    var<workgroup> sumValues : array<f32, workGroupSizeX>;
    ${fe()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + i32(workGroupSizeX)) {
        let dataA = mm_readA(batch, row, k);
        let dataB = mm_readB(batch, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = workGroupSizeX / 2u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}var oI=class{constructor(e,t,o,n=!1,s=!1,i=null,a=null,l=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize);let u=i!=null,c=l!=null;u&&this.variableNames.push("bias"),c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=c,this.batchAEqualOne=t,this.batchBEqualOne=o,this.shaderKey=`matMulReduce_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getUserCode(){return`
      ${mo(this.activation,this.hasPreluActivationWeights)}
      ${Ug(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,this.transposeA,this.transposeB)}
      ${Khe()}
    `}};function qhe(r){let e=r[1],t=r[0],o=e>t?e:t;return`
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${e}>;
  var<workgroup> mm_Bsub : array<array<f32, ${t}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${fe()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batch, globalRow, globalColA);
    var regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batch, globalRow, globalColA);
      regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}var nI=class{constructor(e,t,o,n=!1,s=!1,i=null,a=null,l=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[16,8,1],this.outputShape=o,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(o[2]/this.workGroupSize[0]),Math.ceil(o[1]/this.workGroupSize[1]),o[0]];let u=i!=null;u&&this.variableNames.push("bias");let c=l!=null;c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=c,this.batchAEqualOne=e[0]===1,this.batchBEqualOne=t[0]===1,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`}getUserCode(){return`
      ${mo(this.activation,this.hasPreluActivationWeights)}
      ${Ug(this.addBias,this.activation,this.batchAEqualOne,this.batchBEqualOne,this.transposeA,this.transposeB)}
      ${qhe(this.workGroupSize)}
    `}};var sI=class{constructor(e,t,o,n,s=!1,i=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workGroupSize=[8,8,1],this.atomic=!0,this.isVec4=!1,this.splitedDimInner=128,y.assert(e[0]===1,()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]},this.isVec4=(s&&this.outputShape[1]%4===0||!s&&t%4===0)&&this.outputShape[2]%4===0,this.elementsPerThread=[4,4,this.splitedDimInner],this.isVec4||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=pe(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workGroupSize,this.elementsPerThread),this.transposeA=s,this.transposeB=i,this.batchAEqualOne=o,this.batchBEqualOne=n,this.shaderKey=`matMulSplitK_${s}_${i}_${o}_${n}_${this.elementsPerThread}_${this.isVec4}`}getUserCode(){let e=n=>`
      for (var i = 0; i < ${n}; i = i + 1)
      {
        var oldValue = atomicLoad(&(result[flatIndex + i]));
        var exchanged = false;
        for (; !exchanged;) {
          let newValueF32 = bitcast<f32>(oldValue) + ${n>1?"value[i]":"value"};
          let newValue = bitcast<i32>(newValueF32);
          let res = atomicCompareExchangeWeak(&(result[flatIndex + i]), oldValue, newValue);
          oldValue = res.old_value;
          exchanged = res.exchanged;
        }
      }
      `,t=this.isVec4?4:1;return`
      ${HN(this.batchAEqualOne,this.batchBEqualOne,!1,this.transposeB,!1,!1,!1,t)}
      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${Wt(t)}) {
        let col = colIn * ${t};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          ${e(t)}
        }
      }
      ${this.isVec4?Lp(this.elementsPerThread,this.workGroupSize,this.transposeA,32,!0,this.splitedDimInner):zp(this.elementsPerThread,this.workGroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}},iI=class{constructor(e,t=null,o=null,n=null){this.uniforms="",this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.addBias=t!=null,this.hasPreluActivationWeights=n!=null,this.activation=o,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${o}`}getUserCode(){return`
    ${mo(this.activation,this.hasPreluActivationWeights)}
    ${fe("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${ai(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}};var aI=class{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${fe("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}};function jn(r){let{backend:e,attrs:t}=r,{shape:o,value:n}=t,{dtype:s}=t;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),e.makeTensorInfo(o,s,i)}else{let i=new aI(o),a=[{type:"float32",data:[n]}];return e.runWebGPUProgram(i,[],s,a)}}var jK={kernelName:ma,backendName:"webgpu",kernelFunc:jn};function ve(r){let{inputs:e,attrs:t}=r,{x:o}=e,{shape:n}=t,s=y.sizeFromShape(o.shape),i=y.inferFromImplicitShape(n,s),a=y.sizeFromShape(i);return y.assert(s===a,()=>`The new shape (${i}) has ${a} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:i,dtype:o.dtype}}var YK={kernelName:ws,backendName:"webgpu",kernelFunc:ve};function od({a:r,b:e,transposeA:t,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=e.shape.length,p=t?r.shape[u-2]:r.shape[u-1],m=o?e.shape[c-1]:e.shape[c-2],f=t?r.shape[u-1]:r.shape[u-2],d=o?e.shape[c-2]:e.shape[c-1],h=r.shape.slice(0,-2),g=e.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=Or.assertAndGetBroadcastShape(r.shape.slice(0,-2),e.shape.slice(0,-2)).concat([f,d]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t} and transposeB=${o} must match.`);let I=t?[x,p,f]:[x,f,p],N=o?[b,d,m]:[b,m,d],$=ve({inputs:{x:r},backend:n,attrs:{shape:I}}),R=ve({inputs:{x:e},backend:n,attrs:{shape:N}}),F=[$,R],_=Math.max(x,b),B=x===1,V=b===1,G=[$,R],W=[{type:"int32",data:[f]},{type:"int32",data:[d]},{type:"int32",data:[p]}],U,K,X=[_,f,d],H=D().get("WEBGPU_MATMUL_PROGRAM_TYPE");switch(H<0&&(f*d<=128?H=ea.MatMulReduceProgram:_===1&&f<=128&&d<=48&&m>=2e3?H=ea.MatMulSplitKProgram:f<=16&&(d<=512||m>=2*d)||d<=16&&(f<=512||p>=2*f)?H=ea.MatMulSmallOutputSizeProgram:H=ea.MatMulPackedProgram),H){case ea.MatMulReduceProgram:U=new oI(X,B,V,t,o,s,l,i);break;case ea.MatMulSplitKProgram:{if(K=jn({backend:n,attrs:{shape:X,value:0,dtype:r.dtype}}),U=new sI(X,m,B,V,t,o),s||l){K=n.runWebGPUProgram(U,G,r.dtype,W,K);let J=new iI(K.shape,s,l,i),ee=null,le=[K];s&&le.push(s),i&&le.push(i),l==="leakyrelu"&&(ee=[{type:"float32",data:[a]}],J.uniforms+=" alpha : f32,");let ie=n.runWebGPUProgram(J,le,K.dtype,ee);F.push(K);let de=ve({inputs:{x:ie},backend:n,attrs:{shape:S}});F.push(ie);for(let ce of F)n.disposeData(ce.dataId);return de}break}case ea.MatMulSmallOutputSizeProgram:U=new nI(I,N,X,t,o,s,l,i);break;case ea.MatMulPackedProgram:U=new rI(I,X,B,V,t,o,s,l,i);break;default:throw new Error(`Unsupported MatMulProgramType ${H}.`)}s&&G.push(s),i&&G.push(i),l==="leakyrelu"&&(W.push({type:"float32",data:[a]}),U.uniforms+=" alpha : f32,"),K=n.runWebGPUProgram(U,G,r.dtype,W,K);let Z=ve({inputs:{x:K},backend:n,attrs:{shape:S}});F.push(K);for(let J of F)n.disposeData(J.dataId);return Z}function Xhe(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=e,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return od({a:n,b:s,transposeA:l,transposeB:u,backend:t,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var QK={kernelName:Di,backendName:"webgpu",kernelFunc:Xhe};var Wg=class{constructor(e,t,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.workGroupSize=[128,1,1],this.size=!0,this.outputShape=w.assertAndGetBroadcastShape(t,o),this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${Pp(this.op,!1)}
      }

      ${fe("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}};var Bp=class{constructor(e,t,o){this.size=!0,this.variableNames=["A","B"],this.outputShape=w.assertAndGetBroadcastShape(t,o),this.dispatchLayout=xe(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length===1&&o.length>1&&t[0]<1024,this.useSharedMemoryWithB=o.length===1&&t.length>1&&o[0]<1024,this.useSharedMemoryWithA||this.useSharedMemoryWithB?(this.isVec4=!1,this.lastDimensionSize=this.useSharedMemoryWithB?o[0]:t[0],this.shaderKey=`binary_${this.type}_${e}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`,this.type="shared",this.workGroupSize=[256,1,1],this.lastDimensionSize<256?this.workPerThread=1:this.lastDimensionSize<512?this.workPerThread=2:this.workPerThread=4):(y.arraysEqual(t,o)&&y.sizeFromShape(t)%4===0?(this.isVec4=!0,this.type="vec4",this.workPerThread=4):(this.isVec4=!1,this.type="plain",this.workPerThread=1),this.shaderKey=`binary_${this.type}_${e}`,this.workGroupSize=[128,1,1]),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1])}getUserCode(){let e;if(this.type==="shared"){let t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",o=this.useSharedMemoryWithB?`let a = getAByOutputCoords(coords);
          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];
          let b = getBByOutputCoords(coords);`;e=`
        fn binaryOperation(a : f32, b : f32) -> f32 {
          ${Pp(this.op,this.isVec4)}
        }
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${fe("index")} {
          // Fill in the shared memory buffer. Here we need a loop to make sure
          // that all data in A|B are uploaded when |sharedMemorySize| is larger
          // than work group size.
          for(var localIndex = i32(localId.x); localIndex < ${this.lastDimensionSize}; localIndex = localIndex + ${this.workGroupSize[0]}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
            let flatIndex = index * ${this.workPerThread} + i;
            if(flatIndex < uniforms.size) {
              let coords = getCoordsFromIndex(flatIndex);

              ${o}
              setOutputAtIndex(flatIndex, binaryOperation(a, b));
            }
          }
        }
        `}else{let t=this.type==="vec4"?"vec4<f32>":"f32",o=Pp(this.op,this.isVec4);e=`
       fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {
         ${o}
       }
       ${fe("index")} {
         if (index < uniforms.size) {
           let a = getAByOutputIndex(index);
           let b = getBByOutputIndex(index);
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `}return e}};function ar(r){let{inputs:e}=r,{x:t}=e;return r.backend.incRef(t.dataId),{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}var ZK={kernelName:So,backendName:"webgpu",kernelFunc:ar};function ta(r){let{inputs:e,backend:t}=r,{real:o,imag:n}=e,s=t.makeTensorInfo(o.shape,"complex64"),i=t.tensorMap.get(s.dataId),a=ar({inputs:{x:o},backend:t}),l=ar({inputs:{x:n},backend:t});return i.complexTensorInfos={real:a,imag:l},s}var JK={kernelName:xi,backendName:"webgpu",kernelFunc:ta};var li=class{constructor(e,t){this.variableNames=["A"],this.size=!0;let o=128;this.workGroupSize=[o,1,1],this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.op=t,this.shaderKey=`unary_${t}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${zl(this.op,!1)}
      }
      ${fe("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}};function Qe({opType:r,cpuKernelImpl:e,dtype:t}){return({inputs:o,backend:n})=>{let{x:s}=o,i=n,a=t||s.dtype;if(i.shouldExecuteOnCPU([s])&&e!=null){let u=i.tensorMap.get(s.dataId),c=e(u.values,a);return i.makeTensorInfo(s.shape,a,c)}let l=new li(s.shape,r);return i.runWebGPUProgram(l,[s],a)}}function ut({opType:r,cpuKernelImpl:e,supportsComplex:t=!1,dtype:o}){return({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(t&&i.dtype==="complex64"){let p=l.tensorMap.get(i.dataId),m=l.tensorMap.get(a.dataId),f,d;if(r!==Te.MUL)[f,d]=[[p.complexTensorInfos.real,m.complexTensorInfos.real],[p.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(g=>{let[x,b]=g,C={dataId:x.dataId,dtype:x.dtype,shape:i.shape},S={dataId:b.dataId,dtype:b.dtype,shape:a.shape},I=new Bp(r,i.shape,a.shape);return l.runWebGPUProgram(I,[C,S],Ye(x.dtype,b.dtype))});else{let g=new Wg(Te.COMPLEX_MULTIPLY_REAL,i.shape,a.shape),x=new Wg(Te.COMPLEX_MULTIPLY_IMAG,i.shape,a.shape),b=[{dataId:p.complexTensorInfos.real.dataId,dtype:p.complexTensorInfos.real.dtype,shape:i.shape},{dataId:p.complexTensorInfos.imag.dataId,dtype:p.complexTensorInfos.imag.dtype,shape:i.shape},{dataId:m.complexTensorInfos.real.dataId,dtype:m.complexTensorInfos.real.dtype,shape:a.shape},{dataId:m.complexTensorInfos.imag.dataId,dtype:m.complexTensorInfos.imag.dtype,shape:a.shape}];f=l.runWebGPUProgram(g,b,"float32"),d=l.runWebGPUProgram(x,b,"float32")}let h=ta({inputs:{real:f,imag:d},backend:l});return l.disposeData(f.dataId),l.disposeData(d.dataId),h}let u=o||Ye(i.dtype,a.dtype);if((i.dtype==="string"||a.dtype==="string"||l.shouldExecuteOnCPU([i,a]))&&e!=null){let p=l.tensorMap.get(i.dataId).values,m=l.tensorMap.get(a.dataId).values,f=i.dtype==="string"?w.fromUint8ToStringArray(p):p,d=i.dtype==="string"?w.fromUint8ToStringArray(m):m,[h,g]=e(i.shape,a.shape,f,d,u);return l.makeTensorInfo(g,u,h)}let c=new Bp(r,i.shape,a.shape);return l.runWebGPUProgram(c,[i,a],u)}}var{addImpl:eq,castImpl:tq,ceilImpl:rq,concatImpl:oq,equalImpl:nq,expImpl:sq,expm1Impl:iq,floorImpl:aq,gatherNdImpl:lq,gatherV2Impl:uq,greaterEqualImpl:cq,greaterImpl:pq,lessEqualImpl:mq,lessImpl:fq,logImpl:dq,maxImpl:hq,maximumImpl:gq,minimumImpl:xq,multiplyImpl:yq,negImpl:bq,notEqualImpl:Cq,prodImpl:wq,rangeImpl:Sq,rsqrtImpl:Iq,scatterImpl:vq,simpleAbsImpl:Tq,sliceImpl:kq,stridedSliceImpl:Nq,stringNGramsImpl:$q,subImpl:Eq,tileImpl:Rq,topKImpl:Aq,transposeImpl:Dq,uniqueImpl:Jxr}=Pg;var jhe=Qe({opType:me.ABS,cpuKernelImpl:Tq}),Fq={kernelName:mn,backendName:"webgpu",kernelFunc:jhe};var Yhe=ut({opType:Te.ADD,cpuKernelImpl:eq,supportsComplex:!0}),_q={kernelName:Wr,backendName:"webgpu",kernelFunc:Yhe};var lI=class{constructor(e){this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((t,o)=>`T${o}`),this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let e=[];this.variableNames.forEach(n=>{e.push(`let v${n} = get${n}ByOutputCoords(coords);`)});let t=this.variableNames.map(n=>`v${n}`).join(" + ");return`
      ${fe("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join(`
        `)}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `}};function Qhe(r){let{inputs:e,backend:t}=r,o=e;if(o.length===1)return ar({inputs:{x:o[0]},backend:t});let n=o.map(a=>a.dtype).reduce((a,l)=>Ye(a,l)),s=o.map(a=>a.shape),i=new lI(s);return t.runWebGPUProgram(i,o,n)}var Oq={kernelName:Qn,backendName:"webgpu",kernelFunc:Qhe};var nd=class{constructor(e,t,o){this.workGroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;let n=[t];this.op=o==="min"?"<":">";let[s,i]=w.computeOutAndReduceShapes(e,n);this.outputShape=s.length===0?[1]:s,this.dispatchLayout=xe(this.outputShape),y.sizeFromShape(i)<32||y.sizeFromShape(s)>1e3?(this.type="plain",this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize)):(this.type="shared",this.dispatch=pe(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let e=()=>this.inputShape.length===1?"uniforms.xShape":`uniforms.xShape.${ii(this.inputShape.length-1)}`,t=()=>{let o="";if(this.outputShape.length===1)this.inputShape.length!==1&&(o+="outputCoords,");else for(let n=0;n<this.outputShape.length;n++)o+=`outputCoords.${ii(n)},`;return o};return this.type==="shared"?`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${this.workGroupSize[0]}>;
      var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
    `}

      ${fe("index")} {
        let outputIndex = index / i32(workGroupSizeX);
        let reduceLength = ${e()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + i32(workGroupSizeX)) {
          let candidate = getX(${t()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), workGroupSizeX);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `:`
      ${fe("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${t()} 0);
          let reduceLength = ${e()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${t()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `}};var uI=class{constructor(e,t){this.variableNames=["A"],this.workGroupSize=[16,16,1];let o=new Array(e.length);for(let n=0;n<o.length;n++)o[n]=e[t[n]];this.outputShape=o,this.dispatchLayout={x:[0],y:[1]},this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){return`
      const TILE_DIM = ${this.workGroupSize[0]};
      var<workgroup> tile : array<array<f32, ${this.workGroupSize[0]+1}>, ${this.workGroupSize[0]}>;
      ${hc()}
      fn _start(@builtin(local_invocation_id) localId : vec3<u32>,
                @builtin(workgroup_id) workgroupId : vec3<u32>) {
        var x = i32(workgroupId.x) * TILE_DIM + i32(localId.x);
        var y = i32(workgroupId.y) * TILE_DIM + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = A[y * width + x];
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * TILE_DIM + i32(localId.x);
        y = i32(workgroupId.x) * TILE_DIM + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}};var cI=class{constructor(e,t){this.variableNames=["A"],this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0;let o=new Array(e.length);for(let n=0;n<o.length;n++)o[n]=e[t[n]];this.outputShape=o,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){let e=Jt(this.outputShape.length),t=Zhe(this.newDim);return`
      ${fe("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let resRC = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `}};function Zhe(r){let e=r.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);let t=new Array(e);for(let o=0;o<r.length;o++)t[r[o]]=`resRC.${ii(o)}`;return t.join()}function fo(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{perm:s}=o,i=t,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];if(t.shouldExecuteOnCPU([n])){let p=i.tensorMap.get(n.dataId).values,m=Dq(p,n.shape,n.dtype,s,l);return t.makeTensorInfo(l,n.dtype,m)}if(n.shape.length===2&&y.arraysEqual(s,[1,0])){let c=new uI(n.shape,s);return i.runWebGPUProgram(c,[n],n.dtype)}let u=new cI(n.shape,s);return i.runWebGPUProgram(u,[n],n.dtype)}var Pq={kernelName:qo,backendName:"webgpu",kernelFunc:fo};function Jhe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=fo({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),w.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=new nd(l.shape,i[0],"max"),p=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],m=t.runWebGPUProgram(c,[l],"int32",p);return u.forEach(f=>t.disposeData(f.dataId)),m}var Lq={kernelName:Zn,backendName:"webgpu",kernelFunc:Jhe};function ege(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=w.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=fo({inputs:{x:n},backend:t,attrs:{perm:a}}),u.push(l),i=w.getInnerMostAxes(i.length,l.shape.length)),w.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=new nd(l.shape,i[0],"min"),p=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],m=t.runWebGPUProgram(c,[l],"int32",p);return u.forEach(f=>t.disposeData(f.dataId)),m}var zq={kernelName:Jn,backendName:"webgpu",kernelFunc:ege};var tge=ut({opType:Te.ATAN2}),Bq={kernelName:fn,backendName:"webgpu",kernelFunc:tge};var Hg=class{constructor(e,t){this.variableNames=["x"],this.uniforms="stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workGroupSize=[128,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`pool2D_${t}`,this.poolType=t}getUserCode(){let e="resultValue = max(value, resultValue);";this.poolType==="avg"&&(e="resultValue = resultValue + value; count = count + 1.0;");let t="resultValue";return this.poolType==="avg"&&(t="resultValue / count"),`
      ${fe("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};
          var count = 0.0;

          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, coords[3]);
              ${e}
            }
          }

          setOutputAtIndex(index, ${t});
        }
      }
    `}};var pI=class{constructor(e){this.variableNames=["x"],this.uniforms="stride : vec2<i32>,",this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.stride;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}};var mI=class{constructor(e,t){this.workGroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];let[o]=w.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=o.length===0?[1]:o,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey=`reduce_${t}`}getUserCode(){let e="",t="0.0";this.reduceType==="min"||this.reduceType==="max"?(e=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType==="min"?"<":">"} bestValue)
           {  bestValue = candidate; }`,t="f32(x[offset])"):this.reduceType==="sum"||this.reduceType==="mean"?e=" bestValue = bestValue + candidate; ":this.reduceType==="prod"&&(e=" bestValue = bestValue * candidate; ",t="1.0");let o=this.reduceType==="mean"?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${this.workGroupSize[0]}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length===1?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${fe("index")} {
         let outputIndex = index / i32(workGroupSizeX);
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), workGroupSizeX);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + i32(workGroupSizeX)) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), workGroupSizeX);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${o}
        }
       }
     `}};function sl(r,e,t,o,n){let s=r.shape.length,i=[],a=y.parseAxisParam(e,r.shape),l=a,u=w.getAxesPermutation(l,s),c=r;u!=null&&(c=fo({inputs:{x:r},attrs:{perm:u},backend:n}),l=w.getInnerMostAxes(l.length,s),i.push(c)),w.assertAxesAreInnerMostDims(o,l,s);let[p,m]=w.computeOutAndReduceShapes(c.shape,l),f=p;t&&(f=w.expandShapeToKeepDim(p,a));let d;if((o==="max"||o==="prod")&&n.shouldExecuteOnCPU([c])){let h=n.tensorMap.get(c.dataId).values;switch(o){case"max":let g=hq(h,y.sizeFromShape(m),f,r.dtype);d=n.makeTensorInfo(f,r.dtype,g);break;case"prod":let{outVals:x,outShape:b,outDtype:C}=wq(c.shape,c.dtype,h,l);d=n.makeTensorInfo(b,C,x);break;default:throw new Error(`${o} CPU implementation is not yet supported.`)}}else{let h=y.sizeFromShape(m),x=y.sizeFromShape(c.shape)/h,b={windowSize:h,inSize:h,batchSize:x,outSize:1},C=o==="mean"?"float32":Do(r.dtype),S=[{type:"int32",data:[h]}],I=new mI(b,o),N=n.runWebGPUProgram(I,[c],C,S);i.push(N),d=ve({inputs:{x:N},attrs:{shape:f},backend:n})}return i.forEach(h=>n.disposeData(h.dataId)),d}function Kg(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reductionIndices:s,keepDims:i}=o;return sl(n,s,i,"max",t)}var Mq={kernelName:ms,backendName:"webgpu",kernelFunc:Kg};function KN(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{keepDims:s,axis:i}=o;return sl(n,i,s,"mean",t)}var Vq={kernelName:ds,backendName:"webgpu",kernelFunc:KN};function fI(r,e,t,o){if(e.filterWidth===1&&e.filterHeight===1&&y.arraysEqual(e.inShape,e.outShape))return ar({inputs:{x:r},backend:o});if(e.filterWidth===e.inWidth&&e.filterHeight===e.inHeight&&e.batchSize===1&&e.padInfo.type==="VALID"){let i=r.shape.length,a=ve({inputs:{x:r},backend:o,attrs:{shape:[r.shape[i-3]*r.shape[i-2],r.shape[i-1]]}}),l;t==="avg"?l=KN({inputs:{x:a},backend:o,attrs:{axis:0,keepDims:!1}}):(y.assert(t==="max",()=>`Invalid pool type ${t}`),l=Kg({inputs:{x:a},backend:o,attrs:{reductionIndices:0,keepDims:!1}}));let u=ve({inputs:{x:l},backend:o,attrs:{shape:e.outShape}});return o.disposeData(a.dataId),o.disposeData(l.dataId),u}let n,s=[{type:"int32",data:[e.strideHeight,e.strideWidth]}];return e.filterHeight===1&&e.filterWidth===1?n=new pI(e):(t==="avg"?n=new Hg(e,"avg"):(y.assert(t==="max",()=>`Invalid pool type ${t}`),n=new Hg(e,"max")),s.push({type:"int32",data:[e.padInfo.top,e.padInfo.left]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]},{type:"int32",data:[e.inHeight,e.inWidth]},{type:"int32",data:[e.effectiveFilterHeight,e.effectiveFilterWidth]})),o.runWebGPUProgram(n,[r],r.dtype,s)}function rge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1,c=w.computePool2DInfo(n.shape,s,i,u,a,l);return fI(n,c,"avg",t)}var Gq={kernelName:es,backendName:"webgpu",kernelFunc:rge};function oge(r){let{inputs:e,backend:t,attrs:o}=r,{a:n,b:s}=e,{transposeA:i,transposeB:a}=o;return od({a:n,b:s,transposeA:i,transposeB:a,backend:t})}var Uq={kernelName:ts,backendName:"webgpu",kernelFunc:oge};var dI=class{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${Jt(e.length)}, `,this.shaderKey="slice"}getUserCode(){let e=Jt(this.rank),t=nge(this.rank),o;return this.start.length===1?o=this.outputShape.map((s,i)=>"sourceLoc = uniforms.start + coords;"):o=this.outputShape.map((s,i)=>`sourceLoc.${qN[i]} = uniforms.start.${ii(i)} + coords.${qN[i]};`),`
      ${fe("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${e};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${t}));
        }
      }
    `}},qN=["x","y","z","w","u","v"];function nge(r){if(r===1)return"sourceLoc";if(r<=6)return qN.slice(0,r).map(e=>`sourceLoc.${e}`).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}function ra(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,size:i}=o,[a,l]=rt.parseSliceParams(n,s,i);if(rt.assertParamsValid(n,a,l),t.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=t.tensorMap.get(n.dataId),m=kq(p.values,a,l,n.shape,n.dtype);return t.makeTensorInfo(l,n.dtype,m)}if(y.sizeFromShape(l)===0)return t.makeTensorInfo(l,n.dtype,[]);let u=new dI(a,l),c=[{type:"int32",data:a}];return t.runWebGPUProgram(u,[n],n.dtype,c)}var Wq={kernelName:Dn,backendName:"webgpu",kernelFunc:ra};var sge=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let a=s.reduce((b,C)=>b*C),l=w.getReshaped(n.shape,s,a),u=w.getPermuted(l.length,s.length),c=w.getReshapedPermuted(n.shape,s,a),p=w.getSliceBeginCoords(i,s.length),m=w.getSliceSize(c,i,s.length),f=[],d=ve({inputs:{x:n},backend:t,attrs:{shape:l}}),h=fo({inputs:{x:d},backend:t,attrs:{perm:u}}),g=ve({inputs:{x:h},backend:t,attrs:{shape:c}}),x=ra({inputs:{x:g},backend:t,attrs:{begin:p,size:m}});return f.push(d),f.push(h),f.push(g),f.forEach(b=>t.disposeData(b.dataId)),x},Hq={kernelName:rs,backendName:"webgpu",kernelFunc:sge};var XN=ut({opType:Te.NOT_EQUAL,dtype:"bool",cpuKernelImpl:Cq}),Kq={kernelName:kn,backendName:"webgpu",kernelFunc:XN};function Bl(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.tensorMap.get(o.dataId);return ar({inputs:{x:n.complexTensorInfos.real},backend:t})}var qq={kernelName:Ti,backendName:"webgpu",kernelFunc:Bl};function Xq(r,e){let t=new li(r.shape,me.TO_INT),o=e.runWebGPUProgram(t,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function jN(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return ar({inputs:{x:n},backend:t});let i=it(n.shape),a=jN({inputs:{x:n},backend:t,attrs:{dtype:"float32"}}),l=ta({inputs:{real:a,imag:i},backend:t});return i.dispose(),t.disposeData(a.dataId),l}if(n.dtype==="complex64"){let i=Bl({inputs:{input:n},backend:t}),a=jN({inputs:{x:i},backend:t,attrs:{dtype:s}});return t.disposeData(i.dataId),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=ar({inputs:{x:n},backend:t});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(t.shouldExecuteOnCPU([n])){let i=t.tensorMap.get(n.dataId).values,[a,l,u]=tq(i,n.shape,n.dtype,s);return t.makeTensorInfo(a,l,u)}if(s==="int32")return Xq(n,t);if(s==="bool"){let i=t.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=XN({inputs:{a:n,b:i},backend:t});return t.disposeData(i.dataId),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var jq={kernelName:go,backendName:"webgpu",kernelFunc:jN};var ige=Qe({opType:me.CEIL,cpuKernelImpl:rq}),Yq={kernelName:xo,backendName:"webgpu",kernelFunc:ige};var hI=class{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workGroupSize=[64,1,1],this.isVec4=!0,this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${fe("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue : vec4<f32>;
          for (var i = 0; i < 4; i = i + 1) {
            if (isnan(value[i])) {
              clampedValue[i] = value[i];
            } else {
              clampedValue[i] = clamp(value[i], uniforms.minVal, uniforms.maxVal);
            }
          }

          setOutputAtIndex(index, clampedValue);
        }
      }
    `}};var gI=class{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${fe("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}};function age(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{clipValueMin:s,clipValueMax:i}=o,a,l=[{type:"float32",data:[s]},{type:"float32",data:[i]}];return y.sizeFromShape(n.shape)%4===0?a=new hI(n.shape):a=new gI(n.shape),t.runWebGPUProgram(a,[n],n.dtype,l)}var Qq={kernelName:dn,backendName:"webgpu",kernelFunc:age};var xI=class{constructor(e){this.uniforms="",this.workPerThread=4,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=w.computeOutShape(e,1),this.variableNames=e.map((t,o)=>`T${o}`),this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let t=0;t<this.offsetLength;t++)this.uniforms+=`offset${t} : i32,`;this.shaderKey="concat"}getUserCode(){let e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let s=1;s<this.offsetLength;s++)e.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s-1})); }`);let o=this.offsetLength,n=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${fe("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join(`
        `)}
          }
        }
      }
    `}};function Mp(r){let{inputs:e,backend:t}=r,{input:o}=e,n=t.tensorMap.get(o.dataId);return ar({inputs:{x:n.complexTensorInfos.imag},backend:t})}var Zq={kernelName:ha,backendName:"webgpu",kernelFunc:Mp};function sd(r,e,t){let o=r[0].dtype;if(o==="complex64"){let d=r.map(C=>Bl({inputs:{input:C},backend:t})),h=r.map(C=>Mp({inputs:{input:C},backend:t})),g=sd(d,e,t),x=sd(h,e,t),b=ta({inputs:{real:g,imag:x},backend:t});return d.forEach(C=>t.disposeData(C.dataId)),h.forEach(C=>t.disposeData(C.dataId)),t.disposeData(g.dataId),t.disposeData(x.dataId),b}let n=t.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let d=r.map(I=>{let N=y.sizeFromShape(I.shape.slice(e));return ve({inputs:{x:I},backend:t,attrs:{shape:[-1,N]}})}),h=d.map(I=>({vals:t.readSync(I.dataId),shape:I.shape})),g=w.computeOutShape(d.map(I=>I.shape),1),x=d[0].shape[0]===1,b=oq(h,g,o,x),C=w.computeOutShape(r.map(I=>I.shape),e),S=t.makeTensorInfo(C,o,b);return d.forEach(I=>t.disposeData(I.dataId)),S}let s=t.device.limits.maxStorageBuffersPerShaderStage-1;if(r.length>s){let d=[];for(let g=0;g<r.length;g+=s){let x=r.slice(g,g+s);d.push(sd(x,e,t))}let h=sd(d,e,t);for(let g of d)t.disposeData(g.dataId);return h}let{tensors2D:i,outShape:a}=lge(r,e,t),l=i.map(d=>d.shape),u=new xI(l),c=[],p=new Array(l.length-1);if(p.length>0){p[0]=l[0][1],c.push({type:"int32",data:[p[0]]});for(let d=1;d<p.length;d++)p[d]=p[d-1]+l[d][1],c.push({type:"int32",data:[p[d]]})}let m=t.runWebGPUProgram(u,i,i[0].dtype,c);i.forEach(d=>t.disposeData(d.dataId));let f=ve({inputs:{x:m},backend:t,attrs:{shape:a}});return t.disposeData(m.dataId),f}function lge(r,e,t){let o=w.computeOutShape(r.map(s=>s.shape),e);return{tensors2D:r.map(s=>ve({inputs:{x:s},backend:t,attrs:{shape:[y.sizeFromShape(s.shape.slice(0,e)),y.sizeFromShape(s.shape.slice(e))]}})),outShape:o}}function YN(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,e[0].shape)[0],i=w.computeOutShape(e.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return t.makeTensorInfo(i,e[0].dtype,[]);let a=e.filter(u=>y.sizeFromShape(u.shape)>0);if(a.length===1)return ar({inputs:{x:a[0]},backend:t});let l=a.map(u=>u.shape);return w.assertParamsConsistent(l,s),sd(a,s,t)}var Jq={kernelName:os,backendName:"webgpu",kernelFunc:YN};function uge(r,e,t,o,n=!1,s=null,i=!1,a=4,l=4,u=4){let c=F=>{switch(F){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${F} is not supported.`)}},p=F=>{switch(F){case 1:return"return W[row * uniforms.wShape[3] + colIn];";case 4:return"return W[row * uniforms.wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${F} is not supported.`)}},m=r?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,f=r?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,d=r?"uniforms.xShape[1]":"uniforms.xShape[2]",h=r?"uniforms.xShape[2]":"uniforms.xShape[3]",g=r?"row":"col",x=r?"col":"row",b=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
      let xCh = ${x} % inChannels;
      var resData = ${Wt(a)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${d} && xCol >= 0 && xCol < ${h}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${c(a)}
      }
      return resData;`,C=r?e&&o?`
      let col = colIn * ${a};
      ${b}`:`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${Wt(a)}(0.0);`:o&&t?`
      let col = colIn * ${a};
      ${b}`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${Wt(a)}(0.0);`,S=`${p(l)}`,I=Wt(u),N=r?Wt(a):Wt(l),$=r?Wt(l):Wt(a);return`
      ${mo(s,i,u===4,4)}
      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${N} {
        ${r?C:S}
      }

      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${$} {
        ${r?S:C}
      }

      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${I}) {
        let col = colIn * ${u};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${f}
        ${ai(n,s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}var yI=class{constructor(e,t,o,n,s=!1,i=null,a=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast=e.dataFormat==="channelsLast",this.isVec4=((e.inChannels%4===0||e.inChannels%3===0)&&this.isChannelsLast||e.outWidth%4===0&&!this.isChannelsLast)&&e.outChannels%4===0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workGroupSize=JS(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=eI(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread),this.isVec4?(this.isChannelsLast&&e.inChannels%4!==0?(this.innerElementSize=3,this.variableTypes=["f32","vec4<f32>"]):(this.innerElementSize=4,this.variableTypes=["vec4<f32>","vec4<f32>"]),s&&(this.variableNames.push("bias"),this.variableTypes.push("vec4<f32>")),a&&(this.variableNames.push("preluActivationWeights"),this.variableTypes.push("vec4<f32>"))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights")),this.addBias=s,this.activation=i,this.hasPreluActivationWeights=a,this.tileAOuter=this.workGroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workGroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workGroupSize[0]*this.innerElementSize,this.workGroupSize[1]),this.fitAOuter=t%this.tileAOuter===0,this.fitBOuter=o%this.tileBOuter===0,this.fitInner=n%this.tileInner===0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}`}getUserCode(){let e=this.isVec4?Lp(this.elementsPerThread,this.workGroupSize,!this.isChannelsLast,this.tileInner):zp(this.elementsPerThread,this.workGroupSize,!this.isChannelsLast,this.tileInner),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${uge(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}
    ${e}
  `}};function eX(r,e){let t=r.length;return t>=3?e?[...r.slice(0,-3),r[t-3]*r[t-2],r[t-1]]:[...r.slice(0,-3),r[t-3],r[t-2]*r[t-1]]:!e&&t===1&&r[0]>1?[r[0],1]:null}function cge({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=t.dataFormat==="channelsLast",u=!l,c=!1,p=l&&t.filterHeight===t.inHeight&&t.filterWidth===t.inWidth&&t.padInfo.type==="VALID",m=[],f,d;if(p){let x=t.inHeight*t.inWidth*t.inChannels;f=ve({inputs:{x:r},backend:o,attrs:{shape:[1,t.batchSize,x]}}),d=ve({inputs:{x:e},backend:o,attrs:{shape:[1,x,t.outChannels]}})}else f=ve({inputs:{x:r},backend:o,attrs:{shape:l?[t.batchSize,t.inHeight*t.inWidth,t.inChannels]:[t.batchSize,t.inChannels,t.inHeight*t.inWidth]}}),d=ve({inputs:{x:e},backend:o,attrs:{shape:[1,t.inChannels,t.outChannels]}});if(m.push(f),m.push(d),s!=null){let x=eX(s.shape,l);x!=null&&(s=ve({inputs:{x:s},backend:o,attrs:{shape:x}}),m.push(s))}if(n!=null){let x=eX(n.shape,l);x!=null&&(n=ve({inputs:{x:n},backend:o,attrs:{shape:x}}),m.push(n))}let h=od({a:l?f:d,b:l?d:f,transposeA:u,transposeB:c,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),g=ve({inputs:{x:h},backend:o,attrs:{shape:t.outShape}});m.push(h);for(let x of m)o.disposeData(x.dataId);return g}function bI({x:r,filter:e,convInfo:t,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=n!=null,u=s!=null,c=t.dataFormat==="channelsLast";if(c&&t.filterHeight===t.inHeight&&t.filterWidth===t.inWidth&&t.padInfo.type==="VALID"||t.filterHeight===1&&t.filterWidth===1&&t.dilationHeight===1&&t.dilationWidth===1&&t.strideHeight===1&&t.strideWidth===1&&(t.padInfo.type==="SAME"||t.padInfo.type==="VALID"))return cge({x:r,filter:e,convInfo:t,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});let m=c?t.outHeight*t.outWidth:t.outChannels,f=c?t.outChannels:t.outHeight*t.outWidth,d=t.filterHeight*t.filterWidth*t.inChannels,h=[t.padInfo.top,t.padInfo.left],g=[{type:"int32",data:[t.filterHeight,t.filterWidth]},{type:"int32",data:[...h]},{type:"int32",data:[t.strideHeight,t.strideWidth]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[m]},{type:"int32",data:[f]},{type:"int32",data:[d]}],x=new yI(t,m,f,d,l,a,u),b=[],C=[r,e];l&&(!c&&n.shape.length===1&&(n=ve({inputs:{x:n},backend:o,attrs:{shape:[n.shape[0],1,1]}}),b.push(n)),C.push(n)),u&&(!c&&s.shape.length===1&&(s=ve({inputs:{x:s},backend:o,attrs:{shape:[s.shape[0],1,1]}}),b.push(s)),C.push(s)),a==="leakyrelu"&&(g.push({type:"float32",data:[i]}),x.uniforms+=" alpha : f32,");let S=o.runWebGPUProgram(x,C,r.dtype,g);for(let I of b)o.disposeData(I.dataId);return S}function pge(r){let{inputs:e,attrs:t,backend:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=t,p=w.convertConv2DDataFormat(l),m=w.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p);return bI({x:n,filter:s,convInfo:m,backend:o})}var tX={kernelName:ns,backendName:"webgpu",kernelFunc:pge};function mge(r=4){let e=s=>{switch(s){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${s} is not supported.`)}},o=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${Wt(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${Wt(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${Wt(r)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Wt(r)} {
    let col = colIn * ${r};
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Wt(r)} {
    let col = colIn * ${r};
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${e(r)}
    }
    return ${Wt(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${Wt(r)}) {
    let col = colIn * ${r};
    if (row < uniforms.dimAOuter && (col + ${r-1}) < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`}var CI=class{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,y.assert(e.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4===0&&e.outChannels%4===0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workGroupSize=JS(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=eI(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,this.elementsPerThread),this.isVec4&&(this.variableTypes=["vec4<f32>","f32"]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let e=this.isVec4?Lp(this.elementsPerThread,this.workGroupSize):zp(this.elementsPerThread,this.workGroupSize);return`
    ${mge(this.isVec4?4:1)}
    ${e}
    `}};var wI=class{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.isChannelsLast=e.dataFormat==="channelsLast",this.shaderKey=`conv2DDerInput_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,o=this.isChannelsLast?3:1;return`
    ${fe("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${e}]), coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = dyR;

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = dyC;

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              if (${this.isChannelsLast}) {
                let xValue = getDy(batch, idyR, idyC, d2);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              } else {
                let xValue = getDy(batch, d2, idyR, idyC);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              }

            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}};function fge(r){let{inputs:e,backend:t,attrs:o}=r,{dy:n,filter:s}=e,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=w.convertConv2DDataFormat(u),m=w.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p),f=[{type:"int32",data:[m.filterHeight,m.filterWidth]},{type:"int32",data:[m.filterHeight-1-m.padInfo.top,m.filterWidth-1-m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize,m.outHeight,m.outWidth,m.outChannels]}],d;if(D().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE"))d=new wI(m);else{d=new CI(m);let h=m.inShape[1]*m.inShape[2],g=m.inShape[3],x=m.filterHeight*m.filterWidth*m.outChannels;f.push({type:"uint32",data:[h]},{type:"uint32",data:[g]},{type:"uint32",data:[x]})}return t.runWebGPUProgram(d,[n,s],"float32",f)}var rX={kernelName:ss,backendName:"webgpu",kernelFunc:fge};var dge=Qe({opType:me.COS}),oX={kernelName:hn,backendName:"webgpu",kernelFunc:dge};var hge=Qe({opType:me.COSH}),nX={kernelName:gn,backendName:"webgpu",kernelFunc:hge};var SI=class{constructor(e,t,o,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workGroupSize=[64,1,1],this.size=!0;let[s]=t;this.outputShape=[s,o[0],o[1],e],this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.methodId=n==="bilinear"?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[o,n,s]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[i,a,l]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`
    ${fe("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${i});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${a};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${l};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}};var gge=r=>{let{inputs:e,backend:t,attrs:o}=r,{image:n,boxes:s,boxInd:i}=e,{cropSize:a,method:l,extrapolationValue:u}=o,c=new SI(n.shape[3],s.shape,a,l),p=[{type:"float32",data:[u]}];return t.runWebGPUProgram(c,[n,s,i],"float32",p)},sX={kernelName:la,backendName:"webgpu",kernelFunc:gge};var Vp;(function(r){r.Prod="*",r.Sum="+"})(Vp||(Vp={}));var qg=class{constructor(e,t,o,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0;let s=128;this.workGroupSize=[s,1,1],this.outputShape=t,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.exclusive=o,this.reverse=n,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let e=this.outputShape.length,t=this.op===Vp.Prod?"1.0":"0.0",o=this.exclusive?t:`getX(${iX(e,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],s="",i="";return this.exclusive?(s=this.reverse?`end != ${n-1}`:"end != 0",i=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${n}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`
      ${fe("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${aX(e,"coords",this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${i};
           ${aX(e,"coords",this.op)} = idx;
           val ${this.op}= getX(${iX(e,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}};function iX(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.x, ${e}.y`;if(r===3)return`${e}.x, ${e}.y, ${e}.z`;if(r===4)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function aX(r,e,t){if(r===1)return`${e}`;if(r===2)return`${e}.y`;if(r===3)return`${e}.z`;if(r===4)return`${e}.w`;throw Error(`Cumulative ${t} for rank ${r} is not yet supported`)}function II(r,e,t,o,n,s){let i=e.shape.length,a=w.getAxesPermutation([o],i),l=e;a!=null&&(l=fo({inputs:{x:e},backend:t,attrs:{perm:a}}));let u=w.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${e.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=ar({inputs:{x:l},backend:t});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new qg(r,l.shape,!1,s),d=p,h=[{type:"float32",data:[m]}];p=t.runWebGPUProgram(f,[p],p.dtype,h),t.disposeData(d.dataId)}if(n){let m=new qg(r,l.shape,n,s),f=p,d=[{type:"float32",data:[0]}];p=t.runWebGPUProgram(m,[p],p.dtype,d),t.disposeData(f.dataId)}if(a!=null){let m=w.getUndoAxesPermutation(a),f=fo({inputs:{x:p},backend:t,attrs:{perm:m}});return t.disposeData(p.dataId),t.disposeData(l.dataId),f}return p}function xge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;return II(Vp.Prod,n,t,s,i,a)}var lX={kernelName:aa,backendName:"webgpu",kernelFunc:xge};function yge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,exclusive:i,reverse:a}=o;return II(Vp.Sum,n,t,s,i,a)}var uX={kernelName:is,backendName:"webgpu",kernelFunc:yge};var vI=class{constructor(e,t){this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function bge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),d=i==="NHWC"?[a,p,m,f]:[a,f,p,m],h=[{type:"int32",data:[s]}],g=new vI(d,i);return t.runWebGPUProgram(g,[n],n.dtype,h)}var cX={kernelName:ua,backendName:"webgpu",kernelFunc:bge};var TI=class{constructor(e,t,o,n=!1,s=null,i=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workGroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),n&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=s,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=o,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let e=this.filterWidth*this.filterHeight,t=this.workGroupSize[0]*this.workGroupSize[1]*this.workGroupSize[2],o=this.workGroupSize[1]+this.filterHeight-1,n=this.workGroupSize[0]+this.filterWidth-1;return`
      ${mo(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${hc()}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(num_workgroups) NumWorkgroups: vec3<u32>) {
        localId = LocalId;
        globalId = GlobalId;
        let localIndex = i32(LocalIndex);
        numWorkgroups = NumWorkgroups;
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workGroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workGroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = localIndex;
        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${ai(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};var id=class{constructor(e,t=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workGroupSize=[4,4,4],this.isVec4=!0,this.outputShape=e.outShape,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[4,4,1]),y.assert(e.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}`}getUserCode(){let e=4+this.convInfo.filterWidth-1;return`
      ${mo(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, row, col, channel);
        }
        return value;
      }
      ${hc()}
      fn _start(@builtin(global_invocation_id) globalId: vec3<u32>) {
        let batch = i32(globalId.z) / uniforms.outShape[1];
        let r = i32(globalId.z) % uniforms.outShape[1];
        let c = i32(globalId.y) * 4;
        let d1 = i32(globalId.x) * 4;
        let xRCCorner = vec2<i32>(r, c) - uniforms.pad;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, 4>;
        dotProd[0] = vec4<f32>(0.0);
        dotProd[1] = vec4<f32>(0.0);
        dotProd[2] = vec4<f32>(0.0);
        dotProd[3] = vec4<f32>(0.0);

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          for (var i = 0; i < ${e}; i++)
          {
            xVals[i] = readX(batch, xR, xCCorner + i, d1);
          }
          for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
            let wValue = getW(wR, wC, d1, 0);
            dotProd[0] = dotProd[0] + xVals[0 + wC] * wValue;
            dotProd[1] = dotProd[1] + xVals[1 + wC] * wValue;
            dotProd[2] = dotProd[2] + xVals[2 + wC] * wValue;
            dotProd[3] = dotProd[3] + xVals[3 + wC] * wValue;
          }
        }

        for (var i = 0; i < 4; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${ai(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}};var ad=class{constructor(e,t=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,`,this.workGroupSize=[256,1,1],this.outputShape=e.outShape,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.isChannelsLast=e.dataFormat==="channelsLast",t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${mo(this.activation,this.hasPreluActivation,!1,4)}

      ${fe()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.stride - uniforms.pad;
        let d2 = coords[${this.isChannelsLast?3:1}];
        let channelMul = uniforms.wShape[3];
        let d1 = d2 / channelMul;
        let q = d2 % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;
        let inputRowEnd = inputRowStart + uniforms.filterHeight *
            uniforms.dilation[0];
        let inputColEnd = inputColStart + uniforms.filterWidth *
            uniforms.dilation[1];

        // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
        // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
        // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
        // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
        var value = 0.0;

        // Extract if checking out of for loop for performance.
        if (inputRowStart >= 0 && inputColStart >= 0 &&
          inputRowEnd < uniforms.inDims[0] &&
              inputColEnd < uniforms.inDims[1]) {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                let xVal = ${e};
                let wVal = getW(wR, wC, d1, q);
                value = value + xVal * wVal;
              }
            }
          } else {
            for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
              let xR = inputRowStart + wR * uniforms.dilation[0];

              if (xR < 0 || xR >= uniforms.inDims[0]) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                let xC = inputColStart + wC * uniforms.dilation[1];

                if (xC < 0 || xC >= uniforms.inDims[1]) {
                  continue;
                }

                let xVal = ${e};
                let wVal = getW(wR, wC, d1, q);
                value = value + xVal * wVal;
              }
            }
          }
          ${ai(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};function Cge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s}=e,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=w.convertConv2DDataFormat(l),m=u;m==null&&(m=[1,1]);let f=w.computeConv2DInfo(n.shape,s.shape,i,m,a,c,!0,p),d=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],h=f.dataFormat==="channelsLast",g;return!h&&f.inHeight>16&&f.inWidth>16&&f.strideHeight===1&&f.strideWidth===1&&f.dilationWidth===1&&f.dilationHeight===1&&f.inChannels===f.outChannels?g=new TI(f.outShape,f.filterHeight,f.filterWidth):h&&f.inHeight>4&&f.inWidth>4&&f.strideHeight===1&&f.strideWidth===1&&f.inChannels===f.outChannels&&f.dilationHeight===1&&f.dilationWidth===1&&f.inChannels%4===0?g=new id(f):(g=new ad(f),d.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),t.runWebGPUProgram(g,[n,s],n.dtype,d)}var pX={kernelName:as,backendName:"webgpu",kernelFunc:Cge};var QN=ut({opType:Te.MUL,cpuKernelImpl:yq,supportsComplex:!0}),mX={kernelName:ko,backendName:"webgpu",kernelFunc:QN};function Xg(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;return sl(n,s,i,"sum",t)}var fX={kernelName:Ts,backendName:"webgpu",kernelFunc:Xg};function wge(r){let{inputs:e,backend:t,attrs:o}=r,{equation:n}=o,s=e,{allDims:i,summedDims:a,idDims:l}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=w.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,d=[];for(let h=0;h<p;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(f,l[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=fo({inputs:{x:s[g]},backend:t,attrs:{perm:x}}),d.push(C));let S=C.shape.slice();for(let I=0;I<b.length;++I)S.splice(b[I],0,1);y.arraysEqual(C.shape,S)||(C=ve({inputs:{x:C},backend:t,attrs:{shape:S}}),d.push(C)),m===null?m=C:(m=QN({inputs:{a:C,b:m},backend:t}),d.push(m))}h<p-1&&(u[h]>=0&&(m=Xg({inputs:{x:m},backend:t,attrs:{axis:u[h]-(i.length-f),keepDims:!1}}),d.push(m)),f--)}for(let h of d)h!==m&&t.disposeData(h.dataId);return m}var dX={kernelName:pa,backendName:"webgpu",kernelFunc:wge};var Sge=Qe({opType:me.ELU}),hX={kernelName:yn,backendName:"webgpu",kernelFunc:Sge};var Ige=ut({opType:Te.EQUAL,dtype:"bool",cpuKernelImpl:nq}),gX={kernelName:bn,backendName:"webgpu",kernelFunc:Ige};var ZN=Qe({opType:me.EXP,cpuKernelImpl:sq,dtype:"float32"}),xX={kernelName:yo,backendName:"webgpu",kernelFunc:ZN};function kI(r){let{inputs:e,attrs:t,backend:o}=r,{dim:n}=t,{input:s}=e,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),ve({inputs:{x:s},backend:o,attrs:{shape:a}})}var yX={kernelName:ls,backendName:"webgpu",kernelFunc:kI};var vge=Qe({opType:me.EXPM1,cpuKernelImpl:iq}),bX={kernelName:bo,backendName:"webgpu",kernelFunc:vge};var NI=class{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}};var CX={kernelName:fa,backendName:"webgpu",kernelFunc:({inputs:r,backend:e})=>{let{image:t}=r,o=e,n=new NI(t.shape);return o.runWebGPUProgram(n,[t],t.dtype)}};var Tge=Qe({opType:me.FLOOR,cpuKernelImpl:aq}),wX={kernelName:Co,backendName:"webgpu",kernelFunc:Tge};var kge=ut({opType:Te.INT_DIV,dtype:"int32"}),SX={kernelName:Cn,backendName:"webgpu",kernelFunc:kge};var $I=class{constructor(e,t,o=!1){this.isFromPixels=!0,this.outputShape=[0],this.variableNames=[],this.workGroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[t,1,1]),this.importVideo=o,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`
      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};
      ${fe("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}};var IX={kernelName:pl,backendName:"webgpu",kernelFunc:Nge},ld,JN=D().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"),EI=new Map;function Nge(r){let{inputs:e,backend:t,attrs:o}=r,{pixels:n}=e,{numChannels:s}=o;if(n==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,l=typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&n instanceof OffscreenCanvas,u=typeof ImageBitmap<"u"&&n instanceof ImageBitmap,[c,p]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],m=[p,c,s],f=D().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&i,d=i||a;if(u||l||d){let b;if(f){let _=n;if(!EI.has(_)||EI.get(_).expired){let B={source:_};EI.set(_,t.device.importExternalTexture(B))}b={width:c,height:p,format:null,usage:null,texture:EI.get(_)}}else{if(d){let G=D().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(ld==null||G!==JN)&&(JN=G,ld=document.createElement("canvas").getContext("2d",{willReadFrequently:JN})),ld.canvas.width=c,ld.canvas.height=p,ld.drawImage(n,0,0,c,p),n=ld.canvas}let _=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,B="rgba8unorm",V=t.textureManager.acquireTexture(m[1],m[0],B,_);t.queue.copyExternalImageToTexture({source:n},{texture:V},[m[1],m[0]]),b={width:c,height:p,format:B,usage:_,texture:V}}let C=y.sizeFromShape(m),S=y.computeStrides(m),I=new $I(m,s,f),N=[{type:"uint32",data:[C]},{type:"uint32",data:[s]},{type:"uint32",data:[...S]}],$=t.makeTensorInfo([p,c],"int32"),R=t.tensorMap.get($.dataId);R.resourceInfo=b;let F=t.runWebGPUProgram(I,[$],"int32",N);return t.disposeData($.dataId),F}let h=n.data,g=h;if(s!=null&&s!==4){g=new Uint8Array(n.width*n.height*s);let b=h.length,C=0;for(let S=0;S<b;S++)S%4<s&&(g[C++]=h[S])}let x=t.makeTensorInfo(m,"int32",new Int32Array(g));return t.uploadToGPU(x.dataId),x}var RI=class{constructor(e,t,o,n,s){this.uniforms="varianceEpsilon : f32,",this.workGroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(e,t),w.assertAndGetBroadcastShape(e,o),this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),n!=null&&(w.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset")),s!=null&&(w.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";this.offsetShape!=null&&(e="getOffsetByOutputIndex(index)");let t="1.0";return this.scaleShape!=null&&(t="getScaleByOutputIndex(index)"),`
      ${fe("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}};var vX={kernelName:us,backendName:"webgpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o,scale:n,offset:s,mean:i,variance:a}=r,{varianceEpsilon:l}=e,u=t,c=[o,i,a],p=null;s!=null&&(p=s.shape,c.push(s));let m=null;n!=null&&(m=n.shape,c.push(n));let f=new RI(o.shape,i.shape,a.shape,p,m),d=[{type:"float32",data:[l]}];return u.runWebGPUProgram(f,c,o.dtype,d)}};function $ge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:d}=o,h=w.convertConv2DDataFormat(c),g=w.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,h);return bI({x:n,filter:s,convInfo:g,backend:t,bias:i,preluActivationWeights:a,leakyreluAlpha:d,activation:f})}var TX={kernelName:Fi,backendName:"webgpu",kernelFunc:$ge};function Ege(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=e,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,d=c;d==null&&(d=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(l,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${d}'`);let h=w.computeConv2DInfo(n.shape,s.shape,l,d,u,p,!0),g=[n,s],x=i!=null,b=a!=null;x&&g.push(i),b&&g.push(a);let C=[{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inHeight,h.inWidth]}],S;return h.inHeight>4&&h.inWidth>4&&h.strideHeight===1&&h.strideWidth===1&&h.inChannels===h.outChannels&&h.dilationHeight===1&&h.dilationWidth===1&&h.inChannels%4===0?S=new id(h,x,m,b):(S=new ad(h,x,m,b),C.push({type:"int32",data:[h.filterHeight]},{type:"int32",data:[h.filterWidth]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]})),m==="leakyrelu"&&(C.push({type:"float32",data:[f]}),S.uniforms+=" alpha : f32,"),t.runWebGPUProgram(S,g,"float32",C)}var kX={kernelName:_i,backendName:"webgpu",kernelFunc:Ege};var AI=class{constructor(e,t){this.variableNames=["A","indices"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${Jt(e)},`}getUserCode(){let e;return this.sliceDim>1?e="uniforms.strides[j]":e="uniforms.strides",`
      ${fe("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}};function Rge(r){let{inputs:e,backend:t}=r,{params:o,indices:n}=e,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=w.prepareAndValidate(o,n),m=ve({inputs:{x:n},backend:t,attrs:{shape:[u,i]}}),f=ve({inputs:{x:o},backend:t,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(t.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let b=t.readSync(n.dataId),C=t.bufferSync(o),S=lq(b,C,o.dtype,u,i,c,p,o.shape,a);return t.makeTensorInfo(l,o.dtype,S.values)}let d=new AI(i,[u,c]),h=[{type:"int32",data:[i]},{type:"int32",data:p}],g=t.runWebGPUProgram(d,[f,m],f.dtype,h),x=ve({inputs:{x:g},backend:t,attrs:{shape:l}});return t.disposeData(m.dataId),t.disposeData(f.dataId),t.disposeData(g.dataId),x}var NX={kernelName:da,backendName:"webgpu",kernelFunc:Rge};var DI=class{constructor(e,t){this.variableNames=["A","indices"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="gather"}getUserCode(){let e=Age(this.aShape);return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `}};function Age(r){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],t=[];for(let o=0;o<r.length;o++)o===2?t.push("indexZ"):t.push(`${e[o]}`);return t.join()}function e$(r){let{inputs:e,backend:t,attrs:o}=r,{x:n,indices:s}=e,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0],u=w.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=ve({inputs:{x:n},backend:t,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=ve({inputs:{x:s},backend:t,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let d=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(t.shouldExecuteOnCPU([n,s])){let C=t.tensorMap.get(f.dataId).values,S=te(f.shape,f.dtype,C),N=t.tensorMap.get(m.dataId).values,$=te(m.shape,m.dtype,N),R=uq($,S,d);return p.forEach(F=>t.disposeData(F.dataId)),t.makeTensorInfo(u.outputShape,R.dtype,R.values)}let h=new DI(m.shape,d),g=t.runWebGPUProgram(h,[m,f],m.dtype);p.push(g);let x=ve({inputs:{x:g},backend:t,attrs:{shape:u.outputShape}});return p.forEach(b=>t.disposeData(b.dataId)),x}var $X={kernelName:cs,backendName:"webgpu",kernelFunc:e$};var Dge=ut({opType:Te.GREATER,cpuKernelImpl:pq,dtype:"bool"}),EX={kernelName:wn,backendName:"webgpu",kernelFunc:Dge};var Fge=ut({opType:Te.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:cq}),RX={kernelName:wo,backendName:"webgpu",kernelFunc:Fge};var _ge=Qe({opType:me.IS_NAN,dtype:"bool"}),AX={kernelName:Sn,backendName:"webgpu",kernelFunc:_ge};function Oge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{alpha:s}=o,i=[{type:"float32",data:[s]}],a=new li(n.shape,me.LEAKYRELU);return a.uniforms="alpha : f32,",t.runWebGPUProgram(a,[n],"float32",i)}var DX={kernelName:ps,backendName:"webgpu",kernelFunc:Oge};var Pge=ut({opType:Te.LESS,dtype:"bool",cpuKernelImpl:fq}),FX={kernelName:In,backendName:"webgpu",kernelFunc:Pge};var Lge=ut({opType:Te.LESS_EQUAL,dtype:"bool",cpuKernelImpl:mq}),_X={kernelName:vn,backendName:"webgpu",kernelFunc:Lge};var zge=Qe({opType:me.LOG,cpuKernelImpl:dq}),OX={kernelName:Io,backendName:"webgpu",kernelFunc:zge};var Bge=ut({opType:Te.LOGICAL_AND,dtype:"bool"}),PX={kernelName:Si,backendName:"webgpu",kernelFunc:Bge};var Mge=Qe({opType:me.LOGICAL_NOT}),LX={kernelName:Ii,backendName:"webgpu",kernelFunc:Mge};var Vge=ut({opType:Te.MAX,cpuKernelImpl:gq}),zX={kernelName:vo,backendName:"webgpu",kernelFunc:Vge};function Gge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1,c=w.computePool2DInfo(n.shape,s,i,u,a,l);return fI(n,c,"max",t)}var BX={kernelName:fs,backendName:"webgpu",kernelFunc:Gge};function Uge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;return sl(n,s,i,"min",t)}var MX={kernelName:hs,backendName:"webgpu",kernelFunc:Uge};var Wge=ut({opType:Te.MIN,cpuKernelImpl:xq}),VX={kernelName:To,backendName:"webgpu",kernelFunc:Wge};var FI=class{constructor(e,t,o){this.uniforms="",this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((n,s)=>n[0]+e[s]+n[1]),this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.xShape=e,t.map((n,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.offset=o==="reflect"?0:1,this.shaderKey=`mirrorPad_${o}`}getUserCode(){let e=this.xShape.length,t=this.xShape.map((u,c)=>`uniforms.pad${c}[0]`).join(","),o=this.xShape.map((u,c)=>`uniforms.pad${c}[0] + uniforms.xShape${e>1?`[${c}]`:""}`).join(","),n=e===1?"start":"start[i]",s=e===1?"end":"end[i]",i=e===1?"outC":"outC[i]",a=Jt(e),l=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let start = ${a}(${t});
          let end = ${a}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${i} < ${n}) {
              ${i} = ${n} * 2 - ${i} - ${this.offset};
            } else if(${i} >= ${s}) {
              ${i} = (${s} - 1) * 2 - ${i} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${l}));
        }
      }
    `}};var GX={kernelName:gs,backendName:"webgpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{x:o}=r,{paddings:n,mode:s}=e,i=t,a=n.map(c=>({type:"int32",data:[c[0],c[1]]})),l=new FI(o.shape,n,s);return i.runWebGPUProgram(l,[o],o.dtype,a)}};function Hge(r){let{inputs:e,backend:t}=r,{x:o}=e;if(t.shouldExecuteOnCPU([o])){let s=t.tensorMap.get(o.dataId),[i,a]=bq(s.values,o.shape,o.dtype);return t.makeTensorInfo(a,o.dtype,i)}let n=new li(o.shape,me.NEG);return t.runWebGPUProgram(n,[o],o.dtype)}var UX={kernelName:Tn,backendName:"webgpu",kernelFunc:Hge};function Kge(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=t.readSync(n.dataId),c=t.readSync(s.dataId),{selectedIndices:p}=vt.nonMaxSuppressionV3Impl(u,c,i,a,l);return t.makeTensorInfo([p.length],"int32",new Int32Array(p))}var WX={kernelName:ya,backendName:"webgpu",kernelFunc:Kge};function qge(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:e,backend:t,attrs:o}=r,{boxes:n,scores:s}=e,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=t.readSync(n.dataId),p=t.readSync(s.dataId),m=i,f=a,d=l,h=u,{selectedIndices:g,selectedScores:x}=vt.nonMaxSuppressionV5Impl(c,p,m,f,d,h);return[t.makeTensorInfo([g.length],"int32",new Int32Array(g)),t.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var HX={kernelName:ba,backendName:"webgpu",kernelFunc:qge};function jg(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="complex64"){let n=Bl({inputs:{input:o},backend:t}),s=jg({inputs:{x:n},backend:t}),i=Mp({inputs:{input:o},backend:t}),a=jg({inputs:{x:i},backend:t}),l=ta({inputs:{real:s,imag:a},backend:t});return t.disposeData(n.dataId),t.disposeData(s.dataId),t.disposeData(i.dataId),t.disposeData(a.dataId),l}else return jn({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:t})}var KX={kernelName:Rs,backendName:"webgpu",kernelFunc:jg};function qX(r){let{inputs:e,backend:t}=r,{x:o}=e;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Bl({inputs:{input:o},backend:t}),s=qX({inputs:{x:n},backend:t}),i=Mp({inputs:{input:o},backend:t}),a=jg({inputs:{x:i},backend:t}),l=ta({inputs:{real:s,imag:a},backend:t});return t.disposeData(n.dataId),t.disposeData(s.dataId),t.disposeData(i.dataId),t.disposeData(a.dataId),l}else return jn({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:t})}var XX={kernelName:xs,backendName:"webgpu",kernelFunc:qX};function Xge(r){let{inputs:e,backend:t,attrs:o}=r,{axis:n}=o;if(e.length===1)return kI({inputs:{input:e[0]},backend:t,attrs:{dim:n}});let s=e[0].shape,i=e[0].dtype;e.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=e.map(c=>{let p=kI({inputs:{input:c},backend:t,attrs:{dim:n}});return a.push(p),p}),u=YN({inputs:l,backend:t,attrs:{axis:n}});return a.forEach(c=>t.disposeData(c.dataId)),u}var jX={kernelName:ys,backendName:"webgpu",kernelFunc:Xge};var _I=class{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((o,n)=>o[0]+e[n]+o[1]),this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),t.map((o,n)=>{this.uniforms+=` pad${n} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){let e=this.xShape.length,t=Jt(e),o=this.xShape.map((p,m)=>`uniforms.pad${m}[0]`).join(","),n=this.xShape.map((p,m)=>`uniforms.pad${m}[0] + uniforms.xShape${e>1?`[${m}]`:""}`).join(","),s=e>1?`${t}(${o})`:`${o}`,i=e>1?`${t}(${n})`:`${n}`,a=e>1?"any(outC < start)":"outC < start",l=e>1?"any(outC >= end)":"outC >= end",u=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let start = ${s};
          let end = ${i};
          let outC = getCoordsFromIndex(index);

          if (${a} || ${l}) {
            setOutputAtIndex(index, uniforms.constantValue);
          } else {
            let coords = outC - start;
            setOutputAtIndex(index, getX(${u}));
          }
        }
      }
    `}};var t$=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{paddings:s,constantValue:i}=o;if(s.every(u=>y.arraysEqual(u,[0,0])))return ar({inputs:{x:n},backend:t});if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return jn({backend:t,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=[{type:"float32",data:[i]}];s.map(u=>a.push({type:"int32",data:[u[0],u[1]]}));let l=new _I(n.shape,s);return t.runWebGPUProgram(l,[n],n.dtype,a)},YX={kernelName:bs,backendName:"webgpu",kernelFunc:t$};var jge=ut({opType:Te.POW}),QX={kernelName:Nn,backendName:"webgpu",kernelFunc:jge};function Yge(r){let{inputs:e,backend:t}=r,{x:o,alpha:n}=e,s=new Bp(Te.PRELU,o.shape,n.shape);return t.runWebGPUProgram(s,[o,n],"float32")}var ZX={kernelName:Cs,backendName:"webgpu",kernelFunc:Yge};function Qge(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{axis:s,keepDims:i}=o;return sl(n,s,i,"prod",t)}var JX={kernelName:$n,backendName:"webgpu",kernelFunc:Qge};var Zge=r=>{let{backend:e,attrs:t}=r,{start:o,stop:n,step:s,dtype:i}=t,a=Sq(o,n,s,i);return e.makeTensorInfo([a.length],i,a)},ej={kernelName:wa,backendName:"webgpu",kernelFunc:Zge};var r$=ut({opType:Te.DIV}),tj={kernelName:xn,backendName:"webgpu",kernelFunc:r$};var Jge=Qe({opType:me.RECIPROCAL}),rj={kernelName:En,backendName:"webgpu",kernelFunc:Jge};var exe=Qe({opType:me.RELU}),oj={kernelName:Rn,backendName:"webgpu",kernelFunc:exe};var txe=Qe({opType:me.RELU6}),nj={kernelName:An,backendName:"webgpu",kernelFunc:txe};var OI=class{constructor(e,t,o){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,o,e[3]],this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${fe("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function rxe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,size:i,halfPixelCenters:a}=o,[l,u]=i,c=s&&l>1?1:0,p=s&&u>1?1:0,f=[{type:"float32",data:[c,p]},{type:"float32",data:[a?.5:0]}],d=new OI(n.shape,l,u);return t.runWebGPUProgram(d,[n],"float32",f)}var sj={kernelName:Is,backendName:"webgpu",kernelFunc:rxe};var PI=class{constructor(e,t,o,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,o,e[3]],this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let e;return this.halfPixelCenters?e="max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":e="vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${fe("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function oxe(r){let{inputs:e,backend:t,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=s&&l>1?1:0,p=s&&u>1?1:0,f=[{type:"float32",data:[c,p]},{type:"float32",data:[s?.5:0]}],d=new PI(n.shape,l,u,i);return t.runWebGPUProgram(d,[n],n.dtype,f)}var ij={kernelName:Ss,backendName:"webgpu",kernelFunc:oxe};var LI=class{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=e,typeof t=="number"?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${fe("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}};var aj={kernelName:Aa,backendName:"webgpu",kernelFunc:({inputs:r,attrs:e,backend:t})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=e,a=t,l=new LI(o.shape,s),[u,c]=w.getImageCenter(i,o.shape[1],o.shape[2]),p=[{type:"float32",data:[u]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(n)]},{type:"float32",data:[Math.cos(n)]}];return typeof s=="number"?p.push({type:"float32",data:[Number.parseFloat(s.toFixed(2))]}):p.push({type:"float32",data:s}),a.runWebGPUProgram(l,[o],o.dtype,p)}};var nxe=Qe({opType:me.RSQRT,cpuKernelImpl:Iq}),lj={kernelName:No,backendName:"webgpu",kernelFunc:nxe};var xc=class{constructor(e,t,o,n,s,i,a,l=!0){this.variableNames=["updates","indices"],this.workGroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=a,this.sumDupeIndices=l,this.dispatchLayout=xe(e),this.dispatch=pe(this.dispatchLayout,e,this.workGroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${a}_${l}`;let u=Jt(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, size: i32,`,this.updatesRank=n,this.indicesRank=o}getUserCode(){let e="";this.indicesRank===1?e="coords[0]":this.indicesRank===2&&(e="coords[0], j");let t=`getIndices(${e})`,o=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",s="";this.dispatchLayout.x.length===1?(n="flattenedIndex",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):this.dispatchLayout.x.length===2&&(n="vec2<i32>(flattenedIndex, coords[1])",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let a=`getUpdates(${Array.from({length:this.updatesRank},(c,p)=>`coords[${p}]`).join(", ")})`,l=(c,p)=>{let m=`atomicAdd(${c}, bitcast<i32>(${p}))`;this.type==="float32"&&(m=`
          {
            var oldBits = 0;
            var newBits = bitcast<i32>(${p});
            loop {
              let info = atomicCompareExchangeWeak(${c}, oldBits, newBits);
              if (info.exchanged) {
                break;
              }
              oldBits = info.old_value;
              let oldValue = bitcast<f32>(oldBits);
              let newValue = oldValue + (${p});
              newBits = bitcast<i32>(newValue);
            }
          }
        `);let f=`atomicStore(${c}, bitcast<i32>(${p}));`;return this.sumDupeIndices?m:f};return`
    ${s}

      ${fe("index")} {
        if (index < uniforms.size) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${rd(this.type,!1)}(${a});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${l("&result[flatIndex]","updateValue")};
        }
      }`}};function sxe(r){let{inputs:e,backend:t,attrs:o}=r,{indices:n,updates:s}=e,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=w.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return t.makeTensorInfo(i,n.dtype);let f=ve({inputs:{x:n},backend:t,attrs:{shape:[l,a]}}),d=ve({inputs:{x:s},backend:t,attrs:{shape:[l,u]}}),h=d.dtype,g=jn({backend:t,attrs:{shape:m,value:0,dtype:h}}),x=y.sizeFromShape(d.shape),b=[{type:"int32",data:[a]},{type:"int32",data:c},{type:"int32",data:[x]}],C=new xc(d.shape,a,f.shape.length,d.shape.length,c,m,h),S=t.runWebGPUProgram(C,[d,f],h,b,g),I=ve({inputs:{x:S},backend:t,attrs:{shape:i}});return t.disposeData(f.dataId),t.disposeData(d.dataId),t.disposeData(S.dataId),I}var uj={kernelName:Ia,backendName:"webgpu",kernelFunc:sxe};var zI=class{constructor(e,t,o){this.variableNames=["c","a","b"],this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.cRank=e,this.rank=o,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(this.rank===1)t="resRC",e="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let a=0;a<this.outputShape.length;a++)i.push(`${n[a]}`),a<this.cRank&&s.push(`${n[a]}`);e=s.join(),t=i.join()}return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `}};function ixe(r){let{inputs:e,backend:t}=r,{condition:o,t:n,e:s}=e,i=new zI(o.shape.length,n.shape,n.shape.length);return t.runWebGPUProgram(i,[o,n,s],Ye(n.dtype,s.dtype))}var cj={kernelName:vs,backendName:"webgpu",kernelFunc:ixe};var axe=Qe({opType:me.SIGMOID}),pj={kernelName:$o,backendName:"webgpu",kernelFunc:axe};var lxe=Qe({opType:me.SIN}),mj={kernelName:Fn,backendName:"webgpu",kernelFunc:lxe};var uxe=Qe({opType:me.SINH}),fj={kernelName:_n,backendName:"webgpu",kernelFunc:uxe};var o$=ut({opType:Te.SUB,cpuKernelImpl:Eq,supportsComplex:!0}),dj={kernelName:Ao,backendName:"webgpu",kernelFunc:o$};function cxe(r){let{inputs:e,backend:t,attrs:o}=r,{logits:n}=e,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=Kg({inputs:{x:n},backend:t,attrs:{reductionIndices:i,keepDims:!1}}),l=w.expandShapeToKeepDim(a.shape,i),u=ve({inputs:{x:a},backend:t,attrs:{shape:l}}),c=o$({inputs:{a:n,b:u},backend:t}),p=ZN({inputs:{x:c},backend:t}),m=Xg({inputs:{x:p},backend:t,attrs:{axis:i,keepDims:!1}}),f=ve({inputs:{x:m},backend:t,attrs:{shape:l}}),d=r$({inputs:{a:p,b:f},backend:t});return t.disposeData(a.dataId),t.disposeData(u.dataId),t.disposeData(c.dataId),t.disposeData(p.dataId),t.disposeData(m.dataId),t.disposeData(f.dataId),d}var hj={kernelName:$s,backendName:"webgpu",kernelFunc:cxe};var pxe=r=>{let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=t$({inputs:{x:n},backend:t,attrs:{paddings:l,constantValue:0}}),p=w.getReshaped(c.shape,s,a,!1),m=w.getPermuted(p.length,s.length,!1),f=w.getReshapedPermuted(c.shape,s,a,!1),d=ve({inputs:{x:c},backend:t,attrs:{shape:p}}),h=fo({inputs:{x:d},backend:t,attrs:{perm:m}}),g=ve({inputs:{x:h},backend:t,attrs:{shape:f}});return u.push(c),u.push(d),u.push(h),u.forEach(x=>t.disposeData(x.dataId)),g},gj={kernelName:ks,backendName:"webgpu",kernelFunc:pxe};var BI=class{constructor(e,t){this.variableNames=["A"],this.workGroupSize=[64,1,1],this.size=!0;let o=new Array(e.length);for(let n=0;n<o.length;n++)o[n]=e[n]*t[n];this.outputShape=o,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let e=mxe(this.rank,"uniforms.");return`
      ${fe("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `}};function mxe(r,e=""){if(r>=5)throw Error(`Tile for rank ${r} is not yet supported`);if(r===1)return`(resRC % ${e}aShape)`;let t=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r;n++)o.push(`(${t[n]} % ${e}aShape[${n}])`);return o.join()}function n$(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{reps:s}=o;if(t.shouldExecuteOnCPU([n])||n.dtype==="string"||n.shape.length>=5){let l=t.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=te(n.shape,n.dtype,u),p=Rq(c,s);return t.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new BI(n.shape,s);return t.runWebGPUProgram(i,[n],n.dtype)}var xj={kernelName:Ko,backendName:"webgpu",kernelFunc:n$};function fxe(r){let{inputs:e,backend:t,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=e,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=w.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let R=t.bufferSync(n),F=t.bufferSync(s),_=y.decodeString(t.readSync(i.dataId)[0]),B=vq(R,F,a,m,c,u,l,p,_,f);return t.makeTensorInfo(a,B.dtype,B.values)}let d=[m/c,c],h=ve({inputs:{x:n},backend:t,attrs:{shape:[u,l]}}),g=s.shape.length?ve({inputs:{x:s},backend:t,attrs:{shape:[u,c]}}):ar({inputs:{x:s},backend:t}),x=g.dtype,b=t.makeTensorInfo([],x,y.makeZerosTypedArray(1,x)),C=ve({inputs:{x:i},backend:t,attrs:{shape:Array(d.length).fill(1)}}),S=n$({inputs:{x:C},backend:t,attrs:{reps:d}}),I=y.sizeFromShape([u,c]),N=[{type:"int32",data:[l]},{type:"int32",data:p},{type:"int32",data:[I]}];switch(u){case 0:break;case 1:{let R=new xc([u,c],l,h.shape.length,g.shape.length,p,d,x,f);t.runWebGPUProgram(R,[g,h],x,N,S)}break;default:{let R=new xc([u,c],l,h.shape.length,b.shape.length,p,d,x,f);t.runWebGPUProgram(R,[b,h],x,N,S)}{let R=new xc([u,c],l,h.shape.length,g.shape.length,p,d,x);t.runWebGPUProgram(R,[g,h],x,N,S)}}let $=ve({inputs:{x:S},backend:t,attrs:{shape:a}});return t.disposeData(h.dataId),t.disposeData(g.dataId),t.disposeData(C.dataId),t.disposeData(b.dataId),t.disposeData(S.dataId),$}var yj={kernelName:va,backendName:"webgpu",kernelFunc:fxe};function dxe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=w.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let d=ra({inputs:{x:n},backend:t,attrs:{begin:c,size:f}});return c[a]+=m,d})}var bj={kernelName:Ns,backendName:"webgpu",kernelFunc:dxe};var hxe=Qe({opType:me.SQRT}),Cj={kernelName:Eo,backendName:"webgpu",kernelFunc:hxe};var wj={kernelName:Ta,backendName:"webgpu",kernelFunc:({inputs:r,backend:e})=>{let{x:t}=r,o=e,n=new li(t.shape,me.SQUARE);return o.runWebGPUProgram(n,[t],t.dtype)}};var gxe=ut({opType:Te.SQUARED_DIFFERENCE}),Sj={kernelName:Ro,backendName:"webgpu",kernelFunc:gxe};var MI=class{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize,[this.workPerThread,1,1]);let t=Jt(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e=this.outputShape.length,t="";if(e===1)t="coords * uniforms.strides + uniforms.begin";else{let n=0;t=this.outputShape.map((s,i)=>(n++,this.outputShape.length===1?`coords * uniforms.strides[${i}] + uniforms.begin[${i}]`:`coords[${n-1}] * uniforms.strides[${i}] + uniforms.begin[${i}]`)).join(",")}return`
       ${fe("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `}};function xxe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:d,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=rt.sliceInfo(n.shape,s,i,a,l,u,c,p,m),I;if(h)I=ve({inputs:{x:n},backend:t,attrs:{shape:d}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let N=rt.computeOutShape(b,C,S),$=ra({inputs:{x:n},backend:t,attrs:{begin:b,size:N}});I=ve({inputs:{x:$},backend:t,attrs:{shape:d}}),t.disposeData($.dataId)}else if(t.shouldExecuteOnCPU([n])){let $=t.readSync(n.dataId),R=te(n.shape,n.dtype,$),F=Nq(f,R,S,b);I=t.makeTensorInfo(d,n.dtype,F.values)}else{let $=new MI(f),R=[{type:"int32",data:b},{type:"int32",data:S}],F=t.runWebGPUProgram($,[n],n.dtype,R);I=ve({inputs:{x:F},backend:t,attrs:{shape:d}}),t.disposeData(F.dataId)}return I}var Ij={kernelName:ka,backendName:"webgpu",kernelFunc:xxe};function yxe(r){let{inputs:e,backend:t,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=e,m=t.readSync(c.dataId),f=t.readSync(p.dataId),[d,h]=$q(m,f,n,s,i,a,l,u);return[t.makeTensorInfo([d.length],"string",d),t.makeTensorInfo(p.shape,"int32",h)]}var vj={kernelName:Na,backendName:"webgpu",kernelFunc:yxe};var bxe=Qe({opType:me.TANH}),Tj={kernelName:On,backendName:"webgpu",kernelFunc:bxe};var VI=class{constructor(e){this.variableNames=["x","indices"],this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${fe("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}},GI=class{constructor(e){this.variableNames=["x","indices"],this.workGroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${fe("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}};function ud(r,e){e!==null&&r.disposeData(e.dataId)}function kj(r){let e=1;for(;e<r;)e*=2;return e}function Cxe(r){let{inputs:e,backend:t,attrs:o}=r,{x:n}=e,{k:s,sorted:i}=o,a=n.shape,l=a[a.length-1];if(t.shouldExecuteOnCPU([n])){let I=t.readSync(n.dataId),[N,$]=Aq(I,a,n.dtype,s,i);return[t.makeTensorInfo(N.shape,N.dtype,N.values),t.makeTensorInfo($.shape,$.dtype,$.values)]}if(s===0)return a[a.length-1]=0,[t.makeTensorInfo(a,n.dtype,[]),t.makeTensorInfo(a,"int32",[])];if(l===1)return[n,jn({attrs:{shape:a,dtype:"int32",value:0},backend:t})];let c=y.sizeFromShape(a)/l,p=ve({inputs:{x:n},attrs:{shape:[c,l]},backend:t}),m=kj(s),f=kj(l),d=null,h=()=>d===null?[p,p]:[p,d],g=(I,N,$)=>{let R=h(),F=new VI($),B=[{type:"int32",data:[l]},{type:"int32",data:[d===null?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[I]},{type:"int32",data:[N]}],V=d;d=t.runWebGPUProgram(F,R,"int32",B),ud(t,V)};for(let I=1;I<m;I*=2){let N=I*2;for(let $=I;$>=1;$/=2)g(N,$,[c,f])}for(let I=f;I>m;I/=2){let N=h(),$=new GI([c,I/2]),F=[{type:"int32",data:[l]},{type:"int32",data:[d===null?1:0]},{type:"int32",data:[m]}],_=d;d=t.runWebGPUProgram($,N,"int32",F),ud(t,_);let B=m/2,V=B*2;for(let G=B;G>=1;G/=2)g(V,G,d.shape)}let x=d;d=ra({inputs:{x:d},backend:t,attrs:{begin:0,size:[c,s]}}),ud(t,x);let b=e$({inputs:{x:p,indices:d},backend:t,attrs:{axis:1,batchDims:1}});ud(t,p);let C=a.slice(0,-1);C.push(s),x=d,d=ve({inputs:{x:d},attrs:{shape:C},backend:t}),ud(t,x);let S=b;return b=ve({inputs:{x:b},attrs:{shape:C},backend:t}),ud(t,S),[b,d]}var Nj={kernelName:$a,backendName:"webgpu",kernelFunc:Cxe};var UI=class{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workGroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=xe(this.outputShape),this.dispatch=pe(this.dispatchLayout,this.outputShape,this.workGroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${fe("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}};function wxe(r){let{inputs:e,backend:t,attrs:o}=r,{image:n,transforms:s}=e,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[d,h]=u??[p,m],g=[c,d,h,f],x=new UI(g),b=i==="nearest"?1:2,C;switch(a){case"constant":C=1;break;case"reflect":C=2;break;case"wrap":C=3;break;case"nearest":C=4;break;default:C=1;break}let S=[{type:"int32",data:[b]},{type:"int32",data:[C]},{type:"float32",data:[l]}];return t.runWebGPUProgram(x,[n,s],"float32",S)}var $j={kernelName:Ea,backendName:"webgpu",kernelFunc:wxe};function Sxe(r){let{inputs:e,backend:t,attrs:o}=r,{value:n}=e,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let h=0;h<a;h++)h!==s&&(u[c++]=i.shape[h]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let d=new Array(l);for(let h=0;h<d.length;h++){m[s]=h;let g=ra({inputs:{x:i},backend:t,attrs:{begin:m,size:f}}),x=ve({inputs:{x:g},backend:t,attrs:{shape:u}});d[h]=x,p.push(g)}return p.forEach(h=>t.disposeData(h.dataId)),d}var Ej={kernelName:Es,backendName:"webgpu",kernelFunc:Sxe};var Ixe=[QK,Fq,_q,Oq,Lq,zq,Bq,Gq,Uq,Hq,jq,Yq,Qq,JK,Jq,tX,rX,oX,nX,sX,lX,uX,cX,pX,dX,hX,gX,xX,yX,bX,jK,CX,IX,wX,SX,vX,TX,kX,NX,$X,EX,RX,ZK,Zq,AX,DX,FX,_X,OX,PX,LX,Mq,zX,BX,Vq,MX,VX,GX,mX,UX,WX,HX,Kq,XX,jX,YX,QX,ZX,JX,ej,qq,tj,rj,oj,nj,YK,sj,ij,aj,lj,uj,cj,pj,mj,fj,Wq,Ij,vj,hj,gj,yj,bj,Cj,wj,Sj,dj,fX,Tj,xj,Nj,$j,Pq,Ej,KX];for(let r of Ixe)Tu(r);var Wo=document.getElementById("video"),il=document.getElementById("canvas"),WI=document.createElement("canvas"),Rj=WI.getContext("2d"),vxe=document.getElementById("markregions"),Txe=document.getElementById("blurnude"),kxe=document.getElementById("blursexy"),Fr=il.getContext("2d"),Ir={},KI,HI=r=>console.log(r),ho={modelPath:"model/model.json",videoPath:"samples/video.webm",minScore:.3,maxResults:50,iouThreshold:.5,outputNodes:["output1","output2","output3"],blurRadius:25,resolution:[1280,720]},Nxe=["exposed anus","exposed armpits","belly","exposed belly","buttocks","exposed buttocks","female face","male face","feet","exposed feet","breast","exposed breast","vagina","exposed vagina","male breast","exposed male breast"],Yg={person:[6,7],sexy:[1,2,3,4,8,9,10,15],nude:[0,5,11,12,13]};async function $xe(r,e,t,o){let n=await r.array(),s=await e.data(),i=await t.data(),a=await qa.nonMaxSuppressionAsync(n[0],s,ho.maxResults,ho.iouThreshold,ho.minScore),l=await a.data();ke(a);let u=[];for(let p in l){let m=parseInt(p);u.push({score:s[p],id:i[m],class:Nxe[i[m]],box:[Math.trunc(n[0][m][0]),Math.trunc(n[0][m][1]),Math.trunc(n[0][m][3]-n[0][m][1]),Math.trunc(n[0][m][2]-n[0][m][0])]})}return{input:{width:o.shape[2],height:o.shape[1]},person:u.filter(p=>Yg.person.includes(p.id)).length>0,sexy:u.filter(p=>Yg.sexy.includes(p.id)).length>0,nude:u.filter(p=>Yg.nude.includes(p.id)).length>0,parts:u}}function Aj({left:r=0,top:e=0,width:t=0,height:o=0}){t===0||o===0||il.width===0||il.height===0||(WI.width=t/ho.blurRadius+1,WI.height=o/ho.blurRadius+1,Rj.imageSmoothingEnabled=!0,Rj.drawImage(il,r,e,t,o,0,0,t/ho.blurRadius,o/ho.blurRadius),Fr.drawImage(WI,r,e,t,o))}function Exe({x:r=0,y:e=0,width:t=0,height:o=0,radius:n=8,lineWidth:s=2,color:i="white",title:a="",font:l='16px "Segoe UI"'}){Fr.lineWidth=s,Fr.beginPath(),Fr.moveTo(r+n,e),Fr.lineTo(r+t-n,e),Fr.quadraticCurveTo(r+t,e,r+t,e+n),Fr.lineTo(r+t,e+o-n),Fr.quadraticCurveTo(r+t,e+o,r+t-n,e+o),Fr.lineTo(r+n,e+o),Fr.quadraticCurveTo(r,e+o,r,e+o-n),Fr.lineTo(r,e+n),Fr.quadraticCurveTo(r,e,r+n,e),Fr.closePath(),Fr.strokeStyle=i,Fr.stroke(),Fr.lineWidth=2,Fr.fillStyle=i,Fr.font=l,Fr.fillText(a,r+4,e-4)}function Rxe(r){for(let e of r.parts)Yg.nude.includes(e.id)&&Txe.checked&&Aj({left:e.box[0],top:e.box[1],width:e.box[2],height:e.box[3]}),Yg.sexy.includes(e.id)&&kxe.checked&&Aj({left:e.box[0],top:e.box[1],width:e.box[2],height:e.box[3]}),vxe.checked&&Exe({x:e.box[0],y:e.box[1],width:e.box[2],height:e.box[3],title:`${Math.round(100*e.score)}% ${e.class}`})}var s$=0;async function Dj(){if(il.width!==Wo.videoWidth&&(il.width=Wo.videoWidth),il.height!==Wo.videoHeight&&(il.height=Wo.videoHeight),Wo.currentTime!==s$&&il.width>0&&KI&&Wo.readyState>=2){s$=Wo.currentTime,Ir.buffer=await nm.fromPixelsAsync(Wo),Ir.resize=ho.resolution[0]>0&&ho.resolution[1]>0&&(ho.resolution[0]!==Wo.videoWidth||ho.resolution[1]!==Wo.videoHeight)?qa.resizeNearestNeighbor(Ir.buffer,[ho.resolution[1],ho.resolution[0]]):Ir.buffer,Ir.cast=j(Ir.resize,"float32"),Ir.batch=cr(Ir.cast,0);let r=Date.now();[Ir.boxes,Ir.scores,Ir.classes]=await KI.executeAsync(Ir.batch,ho.outputNodes);let e=Date.now(),t=await $xe(Ir.boxes,Ir.scores,Ir.classes,Ir.cast);await nm.toPixels(Ir.resize,il),Rxe(t),HI({ts:s$,time:e-r,res:t,t:Ir}),Object.keys(Ir).forEach(o=>ke(Ir[o]))}requestAnimationFrame(Dj)}async function Axe(){sr().registryFactory.webgpu&&navigator?.gpu?await gx("webgpu"):await gx("webgl"),D().set("WEBGL_USE_SHAPES_UNIFORMS",!0),await x2(),HI({tf:yx,backend:y2(),available:sr().registryFactory,flags:D().getFlags()}),KI=await iT(ho.modelPath),HI({model:KI}),Wo.oncanplay=()=>HI({video:Wo.src,width:Wo.videoWidth,height:Wo.videoHeight}),Wo.src=ho.videoPath,await Dj()}window.onload=Axe;
//# sourceMappingURL=index.js.map
